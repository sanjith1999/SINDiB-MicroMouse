
MicromouseFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbfc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030cc  0800bd90  0800bd90  0001bd90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee5c  0800ee5c  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee5c  0800ee5c  0001ee5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee64  0800ee64  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee64  0800ee64  0001ee64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee68  0800ee68  0001ee68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800ee6c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020228  2**0
                  CONTENTS
 10 .bss          000007d8  20000228  20000228  00020228  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a00  20000a00  00020228  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 14 .debug_info   000175c5  00000000  00000000  0002029b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003848  00000000  00000000  00037860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012d8  00000000  00000000  0003b0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e87  00000000  00000000  0003c380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028175  00000000  00000000  0003d207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ad07  00000000  00000000  0006537c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5e27  00000000  00000000  00080083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000619c  00000000  00000000  00155eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0015c048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bd74 	.word	0x0800bd74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	0800bd74 	.word	0x0800bd74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	; 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	3a01      	subs	r2, #1
 8000d02:	bf28      	it	cs
 8000d04:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d08:	d2ed      	bcs.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_uldivmod>:
 8000e64:	b953      	cbnz	r3, 8000e7c <__aeabi_uldivmod+0x18>
 8000e66:	b94a      	cbnz	r2, 8000e7c <__aeabi_uldivmod+0x18>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	bf08      	it	eq
 8000e6c:	2800      	cmpeq	r0, #0
 8000e6e:	bf1c      	itt	ne
 8000e70:	f04f 31ff 	movne.w	r1, #4294967295
 8000e74:	f04f 30ff 	movne.w	r0, #4294967295
 8000e78:	f000 b970 	b.w	800115c <__aeabi_idiv0>
 8000e7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e84:	f000 f806 	bl	8000e94 <__udivmoddi4>
 8000e88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e90:	b004      	add	sp, #16
 8000e92:	4770      	bx	lr

08000e94 <__udivmoddi4>:
 8000e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e98:	9e08      	ldr	r6, [sp, #32]
 8000e9a:	460d      	mov	r5, r1
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	460f      	mov	r7, r1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d14a      	bne.n	8000f3a <__udivmoddi4+0xa6>
 8000ea4:	428a      	cmp	r2, r1
 8000ea6:	4694      	mov	ip, r2
 8000ea8:	d965      	bls.n	8000f76 <__udivmoddi4+0xe2>
 8000eaa:	fab2 f382 	clz	r3, r2
 8000eae:	b143      	cbz	r3, 8000ec2 <__udivmoddi4+0x2e>
 8000eb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb4:	f1c3 0220 	rsb	r2, r3, #32
 8000eb8:	409f      	lsls	r7, r3
 8000eba:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebe:	4317      	orrs	r7, r2
 8000ec0:	409c      	lsls	r4, r3
 8000ec2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ec6:	fa1f f58c 	uxth.w	r5, ip
 8000eca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ece:	0c22      	lsrs	r2, r4, #16
 8000ed0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ed4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ed8:	fb01 f005 	mul.w	r0, r1, r5
 8000edc:	4290      	cmp	r0, r2
 8000ede:	d90a      	bls.n	8000ef6 <__udivmoddi4+0x62>
 8000ee0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ee4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ee8:	f080 811c 	bcs.w	8001124 <__udivmoddi4+0x290>
 8000eec:	4290      	cmp	r0, r2
 8000eee:	f240 8119 	bls.w	8001124 <__udivmoddi4+0x290>
 8000ef2:	3902      	subs	r1, #2
 8000ef4:	4462      	add	r2, ip
 8000ef6:	1a12      	subs	r2, r2, r0
 8000ef8:	b2a4      	uxth	r4, r4
 8000efa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000efe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f06:	fb00 f505 	mul.w	r5, r0, r5
 8000f0a:	42a5      	cmp	r5, r4
 8000f0c:	d90a      	bls.n	8000f24 <__udivmoddi4+0x90>
 8000f0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000f12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f16:	f080 8107 	bcs.w	8001128 <__udivmoddi4+0x294>
 8000f1a:	42a5      	cmp	r5, r4
 8000f1c:	f240 8104 	bls.w	8001128 <__udivmoddi4+0x294>
 8000f20:	4464      	add	r4, ip
 8000f22:	3802      	subs	r0, #2
 8000f24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f28:	1b64      	subs	r4, r4, r5
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	b11e      	cbz	r6, 8000f36 <__udivmoddi4+0xa2>
 8000f2e:	40dc      	lsrs	r4, r3
 8000f30:	2300      	movs	r3, #0
 8000f32:	e9c6 4300 	strd	r4, r3, [r6]
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0xbc>
 8000f3e:	2e00      	cmp	r6, #0
 8000f40:	f000 80ed 	beq.w	800111e <__udivmoddi4+0x28a>
 8000f44:	2100      	movs	r1, #0
 8000f46:	e9c6 0500 	strd	r0, r5, [r6]
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f50:	fab3 f183 	clz	r1, r3
 8000f54:	2900      	cmp	r1, #0
 8000f56:	d149      	bne.n	8000fec <__udivmoddi4+0x158>
 8000f58:	42ab      	cmp	r3, r5
 8000f5a:	d302      	bcc.n	8000f62 <__udivmoddi4+0xce>
 8000f5c:	4282      	cmp	r2, r0
 8000f5e:	f200 80f8 	bhi.w	8001152 <__udivmoddi4+0x2be>
 8000f62:	1a84      	subs	r4, r0, r2
 8000f64:	eb65 0203 	sbc.w	r2, r5, r3
 8000f68:	2001      	movs	r0, #1
 8000f6a:	4617      	mov	r7, r2
 8000f6c:	2e00      	cmp	r6, #0
 8000f6e:	d0e2      	beq.n	8000f36 <__udivmoddi4+0xa2>
 8000f70:	e9c6 4700 	strd	r4, r7, [r6]
 8000f74:	e7df      	b.n	8000f36 <__udivmoddi4+0xa2>
 8000f76:	b902      	cbnz	r2, 8000f7a <__udivmoddi4+0xe6>
 8000f78:	deff      	udf	#255	; 0xff
 8000f7a:	fab2 f382 	clz	r3, r2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f040 8090 	bne.w	80010a4 <__udivmoddi4+0x210>
 8000f84:	1a8a      	subs	r2, r1, r2
 8000f86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8a:	fa1f fe8c 	uxth.w	lr, ip
 8000f8e:	2101      	movs	r1, #1
 8000f90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f94:	fb07 2015 	mls	r0, r7, r5, r2
 8000f98:	0c22      	lsrs	r2, r4, #16
 8000f9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f9e:	fb0e f005 	mul.w	r0, lr, r5
 8000fa2:	4290      	cmp	r0, r2
 8000fa4:	d908      	bls.n	8000fb8 <__udivmoddi4+0x124>
 8000fa6:	eb1c 0202 	adds.w	r2, ip, r2
 8000faa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fae:	d202      	bcs.n	8000fb6 <__udivmoddi4+0x122>
 8000fb0:	4290      	cmp	r0, r2
 8000fb2:	f200 80cb 	bhi.w	800114c <__udivmoddi4+0x2b8>
 8000fb6:	4645      	mov	r5, r8
 8000fb8:	1a12      	subs	r2, r2, r0
 8000fba:	b2a4      	uxth	r4, r4
 8000fbc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000fc0:	fb07 2210 	mls	r2, r7, r0, r2
 8000fc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000fcc:	45a6      	cmp	lr, r4
 8000fce:	d908      	bls.n	8000fe2 <__udivmoddi4+0x14e>
 8000fd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000fd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fd8:	d202      	bcs.n	8000fe0 <__udivmoddi4+0x14c>
 8000fda:	45a6      	cmp	lr, r4
 8000fdc:	f200 80bb 	bhi.w	8001156 <__udivmoddi4+0x2c2>
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	eba4 040e 	sub.w	r4, r4, lr
 8000fe6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000fea:	e79f      	b.n	8000f2c <__udivmoddi4+0x98>
 8000fec:	f1c1 0720 	rsb	r7, r1, #32
 8000ff0:	408b      	lsls	r3, r1
 8000ff2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ff6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ffa:	fa05 f401 	lsl.w	r4, r5, r1
 8000ffe:	fa20 f307 	lsr.w	r3, r0, r7
 8001002:	40fd      	lsrs	r5, r7
 8001004:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001008:	4323      	orrs	r3, r4
 800100a:	fbb5 f8f9 	udiv	r8, r5, r9
 800100e:	fa1f fe8c 	uxth.w	lr, ip
 8001012:	fb09 5518 	mls	r5, r9, r8, r5
 8001016:	0c1c      	lsrs	r4, r3, #16
 8001018:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800101c:	fb08 f50e 	mul.w	r5, r8, lr
 8001020:	42a5      	cmp	r5, r4
 8001022:	fa02 f201 	lsl.w	r2, r2, r1
 8001026:	fa00 f001 	lsl.w	r0, r0, r1
 800102a:	d90b      	bls.n	8001044 <__udivmoddi4+0x1b0>
 800102c:	eb1c 0404 	adds.w	r4, ip, r4
 8001030:	f108 3aff 	add.w	sl, r8, #4294967295
 8001034:	f080 8088 	bcs.w	8001148 <__udivmoddi4+0x2b4>
 8001038:	42a5      	cmp	r5, r4
 800103a:	f240 8085 	bls.w	8001148 <__udivmoddi4+0x2b4>
 800103e:	f1a8 0802 	sub.w	r8, r8, #2
 8001042:	4464      	add	r4, ip
 8001044:	1b64      	subs	r4, r4, r5
 8001046:	b29d      	uxth	r5, r3
 8001048:	fbb4 f3f9 	udiv	r3, r4, r9
 800104c:	fb09 4413 	mls	r4, r9, r3, r4
 8001050:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001054:	fb03 fe0e 	mul.w	lr, r3, lr
 8001058:	45a6      	cmp	lr, r4
 800105a:	d908      	bls.n	800106e <__udivmoddi4+0x1da>
 800105c:	eb1c 0404 	adds.w	r4, ip, r4
 8001060:	f103 35ff 	add.w	r5, r3, #4294967295
 8001064:	d26c      	bcs.n	8001140 <__udivmoddi4+0x2ac>
 8001066:	45a6      	cmp	lr, r4
 8001068:	d96a      	bls.n	8001140 <__udivmoddi4+0x2ac>
 800106a:	3b02      	subs	r3, #2
 800106c:	4464      	add	r4, ip
 800106e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001072:	fba3 9502 	umull	r9, r5, r3, r2
 8001076:	eba4 040e 	sub.w	r4, r4, lr
 800107a:	42ac      	cmp	r4, r5
 800107c:	46c8      	mov	r8, r9
 800107e:	46ae      	mov	lr, r5
 8001080:	d356      	bcc.n	8001130 <__udivmoddi4+0x29c>
 8001082:	d053      	beq.n	800112c <__udivmoddi4+0x298>
 8001084:	b156      	cbz	r6, 800109c <__udivmoddi4+0x208>
 8001086:	ebb0 0208 	subs.w	r2, r0, r8
 800108a:	eb64 040e 	sbc.w	r4, r4, lr
 800108e:	fa04 f707 	lsl.w	r7, r4, r7
 8001092:	40ca      	lsrs	r2, r1
 8001094:	40cc      	lsrs	r4, r1
 8001096:	4317      	orrs	r7, r2
 8001098:	e9c6 7400 	strd	r7, r4, [r6]
 800109c:	4618      	mov	r0, r3
 800109e:	2100      	movs	r1, #0
 80010a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a4:	f1c3 0120 	rsb	r1, r3, #32
 80010a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80010ac:	fa20 f201 	lsr.w	r2, r0, r1
 80010b0:	fa25 f101 	lsr.w	r1, r5, r1
 80010b4:	409d      	lsls	r5, r3
 80010b6:	432a      	orrs	r2, r5
 80010b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010bc:	fa1f fe8c 	uxth.w	lr, ip
 80010c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80010c4:	fb07 1510 	mls	r5, r7, r0, r1
 80010c8:	0c11      	lsrs	r1, r2, #16
 80010ca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80010ce:	fb00 f50e 	mul.w	r5, r0, lr
 80010d2:	428d      	cmp	r5, r1
 80010d4:	fa04 f403 	lsl.w	r4, r4, r3
 80010d8:	d908      	bls.n	80010ec <__udivmoddi4+0x258>
 80010da:	eb1c 0101 	adds.w	r1, ip, r1
 80010de:	f100 38ff 	add.w	r8, r0, #4294967295
 80010e2:	d22f      	bcs.n	8001144 <__udivmoddi4+0x2b0>
 80010e4:	428d      	cmp	r5, r1
 80010e6:	d92d      	bls.n	8001144 <__udivmoddi4+0x2b0>
 80010e8:	3802      	subs	r0, #2
 80010ea:	4461      	add	r1, ip
 80010ec:	1b49      	subs	r1, r1, r5
 80010ee:	b292      	uxth	r2, r2
 80010f0:	fbb1 f5f7 	udiv	r5, r1, r7
 80010f4:	fb07 1115 	mls	r1, r7, r5, r1
 80010f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010fc:	fb05 f10e 	mul.w	r1, r5, lr
 8001100:	4291      	cmp	r1, r2
 8001102:	d908      	bls.n	8001116 <__udivmoddi4+0x282>
 8001104:	eb1c 0202 	adds.w	r2, ip, r2
 8001108:	f105 38ff 	add.w	r8, r5, #4294967295
 800110c:	d216      	bcs.n	800113c <__udivmoddi4+0x2a8>
 800110e:	4291      	cmp	r1, r2
 8001110:	d914      	bls.n	800113c <__udivmoddi4+0x2a8>
 8001112:	3d02      	subs	r5, #2
 8001114:	4462      	add	r2, ip
 8001116:	1a52      	subs	r2, r2, r1
 8001118:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800111c:	e738      	b.n	8000f90 <__udivmoddi4+0xfc>
 800111e:	4631      	mov	r1, r6
 8001120:	4630      	mov	r0, r6
 8001122:	e708      	b.n	8000f36 <__udivmoddi4+0xa2>
 8001124:	4639      	mov	r1, r7
 8001126:	e6e6      	b.n	8000ef6 <__udivmoddi4+0x62>
 8001128:	4610      	mov	r0, r2
 800112a:	e6fb      	b.n	8000f24 <__udivmoddi4+0x90>
 800112c:	4548      	cmp	r0, r9
 800112e:	d2a9      	bcs.n	8001084 <__udivmoddi4+0x1f0>
 8001130:	ebb9 0802 	subs.w	r8, r9, r2
 8001134:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001138:	3b01      	subs	r3, #1
 800113a:	e7a3      	b.n	8001084 <__udivmoddi4+0x1f0>
 800113c:	4645      	mov	r5, r8
 800113e:	e7ea      	b.n	8001116 <__udivmoddi4+0x282>
 8001140:	462b      	mov	r3, r5
 8001142:	e794      	b.n	800106e <__udivmoddi4+0x1da>
 8001144:	4640      	mov	r0, r8
 8001146:	e7d1      	b.n	80010ec <__udivmoddi4+0x258>
 8001148:	46d0      	mov	r8, sl
 800114a:	e77b      	b.n	8001044 <__udivmoddi4+0x1b0>
 800114c:	3d02      	subs	r5, #2
 800114e:	4462      	add	r2, ip
 8001150:	e732      	b.n	8000fb8 <__udivmoddi4+0x124>
 8001152:	4608      	mov	r0, r1
 8001154:	e70a      	b.n	8000f6c <__udivmoddi4+0xd8>
 8001156:	4464      	add	r4, ip
 8001158:	3802      	subs	r0, #2
 800115a:	e742      	b.n	8000fe2 <__udivmoddi4+0x14e>

0800115c <__aeabi_idiv0>:
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop

08001160 <main>:
static void MX_TIM9_Init(void);           // BUZZER SOUND GENERATION
static void MX_TIM13_Init(void);          // INTERRUPT GYRO UPDATE
static void MX_TIM14_Init(void);          // INTERRUPT ADC UPDATE: IR

int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  HAL_Init();
 8001164:	f001 fc48 	bl	80029f8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001168:	f000 f82a 	bl	80011c0 <SystemClock_Config>

  ITM_Port32(31) = 1;
 800116c:	4b13      	ldr	r3, [pc, #76]	; (80011bc <main+0x5c>)
 800116e:	2201      	movs	r2, #1
 8001170:	601a      	str	r2, [r3, #0]


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001172:	f000 fbef 	bl	8001954 <MX_GPIO_Init>
  MX_DMA_Init();
 8001176:	f000 fbcd 	bl	8001914 <MX_DMA_Init>
  MX_SPI1_Init();
 800117a:	f000 f8c3 	bl	8001304 <MX_SPI1_Init>
  MX_TIM4_Init();
 800117e:	f000 f9d3 	bl	8001528 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001182:	f000 f887 	bl	8001294 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001186:	f000 f8f3 	bl	8001370 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800118a:	f000 fb99 	bl	80018c0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800118e:	f000 f927 	bl	80013e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001192:	f000 f975 	bl	8001480 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001196:	f000 fa5f 	bl	8001658 <MX_TIM5_Init>
  MX_TIM6_Init();
 800119a:	f000 fab1 	bl	8001700 <MX_TIM6_Init>
  MX_TIM9_Init();
 800119e:	f000 fae5 	bl	800176c <MX_TIM9_Init>
  MX_TIM13_Init();
 80011a2:	f000 fb45 	bl	8001830 <MX_TIM13_Init>
  MX_TIM14_Init();
 80011a6:	f000 fb67 	bl	8001878 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  

  ITM_Port32(31) = 2;
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <main+0x5c>)
 80011ac:	2202      	movs	r2, #2
 80011ae:	601a      	str	r2, [r3, #0]

  // TRANSFERRING THE CONTROL TO OUR LOOP
  cppmain();
 80011b0:	f006 ff3a 	bl	8008028 <cppmain>

  while (1)
  {
	  return 0;
 80011b4:	2300      	movs	r3, #0
  }
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	e000007c 	.word	0xe000007c

080011c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b094      	sub	sp, #80	; 0x50
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 0320 	add.w	r3, r7, #32
 80011ca:	2230      	movs	r2, #48	; 0x30
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f008 fdad 	bl	8009d2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage*/
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	4b28      	ldr	r3, [pc, #160]	; (800128c <SystemClock_Config+0xcc>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	4a27      	ldr	r2, [pc, #156]	; (800128c <SystemClock_Config+0xcc>)
 80011ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f2:	6413      	str	r3, [r2, #64]	; 0x40
 80011f4:	4b25      	ldr	r3, [pc, #148]	; (800128c <SystemClock_Config+0xcc>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <SystemClock_Config+0xd0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a21      	ldr	r2, [pc, #132]	; (8001290 <SystemClock_Config+0xd0>)
 800120a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <SystemClock_Config+0xd0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure.  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800121c:	2301      	movs	r3, #1
 800121e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001226:	2302      	movs	r3, #2
 8001228:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800122a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001230:	2308      	movs	r3, #8
 8001232:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001234:	2332      	movs	r3, #50	; 0x32
 8001236:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001238:	2302      	movs	r3, #2
 800123a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800123c:	2304      	movs	r3, #4
 800123e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001240:	f107 0320 	add.w	r3, r7, #32
 8001244:	4618      	mov	r0, r3
 8001246:	f002 fe5d 	bl	8003f04 <HAL_RCC_OscConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001250:	f000 fc58 	bl	8001b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001254:	230f      	movs	r3, #15
 8001256:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001258:	2302      	movs	r3, #2
 800125a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001264:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	2101      	movs	r1, #1
 8001270:	4618      	mov	r0, r3
 8001272:	f003 f8bf 	bl	80043f4 <HAL_RCC_ClockConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800127c:	f000 fc42 	bl	8001b04 <Error_Handler>
  }

  /** Enables the Clock Security System*/
  HAL_RCC_EnableCSS();
 8001280:	f003 f99e 	bl	80045c0 <HAL_RCC_EnableCSS>
}
 8001284:	bf00      	nop
 8001286:	3750      	adds	r7, #80	; 0x50
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	40007000 	.word	0x40007000

08001294 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) */
  hadc1.Instance = ADC1;
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <MX_ADC1_Init+0x64>)
 800129a:	4a18      	ldr	r2, [pc, #96]	; (80012fc <MX_ADC1_Init+0x68>)
 800129c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <MX_ADC1_Init+0x64>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <MX_ADC1_Init+0x64>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <MX_ADC1_Init+0x64>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_ADC1_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_ADC1_Init+0x64>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_ADC1_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_ADC1_Init+0x64>)
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <MX_ADC1_Init+0x6c>)
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <MX_ADC1_Init+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_ADC1_Init+0x64>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <MX_ADC1_Init+0x64>)
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_ADC1_Init+0x64>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012e4:	4804      	ldr	r0, [pc, #16]	; (80012f8 <MX_ADC1_Init+0x64>)
 80012e6:	f001 fc1d 	bl	8002b24 <HAL_ADC_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 80012f0:	f000 fc08 	bl	8001b04 <Error_Handler>
  }
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000244 	.word	0x20000244
 80012fc:	40012000 	.word	0x40012000
 8001300:	0f000001 	.word	0x0f000001

08001304 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <MX_SPI1_Init+0x64>)
 800130a:	4a18      	ldr	r2, [pc, #96]	; (800136c <MX_SPI1_Init+0x68>)
 800130c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_SPI1_Init+0x64>)
 8001310:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001314:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MX_SPI1_Init+0x64>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_SPI1_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_SPI1_Init+0x64>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_SPI1_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_SPI1_Init+0x64>)
 8001330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001334:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_SPI1_Init+0x64>)
 8001338:	2218      	movs	r2, #24
 800133a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <MX_SPI1_Init+0x64>)
 800133e:	2200      	movs	r2, #0
 8001340:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_SPI1_Init+0x64>)
 8001344:	2200      	movs	r2, #0
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <MX_SPI1_Init+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_SPI1_Init+0x64>)
 8001350:	220a      	movs	r2, #10
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001354:	4804      	ldr	r0, [pc, #16]	; (8001368 <MX_SPI1_Init+0x64>)
 8001356:	f003 fa92 	bl	800487e <HAL_SPI_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001360:	f000 fbd0 	bl	8001b04 <Error_Handler>
  }
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200002ec 	.word	0x200002ec
 800136c:	40013000 	.word	0x40013000

08001370 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <MX_SPI2_Init+0x68>)
 8001376:	4a19      	ldr	r2, [pc, #100]	; (80013dc <MX_SPI2_Init+0x6c>)
 8001378:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <MX_SPI2_Init+0x68>)
 800137c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001380:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_SPI2_Init+0x68>)
 8001384:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001388:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <MX_SPI2_Init+0x68>)
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_SPI2_Init+0x68>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_SPI2_Init+0x68>)
 8001398:	2200      	movs	r2, #0
 800139a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_SPI2_Init+0x68>)
 800139e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_SPI2_Init+0x68>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_SPI2_Init+0x68>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_SPI2_Init+0x68>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_SPI2_Init+0x68>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_SPI2_Init+0x68>)
 80013be:	220a      	movs	r2, #10
 80013c0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_SPI2_Init+0x68>)
 80013c4:	f003 fa5b 	bl	800487e <HAL_SPI_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80013ce:	f000 fb99 	bl	8001b04 <Error_Handler>
  }
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000344 	.word	0x20000344
 80013dc:	40003800 	.word	0x40003800

080013e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f4:	463b      	mov	r3, r7
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <MX_TIM1_Init+0x98>)
 80013fe:	4a1f      	ldr	r2, [pc, #124]	; (800147c <MX_TIM1_Init+0x9c>)
 8001400:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 8001402:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <MX_TIM1_Init+0x98>)
 8001404:	2231      	movs	r2, #49	; 0x31
 8001406:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <MX_TIM1_Init+0x98>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <MX_TIM1_Init+0x98>)
 8001410:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001414:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <MX_TIM1_Init+0x98>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <MX_TIM1_Init+0x98>)
 800141e:	2200      	movs	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_TIM1_Init+0x98>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001428:	4813      	ldr	r0, [pc, #76]	; (8001478 <MX_TIM1_Init+0x98>)
 800142a:	f003 ffd1 	bl	80053d0 <HAL_TIM_Base_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM1_Init+0x58>
    Error_Handler();
 8001434:	f000 fb66 	bl	8001b04 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	4619      	mov	r1, r3
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <MX_TIM1_Init+0x98>)
 8001446:	f004 fd0b 	bl	8005e60 <HAL_TIM_ConfigClockSource>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM1_Init+0x74>
    Error_Handler();
 8001450:	f000 fb58 	bl	8001b04 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_TIM1_Init+0x98>)
 8001462:	f005 f8fd 	bl	8006660 <HAL_TIMEx_MasterConfigSynchronization>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM1_Init+0x90>
    Error_Handler();
 800146c:	f000 fb4a 	bl	8001b04 <Error_Handler>
}
 8001470:	bf00      	nop
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	2000039c 	.word	0x2000039c
 800147c:	40010000 	.word	0x40010000

08001480 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	2224      	movs	r2, #36	; 0x24
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f008 fc4d 	bl	8009d2e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800149c:	4b21      	ldr	r3, [pc, #132]	; (8001524 <MX_TIM2_Init+0xa4>)
 800149e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014a4:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <MX_TIM2_Init+0xa4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <MX_TIM2_Init+0xa4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014b0:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <MX_TIM2_Init+0xa4>)
 80014b2:	f04f 32ff 	mov.w	r2, #4294967295
 80014b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <MX_TIM2_Init+0xa4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <MX_TIM2_Init+0xa4>)
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014cc:	2301      	movs	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014dc:	2301      	movs	r3, #1
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	4619      	mov	r1, r3
 80014ee:	480d      	ldr	r0, [pc, #52]	; (8001524 <MX_TIM2_Init+0xa4>)
 80014f0:	f004 f9b8 	bl	8005864 <HAL_TIM_Encoder_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM2_Init+0x7e>
    Error_Handler();
 80014fa:	f000 fb03 	bl	8001b04 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <MX_TIM2_Init+0xa4>)
 800150c:	f005 f8a8 	bl	8006660 <HAL_TIMEx_MasterConfigSynchronization>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM2_Init+0x9a>
    Error_Handler();
 8001516:	f000 faf5 	bl	8001b04 <Error_Handler>
}
 800151a:	bf00      	nop
 800151c:	3730      	adds	r7, #48	; 0x30
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200003e4 	.word	0x200003e4

08001528 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08e      	sub	sp, #56	; 0x38
 800152c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153c:	f107 0320 	add.w	r3, r7, #32
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
 8001554:	615a      	str	r2, [r3, #20]
 8001556:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001558:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <MX_TIM4_Init+0x128>)
 800155a:	4a3e      	ldr	r2, [pc, #248]	; (8001654 <MX_TIM4_Init+0x12c>)
 800155c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800155e:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <MX_TIM4_Init+0x128>)
 8001560:	2200      	movs	r2, #0
 8001562:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b3a      	ldr	r3, [pc, #232]	; (8001650 <MX_TIM4_Init+0x128>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4095;
 800156a:	4b39      	ldr	r3, [pc, #228]	; (8001650 <MX_TIM4_Init+0x128>)
 800156c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001570:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001572:	4b37      	ldr	r3, [pc, #220]	; (8001650 <MX_TIM4_Init+0x128>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001578:	4b35      	ldr	r3, [pc, #212]	; (8001650 <MX_TIM4_Init+0x128>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800157e:	4834      	ldr	r0, [pc, #208]	; (8001650 <MX_TIM4_Init+0x128>)
 8001580:	f003 ff26 	bl	80053d0 <HAL_TIM_Base_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM4_Init+0x66>
    Error_Handler();
 800158a:	f000 fabb 	bl	8001b04 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001594:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001598:	4619      	mov	r1, r3
 800159a:	482d      	ldr	r0, [pc, #180]	; (8001650 <MX_TIM4_Init+0x128>)
 800159c:	f004 fc60 	bl	8005e60 <HAL_TIM_ConfigClockSource>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM4_Init+0x82>
    Error_Handler();
 80015a6:	f000 faad 	bl	8001b04 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015aa:	4829      	ldr	r0, [pc, #164]	; (8001650 <MX_TIM4_Init+0x128>)
 80015ac:	f004 f838 	bl	8005620 <HAL_TIM_PWM_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM4_Init+0x92>
    Error_Handler();
 80015b6:	f000 faa5 	bl	8001b04 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015c2:	f107 0320 	add.w	r3, r7, #32
 80015c6:	4619      	mov	r1, r3
 80015c8:	4821      	ldr	r0, [pc, #132]	; (8001650 <MX_TIM4_Init+0x128>)
 80015ca:	f005 f849 	bl	8006660 <HAL_TIMEx_MasterConfigSynchronization>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM4_Init+0xb0>
    Error_Handler();
 80015d4:	f000 fa96 	bl	8001b04 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d8:	2360      	movs	r3, #96	; 0x60
 80015da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	4818      	ldr	r0, [pc, #96]	; (8001650 <MX_TIM4_Init+0x128>)
 80015f0:	f004 fb74 	bl	8005cdc <HAL_TIM_PWM_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM4_Init+0xd6>
    Error_Handler();
 80015fa:	f000 fa83 	bl	8001b04 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2204      	movs	r2, #4
 8001602:	4619      	mov	r1, r3
 8001604:	4812      	ldr	r0, [pc, #72]	; (8001650 <MX_TIM4_Init+0x128>)
 8001606:	f004 fb69 	bl	8005cdc <HAL_TIM_PWM_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM4_Init+0xec>
    Error_Handler();
 8001610:	f000 fa78 	bl	8001b04 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	2208      	movs	r2, #8
 8001618:	4619      	mov	r1, r3
 800161a:	480d      	ldr	r0, [pc, #52]	; (8001650 <MX_TIM4_Init+0x128>)
 800161c:	f004 fb5e 	bl	8005cdc <HAL_TIM_PWM_ConfigChannel>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM4_Init+0x102>
    Error_Handler();
 8001626:	f000 fa6d 	bl	8001b04 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	220c      	movs	r2, #12
 800162e:	4619      	mov	r1, r3
 8001630:	4807      	ldr	r0, [pc, #28]	; (8001650 <MX_TIM4_Init+0x128>)
 8001632:	f004 fb53 	bl	8005cdc <HAL_TIM_PWM_ConfigChannel>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM4_Init+0x118>
    Error_Handler();
 800163c:	f000 fa62 	bl	8001b04 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <MX_TIM4_Init+0x128>)
 8001642:	f000 fcfb 	bl	800203c <HAL_TIM_MspPostInit>
}
 8001646:	bf00      	nop
 8001648:	3738      	adds	r7, #56	; 0x38
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000042c 	.word	0x2000042c
 8001654:	40000800 	.word	0x40000800

08001658 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08c      	sub	sp, #48	; 0x30
 800165c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	2224      	movs	r2, #36	; 0x24
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f008 fb61 	bl	8009d2e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
  htim5.Instance = TIM5;
 8001674:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <MX_TIM5_Init+0xa0>)
 8001676:	4a21      	ldr	r2, [pc, #132]	; (80016fc <MX_TIM5_Init+0xa4>)
 8001678:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800167a:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <MX_TIM5_Init+0xa0>)
 800167c:	2200      	movs	r2, #0
 800167e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <MX_TIM5_Init+0xa0>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_TIM5_Init+0xa0>)
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_TIM5_Init+0xa0>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <MX_TIM5_Init+0xa0>)
 8001696:	2280      	movs	r2, #128	; 0x80
 8001698:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 800169a:	2302      	movs	r3, #2
 800169c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016a2:	2301      	movs	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016b2:	2301      	movs	r3, #1
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	4619      	mov	r1, r3
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <MX_TIM5_Init+0xa0>)
 80016c6:	f004 f8cd 	bl	8005864 <HAL_TIM_Encoder_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM5_Init+0x7c>
    Error_Handler();
 80016d0:	f000 fa18 	bl	8001b04 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_TIM5_Init+0xa0>)
 80016e2:	f004 ffbd 	bl	8006660 <HAL_TIMEx_MasterConfigSynchronization>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM5_Init+0x98>
    Error_Handler();
 80016ec:	f000 fa0a 	bl	8001b04 <Error_Handler>
}
 80016f0:	bf00      	nop
 80016f2:	3730      	adds	r7, #48	; 0x30
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000474 	.word	0x20000474
 80016fc:	40000c00 	.word	0x40000c00

08001700 <MX_TIM6_Init>:


static void MX_TIM6_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001706:	463b      	mov	r3, r7
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <MX_TIM6_Init+0x64>)
 8001710:	4a15      	ldr	r2, [pc, #84]	; (8001768 <MX_TIM6_Init+0x68>)
 8001712:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1999;
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <MX_TIM6_Init+0x64>)
 8001716:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800171a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_TIM6_Init+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000/(2*FPS);
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <MX_TIM6_Init+0x64>)
 8001724:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001728:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_TIM6_Init+0x64>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001730:	480c      	ldr	r0, [pc, #48]	; (8001764 <MX_TIM6_Init+0x64>)
 8001732:	f003 fe4d 	bl	80053d0 <HAL_TIM_Base_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800173c:	f000 f9e2 	bl	8001b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001748:	463b      	mov	r3, r7
 800174a:	4619      	mov	r1, r3
 800174c:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_TIM6_Init+0x64>)
 800174e:	f004 ff87 	bl	8006660 <HAL_TIMEx_MasterConfigSynchronization>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001758:	f000 f9d4 	bl	8001b04 <Error_Handler>
  }
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200004bc 	.word	0x200004bc
 8001768:	40001000 	.word	0x40001000

0800176c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001772:	f107 0320 	add.w	r3, r7, #32
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	619a      	str	r2, [r3, #24]
  htim9.Instance = TIM9;
 8001792:	4b25      	ldr	r3, [pc, #148]	; (8001828 <MX_TIM9_Init+0xbc>)
 8001794:	4a25      	ldr	r2, [pc, #148]	; (800182c <MX_TIM9_Init+0xc0>)
 8001796:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99; // 50 000 000 --> 500 000
 8001798:	4b23      	ldr	r3, [pc, #140]	; (8001828 <MX_TIM9_Init+0xbc>)
 800179a:	2263      	movs	r2, #99	; 0x63
 800179c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179e:	4b22      	ldr	r3, [pc, #136]	; (8001828 <MX_TIM9_Init+0xbc>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;  // 500 000 --> 500
 80017a4:	4b20      	ldr	r3, [pc, #128]	; (8001828 <MX_TIM9_Init+0xbc>)
 80017a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017aa:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ac:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <MX_TIM9_Init+0xbc>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <MX_TIM9_Init+0xbc>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80017b8:	481b      	ldr	r0, [pc, #108]	; (8001828 <MX_TIM9_Init+0xbc>)
 80017ba:	f003 fe09 	bl	80053d0 <HAL_TIM_Base_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM9_Init+0x5c>
    Error_Handler();
 80017c4:	f000 f99e 	bl	8001b04 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80017ce:	f107 0320 	add.w	r3, r7, #32
 80017d2:	4619      	mov	r1, r3
 80017d4:	4814      	ldr	r0, [pc, #80]	; (8001828 <MX_TIM9_Init+0xbc>)
 80017d6:	f004 fb43 	bl	8005e60 <HAL_TIM_ConfigClockSource>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM9_Init+0x78>
    Error_Handler();
 80017e0:	f000 f990 	bl	8001b04 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80017e4:	4810      	ldr	r0, [pc, #64]	; (8001828 <MX_TIM9_Init+0xbc>)
 80017e6:	f003 ff1b 	bl	8005620 <HAL_TIM_PWM_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM9_Init+0x88>
    Error_Handler();
 80017f0:	f000 f988 	bl	8001b04 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f4:	2360      	movs	r3, #96	; 0x60
 80017f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2200      	movs	r2, #0
 8001808:	4619      	mov	r1, r3
 800180a:	4807      	ldr	r0, [pc, #28]	; (8001828 <MX_TIM9_Init+0xbc>)
 800180c:	f004 fa66 	bl	8005cdc <HAL_TIM_PWM_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM9_Init+0xae>
    Error_Handler();
 8001816:	f000 f975 	bl	8001b04 <Error_Handler>
  HAL_TIM_MspPostInit(&htim9);
 800181a:	4803      	ldr	r0, [pc, #12]	; (8001828 <MX_TIM9_Init+0xbc>)
 800181c:	f000 fc0e 	bl	800203c <HAL_TIM_MspPostInit>
}
 8001820:	bf00      	nop
 8001822:	3730      	adds	r7, #48	; 0x30
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000504 	.word	0x20000504
 800182c:	40014000 	.word	0x40014000

08001830 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  htim13.Instance = TIM13;
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <MX_TIM13_Init+0x40>)
 8001836:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <MX_TIM13_Init+0x44>)
 8001838:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 1;
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <MX_TIM13_Init+0x40>)
 800183c:	2201      	movs	r2, #1
 800183e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <MX_TIM13_Init+0x40>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 50000;
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <MX_TIM13_Init+0x40>)
 8001848:	f24c 3250 	movw	r2, #50000	; 0xc350
 800184c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <MX_TIM13_Init+0x40>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_TIM13_Init+0x40>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <MX_TIM13_Init+0x40>)
 800185c:	f003 fdb8 	bl	80053d0 <HAL_TIM_Base_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM13_Init+0x3a>
    Error_Handler();
 8001866:	f000 f94d 	bl	8001b04 <Error_Handler>
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000054c 	.word	0x2000054c
 8001874:	40001c00 	.word	0x40001c00

08001878 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  htim14.Instance = TIM14;
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <MX_TIM14_Init+0x40>)
 800187e:	4a0f      	ldr	r2, [pc, #60]	; (80018bc <MX_TIM14_Init+0x44>)
 8001880:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1;
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <MX_TIM14_Init+0x40>)
 8001884:	2201      	movs	r2, #1
 8001886:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <MX_TIM14_Init+0x40>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50000;
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <MX_TIM14_Init+0x40>)
 8001890:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001894:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <MX_TIM14_Init+0x40>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_TIM14_Init+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_TIM14_Init+0x40>)
 80018a4:	f003 fd94 	bl	80053d0 <HAL_TIM_Base_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80018ae:	f000 f929 	bl	8001b04 <Error_Handler>
  }
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000594 	.word	0x20000594
 80018bc:	40002000 	.word	0x40002000

080018c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_USART1_UART_Init+0x4c>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <MX_USART1_UART_Init+0x50>)
 80018c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <MX_USART1_UART_Init+0x4c>)
 80018cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_USART1_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_USART1_UART_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_USART1_UART_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_USART1_UART_Init+0x4c>)
 80018e6:	220c      	movs	r2, #12
 80018e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_USART1_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_USART1_UART_Init+0x4c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_USART1_UART_Init+0x4c>)
 80018f8:	f004 ff42 	bl	8006780 <HAL_UART_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001902:	f000 f8ff 	bl	8001b04 <Error_Handler>
  }
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200005dc 	.word	0x200005dc
 8001910:	40011000 	.word	0x40011000

08001914 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <MX_DMA_Init+0x3c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <MX_DMA_Init+0x3c>)
 8001924:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_DMA_Init+0x3c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	2038      	movs	r0, #56	; 0x38
 800193c:	f001 fdcd 	bl	80034da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001940:	2038      	movs	r0, #56	; 0x38
 8001942:	f001 fde6 	bl	8003512 <HAL_NVIC_EnableIRQ>

}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800

08001954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	4b60      	ldr	r3, [pc, #384]	; (8001af0 <MX_GPIO_Init+0x19c>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a5f      	ldr	r2, [pc, #380]	; (8001af0 <MX_GPIO_Init+0x19c>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b5d      	ldr	r3, [pc, #372]	; (8001af0 <MX_GPIO_Init+0x19c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	4b59      	ldr	r3, [pc, #356]	; (8001af0 <MX_GPIO_Init+0x19c>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a58      	ldr	r2, [pc, #352]	; (8001af0 <MX_GPIO_Init+0x19c>)
 8001990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <MX_GPIO_Init+0x19c>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	4b52      	ldr	r3, [pc, #328]	; (8001af0 <MX_GPIO_Init+0x19c>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a51      	ldr	r2, [pc, #324]	; (8001af0 <MX_GPIO_Init+0x19c>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b4f      	ldr	r3, [pc, #316]	; (8001af0 <MX_GPIO_Init+0x19c>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	4b4b      	ldr	r3, [pc, #300]	; (8001af0 <MX_GPIO_Init+0x19c>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a4a      	ldr	r2, [pc, #296]	; (8001af0 <MX_GPIO_Init+0x19c>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b48      	ldr	r3, [pc, #288]	; (8001af0 <MX_GPIO_Init+0x19c>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	4b44      	ldr	r3, [pc, #272]	; (8001af0 <MX_GPIO_Init+0x19c>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a43      	ldr	r2, [pc, #268]	; (8001af0 <MX_GPIO_Init+0x19c>)
 80019e4:	f043 0308 	orr.w	r3, r3, #8
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <MX_GPIO_Init+0x19c>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED10_Pin|RF_EMITTER_Pin|D_C_Pin|DIAGONAL_EMITTER_Pin
 80019f6:	2200      	movs	r2, #0
 80019f8:	f641 51e7 	movw	r1, #7655	; 0x1de7
 80019fc:	483d      	ldr	r0, [pc, #244]	; (8001af4 <MX_GPIO_Init+0x1a0>)
 80019fe:	f002 fa29 	bl	8003e54 <HAL_GPIO_WritePin>
                          |CE_Pin|LF_EMITTER_Pin|CS_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED11_Pin|LED9_Pin|LED8_Pin, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	f641 0110 	movw	r1, #6160	; 0x1810
 8001a08:	483b      	ldr	r0, [pc, #236]	; (8001af8 <MX_GPIO_Init+0x1a4>)
 8001a0a:	f002 fa23 	bl	8003e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED7_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8001a14:	4839      	ldr	r0, [pc, #228]	; (8001afc <MX_GPIO_Init+0x1a8>)
 8001a16:	f002 fa1d 	bl	8003e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2104      	movs	r1, #4
 8001a1e:	4838      	ldr	r0, [pc, #224]	; (8001b00 <MX_GPIO_Init+0x1ac>)
 8001a20:	f002 fa18 	bl	8003e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TB1_Pin */
  GPIO_InitStruct.Pin = TB1_Pin;
 8001a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TB1_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	482e      	ldr	r0, [pc, #184]	; (8001af4 <MX_GPIO_Init+0x1a0>)
 8001a3a:	f002 f86f 	bl	8003b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED10_Pin RF_EMITTER_Pin D_C_Pin DIAGONAL_EMITTER_Pin
                           CE_Pin LF_EMITTER_Pin CS_Pin LED3_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED10_Pin|RF_EMITTER_Pin|D_C_Pin|DIAGONAL_EMITTER_Pin
 8001a3e:	f641 53e7 	movw	r3, #7655	; 0x1de7
 8001a42:	617b      	str	r3, [r7, #20]
                          |CE_Pin|LF_EMITTER_Pin|CS_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	4827      	ldr	r0, [pc, #156]	; (8001af4 <MX_GPIO_Init+0x1a0>)
 8001a58:	f002 f860 	bl	8003b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRDY_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4823      	ldr	r0, [pc, #140]	; (8001afc <MX_GPIO_Init+0x1a8>)
 8001a70:	f002 f854 	bl	8003b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 INT_Pin MISO_Pin BOOT0_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|INT_Pin|MISO_Pin|BOOT0_Pin;
 8001a74:	f244 4324 	movw	r3, #17444	; 0x4424
 8001a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	481b      	ldr	r0, [pc, #108]	; (8001af8 <MX_GPIO_Init+0x1a4>)
 8001a8a:	f002 f847 	bl	8003b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED11_Pin LED9_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED11_Pin|LED9_Pin|LED8_Pin;
 8001a8e:	f641 0310 	movw	r3, #6160	; 0x1810
 8001a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4814      	ldr	r0, [pc, #80]	; (8001af8 <MX_GPIO_Init+0x1a4>)
 8001aa8:	f002 f838 	bl	8003b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED7_Pin|LED1_Pin|LED2_Pin;
 8001aac:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480d      	ldr	r0, [pc, #52]	; (8001afc <MX_GPIO_Init+0x1a8>)
 8001ac6:	f002 f829 	bl	8003b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 8001aca:	2304      	movs	r3, #4
 8001acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4807      	ldr	r0, [pc, #28]	; (8001b00 <MX_GPIO_Init+0x1ac>)
 8001ae2:	f002 f81b 	bl	8003b1c <HAL_GPIO_Init>
}
 8001ae6:	bf00      	nop
 8001ae8:	3728      	adds	r7, #40	; 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020800 	.word	0x40020800
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020c00 	.word	0x40020c00

08001b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b08:	b672      	cpsid	i
}
 8001b0a:	bf00      	nop
  __disable_irq();
  while (1);
 8001b0c:	e7fe      	b.n	8001b0c <Error_Handler+0x8>
	...

08001b10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <HAL_MspInit+0x4c>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <HAL_MspInit+0x4c>)
 8001b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b24:	6453      	str	r3, [r2, #68]	; 0x44
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <HAL_MspInit+0x4c>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_MspInit+0x4c>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <HAL_MspInit+0x4c>)
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b40:	6413      	str	r3, [r2, #64]	; 0x40
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_MspInit+0x4c>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800

08001b60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08c      	sub	sp, #48	; 0x30
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a49      	ldr	r2, [pc, #292]	; (8001ca4 <HAL_ADC_MspInit+0x144>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	f040 808b 	bne.w	8001c9a <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
 8001b88:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <HAL_ADC_MspInit+0x148>)
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	4a46      	ldr	r2, [pc, #280]	; (8001ca8 <HAL_ADC_MspInit+0x148>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b92:	6453      	str	r3, [r2, #68]	; 0x44
 8001b94:	4b44      	ldr	r3, [pc, #272]	; (8001ca8 <HAL_ADC_MspInit+0x148>)
 8001b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	4b40      	ldr	r3, [pc, #256]	; (8001ca8 <HAL_ADC_MspInit+0x148>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	4a3f      	ldr	r2, [pc, #252]	; (8001ca8 <HAL_ADC_MspInit+0x148>)
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb0:	4b3d      	ldr	r3, [pc, #244]	; (8001ca8 <HAL_ADC_MspInit+0x148>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_ADC_MspInit+0x148>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	4a38      	ldr	r2, [pc, #224]	; (8001ca8 <HAL_ADC_MspInit+0x148>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6313      	str	r3, [r2, #48]	; 0x30
 8001bcc:	4b36      	ldr	r3, [pc, #216]	; (8001ca8 <HAL_ADC_MspInit+0x148>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	4b32      	ldr	r3, [pc, #200]	; (8001ca8 <HAL_ADC_MspInit+0x148>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	4a31      	ldr	r2, [pc, #196]	; (8001ca8 <HAL_ADC_MspInit+0x148>)
 8001be2:	f043 0302 	orr.w	r3, r3, #2
 8001be6:	6313      	str	r3, [r2, #48]	; 0x30
 8001be8:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <HAL_ADC_MspInit+0x148>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VOL_METER_Pin|R_RECEIVER_Pin;
 8001bf4:	2318      	movs	r3, #24
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	4829      	ldr	r0, [pc, #164]	; (8001cac <HAL_ADC_MspInit+0x14c>)
 8001c08:	f001 ff88 	bl	8003b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_RECEIVER_Pin;
 8001c0c:	2310      	movs	r3, #16
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c10:	2303      	movs	r3, #3
 8001c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RF_RECEIVER_GPIO_Port, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4824      	ldr	r0, [pc, #144]	; (8001cb0 <HAL_ADC_MspInit+0x150>)
 8001c20:	f001 ff7c 	bl	8003b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L_RECEIVER_Pin|LF_RECEIVER_Pin;
 8001c24:	2303      	movs	r3, #3
 8001c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	4619      	mov	r1, r3
 8001c36:	481f      	ldr	r0, [pc, #124]	; (8001cb4 <HAL_ADC_MspInit+0x154>)
 8001c38:	f001 ff70 	bl	8003b1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <HAL_ADC_MspInit+0x158>)
 8001c3e:	4a1f      	ldr	r2, [pc, #124]	; (8001cbc <HAL_ADC_MspInit+0x15c>)
 8001c40:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c42:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_ADC_MspInit+0x158>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_ADC_MspInit+0x158>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <HAL_ADC_MspInit+0x158>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_ADC_MspInit+0x158>)
 8001c56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c5a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c5c:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <HAL_ADC_MspInit+0x158>)
 8001c5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c62:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <HAL_ADC_MspInit+0x158>)
 8001c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_ADC_MspInit+0x158>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_ADC_MspInit+0x158>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_ADC_MspInit+0x158>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c7e:	480e      	ldr	r0, [pc, #56]	; (8001cb8 <HAL_ADC_MspInit+0x158>)
 8001c80:	f001 fc62 	bl	8003548 <HAL_DMA_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8001c8a:	f7ff ff3b 	bl	8001b04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a09      	ldr	r2, [pc, #36]	; (8001cb8 <HAL_ADC_MspInit+0x158>)
 8001c92:	639a      	str	r2, [r3, #56]	; 0x38
 8001c94:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <HAL_ADC_MspInit+0x158>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c9a:	bf00      	nop
 8001c9c:	3730      	adds	r7, #48	; 0x30
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40012000 	.word	0x40012000
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	2000028c 	.word	0x2000028c
 8001cbc:	40026410 	.word	0x40026410

08001cc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08c      	sub	sp, #48	; 0x30
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a32      	ldr	r2, [pc, #200]	; (8001da8 <HAL_SPI_MspInit+0xe8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d12c      	bne.n	8001d3c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	4b31      	ldr	r3, [pc, #196]	; (8001dac <HAL_SPI_MspInit+0xec>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	4a30      	ldr	r2, [pc, #192]	; (8001dac <HAL_SPI_MspInit+0xec>)
 8001cec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf2:	4b2e      	ldr	r3, [pc, #184]	; (8001dac <HAL_SPI_MspInit+0xec>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <HAL_SPI_MspInit+0xec>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a29      	ldr	r2, [pc, #164]	; (8001dac <HAL_SPI_MspInit+0xec>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b27      	ldr	r3, [pc, #156]	; (8001dac <HAL_SPI_MspInit+0xec>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDI_Pin;
 8001d1a:	23e0      	movs	r3, #224	; 0xe0
 8001d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d2a:	2305      	movs	r3, #5
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	4619      	mov	r1, r3
 8001d34:	481e      	ldr	r0, [pc, #120]	; (8001db0 <HAL_SPI_MspInit+0xf0>)
 8001d36:	f001 fef1 	bl	8003b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d3a:	e031      	b.n	8001da0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a1c      	ldr	r2, [pc, #112]	; (8001db4 <HAL_SPI_MspInit+0xf4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d12c      	bne.n	8001da0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <HAL_SPI_MspInit+0xec>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a17      	ldr	r2, [pc, #92]	; (8001dac <HAL_SPI_MspInit+0xec>)
 8001d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_SPI_MspInit+0xec>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <HAL_SPI_MspInit+0xec>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a10      	ldr	r2, [pc, #64]	; (8001dac <HAL_SPI_MspInit+0xec>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_SPI_MspInit+0xec>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CLK_Pin|DATA_IN_Pin;
 8001d7e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d90:	2305      	movs	r3, #5
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4807      	ldr	r0, [pc, #28]	; (8001db8 <HAL_SPI_MspInit+0xf8>)
 8001d9c:	f001 febe 	bl	8003b1c <HAL_GPIO_Init>
}
 8001da0:	bf00      	nop
 8001da2:	3730      	adds	r7, #48	; 0x30
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40013000 	.word	0x40013000
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40020000 	.word	0x40020000
 8001db4:	40003800 	.word	0x40003800
 8001db8:	40020400 	.word	0x40020400

08001dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a48      	ldr	r2, [pc, #288]	; (8001eec <HAL_TIM_Base_MspInit+0x130>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10e      	bne.n	8001dec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <HAL_TIM_Base_MspInit+0x134>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a46      	ldr	r2, [pc, #280]	; (8001ef0 <HAL_TIM_Base_MspInit+0x134>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b44      	ldr	r3, [pc, #272]	; (8001ef0 <HAL_TIM_Base_MspInit+0x134>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	61fb      	str	r3, [r7, #28]
 8001de8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001dea:	e07a      	b.n	8001ee2 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM4)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a40      	ldr	r2, [pc, #256]	; (8001ef4 <HAL_TIM_Base_MspInit+0x138>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d10e      	bne.n	8001e14 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
 8001dfa:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <HAL_TIM_Base_MspInit+0x134>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a3c      	ldr	r2, [pc, #240]	; (8001ef0 <HAL_TIM_Base_MspInit+0x134>)
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <HAL_TIM_Base_MspInit+0x134>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	61bb      	str	r3, [r7, #24]
 8001e10:	69bb      	ldr	r3, [r7, #24]
}
 8001e12:	e066      	b.n	8001ee2 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM6)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a37      	ldr	r2, [pc, #220]	; (8001ef8 <HAL_TIM_Base_MspInit+0x13c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d116      	bne.n	8001e4c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <HAL_TIM_Base_MspInit+0x134>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4a32      	ldr	r2, [pc, #200]	; (8001ef0 <HAL_TIM_Base_MspInit+0x134>)
 8001e28:	f043 0310 	orr.w	r3, r3, #16
 8001e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2e:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <HAL_TIM_Base_MspInit+0x134>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2036      	movs	r0, #54	; 0x36
 8001e40:	f001 fb4b 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e44:	2036      	movs	r0, #54	; 0x36
 8001e46:	f001 fb64 	bl	8003512 <HAL_NVIC_EnableIRQ>
}
 8001e4a:	e04a      	b.n	8001ee2 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM9)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a2a      	ldr	r2, [pc, #168]	; (8001efc <HAL_TIM_Base_MspInit+0x140>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10e      	bne.n	8001e74 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <HAL_TIM_Base_MspInit+0x134>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	4a24      	ldr	r2, [pc, #144]	; (8001ef0 <HAL_TIM_Base_MspInit+0x134>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e64:	6453      	str	r3, [r2, #68]	; 0x44
 8001e66:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <HAL_TIM_Base_MspInit+0x134>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]
}
 8001e72:	e036      	b.n	8001ee2 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM13)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a21      	ldr	r2, [pc, #132]	; (8001f00 <HAL_TIM_Base_MspInit+0x144>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d116      	bne.n	8001eac <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_TIM_Base_MspInit+0x134>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4a1a      	ldr	r2, [pc, #104]	; (8001ef0 <HAL_TIM_Base_MspInit+0x134>)
 8001e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8e:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <HAL_TIM_Base_MspInit+0x134>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	202c      	movs	r0, #44	; 0x2c
 8001ea0:	f001 fb1b 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001ea4:	202c      	movs	r0, #44	; 0x2c
 8001ea6:	f001 fb34 	bl	8003512 <HAL_NVIC_EnableIRQ>
}
 8001eaa:	e01a      	b.n	8001ee2 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM14)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a14      	ldr	r2, [pc, #80]	; (8001f04 <HAL_TIM_Base_MspInit+0x148>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d115      	bne.n	8001ee2 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <HAL_TIM_Base_MspInit+0x134>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a0c      	ldr	r2, [pc, #48]	; (8001ef0 <HAL_TIM_Base_MspInit+0x134>)
 8001ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_TIM_Base_MspInit+0x134>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	202d      	movs	r0, #45	; 0x2d
 8001ed8:	f001 faff 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001edc:	202d      	movs	r0, #45	; 0x2d
 8001ede:	f001 fb18 	bl	8003512 <HAL_NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3720      	adds	r7, #32
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40010000 	.word	0x40010000
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40000800 	.word	0x40000800
 8001ef8:	40001000 	.word	0x40001000
 8001efc:	40014000 	.word	0x40014000
 8001f00:	40001c00 	.word	0x40001c00
 8001f04:	40002000 	.word	0x40002000

08001f08 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08c      	sub	sp, #48	; 0x30
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f28:	d14b      	bne.n	8001fc2 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
 8001f2e:	4b3f      	ldr	r3, [pc, #252]	; (800202c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a3e      	ldr	r2, [pc, #248]	; (800202c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3a:	4b3c      	ldr	r3, [pc, #240]	; (800202c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	61bb      	str	r3, [r7, #24]
 8001f44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	4b38      	ldr	r3, [pc, #224]	; (800202c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a37      	ldr	r2, [pc, #220]	; (800202c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b31      	ldr	r3, [pc, #196]	; (800202c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a30      	ldr	r2, [pc, #192]	; (800202c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b2e      	ldr	r3, [pc, #184]	; (800202c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f90:	2301      	movs	r3, #1
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4825      	ldr	r0, [pc, #148]	; (8002030 <HAL_TIM_Encoder_MspInit+0x128>)
 8001f9c:	f001 fdbe 	bl	8003b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	4619      	mov	r1, r3
 8001fba:	481e      	ldr	r0, [pc, #120]	; (8002034 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001fbc:	f001 fdae 	bl	8003b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001fc0:	e030      	b.n	8002024 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM5)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <HAL_TIM_Encoder_MspInit+0x130>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d12b      	bne.n	8002024 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <HAL_TIM_Encoder_MspInit+0x124>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	4a15      	ldr	r2, [pc, #84]	; (800202c <HAL_TIM_Encoder_MspInit+0x124>)
 8001fd6:	f043 0308 	orr.w	r3, r3, #8
 8001fda:	6413      	str	r3, [r2, #64]	; 0x40
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <HAL_TIM_Encoder_MspInit+0x124>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	4b0f      	ldr	r3, [pc, #60]	; (800202c <HAL_TIM_Encoder_MspInit+0x124>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	4a0e      	ldr	r2, [pc, #56]	; (800202c <HAL_TIM_Encoder_MspInit+0x124>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <HAL_TIM_Encoder_MspInit+0x124>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002004:	2303      	movs	r3, #3
 8002006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002014:	2302      	movs	r3, #2
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	4619      	mov	r1, r3
 800201e:	4804      	ldr	r0, [pc, #16]	; (8002030 <HAL_TIM_Encoder_MspInit+0x128>)
 8002020:	f001 fd7c 	bl	8003b1c <HAL_GPIO_Init>
}
 8002024:	bf00      	nop
 8002026:	3730      	adds	r7, #48	; 0x30
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	40020000 	.word	0x40020000
 8002034:	40020400 	.word	0x40020400
 8002038:	40000c00 	.word	0x40000c00

0800203c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a24      	ldr	r2, [pc, #144]	; (80020ec <HAL_TIM_MspPostInit+0xb0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d11f      	bne.n	800209e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <HAL_TIM_MspPostInit+0xb4>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a22      	ldr	r2, [pc, #136]	; (80020f0 <HAL_TIM_MspPostInit+0xb4>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <HAL_TIM_MspPostInit+0xb4>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = LPWMA_Pin|LPWMB_Pin|RPWMA_Pin|RPWMB_Pin;
 800207a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800207e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002088:	2300      	movs	r3, #0
 800208a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800208c:	2302      	movs	r3, #2
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4619      	mov	r1, r3
 8002096:	4817      	ldr	r0, [pc, #92]	; (80020f4 <HAL_TIM_MspPostInit+0xb8>)
 8002098:	f001 fd40 	bl	8003b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800209c:	e022      	b.n	80020e4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <HAL_TIM_MspPostInit+0xbc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d11d      	bne.n	80020e4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <HAL_TIM_MspPostInit+0xb4>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	4a0f      	ldr	r2, [pc, #60]	; (80020f0 <HAL_TIM_MspPostInit+0xb4>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6313      	str	r3, [r2, #48]	; 0x30
 80020b8:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <HAL_TIM_MspPostInit+0xb4>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020c4:	2304      	movs	r3, #4
 80020c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80020d4:	2303      	movs	r3, #3
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4619      	mov	r1, r3
 80020de:	4807      	ldr	r0, [pc, #28]	; (80020fc <HAL_TIM_MspPostInit+0xc0>)
 80020e0:	f001 fd1c 	bl	8003b1c <HAL_GPIO_Init>
}
 80020e4:	bf00      	nop
 80020e6:	3728      	adds	r7, #40	; 0x28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40000800 	.word	0x40000800
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020400 	.word	0x40020400
 80020f8:	40014000 	.word	0x40014000
 80020fc:	40020000 	.word	0x40020000

08002100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	; 0x28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a19      	ldr	r2, [pc, #100]	; (8002184 <HAL_UART_MspInit+0x84>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d12c      	bne.n	800217c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_UART_MspInit+0x88>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a17      	ldr	r2, [pc, #92]	; (8002188 <HAL_UART_MspInit+0x88>)
 800212c:	f043 0310 	orr.w	r3, r3, #16
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <HAL_UART_MspInit+0x88>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_UART_MspInit+0x88>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a10      	ldr	r2, [pc, #64]	; (8002188 <HAL_UART_MspInit+0x88>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <HAL_UART_MspInit+0x88>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 800215a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800215e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002168:	2303      	movs	r3, #3
 800216a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800216c:	2307      	movs	r3, #7
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	4619      	mov	r1, r3
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <HAL_UART_MspInit+0x8c>)
 8002178:	f001 fcd0 	bl	8003b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800217c:	bf00      	nop
 800217e:	3728      	adds	r7, #40	; 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40011000 	.word	0x40011000
 8002188:	40023800 	.word	0x40023800
 800218c:	40020000 	.word	0x40020000

08002190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002194:	f002 fb58 	bl	8004848 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002198:	e7fe      	b.n	8002198 <NMI_Handler+0x8>

0800219a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219e:	e7fe      	b.n	800219e <HardFault_Handler+0x4>

080021a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a4:	e7fe      	b.n	80021a4 <MemManage_Handler+0x4>

080021a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021aa:	e7fe      	b.n	80021aa <BusFault_Handler+0x4>

080021ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <UsageFault_Handler+0x4>

080021b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e0:	f000 fc5c 	bl	8002a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TB1_Pin);
 80021ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021f0:	f001 fe64 	bl	8003ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80021fe:	f003 fc65 	bl	8005acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	2000054c 	.word	0x2000054c

0800220c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002212:	f003 fc5b 	bl	8005acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000594 	.word	0x20000594

08002220 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <TIM6_DAC_IRQHandler+0x10>)
 8002226:	f003 fc51 	bl	8005acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200004bc 	.word	0x200004bc

08002234 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <DMA2_Stream0_IRQHandler+0x10>)
 800223a:	f001 fa33 	bl	80036a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000028c 	.word	0x2000028c

08002248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return 1;
 800224c:	2301      	movs	r3, #1
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_kill>:

int _kill(int pid, int sig)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002262:	f007 fe0b 	bl	8009e7c <__errno>
 8002266:	4603      	mov	r3, r0
 8002268:	2216      	movs	r2, #22
 800226a:	601a      	str	r2, [r3, #0]
  return -1;
 800226c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <_exit>:

void _exit (int status)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002280:	f04f 31ff 	mov.w	r1, #4294967295
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ffe7 	bl	8002258 <_kill>
  while (1) {}    /* Make sure we hang here */
 800228a:	e7fe      	b.n	800228a <_exit+0x12>

0800228c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	e00a      	b.n	80022b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800229e:	f3af 8000 	nop.w
 80022a2:	4601      	mov	r1, r0
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	60ba      	str	r2, [r7, #8]
 80022aa:	b2ca      	uxtb	r2, r1
 80022ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3301      	adds	r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	dbf0      	blt.n	800229e <_read+0x12>
  }

  return len;
 80022bc:	687b      	ldr	r3, [r7, #4]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	e009      	b.n	80022ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	60ba      	str	r2, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	3301      	adds	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	dbf1      	blt.n	80022d8 <_write+0x12>
  }
  return len;
 80022f4:	687b      	ldr	r3, [r7, #4]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <_close>:

int _close(int file)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002326:	605a      	str	r2, [r3, #4]
  return 0;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <_isatty>:

int _isatty(int file)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800233e:	2301      	movs	r3, #1
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002370:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <_sbrk+0x5c>)
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <_sbrk+0x60>)
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800237c:	4b13      	ldr	r3, [pc, #76]	; (80023cc <_sbrk+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <_sbrk+0x64>)
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <_sbrk+0x68>)
 8002388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <_sbrk+0x64>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	429a      	cmp	r2, r3
 8002396:	d207      	bcs.n	80023a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002398:	f007 fd70 	bl	8009e7c <__errno>
 800239c:	4603      	mov	r3, r0
 800239e:	220c      	movs	r2, #12
 80023a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	e009      	b.n	80023bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <_sbrk+0x64>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <_sbrk+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	4a05      	ldr	r2, [pc, #20]	; (80023cc <_sbrk+0x64>)
 80023b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ba:	68fb      	ldr	r3, [r7, #12]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20020000 	.word	0x20020000
 80023c8:	00000400 	.word	0x00000400
 80023cc:	20000620 	.word	0x20000620
 80023d0:	20000a00 	.word	0x20000a00

080023d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <SystemInit+0x20>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <SystemInit+0x20>)
 80023e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002430 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023fc:	480d      	ldr	r0, [pc, #52]	; (8002434 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023fe:	490e      	ldr	r1, [pc, #56]	; (8002438 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002400:	4a0e      	ldr	r2, [pc, #56]	; (800243c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002404:	e002      	b.n	800240c <LoopCopyDataInit>

08002406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240a:	3304      	adds	r3, #4

0800240c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800240c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002410:	d3f9      	bcc.n	8002406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002412:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002414:	4c0b      	ldr	r4, [pc, #44]	; (8002444 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002418:	e001      	b.n	800241e <LoopFillZerobss>

0800241a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800241c:	3204      	adds	r2, #4

0800241e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002420:	d3fb      	bcc.n	800241a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002422:	f7ff ffd7 	bl	80023d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002426:	f007 fd2f 	bl	8009e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800242a:	f7fe fe99 	bl	8001160 <main>
  bx  lr    
 800242e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002438:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 800243c:	0800ee6c 	.word	0x0800ee6c
  ldr r2, =_sbss
 8002440:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8002444:	20000a00 	.word	0x20000a00

08002448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002448:	e7fe      	b.n	8002448 <ADC_IRQHandler>

0800244a <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 800244a:	b580      	push	{r7, lr}
 800244c:	af00      	add	r7, sp, #0
//
//    // Reset the OLED
//    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
//    HAL_Delay(10);
//    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
    HAL_Delay(10);
 800244e:	200a      	movs	r0, #10
 8002450:	f000 fb44 	bl	8002adc <HAL_Delay>
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}

08002458 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002462:	2200      	movs	r2, #0
 8002464:	2140      	movs	r1, #64	; 0x40
 8002466:	480c      	ldr	r0, [pc, #48]	; (8002498 <ssd1306_WriteCommand+0x40>)
 8002468:	f001 fcf4 	bl	8003e54 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 800246c:	2200      	movs	r2, #0
 800246e:	2104      	movs	r1, #4
 8002470:	4809      	ldr	r0, [pc, #36]	; (8002498 <ssd1306_WriteCommand+0x40>)
 8002472:	f001 fcef 	bl	8003e54 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8002476:	1df9      	adds	r1, r7, #7
 8002478:	f04f 33ff 	mov.w	r3, #4294967295
 800247c:	2201      	movs	r2, #1
 800247e:	4807      	ldr	r0, [pc, #28]	; (800249c <ssd1306_WriteCommand+0x44>)
 8002480:	f002 fa86 	bl	8004990 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8002484:	2201      	movs	r2, #1
 8002486:	2140      	movs	r1, #64	; 0x40
 8002488:	4803      	ldr	r0, [pc, #12]	; (8002498 <ssd1306_WriteCommand+0x40>)
 800248a:	f001 fce3 	bl	8003e54 <HAL_GPIO_WritePin>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40020800 	.word	0x40020800
 800249c:	20000344 	.word	0x20000344

080024a0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80024aa:	2200      	movs	r2, #0
 80024ac:	2140      	movs	r1, #64	; 0x40
 80024ae:	480c      	ldr	r0, [pc, #48]	; (80024e0 <ssd1306_WriteData+0x40>)
 80024b0:	f001 fcd0 	bl	8003e54 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 80024b4:	2201      	movs	r2, #1
 80024b6:	2104      	movs	r1, #4
 80024b8:	4809      	ldr	r0, [pc, #36]	; (80024e0 <ssd1306_WriteData+0x40>)
 80024ba:	f001 fccb 	bl	8003e54 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4806      	ldr	r0, [pc, #24]	; (80024e4 <ssd1306_WriteData+0x44>)
 80024ca:	f002 fa61 	bl	8004990 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80024ce:	2201      	movs	r2, #1
 80024d0:	2140      	movs	r1, #64	; 0x40
 80024d2:	4803      	ldr	r0, [pc, #12]	; (80024e0 <ssd1306_WriteData+0x40>)
 80024d4:	f001 fcbe 	bl	8003e54 <HAL_GPIO_WritePin>
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40020800 	.word	0x40020800
 80024e4:	20000344 	.word	0x20000344

080024e8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80024ec:	f7ff ffad 	bl	800244a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80024f0:	2064      	movs	r0, #100	; 0x64
 80024f2:	f000 faf3 	bl	8002adc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80024f6:	2000      	movs	r0, #0
 80024f8:	f000 fa60 	bl	80029bc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80024fc:	2020      	movs	r0, #32
 80024fe:	f7ff ffab 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002502:	2000      	movs	r0, #0
 8002504:	f7ff ffa8 	bl	8002458 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002508:	20b0      	movs	r0, #176	; 0xb0
 800250a:	f7ff ffa5 	bl	8002458 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800250e:	20c8      	movs	r0, #200	; 0xc8
 8002510:	f7ff ffa2 	bl	8002458 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002514:	2000      	movs	r0, #0
 8002516:	f7ff ff9f 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800251a:	2010      	movs	r0, #16
 800251c:	f7ff ff9c 	bl	8002458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002520:	2040      	movs	r0, #64	; 0x40
 8002522:	f7ff ff99 	bl	8002458 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002526:	20ff      	movs	r0, #255	; 0xff
 8002528:	f000 fa35 	bl	8002996 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800252c:	20a1      	movs	r0, #161	; 0xa1
 800252e:	f7ff ff93 	bl	8002458 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002532:	20a6      	movs	r0, #166	; 0xa6
 8002534:	f7ff ff90 	bl	8002458 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002538:	20a8      	movs	r0, #168	; 0xa8
 800253a:	f7ff ff8d 	bl	8002458 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800253e:	201f      	movs	r0, #31
 8002540:	f7ff ff8a 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002544:	20a4      	movs	r0, #164	; 0xa4
 8002546:	f7ff ff87 	bl	8002458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800254a:	20d3      	movs	r0, #211	; 0xd3
 800254c:	f7ff ff84 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002550:	2000      	movs	r0, #0
 8002552:	f7ff ff81 	bl	8002458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002556:	20d5      	movs	r0, #213	; 0xd5
 8002558:	f7ff ff7e 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800255c:	20f0      	movs	r0, #240	; 0xf0
 800255e:	f7ff ff7b 	bl	8002458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002562:	20d9      	movs	r0, #217	; 0xd9
 8002564:	f7ff ff78 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002568:	2022      	movs	r0, #34	; 0x22
 800256a:	f7ff ff75 	bl	8002458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800256e:	20da      	movs	r0, #218	; 0xda
 8002570:	f7ff ff72 	bl	8002458 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8002574:	2002      	movs	r0, #2
 8002576:	f7ff ff6f 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800257a:	20db      	movs	r0, #219	; 0xdb
 800257c:	f7ff ff6c 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002580:	2020      	movs	r0, #32
 8002582:	f7ff ff69 	bl	8002458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002586:	208d      	movs	r0, #141	; 0x8d
 8002588:	f7ff ff66 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800258c:	2014      	movs	r0, #20
 800258e:	f7ff ff63 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002592:	2001      	movs	r0, #1
 8002594:	f000 fa12 	bl	80029bc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002598:	2000      	movs	r0, #0
 800259a:	f000 f80f 	bl	80025bc <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800259e:	f000 f831 	bl	8002604 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <ssd1306_Init+0xd0>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <ssd1306_Init+0xd0>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80025ae:	4b02      	ldr	r3, [pc, #8]	; (80025b8 <ssd1306_Init+0xd0>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	711a      	strb	r2, [r3, #4]
}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000824 	.word	0x20000824

080025bc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	e00d      	b.n	80025e8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <ssd1306_Fill+0x1a>
 80025d2:	2100      	movs	r1, #0
 80025d4:	e000      	b.n	80025d8 <ssd1306_Fill+0x1c>
 80025d6:	21ff      	movs	r1, #255	; 0xff
 80025d8:	4a09      	ldr	r2, [pc, #36]	; (8002600 <ssd1306_Fill+0x44>)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4413      	add	r3, r2
 80025de:	460a      	mov	r2, r1
 80025e0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	3301      	adds	r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ee:	d3ed      	bcc.n	80025cc <ssd1306_Fill+0x10>
    }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000624 	.word	0x20000624

08002604 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800260a:	2300      	movs	r3, #0
 800260c:	71fb      	strb	r3, [r7, #7]
 800260e:	e016      	b.n	800263e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	3b50      	subs	r3, #80	; 0x50
 8002614:	b2db      	uxtb	r3, r3
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ff1e 	bl	8002458 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800261c:	2000      	movs	r0, #0
 800261e:	f7ff ff1b 	bl	8002458 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002622:	2010      	movs	r0, #16
 8002624:	f7ff ff18 	bl	8002458 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	01db      	lsls	r3, r3, #7
 800262c:	4a08      	ldr	r2, [pc, #32]	; (8002650 <ssd1306_UpdateScreen+0x4c>)
 800262e:	4413      	add	r3, r2
 8002630:	2180      	movs	r1, #128	; 0x80
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff ff34 	bl	80024a0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	3301      	adds	r3, #1
 800263c:	71fb      	strb	r3, [r7, #7]
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	2b03      	cmp	r3, #3
 8002642:	d9e5      	bls.n	8002610 <ssd1306_UpdateScreen+0xc>
    }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000624 	.word	0x20000624

08002654 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
 800265e:	460b      	mov	r3, r1
 8002660:	71bb      	strb	r3, [r7, #6]
 8002662:	4613      	mov	r3, r2
 8002664:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	2b00      	cmp	r3, #0
 800266c:	db3d      	blt.n	80026ea <ssd1306_DrawPixel+0x96>
 800266e:	79bb      	ldrb	r3, [r7, #6]
 8002670:	2b1f      	cmp	r3, #31
 8002672:	d83a      	bhi.n	80026ea <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8002674:	797b      	ldrb	r3, [r7, #5]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d11a      	bne.n	80026b0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800267a:	79fa      	ldrb	r2, [r7, #7]
 800267c:	79bb      	ldrb	r3, [r7, #6]
 800267e:	08db      	lsrs	r3, r3, #3
 8002680:	b2d8      	uxtb	r0, r3
 8002682:	4603      	mov	r3, r0
 8002684:	01db      	lsls	r3, r3, #7
 8002686:	4413      	add	r3, r2
 8002688:	4a1b      	ldr	r2, [pc, #108]	; (80026f8 <ssd1306_DrawPixel+0xa4>)
 800268a:	5cd3      	ldrb	r3, [r2, r3]
 800268c:	b25a      	sxtb	r2, r3
 800268e:	79bb      	ldrb	r3, [r7, #6]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	b25b      	sxtb	r3, r3
 800269c:	4313      	orrs	r3, r2
 800269e:	b259      	sxtb	r1, r3
 80026a0:	79fa      	ldrb	r2, [r7, #7]
 80026a2:	4603      	mov	r3, r0
 80026a4:	01db      	lsls	r3, r3, #7
 80026a6:	4413      	add	r3, r2
 80026a8:	b2c9      	uxtb	r1, r1
 80026aa:	4a13      	ldr	r2, [pc, #76]	; (80026f8 <ssd1306_DrawPixel+0xa4>)
 80026ac:	54d1      	strb	r1, [r2, r3]
 80026ae:	e01d      	b.n	80026ec <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80026b0:	79fa      	ldrb	r2, [r7, #7]
 80026b2:	79bb      	ldrb	r3, [r7, #6]
 80026b4:	08db      	lsrs	r3, r3, #3
 80026b6:	b2d8      	uxtb	r0, r3
 80026b8:	4603      	mov	r3, r0
 80026ba:	01db      	lsls	r3, r3, #7
 80026bc:	4413      	add	r3, r2
 80026be:	4a0e      	ldr	r2, [pc, #56]	; (80026f8 <ssd1306_DrawPixel+0xa4>)
 80026c0:	5cd3      	ldrb	r3, [r2, r3]
 80026c2:	b25a      	sxtb	r2, r3
 80026c4:	79bb      	ldrb	r3, [r7, #6]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	b25b      	sxtb	r3, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	b25b      	sxtb	r3, r3
 80026d6:	4013      	ands	r3, r2
 80026d8:	b259      	sxtb	r1, r3
 80026da:	79fa      	ldrb	r2, [r7, #7]
 80026dc:	4603      	mov	r3, r0
 80026de:	01db      	lsls	r3, r3, #7
 80026e0:	4413      	add	r3, r2
 80026e2:	b2c9      	uxtb	r1, r1
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <ssd1306_DrawPixel+0xa4>)
 80026e6:	54d1      	strb	r1, [r2, r3]
 80026e8:	e000      	b.n	80026ec <ssd1306_DrawPixel+0x98>
        return;
 80026ea:	bf00      	nop
    }
}
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000624 	.word	0x20000624

080026fc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80026fc:	b590      	push	{r4, r7, lr}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	4604      	mov	r4, r0
 8002704:	1d38      	adds	r0, r7, #4
 8002706:	e880 0006 	stmia.w	r0, {r1, r2}
 800270a:	461a      	mov	r2, r3
 800270c:	4623      	mov	r3, r4
 800270e:	73fb      	strb	r3, [r7, #15]
 8002710:	4613      	mov	r3, r2
 8002712:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	2b1f      	cmp	r3, #31
 8002718:	d902      	bls.n	8002720 <ssd1306_WriteChar+0x24>
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	2b7e      	cmp	r3, #126	; 0x7e
 800271e:	d901      	bls.n	8002724 <ssd1306_WriteChar+0x28>
        return 0;
 8002720:	2300      	movs	r3, #0
 8002722:	e06d      	b.n	8002800 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002724:	4b38      	ldr	r3, [pc, #224]	; (8002808 <ssd1306_WriteChar+0x10c>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	793b      	ldrb	r3, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	2b80      	cmp	r3, #128	; 0x80
 8002730:	dc06      	bgt.n	8002740 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002732:	4b35      	ldr	r3, [pc, #212]	; (8002808 <ssd1306_WriteChar+0x10c>)
 8002734:	885b      	ldrh	r3, [r3, #2]
 8002736:	461a      	mov	r2, r3
 8002738:	797b      	ldrb	r3, [r7, #5]
 800273a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800273c:	2b20      	cmp	r3, #32
 800273e:	dd01      	ble.n	8002744 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002740:	2300      	movs	r3, #0
 8002742:	e05d      	b.n	8002800 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002744:	2300      	movs	r3, #0
 8002746:	61fb      	str	r3, [r7, #28]
 8002748:	e04c      	b.n	80027e4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	3b20      	subs	r3, #32
 8002750:	7979      	ldrb	r1, [r7, #5]
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4619      	mov	r1, r3
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	440b      	add	r3, r1
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4413      	add	r3, r2
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002764:	2300      	movs	r3, #0
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	e034      	b.n	80027d4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d012      	beq.n	80027a0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800277a:	4b23      	ldr	r3, [pc, #140]	; (8002808 <ssd1306_WriteChar+0x10c>)
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	b2da      	uxtb	r2, r3
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	4413      	add	r3, r2
 8002786:	b2d8      	uxtb	r0, r3
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <ssd1306_WriteChar+0x10c>)
 800278a:	885b      	ldrh	r3, [r3, #2]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	4413      	add	r3, r2
 8002794:	b2db      	uxtb	r3, r3
 8002796:	7bba      	ldrb	r2, [r7, #14]
 8002798:	4619      	mov	r1, r3
 800279a:	f7ff ff5b 	bl	8002654 <ssd1306_DrawPixel>
 800279e:	e016      	b.n	80027ce <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <ssd1306_WriteChar+0x10c>)
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	b2d8      	uxtb	r0, r3
 80027ae:	4b16      	ldr	r3, [pc, #88]	; (8002808 <ssd1306_WriteChar+0x10c>)
 80027b0:	885b      	ldrh	r3, [r3, #2]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	b2d9      	uxtb	r1, r3
 80027bc:	7bbb      	ldrb	r3, [r7, #14]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	bf0c      	ite	eq
 80027c2:	2301      	moveq	r3, #1
 80027c4:	2300      	movne	r3, #0
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	f7ff ff43 	bl	8002654 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	3301      	adds	r3, #1
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	793b      	ldrb	r3, [r7, #4]
 80027d6:	461a      	mov	r2, r3
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4293      	cmp	r3, r2
 80027dc:	d3c5      	bcc.n	800276a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3301      	adds	r3, #1
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	797b      	ldrb	r3, [r7, #5]
 80027e6:	461a      	mov	r2, r3
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d3ad      	bcc.n	800274a <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <ssd1306_WriteChar+0x10c>)
 80027f0:	881a      	ldrh	r2, [r3, #0]
 80027f2:	793b      	ldrb	r3, [r7, #4]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	4b03      	ldr	r3, [pc, #12]	; (8002808 <ssd1306_WriteChar+0x10c>)
 80027fc:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3724      	adds	r7, #36	; 0x24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd90      	pop	{r4, r7, pc}
 8002808:	20000824 	.word	0x20000824

0800280c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	1d38      	adds	r0, r7, #4
 8002816:	e880 0006 	stmia.w	r0, {r1, r2}
 800281a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800281c:	e012      	b.n	8002844 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	7818      	ldrb	r0, [r3, #0]
 8002822:	78fb      	ldrb	r3, [r7, #3]
 8002824:	1d3a      	adds	r2, r7, #4
 8002826:	ca06      	ldmia	r2, {r1, r2}
 8002828:	f7ff ff68 	bl	80026fc <ssd1306_WriteChar>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d002      	beq.n	800283e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	e008      	b.n	8002850 <ssd1306_WriteString+0x44>
        }
        str++;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	3301      	adds	r3, #1
 8002842:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e8      	bne.n	800281e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	781b      	ldrb	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	460a      	mov	r2, r1
 8002862:	71fb      	strb	r3, [r7, #7]
 8002864:	4613      	mov	r3, r2
 8002866:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	b29a      	uxth	r2, r3
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <ssd1306_SetCursor+0x2c>)
 800286e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002870:	79bb      	ldrb	r3, [r7, #6]
 8002872:	b29a      	uxth	r2, r3
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <ssd1306_SetCursor+0x2c>)
 8002876:	805a      	strh	r2, [r3, #2]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	20000824 	.word	0x20000824

08002888 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	4604      	mov	r4, r0
 8002890:	4608      	mov	r0, r1
 8002892:	4611      	mov	r1, r2
 8002894:	461a      	mov	r2, r3
 8002896:	4623      	mov	r3, r4
 8002898:	71fb      	strb	r3, [r7, #7]
 800289a:	4603      	mov	r3, r0
 800289c:	71bb      	strb	r3, [r7, #6]
 800289e:	460b      	mov	r3, r1
 80028a0:	717b      	strb	r3, [r7, #5]
 80028a2:	4613      	mov	r3, r2
 80028a4:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 80028a6:	797b      	ldrb	r3, [r7, #5]
 80028a8:	425b      	negs	r3, r3
 80028aa:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 80028b0:	797b      	ldrb	r3, [r7, #5]
 80028b2:	f1c3 0301 	rsb	r3, r3, #1
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db65      	blt.n	800298e <ssd1306_DrawCircle+0x106>
 80028c2:	79bb      	ldrb	r3, [r7, #6]
 80028c4:	2b1f      	cmp	r3, #31
 80028c6:	d862      	bhi.n	800298e <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	79fa      	ldrb	r2, [r7, #7]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	b2d8      	uxtb	r0, r3
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	79bb      	ldrb	r3, [r7, #6]
 80028d8:	4413      	add	r3, r2
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	793a      	ldrb	r2, [r7, #4]
 80028de:	4619      	mov	r1, r3
 80028e0:	f7ff feb8 	bl	8002654 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	4413      	add	r3, r2
 80028ec:	b2d8      	uxtb	r0, r3
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	79bb      	ldrb	r3, [r7, #6]
 80028f4:	4413      	add	r3, r2
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	793a      	ldrb	r2, [r7, #4]
 80028fa:	4619      	mov	r1, r3
 80028fc:	f7ff feaa 	bl	8002654 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	4413      	add	r3, r2
 8002908:	b2d8      	uxtb	r0, r3
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	79ba      	ldrb	r2, [r7, #6]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	793a      	ldrb	r2, [r7, #4]
 8002916:	4619      	mov	r1, r3
 8002918:	f7ff fe9c 	bl	8002654 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	79fa      	ldrb	r2, [r7, #7]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	b2d8      	uxtb	r0, r3
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	79ba      	ldrb	r2, [r7, #6]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	793a      	ldrb	r2, [r7, #4]
 8002932:	4619      	mov	r1, r3
 8002934:	f7ff fe8e 	bl	8002654 <ssd1306_DrawPixel>
        e2 = err;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	429a      	cmp	r2, r3
 8002942:	dc13      	bgt.n	800296c <ssd1306_DrawCircle+0xe4>
            y++;
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	3301      	adds	r3, #1
 8002948:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	3301      	adds	r3, #1
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	425b      	negs	r3, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	429a      	cmp	r2, r3
 800295e:	d105      	bne.n	800296c <ssd1306_DrawCircle+0xe4>
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	429a      	cmp	r2, r3
 8002966:	dc01      	bgt.n	800296c <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	429a      	cmp	r2, r3
 8002972:	dd08      	ble.n	8002986 <ssd1306_DrawCircle+0xfe>
            x++;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3301      	adds	r3, #1
 8002978:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	3301      	adds	r3, #1
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b00      	cmp	r3, #0
 800298a:	dd9d      	ble.n	80028c8 <ssd1306_DrawCircle+0x40>

    return;
 800298c:	e000      	b.n	8002990 <ssd1306_DrawCircle+0x108>
        return;
 800298e:	bf00      	nop
}
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	bd90      	pop	{r4, r7, pc}

08002996 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80029a0:	2381      	movs	r3, #129	; 0x81
 80029a2:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fd56 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fd52 	bl	8002458 <ssd1306_WriteCommand>
}
 80029b4:	bf00      	nop
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80029cc:	23af      	movs	r3, #175	; 0xaf
 80029ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <ssd1306_SetDisplayOn+0x38>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	715a      	strb	r2, [r3, #5]
 80029d6:	e004      	b.n	80029e2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80029d8:	23ae      	movs	r3, #174	; 0xae
 80029da:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <ssd1306_SetDisplayOn+0x38>)
 80029de:	2200      	movs	r2, #0
 80029e0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fd37 	bl	8002458 <ssd1306_WriteCommand>
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000824 	.word	0x20000824

080029f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029fc:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <HAL_Init+0x40>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a0d      	ldr	r2, [pc, #52]	; (8002a38 <HAL_Init+0x40>)
 8002a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_Init+0x40>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <HAL_Init+0x40>)
 8002a0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a14:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <HAL_Init+0x40>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a07      	ldr	r2, [pc, #28]	; (8002a38 <HAL_Init+0x40>)
 8002a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a20:	2003      	movs	r0, #3
 8002a22:	f000 fd4f 	bl	80034c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a26:	200f      	movs	r0, #15
 8002a28:	f000 f808 	bl	8002a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a2c:	f7ff f870 	bl	8001b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40023c00 	.word	0x40023c00

08002a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a44:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_InitTick+0x54>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <HAL_InitTick+0x58>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fd67 	bl	800352e <HAL_SYSTICK_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e00e      	b.n	8002a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b0f      	cmp	r3, #15
 8002a6e:	d80a      	bhi.n	8002a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a70:	2200      	movs	r2, #0
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	f04f 30ff 	mov.w	r0, #4294967295
 8002a78:	f000 fd2f 	bl	80034da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a7c:	4a06      	ldr	r2, [pc, #24]	; (8002a98 <HAL_InitTick+0x5c>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e000      	b.n	8002a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000000 	.word	0x20000000
 8002a94:	20000028 	.word	0x20000028
 8002a98:	20000024 	.word	0x20000024

08002a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <HAL_IncTick+0x20>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_IncTick+0x24>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <HAL_IncTick+0x24>)
 8002aae:	6013      	str	r3, [r2, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000028 	.word	0x20000028
 8002ac0:	2000082c 	.word	0x2000082c

08002ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <HAL_GetTick+0x14>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	2000082c 	.word	0x2000082c

08002adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ae4:	f7ff ffee 	bl	8002ac4 <HAL_GetTick>
 8002ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af4:	d005      	beq.n	8002b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_Delay+0x44>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4413      	add	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b02:	bf00      	nop
 8002b04:	f7ff ffde 	bl	8002ac4 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d8f7      	bhi.n	8002b04 <HAL_Delay+0x28>
  {
  }
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000028 	.word	0x20000028

08002b24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e033      	b.n	8002ba2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff f80c 	bl	8001b60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d118      	bne.n	8002b94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b6a:	f023 0302 	bic.w	r3, r3, #2
 8002b6e:	f043 0202 	orr.w	r2, r3, #2
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fad8 	bl	800312c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f023 0303 	bic.w	r3, r3, #3
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
 8002b92:	e001      	b.n	8002b98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_Start+0x1a>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e0b2      	b.n	8002d2c <HAL_ADC_Start+0x180>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d018      	beq.n	8002c0e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bec:	4b52      	ldr	r3, [pc, #328]	; (8002d38 <HAL_ADC_Start+0x18c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a52      	ldr	r2, [pc, #328]	; (8002d3c <HAL_ADC_Start+0x190>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	0c9a      	lsrs	r2, r3, #18
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c00:	e002      	b.n	8002c08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f9      	bne.n	8002c02 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d17a      	bne.n	8002d12 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d007      	beq.n	8002c4e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5a:	d106      	bne.n	8002c6a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c60:	f023 0206 	bic.w	r2, r3, #6
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	645a      	str	r2, [r3, #68]	; 0x44
 8002c68:	e002      	b.n	8002c70 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c78:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <HAL_ADC_Start+0x194>)
 8002c7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c84:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 031f 	and.w	r3, r3, #31
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d12a      	bne.n	8002ce8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a2b      	ldr	r2, [pc, #172]	; (8002d44 <HAL_ADC_Start+0x198>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d015      	beq.n	8002cc8 <HAL_ADC_Start+0x11c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a29      	ldr	r2, [pc, #164]	; (8002d48 <HAL_ADC_Start+0x19c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d105      	bne.n	8002cb2 <HAL_ADC_Start+0x106>
 8002ca6:	4b26      	ldr	r3, [pc, #152]	; (8002d40 <HAL_ADC_Start+0x194>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a25      	ldr	r2, [pc, #148]	; (8002d4c <HAL_ADC_Start+0x1a0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d136      	bne.n	8002d2a <HAL_ADC_Start+0x17e>
 8002cbc:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_ADC_Start+0x194>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d130      	bne.n	8002d2a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d129      	bne.n	8002d2a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	e020      	b.n	8002d2a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a15      	ldr	r2, [pc, #84]	; (8002d44 <HAL_ADC_Start+0x198>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d11b      	bne.n	8002d2a <HAL_ADC_Start+0x17e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d114      	bne.n	8002d2a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	e00b      	b.n	8002d2a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f043 0210 	orr.w	r2, r3, #16
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	f043 0201 	orr.w	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	431bde83 	.word	0x431bde83
 8002d40:	40012300 	.word	0x40012300
 8002d44:	40012000 	.word	0x40012000
 8002d48:	40012100 	.word	0x40012100
 8002d4c:	40012200 	.word	0x40012200

08002d50 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_Stop+0x16>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e021      	b.n	8002daa <HAL_ADC_Stop+0x5a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d94:	f023 0301 	bic.w	r3, r3, #1
 8002d98:	f043 0201 	orr.w	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd2:	d113      	bne.n	8002dfc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002de2:	d10b      	bne.n	8002dfc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e063      	b.n	8002ec4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002dfc:	f7ff fe62 	bl	8002ac4 <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e02:	e021      	b.n	8002e48 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0a:	d01d      	beq.n	8002e48 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <HAL_ADC_PollForConversion+0x6c>
 8002e12:	f7ff fe57 	bl	8002ac4 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d212      	bcs.n	8002e48 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d00b      	beq.n	8002e48 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	f043 0204 	orr.w	r2, r3, #4
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e03d      	b.n	8002ec4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d1d6      	bne.n	8002e04 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f06f 0212 	mvn.w	r2, #18
 8002e5e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d123      	bne.n	8002ec2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d11f      	bne.n	8002ec2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d006      	beq.n	8002e9e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d111      	bne.n	8002ec2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f043 0201 	orr.w	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x1c>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e105      	b.n	8003110 <HAL_ADC_ConfigChannel+0x228>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b09      	cmp	r3, #9
 8002f12:	d925      	bls.n	8002f60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68d9      	ldr	r1, [r3, #12]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	3b1e      	subs	r3, #30
 8002f2a:	2207      	movs	r2, #7
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43da      	mvns	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	400a      	ands	r2, r1
 8002f38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68d9      	ldr	r1, [r3, #12]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4403      	add	r3, r0
 8002f52:	3b1e      	subs	r3, #30
 8002f54:	409a      	lsls	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	e022      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6919      	ldr	r1, [r3, #16]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4613      	mov	r3, r2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4413      	add	r3, r2
 8002f74:	2207      	movs	r2, #7
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	400a      	ands	r2, r1
 8002f82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6919      	ldr	r1, [r3, #16]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	4618      	mov	r0, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4403      	add	r3, r0
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b06      	cmp	r3, #6
 8002fac:	d824      	bhi.n	8002ff8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3b05      	subs	r3, #5
 8002fc0:	221f      	movs	r2, #31
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	400a      	ands	r2, r1
 8002fce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	4618      	mov	r0, r3
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3b05      	subs	r3, #5
 8002fea:	fa00 f203 	lsl.w	r2, r0, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ff6:	e04c      	b.n	8003092 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b0c      	cmp	r3, #12
 8002ffe:	d824      	bhi.n	800304a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	3b23      	subs	r3, #35	; 0x23
 8003012:	221f      	movs	r2, #31
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43da      	mvns	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	400a      	ands	r2, r1
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	b29b      	uxth	r3, r3
 800302e:	4618      	mov	r0, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	3b23      	subs	r3, #35	; 0x23
 800303c:	fa00 f203 	lsl.w	r2, r0, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
 8003048:	e023      	b.n	8003092 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	3b41      	subs	r3, #65	; 0x41
 800305c:	221f      	movs	r2, #31
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43da      	mvns	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	400a      	ands	r2, r1
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	b29b      	uxth	r3, r3
 8003078:	4618      	mov	r0, r3
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	3b41      	subs	r3, #65	; 0x41
 8003086:	fa00 f203 	lsl.w	r2, r0, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003092:	4b22      	ldr	r3, [pc, #136]	; (800311c <HAL_ADC_ConfigChannel+0x234>)
 8003094:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a21      	ldr	r2, [pc, #132]	; (8003120 <HAL_ADC_ConfigChannel+0x238>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d109      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x1cc>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b12      	cmp	r3, #18
 80030a6:	d105      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a19      	ldr	r2, [pc, #100]	; (8003120 <HAL_ADC_ConfigChannel+0x238>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d123      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x21e>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d003      	beq.n	80030ce <HAL_ADC_ConfigChannel+0x1e6>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b11      	cmp	r3, #17
 80030cc:	d11b      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b10      	cmp	r3, #16
 80030e0:	d111      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_ADC_ConfigChannel+0x23c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a10      	ldr	r2, [pc, #64]	; (8003128 <HAL_ADC_ConfigChannel+0x240>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	0c9a      	lsrs	r2, r3, #18
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030f8:	e002      	b.n	8003100 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f9      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	40012300 	.word	0x40012300
 8003120:	40012000 	.word	0x40012000
 8003124:	20000000 	.word	0x20000000
 8003128:	431bde83 	.word	0x431bde83

0800312c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003134:	4b79      	ldr	r3, [pc, #484]	; (800331c <ADC_Init+0x1f0>)
 8003136:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	431a      	orrs	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003160:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	021a      	lsls	r2, r3, #8
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6899      	ldr	r1, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	4a58      	ldr	r2, [pc, #352]	; (8003320 <ADC_Init+0x1f4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d022      	beq.n	800320a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6899      	ldr	r1, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6899      	ldr	r1, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	e00f      	b.n	800322a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003228:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0202 	bic.w	r2, r2, #2
 8003238:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6899      	ldr	r1, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	7e1b      	ldrb	r3, [r3, #24]
 8003244:	005a      	lsls	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01b      	beq.n	8003290 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003266:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003276:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6859      	ldr	r1, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	3b01      	subs	r3, #1
 8003284:	035a      	lsls	r2, r3, #13
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	e007      	b.n	80032a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800329e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	051a      	lsls	r2, r3, #20
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6899      	ldr	r1, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032e2:	025a      	lsls	r2, r3, #9
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6899      	ldr	r1, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	029a      	lsls	r2, r3, #10
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	609a      	str	r2, [r3, #8]
}
 8003310:	bf00      	nop
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	40012300 	.word	0x40012300
 8003320:	0f000001 	.word	0x0f000001

08003324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003340:	4013      	ands	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800334c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003356:	4a04      	ldr	r2, [pc, #16]	; (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	60d3      	str	r3, [r2, #12]
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <__NVIC_GetPriorityGrouping+0x18>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f003 0307 	and.w	r3, r3, #7
}
 800337a:	4618      	mov	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	2b00      	cmp	r3, #0
 8003398:	db0b      	blt.n	80033b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	4907      	ldr	r1, [pc, #28]	; (80033c0 <__NVIC_EnableIRQ+0x38>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	2001      	movs	r0, #1
 80033aa:	fa00 f202 	lsl.w	r2, r0, r2
 80033ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000e100 	.word	0xe000e100

080033c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	db0a      	blt.n	80033ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	490c      	ldr	r1, [pc, #48]	; (8003410 <__NVIC_SetPriority+0x4c>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	440b      	add	r3, r1
 80033e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033ec:	e00a      	b.n	8003404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	4908      	ldr	r1, [pc, #32]	; (8003414 <__NVIC_SetPriority+0x50>)
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	3b04      	subs	r3, #4
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	440b      	add	r3, r1
 8003402:	761a      	strb	r2, [r3, #24]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000e100 	.word	0xe000e100
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	; 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f1c3 0307 	rsb	r3, r3, #7
 8003432:	2b04      	cmp	r3, #4
 8003434:	bf28      	it	cs
 8003436:	2304      	movcs	r3, #4
 8003438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3304      	adds	r3, #4
 800343e:	2b06      	cmp	r3, #6
 8003440:	d902      	bls.n	8003448 <NVIC_EncodePriority+0x30>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3b03      	subs	r3, #3
 8003446:	e000      	b.n	800344a <NVIC_EncodePriority+0x32>
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	f04f 32ff 	mov.w	r2, #4294967295
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43da      	mvns	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	401a      	ands	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003460:	f04f 31ff 	mov.w	r1, #4294967295
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	43d9      	mvns	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	4313      	orrs	r3, r2
         );
}
 8003472:	4618      	mov	r0, r3
 8003474:	3724      	adds	r7, #36	; 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003490:	d301      	bcc.n	8003496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003492:	2301      	movs	r3, #1
 8003494:	e00f      	b.n	80034b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003496:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <SysTick_Config+0x40>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349e:	210f      	movs	r1, #15
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
 80034a4:	f7ff ff8e 	bl	80033c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <SysTick_Config+0x40>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <SysTick_Config+0x40>)
 80034b0:	2207      	movs	r2, #7
 80034b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	e000e010 	.word	0xe000e010

080034c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff29 	bl	8003324 <__NVIC_SetPriorityGrouping>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034ec:	f7ff ff3e 	bl	800336c <__NVIC_GetPriorityGrouping>
 80034f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	6978      	ldr	r0, [r7, #20]
 80034f8:	f7ff ff8e 	bl	8003418 <NVIC_EncodePriority>
 80034fc:	4602      	mov	r2, r0
 80034fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff5d 	bl	80033c4 <__NVIC_SetPriority>
}
 800350a:	bf00      	nop
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	4603      	mov	r3, r0
 800351a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800351c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff31 	bl	8003388 <__NVIC_EnableIRQ>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ffa2 	bl	8003480 <SysTick_Config>
 800353c:	4603      	mov	r3, r0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003554:	f7ff fab6 	bl	8002ac4 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e099      	b.n	8003698 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003584:	e00f      	b.n	80035a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003586:	f7ff fa9d 	bl	8002ac4 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b05      	cmp	r3, #5
 8003592:	d908      	bls.n	80035a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2203      	movs	r2, #3
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e078      	b.n	8003698 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e8      	bne.n	8003586 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4b38      	ldr	r3, [pc, #224]	; (80036a0 <HAL_DMA_Init+0x158>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d107      	bne.n	8003610 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	4313      	orrs	r3, r2
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f023 0307 	bic.w	r3, r3, #7
 8003626:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	2b04      	cmp	r3, #4
 8003638:	d117      	bne.n	800366a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00e      	beq.n	800366a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f9e9 	bl	8003a24 <DMA_CheckFifoParam>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2240      	movs	r2, #64	; 0x40
 800365c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003666:	2301      	movs	r3, #1
 8003668:	e016      	b.n	8003698 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f9a0 	bl	80039b8 <DMA_CalcBaseAndBitshift>
 8003678:	4603      	mov	r3, r0
 800367a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003680:	223f      	movs	r2, #63	; 0x3f
 8003682:	409a      	lsls	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	f010803f 	.word	0xf010803f

080036a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036b0:	4b8e      	ldr	r3, [pc, #568]	; (80038ec <HAL_DMA_IRQHandler+0x248>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a8e      	ldr	r2, [pc, #568]	; (80038f0 <HAL_DMA_IRQHandler+0x24c>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	0a9b      	lsrs	r3, r3, #10
 80036bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	2208      	movs	r2, #8
 80036d0:	409a      	lsls	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d01a      	beq.n	8003710 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d013      	beq.n	8003710 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0204 	bic.w	r2, r2, #4
 80036f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fc:	2208      	movs	r2, #8
 80036fe:	409a      	lsls	r2, r3
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	f043 0201 	orr.w	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003714:	2201      	movs	r2, #1
 8003716:	409a      	lsls	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d012      	beq.n	8003746 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003732:	2201      	movs	r2, #1
 8003734:	409a      	lsls	r2, r3
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373e:	f043 0202 	orr.w	r2, r3, #2
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374a:	2204      	movs	r2, #4
 800374c:	409a      	lsls	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4013      	ands	r3, r2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d012      	beq.n	800377c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00b      	beq.n	800377c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003768:	2204      	movs	r2, #4
 800376a:	409a      	lsls	r2, r3
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003774:	f043 0204 	orr.w	r2, r3, #4
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003780:	2210      	movs	r2, #16
 8003782:	409a      	lsls	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d043      	beq.n	8003814 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d03c      	beq.n	8003814 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379e:	2210      	movs	r2, #16
 80037a0:	409a      	lsls	r2, r3
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d018      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d108      	bne.n	80037d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d024      	beq.n	8003814 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	4798      	blx	r3
 80037d2:	e01f      	b.n	8003814 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d01b      	beq.n	8003814 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
 80037e4:	e016      	b.n	8003814 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d107      	bne.n	8003804 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0208 	bic.w	r2, r2, #8
 8003802:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003818:	2220      	movs	r2, #32
 800381a:	409a      	lsls	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 808f 	beq.w	8003944 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8087 	beq.w	8003944 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383a:	2220      	movs	r2, #32
 800383c:	409a      	lsls	r2, r3
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b05      	cmp	r3, #5
 800384c:	d136      	bne.n	80038bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0216 	bic.w	r2, r2, #22
 800385c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800386c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d103      	bne.n	800387e <HAL_DMA_IRQHandler+0x1da>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0208 	bic.w	r2, r2, #8
 800388c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003892:	223f      	movs	r2, #63	; 0x3f
 8003894:	409a      	lsls	r2, r3
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d07e      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	4798      	blx	r3
        }
        return;
 80038ba:	e079      	b.n	80039b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d01d      	beq.n	8003906 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10d      	bne.n	80038f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d031      	beq.n	8003944 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
 80038e8:	e02c      	b.n	8003944 <HAL_DMA_IRQHandler+0x2a0>
 80038ea:	bf00      	nop
 80038ec:	20000000 	.word	0x20000000
 80038f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d023      	beq.n	8003944 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
 8003904:	e01e      	b.n	8003944 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10f      	bne.n	8003934 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0210 	bic.w	r2, r2, #16
 8003922:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	2b00      	cmp	r3, #0
 800394a:	d032      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d022      	beq.n	800399e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2205      	movs	r2, #5
 800395c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0201 	bic.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	3301      	adds	r3, #1
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	429a      	cmp	r2, r3
 800397a:	d307      	bcc.n	800398c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f2      	bne.n	8003970 <HAL_DMA_IRQHandler+0x2cc>
 800398a:	e000      	b.n	800398e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800398c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	4798      	blx	r3
 80039ae:	e000      	b.n	80039b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80039b0:	bf00      	nop
    }
  }
}
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	3b10      	subs	r3, #16
 80039c8:	4a14      	ldr	r2, [pc, #80]	; (8003a1c <DMA_CalcBaseAndBitshift+0x64>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039d2:	4a13      	ldr	r2, [pc, #76]	; (8003a20 <DMA_CalcBaseAndBitshift+0x68>)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4413      	add	r3, r2
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d909      	bls.n	80039fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039ee:	f023 0303 	bic.w	r3, r3, #3
 80039f2:	1d1a      	adds	r2, r3, #4
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	659a      	str	r2, [r3, #88]	; 0x58
 80039f8:	e007      	b.n	8003a0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a02:	f023 0303 	bic.w	r3, r3, #3
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	aaaaaaab 	.word	0xaaaaaaab
 8003a20:	0800eaac 	.word	0x0800eaac

08003a24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d11f      	bne.n	8003a7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d856      	bhi.n	8003af2 <DMA_CheckFifoParam+0xce>
 8003a44:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <DMA_CheckFifoParam+0x28>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a5d 	.word	0x08003a5d
 8003a50:	08003a6f 	.word	0x08003a6f
 8003a54:	08003a5d 	.word	0x08003a5d
 8003a58:	08003af3 	.word	0x08003af3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d046      	beq.n	8003af6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a6c:	e043      	b.n	8003af6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a76:	d140      	bne.n	8003afa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a7c:	e03d      	b.n	8003afa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a86:	d121      	bne.n	8003acc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d837      	bhi.n	8003afe <DMA_CheckFifoParam+0xda>
 8003a8e:	a201      	add	r2, pc, #4	; (adr r2, 8003a94 <DMA_CheckFifoParam+0x70>)
 8003a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a94:	08003aa5 	.word	0x08003aa5
 8003a98:	08003aab 	.word	0x08003aab
 8003a9c:	08003aa5 	.word	0x08003aa5
 8003aa0:	08003abd 	.word	0x08003abd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa8:	e030      	b.n	8003b0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d025      	beq.n	8003b02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aba:	e022      	b.n	8003b02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ac4:	d11f      	bne.n	8003b06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aca:	e01c      	b.n	8003b06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d903      	bls.n	8003ada <DMA_CheckFifoParam+0xb6>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d003      	beq.n	8003ae0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ad8:	e018      	b.n	8003b0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
      break;
 8003ade:	e015      	b.n	8003b0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00e      	beq.n	8003b0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
      break;
 8003af0:	e00b      	b.n	8003b0a <DMA_CheckFifoParam+0xe6>
      break;
 8003af2:	bf00      	nop
 8003af4:	e00a      	b.n	8003b0c <DMA_CheckFifoParam+0xe8>
      break;
 8003af6:	bf00      	nop
 8003af8:	e008      	b.n	8003b0c <DMA_CheckFifoParam+0xe8>
      break;
 8003afa:	bf00      	nop
 8003afc:	e006      	b.n	8003b0c <DMA_CheckFifoParam+0xe8>
      break;
 8003afe:	bf00      	nop
 8003b00:	e004      	b.n	8003b0c <DMA_CheckFifoParam+0xe8>
      break;
 8003b02:	bf00      	nop
 8003b04:	e002      	b.n	8003b0c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b06:	bf00      	nop
 8003b08:	e000      	b.n	8003b0c <DMA_CheckFifoParam+0xe8>
      break;
 8003b0a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop

08003b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b089      	sub	sp, #36	; 0x24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	e16b      	b.n	8003e10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b38:	2201      	movs	r2, #1
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	f040 815a 	bne.w	8003e0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d005      	beq.n	8003b6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d130      	bne.n	8003bd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	2203      	movs	r2, #3
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4013      	ands	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	f003 0201 	and.w	r2, r3, #1
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d017      	beq.n	8003c0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	2203      	movs	r2, #3
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d123      	bne.n	8003c60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	08da      	lsrs	r2, r3, #3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3208      	adds	r2, #8
 8003c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	220f      	movs	r2, #15
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	08da      	lsrs	r2, r3, #3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3208      	adds	r2, #8
 8003c5a:	69b9      	ldr	r1, [r7, #24]
 8003c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 0203 	and.w	r2, r3, #3
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80b4 	beq.w	8003e0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	4b60      	ldr	r3, [pc, #384]	; (8003e28 <HAL_GPIO_Init+0x30c>)
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	4a5f      	ldr	r2, [pc, #380]	; (8003e28 <HAL_GPIO_Init+0x30c>)
 8003cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cb2:	4b5d      	ldr	r3, [pc, #372]	; (8003e28 <HAL_GPIO_Init+0x30c>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cbe:	4a5b      	ldr	r2, [pc, #364]	; (8003e2c <HAL_GPIO_Init+0x310>)
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	089b      	lsrs	r3, r3, #2
 8003cc4:	3302      	adds	r3, #2
 8003cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	220f      	movs	r2, #15
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a52      	ldr	r2, [pc, #328]	; (8003e30 <HAL_GPIO_Init+0x314>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d02b      	beq.n	8003d42 <HAL_GPIO_Init+0x226>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a51      	ldr	r2, [pc, #324]	; (8003e34 <HAL_GPIO_Init+0x318>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d025      	beq.n	8003d3e <HAL_GPIO_Init+0x222>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a50      	ldr	r2, [pc, #320]	; (8003e38 <HAL_GPIO_Init+0x31c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d01f      	beq.n	8003d3a <HAL_GPIO_Init+0x21e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a4f      	ldr	r2, [pc, #316]	; (8003e3c <HAL_GPIO_Init+0x320>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d019      	beq.n	8003d36 <HAL_GPIO_Init+0x21a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a4e      	ldr	r2, [pc, #312]	; (8003e40 <HAL_GPIO_Init+0x324>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <HAL_GPIO_Init+0x216>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a4d      	ldr	r2, [pc, #308]	; (8003e44 <HAL_GPIO_Init+0x328>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00d      	beq.n	8003d2e <HAL_GPIO_Init+0x212>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a4c      	ldr	r2, [pc, #304]	; (8003e48 <HAL_GPIO_Init+0x32c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d007      	beq.n	8003d2a <HAL_GPIO_Init+0x20e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a4b      	ldr	r2, [pc, #300]	; (8003e4c <HAL_GPIO_Init+0x330>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d101      	bne.n	8003d26 <HAL_GPIO_Init+0x20a>
 8003d22:	2307      	movs	r3, #7
 8003d24:	e00e      	b.n	8003d44 <HAL_GPIO_Init+0x228>
 8003d26:	2308      	movs	r3, #8
 8003d28:	e00c      	b.n	8003d44 <HAL_GPIO_Init+0x228>
 8003d2a:	2306      	movs	r3, #6
 8003d2c:	e00a      	b.n	8003d44 <HAL_GPIO_Init+0x228>
 8003d2e:	2305      	movs	r3, #5
 8003d30:	e008      	b.n	8003d44 <HAL_GPIO_Init+0x228>
 8003d32:	2304      	movs	r3, #4
 8003d34:	e006      	b.n	8003d44 <HAL_GPIO_Init+0x228>
 8003d36:	2303      	movs	r3, #3
 8003d38:	e004      	b.n	8003d44 <HAL_GPIO_Init+0x228>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e002      	b.n	8003d44 <HAL_GPIO_Init+0x228>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <HAL_GPIO_Init+0x228>
 8003d42:	2300      	movs	r3, #0
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	f002 0203 	and.w	r2, r2, #3
 8003d4a:	0092      	lsls	r2, r2, #2
 8003d4c:	4093      	lsls	r3, r2
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d54:	4935      	ldr	r1, [pc, #212]	; (8003e2c <HAL_GPIO_Init+0x310>)
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	089b      	lsrs	r3, r3, #2
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d62:	4b3b      	ldr	r3, [pc, #236]	; (8003e50 <HAL_GPIO_Init+0x334>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d86:	4a32      	ldr	r2, [pc, #200]	; (8003e50 <HAL_GPIO_Init+0x334>)
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d8c:	4b30      	ldr	r3, [pc, #192]	; (8003e50 <HAL_GPIO_Init+0x334>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003db0:	4a27      	ldr	r2, [pc, #156]	; (8003e50 <HAL_GPIO_Init+0x334>)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003db6:	4b26      	ldr	r3, [pc, #152]	; (8003e50 <HAL_GPIO_Init+0x334>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dda:	4a1d      	ldr	r2, [pc, #116]	; (8003e50 <HAL_GPIO_Init+0x334>)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003de0:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <HAL_GPIO_Init+0x334>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	43db      	mvns	r3, r3
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	4013      	ands	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e04:	4a12      	ldr	r2, [pc, #72]	; (8003e50 <HAL_GPIO_Init+0x334>)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	61fb      	str	r3, [r7, #28]
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	2b0f      	cmp	r3, #15
 8003e14:	f67f ae90 	bls.w	8003b38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e18:	bf00      	nop
 8003e1a:	bf00      	nop
 8003e1c:	3724      	adds	r7, #36	; 0x24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40013800 	.word	0x40013800
 8003e30:	40020000 	.word	0x40020000
 8003e34:	40020400 	.word	0x40020400
 8003e38:	40020800 	.word	0x40020800
 8003e3c:	40020c00 	.word	0x40020c00
 8003e40:	40021000 	.word	0x40021000
 8003e44:	40021400 	.word	0x40021400
 8003e48:	40021800 	.word	0x40021800
 8003e4c:	40021c00 	.word	0x40021c00
 8003e50:	40013c00 	.word	0x40013c00

08003e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	807b      	strh	r3, [r7, #2]
 8003e60:	4613      	mov	r3, r2
 8003e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e64:	787b      	ldrb	r3, [r7, #1]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e6a:	887a      	ldrh	r2, [r7, #2]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e70:	e003      	b.n	8003e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e72:	887b      	ldrh	r3, [r7, #2]
 8003e74:	041a      	lsls	r2, r3, #16
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	619a      	str	r2, [r3, #24]
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b085      	sub	sp, #20
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e98:	887a      	ldrh	r2, [r7, #2]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	041a      	lsls	r2, r3, #16
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	43d9      	mvns	r1, r3
 8003ea4:	887b      	ldrh	r3, [r7, #2]
 8003ea6:	400b      	ands	r3, r1
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	619a      	str	r2, [r3, #24]
}
 8003eae:	bf00      	nop
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
	...

08003ebc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ec6:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d006      	beq.n	8003ee0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ed2:	4a05      	ldr	r2, [pc, #20]	; (8003ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ed4:	88fb      	ldrh	r3, [r7, #6]
 8003ed6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 f806 	bl	8003eec <HAL_GPIO_EXTI_Callback>
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40013c00 	.word	0x40013c00

08003eec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e267      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d075      	beq.n	800400e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f22:	4b88      	ldr	r3, [pc, #544]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d00c      	beq.n	8003f48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f2e:	4b85      	ldr	r3, [pc, #532]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d112      	bne.n	8003f60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f3a:	4b82      	ldr	r3, [pc, #520]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f46:	d10b      	bne.n	8003f60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f48:	4b7e      	ldr	r3, [pc, #504]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d05b      	beq.n	800400c <HAL_RCC_OscConfig+0x108>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d157      	bne.n	800400c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e242      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f68:	d106      	bne.n	8003f78 <HAL_RCC_OscConfig+0x74>
 8003f6a:	4b76      	ldr	r3, [pc, #472]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a75      	ldr	r2, [pc, #468]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	e01d      	b.n	8003fb4 <HAL_RCC_OscConfig+0xb0>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCC_OscConfig+0x98>
 8003f82:	4b70      	ldr	r3, [pc, #448]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a6f      	ldr	r2, [pc, #444]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	4b6d      	ldr	r3, [pc, #436]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a6c      	ldr	r2, [pc, #432]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	e00b      	b.n	8003fb4 <HAL_RCC_OscConfig+0xb0>
 8003f9c:	4b69      	ldr	r3, [pc, #420]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a68      	ldr	r2, [pc, #416]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	4b66      	ldr	r3, [pc, #408]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a65      	ldr	r2, [pc, #404]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d013      	beq.n	8003fe4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbc:	f7fe fd82 	bl	8002ac4 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fc4:	f7fe fd7e 	bl	8002ac4 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b64      	cmp	r3, #100	; 0x64
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e207      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd6:	4b5b      	ldr	r3, [pc, #364]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCC_OscConfig+0xc0>
 8003fe2:	e014      	b.n	800400e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7fe fd6e 	bl	8002ac4 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fec:	f7fe fd6a 	bl	8002ac4 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b64      	cmp	r3, #100	; 0x64
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e1f3      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ffe:	4b51      	ldr	r3, [pc, #324]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0xe8>
 800400a:	e000      	b.n	800400e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d063      	beq.n	80040e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800401a:	4b4a      	ldr	r3, [pc, #296]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00b      	beq.n	800403e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004026:	4b47      	ldr	r3, [pc, #284]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800402e:	2b08      	cmp	r3, #8
 8004030:	d11c      	bne.n	800406c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004032:	4b44      	ldr	r3, [pc, #272]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d116      	bne.n	800406c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403e:	4b41      	ldr	r3, [pc, #260]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_RCC_OscConfig+0x152>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d001      	beq.n	8004056 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e1c7      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004056:	4b3b      	ldr	r3, [pc, #236]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4937      	ldr	r1, [pc, #220]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8004066:	4313      	orrs	r3, r2
 8004068:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406a:	e03a      	b.n	80040e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d020      	beq.n	80040b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004074:	4b34      	ldr	r3, [pc, #208]	; (8004148 <HAL_RCC_OscConfig+0x244>)
 8004076:	2201      	movs	r2, #1
 8004078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407a:	f7fe fd23 	bl	8002ac4 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004082:	f7fe fd1f 	bl	8002ac4 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e1a8      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004094:	4b2b      	ldr	r3, [pc, #172]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a0:	4b28      	ldr	r3, [pc, #160]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4925      	ldr	r1, [pc, #148]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	600b      	str	r3, [r1, #0]
 80040b4:	e015      	b.n	80040e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040b6:	4b24      	ldr	r3, [pc, #144]	; (8004148 <HAL_RCC_OscConfig+0x244>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fe fd02 	bl	8002ac4 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c4:	f7fe fcfe 	bl	8002ac4 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e187      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d6:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d036      	beq.n	800415c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d016      	beq.n	8004124 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040f6:	4b15      	ldr	r3, [pc, #84]	; (800414c <HAL_RCC_OscConfig+0x248>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fc:	f7fe fce2 	bl	8002ac4 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004104:	f7fe fcde 	bl	8002ac4 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e167      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004116:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_RCC_OscConfig+0x240>)
 8004118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x200>
 8004122:	e01b      	b.n	800415c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004124:	4b09      	ldr	r3, [pc, #36]	; (800414c <HAL_RCC_OscConfig+0x248>)
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412a:	f7fe fccb 	bl	8002ac4 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004130:	e00e      	b.n	8004150 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004132:	f7fe fcc7 	bl	8002ac4 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d907      	bls.n	8004150 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e150      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
 8004144:	40023800 	.word	0x40023800
 8004148:	42470000 	.word	0x42470000
 800414c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004150:	4b88      	ldr	r3, [pc, #544]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1ea      	bne.n	8004132 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 8097 	beq.w	8004298 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416e:	4b81      	ldr	r3, [pc, #516]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	4b7d      	ldr	r3, [pc, #500]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	4a7c      	ldr	r2, [pc, #496]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004188:	6413      	str	r3, [r2, #64]	; 0x40
 800418a:	4b7a      	ldr	r3, [pc, #488]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004196:	2301      	movs	r3, #1
 8004198:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419a:	4b77      	ldr	r3, [pc, #476]	; (8004378 <HAL_RCC_OscConfig+0x474>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d118      	bne.n	80041d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a6:	4b74      	ldr	r3, [pc, #464]	; (8004378 <HAL_RCC_OscConfig+0x474>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a73      	ldr	r2, [pc, #460]	; (8004378 <HAL_RCC_OscConfig+0x474>)
 80041ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b2:	f7fe fc87 	bl	8002ac4 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ba:	f7fe fc83 	bl	8002ac4 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e10c      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041cc:	4b6a      	ldr	r3, [pc, #424]	; (8004378 <HAL_RCC_OscConfig+0x474>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0f0      	beq.n	80041ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d106      	bne.n	80041ee <HAL_RCC_OscConfig+0x2ea>
 80041e0:	4b64      	ldr	r3, [pc, #400]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	4a63      	ldr	r2, [pc, #396]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	6713      	str	r3, [r2, #112]	; 0x70
 80041ec:	e01c      	b.n	8004228 <HAL_RCC_OscConfig+0x324>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b05      	cmp	r3, #5
 80041f4:	d10c      	bne.n	8004210 <HAL_RCC_OscConfig+0x30c>
 80041f6:	4b5f      	ldr	r3, [pc, #380]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	4a5e      	ldr	r2, [pc, #376]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 80041fc:	f043 0304 	orr.w	r3, r3, #4
 8004200:	6713      	str	r3, [r2, #112]	; 0x70
 8004202:	4b5c      	ldr	r3, [pc, #368]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	4a5b      	ldr	r2, [pc, #364]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	6713      	str	r3, [r2, #112]	; 0x70
 800420e:	e00b      	b.n	8004228 <HAL_RCC_OscConfig+0x324>
 8004210:	4b58      	ldr	r3, [pc, #352]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	4a57      	ldr	r2, [pc, #348]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	6713      	str	r3, [r2, #112]	; 0x70
 800421c:	4b55      	ldr	r3, [pc, #340]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 800421e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004220:	4a54      	ldr	r2, [pc, #336]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004222:	f023 0304 	bic.w	r3, r3, #4
 8004226:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d015      	beq.n	800425c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004230:	f7fe fc48 	bl	8002ac4 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004236:	e00a      	b.n	800424e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004238:	f7fe fc44 	bl	8002ac4 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f241 3288 	movw	r2, #5000	; 0x1388
 8004246:	4293      	cmp	r3, r2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e0cb      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424e:	4b49      	ldr	r3, [pc, #292]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0ee      	beq.n	8004238 <HAL_RCC_OscConfig+0x334>
 800425a:	e014      	b.n	8004286 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425c:	f7fe fc32 	bl	8002ac4 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004262:	e00a      	b.n	800427a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004264:	f7fe fc2e 	bl	8002ac4 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e0b5      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800427a:	4b3e      	ldr	r3, [pc, #248]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1ee      	bne.n	8004264 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004286:	7dfb      	ldrb	r3, [r7, #23]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d105      	bne.n	8004298 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800428c:	4b39      	ldr	r3, [pc, #228]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	4a38      	ldr	r2, [pc, #224]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004296:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80a1 	beq.w	80043e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042a2:	4b34      	ldr	r3, [pc, #208]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 030c 	and.w	r3, r3, #12
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d05c      	beq.n	8004368 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d141      	bne.n	800433a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b6:	4b31      	ldr	r3, [pc, #196]	; (800437c <HAL_RCC_OscConfig+0x478>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042bc:	f7fe fc02 	bl	8002ac4 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c4:	f7fe fbfe 	bl	8002ac4 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e087      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d6:	4b27      	ldr	r3, [pc, #156]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69da      	ldr	r2, [r3, #28]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	019b      	lsls	r3, r3, #6
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	085b      	lsrs	r3, r3, #1
 80042fa:	3b01      	subs	r3, #1
 80042fc:	041b      	lsls	r3, r3, #16
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	061b      	lsls	r3, r3, #24
 8004306:	491b      	ldr	r1, [pc, #108]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 8004308:	4313      	orrs	r3, r2
 800430a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800430c:	4b1b      	ldr	r3, [pc, #108]	; (800437c <HAL_RCC_OscConfig+0x478>)
 800430e:	2201      	movs	r2, #1
 8004310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004312:	f7fe fbd7 	bl	8002ac4 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800431a:	f7fe fbd3 	bl	8002ac4 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e05c      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432c:	4b11      	ldr	r3, [pc, #68]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f0      	beq.n	800431a <HAL_RCC_OscConfig+0x416>
 8004338:	e054      	b.n	80043e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433a:	4b10      	ldr	r3, [pc, #64]	; (800437c <HAL_RCC_OscConfig+0x478>)
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fe fbc0 	bl	8002ac4 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004348:	f7fe fbbc 	bl	8002ac4 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e045      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <HAL_RCC_OscConfig+0x470>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f0      	bne.n	8004348 <HAL_RCC_OscConfig+0x444>
 8004366:	e03d      	b.n	80043e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d107      	bne.n	8004380 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e038      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
 8004374:	40023800 	.word	0x40023800
 8004378:	40007000 	.word	0x40007000
 800437c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004380:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <HAL_RCC_OscConfig+0x4ec>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d028      	beq.n	80043e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004398:	429a      	cmp	r2, r3
 800439a:	d121      	bne.n	80043e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d11a      	bne.n	80043e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043b0:	4013      	ands	r3, r2
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d111      	bne.n	80043e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	085b      	lsrs	r3, r3, #1
 80043c8:	3b01      	subs	r3, #1
 80043ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d107      	bne.n	80043e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043dc:	429a      	cmp	r2, r3
 80043de:	d001      	beq.n	80043e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e000      	b.n	80043e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40023800 	.word	0x40023800

080043f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0cc      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004408:	4b68      	ldr	r3, [pc, #416]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d90c      	bls.n	8004430 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004416:	4b65      	ldr	r3, [pc, #404]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800441e:	4b63      	ldr	r3, [pc, #396]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d001      	beq.n	8004430 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e0b8      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d020      	beq.n	800447e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004448:	4b59      	ldr	r3, [pc, #356]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	4a58      	ldr	r2, [pc, #352]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004452:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004460:	4b53      	ldr	r3, [pc, #332]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	4a52      	ldr	r2, [pc, #328]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800446a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800446c:	4b50      	ldr	r3, [pc, #320]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	494d      	ldr	r1, [pc, #308]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d044      	beq.n	8004514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d107      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004492:	4b47      	ldr	r3, [pc, #284]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d119      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e07f      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d003      	beq.n	80044b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d107      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b2:	4b3f      	ldr	r3, [pc, #252]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e06f      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c2:	4b3b      	ldr	r3, [pc, #236]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e067      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044d2:	4b37      	ldr	r3, [pc, #220]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f023 0203 	bic.w	r2, r3, #3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	4934      	ldr	r1, [pc, #208]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e4:	f7fe faee 	bl	8002ac4 <HAL_GetTick>
 80044e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ea:	e00a      	b.n	8004502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ec:	f7fe faea 	bl	8002ac4 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e04f      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004502:	4b2b      	ldr	r3, [pc, #172]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 020c 	and.w	r2, r3, #12
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	429a      	cmp	r2, r3
 8004512:	d1eb      	bne.n	80044ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004514:	4b25      	ldr	r3, [pc, #148]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d20c      	bcs.n	800453c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004522:	4b22      	ldr	r3, [pc, #136]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452a:	4b20      	ldr	r3, [pc, #128]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e032      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004548:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4916      	ldr	r1, [pc, #88]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	4313      	orrs	r3, r2
 8004558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d009      	beq.n	800457a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004566:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	490e      	ldr	r1, [pc, #56]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800457a:	f000 f82d 	bl	80045d8 <HAL_RCC_GetSysClockFreq>
 800457e:	4602      	mov	r2, r0
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	091b      	lsrs	r3, r3, #4
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	490a      	ldr	r1, [pc, #40]	; (80045b4 <HAL_RCC_ClockConfig+0x1c0>)
 800458c:	5ccb      	ldrb	r3, [r1, r3]
 800458e:	fa22 f303 	lsr.w	r3, r2, r3
 8004592:	4a09      	ldr	r2, [pc, #36]	; (80045b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004596:	4b09      	ldr	r3, [pc, #36]	; (80045bc <HAL_RCC_ClockConfig+0x1c8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f7fe fa4e 	bl	8002a3c <HAL_InitTick>

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40023c00 	.word	0x40023c00
 80045b0:	40023800 	.word	0x40023800
 80045b4:	0800be0c 	.word	0x0800be0c
 80045b8:	20000000 	.word	0x20000000
 80045bc:	20000024 	.word	0x20000024

080045c0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80045c4:	4b03      	ldr	r3, [pc, #12]	; (80045d4 <HAL_RCC_EnableCSS+0x14>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
}
 80045ca:	bf00      	nop
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	4247004c 	.word	0x4247004c

080045d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045dc:	b094      	sub	sp, #80	; 0x50
 80045de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	647b      	str	r3, [r7, #68]	; 0x44
 80045e4:	2300      	movs	r3, #0
 80045e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e8:	2300      	movs	r3, #0
 80045ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045f0:	4b79      	ldr	r3, [pc, #484]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f003 030c 	and.w	r3, r3, #12
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d00d      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0x40>
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	f200 80e1 	bhi.w	80047c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <HAL_RCC_GetSysClockFreq+0x34>
 8004606:	2b04      	cmp	r3, #4
 8004608:	d003      	beq.n	8004612 <HAL_RCC_GetSysClockFreq+0x3a>
 800460a:	e0db      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800460c:	4b73      	ldr	r3, [pc, #460]	; (80047dc <HAL_RCC_GetSysClockFreq+0x204>)
 800460e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004610:	e0db      	b.n	80047ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004612:	4b72      	ldr	r3, [pc, #456]	; (80047dc <HAL_RCC_GetSysClockFreq+0x204>)
 8004614:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004616:	e0d8      	b.n	80047ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004618:	4b6f      	ldr	r3, [pc, #444]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004620:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004622:	4b6d      	ldr	r3, [pc, #436]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d063      	beq.n	80046f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800462e:	4b6a      	ldr	r3, [pc, #424]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	099b      	lsrs	r3, r3, #6
 8004634:	2200      	movs	r2, #0
 8004636:	63bb      	str	r3, [r7, #56]	; 0x38
 8004638:	63fa      	str	r2, [r7, #60]	; 0x3c
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004640:	633b      	str	r3, [r7, #48]	; 0x30
 8004642:	2300      	movs	r3, #0
 8004644:	637b      	str	r3, [r7, #52]	; 0x34
 8004646:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800464a:	4622      	mov	r2, r4
 800464c:	462b      	mov	r3, r5
 800464e:	f04f 0000 	mov.w	r0, #0
 8004652:	f04f 0100 	mov.w	r1, #0
 8004656:	0159      	lsls	r1, r3, #5
 8004658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800465c:	0150      	lsls	r0, r2, #5
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4621      	mov	r1, r4
 8004664:	1a51      	subs	r1, r2, r1
 8004666:	6139      	str	r1, [r7, #16]
 8004668:	4629      	mov	r1, r5
 800466a:	eb63 0301 	sbc.w	r3, r3, r1
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800467c:	4659      	mov	r1, fp
 800467e:	018b      	lsls	r3, r1, #6
 8004680:	4651      	mov	r1, sl
 8004682:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004686:	4651      	mov	r1, sl
 8004688:	018a      	lsls	r2, r1, #6
 800468a:	4651      	mov	r1, sl
 800468c:	ebb2 0801 	subs.w	r8, r2, r1
 8004690:	4659      	mov	r1, fp
 8004692:	eb63 0901 	sbc.w	r9, r3, r1
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046aa:	4690      	mov	r8, r2
 80046ac:	4699      	mov	r9, r3
 80046ae:	4623      	mov	r3, r4
 80046b0:	eb18 0303 	adds.w	r3, r8, r3
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	462b      	mov	r3, r5
 80046b8:	eb49 0303 	adc.w	r3, r9, r3
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046ca:	4629      	mov	r1, r5
 80046cc:	028b      	lsls	r3, r1, #10
 80046ce:	4621      	mov	r1, r4
 80046d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046d4:	4621      	mov	r1, r4
 80046d6:	028a      	lsls	r2, r1, #10
 80046d8:	4610      	mov	r0, r2
 80046da:	4619      	mov	r1, r3
 80046dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046de:	2200      	movs	r2, #0
 80046e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046e8:	f7fc fbbc 	bl	8000e64 <__aeabi_uldivmod>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4613      	mov	r3, r2
 80046f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046f4:	e058      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046f6:	4b38      	ldr	r3, [pc, #224]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	099b      	lsrs	r3, r3, #6
 80046fc:	2200      	movs	r2, #0
 80046fe:	4618      	mov	r0, r3
 8004700:	4611      	mov	r1, r2
 8004702:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004706:	623b      	str	r3, [r7, #32]
 8004708:	2300      	movs	r3, #0
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
 800470c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004710:	4642      	mov	r2, r8
 8004712:	464b      	mov	r3, r9
 8004714:	f04f 0000 	mov.w	r0, #0
 8004718:	f04f 0100 	mov.w	r1, #0
 800471c:	0159      	lsls	r1, r3, #5
 800471e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004722:	0150      	lsls	r0, r2, #5
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4641      	mov	r1, r8
 800472a:	ebb2 0a01 	subs.w	sl, r2, r1
 800472e:	4649      	mov	r1, r9
 8004730:	eb63 0b01 	sbc.w	fp, r3, r1
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004740:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004744:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004748:	ebb2 040a 	subs.w	r4, r2, sl
 800474c:	eb63 050b 	sbc.w	r5, r3, fp
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	00eb      	lsls	r3, r5, #3
 800475a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800475e:	00e2      	lsls	r2, r4, #3
 8004760:	4614      	mov	r4, r2
 8004762:	461d      	mov	r5, r3
 8004764:	4643      	mov	r3, r8
 8004766:	18e3      	adds	r3, r4, r3
 8004768:	603b      	str	r3, [r7, #0]
 800476a:	464b      	mov	r3, r9
 800476c:	eb45 0303 	adc.w	r3, r5, r3
 8004770:	607b      	str	r3, [r7, #4]
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	f04f 0300 	mov.w	r3, #0
 800477a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800477e:	4629      	mov	r1, r5
 8004780:	028b      	lsls	r3, r1, #10
 8004782:	4621      	mov	r1, r4
 8004784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004788:	4621      	mov	r1, r4
 800478a:	028a      	lsls	r2, r1, #10
 800478c:	4610      	mov	r0, r2
 800478e:	4619      	mov	r1, r3
 8004790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004792:	2200      	movs	r2, #0
 8004794:	61bb      	str	r3, [r7, #24]
 8004796:	61fa      	str	r2, [r7, #28]
 8004798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800479c:	f7fc fb62 	bl	8000e64 <__aeabi_uldivmod>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4613      	mov	r3, r2
 80047a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	0c1b      	lsrs	r3, r3, #16
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	3301      	adds	r3, #1
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047c2:	e002      	b.n	80047ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <HAL_RCC_GetSysClockFreq+0x204>)
 80047c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3750      	adds	r7, #80	; 0x50
 80047d0:	46bd      	mov	sp, r7
 80047d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047d6:	bf00      	nop
 80047d8:	40023800 	.word	0x40023800
 80047dc:	00f42400 	.word	0x00f42400

080047e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e4:	4b03      	ldr	r3, [pc, #12]	; (80047f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047e6:	681b      	ldr	r3, [r3, #0]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20000000 	.word	0x20000000

080047f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047fc:	f7ff fff0 	bl	80047e0 <HAL_RCC_GetHCLKFreq>
 8004800:	4602      	mov	r2, r0
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	0a9b      	lsrs	r3, r3, #10
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	4903      	ldr	r1, [pc, #12]	; (800481c <HAL_RCC_GetPCLK1Freq+0x24>)
 800480e:	5ccb      	ldrb	r3, [r1, r3]
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004814:	4618      	mov	r0, r3
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40023800 	.word	0x40023800
 800481c:	0800be1c 	.word	0x0800be1c

08004820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004824:	f7ff ffdc 	bl	80047e0 <HAL_RCC_GetHCLKFreq>
 8004828:	4602      	mov	r2, r0
 800482a:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	0b5b      	lsrs	r3, r3, #13
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	4903      	ldr	r1, [pc, #12]	; (8004844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004836:	5ccb      	ldrb	r3, [r1, r3]
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40023800 	.word	0x40023800
 8004844:	0800be1c 	.word	0x0800be1c

08004848 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <HAL_RCC_NMI_IRQHandler+0x20>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004854:	2b80      	cmp	r3, #128	; 0x80
 8004856:	d104      	bne.n	8004862 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004858:	f000 f80a 	bl	8004870 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800485c:	4b03      	ldr	r3, [pc, #12]	; (800486c <HAL_RCC_NMI_IRQHandler+0x24>)
 800485e:	2280      	movs	r2, #128	; 0x80
 8004860:	701a      	strb	r2, [r3, #0]
  }
}
 8004862:	bf00      	nop
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40023800 	.word	0x40023800
 800486c:	4002380e 	.word	0x4002380e

08004870 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e07b      	b.n	8004988 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	2b00      	cmp	r3, #0
 8004896:	d108      	bne.n	80048aa <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048a0:	d009      	beq.n	80048b6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	61da      	str	r2, [r3, #28]
 80048a8:	e005      	b.n	80048b6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d106      	bne.n	80048d6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7fd f9f5 	bl	8001cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493a:	ea42 0103 	orr.w	r1, r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	0c1b      	lsrs	r3, r3, #16
 8004954:	f003 0104 	and.w	r1, r3, #4
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	f003 0210 	and.w	r2, r3, #16
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69da      	ldr	r2, [r3, #28]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004976:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	4613      	mov	r3, r2
 800499e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_SPI_Transmit+0x22>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e126      	b.n	8004c00 <HAL_SPI_Transmit+0x270>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049ba:	f7fe f883 	bl	8002ac4 <HAL_GetTick>
 80049be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049c0:	88fb      	ldrh	r3, [r7, #6]
 80049c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d002      	beq.n	80049d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049d0:	2302      	movs	r3, #2
 80049d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049d4:	e10b      	b.n	8004bee <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_SPI_Transmit+0x52>
 80049dc:	88fb      	ldrh	r3, [r7, #6]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d102      	bne.n	80049e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049e6:	e102      	b.n	8004bee <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2203      	movs	r2, #3
 80049ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	88fa      	ldrh	r2, [r7, #6]
 8004a00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	88fa      	ldrh	r2, [r7, #6]
 8004a06:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a2e:	d10f      	bne.n	8004a50 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b40      	cmp	r3, #64	; 0x40
 8004a5c:	d007      	beq.n	8004a6e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a76:	d14b      	bne.n	8004b10 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <HAL_SPI_Transmit+0xf6>
 8004a80:	8afb      	ldrh	r3, [r7, #22]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d13e      	bne.n	8004b04 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	881a      	ldrh	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	1c9a      	adds	r2, r3, #2
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004aaa:	e02b      	b.n	8004b04 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d112      	bne.n	8004ae0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abe:	881a      	ldrh	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	1c9a      	adds	r2, r3, #2
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ade:	e011      	b.n	8004b04 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ae0:	f7fd fff0 	bl	8002ac4 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d803      	bhi.n	8004af8 <HAL_SPI_Transmit+0x168>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af6:	d102      	bne.n	8004afe <HAL_SPI_Transmit+0x16e>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d102      	bne.n	8004b04 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b02:	e074      	b.n	8004bee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1ce      	bne.n	8004aac <HAL_SPI_Transmit+0x11c>
 8004b0e:	e04c      	b.n	8004baa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <HAL_SPI_Transmit+0x18e>
 8004b18:	8afb      	ldrh	r3, [r7, #22]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d140      	bne.n	8004ba0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	330c      	adds	r3, #12
 8004b28:	7812      	ldrb	r2, [r2, #0]
 8004b2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b44:	e02c      	b.n	8004ba0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d113      	bne.n	8004b7c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	330c      	adds	r3, #12
 8004b5e:	7812      	ldrb	r2, [r2, #0]
 8004b60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b7a:	e011      	b.n	8004ba0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b7c:	f7fd ffa2 	bl	8002ac4 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d803      	bhi.n	8004b94 <HAL_SPI_Transmit+0x204>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d102      	bne.n	8004b9a <HAL_SPI_Transmit+0x20a>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d102      	bne.n	8004ba0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b9e:	e026      	b.n	8004bee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1cd      	bne.n	8004b46 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	6839      	ldr	r1, [r7, #0]
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 fbcc 	bl	800534c <SPI_EndRxTxTransaction>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bc8:	2300      	movs	r3, #0
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e000      	b.n	8004bee <HAL_SPI_Transmit+0x25e>
  }

error:
 8004bec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3720      	adds	r7, #32
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	4613      	mov	r3, r2
 8004c16:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c24:	d112      	bne.n	8004c4c <HAL_SPI_Receive+0x44>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10e      	bne.n	8004c4c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2204      	movs	r2, #4
 8004c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c36:	88fa      	ldrh	r2, [r7, #6]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 f8f1 	bl	8004e2a <HAL_SPI_TransmitReceive>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	e0ea      	b.n	8004e22 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_SPI_Receive+0x52>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e0e3      	b.n	8004e22 <HAL_SPI_Receive+0x21a>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c62:	f7fd ff2f 	bl	8002ac4 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d002      	beq.n	8004c7a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004c74:	2302      	movs	r3, #2
 8004c76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c78:	e0ca      	b.n	8004e10 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <HAL_SPI_Receive+0x7e>
 8004c80:	88fb      	ldrh	r3, [r7, #6]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d102      	bne.n	8004c8c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c8a:	e0c1      	b.n	8004e10 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2204      	movs	r2, #4
 8004c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	88fa      	ldrh	r2, [r7, #6]
 8004ca4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	88fa      	ldrh	r2, [r7, #6]
 8004caa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cd2:	d10f      	bne.n	8004cf4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cf2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b40      	cmp	r3, #64	; 0x40
 8004d00:	d007      	beq.n	8004d12 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d162      	bne.n	8004de0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d1a:	e02e      	b.n	8004d7a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d115      	bne.n	8004d56 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f103 020c 	add.w	r2, r3, #12
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	7812      	ldrb	r2, [r2, #0]
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d54:	e011      	b.n	8004d7a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d56:	f7fd feb5 	bl	8002ac4 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d803      	bhi.n	8004d6e <HAL_SPI_Receive+0x166>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d102      	bne.n	8004d74 <HAL_SPI_Receive+0x16c>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d102      	bne.n	8004d7a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d78:	e04a      	b.n	8004e10 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1cb      	bne.n	8004d1c <HAL_SPI_Receive+0x114>
 8004d84:	e031      	b.n	8004dea <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d113      	bne.n	8004dbc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	b292      	uxth	r2, r2
 8004da0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da6:	1c9a      	adds	r2, r3, #2
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dba:	e011      	b.n	8004de0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dbc:	f7fd fe82 	bl	8002ac4 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d803      	bhi.n	8004dd4 <HAL_SPI_Receive+0x1cc>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd2:	d102      	bne.n	8004dda <HAL_SPI_Receive+0x1d2>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d102      	bne.n	8004de0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004dde:	e017      	b.n	8004e10 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1cd      	bne.n	8004d86 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	6839      	ldr	r1, [r7, #0]
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 fa46 	bl	8005280 <SPI_EndRxTransaction>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	75fb      	strb	r3, [r7, #23]
 8004e0c:	e000      	b.n	8004e10 <HAL_SPI_Receive+0x208>
  }

error :
 8004e0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b08c      	sub	sp, #48	; 0x30
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	607a      	str	r2, [r7, #4]
 8004e36:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d101      	bne.n	8004e50 <HAL_SPI_TransmitReceive+0x26>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e18a      	b.n	8005166 <HAL_SPI_TransmitReceive+0x33c>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e58:	f7fd fe34 	bl	8002ac4 <HAL_GetTick>
 8004e5c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e6e:	887b      	ldrh	r3, [r7, #2]
 8004e70:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d00f      	beq.n	8004e9a <HAL_SPI_TransmitReceive+0x70>
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e80:	d107      	bne.n	8004e92 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d103      	bne.n	8004e92 <HAL_SPI_TransmitReceive+0x68>
 8004e8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d003      	beq.n	8004e9a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e92:	2302      	movs	r3, #2
 8004e94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e98:	e15b      	b.n	8005152 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <HAL_SPI_TransmitReceive+0x82>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_SPI_TransmitReceive+0x82>
 8004ea6:	887b      	ldrh	r3, [r7, #2]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d103      	bne.n	8004eb4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004eb2:	e14e      	b.n	8005152 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d003      	beq.n	8004ec8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2205      	movs	r2, #5
 8004ec4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	887a      	ldrh	r2, [r7, #2]
 8004ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	887a      	ldrh	r2, [r7, #2]
 8004ede:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	887a      	ldrh	r2, [r7, #2]
 8004eea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	887a      	ldrh	r2, [r7, #2]
 8004ef0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f08:	2b40      	cmp	r3, #64	; 0x40
 8004f0a:	d007      	beq.n	8004f1c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f24:	d178      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <HAL_SPI_TransmitReceive+0x10a>
 8004f2e:	8b7b      	ldrh	r3, [r7, #26]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d166      	bne.n	8005002 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	881a      	ldrh	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f44:	1c9a      	adds	r2, r3, #2
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f58:	e053      	b.n	8005002 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d11b      	bne.n	8004fa0 <HAL_SPI_TransmitReceive+0x176>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d016      	beq.n	8004fa0 <HAL_SPI_TransmitReceive+0x176>
 8004f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d113      	bne.n	8004fa0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	881a      	ldrh	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	1c9a      	adds	r2, r3, #2
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d119      	bne.n	8004fe2 <HAL_SPI_TransmitReceive+0x1b8>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d014      	beq.n	8004fe2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	b292      	uxth	r2, r2
 8004fc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	1c9a      	adds	r2, r3, #2
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fe2:	f7fd fd6f 	bl	8002ac4 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d807      	bhi.n	8005002 <HAL_SPI_TransmitReceive+0x1d8>
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff8:	d003      	beq.n	8005002 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005000:	e0a7      	b.n	8005152 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005006:	b29b      	uxth	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1a6      	bne.n	8004f5a <HAL_SPI_TransmitReceive+0x130>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005010:	b29b      	uxth	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1a1      	bne.n	8004f5a <HAL_SPI_TransmitReceive+0x130>
 8005016:	e07c      	b.n	8005112 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <HAL_SPI_TransmitReceive+0x1fc>
 8005020:	8b7b      	ldrh	r3, [r7, #26]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d16b      	bne.n	80050fe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	330c      	adds	r3, #12
 8005030:	7812      	ldrb	r2, [r2, #0]
 8005032:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800504c:	e057      	b.n	80050fe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b02      	cmp	r3, #2
 800505a:	d11c      	bne.n	8005096 <HAL_SPI_TransmitReceive+0x26c>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d017      	beq.n	8005096 <HAL_SPI_TransmitReceive+0x26c>
 8005066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005068:	2b01      	cmp	r3, #1
 800506a:	d114      	bne.n	8005096 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	330c      	adds	r3, #12
 8005076:	7812      	ldrb	r2, [r2, #0]
 8005078:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005088:	b29b      	uxth	r3, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d119      	bne.n	80050d8 <HAL_SPI_TransmitReceive+0x2ae>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d014      	beq.n	80050d8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050d4:	2301      	movs	r3, #1
 80050d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050d8:	f7fd fcf4 	bl	8002ac4 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d803      	bhi.n	80050f0 <HAL_SPI_TransmitReceive+0x2c6>
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ee:	d102      	bne.n	80050f6 <HAL_SPI_TransmitReceive+0x2cc>
 80050f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d103      	bne.n	80050fe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050fc:	e029      	b.n	8005152 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1a2      	bne.n	800504e <HAL_SPI_TransmitReceive+0x224>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d19d      	bne.n	800504e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005114:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 f918 	bl	800534c <SPI_EndRxTxTransaction>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d006      	beq.n	8005130 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800512e:	e010      	b.n	8005152 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10b      	bne.n	8005150 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	e000      	b.n	8005152 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005150:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005162:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005166:	4618      	mov	r0, r3
 8005168:	3730      	adds	r7, #48	; 0x30
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	4613      	mov	r3, r2
 800517e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005180:	f7fd fca0 	bl	8002ac4 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	4413      	add	r3, r2
 800518e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005190:	f7fd fc98 	bl	8002ac4 <HAL_GetTick>
 8005194:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005196:	4b39      	ldr	r3, [pc, #228]	; (800527c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	015b      	lsls	r3, r3, #5
 800519c:	0d1b      	lsrs	r3, r3, #20
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	fb02 f303 	mul.w	r3, r2, r3
 80051a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051a6:	e054      	b.n	8005252 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ae:	d050      	beq.n	8005252 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051b0:	f7fd fc88 	bl	8002ac4 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d902      	bls.n	80051c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d13d      	bne.n	8005242 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051de:	d111      	bne.n	8005204 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e8:	d004      	beq.n	80051f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f2:	d107      	bne.n	8005204 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005202:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800520c:	d10f      	bne.n	800522e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800522c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e017      	b.n	8005272 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	3b01      	subs	r3, #1
 8005250:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4013      	ands	r3, r2
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	429a      	cmp	r2, r3
 8005260:	bf0c      	ite	eq
 8005262:	2301      	moveq	r3, #1
 8005264:	2300      	movne	r3, #0
 8005266:	b2db      	uxtb	r3, r3
 8005268:	461a      	mov	r2, r3
 800526a:	79fb      	ldrb	r3, [r7, #7]
 800526c:	429a      	cmp	r2, r3
 800526e:	d19b      	bne.n	80051a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3720      	adds	r7, #32
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000000 	.word	0x20000000

08005280 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af02      	add	r7, sp, #8
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005294:	d111      	bne.n	80052ba <SPI_EndRxTransaction+0x3a>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529e:	d004      	beq.n	80052aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a8:	d107      	bne.n	80052ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052c2:	d12a      	bne.n	800531a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052cc:	d012      	beq.n	80052f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2200      	movs	r2, #0
 80052d6:	2180      	movs	r1, #128	; 0x80
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f7ff ff49 	bl	8005170 <SPI_WaitFlagStateUntilTimeout>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d02d      	beq.n	8005340 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e8:	f043 0220 	orr.w	r2, r3, #32
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e026      	b.n	8005342 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2200      	movs	r2, #0
 80052fc:	2101      	movs	r1, #1
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f7ff ff36 	bl	8005170 <SPI_WaitFlagStateUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d01a      	beq.n	8005340 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530e:	f043 0220 	orr.w	r2, r3, #32
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e013      	b.n	8005342 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2200      	movs	r2, #0
 8005322:	2101      	movs	r1, #1
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f7ff ff23 	bl	8005170 <SPI_WaitFlagStateUntilTimeout>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d007      	beq.n	8005340 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005334:	f043 0220 	orr.w	r2, r3, #32
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e000      	b.n	8005342 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af02      	add	r7, sp, #8
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005358:	4b1b      	ldr	r3, [pc, #108]	; (80053c8 <SPI_EndRxTxTransaction+0x7c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a1b      	ldr	r2, [pc, #108]	; (80053cc <SPI_EndRxTxTransaction+0x80>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	0d5b      	lsrs	r3, r3, #21
 8005364:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005368:	fb02 f303 	mul.w	r3, r2, r3
 800536c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005376:	d112      	bne.n	800539e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2200      	movs	r2, #0
 8005380:	2180      	movs	r1, #128	; 0x80
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f7ff fef4 	bl	8005170 <SPI_WaitFlagStateUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d016      	beq.n	80053bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005392:	f043 0220 	orr.w	r2, r3, #32
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e00f      	b.n	80053be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b4:	2b80      	cmp	r3, #128	; 0x80
 80053b6:	d0f2      	beq.n	800539e <SPI_EndRxTxTransaction+0x52>
 80053b8:	e000      	b.n	80053bc <SPI_EndRxTxTransaction+0x70>
        break;
 80053ba:	bf00      	nop
  }

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20000000 	.word	0x20000000
 80053cc:	165e9f81 	.word	0x165e9f81

080053d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e041      	b.n	8005466 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fc fce0 	bl	8001dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3304      	adds	r3, #4
 800540c:	4619      	mov	r1, r3
 800540e:	4610      	mov	r0, r2
 8005410:	f000 fe16 	bl	8006040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b01      	cmp	r3, #1
 8005482:	d001      	beq.n	8005488 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e046      	b.n	8005516 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a23      	ldr	r2, [pc, #140]	; (8005524 <HAL_TIM_Base_Start+0xb4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d022      	beq.n	80054e0 <HAL_TIM_Base_Start+0x70>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a2:	d01d      	beq.n	80054e0 <HAL_TIM_Base_Start+0x70>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a1f      	ldr	r2, [pc, #124]	; (8005528 <HAL_TIM_Base_Start+0xb8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d018      	beq.n	80054e0 <HAL_TIM_Base_Start+0x70>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1e      	ldr	r2, [pc, #120]	; (800552c <HAL_TIM_Base_Start+0xbc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d013      	beq.n	80054e0 <HAL_TIM_Base_Start+0x70>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a1c      	ldr	r2, [pc, #112]	; (8005530 <HAL_TIM_Base_Start+0xc0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00e      	beq.n	80054e0 <HAL_TIM_Base_Start+0x70>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a1b      	ldr	r2, [pc, #108]	; (8005534 <HAL_TIM_Base_Start+0xc4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d009      	beq.n	80054e0 <HAL_TIM_Base_Start+0x70>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a19      	ldr	r2, [pc, #100]	; (8005538 <HAL_TIM_Base_Start+0xc8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d004      	beq.n	80054e0 <HAL_TIM_Base_Start+0x70>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a18      	ldr	r2, [pc, #96]	; (800553c <HAL_TIM_Base_Start+0xcc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d111      	bne.n	8005504 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b06      	cmp	r3, #6
 80054f0:	d010      	beq.n	8005514 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0201 	orr.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005502:	e007      	b.n	8005514 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0201 	orr.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40010000 	.word	0x40010000
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	40010400 	.word	0x40010400
 8005538:	40014000 	.word	0x40014000
 800553c:	40001800 	.word	0x40001800

08005540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b01      	cmp	r3, #1
 8005552:	d001      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e04e      	b.n	80055f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a23      	ldr	r2, [pc, #140]	; (8005604 <HAL_TIM_Base_Start_IT+0xc4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d022      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x80>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005582:	d01d      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x80>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a1f      	ldr	r2, [pc, #124]	; (8005608 <HAL_TIM_Base_Start_IT+0xc8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d018      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x80>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1e      	ldr	r2, [pc, #120]	; (800560c <HAL_TIM_Base_Start_IT+0xcc>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d013      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x80>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1c      	ldr	r2, [pc, #112]	; (8005610 <HAL_TIM_Base_Start_IT+0xd0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00e      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x80>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1b      	ldr	r2, [pc, #108]	; (8005614 <HAL_TIM_Base_Start_IT+0xd4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d009      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x80>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a19      	ldr	r2, [pc, #100]	; (8005618 <HAL_TIM_Base_Start_IT+0xd8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d004      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x80>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a18      	ldr	r2, [pc, #96]	; (800561c <HAL_TIM_Base_Start_IT+0xdc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d111      	bne.n	80055e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b06      	cmp	r3, #6
 80055d0:	d010      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0201 	orr.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e2:	e007      	b.n	80055f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	40010000 	.word	0x40010000
 8005608:	40000400 	.word	0x40000400
 800560c:	40000800 	.word	0x40000800
 8005610:	40000c00 	.word	0x40000c00
 8005614:	40010400 	.word	0x40010400
 8005618:	40014000 	.word	0x40014000
 800561c:	40001800 	.word	0x40001800

08005620 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e041      	b.n	80056b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f839 	bl	80056be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3304      	adds	r3, #4
 800565c:	4619      	mov	r1, r3
 800565e:	4610      	mov	r0, r2
 8005660:	f000 fcee 	bl	8006040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
	...

080056d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d109      	bne.n	80056f8 <HAL_TIM_PWM_Start+0x24>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	bf14      	ite	ne
 80056f0:	2301      	movne	r3, #1
 80056f2:	2300      	moveq	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	e022      	b.n	800573e <HAL_TIM_PWM_Start+0x6a>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d109      	bne.n	8005712 <HAL_TIM_PWM_Start+0x3e>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b01      	cmp	r3, #1
 8005708:	bf14      	ite	ne
 800570a:	2301      	movne	r3, #1
 800570c:	2300      	moveq	r3, #0
 800570e:	b2db      	uxtb	r3, r3
 8005710:	e015      	b.n	800573e <HAL_TIM_PWM_Start+0x6a>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b08      	cmp	r3, #8
 8005716:	d109      	bne.n	800572c <HAL_TIM_PWM_Start+0x58>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b01      	cmp	r3, #1
 8005722:	bf14      	ite	ne
 8005724:	2301      	movne	r3, #1
 8005726:	2300      	moveq	r3, #0
 8005728:	b2db      	uxtb	r3, r3
 800572a:	e008      	b.n	800573e <HAL_TIM_PWM_Start+0x6a>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	bf14      	ite	ne
 8005738:	2301      	movne	r3, #1
 800573a:	2300      	moveq	r3, #0
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e07c      	b.n	8005840 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d104      	bne.n	8005756 <HAL_TIM_PWM_Start+0x82>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005754:	e013      	b.n	800577e <HAL_TIM_PWM_Start+0xaa>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b04      	cmp	r3, #4
 800575a:	d104      	bne.n	8005766 <HAL_TIM_PWM_Start+0x92>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005764:	e00b      	b.n	800577e <HAL_TIM_PWM_Start+0xaa>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b08      	cmp	r3, #8
 800576a:	d104      	bne.n	8005776 <HAL_TIM_PWM_Start+0xa2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005774:	e003      	b.n	800577e <HAL_TIM_PWM_Start+0xaa>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2202      	movs	r2, #2
 800577a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2201      	movs	r2, #1
 8005784:	6839      	ldr	r1, [r7, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f000 ff44 	bl	8006614 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a2d      	ldr	r2, [pc, #180]	; (8005848 <HAL_TIM_PWM_Start+0x174>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d004      	beq.n	80057a0 <HAL_TIM_PWM_Start+0xcc>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a2c      	ldr	r2, [pc, #176]	; (800584c <HAL_TIM_PWM_Start+0x178>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d101      	bne.n	80057a4 <HAL_TIM_PWM_Start+0xd0>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <HAL_TIM_PWM_Start+0xd2>
 80057a4:	2300      	movs	r3, #0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d007      	beq.n	80057ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a22      	ldr	r2, [pc, #136]	; (8005848 <HAL_TIM_PWM_Start+0x174>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d022      	beq.n	800580a <HAL_TIM_PWM_Start+0x136>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057cc:	d01d      	beq.n	800580a <HAL_TIM_PWM_Start+0x136>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1f      	ldr	r2, [pc, #124]	; (8005850 <HAL_TIM_PWM_Start+0x17c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d018      	beq.n	800580a <HAL_TIM_PWM_Start+0x136>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1d      	ldr	r2, [pc, #116]	; (8005854 <HAL_TIM_PWM_Start+0x180>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d013      	beq.n	800580a <HAL_TIM_PWM_Start+0x136>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a1c      	ldr	r2, [pc, #112]	; (8005858 <HAL_TIM_PWM_Start+0x184>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00e      	beq.n	800580a <HAL_TIM_PWM_Start+0x136>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a16      	ldr	r2, [pc, #88]	; (800584c <HAL_TIM_PWM_Start+0x178>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d009      	beq.n	800580a <HAL_TIM_PWM_Start+0x136>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a18      	ldr	r2, [pc, #96]	; (800585c <HAL_TIM_PWM_Start+0x188>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d004      	beq.n	800580a <HAL_TIM_PWM_Start+0x136>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a16      	ldr	r2, [pc, #88]	; (8005860 <HAL_TIM_PWM_Start+0x18c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d111      	bne.n	800582e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2b06      	cmp	r3, #6
 800581a:	d010      	beq.n	800583e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0201 	orr.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582c:	e007      	b.n	800583e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0201 	orr.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40010000 	.word	0x40010000
 800584c:	40010400 	.word	0x40010400
 8005850:	40000400 	.word	0x40000400
 8005854:	40000800 	.word	0x40000800
 8005858:	40000c00 	.word	0x40000c00
 800585c:	40014000 	.word	0x40014000
 8005860:	40001800 	.word	0x40001800

08005864 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e097      	b.n	80059a8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d106      	bne.n	8005892 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7fc fb3b 	bl	8001f08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2202      	movs	r2, #2
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6812      	ldr	r2, [r2, #0]
 80058a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058a8:	f023 0307 	bic.w	r3, r3, #7
 80058ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3304      	adds	r3, #4
 80058b6:	4619      	mov	r1, r3
 80058b8:	4610      	mov	r0, r2
 80058ba:	f000 fbc1 	bl	8006040 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e6:	f023 0303 	bic.w	r3, r3, #3
 80058ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	4313      	orrs	r3, r2
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005904:	f023 030c 	bic.w	r3, r3, #12
 8005908:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005910:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005914:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	021b      	lsls	r3, r3, #8
 8005920:	4313      	orrs	r3, r2
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	011a      	lsls	r2, r3, #4
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	031b      	lsls	r3, r3, #12
 8005934:	4313      	orrs	r3, r2
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005942:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800594a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	4313      	orrs	r3, r2
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d110      	bne.n	8005a02 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d102      	bne.n	80059ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80059e6:	7b7b      	ldrb	r3, [r7, #13]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d001      	beq.n	80059f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e069      	b.n	8005ac4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a00:	e031      	b.n	8005a66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d110      	bne.n	8005a2a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a08:	7bbb      	ldrb	r3, [r7, #14]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d102      	bne.n	8005a14 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a0e:	7b3b      	ldrb	r3, [r7, #12]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d001      	beq.n	8005a18 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e055      	b.n	8005ac4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a28:	e01d      	b.n	8005a66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d108      	bne.n	8005a42 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a30:	7bbb      	ldrb	r3, [r7, #14]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d105      	bne.n	8005a42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a36:	7b7b      	ldrb	r3, [r7, #13]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d102      	bne.n	8005a42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a3c:	7b3b      	ldrb	r3, [r7, #12]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d001      	beq.n	8005a46 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e03e      	b.n	8005ac4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2202      	movs	r2, #2
 8005a52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2202      	movs	r2, #2
 8005a62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_TIM_Encoder_Start+0xc4>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d008      	beq.n	8005a84 <HAL_TIM_Encoder_Start+0xd4>
 8005a72:	e00f      	b.n	8005a94 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 fdc9 	bl	8006614 <TIM_CCxChannelCmd>
      break;
 8005a82:	e016      	b.n	8005ab2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	2104      	movs	r1, #4
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fdc1 	bl	8006614 <TIM_CCxChannelCmd>
      break;
 8005a92:	e00e      	b.n	8005ab2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 fdb9 	bl	8006614 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	2104      	movs	r1, #4
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fdb2 	bl	8006614 <TIM_CCxChannelCmd>
      break;
 8005ab0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0201 	orr.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d122      	bne.n	8005b28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d11b      	bne.n	8005b28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f06f 0202 	mvn.w	r2, #2
 8005af8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	f003 0303 	and.w	r3, r3, #3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fa77 	bl	8006002 <HAL_TIM_IC_CaptureCallback>
 8005b14:	e005      	b.n	8005b22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fa69 	bl	8005fee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 fa7a 	bl	8006016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d122      	bne.n	8005b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d11b      	bne.n	8005b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f06f 0204 	mvn.w	r2, #4
 8005b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fa4d 	bl	8006002 <HAL_TIM_IC_CaptureCallback>
 8005b68:	e005      	b.n	8005b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fa3f 	bl	8005fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fa50 	bl	8006016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	d122      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d11b      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0208 	mvn.w	r2, #8
 8005ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2204      	movs	r2, #4
 8005ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fa23 	bl	8006002 <HAL_TIM_IC_CaptureCallback>
 8005bbc:	e005      	b.n	8005bca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fa15 	bl	8005fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fa26 	bl	8006016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f003 0310 	and.w	r3, r3, #16
 8005bda:	2b10      	cmp	r3, #16
 8005bdc:	d122      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0310 	and.w	r3, r3, #16
 8005be8:	2b10      	cmp	r3, #16
 8005bea:	d11b      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0210 	mvn.w	r2, #16
 8005bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2208      	movs	r2, #8
 8005bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f9f9 	bl	8006002 <HAL_TIM_IC_CaptureCallback>
 8005c10:	e005      	b.n	8005c1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f9eb 	bl	8005fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f9fc 	bl	8006016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d10e      	bne.n	8005c50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d107      	bne.n	8005c50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0201 	mvn.w	r2, #1
 8005c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f002 faae 	bl	80081ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5a:	2b80      	cmp	r3, #128	; 0x80
 8005c5c:	d10e      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c68:	2b80      	cmp	r3, #128	; 0x80
 8005c6a:	d107      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fd78 	bl	800676c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c86:	2b40      	cmp	r3, #64	; 0x40
 8005c88:	d10e      	bne.n	8005ca8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c94:	2b40      	cmp	r3, #64	; 0x40
 8005c96:	d107      	bne.n	8005ca8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f9c1 	bl	800602a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b20      	cmp	r3, #32
 8005cb4:	d10e      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f003 0320 	and.w	r3, r3, #32
 8005cc0:	2b20      	cmp	r3, #32
 8005cc2:	d107      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f06f 0220 	mvn.w	r2, #32
 8005ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fd42 	bl	8006758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cd4:	bf00      	nop
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d101      	bne.n	8005cfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	e0ae      	b.n	8005e58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b0c      	cmp	r3, #12
 8005d06:	f200 809f 	bhi.w	8005e48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d0a:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d10:	08005d45 	.word	0x08005d45
 8005d14:	08005e49 	.word	0x08005e49
 8005d18:	08005e49 	.word	0x08005e49
 8005d1c:	08005e49 	.word	0x08005e49
 8005d20:	08005d85 	.word	0x08005d85
 8005d24:	08005e49 	.word	0x08005e49
 8005d28:	08005e49 	.word	0x08005e49
 8005d2c:	08005e49 	.word	0x08005e49
 8005d30:	08005dc7 	.word	0x08005dc7
 8005d34:	08005e49 	.word	0x08005e49
 8005d38:	08005e49 	.word	0x08005e49
 8005d3c:	08005e49 	.word	0x08005e49
 8005d40:	08005e07 	.word	0x08005e07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68b9      	ldr	r1, [r7, #8]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fa18 	bl	8006180 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699a      	ldr	r2, [r3, #24]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0208 	orr.w	r2, r2, #8
 8005d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699a      	ldr	r2, [r3, #24]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0204 	bic.w	r2, r2, #4
 8005d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6999      	ldr	r1, [r3, #24]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	619a      	str	r2, [r3, #24]
      break;
 8005d82:	e064      	b.n	8005e4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68b9      	ldr	r1, [r7, #8]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fa68 	bl	8006260 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6999      	ldr	r1, [r3, #24]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	021a      	lsls	r2, r3, #8
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	619a      	str	r2, [r3, #24]
      break;
 8005dc4:	e043      	b.n	8005e4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68b9      	ldr	r1, [r7, #8]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 fabd 	bl	800634c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69da      	ldr	r2, [r3, #28]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f042 0208 	orr.w	r2, r2, #8
 8005de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69da      	ldr	r2, [r3, #28]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0204 	bic.w	r2, r2, #4
 8005df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69d9      	ldr	r1, [r3, #28]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	691a      	ldr	r2, [r3, #16]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	61da      	str	r2, [r3, #28]
      break;
 8005e04:	e023      	b.n	8005e4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 fb11 	bl	8006434 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69da      	ldr	r2, [r3, #28]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69d9      	ldr	r1, [r3, #28]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	021a      	lsls	r2, r3, #8
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	61da      	str	r2, [r3, #28]
      break;
 8005e46:	e002      	b.n	8005e4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_TIM_ConfigClockSource+0x1c>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e0b4      	b.n	8005fe6 <HAL_TIM_ConfigClockSource+0x186>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ea2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb4:	d03e      	beq.n	8005f34 <HAL_TIM_ConfigClockSource+0xd4>
 8005eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eba:	f200 8087 	bhi.w	8005fcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec2:	f000 8086 	beq.w	8005fd2 <HAL_TIM_ConfigClockSource+0x172>
 8005ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eca:	d87f      	bhi.n	8005fcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ecc:	2b70      	cmp	r3, #112	; 0x70
 8005ece:	d01a      	beq.n	8005f06 <HAL_TIM_ConfigClockSource+0xa6>
 8005ed0:	2b70      	cmp	r3, #112	; 0x70
 8005ed2:	d87b      	bhi.n	8005fcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ed4:	2b60      	cmp	r3, #96	; 0x60
 8005ed6:	d050      	beq.n	8005f7a <HAL_TIM_ConfigClockSource+0x11a>
 8005ed8:	2b60      	cmp	r3, #96	; 0x60
 8005eda:	d877      	bhi.n	8005fcc <HAL_TIM_ConfigClockSource+0x16c>
 8005edc:	2b50      	cmp	r3, #80	; 0x50
 8005ede:	d03c      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0xfa>
 8005ee0:	2b50      	cmp	r3, #80	; 0x50
 8005ee2:	d873      	bhi.n	8005fcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ee4:	2b40      	cmp	r3, #64	; 0x40
 8005ee6:	d058      	beq.n	8005f9a <HAL_TIM_ConfigClockSource+0x13a>
 8005ee8:	2b40      	cmp	r3, #64	; 0x40
 8005eea:	d86f      	bhi.n	8005fcc <HAL_TIM_ConfigClockSource+0x16c>
 8005eec:	2b30      	cmp	r3, #48	; 0x30
 8005eee:	d064      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0x15a>
 8005ef0:	2b30      	cmp	r3, #48	; 0x30
 8005ef2:	d86b      	bhi.n	8005fcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	d060      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0x15a>
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d867      	bhi.n	8005fcc <HAL_TIM_ConfigClockSource+0x16c>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d05c      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0x15a>
 8005f00:	2b10      	cmp	r3, #16
 8005f02:	d05a      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0x15a>
 8005f04:	e062      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6818      	ldr	r0, [r3, #0]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	6899      	ldr	r1, [r3, #8]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f000 fb5d 	bl	80065d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	609a      	str	r2, [r3, #8]
      break;
 8005f32:	e04f      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6818      	ldr	r0, [r3, #0]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	6899      	ldr	r1, [r3, #8]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f000 fb46 	bl	80065d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f56:	609a      	str	r2, [r3, #8]
      break;
 8005f58:	e03c      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	6859      	ldr	r1, [r3, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	461a      	mov	r2, r3
 8005f68:	f000 faba 	bl	80064e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2150      	movs	r1, #80	; 0x50
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fb13 	bl	800659e <TIM_ITRx_SetConfig>
      break;
 8005f78:	e02c      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6818      	ldr	r0, [r3, #0]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	6859      	ldr	r1, [r3, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	461a      	mov	r2, r3
 8005f88:	f000 fad9 	bl	800653e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2160      	movs	r1, #96	; 0x60
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 fb03 	bl	800659e <TIM_ITRx_SetConfig>
      break;
 8005f98:	e01c      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	6859      	ldr	r1, [r3, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f000 fa9a 	bl	80064e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2140      	movs	r1, #64	; 0x40
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 faf3 	bl	800659e <TIM_ITRx_SetConfig>
      break;
 8005fb8:	e00c      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	f000 faea 	bl	800659e <TIM_ITRx_SetConfig>
      break;
 8005fca:	e003      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd0:	e000      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a40      	ldr	r2, [pc, #256]	; (8006154 <TIM_Base_SetConfig+0x114>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d013      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605e:	d00f      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a3d      	ldr	r2, [pc, #244]	; (8006158 <TIM_Base_SetConfig+0x118>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d00b      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a3c      	ldr	r2, [pc, #240]	; (800615c <TIM_Base_SetConfig+0x11c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d007      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a3b      	ldr	r2, [pc, #236]	; (8006160 <TIM_Base_SetConfig+0x120>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d003      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a3a      	ldr	r2, [pc, #232]	; (8006164 <TIM_Base_SetConfig+0x124>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d108      	bne.n	8006092 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a2f      	ldr	r2, [pc, #188]	; (8006154 <TIM_Base_SetConfig+0x114>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d02b      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a0:	d027      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a2c      	ldr	r2, [pc, #176]	; (8006158 <TIM_Base_SetConfig+0x118>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d023      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a2b      	ldr	r2, [pc, #172]	; (800615c <TIM_Base_SetConfig+0x11c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d01f      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a2a      	ldr	r2, [pc, #168]	; (8006160 <TIM_Base_SetConfig+0x120>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d01b      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a29      	ldr	r2, [pc, #164]	; (8006164 <TIM_Base_SetConfig+0x124>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d017      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a28      	ldr	r2, [pc, #160]	; (8006168 <TIM_Base_SetConfig+0x128>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d013      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a27      	ldr	r2, [pc, #156]	; (800616c <TIM_Base_SetConfig+0x12c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00f      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a26      	ldr	r2, [pc, #152]	; (8006170 <TIM_Base_SetConfig+0x130>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d00b      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a25      	ldr	r2, [pc, #148]	; (8006174 <TIM_Base_SetConfig+0x134>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d007      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a24      	ldr	r2, [pc, #144]	; (8006178 <TIM_Base_SetConfig+0x138>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d003      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a23      	ldr	r2, [pc, #140]	; (800617c <TIM_Base_SetConfig+0x13c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d108      	bne.n	8006104 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a0a      	ldr	r2, [pc, #40]	; (8006154 <TIM_Base_SetConfig+0x114>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d003      	beq.n	8006138 <TIM_Base_SetConfig+0xf8>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a0c      	ldr	r2, [pc, #48]	; (8006164 <TIM_Base_SetConfig+0x124>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d103      	bne.n	8006140 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	615a      	str	r2, [r3, #20]
}
 8006146:	bf00      	nop
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	40010000 	.word	0x40010000
 8006158:	40000400 	.word	0x40000400
 800615c:	40000800 	.word	0x40000800
 8006160:	40000c00 	.word	0x40000c00
 8006164:	40010400 	.word	0x40010400
 8006168:	40014000 	.word	0x40014000
 800616c:	40014400 	.word	0x40014400
 8006170:	40014800 	.word	0x40014800
 8006174:	40001800 	.word	0x40001800
 8006178:	40001c00 	.word	0x40001c00
 800617c:	40002000 	.word	0x40002000

08006180 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	f023 0201 	bic.w	r2, r3, #1
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0303 	bic.w	r3, r3, #3
 80061b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f023 0302 	bic.w	r3, r3, #2
 80061c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a20      	ldr	r2, [pc, #128]	; (8006258 <TIM_OC1_SetConfig+0xd8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d003      	beq.n	80061e4 <TIM_OC1_SetConfig+0x64>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a1f      	ldr	r2, [pc, #124]	; (800625c <TIM_OC1_SetConfig+0xdc>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d10c      	bne.n	80061fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f023 0308 	bic.w	r3, r3, #8
 80061ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f023 0304 	bic.w	r3, r3, #4
 80061fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a15      	ldr	r2, [pc, #84]	; (8006258 <TIM_OC1_SetConfig+0xd8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d003      	beq.n	800620e <TIM_OC1_SetConfig+0x8e>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a14      	ldr	r2, [pc, #80]	; (800625c <TIM_OC1_SetConfig+0xdc>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d111      	bne.n	8006232 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800621c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	621a      	str	r2, [r3, #32]
}
 800624c:	bf00      	nop
 800624e:	371c      	adds	r7, #28
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	40010000 	.word	0x40010000
 800625c:	40010400 	.word	0x40010400

08006260 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	f023 0210 	bic.w	r2, r3, #16
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800628e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	021b      	lsls	r3, r3, #8
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f023 0320 	bic.w	r3, r3, #32
 80062aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	011b      	lsls	r3, r3, #4
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a22      	ldr	r2, [pc, #136]	; (8006344 <TIM_OC2_SetConfig+0xe4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_OC2_SetConfig+0x68>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a21      	ldr	r2, [pc, #132]	; (8006348 <TIM_OC2_SetConfig+0xe8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d10d      	bne.n	80062e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a17      	ldr	r2, [pc, #92]	; (8006344 <TIM_OC2_SetConfig+0xe4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d003      	beq.n	80062f4 <TIM_OC2_SetConfig+0x94>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a16      	ldr	r2, [pc, #88]	; (8006348 <TIM_OC2_SetConfig+0xe8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d113      	bne.n	800631c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006302:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	621a      	str	r2, [r3, #32]
}
 8006336:	bf00      	nop
 8006338:	371c      	adds	r7, #28
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40010000 	.word	0x40010000
 8006348:	40010400 	.word	0x40010400

0800634c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 0303 	bic.w	r3, r3, #3
 8006382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	021b      	lsls	r3, r3, #8
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	4313      	orrs	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a21      	ldr	r2, [pc, #132]	; (800642c <TIM_OC3_SetConfig+0xe0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d003      	beq.n	80063b2 <TIM_OC3_SetConfig+0x66>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a20      	ldr	r2, [pc, #128]	; (8006430 <TIM_OC3_SetConfig+0xe4>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d10d      	bne.n	80063ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a16      	ldr	r2, [pc, #88]	; (800642c <TIM_OC3_SetConfig+0xe0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d003      	beq.n	80063de <TIM_OC3_SetConfig+0x92>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a15      	ldr	r2, [pc, #84]	; (8006430 <TIM_OC3_SetConfig+0xe4>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d113      	bne.n	8006406 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	011b      	lsls	r3, r3, #4
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	621a      	str	r2, [r3, #32]
}
 8006420:	bf00      	nop
 8006422:	371c      	adds	r7, #28
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	40010000 	.word	0x40010000
 8006430:	40010400 	.word	0x40010400

08006434 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800646a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	021b      	lsls	r3, r3, #8
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800647e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	031b      	lsls	r3, r3, #12
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	4313      	orrs	r3, r2
 800648a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a12      	ldr	r2, [pc, #72]	; (80064d8 <TIM_OC4_SetConfig+0xa4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d003      	beq.n	800649c <TIM_OC4_SetConfig+0x68>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a11      	ldr	r2, [pc, #68]	; (80064dc <TIM_OC4_SetConfig+0xa8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d109      	bne.n	80064b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	019b      	lsls	r3, r3, #6
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	621a      	str	r2, [r3, #32]
}
 80064ca:	bf00      	nop
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	40010000 	.word	0x40010000
 80064dc:	40010400 	.word	0x40010400

080064e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	f023 0201 	bic.w	r2, r3, #1
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800650a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	011b      	lsls	r3, r3, #4
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f023 030a 	bic.w	r3, r3, #10
 800651c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4313      	orrs	r3, r2
 8006524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	621a      	str	r2, [r3, #32]
}
 8006532:	bf00      	nop
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800653e:	b480      	push	{r7}
 8006540:	b087      	sub	sp, #28
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	f023 0210 	bic.w	r2, r3, #16
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006568:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	031b      	lsls	r3, r3, #12
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800657a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	011b      	lsls	r3, r3, #4
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	621a      	str	r2, [r3, #32]
}
 8006592:	bf00      	nop
 8006594:	371c      	adds	r7, #28
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800659e:	b480      	push	{r7}
 80065a0:	b085      	sub	sp, #20
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	f043 0307 	orr.w	r3, r3, #7
 80065c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	609a      	str	r2, [r3, #8]
}
 80065c8:	bf00      	nop
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
 80065e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	021a      	lsls	r2, r3, #8
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	431a      	orrs	r2, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	4313      	orrs	r3, r2
 8006600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	609a      	str	r2, [r3, #8]
}
 8006608:	bf00      	nop
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f003 031f 	and.w	r3, r3, #31
 8006626:	2201      	movs	r2, #1
 8006628:	fa02 f303 	lsl.w	r3, r2, r3
 800662c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6a1a      	ldr	r2, [r3, #32]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	43db      	mvns	r3, r3
 8006636:	401a      	ands	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a1a      	ldr	r2, [r3, #32]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f003 031f 	and.w	r3, r3, #31
 8006646:	6879      	ldr	r1, [r7, #4]
 8006648:	fa01 f303 	lsl.w	r3, r1, r3
 800664c:	431a      	orrs	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	621a      	str	r2, [r3, #32]
}
 8006652:	bf00      	nop
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
	...

08006660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d101      	bne.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006674:	2302      	movs	r3, #2
 8006676:	e05a      	b.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800669e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a21      	ldr	r2, [pc, #132]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d022      	beq.n	8006702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c4:	d01d      	beq.n	8006702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a1d      	ldr	r2, [pc, #116]	; (8006740 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d018      	beq.n	8006702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a1b      	ldr	r2, [pc, #108]	; (8006744 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d013      	beq.n	8006702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1a      	ldr	r2, [pc, #104]	; (8006748 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00e      	beq.n	8006702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a18      	ldr	r2, [pc, #96]	; (800674c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d009      	beq.n	8006702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a17      	ldr	r2, [pc, #92]	; (8006750 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d004      	beq.n	8006702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a15      	ldr	r2, [pc, #84]	; (8006754 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d10c      	bne.n	800671c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	4313      	orrs	r3, r2
 8006712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	40010000 	.word	0x40010000
 8006740:	40000400 	.word	0x40000400
 8006744:	40000800 	.word	0x40000800
 8006748:	40000c00 	.word	0x40000c00
 800674c:	40010400 	.word	0x40010400
 8006750:	40014000 	.word	0x40014000
 8006754:	40001800 	.word	0x40001800

08006758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e03f      	b.n	8006812 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fb fcaa 	bl	8002100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2224      	movs	r2, #36	; 0x24
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f829 	bl	800681c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691a      	ldr	r2, [r3, #16]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	695a      	ldr	r2, [r3, #20]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800681c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006820:	b0c0      	sub	sp, #256	; 0x100
 8006822:	af00      	add	r7, sp, #0
 8006824:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006838:	68d9      	ldr	r1, [r3, #12]
 800683a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	ea40 0301 	orr.w	r3, r0, r1
 8006844:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	431a      	orrs	r2, r3
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	431a      	orrs	r2, r3
 800685c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	4313      	orrs	r3, r2
 8006864:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006874:	f021 010c 	bic.w	r1, r1, #12
 8006878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006882:	430b      	orrs	r3, r1
 8006884:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006896:	6999      	ldr	r1, [r3, #24]
 8006898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	ea40 0301 	orr.w	r3, r0, r1
 80068a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	4b8f      	ldr	r3, [pc, #572]	; (8006ae8 <UART_SetConfig+0x2cc>)
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d005      	beq.n	80068bc <UART_SetConfig+0xa0>
 80068b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	4b8d      	ldr	r3, [pc, #564]	; (8006aec <UART_SetConfig+0x2d0>)
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d104      	bne.n	80068c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068bc:	f7fd ffb0 	bl	8004820 <HAL_RCC_GetPCLK2Freq>
 80068c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80068c4:	e003      	b.n	80068ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068c6:	f7fd ff97 	bl	80047f8 <HAL_RCC_GetPCLK1Freq>
 80068ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068d8:	f040 810c 	bne.w	8006af4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068e0:	2200      	movs	r2, #0
 80068e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80068ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80068ee:	4622      	mov	r2, r4
 80068f0:	462b      	mov	r3, r5
 80068f2:	1891      	adds	r1, r2, r2
 80068f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80068f6:	415b      	adcs	r3, r3
 80068f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068fe:	4621      	mov	r1, r4
 8006900:	eb12 0801 	adds.w	r8, r2, r1
 8006904:	4629      	mov	r1, r5
 8006906:	eb43 0901 	adc.w	r9, r3, r1
 800690a:	f04f 0200 	mov.w	r2, #0
 800690e:	f04f 0300 	mov.w	r3, #0
 8006912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800691a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800691e:	4690      	mov	r8, r2
 8006920:	4699      	mov	r9, r3
 8006922:	4623      	mov	r3, r4
 8006924:	eb18 0303 	adds.w	r3, r8, r3
 8006928:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800692c:	462b      	mov	r3, r5
 800692e:	eb49 0303 	adc.w	r3, r9, r3
 8006932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006942:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006946:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800694a:	460b      	mov	r3, r1
 800694c:	18db      	adds	r3, r3, r3
 800694e:	653b      	str	r3, [r7, #80]	; 0x50
 8006950:	4613      	mov	r3, r2
 8006952:	eb42 0303 	adc.w	r3, r2, r3
 8006956:	657b      	str	r3, [r7, #84]	; 0x54
 8006958:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800695c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006960:	f7fa fa80 	bl	8000e64 <__aeabi_uldivmod>
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	4b61      	ldr	r3, [pc, #388]	; (8006af0 <UART_SetConfig+0x2d4>)
 800696a:	fba3 2302 	umull	r2, r3, r3, r2
 800696e:	095b      	lsrs	r3, r3, #5
 8006970:	011c      	lsls	r4, r3, #4
 8006972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006976:	2200      	movs	r2, #0
 8006978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800697c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006980:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006984:	4642      	mov	r2, r8
 8006986:	464b      	mov	r3, r9
 8006988:	1891      	adds	r1, r2, r2
 800698a:	64b9      	str	r1, [r7, #72]	; 0x48
 800698c:	415b      	adcs	r3, r3
 800698e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006990:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006994:	4641      	mov	r1, r8
 8006996:	eb12 0a01 	adds.w	sl, r2, r1
 800699a:	4649      	mov	r1, r9
 800699c:	eb43 0b01 	adc.w	fp, r3, r1
 80069a0:	f04f 0200 	mov.w	r2, #0
 80069a4:	f04f 0300 	mov.w	r3, #0
 80069a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069b4:	4692      	mov	sl, r2
 80069b6:	469b      	mov	fp, r3
 80069b8:	4643      	mov	r3, r8
 80069ba:	eb1a 0303 	adds.w	r3, sl, r3
 80069be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069c2:	464b      	mov	r3, r9
 80069c4:	eb4b 0303 	adc.w	r3, fp, r3
 80069c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80069dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80069e0:	460b      	mov	r3, r1
 80069e2:	18db      	adds	r3, r3, r3
 80069e4:	643b      	str	r3, [r7, #64]	; 0x40
 80069e6:	4613      	mov	r3, r2
 80069e8:	eb42 0303 	adc.w	r3, r2, r3
 80069ec:	647b      	str	r3, [r7, #68]	; 0x44
 80069ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80069f6:	f7fa fa35 	bl	8000e64 <__aeabi_uldivmod>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	4611      	mov	r1, r2
 8006a00:	4b3b      	ldr	r3, [pc, #236]	; (8006af0 <UART_SetConfig+0x2d4>)
 8006a02:	fba3 2301 	umull	r2, r3, r3, r1
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	2264      	movs	r2, #100	; 0x64
 8006a0a:	fb02 f303 	mul.w	r3, r2, r3
 8006a0e:	1acb      	subs	r3, r1, r3
 8006a10:	00db      	lsls	r3, r3, #3
 8006a12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a16:	4b36      	ldr	r3, [pc, #216]	; (8006af0 <UART_SetConfig+0x2d4>)
 8006a18:	fba3 2302 	umull	r2, r3, r3, r2
 8006a1c:	095b      	lsrs	r3, r3, #5
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a24:	441c      	add	r4, r3
 8006a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a38:	4642      	mov	r2, r8
 8006a3a:	464b      	mov	r3, r9
 8006a3c:	1891      	adds	r1, r2, r2
 8006a3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a40:	415b      	adcs	r3, r3
 8006a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a48:	4641      	mov	r1, r8
 8006a4a:	1851      	adds	r1, r2, r1
 8006a4c:	6339      	str	r1, [r7, #48]	; 0x30
 8006a4e:	4649      	mov	r1, r9
 8006a50:	414b      	adcs	r3, r1
 8006a52:	637b      	str	r3, [r7, #52]	; 0x34
 8006a54:	f04f 0200 	mov.w	r2, #0
 8006a58:	f04f 0300 	mov.w	r3, #0
 8006a5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a60:	4659      	mov	r1, fp
 8006a62:	00cb      	lsls	r3, r1, #3
 8006a64:	4651      	mov	r1, sl
 8006a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a6a:	4651      	mov	r1, sl
 8006a6c:	00ca      	lsls	r2, r1, #3
 8006a6e:	4610      	mov	r0, r2
 8006a70:	4619      	mov	r1, r3
 8006a72:	4603      	mov	r3, r0
 8006a74:	4642      	mov	r2, r8
 8006a76:	189b      	adds	r3, r3, r2
 8006a78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a7c:	464b      	mov	r3, r9
 8006a7e:	460a      	mov	r2, r1
 8006a80:	eb42 0303 	adc.w	r3, r2, r3
 8006a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	18db      	adds	r3, r3, r3
 8006aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	eb42 0303 	adc.w	r3, r2, r3
 8006aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006aae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ab2:	f7fa f9d7 	bl	8000e64 <__aeabi_uldivmod>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4b0d      	ldr	r3, [pc, #52]	; (8006af0 <UART_SetConfig+0x2d4>)
 8006abc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ac0:	095b      	lsrs	r3, r3, #5
 8006ac2:	2164      	movs	r1, #100	; 0x64
 8006ac4:	fb01 f303 	mul.w	r3, r1, r3
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	3332      	adds	r3, #50	; 0x32
 8006ace:	4a08      	ldr	r2, [pc, #32]	; (8006af0 <UART_SetConfig+0x2d4>)
 8006ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad4:	095b      	lsrs	r3, r3, #5
 8006ad6:	f003 0207 	and.w	r2, r3, #7
 8006ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4422      	add	r2, r4
 8006ae2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ae4:	e106      	b.n	8006cf4 <UART_SetConfig+0x4d8>
 8006ae6:	bf00      	nop
 8006ae8:	40011000 	.word	0x40011000
 8006aec:	40011400 	.word	0x40011400
 8006af0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006af8:	2200      	movs	r2, #0
 8006afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006afe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006b02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006b06:	4642      	mov	r2, r8
 8006b08:	464b      	mov	r3, r9
 8006b0a:	1891      	adds	r1, r2, r2
 8006b0c:	6239      	str	r1, [r7, #32]
 8006b0e:	415b      	adcs	r3, r3
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
 8006b12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b16:	4641      	mov	r1, r8
 8006b18:	1854      	adds	r4, r2, r1
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	eb43 0501 	adc.w	r5, r3, r1
 8006b20:	f04f 0200 	mov.w	r2, #0
 8006b24:	f04f 0300 	mov.w	r3, #0
 8006b28:	00eb      	lsls	r3, r5, #3
 8006b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b2e:	00e2      	lsls	r2, r4, #3
 8006b30:	4614      	mov	r4, r2
 8006b32:	461d      	mov	r5, r3
 8006b34:	4643      	mov	r3, r8
 8006b36:	18e3      	adds	r3, r4, r3
 8006b38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b3c:	464b      	mov	r3, r9
 8006b3e:	eb45 0303 	adc.w	r3, r5, r3
 8006b42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b56:	f04f 0200 	mov.w	r2, #0
 8006b5a:	f04f 0300 	mov.w	r3, #0
 8006b5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b62:	4629      	mov	r1, r5
 8006b64:	008b      	lsls	r3, r1, #2
 8006b66:	4621      	mov	r1, r4
 8006b68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	008a      	lsls	r2, r1, #2
 8006b70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b74:	f7fa f976 	bl	8000e64 <__aeabi_uldivmod>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4b60      	ldr	r3, [pc, #384]	; (8006d00 <UART_SetConfig+0x4e4>)
 8006b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b82:	095b      	lsrs	r3, r3, #5
 8006b84:	011c      	lsls	r4, r3, #4
 8006b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b98:	4642      	mov	r2, r8
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	1891      	adds	r1, r2, r2
 8006b9e:	61b9      	str	r1, [r7, #24]
 8006ba0:	415b      	adcs	r3, r3
 8006ba2:	61fb      	str	r3, [r7, #28]
 8006ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ba8:	4641      	mov	r1, r8
 8006baa:	1851      	adds	r1, r2, r1
 8006bac:	6139      	str	r1, [r7, #16]
 8006bae:	4649      	mov	r1, r9
 8006bb0:	414b      	adcs	r3, r1
 8006bb2:	617b      	str	r3, [r7, #20]
 8006bb4:	f04f 0200 	mov.w	r2, #0
 8006bb8:	f04f 0300 	mov.w	r3, #0
 8006bbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bc0:	4659      	mov	r1, fp
 8006bc2:	00cb      	lsls	r3, r1, #3
 8006bc4:	4651      	mov	r1, sl
 8006bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bca:	4651      	mov	r1, sl
 8006bcc:	00ca      	lsls	r2, r1, #3
 8006bce:	4610      	mov	r0, r2
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	4642      	mov	r2, r8
 8006bd6:	189b      	adds	r3, r3, r2
 8006bd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bdc:	464b      	mov	r3, r9
 8006bde:	460a      	mov	r2, r1
 8006be0:	eb42 0303 	adc.w	r3, r2, r3
 8006be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bf2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006c00:	4649      	mov	r1, r9
 8006c02:	008b      	lsls	r3, r1, #2
 8006c04:	4641      	mov	r1, r8
 8006c06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c0a:	4641      	mov	r1, r8
 8006c0c:	008a      	lsls	r2, r1, #2
 8006c0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006c12:	f7fa f927 	bl	8000e64 <__aeabi_uldivmod>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	4b38      	ldr	r3, [pc, #224]	; (8006d00 <UART_SetConfig+0x4e4>)
 8006c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	2264      	movs	r2, #100	; 0x64
 8006c26:	fb02 f303 	mul.w	r3, r2, r3
 8006c2a:	1acb      	subs	r3, r1, r3
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	3332      	adds	r3, #50	; 0x32
 8006c30:	4a33      	ldr	r2, [pc, #204]	; (8006d00 <UART_SetConfig+0x4e4>)
 8006c32:	fba2 2303 	umull	r2, r3, r2, r3
 8006c36:	095b      	lsrs	r3, r3, #5
 8006c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c3c:	441c      	add	r4, r3
 8006c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c42:	2200      	movs	r2, #0
 8006c44:	673b      	str	r3, [r7, #112]	; 0x70
 8006c46:	677a      	str	r2, [r7, #116]	; 0x74
 8006c48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c4c:	4642      	mov	r2, r8
 8006c4e:	464b      	mov	r3, r9
 8006c50:	1891      	adds	r1, r2, r2
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	415b      	adcs	r3, r3
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c5c:	4641      	mov	r1, r8
 8006c5e:	1851      	adds	r1, r2, r1
 8006c60:	6039      	str	r1, [r7, #0]
 8006c62:	4649      	mov	r1, r9
 8006c64:	414b      	adcs	r3, r1
 8006c66:	607b      	str	r3, [r7, #4]
 8006c68:	f04f 0200 	mov.w	r2, #0
 8006c6c:	f04f 0300 	mov.w	r3, #0
 8006c70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c74:	4659      	mov	r1, fp
 8006c76:	00cb      	lsls	r3, r1, #3
 8006c78:	4651      	mov	r1, sl
 8006c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c7e:	4651      	mov	r1, sl
 8006c80:	00ca      	lsls	r2, r1, #3
 8006c82:	4610      	mov	r0, r2
 8006c84:	4619      	mov	r1, r3
 8006c86:	4603      	mov	r3, r0
 8006c88:	4642      	mov	r2, r8
 8006c8a:	189b      	adds	r3, r3, r2
 8006c8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c8e:	464b      	mov	r3, r9
 8006c90:	460a      	mov	r2, r1
 8006c92:	eb42 0303 	adc.w	r3, r2, r3
 8006c96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	663b      	str	r3, [r7, #96]	; 0x60
 8006ca2:	667a      	str	r2, [r7, #100]	; 0x64
 8006ca4:	f04f 0200 	mov.w	r2, #0
 8006ca8:	f04f 0300 	mov.w	r3, #0
 8006cac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006cb0:	4649      	mov	r1, r9
 8006cb2:	008b      	lsls	r3, r1, #2
 8006cb4:	4641      	mov	r1, r8
 8006cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cba:	4641      	mov	r1, r8
 8006cbc:	008a      	lsls	r2, r1, #2
 8006cbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006cc2:	f7fa f8cf 	bl	8000e64 <__aeabi_uldivmod>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4b0d      	ldr	r3, [pc, #52]	; (8006d00 <UART_SetConfig+0x4e4>)
 8006ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8006cd0:	095b      	lsrs	r3, r3, #5
 8006cd2:	2164      	movs	r1, #100	; 0x64
 8006cd4:	fb01 f303 	mul.w	r3, r1, r3
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	3332      	adds	r3, #50	; 0x32
 8006cde:	4a08      	ldr	r2, [pc, #32]	; (8006d00 <UART_SetConfig+0x4e4>)
 8006ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce4:	095b      	lsrs	r3, r3, #5
 8006ce6:	f003 020f 	and.w	r2, r3, #15
 8006cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4422      	add	r2, r4
 8006cf2:	609a      	str	r2, [r3, #8]
}
 8006cf4:	bf00      	nop
 8006cf6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d00:	51eb851f 	.word	0x51eb851f

08006d04 <gyroInit>:
static u8 spiTxBuf[2];
static u8 spiRxBuf[2];


void gyroInit(void)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d0e:	484a      	ldr	r0, [pc, #296]	; (8006e38 <gyroInit+0x134>)
 8006d10:	f7fd f8a0 	bl	8003e54 <HAL_GPIO_WritePin>
	spiTxBuf[0] = 0x0F | 0x80; // WHO_AM_I
 8006d14:	4b49      	ldr	r3, [pc, #292]	; (8006e3c <gyroInit+0x138>)
 8006d16:	228f      	movs	r2, #143	; 0x8f
 8006d18:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8006d1a:	2332      	movs	r3, #50	; 0x32
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	4947      	ldr	r1, [pc, #284]	; (8006e3c <gyroInit+0x138>)
 8006d20:	4847      	ldr	r0, [pc, #284]	; (8006e40 <gyroInit+0x13c>)
 8006d22:	f7fd fe35 	bl	8004990 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &gyro_identity, 1, 50);
 8006d26:	2332      	movs	r3, #50	; 0x32
 8006d28:	2201      	movs	r2, #1
 8006d2a:	4946      	ldr	r1, [pc, #280]	; (8006e44 <gyroInit+0x140>)
 8006d2c:	4844      	ldr	r0, [pc, #272]	; (8006e40 <gyroInit+0x13c>)
 8006d2e:	f7fd ff6b 	bl	8004c08 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006d32:	2201      	movs	r2, #1
 8006d34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d38:	483f      	ldr	r0, [pc, #252]	; (8006e38 <gyroInit+0x134>)
 8006d3a:	f7fd f88b 	bl	8003e54 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006d3e:	2014      	movs	r0, #20
 8006d40:	f7fb fecc 	bl	8002adc <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006d44:	2200      	movs	r2, #0
 8006d46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d4a:	483b      	ldr	r0, [pc, #236]	; (8006e38 <gyroInit+0x134>)
 8006d4c:	f7fd f882 	bl	8003e54 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006d50:	2014      	movs	r0, #20
 8006d52:	f7fb fec3 	bl	8002adc <HAL_Delay>
	spiTxBuf[0] = 0x20; // CTRL1:           DR1 DR0 BW1 BW0 PD Zen Xen Yen
 8006d56:	4b39      	ldr	r3, [pc, #228]	; (8006e3c <gyroInit+0x138>)
 8006d58:	2220      	movs	r2, #32
 8006d5a:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0xfc; // 800Hz, BW-100Hz   1   1   1   1   1  1   0   0
 8006d5c:	4b37      	ldr	r3, [pc, #220]	; (8006e3c <gyroInit+0x138>)
 8006d5e:	22fc      	movs	r2, #252	; 0xfc
 8006d60:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8006d62:	2332      	movs	r3, #50	; 0x32
 8006d64:	2202      	movs	r2, #2
 8006d66:	4935      	ldr	r1, [pc, #212]	; (8006e3c <gyroInit+0x138>)
 8006d68:	4835      	ldr	r0, [pc, #212]	; (8006e40 <gyroInit+0x13c>)
 8006d6a:	f7fd fe11 	bl	8004990 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d74:	4830      	ldr	r0, [pc, #192]	; (8006e38 <gyroInit+0x134>)
 8006d76:	f7fd f86d 	bl	8003e54 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006d7a:	2014      	movs	r0, #20
 8006d7c:	f7fb feae 	bl	8002adc <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006d80:	2200      	movs	r2, #0
 8006d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d86:	482c      	ldr	r0, [pc, #176]	; (8006e38 <gyroInit+0x134>)
 8006d88:	f7fd f864 	bl	8003e54 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006d8c:	2014      	movs	r0, #20
 8006d8e:	f7fb fea5 	bl	8002adc <HAL_Delay>
	spiTxBuf[0] = 0x21; // CTRL2:            EXTRen LVLen HPM1 HMP0 HPCF3 HPCF2 HPCF1 HPCF0
 8006d92:	4b2a      	ldr	r3, [pc, #168]	; (8006e3c <gyroInit+0x138>)
 8006d94:	2221      	movs	r2, #33	; 0x21
 8006d96:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x03; //  2Hz                0      0    0    0      0    1     0    1
 8006d98:	4b28      	ldr	r3, [pc, #160]	; (8006e3c <gyroInit+0x138>)
 8006d9a:	2203      	movs	r2, #3
 8006d9c:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8006d9e:	2332      	movs	r3, #50	; 0x32
 8006da0:	2202      	movs	r2, #2
 8006da2:	4926      	ldr	r1, [pc, #152]	; (8006e3c <gyroInit+0x138>)
 8006da4:	4826      	ldr	r0, [pc, #152]	; (8006e40 <gyroInit+0x13c>)
 8006da6:	f7fd fdf3 	bl	8004990 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006daa:	2201      	movs	r2, #1
 8006dac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006db0:	4821      	ldr	r0, [pc, #132]	; (8006e38 <gyroInit+0x134>)
 8006db2:	f7fd f84f 	bl	8003e54 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006db6:	2014      	movs	r0, #20
 8006db8:	f7fb fe90 	bl	8002adc <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dc2:	481d      	ldr	r0, [pc, #116]	; (8006e38 <gyroInit+0x134>)
 8006dc4:	f7fd f846 	bl	8003e54 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006dc8:	2014      	movs	r0, #20
 8006dca:	f7fb fe87 	bl	8002adc <HAL_Delay>
	spiTxBuf[0] = 0x23; // CTRL4:             BDU      BLE    FS1    FS0     IMPen   ST2  ST1   SIM
 8006dce:	4b1b      	ldr	r3, [pc, #108]	; (8006e3c <gyroInit+0x138>)
 8006dd0:	2223      	movs	r2, #35	; 0x23
 8006dd2:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x30; // 2000dps     	       0        0    	1      1       0       0    0     0
 8006dd4:	4b19      	ldr	r3, [pc, #100]	; (8006e3c <gyroInit+0x138>)
 8006dd6:	2230      	movs	r2, #48	; 0x30
 8006dd8:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8006dda:	2332      	movs	r3, #50	; 0x32
 8006ddc:	2202      	movs	r2, #2
 8006dde:	4917      	ldr	r1, [pc, #92]	; (8006e3c <gyroInit+0x138>)
 8006de0:	4817      	ldr	r0, [pc, #92]	; (8006e40 <gyroInit+0x13c>)
 8006de2:	f7fd fdd5 	bl	8004990 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006de6:	2201      	movs	r2, #1
 8006de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dec:	4812      	ldr	r0, [pc, #72]	; (8006e38 <gyroInit+0x134>)
 8006dee:	f7fd f831 	bl	8003e54 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006df2:	2014      	movs	r0, #20
 8006df4:	f7fb fe72 	bl	8002adc <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dfe:	480e      	ldr	r0, [pc, #56]	; (8006e38 <gyroInit+0x134>)
 8006e00:	f7fd f828 	bl	8003e54 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006e04:	2014      	movs	r0, #20
 8006e06:	f7fb fe69 	bl	8002adc <HAL_Delay>
	spiTxBuf[0] = 0x24; // CTRL5:              BOOT FIFO_EN   StopOnFTH    HPen   IG_Sel1    IG_Sel2   Out_Sel1   Out_Sel0
 8006e0a:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <gyroInit+0x138>)
 8006e0c:	2224      	movs	r2, #36	; 0x24
 8006e0e:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x00; //                      0      0         0           0       0         0          0        0
 8006e10:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <gyroInit+0x138>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8006e16:	2332      	movs	r3, #50	; 0x32
 8006e18:	2202      	movs	r2, #2
 8006e1a:	4908      	ldr	r1, [pc, #32]	; (8006e3c <gyroInit+0x138>)
 8006e1c:	4808      	ldr	r0, [pc, #32]	; (8006e40 <gyroInit+0x13c>)
 8006e1e:	f7fd fdb7 	bl	8004990 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006e22:	2201      	movs	r2, #1
 8006e24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e28:	4803      	ldr	r0, [pc, #12]	; (8006e38 <gyroInit+0x134>)
 8006e2a:	f7fd f813 	bl	8003e54 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006e2e:	2014      	movs	r0, #20
 8006e30:	f7fb fe54 	bl	8002adc <HAL_Delay>
}
 8006e34:	bf00      	nop
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	40020800 	.word	0x40020800
 8006e3c:	20000848 	.word	0x20000848
 8006e40:	200002ec 	.word	0x200002ec
 8006e44:	20000830 	.word	0x20000830

08006e48 <gyroUpdate>:

int gyroUpdate(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
	LED8_ON;
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	2110      	movs	r1, #16
 8006e50:	483d      	ldr	r0, [pc, #244]	; (8006f48 <gyroUpdate+0x100>)
 8006e52:	f7fc ffff 	bl	8003e54 <HAL_GPIO_WritePin>
	angle_rate = (float)(readGyro() - offset) * GYRO_SENSITIVITY;
 8006e56:	f000 f887 	bl	8006f68 <readGyro>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	ee07 3a90 	vmov	s15, r3
 8006e60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e64:	4b39      	ldr	r3, [pc, #228]	; (8006f4c <gyroUpdate+0x104>)
 8006e66:	edd3 7a00 	vldr	s15, [r3]
 8006e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e6e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006f50 <gyroUpdate+0x108>
 8006e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e76:	4b37      	ldr	r3, [pc, #220]	; (8006f54 <gyroUpdate+0x10c>)
 8006e78:	edc3 7a00 	vstr	s15, [r3]
	angle_rate = (abs(angle_rate) < noise && abs(angle_rate)<NOISE_THRESHOLD) ? 0 : angle_rate;
 8006e7c:	4b35      	ldr	r3, [pc, #212]	; (8006f54 <gyroUpdate+0x10c>)
 8006e7e:	edd3 7a00 	vldr	s15, [r3]
 8006e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e86:	ee17 3a90 	vmov	r3, s15
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	bfb8      	it	lt
 8006e8e:	425b      	neglt	r3, r3
 8006e90:	ee07 3a90 	vmov	s15, r3
 8006e94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e98:	4b2f      	ldr	r3, [pc, #188]	; (8006f58 <gyroUpdate+0x110>)
 8006e9a:	edd3 7a00 	vldr	s15, [r3]
 8006e9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ea6:	bf4c      	ite	mi
 8006ea8:	2301      	movmi	r3, #1
 8006eaa:	2300      	movpl	r3, #0
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	f083 0301 	eor.w	r3, r3, #1
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d11c      	bne.n	8006ef2 <gyroUpdate+0xaa>
 8006eb8:	4b26      	ldr	r3, [pc, #152]	; (8006f54 <gyroUpdate+0x10c>)
 8006eba:	edd3 7a00 	vldr	s15, [r3]
 8006ebe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ec2:	ee17 3a90 	vmov	r3, s15
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bfb8      	it	lt
 8006eca:	425b      	neglt	r3, r3
 8006ecc:	ee07 3a90 	vmov	s15, r3
 8006ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ed4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8006ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee0:	bf4c      	ite	mi
 8006ee2:	2301      	movmi	r3, #1
 8006ee4:	2300      	movpl	r3, #0
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	f083 0301 	eor.w	r3, r3, #1
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <gyroUpdate+0xb0>
 8006ef2:	4b18      	ldr	r3, [pc, #96]	; (8006f54 <gyroUpdate+0x10c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	e001      	b.n	8006efc <gyroUpdate+0xb4>
 8006ef8:	f04f 0300 	mov.w	r3, #0
 8006efc:	4a15      	ldr	r2, [pc, #84]	; (8006f54 <gyroUpdate+0x10c>)
 8006efe:	6013      	str	r3, [r2, #0]
	angle_z += ((angle_rate + last_angle_rate) * timeDifference) / (2.0f);
 8006f00:	4b14      	ldr	r3, [pc, #80]	; (8006f54 <gyroUpdate+0x10c>)
 8006f02:	ed93 7a00 	vldr	s14, [r3]
 8006f06:	4b15      	ldr	r3, [pc, #84]	; (8006f5c <gyroUpdate+0x114>)
 8006f08:	edd3 7a00 	vldr	s15, [r3]
 8006f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f10:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8006f60 <gyroUpdate+0x118>
 8006f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f18:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006f1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006f20:	4b10      	ldr	r3, [pc, #64]	; (8006f64 <gyroUpdate+0x11c>)
 8006f22:	edd3 7a00 	vldr	s15, [r3]
 8006f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f2a:	4b0e      	ldr	r3, [pc, #56]	; (8006f64 <gyroUpdate+0x11c>)
 8006f2c:	edc3 7a00 	vstr	s15, [r3]
	last_angle_rate = angle_rate;
 8006f30:	4b08      	ldr	r3, [pc, #32]	; (8006f54 <gyroUpdate+0x10c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a09      	ldr	r2, [pc, #36]	; (8006f5c <gyroUpdate+0x114>)
 8006f36:	6013      	str	r3, [r2, #0]
	LED8_OFF;
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2110      	movs	r1, #16
 8006f3c:	4802      	ldr	r0, [pc, #8]	; (8006f48 <gyroUpdate+0x100>)
 8006f3e:	f7fc ff89 	bl	8003e54 <HAL_GPIO_WritePin>
	return 0;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	40020400 	.word	0x40020400
 8006f4c:	20000840 	.word	0x20000840
 8006f50:	3d916873 	.word	0x3d916873
 8006f54:	2000083c 	.word	0x2000083c
 8006f58:	20000844 	.word	0x20000844
 8006f5c:	20000838 	.word	0x20000838
 8006f60:	3b03126f 	.word	0x3b03126f
 8006f64:	20000834 	.word	0x20000834

08006f68 <readGyro>:

int16_t readGyro(void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
	u16 raw_z = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006f72:	2200      	movs	r2, #0
 8006f74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f78:	4821      	ldr	r0, [pc, #132]	; (8007000 <readGyro+0x98>)
 8006f7a:	f7fc ff6b 	bl	8003e54 <HAL_GPIO_WritePin>
	spiTxBuf[0] = 0x2c | 0x80; // 0x2c ~ L8 bits OUT_Z(2's complement form),  0x2c | 0x80 ~ READ OPERATION
 8006f7e:	4b21      	ldr	r3, [pc, #132]	; (8007004 <readGyro+0x9c>)
 8006f80:	22ac      	movs	r2, #172	; 0xac
 8006f82:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8006f84:	2332      	movs	r3, #50	; 0x32
 8006f86:	2201      	movs	r2, #1
 8006f88:	491e      	ldr	r1, [pc, #120]	; (8007004 <readGyro+0x9c>)
 8006f8a:	481f      	ldr	r0, [pc, #124]	; (8007008 <readGyro+0xa0>)
 8006f8c:	f7fd fd00 	bl	8004990 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &spiRxBuf[0], 1, 50);
 8006f90:	2332      	movs	r3, #50	; 0x32
 8006f92:	2201      	movs	r2, #1
 8006f94:	491d      	ldr	r1, [pc, #116]	; (800700c <readGyro+0xa4>)
 8006f96:	481c      	ldr	r0, [pc, #112]	; (8007008 <readGyro+0xa0>)
 8006f98:	f7fd fe36 	bl	8004c08 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006fa2:	4817      	ldr	r0, [pc, #92]	; (8007000 <readGyro+0x98>)
 8006fa4:	f7fc ff56 	bl	8003e54 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006fae:	4814      	ldr	r0, [pc, #80]	; (8007000 <readGyro+0x98>)
 8006fb0:	f7fc ff50 	bl	8003e54 <HAL_GPIO_WritePin>
	spiTxBuf[0] = 0x2d | 0x80;
 8006fb4:	4b13      	ldr	r3, [pc, #76]	; (8007004 <readGyro+0x9c>)
 8006fb6:	22ad      	movs	r2, #173	; 0xad
 8006fb8:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50); // 0x2c ~ U8 bits OUT_Z(2's complement form),  0x80 ~ READ OPERATION
 8006fba:	2332      	movs	r3, #50	; 0x32
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	4911      	ldr	r1, [pc, #68]	; (8007004 <readGyro+0x9c>)
 8006fc0:	4811      	ldr	r0, [pc, #68]	; (8007008 <readGyro+0xa0>)
 8006fc2:	f7fd fce5 	bl	8004990 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &spiRxBuf[1], 1, 50);
 8006fc6:	2332      	movs	r3, #50	; 0x32
 8006fc8:	2201      	movs	r2, #1
 8006fca:	4911      	ldr	r1, [pc, #68]	; (8007010 <readGyro+0xa8>)
 8006fcc:	480e      	ldr	r0, [pc, #56]	; (8007008 <readGyro+0xa0>)
 8006fce:	f7fd fe1b 	bl	8004c08 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006fd8:	4809      	ldr	r0, [pc, #36]	; (8007000 <readGyro+0x98>)
 8006fda:	f7fc ff3b 	bl	8003e54 <HAL_GPIO_WritePin>

	raw_z = (spiRxBuf[1] << 8) | spiRxBuf[0];
 8006fde:	4b0b      	ldr	r3, [pc, #44]	; (800700c <readGyro+0xa4>)
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	021b      	lsls	r3, r3, #8
 8006fe4:	b21a      	sxth	r2, r3
 8006fe6:	4b09      	ldr	r3, [pc, #36]	; (800700c <readGyro+0xa4>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	b21b      	sxth	r3, r3
 8006fec:	4313      	orrs	r3, r2
 8006fee:	b21b      	sxth	r3, r3
 8006ff0:	80fb      	strh	r3, [r7, #6]
	return (int16_t)raw_z;
 8006ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	40020800 	.word	0x40020800
 8007004:	20000848 	.word	0x20000848
 8007008:	200002ec 	.word	0x200002ec
 800700c:	2000084c 	.word	0x2000084c
 8007010:	2000084d 	.word	0x2000084d
 8007014:	00000000 	.word	0x00000000

08007018 <gyroCalibration>:

void gyroCalibration(void)
{
 8007018:	b5b0      	push	{r4, r5, r7, lr}
 800701a:	f5ad 6dfc 	sub.w	sp, sp, #2016	; 0x7e0
 800701e:	af00      	add	r7, sp, #0
	LED9_ON, LED10_ON, LED11_ON;
 8007020:	2201      	movs	r2, #1
 8007022:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007026:	486a      	ldr	r0, [pc, #424]	; (80071d0 <gyroCalibration+0x1b8>)
 8007028:	f7fc ff14 	bl	8003e54 <HAL_GPIO_WritePin>
 800702c:	2201      	movs	r2, #1
 800702e:	2101      	movs	r1, #1
 8007030:	4868      	ldr	r0, [pc, #416]	; (80071d4 <gyroCalibration+0x1bc>)
 8007032:	f7fc ff0f 	bl	8003e54 <HAL_GPIO_WritePin>
 8007036:	2201      	movs	r2, #1
 8007038:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800703c:	4864      	ldr	r0, [pc, #400]	; (80071d0 <gyroCalibration+0x1b8>)
 800703e:	f7fc ff09 	bl	8003e54 <HAL_GPIO_WritePin>
	int16_t calibration_buffer[BUFFER_LENGTH];
	int32_t calibration_sum = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc

	for (u32 idx = 0; idx < BUFFER_LENGTH; idx++)
 8007048:	2300      	movs	r3, #0
 800704a:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8
 800704e:	e021      	b.n	8007094 <gyroCalibration+0x7c>
	{
		calibration_buffer[idx] = readGyro();
 8007050:	f7ff ff8a 	bl	8006f68 <readGyro>
 8007054:	4603      	mov	r3, r0
 8007056:	4619      	mov	r1, r3
 8007058:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800705c:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8007060:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	; 0x7d8
 8007064:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		HAL_Delay(2);
 8007068:	2002      	movs	r0, #2
 800706a:	f7fb fd37 	bl	8002adc <HAL_Delay>
		calibration_sum += calibration_buffer[idx];
 800706e:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8007072:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8007076:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	; 0x7d8
 800707a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800707e:	461a      	mov	r2, r3
 8007080:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8007084:	4413      	add	r3, r2
 8007086:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
	for (u32 idx = 0; idx < BUFFER_LENGTH; idx++)
 800708a:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 800708e:	3301      	adds	r3, #1
 8007090:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8
 8007094:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8007098:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800709c:	d3d8      	bcc.n	8007050 <gyroCalibration+0x38>
	}

	offset = (float)calibration_sum / BUFFER_LENGTH;
 800709e:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070aa:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80071d8 <gyroCalibration+0x1c0>
 80070ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070b2:	4b4a      	ldr	r3, [pc, #296]	; (80071dc <gyroCalibration+0x1c4>)
 80070b4:	edc3 7a00 	vstr	s15, [r3]

	for (u32 idx = 0; idx < BUFFER_LENGTH; idx++)
 80070b8:	2300      	movs	r3, #0
 80070ba:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 80070be:	e037      	b.n	8007130 <gyroCalibration+0x118>
		noise += pow(calibration_buffer[idx] - offset, 2);
 80070c0:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 80070c4:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 80070c8:	f8d7 27d4 	ldr.w	r2, [r7, #2004]	; 0x7d4
 80070cc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80070d0:	ee07 3a90 	vmov	s15, r3
 80070d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070d8:	4b40      	ldr	r3, [pc, #256]	; (80071dc <gyroCalibration+0x1c4>)
 80070da:	edd3 7a00 	vldr	s15, [r3]
 80070de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070e2:	ee17 0a90 	vmov	r0, s15
 80070e6:	f7f9 fa2f 	bl	8000548 <__aeabi_f2d>
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	ed9f 1b34 	vldr	d1, [pc, #208]	; 80071c0 <gyroCalibration+0x1a8>
 80070f2:	ec43 2b10 	vmov	d0, r2, r3
 80070f6:	f001 f87d 	bl	80081f4 <pow>
 80070fa:	ec55 4b10 	vmov	r4, r5, d0
 80070fe:	4b38      	ldr	r3, [pc, #224]	; (80071e0 <gyroCalibration+0x1c8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4618      	mov	r0, r3
 8007104:	f7f9 fa20 	bl	8000548 <__aeabi_f2d>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4620      	mov	r0, r4
 800710e:	4629      	mov	r1, r5
 8007110:	f7f9 f8bc 	bl	800028c <__adddf3>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4610      	mov	r0, r2
 800711a:	4619      	mov	r1, r3
 800711c:	f7f9 fd44 	bl	8000ba8 <__aeabi_d2f>
 8007120:	4603      	mov	r3, r0
 8007122:	4a2f      	ldr	r2, [pc, #188]	; (80071e0 <gyroCalibration+0x1c8>)
 8007124:	6013      	str	r3, [r2, #0]
	for (u32 idx = 0; idx < BUFFER_LENGTH; idx++)
 8007126:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 800712a:	3301      	adds	r3, #1
 800712c:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 8007130:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8007134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007138:	d3c2      	bcc.n	80070c0 <gyroCalibration+0xa8>
	noise = pow(noise, .5) / 2 * GYRO_SENSITIVITY;
 800713a:	4b29      	ldr	r3, [pc, #164]	; (80071e0 <gyroCalibration+0x1c8>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f7f9 fa02 	bl	8000548 <__aeabi_f2d>
 8007144:	4602      	mov	r2, r0
 8007146:	460b      	mov	r3, r1
 8007148:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80071c8 <gyroCalibration+0x1b0>
 800714c:	ec43 2b10 	vmov	d0, r2, r3
 8007150:	f001 f850 	bl	80081f4 <pow>
 8007154:	ec51 0b10 	vmov	r0, r1, d0
 8007158:	f04f 0200 	mov.w	r2, #0
 800715c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007160:	f7f9 fb74 	bl	800084c <__aeabi_ddiv>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4614      	mov	r4, r2
 800716a:	461d      	mov	r5, r3
 800716c:	4b1d      	ldr	r3, [pc, #116]	; (80071e4 <gyroCalibration+0x1cc>)
 800716e:	4618      	mov	r0, r3
 8007170:	f7f9 f9ea 	bl	8000548 <__aeabi_f2d>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4620      	mov	r0, r4
 800717a:	4629      	mov	r1, r5
 800717c:	f7f9 fa3c 	bl	80005f8 <__aeabi_dmul>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4610      	mov	r0, r2
 8007186:	4619      	mov	r1, r3
 8007188:	f7f9 fd0e 	bl	8000ba8 <__aeabi_d2f>
 800718c:	4603      	mov	r3, r0
 800718e:	4a14      	ldr	r2, [pc, #80]	; (80071e0 <gyroCalibration+0x1c8>)
 8007190:	6013      	str	r3, [r2, #0]

	LED9_OFF, LED10_OFF, LED11_OFF;
 8007192:	2200      	movs	r2, #0
 8007194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007198:	480d      	ldr	r0, [pc, #52]	; (80071d0 <gyroCalibration+0x1b8>)
 800719a:	f7fc fe5b 	bl	8003e54 <HAL_GPIO_WritePin>
 800719e:	2200      	movs	r2, #0
 80071a0:	2101      	movs	r1, #1
 80071a2:	480c      	ldr	r0, [pc, #48]	; (80071d4 <gyroCalibration+0x1bc>)
 80071a4:	f7fc fe56 	bl	8003e54 <HAL_GPIO_WritePin>
 80071a8:	2200      	movs	r2, #0
 80071aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80071ae:	4808      	ldr	r0, [pc, #32]	; (80071d0 <gyroCalibration+0x1b8>)
 80071b0:	f7fc fe50 	bl	8003e54 <HAL_GPIO_WritePin>

	return;
 80071b4:	bf00      	nop
 80071b6:	f507 67fc 	add.w	r7, r7, #2016	; 0x7e0
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bdb0      	pop	{r4, r5, r7, pc}
 80071be:	bf00      	nop
 80071c0:	00000000 	.word	0x00000000
 80071c4:	40000000 	.word	0x40000000
 80071c8:	00000000 	.word	0x00000000
 80071cc:	3fe00000 	.word	0x3fe00000
 80071d0:	40020400 	.word	0x40020400
 80071d4:	40020800 	.word	0x40020800
 80071d8:	447a0000 	.word	0x447a0000
 80071dc:	20000840 	.word	0x20000840
 80071e0:	20000844 	.word	0x20000844
 80071e4:	3d916873 	.word	0x3d916873

080071e8 <finishMove>:
static float sc_last_error = 0, ac_last_error = 0;
static float PD_correction_sc = 0, sc_error = 0, PD_correction_ac = 0, ac_error = 0;
static int counts_ = 0;
/////////////////////////////////////////////////// CONTROLLER /////////////////////////////////////////////////////////////////
bool finishMove(MV_Type mv_type_, float dist_ang_)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4603      	mov	r3, r0
 80071f0:	ed87 0a00 	vstr	s0, [r7]
 80071f4:	71fb      	strb	r3, [r7, #7]
	mv_type = mv_type_, dist_ang = dist_ang_;
 80071f6:	4a36      	ldr	r2, [pc, #216]	; (80072d0 <finishMove+0xe8>)
 80071f8:	79fb      	ldrb	r3, [r7, #7]
 80071fa:	7013      	strb	r3, [r2, #0]
 80071fc:	4a35      	ldr	r2, [pc, #212]	; (80072d4 <finishMove+0xec>)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	6013      	str	r3, [r2, #0]
	speed_th_ = (mv_type == STRAIGHT_RUN) ? st_speed : rt_speed;
 8007202:	4b33      	ldr	r3, [pc, #204]	; (80072d0 <finishMove+0xe8>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d102      	bne.n	8007210 <finishMove+0x28>
 800720a:	4b33      	ldr	r3, [pc, #204]	; (80072d8 <finishMove+0xf0>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	e001      	b.n	8007214 <finishMove+0x2c>
 8007210:	4b32      	ldr	r3, [pc, #200]	; (80072dc <finishMove+0xf4>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a32      	ldr	r2, [pc, #200]	; (80072e0 <finishMove+0xf8>)
 8007216:	6013      	str	r3, [r2, #0]

	// FIRST CALL
	if (l_start == 0)
 8007218:	4b32      	ldr	r3, [pc, #200]	; (80072e4 <finishMove+0xfc>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d126      	bne.n	800726e <finishMove+0x86>
	{
		l_start = l_position, r_start = r_position, start_angle = angle_z;
 8007220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	4a2f      	ldr	r2, [pc, #188]	; (80072e4 <finishMove+0xfc>)
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	4b2f      	ldr	r3, [pc, #188]	; (80072e8 <finishMove+0x100>)
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	43db      	mvns	r3, r3
 8007230:	4a2e      	ldr	r2, [pc, #184]	; (80072ec <finishMove+0x104>)
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	4b2e      	ldr	r3, [pc, #184]	; (80072f0 <finishMove+0x108>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a2e      	ldr	r2, [pc, #184]	; (80072f4 <finishMove+0x10c>)
 800723a:	6013      	str	r3, [r2, #0]
		(mv_type == STRAIGHT_RUN) ? LED1_ON : LED2_ON;
 800723c:	4b24      	ldr	r3, [pc, #144]	; (80072d0 <finishMove+0xe8>)
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d106      	bne.n	8007252 <finishMove+0x6a>
 8007244:	2201      	movs	r2, #1
 8007246:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800724a:	482b      	ldr	r0, [pc, #172]	; (80072f8 <finishMove+0x110>)
 800724c:	f7fc fe02 	bl	8003e54 <HAL_GPIO_WritePin>
 8007250:	e005      	b.n	800725e <finishMove+0x76>
 8007252:	2201      	movs	r2, #1
 8007254:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007258:	4827      	ldr	r0, [pc, #156]	; (80072f8 <finishMove+0x110>)
 800725a:	f7fc fdfb 	bl	8003e54 <HAL_GPIO_WritePin>
		sc_last_error = 0, ac_last_error = 0;
 800725e:	4b27      	ldr	r3, [pc, #156]	; (80072fc <finishMove+0x114>)
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	4b26      	ldr	r3, [pc, #152]	; (8007300 <finishMove+0x118>)
 8007268:	f04f 0200 	mov.w	r2, #0
 800726c:	601a      	str	r2, [r3, #0]
	}

	// DO ALL THE ADJUSTMENTS
	speedController();
 800726e:	f000 f853 	bl	8007318 <speedController>
	angularController();
 8007272:	f000 f939 	bl	80074e8 <angularController>

	// SET WHEEL
	l_speed = (mv_type == STRAIGHT_RUN) ? PD_correction_sc - PD_correction_ac : -PD_correction_ac - PD_correction_sc;
 8007276:	4b16      	ldr	r3, [pc, #88]	; (80072d0 <finishMove+0xe8>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d108      	bne.n	8007290 <finishMove+0xa8>
 800727e:	4b21      	ldr	r3, [pc, #132]	; (8007304 <finishMove+0x11c>)
 8007280:	ed93 7a00 	vldr	s14, [r3]
 8007284:	4b20      	ldr	r3, [pc, #128]	; (8007308 <finishMove+0x120>)
 8007286:	edd3 7a00 	vldr	s15, [r3]
 800728a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800728e:	e009      	b.n	80072a4 <finishMove+0xbc>
 8007290:	4b1d      	ldr	r3, [pc, #116]	; (8007308 <finishMove+0x120>)
 8007292:	edd3 7a00 	vldr	s15, [r3]
 8007296:	eeb1 7a67 	vneg.f32	s14, s15
 800729a:	4b1a      	ldr	r3, [pc, #104]	; (8007304 <finishMove+0x11c>)
 800729c:	edd3 7a00 	vldr	s15, [r3]
 80072a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072a4:	4b19      	ldr	r3, [pc, #100]	; (800730c <finishMove+0x124>)
 80072a6:	edc3 7a00 	vstr	s15, [r3]
	r_speed = (mv_type == STRAIGHT_RUN) ? PD_correction_sc + PD_correction_ac : +PD_correction_ac + PD_correction_sc;
 80072aa:	4b16      	ldr	r3, [pc, #88]	; (8007304 <finishMove+0x11c>)
 80072ac:	ed93 7a00 	vldr	s14, [r3]
 80072b0:	4b15      	ldr	r3, [pc, #84]	; (8007308 <finishMove+0x120>)
 80072b2:	edd3 7a00 	vldr	s15, [r3]
 80072b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072ba:	4b15      	ldr	r3, [pc, #84]	; (8007310 <finishMove+0x128>)
 80072bc:	edc3 7a00 	vstr	s15, [r3]
	setWheels();
 80072c0:	f000 fd4e 	bl	8007d60 <setWheels>
	return false;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	2000085c 	.word	0x2000085c
 80072d4:	20000860 	.word	0x20000860
 80072d8:	20000040 	.word	0x20000040
 80072dc:	20000044 	.word	0x20000044
 80072e0:	20000864 	.word	0x20000864
 80072e4:	20000850 	.word	0x20000850
 80072e8:	40000c00 	.word	0x40000c00
 80072ec:	20000854 	.word	0x20000854
 80072f0:	20000834 	.word	0x20000834
 80072f4:	20000858 	.word	0x20000858
 80072f8:	40020000 	.word	0x40020000
 80072fc:	20000868 	.word	0x20000868
 8007300:	2000086c 	.word	0x2000086c
 8007304:	20000870 	.word	0x20000870
 8007308:	20000878 	.word	0x20000878
 800730c:	20000890 	.word	0x20000890
 8007310:	20000894 	.word	0x20000894
 8007314:	00000000 	.word	0x00000000

08007318 <speedController>:
/////////////////////////////////////////////////// SPEED CONTROLLER /////////////////////////////////////////////////////////////

//  PARAMETERS
float sc_kp = 1, sc_kd = 0, sc_red = 30;
void speedController(void)
{
 8007318:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800731c:	ed2d 8b02 	vpush	{d8}
 8007320:	af00      	add	r7, sp, #0
	switch (mv_type)
 8007322:	4b61      	ldr	r3, [pc, #388]	; (80074a8 <speedController+0x190>)
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b02      	cmp	r3, #2
 8007328:	d050      	beq.n	80073cc <speedController+0xb4>
 800732a:	2b02      	cmp	r3, #2
 800732c:	dc64      	bgt.n	80073f8 <speedController+0xe0>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d05d      	beq.n	80073ee <speedController+0xd6>
 8007332:	2b01      	cmp	r3, #1
 8007334:	d160      	bne.n	80073f8 <speedController+0xe0>
	{
	case STRAIGHT_RUN:
		counts_ = dist_ang * LINEAR_SENSITIVITY;
 8007336:	4b5d      	ldr	r3, [pc, #372]	; (80074ac <speedController+0x194>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4618      	mov	r0, r3
 800733c:	f7f9 f904 	bl	8000548 <__aeabi_f2d>
 8007340:	a357      	add	r3, pc, #348	; (adr r3, 80074a0 <speedController+0x188>)
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	f7f9 f957 	bl	80005f8 <__aeabi_dmul>
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	4610      	mov	r0, r2
 8007350:	4619      	mov	r1, r3
 8007352:	f7f9 fc01 	bl	8000b58 <__aeabi_d2iz>
 8007356:	4603      	mov	r3, r0
 8007358:	4a55      	ldr	r2, [pc, #340]	; (80074b0 <speedController+0x198>)
 800735a:	6013      	str	r3, [r2, #0]
		sc_error = l_start + r_start + 2 * counts_, sc_error -= l_position, sc_error -= r_position; // sc_error = (l_start + r_start + 2*counts_) - l_position - r_position
 800735c:	4b55      	ldr	r3, [pc, #340]	; (80074b4 <speedController+0x19c>)
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	4b55      	ldr	r3, [pc, #340]	; (80074b8 <speedController+0x1a0>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4413      	add	r3, r2
 8007366:	4a52      	ldr	r2, [pc, #328]	; (80074b0 <speedController+0x198>)
 8007368:	6812      	ldr	r2, [r2, #0]
 800736a:	0052      	lsls	r2, r2, #1
 800736c:	4413      	add	r3, r2
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007376:	4b51      	ldr	r3, [pc, #324]	; (80074bc <speedController+0x1a4>)
 8007378:	edc3 7a00 	vstr	s15, [r3]
 800737c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007382:	4b4e      	ldr	r3, [pc, #312]	; (80074bc <speedController+0x1a4>)
 8007384:	ed93 7a00 	vldr	s14, [r3]
 8007388:	ee07 2a90 	vmov	s15, r2
 800738c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007390:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007394:	4b49      	ldr	r3, [pc, #292]	; (80074bc <speedController+0x1a4>)
 8007396:	edc3 7a00 	vstr	s15, [r3]
 800739a:	4b49      	ldr	r3, [pc, #292]	; (80074c0 <speedController+0x1a8>)
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	2200      	movs	r2, #0
 80073a0:	461c      	mov	r4, r3
 80073a2:	4615      	mov	r5, r2
 80073a4:	2300      	movs	r3, #0
 80073a6:	f1d4 38ff 	rsbs	r8, r4, #4294967295
 80073aa:	eb63 0905 	sbc.w	r9, r3, r5
 80073ae:	4b43      	ldr	r3, [pc, #268]	; (80074bc <speedController+0x1a4>)
 80073b0:	ed93 8a00 	vldr	s16, [r3]
 80073b4:	4640      	mov	r0, r8
 80073b6:	4649      	mov	r1, r9
 80073b8:	f7f9 fd16 	bl	8000de8 <__aeabi_l2f>
 80073bc:	ee07 0a90 	vmov	s15, r0
 80073c0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80073c4:	4b3d      	ldr	r3, [pc, #244]	; (80074bc <speedController+0x1a4>)
 80073c6:	edc3 7a00 	vstr	s15, [r3]
		break;
 80073ca:	e015      	b.n	80073f8 <speedController+0xe0>

	case POINT_TURN:
		sc_error = (start_angle + dist_ang) - angle_z;
 80073cc:	4b3d      	ldr	r3, [pc, #244]	; (80074c4 <speedController+0x1ac>)
 80073ce:	ed93 7a00 	vldr	s14, [r3]
 80073d2:	4b36      	ldr	r3, [pc, #216]	; (80074ac <speedController+0x194>)
 80073d4:	edd3 7a00 	vldr	s15, [r3]
 80073d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80073dc:	4b3a      	ldr	r3, [pc, #232]	; (80074c8 <speedController+0x1b0>)
 80073de:	edd3 7a00 	vldr	s15, [r3]
 80073e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073e6:	4b35      	ldr	r3, [pc, #212]	; (80074bc <speedController+0x1a4>)
 80073e8:	edc3 7a00 	vstr	s15, [r3]
		break;
 80073ec:	e004      	b.n	80073f8 <speedController+0xe0>

	case IDLE:
		PD_correction_sc = 0;
 80073ee:	4b37      	ldr	r3, [pc, #220]	; (80074cc <speedController+0x1b4>)
 80073f0:	f04f 0200 	mov.w	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]
		break;
 80073f6:	bf00      	nop
	}

	PD_correction_sc = (float)(sc_error * sc_kp + (sc_error - sc_last_error) * sc_kd) / sc_red;
 80073f8:	4b30      	ldr	r3, [pc, #192]	; (80074bc <speedController+0x1a4>)
 80073fa:	ed93 7a00 	vldr	s14, [r3]
 80073fe:	4b34      	ldr	r3, [pc, #208]	; (80074d0 <speedController+0x1b8>)
 8007400:	edd3 7a00 	vldr	s15, [r3]
 8007404:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007408:	4b2c      	ldr	r3, [pc, #176]	; (80074bc <speedController+0x1a4>)
 800740a:	edd3 6a00 	vldr	s13, [r3]
 800740e:	4b31      	ldr	r3, [pc, #196]	; (80074d4 <speedController+0x1bc>)
 8007410:	edd3 7a00 	vldr	s15, [r3]
 8007414:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007418:	4b2f      	ldr	r3, [pc, #188]	; (80074d8 <speedController+0x1c0>)
 800741a:	edd3 7a00 	vldr	s15, [r3]
 800741e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007422:	ee77 6a27 	vadd.f32	s13, s14, s15
 8007426:	4b2d      	ldr	r3, [pc, #180]	; (80074dc <speedController+0x1c4>)
 8007428:	ed93 7a00 	vldr	s14, [r3]
 800742c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007430:	4b26      	ldr	r3, [pc, #152]	; (80074cc <speedController+0x1b4>)
 8007432:	edc3 7a00 	vstr	s15, [r3]
	sc_last_error = sc_error;
 8007436:	4b21      	ldr	r3, [pc, #132]	; (80074bc <speedController+0x1a4>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a26      	ldr	r2, [pc, #152]	; (80074d4 <speedController+0x1bc>)
 800743c:	6013      	str	r3, [r2, #0]
	if (abs(PD_correction_ac) > speed_th_)
 800743e:	4b28      	ldr	r3, [pc, #160]	; (80074e0 <speedController+0x1c8>)
 8007440:	edd3 7a00 	vldr	s15, [r3]
 8007444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007448:	ee17 3a90 	vmov	r3, s15
 800744c:	2b00      	cmp	r3, #0
 800744e:	bfb8      	it	lt
 8007450:	425b      	neglt	r3, r3
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800745a:	4b22      	ldr	r3, [pc, #136]	; (80074e4 <speedController+0x1cc>)
 800745c:	edd3 7a00 	vldr	s15, [r3]
 8007460:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007468:	dc00      	bgt.n	800746c <speedController+0x154>
		PD_correction_ac = (PD_correction_ac > 0) ? speed_th_ : -speed_th_;
}
 800746a:	e013      	b.n	8007494 <speedController+0x17c>
		PD_correction_ac = (PD_correction_ac > 0) ? speed_th_ : -speed_th_;
 800746c:	4b1c      	ldr	r3, [pc, #112]	; (80074e0 <speedController+0x1c8>)
 800746e:	edd3 7a00 	vldr	s15, [r3]
 8007472:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747a:	dd03      	ble.n	8007484 <speedController+0x16c>
 800747c:	4b19      	ldr	r3, [pc, #100]	; (80074e4 <speedController+0x1cc>)
 800747e:	edd3 7a00 	vldr	s15, [r3]
 8007482:	e004      	b.n	800748e <speedController+0x176>
 8007484:	4b17      	ldr	r3, [pc, #92]	; (80074e4 <speedController+0x1cc>)
 8007486:	edd3 7a00 	vldr	s15, [r3]
 800748a:	eef1 7a67 	vneg.f32	s15, s15
 800748e:	4b14      	ldr	r3, [pc, #80]	; (80074e0 <speedController+0x1c8>)
 8007490:	edc3 7a00 	vstr	s15, [r3]
}
 8007494:	bf00      	nop
 8007496:	46bd      	mov	sp, r7
 8007498:	ecbd 8b02 	vpop	{d8}
 800749c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80074a0:	cccccccd 	.word	0xcccccccd
 80074a4:	4050accc 	.word	0x4050accc
 80074a8:	2000085c 	.word	0x2000085c
 80074ac:	20000860 	.word	0x20000860
 80074b0:	20000880 	.word	0x20000880
 80074b4:	20000850 	.word	0x20000850
 80074b8:	20000854 	.word	0x20000854
 80074bc:	20000874 	.word	0x20000874
 80074c0:	40000c00 	.word	0x40000c00
 80074c4:	20000858 	.word	0x20000858
 80074c8:	20000834 	.word	0x20000834
 80074cc:	20000870 	.word	0x20000870
 80074d0:	2000002c 	.word	0x2000002c
 80074d4:	20000868 	.word	0x20000868
 80074d8:	20000884 	.word	0x20000884
 80074dc:	20000030 	.word	0x20000030
 80074e0:	20000878 	.word	0x20000878
 80074e4:	20000864 	.word	0x20000864

080074e8 <angularController>:
////////////////////////////////////////// ANGULAR CONTROLLER //////////////////////////////////////////////////////////
// PARAMETERS
float ac_kp = 1, ac_kd = 0, ac_red = 30;

void angularController(void)
{
 80074e8:	e92d 4f98 	stmdb	sp!, {r3, r4, r7, r8, r9, sl, fp, lr}
 80074ec:	ed2d 8b02 	vpush	{d8}
 80074f0:	af00      	add	r7, sp, #0
	switch (mv_type)
 80074f2:	4c6b      	ldr	r4, [pc, #428]	; (80076a0 <angularController+0x1b8>)
 80074f4:	7824      	ldrb	r4, [r4, #0]
 80074f6:	2c02      	cmp	r4, #2
 80074f8:	d028      	beq.n	800754c <angularController+0x64>
 80074fa:	2c02      	cmp	r4, #2
 80074fc:	dc77      	bgt.n	80075ee <angularController+0x106>
 80074fe:	2c00      	cmp	r4, #0
 8007500:	d070      	beq.n	80075e4 <angularController+0xfc>
 8007502:	2c01      	cmp	r4, #1
 8007504:	d173      	bne.n	80075ee <angularController+0x106>
	{

	// STRAIGHT RUN
	case (STRAIGHT_RUN):
		ac_error = l_position, ac_error -= r_position;
 8007506:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	ee07 3a90 	vmov	s15, r3
 8007510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007514:	4b63      	ldr	r3, [pc, #396]	; (80076a4 <angularController+0x1bc>)
 8007516:	edc3 7a00 	vstr	s15, [r3]
 800751a:	4b63      	ldr	r3, [pc, #396]	; (80076a8 <angularController+0x1c0>)
 800751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751e:	2200      	movs	r2, #0
 8007520:	4618      	mov	r0, r3
 8007522:	4611      	mov	r1, r2
 8007524:	2300      	movs	r3, #0
 8007526:	f1d0 3aff 	rsbs	sl, r0, #4294967295
 800752a:	eb63 0b01 	sbc.w	fp, r3, r1
 800752e:	4b5d      	ldr	r3, [pc, #372]	; (80076a4 <angularController+0x1bc>)
 8007530:	ed93 8a00 	vldr	s16, [r3]
 8007534:	4650      	mov	r0, sl
 8007536:	4659      	mov	r1, fp
 8007538:	f7f9 fc56 	bl	8000de8 <__aeabi_l2f>
 800753c:	ee07 0a90 	vmov	s15, r0
 8007540:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007544:	4b57      	ldr	r3, [pc, #348]	; (80076a4 <angularController+0x1bc>)
 8007546:	edc3 7a00 	vstr	s15, [r3]
		break;
 800754a:	e050      	b.n	80075ee <angularController+0x106>

	// POINT-ROTATION
	case (POINT_TURN):
		ac_error += l_position, ac_error += r_position, ac_error -= (l_start + r_start), ac_error *= .1; // a_error = (l_position - l_start) + (r_position - r_start)
 800754c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007550:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8007552:	ee07 1a90 	vmov	s15, r1
 8007556:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800755a:	4952      	ldr	r1, [pc, #328]	; (80076a4 <angularController+0x1bc>)
 800755c:	edd1 7a00 	vldr	s15, [r1]
 8007560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007564:	494f      	ldr	r1, [pc, #316]	; (80076a4 <angularController+0x1bc>)
 8007566:	edc1 7a00 	vstr	s15, [r1]
 800756a:	494f      	ldr	r1, [pc, #316]	; (80076a8 <angularController+0x1c0>)
 800756c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800756e:	2000      	movs	r0, #0
 8007570:	460a      	mov	r2, r1
 8007572:	4603      	mov	r3, r0
 8007574:	2100      	movs	r1, #0
 8007576:	f1d2 38ff 	rsbs	r8, r2, #4294967295
 800757a:	eb61 0903 	sbc.w	r9, r1, r3
 800757e:	4640      	mov	r0, r8
 8007580:	4649      	mov	r1, r9
 8007582:	f7f9 fc31 	bl	8000de8 <__aeabi_l2f>
 8007586:	ee07 0a10 	vmov	s14, r0
 800758a:	4b46      	ldr	r3, [pc, #280]	; (80076a4 <angularController+0x1bc>)
 800758c:	edd3 7a00 	vldr	s15, [r3]
 8007590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007594:	4b43      	ldr	r3, [pc, #268]	; (80076a4 <angularController+0x1bc>)
 8007596:	edc3 7a00 	vstr	s15, [r3]
 800759a:	4b42      	ldr	r3, [pc, #264]	; (80076a4 <angularController+0x1bc>)
 800759c:	ed93 7a00 	vldr	s14, [r3]
 80075a0:	4b42      	ldr	r3, [pc, #264]	; (80076ac <angularController+0x1c4>)
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	4b42      	ldr	r3, [pc, #264]	; (80076b0 <angularController+0x1c8>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4413      	add	r3, r2
 80075aa:	ee07 3a90 	vmov	s15, r3
 80075ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075b6:	4b3b      	ldr	r3, [pc, #236]	; (80076a4 <angularController+0x1bc>)
 80075b8:	edc3 7a00 	vstr	s15, [r3]
 80075bc:	4b39      	ldr	r3, [pc, #228]	; (80076a4 <angularController+0x1bc>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7f8 ffc1 	bl	8000548 <__aeabi_f2d>
 80075c6:	a334      	add	r3, pc, #208	; (adr r3, 8007698 <angularController+0x1b0>)
 80075c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075cc:	f7f9 f814 	bl	80005f8 <__aeabi_dmul>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	4610      	mov	r0, r2
 80075d6:	4619      	mov	r1, r3
 80075d8:	f7f9 fae6 	bl	8000ba8 <__aeabi_d2f>
 80075dc:	4603      	mov	r3, r0
 80075de:	4a31      	ldr	r2, [pc, #196]	; (80076a4 <angularController+0x1bc>)
 80075e0:	6013      	str	r3, [r2, #0]
		break;
 80075e2:	e004      	b.n	80075ee <angularController+0x106>

	// AT THE END
	case (IDLE):
		ac_last_error = 0;
 80075e4:	4b33      	ldr	r3, [pc, #204]	; (80076b4 <angularController+0x1cc>)
 80075e6:	f04f 0200 	mov.w	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]
		break;
 80075ec:	bf00      	nop
	}

	PD_correction_ac = (ac_error * ac_kp + (ac_error - ac_last_error) * ac_kd) / ac_red;
 80075ee:	4b2d      	ldr	r3, [pc, #180]	; (80076a4 <angularController+0x1bc>)
 80075f0:	ed93 7a00 	vldr	s14, [r3]
 80075f4:	4b30      	ldr	r3, [pc, #192]	; (80076b8 <angularController+0x1d0>)
 80075f6:	edd3 7a00 	vldr	s15, [r3]
 80075fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075fe:	4b29      	ldr	r3, [pc, #164]	; (80076a4 <angularController+0x1bc>)
 8007600:	edd3 6a00 	vldr	s13, [r3]
 8007604:	4b2b      	ldr	r3, [pc, #172]	; (80076b4 <angularController+0x1cc>)
 8007606:	edd3 7a00 	vldr	s15, [r3]
 800760a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800760e:	4b2b      	ldr	r3, [pc, #172]	; (80076bc <angularController+0x1d4>)
 8007610:	edd3 7a00 	vldr	s15, [r3]
 8007614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007618:	ee77 6a27 	vadd.f32	s13, s14, s15
 800761c:	4b28      	ldr	r3, [pc, #160]	; (80076c0 <angularController+0x1d8>)
 800761e:	ed93 7a00 	vldr	s14, [r3]
 8007622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007626:	4b27      	ldr	r3, [pc, #156]	; (80076c4 <angularController+0x1dc>)
 8007628:	edc3 7a00 	vstr	s15, [r3]
	ac_last_error = ac_error;
 800762c:	4b1d      	ldr	r3, [pc, #116]	; (80076a4 <angularController+0x1bc>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a20      	ldr	r2, [pc, #128]	; (80076b4 <angularController+0x1cc>)
 8007632:	6013      	str	r3, [r2, #0]
	if (abs(PD_correction_ac) > speed_th_)
 8007634:	4b23      	ldr	r3, [pc, #140]	; (80076c4 <angularController+0x1dc>)
 8007636:	edd3 7a00 	vldr	s15, [r3]
 800763a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800763e:	ee17 3a90 	vmov	r3, s15
 8007642:	2b00      	cmp	r3, #0
 8007644:	bfb8      	it	lt
 8007646:	425b      	neglt	r3, r3
 8007648:	ee07 3a90 	vmov	s15, r3
 800764c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007650:	4b1d      	ldr	r3, [pc, #116]	; (80076c8 <angularController+0x1e0>)
 8007652:	edd3 7a00 	vldr	s15, [r3]
 8007656:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800765a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800765e:	dc00      	bgt.n	8007662 <angularController+0x17a>
		PD_correction_ac = (PD_correction_ac > 0) ? speed_th_ : -speed_th_;

	return;
 8007660:	e014      	b.n	800768c <angularController+0x1a4>
		PD_correction_ac = (PD_correction_ac > 0) ? speed_th_ : -speed_th_;
 8007662:	4b18      	ldr	r3, [pc, #96]	; (80076c4 <angularController+0x1dc>)
 8007664:	edd3 7a00 	vldr	s15, [r3]
 8007668:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800766c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007670:	dd03      	ble.n	800767a <angularController+0x192>
 8007672:	4b15      	ldr	r3, [pc, #84]	; (80076c8 <angularController+0x1e0>)
 8007674:	edd3 7a00 	vldr	s15, [r3]
 8007678:	e004      	b.n	8007684 <angularController+0x19c>
 800767a:	4b13      	ldr	r3, [pc, #76]	; (80076c8 <angularController+0x1e0>)
 800767c:	edd3 7a00 	vldr	s15, [r3]
 8007680:	eef1 7a67 	vneg.f32	s15, s15
 8007684:	4b0f      	ldr	r3, [pc, #60]	; (80076c4 <angularController+0x1dc>)
 8007686:	edc3 7a00 	vstr	s15, [r3]
	return;
 800768a:	bf00      	nop
}
 800768c:	46bd      	mov	sp, r7
 800768e:	ecbd 8b02 	vpop	{d8}
 8007692:	e8bd 8f98 	ldmia.w	sp!, {r3, r4, r7, r8, r9, sl, fp, pc}
 8007696:	bf00      	nop
 8007698:	9999999a 	.word	0x9999999a
 800769c:	3fb99999 	.word	0x3fb99999
 80076a0:	2000085c 	.word	0x2000085c
 80076a4:	2000087c 	.word	0x2000087c
 80076a8:	40000c00 	.word	0x40000c00
 80076ac:	20000850 	.word	0x20000850
 80076b0:	20000854 	.word	0x20000854
 80076b4:	2000086c 	.word	0x2000086c
 80076b8:	20000034 	.word	0x20000034
 80076bc:	20000888 	.word	0x20000888
 80076c0:	20000038 	.word	0x20000038
 80076c4:	20000878 	.word	0x20000878
 80076c8:	20000864 	.word	0x20000864

080076cc <readADC>:
#include "adc.h"



uint16_t readADC(adc_channels channel, uint8_t timeout)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b088      	sub	sp, #32
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	4603      	mov	r3, r0
 80076d4:	460a      	mov	r2, r1
 80076d6:	71fb      	strb	r3, [r7, #7]
 80076d8:	4613      	mov	r3, r2
 80076da:	71bb      	strb	r3, [r7, #6]
    ADC_ChannelConfTypeDef sConfig = {0};
 80076dc:	f107 030c 	add.w	r3, r7, #12
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	605a      	str	r2, [r3, #4]
 80076e6:	609a      	str	r2, [r3, #8]
 80076e8:	60da      	str	r2, [r3, #12]
    uint16_t adc_val = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	83fb      	strh	r3, [r7, #30]
    switch (channel)
 80076ee:	79fb      	ldrb	r3, [r7, #7]
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	d81c      	bhi.n	800772e <readADC+0x62>
 80076f4:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <readADC+0x30>)
 80076f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fa:	bf00      	nop
 80076fc:	0800771d 	.word	0x0800771d
 8007700:	08007711 	.word	0x08007711
 8007704:	08007729 	.word	0x08007729
 8007708:	08007717 	.word	0x08007717
 800770c:	08007723 	.word	0x08007723
    {
        case RF_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_4;
 8007710:	2304      	movs	r3, #4
 8007712:	60fb      	str	r3, [r7, #12]
            break;
 8007714:	e00b      	b.n	800772e <readADC+0x62>

        case DL_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_8;
 8007716:	2308      	movs	r3, #8
 8007718:	60fb      	str	r3, [r7, #12]
            break;
 800771a:	e008      	b.n	800772e <readADC+0x62>

        case LF_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_9;
 800771c:	2309      	movs	r3, #9
 800771e:	60fb      	str	r3, [r7, #12]
            break;
 8007720:	e005      	b.n	800772e <readADC+0x62>

        case BAT_VOL:
        	sConfig.Channel = ADC_CHANNEL_13;
 8007722:	230d      	movs	r3, #13
 8007724:	60fb      	str	r3, [r7, #12]
            break;
 8007726:	e002      	b.n	800772e <readADC+0x62>
        
        case DR_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_14;
 8007728:	230e      	movs	r3, #14
 800772a:	60fb      	str	r3, [r7, #12]
            break;
 800772c:	bf00      	nop
    }


    sConfig.Rank = 1;
 800772e:	2301      	movs	r3, #1
 8007730:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8007732:	2304      	movs	r3, #4
 8007734:	617b      	str	r3, [r7, #20]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007736:	f107 030c 	add.w	r3, r7, #12
 800773a:	4619      	mov	r1, r3
 800773c:	480e      	ldr	r0, [pc, #56]	; (8007778 <readADC+0xac>)
 800773e:	f7fb fbd3 	bl	8002ee8 <HAL_ADC_ConfigChannel>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <readADC+0x80>
    {
      Error_Handler();
 8007748:	f7fa f9dc 	bl	8001b04 <Error_Handler>
    }

    HAL_ADC_Start(&hadc1);
 800774c:	480a      	ldr	r0, [pc, #40]	; (8007778 <readADC+0xac>)
 800774e:	f7fb fa2d 	bl	8002bac <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1,timeout);
 8007752:	79bb      	ldrb	r3, [r7, #6]
 8007754:	4619      	mov	r1, r3
 8007756:	4808      	ldr	r0, [pc, #32]	; (8007778 <readADC+0xac>)
 8007758:	f7fb fb2d 	bl	8002db6 <HAL_ADC_PollForConversion>
    adc_val = HAL_ADC_GetValue(&hadc1);
 800775c:	4806      	ldr	r0, [pc, #24]	; (8007778 <readADC+0xac>)
 800775e:	f7fb fbb5 	bl	8002ecc <HAL_ADC_GetValue>
 8007762:	4603      	mov	r3, r0
 8007764:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(&hadc1);
 8007766:	4804      	ldr	r0, [pc, #16]	; (8007778 <readADC+0xac>)
 8007768:	f7fb faf2 	bl	8002d50 <HAL_ADC_Stop>

    return adc_val;
 800776c:	8bfb      	ldrh	r3, [r7, #30]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3720      	adds	r7, #32
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	20000244 	.word	0x20000244

0800777c <displayInit>:
#include "display.h"

DISP_State disp_state;

void displayInit(void){
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8007780:	f7fa feb2 	bl	80024e8 <ssd1306_Init>
	disp_state = INIT;
 8007784:	4b03      	ldr	r3, [pc, #12]	; (8007794 <displayInit+0x18>)
 8007786:	2200      	movs	r2, #0
 8007788:	701a      	strb	r2, [r3, #0]
	displayUpdate();
 800778a:	f000 f8b1 	bl	80078f0 <displayUpdate>
}
 800778e:	bf00      	nop
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	2000088c 	.word	0x2000088c

08007798 <clearScreen>:

void clearScreen()
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 800779c:	2000      	movs	r0, #0
 800779e:	f7fa ff0d 	bl	80025bc <ssd1306_Fill>
}
 80077a2:	bf00      	nop
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <writeString>:

void writeString(char *str, FONT_Size font_size)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	460b      	mov	r3, r1
 80077b2:	70fb      	strb	r3, [r7, #3]
	switch (font_size)
 80077b4:	78fb      	ldrb	r3, [r7, #3]
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d826      	bhi.n	8007808 <writeString+0x60>
 80077ba:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <writeString+0x18>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	080077d1 	.word	0x080077d1
 80077c4:	080077df 	.word	0x080077df
 80077c8:	080077ed 	.word	0x080077ed
 80077cc:	080077fb 	.word	0x080077fb
	{
	case SMALL:
		ssd1306_WriteString(str, Font_6x8, White);
 80077d0:	4a0f      	ldr	r2, [pc, #60]	; (8007810 <writeString+0x68>)
 80077d2:	2301      	movs	r3, #1
 80077d4:	ca06      	ldmia	r2, {r1, r2}
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7fb f818 	bl	800280c <ssd1306_WriteString>
		break;
 80077dc:	e014      	b.n	8007808 <writeString+0x60>
	case MEDIUM:
		ssd1306_WriteString(str, Font_7x10, White);
 80077de:	4a0d      	ldr	r2, [pc, #52]	; (8007814 <writeString+0x6c>)
 80077e0:	2301      	movs	r3, #1
 80077e2:	ca06      	ldmia	r2, {r1, r2}
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7fb f811 	bl	800280c <ssd1306_WriteString>
		break;
 80077ea:	e00d      	b.n	8007808 <writeString+0x60>
	case LARGE:
		ssd1306_WriteString(str, Font_11x18, White);
 80077ec:	4a0a      	ldr	r2, [pc, #40]	; (8007818 <writeString+0x70>)
 80077ee:	2301      	movs	r3, #1
 80077f0:	ca06      	ldmia	r2, {r1, r2}
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7fb f80a 	bl	800280c <ssd1306_WriteString>
		break;
 80077f8:	e006      	b.n	8007808 <writeString+0x60>
	case HUGE:
		ssd1306_WriteString(str, Font_16x24, White);
 80077fa:	4a08      	ldr	r2, [pc, #32]	; (800781c <writeString+0x74>)
 80077fc:	2301      	movs	r3, #1
 80077fe:	ca06      	ldmia	r2, {r1, r2}
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7fb f803 	bl	800280c <ssd1306_WriteString>
		break;
 8007806:	bf00      	nop
	}
}
 8007808:	bf00      	nop
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	20000004 	.word	0x20000004
 8007814:	2000000c 	.word	0x2000000c
 8007818:	20000014 	.word	0x20000014
 800781c:	2000001c 	.word	0x2000001c

08007820 <putString>:

void putString(char *str, int x, int y, FONT_Size font_size)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	70fb      	strb	r3, [r7, #3]
	ssd1306_SetCursor(x, y);
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	b2d2      	uxtb	r2, r2
 8007836:	4611      	mov	r1, r2
 8007838:	4618      	mov	r0, r3
 800783a:	f7fb f80d 	bl	8002858 <ssd1306_SetCursor>
	writeString(str, font_size);
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	4619      	mov	r1, r3
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f7ff ffb0 	bl	80077a8 <writeString>
}
 8007848:	bf00      	nop
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <putInt>:
	ssd1306_SetCursor(x, y);
	writeString(str, font_size);
}

void putInt(int INT, int x, int y, FONT_Size font_size)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b094      	sub	sp, #80	; 0x50
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	70fb      	strb	r3, [r7, #3]
	char buff[64];
	snprintf(buff, sizeof(buff), "%d", INT);
 800785e:	f107 0010 	add.w	r0, r7, #16
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	4a0b      	ldr	r2, [pc, #44]	; (8007894 <putInt+0x44>)
 8007866:	2140      	movs	r1, #64	; 0x40
 8007868:	f002 f9d0 	bl	8009c0c <sniprintf>
	ssd1306_SetCursor(x, y);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	b2db      	uxtb	r3, r3
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	b2d2      	uxtb	r2, r2
 8007874:	4611      	mov	r1, r2
 8007876:	4618      	mov	r0, r3
 8007878:	f7fa ffee 	bl	8002858 <ssd1306_SetCursor>
	writeString(buff, font_size);
 800787c:	78fa      	ldrb	r2, [r7, #3]
 800787e:	f107 0310 	add.w	r3, r7, #16
 8007882:	4611      	mov	r1, r2
 8007884:	4618      	mov	r0, r3
 8007886:	f7ff ff8f 	bl	80077a8 <writeString>
}
 800788a:	bf00      	nop
 800788c:	3750      	adds	r7, #80	; 0x50
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	0800bd90 	.word	0x0800bd90

08007898 <putFloat>:

void putFloat(float FLOAT, int x, int y, FONT_Size font_size)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b096      	sub	sp, #88	; 0x58
 800789c:	af02      	add	r7, sp, #8
 800789e:	ed87 0a03 	vstr	s0, [r7, #12]
 80078a2:	60b8      	str	r0, [r7, #8]
 80078a4:	6079      	str	r1, [r7, #4]
 80078a6:	4613      	mov	r3, r2
 80078a8:	70fb      	strb	r3, [r7, #3]
	char buff[64];
	snprintf(buff, sizeof(buff), "%.2f", FLOAT); // Change %.2f to adjust precision
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f7f8 fe4c 	bl	8000548 <__aeabi_f2d>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	f107 0010 	add.w	r0, r7, #16
 80078b8:	e9cd 2300 	strd	r2, r3, [sp]
 80078bc:	4a0b      	ldr	r2, [pc, #44]	; (80078ec <putFloat+0x54>)
 80078be:	2140      	movs	r1, #64	; 0x40
 80078c0:	f002 f9a4 	bl	8009c0c <sniprintf>
	ssd1306_SetCursor(x, y);
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	b2d2      	uxtb	r2, r2
 80078cc:	4611      	mov	r1, r2
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fa ffc2 	bl	8002858 <ssd1306_SetCursor>
	writeString(buff, font_size);
 80078d4:	78fa      	ldrb	r2, [r7, #3]
 80078d6:	f107 0310 	add.w	r3, r7, #16
 80078da:	4611      	mov	r1, r2
 80078dc:	4618      	mov	r0, r3
 80078de:	f7ff ff63 	bl	80077a8 <writeString>
}
 80078e2:	bf00      	nop
 80078e4:	3750      	adds	r7, #80	; 0x50
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	0800bd94 	.word	0x0800bd94

080078f0 <displayUpdate>:


void displayUpdate(void)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
	clearScreen();
 80078f6:	f7ff ff4f 	bl	8007798 <clearScreen>
	switch (disp_state)
 80078fa:	4b6b      	ldr	r3, [pc, #428]	; (8007aa8 <displayUpdate+0x1b8>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	2b05      	cmp	r3, #5
 8007900:	f200 80c8 	bhi.w	8007a94 <displayUpdate+0x1a4>
 8007904:	a201      	add	r2, pc, #4	; (adr r2, 800790c <displayUpdate+0x1c>)
 8007906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790a:	bf00      	nop
 800790c:	08007925 	.word	0x08007925
 8007910:	0800794f 	.word	0x0800794f
 8007914:	0800797d 	.word	0x0800797d
 8007918:	080079e3 	.word	0x080079e3
 800791c:	08007a6d 	.word	0x08007a6d
 8007920:	08007a7b 	.word	0x08007a7b
	{
	// INITIALIZATION BLOCK: AUDI CAR EXPECTED
	case (INIT):
		for (int delta = 0; delta < 5; delta++)
 8007924:	2300      	movs	r3, #0
 8007926:	607b      	str	r3, [r7, #4]
 8007928:	e00d      	b.n	8007946 <displayUpdate+0x56>
			ssd1306_DrawCircle(16 * delta + 35, 15, 10, White);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	b2db      	uxtb	r3, r3
 800792e:	011b      	lsls	r3, r3, #4
 8007930:	b2db      	uxtb	r3, r3
 8007932:	3323      	adds	r3, #35	; 0x23
 8007934:	b2d8      	uxtb	r0, r3
 8007936:	2301      	movs	r3, #1
 8007938:	220a      	movs	r2, #10
 800793a:	210f      	movs	r1, #15
 800793c:	f7fa ffa4 	bl	8002888 <ssd1306_DrawCircle>
		for (int delta = 0; delta < 5; delta++)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	3301      	adds	r3, #1
 8007944:	607b      	str	r3, [r7, #4]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b04      	cmp	r3, #4
 800794a:	ddee      	ble.n	800792a <displayUpdate+0x3a>
		break;
 800794c:	e0a2      	b.n	8007a94 <displayUpdate+0x1a4>

	// DEFAULT SCREEN --> BATTERY PERCENTAGE, STATE OF THE ROBOT
	case (DEFAULT):
		// DISPLAYING BATTERY VOLTAGE
		putString("BAT:",74,2,SMALL);
 800794e:	2300      	movs	r3, #0
 8007950:	2202      	movs	r2, #2
 8007952:	214a      	movs	r1, #74	; 0x4a
 8007954:	4855      	ldr	r0, [pc, #340]	; (8007aac <displayUpdate+0x1bc>)
 8007956:	f7ff ff63 	bl	8007820 <putString>
		putFloat(voltage,104 , 2, SMALL);
 800795a:	4b55      	ldr	r3, [pc, #340]	; (8007ab0 <displayUpdate+0x1c0>)
 800795c:	edd3 7a00 	vldr	s15, [r3]
 8007960:	2200      	movs	r2, #0
 8007962:	2102      	movs	r1, #2
 8007964:	2068      	movs	r0, #104	; 0x68
 8007966:	eeb0 0a67 	vmov.f32	s0, s15
 800796a:	f7ff ff95 	bl	8007898 <putFloat>

		putString("TURN:",2,16,MEDIUM);
 800796e:	2301      	movs	r3, #1
 8007970:	2210      	movs	r2, #16
 8007972:	2102      	movs	r1, #2
 8007974:	484f      	ldr	r0, [pc, #316]	; (8007ab4 <displayUpdate+0x1c4>)
 8007976:	f7ff ff53 	bl	8007820 <putString>
		// putString(turn,44,16,MEDIUM);
		break;
 800797a:	e08b      	b.n	8007a94 <displayUpdate+0x1a4>

	case (GYRO_CALIB):
		putString("NOISE: ",2,2,SMALL);
 800797c:	2300      	movs	r3, #0
 800797e:	2202      	movs	r2, #2
 8007980:	2102      	movs	r1, #2
 8007982:	484d      	ldr	r0, [pc, #308]	; (8007ab8 <displayUpdate+0x1c8>)
 8007984:	f7ff ff4c 	bl	8007820 <putString>
		putFloat(noise,64, 2, SMALL);
 8007988:	4b4c      	ldr	r3, [pc, #304]	; (8007abc <displayUpdate+0x1cc>)
 800798a:	edd3 7a00 	vldr	s15, [r3]
 800798e:	2200      	movs	r2, #0
 8007990:	2102      	movs	r1, #2
 8007992:	2040      	movs	r0, #64	; 0x40
 8007994:	eeb0 0a67 	vmov.f32	s0, s15
 8007998:	f7ff ff7e 	bl	8007898 <putFloat>
 
		putString("OFFSET: ",2,11,SMALL);
 800799c:	2300      	movs	r3, #0
 800799e:	220b      	movs	r2, #11
 80079a0:	2102      	movs	r1, #2
 80079a2:	4847      	ldr	r0, [pc, #284]	; (8007ac0 <displayUpdate+0x1d0>)
 80079a4:	f7ff ff3c 	bl	8007820 <putString>
		putInt(offset,64,11,SMALL);
 80079a8:	4b46      	ldr	r3, [pc, #280]	; (8007ac4 <displayUpdate+0x1d4>)
 80079aa:	edd3 7a00 	vldr	s15, [r3]
 80079ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079b2:	2300      	movs	r3, #0
 80079b4:	220b      	movs	r2, #11
 80079b6:	2140      	movs	r1, #64	; 0x40
 80079b8:	ee17 0a90 	vmov	r0, s15
 80079bc:	f7ff ff48 	bl	8007850 <putInt>

		putString("ANGLE: ",2,22,SMALL);
 80079c0:	2300      	movs	r3, #0
 80079c2:	2216      	movs	r2, #22
 80079c4:	2102      	movs	r1, #2
 80079c6:	4840      	ldr	r0, [pc, #256]	; (8007ac8 <displayUpdate+0x1d8>)
 80079c8:	f7ff ff2a 	bl	8007820 <putString>
		putFloat(angle_z,64,22,SMALL);
 80079cc:	4b3f      	ldr	r3, [pc, #252]	; (8007acc <displayUpdate+0x1dc>)
 80079ce:	edd3 7a00 	vldr	s15, [r3]
 80079d2:	2200      	movs	r2, #0
 80079d4:	2116      	movs	r1, #22
 80079d6:	2040      	movs	r0, #64	; 0x40
 80079d8:	eeb0 0a67 	vmov.f32	s0, s15
 80079dc:	f7ff ff5c 	bl	8007898 <putFloat>
		break;
 80079e0:	e058      	b.n	8007a94 <displayUpdate+0x1a4>

	case (SENSOR_READ):

		putString("LF:",2,2,SMALL);
 80079e2:	2300      	movs	r3, #0
 80079e4:	2202      	movs	r2, #2
 80079e6:	2102      	movs	r1, #2
 80079e8:	4839      	ldr	r0, [pc, #228]	; (8007ad0 <displayUpdate+0x1e0>)
 80079ea:	f7ff ff19 	bl	8007820 <putString>
		putInt(LFSensor,26,2, SMALL);
 80079ee:	4b39      	ldr	r3, [pc, #228]	; (8007ad4 <displayUpdate+0x1e4>)
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	2300      	movs	r3, #0
 80079f4:	2202      	movs	r2, #2
 80079f6:	211a      	movs	r1, #26
 80079f8:	f7ff ff2a 	bl	8007850 <putInt>

		putString("RF:",76,2,SMALL);
 80079fc:	2300      	movs	r3, #0
 80079fe:	2202      	movs	r2, #2
 8007a00:	214c      	movs	r1, #76	; 0x4c
 8007a02:	4835      	ldr	r0, [pc, #212]	; (8007ad8 <displayUpdate+0x1e8>)
 8007a04:	f7ff ff0c 	bl	8007820 <putString>
		putInt(RFSensor,100,2, SMALL);
 8007a08:	4b34      	ldr	r3, [pc, #208]	; (8007adc <displayUpdate+0x1ec>)
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	2202      	movs	r2, #2
 8007a10:	2164      	movs	r1, #100	; 0x64
 8007a12:	f7ff ff1d 	bl	8007850 <putInt>

		putString("DL:",2,13,SMALL);
 8007a16:	2300      	movs	r3, #0
 8007a18:	220d      	movs	r2, #13
 8007a1a:	2102      	movs	r1, #2
 8007a1c:	4830      	ldr	r0, [pc, #192]	; (8007ae0 <displayUpdate+0x1f0>)
 8007a1e:	f7ff feff 	bl	8007820 <putString>
		putInt(DLSensor,26,13, SMALL);
 8007a22:	4b30      	ldr	r3, [pc, #192]	; (8007ae4 <displayUpdate+0x1f4>)
 8007a24:	6818      	ldr	r0, [r3, #0]
 8007a26:	2300      	movs	r3, #0
 8007a28:	220d      	movs	r2, #13
 8007a2a:	211a      	movs	r1, #26
 8007a2c:	f7ff ff10 	bl	8007850 <putInt>

		putString("DR:",76,13,SMALL);
 8007a30:	2300      	movs	r3, #0
 8007a32:	220d      	movs	r2, #13
 8007a34:	214c      	movs	r1, #76	; 0x4c
 8007a36:	482c      	ldr	r0, [pc, #176]	; (8007ae8 <displayUpdate+0x1f8>)
 8007a38:	f7ff fef2 	bl	8007820 <putString>
		putInt(DRSensor,100,13, SMALL);
 8007a3c:	4b2b      	ldr	r3, [pc, #172]	; (8007aec <displayUpdate+0x1fc>)
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	2300      	movs	r3, #0
 8007a42:	220d      	movs	r2, #13
 8007a44:	2164      	movs	r1, #100	; 0x64
 8007a46:	f7ff ff03 	bl	8007850 <putInt>
		
		putString("ANGLE:",22,24,SMALL);
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	2218      	movs	r2, #24
 8007a4e:	2116      	movs	r1, #22
 8007a50:	4827      	ldr	r0, [pc, #156]	; (8007af0 <displayUpdate+0x200>)
 8007a52:	f7ff fee5 	bl	8007820 <putString>
		putFloat(angle_z,70,22, SMALL);
 8007a56:	4b1d      	ldr	r3, [pc, #116]	; (8007acc <displayUpdate+0x1dc>)
 8007a58:	edd3 7a00 	vldr	s15, [r3]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2116      	movs	r1, #22
 8007a60:	2046      	movs	r0, #70	; 0x46
 8007a62:	eeb0 0a67 	vmov.f32	s0, s15
 8007a66:	f7ff ff17 	bl	8007898 <putFloat>
		break;
 8007a6a:	e013      	b.n	8007a94 <displayUpdate+0x1a4>

	case (LOW_BAT):
		putString("BAT LOW...!",2,7,LARGE);
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	2207      	movs	r2, #7
 8007a70:	2102      	movs	r1, #2
 8007a72:	4820      	ldr	r0, [pc, #128]	; (8007af4 <displayUpdate+0x204>)
 8007a74:	f7ff fed4 	bl	8007820 <putString>
		break;
 8007a78:	e00c      	b.n	8007a94 <displayUpdate+0x1a4>

	case (SUCESS_MSG):
		putString("HURRAYYYY!!!",2,2,LARGE);
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	2102      	movs	r1, #2
 8007a80:	481d      	ldr	r0, [pc, #116]	; (8007af8 <displayUpdate+0x208>)
 8007a82:	f7ff fecd 	bl	8007820 <putString>
		putString("SINDiB na kokka",2,22,SMALL);
 8007a86:	2300      	movs	r3, #0
 8007a88:	2216      	movs	r2, #22
 8007a8a:	2102      	movs	r1, #2
 8007a8c:	481b      	ldr	r0, [pc, #108]	; (8007afc <displayUpdate+0x20c>)
 8007a8e:	f7ff fec7 	bl	8007820 <putString>
		break;
 8007a92:	bf00      	nop
	}
	ssd1306_UpdateScreen();
 8007a94:	f7fa fdb6 	bl	8002604 <ssd1306_UpdateScreen>
	LED6_TOG;
 8007a98:	2104      	movs	r1, #4
 8007a9a:	4819      	ldr	r0, [pc, #100]	; (8007b00 <displayUpdate+0x210>)
 8007a9c:	f7fc f9f3 	bl	8003e86 <HAL_GPIO_TogglePin>
 8007aa0:	bf00      	nop
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	2000088c 	.word	0x2000088c
 8007aac:	0800bd9c 	.word	0x0800bd9c
 8007ab0:	2000089c 	.word	0x2000089c
 8007ab4:	0800bda4 	.word	0x0800bda4
 8007ab8:	0800bdac 	.word	0x0800bdac
 8007abc:	20000844 	.word	0x20000844
 8007ac0:	0800bdb4 	.word	0x0800bdb4
 8007ac4:	20000840 	.word	0x20000840
 8007ac8:	0800bdc0 	.word	0x0800bdc0
 8007acc:	20000834 	.word	0x20000834
 8007ad0:	0800bdc8 	.word	0x0800bdc8
 8007ad4:	200008a0 	.word	0x200008a0
 8007ad8:	0800bdcc 	.word	0x0800bdcc
 8007adc:	200008a4 	.word	0x200008a4
 8007ae0:	0800bdd0 	.word	0x0800bdd0
 8007ae4:	200008a8 	.word	0x200008a8
 8007ae8:	0800bdd4 	.word	0x0800bdd4
 8007aec:	200008ac 	.word	0x200008ac
 8007af0:	0800bdd8 	.word	0x0800bdd8
 8007af4:	0800bde0 	.word	0x0800bde0
 8007af8:	0800bdec 	.word	0x0800bdec
 8007afc:	0800bdfc 	.word	0x0800bdfc
 8007b00:	40020c00 	.word	0x40020c00

08007b04 <encoderInit>:
#include "encoder.h"


// FUCTION: INTIALIZATION OF ENCODER RELATED HARDWARE
void encoderInit(void){
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);   // LEFT ENCODER
 8007b08:	213c      	movs	r1, #60	; 0x3c
 8007b0a:	4805      	ldr	r0, [pc, #20]	; (8007b20 <encoderInit+0x1c>)
 8007b0c:	f7fd ff50 	bl	80059b0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);   // RIGHT ENCODER
 8007b10:	213c      	movs	r1, #60	; 0x3c
 8007b12:	4804      	ldr	r0, [pc, #16]	; (8007b24 <encoderInit+0x20>)
 8007b14:	f7fd ff4c 	bl	80059b0 <HAL_TIM_Encoder_Start>
	resetEncoder();
 8007b18:	f000 f806 	bl	8007b28 <resetEncoder>
}
 8007b1c:	bf00      	nop
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	200003e4 	.word	0x200003e4
 8007b24:	20000474 	.word	0x20000474

08007b28 <resetEncoder>:

void resetEncoder(void){
 8007b28:	b480      	push	{r7}
 8007b2a:	af00      	add	r7, sp, #0
	TIM2->CNT = _ENCODER_START + 1;
 8007b2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b30:	4a04      	ldr	r2, [pc, #16]	; (8007b44 <resetEncoder+0x1c>)
 8007b32:	625a      	str	r2, [r3, #36]	; 0x24
	TIM5->CNT = u32_max-_ENCODER_START;
 8007b34:	4b04      	ldr	r3, [pc, #16]	; (8007b48 <resetEncoder+0x20>)
 8007b36:	4a05      	ldr	r2, [pc, #20]	; (8007b4c <resetEncoder+0x24>)
 8007b38:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007b3a:	bf00      	nop
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	00068db9 	.word	0x00068db9
 8007b48:	40000c00 	.word	0x40000c00
 8007b4c:	fff97246 	.word	0xfff97246

08007b50 <motorInit>:
float l_speed, r_speed;
float st_speed = .5, rt_speed = .3;


void motorInit(void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
	// Start PWM for TIM4 channels (you may need to adjust this based on your application)
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // LPWMA
 8007b54:	2100      	movs	r1, #0
 8007b56:	480d      	ldr	r0, [pc, #52]	; (8007b8c <motorInit+0x3c>)
 8007b58:	f7fd fdbc 	bl	80056d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // LPWMB
 8007b5c:	2104      	movs	r1, #4
 8007b5e:	480b      	ldr	r0, [pc, #44]	; (8007b8c <motorInit+0x3c>)
 8007b60:	f7fd fdb8 	bl	80056d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // RPWMA
 8007b64:	2108      	movs	r1, #8
 8007b66:	4809      	ldr	r0, [pc, #36]	; (8007b8c <motorInit+0x3c>)
 8007b68:	f7fd fdb4 	bl	80056d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // RPWMB
 8007b6c:	210c      	movs	r1, #12
 8007b6e:	4807      	ldr	r0, [pc, #28]	; (8007b8c <motorInit+0x3c>)
 8007b70:	f7fd fdb0 	bl	80056d4 <HAL_TIM_PWM_Start>
	STOP_ROBOT;
 8007b74:	4b06      	ldr	r3, [pc, #24]	; (8007b90 <motorInit+0x40>)
 8007b76:	f04f 0200 	mov.w	r2, #0
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <motorInit+0x44>)
 8007b7e:	f04f 0200 	mov.w	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	f000 f8ec 	bl	8007d60 <setWheels>
}
 8007b88:	bf00      	nop
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	2000042c 	.word	0x2000042c
 8007b90:	20000890 	.word	0x20000890
 8007b94:	20000894 	.word	0x20000894

08007b98 <setLeftWheel>:

void setLeftWheel(float l_speed)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t l_pwma, l_pwmb;

	if (abs(l_speed) > SPEED_THRESHOLD)
 8007ba2:	edd7 7a01 	vldr	s15, [r7, #4]
 8007ba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007baa:	ee17 3a90 	vmov	r3, s15
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	bfb8      	it	lt
 8007bb2:	425b      	neglt	r3, r3
 8007bb4:	ee07 3a90 	vmov	s15, r3
 8007bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bbc:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007c70 <setLeftWheel+0xd8>
 8007bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc8:	dd0f      	ble.n	8007bea <setLeftWheel+0x52>
		l_speed = (l_speed > 0) ? SPEED_THRESHOLD : -SPEED_THRESHOLD;
 8007bca:	edd7 7a01 	vldr	s15, [r7, #4]
 8007bce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd6:	dd02      	ble.n	8007bde <setLeftWheel+0x46>
 8007bd8:	eddf 7a25 	vldr	s15, [pc, #148]	; 8007c70 <setLeftWheel+0xd8>
 8007bdc:	e003      	b.n	8007be6 <setLeftWheel+0x4e>
 8007bde:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007c70 <setLeftWheel+0xd8>
 8007be2:	eef1 7a67 	vneg.f32	s15, s15
 8007be6:	edc7 7a01 	vstr	s15, [r7, #4]

	l_pwma = (l_speed < 0) ? (-l_speed) * u12_max : 0;
 8007bea:	edd7 7a01 	vldr	s15, [r7, #4]
 8007bee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf6:	d511      	bpl.n	8007c1c <setLeftWheel+0x84>
 8007bf8:	edd7 7a01 	vldr	s15, [r7, #4]
 8007bfc:	eeb1 7a67 	vneg.f32	s14, s15
 8007c00:	4b1c      	ldr	r3, [pc, #112]	; (8007c74 <setLeftWheel+0xdc>)
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	ee07 3a90 	vmov	s15, r3
 8007c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c14:	ee17 3a90 	vmov	r3, s15
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	e000      	b.n	8007c1e <setLeftWheel+0x86>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	81fb      	strh	r3, [r7, #14]
	l_pwmb = (l_speed >= 0) ? l_speed * u12_max : 0;
 8007c20:	edd7 7a01 	vldr	s15, [r7, #4]
 8007c24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c2c:	db0f      	blt.n	8007c4e <setLeftWheel+0xb6>
 8007c2e:	4b11      	ldr	r3, [pc, #68]	; (8007c74 <setLeftWheel+0xdc>)
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	ee07 3a90 	vmov	s15, r3
 8007c36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8007c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c46:	ee17 3a90 	vmov	r3, s15
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	e000      	b.n	8007c50 <setLeftWheel+0xb8>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	81bb      	strh	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, l_pwma); // LPWMA
 8007c52:	4b09      	ldr	r3, [pc, #36]	; (8007c78 <setLeftWheel+0xe0>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	89fa      	ldrh	r2, [r7, #14]
 8007c58:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, l_pwmb); // LPWMB
 8007c5a:	4b07      	ldr	r3, [pc, #28]	; (8007c78 <setLeftWheel+0xe0>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	89ba      	ldrh	r2, [r7, #12]
 8007c60:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007c62:	bf00      	nop
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	3f333333 	.word	0x3f333333
 8007c74:	2000003c 	.word	0x2000003c
 8007c78:	2000042c 	.word	0x2000042c

08007c7c <setRightWheel>:

void setRightWheel(float r_speed)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t r_pwma, r_pwmb;

	if (abs(r_speed) > SPEED_THRESHOLD)
 8007c86:	edd7 7a01 	vldr	s15, [r7, #4]
 8007c8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c8e:	ee17 3a90 	vmov	r3, s15
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	bfb8      	it	lt
 8007c96:	425b      	neglt	r3, r3
 8007c98:	ee07 3a90 	vmov	s15, r3
 8007c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ca0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007d54 <setRightWheel+0xd8>
 8007ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cac:	dd0f      	ble.n	8007cce <setRightWheel+0x52>
		r_speed = (r_speed > 0) ? SPEED_THRESHOLD : -SPEED_THRESHOLD;
 8007cae:	edd7 7a01 	vldr	s15, [r7, #4]
 8007cb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cba:	dd02      	ble.n	8007cc2 <setRightWheel+0x46>
 8007cbc:	eddf 7a25 	vldr	s15, [pc, #148]	; 8007d54 <setRightWheel+0xd8>
 8007cc0:	e003      	b.n	8007cca <setRightWheel+0x4e>
 8007cc2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007d54 <setRightWheel+0xd8>
 8007cc6:	eef1 7a67 	vneg.f32	s15, s15
 8007cca:	edc7 7a01 	vstr	s15, [r7, #4]
	r_pwma = (r_speed < 0) ? (-r_speed) * u12_max : 0;
 8007cce:	edd7 7a01 	vldr	s15, [r7, #4]
 8007cd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cda:	d511      	bpl.n	8007d00 <setRightWheel+0x84>
 8007cdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8007ce0:	eeb1 7a67 	vneg.f32	s14, s15
 8007ce4:	4b1c      	ldr	r3, [pc, #112]	; (8007d58 <setRightWheel+0xdc>)
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	ee07 3a90 	vmov	s15, r3
 8007cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cf8:	ee17 3a90 	vmov	r3, s15
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	e000      	b.n	8007d02 <setRightWheel+0x86>
 8007d00:	2300      	movs	r3, #0
 8007d02:	81fb      	strh	r3, [r7, #14]
	r_pwmb = (r_speed >= 0) ? r_speed * u12_max : 0;
 8007d04:	edd7 7a01 	vldr	s15, [r7, #4]
 8007d08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d10:	db0f      	blt.n	8007d32 <setRightWheel+0xb6>
 8007d12:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <setRightWheel+0xdc>)
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	ee07 3a90 	vmov	s15, r3
 8007d1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d2a:	ee17 3a90 	vmov	r3, s15
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	e000      	b.n	8007d34 <setRightWheel+0xb8>
 8007d32:	2300      	movs	r3, #0
 8007d34:	81bb      	strh	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, r_pwma); // RPWMA
 8007d36:	4b09      	ldr	r3, [pc, #36]	; (8007d5c <setRightWheel+0xe0>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	89fa      	ldrh	r2, [r7, #14]
 8007d3c:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, r_pwmb); // RPWMB
 8007d3e:	4b07      	ldr	r3, [pc, #28]	; (8007d5c <setRightWheel+0xe0>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	89ba      	ldrh	r2, [r7, #12]
 8007d44:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007d46:	bf00      	nop
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	3f333333 	.word	0x3f333333
 8007d58:	2000003c 	.word	0x2000003c
 8007d5c:	2000042c 	.word	0x2000042c

08007d60 <setWheels>:

int setWheels()
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
	setRightWheel(r_speed);
 8007d64:	4b08      	ldr	r3, [pc, #32]	; (8007d88 <setWheels+0x28>)
 8007d66:	edd3 7a00 	vldr	s15, [r3]
 8007d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8007d6e:	f7ff ff85 	bl	8007c7c <setRightWheel>
	setLeftWheel(l_speed);
 8007d72:	4b06      	ldr	r3, [pc, #24]	; (8007d8c <setWheels+0x2c>)
 8007d74:	edd3 7a00 	vldr	s15, [r3]
 8007d78:	eeb0 0a67 	vmov.f32	s0, s15
 8007d7c:	f7ff ff0c 	bl	8007b98 <setLeftWheel>
	return 0;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	20000894 	.word	0x20000894
 8007d8c:	20000890 	.word	0x20000890

08007d90 <readSensor>:
bool R = false;
bool F = false;

/*read IR sensors*/
void readSensor(void)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	af00      	add	r7, sp, #0
	LED7_ON;
 8007d94:	2201      	movs	r2, #1
 8007d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d9a:	4877      	ldr	r0, [pc, #476]	; (8007f78 <readSensor+0x1e8>)
 8007d9c:	f7fc f85a 	bl	8003e54 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COUNTER(&htim1,0);
 8007da0:	4b76      	ldr	r3, [pc, #472]	; (8007f7c <readSensor+0x1ec>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2200      	movs	r2, #0
 8007da6:	625a      	str	r2, [r3, #36]	; 0x24
	//read DC value	
	LFSensor = read_LF_Sensor;	
 8007da8:	2101      	movs	r1, #1
 8007daa:	2000      	movs	r0, #0
 8007dac:	f7ff fc8e 	bl	80076cc <readADC>
 8007db0:	4603      	mov	r3, r0
 8007db2:	461a      	mov	r2, r3
 8007db4:	4b72      	ldr	r3, [pc, #456]	; (8007f80 <readSensor+0x1f0>)
 8007db6:	601a      	str	r2, [r3, #0]
	RFSensor = read_RF_Sensor;	
 8007db8:	2101      	movs	r1, #1
 8007dba:	2001      	movs	r0, #1
 8007dbc:	f7ff fc86 	bl	80076cc <readADC>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	4b6f      	ldr	r3, [pc, #444]	; (8007f84 <readSensor+0x1f4>)
 8007dc6:	601a      	str	r2, [r3, #0]
	DLSensor = read_DL_Sensor;
 8007dc8:	2101      	movs	r1, #1
 8007dca:	2003      	movs	r0, #3
 8007dcc:	f7ff fc7e 	bl	80076cc <readADC>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	4b6c      	ldr	r3, [pc, #432]	; (8007f88 <readSensor+0x1f8>)
 8007dd6:	601a      	str	r2, [r3, #0]
	DRSensor = read_DR_Sensor;	
 8007dd8:	2101      	movs	r1, #1
 8007dda:	2002      	movs	r0, #2
 8007ddc:	f7ff fc76 	bl	80076cc <readADC>
 8007de0:	4603      	mov	r3, r0
 8007de2:	461a      	mov	r2, r3
 8007de4:	4b69      	ldr	r3, [pc, #420]	; (8007f8c <readSensor+0x1fc>)
 8007de6:	601a      	str	r2, [r3, #0]
	
	
    //left front sensor
	LF_EM_ON;
 8007de8:	2201      	movs	r2, #1
 8007dea:	2180      	movs	r1, #128	; 0x80
 8007dec:	4868      	ldr	r0, [pc, #416]	; (8007f90 <readSensor+0x200>)
 8007dee:	f7fc f831 	bl	8003e54 <HAL_GPIO_WritePin>
	LFSensor = read_LF_Sensor - LFSensor;
 8007df2:	2101      	movs	r1, #1
 8007df4:	2000      	movs	r0, #0
 8007df6:	f7ff fc69 	bl	80076cc <readADC>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	4b60      	ldr	r3, [pc, #384]	; (8007f80 <readSensor+0x1f0>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	4a5e      	ldr	r2, [pc, #376]	; (8007f80 <readSensor+0x1f0>)
 8007e06:	6013      	str	r3, [r2, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<60);
 8007e08:	bf00      	nop
 8007e0a:	4b5c      	ldr	r3, [pc, #368]	; (8007f7c <readSensor+0x1ec>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	2b3b      	cmp	r3, #59	; 0x3b
 8007e12:	d9fa      	bls.n	8007e0a <readSensor+0x7a>
	LF_EM_OFF;
 8007e14:	2200      	movs	r2, #0
 8007e16:	2180      	movs	r1, #128	; 0x80
 8007e18:	485d      	ldr	r0, [pc, #372]	; (8007f90 <readSensor+0x200>)
 8007e1a:	f7fc f81b 	bl	8003e54 <HAL_GPIO_WritePin>
	if(LFSensor < 0)//error check
 8007e1e:	4b58      	ldr	r3, [pc, #352]	; (8007f80 <readSensor+0x1f0>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	da02      	bge.n	8007e2c <readSensor+0x9c>
		LFSensor = 0;
 8007e26:	4b56      	ldr	r3, [pc, #344]	; (8007f80 <readSensor+0x1f0>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<140);
 8007e2c:	bf00      	nop
 8007e2e:	4b53      	ldr	r3, [pc, #332]	; (8007f7c <readSensor+0x1ec>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	2b8b      	cmp	r3, #139	; 0x8b
 8007e36:	d9fa      	bls.n	8007e2e <readSensor+0x9e>

	//right front sensor
	RF_EM_ON;
 8007e38:	2201      	movs	r2, #1
 8007e3a:	2102      	movs	r1, #2
 8007e3c:	4854      	ldr	r0, [pc, #336]	; (8007f90 <readSensor+0x200>)
 8007e3e:	f7fc f809 	bl	8003e54 <HAL_GPIO_WritePin>
	RFSensor = read_RF_Sensor - RFSensor;
 8007e42:	2101      	movs	r1, #1
 8007e44:	2001      	movs	r0, #1
 8007e46:	f7ff fc41 	bl	80076cc <readADC>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	4b4d      	ldr	r3, [pc, #308]	; (8007f84 <readSensor+0x1f4>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	4a4b      	ldr	r2, [pc, #300]	; (8007f84 <readSensor+0x1f4>)
 8007e56:	6013      	str	r3, [r2, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<200);
 8007e58:	bf00      	nop
 8007e5a:	4b48      	ldr	r3, [pc, #288]	; (8007f7c <readSensor+0x1ec>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	2bc7      	cmp	r3, #199	; 0xc7
 8007e62:	d9fa      	bls.n	8007e5a <readSensor+0xca>
	RF_EM_OFF;
 8007e64:	2200      	movs	r2, #0
 8007e66:	2102      	movs	r1, #2
 8007e68:	4849      	ldr	r0, [pc, #292]	; (8007f90 <readSensor+0x200>)
 8007e6a:	f7fb fff3 	bl	8003e54 <HAL_GPIO_WritePin>
	if(RFSensor < 0)
 8007e6e:	4b45      	ldr	r3, [pc, #276]	; (8007f84 <readSensor+0x1f4>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	da02      	bge.n	8007e7c <readSensor+0xec>
		RFSensor = 0;
 8007e76:	4b43      	ldr	r3, [pc, #268]	; (8007f84 <readSensor+0x1f4>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<280);
 8007e7c:	bf00      	nop
 8007e7e:	4b3f      	ldr	r3, [pc, #252]	; (8007f7c <readSensor+0x1ec>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e84:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8007e88:	d3f9      	bcc.n	8007e7e <readSensor+0xee>

    //diagonal sensors
	SIDE_EM_ON;
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	2120      	movs	r1, #32
 8007e8e:	4840      	ldr	r0, [pc, #256]	; (8007f90 <readSensor+0x200>)
 8007e90:	f7fb ffe0 	bl	8003e54 <HAL_GPIO_WritePin>
	while(__HAL_TIM_GET_COUNTER(&htim1)<340);
 8007e94:	bf00      	nop
 8007e96:	4b39      	ldr	r3, [pc, #228]	; (8007f7c <readSensor+0x1ec>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007ea0:	d3f9      	bcc.n	8007e96 <readSensor+0x106>
	DLSensor = read_DL_Sensor - DLSensor;
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	2003      	movs	r0, #3
 8007ea6:	f7ff fc11 	bl	80076cc <readADC>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	461a      	mov	r2, r3
 8007eae:	4b36      	ldr	r3, [pc, #216]	; (8007f88 <readSensor+0x1f8>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	4a34      	ldr	r2, [pc, #208]	; (8007f88 <readSensor+0x1f8>)
 8007eb6:	6013      	str	r3, [r2, #0]
	DRSensor = read_DR_Sensor - DRSensor;
 8007eb8:	2101      	movs	r1, #1
 8007eba:	2002      	movs	r0, #2
 8007ebc:	f7ff fc06 	bl	80076cc <readADC>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	4b31      	ldr	r3, [pc, #196]	; (8007f8c <readSensor+0x1fc>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	4a30      	ldr	r2, [pc, #192]	; (8007f8c <readSensor+0x1fc>)
 8007ecc:	6013      	str	r3, [r2, #0]
    SIDE_EM_OFF;
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2120      	movs	r1, #32
 8007ed2:	482f      	ldr	r0, [pc, #188]	; (8007f90 <readSensor+0x200>)
 8007ed4:	f7fb ffbe 	bl	8003e54 <HAL_GPIO_WritePin>
	if(DLSensor < 0)
 8007ed8:	4b2b      	ldr	r3, [pc, #172]	; (8007f88 <readSensor+0x1f8>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	da02      	bge.n	8007ee6 <readSensor+0x156>
		DLSensor = 0;
 8007ee0:	4b29      	ldr	r3, [pc, #164]	; (8007f88 <readSensor+0x1f8>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]
	if(DRSensor < 0)
 8007ee6:	4b29      	ldr	r3, [pc, #164]	; (8007f8c <readSensor+0x1fc>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	da02      	bge.n	8007ef4 <readSensor+0x164>
		DRSensor = 0;
 8007eee:	4b27      	ldr	r3, [pc, #156]	; (8007f8c <readSensor+0x1fc>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	601a      	str	r2, [r3, #0]
	// while(__HAL_TIM_GET_COUNTER(&htim1)<500);
	
	readVolMeter();
 8007ef4:	f000 f854 	bl	8007fa0 <readVolMeter>
	
	LFSensor = LFSensor*reflectionRate/1000;
 8007ef8:	4b21      	ldr	r3, [pc, #132]	; (8007f80 <readSensor+0x1f0>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a25      	ldr	r2, [pc, #148]	; (8007f94 <readSensor+0x204>)
 8007efe:	6812      	ldr	r2, [r2, #0]
 8007f00:	fb02 f303 	mul.w	r3, r2, r3
 8007f04:	4a24      	ldr	r2, [pc, #144]	; (8007f98 <readSensor+0x208>)
 8007f06:	fb82 1203 	smull	r1, r2, r2, r3
 8007f0a:	1192      	asrs	r2, r2, #6
 8007f0c:	17db      	asrs	r3, r3, #31
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	4a1b      	ldr	r2, [pc, #108]	; (8007f80 <readSensor+0x1f0>)
 8007f12:	6013      	str	r3, [r2, #0]
	RFSensor = RFSensor*reflectionRate/1000;
 8007f14:	4b1b      	ldr	r3, [pc, #108]	; (8007f84 <readSensor+0x1f4>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a1e      	ldr	r2, [pc, #120]	; (8007f94 <readSensor+0x204>)
 8007f1a:	6812      	ldr	r2, [r2, #0]
 8007f1c:	fb02 f303 	mul.w	r3, r2, r3
 8007f20:	4a1d      	ldr	r2, [pc, #116]	; (8007f98 <readSensor+0x208>)
 8007f22:	fb82 1203 	smull	r1, r2, r2, r3
 8007f26:	1192      	asrs	r2, r2, #6
 8007f28:	17db      	asrs	r3, r3, #31
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	4a15      	ldr	r2, [pc, #84]	; (8007f84 <readSensor+0x1f4>)
 8007f2e:	6013      	str	r3, [r2, #0]
	DLSensor = DLSensor*reflectionRate/1000;
 8007f30:	4b15      	ldr	r3, [pc, #84]	; (8007f88 <readSensor+0x1f8>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a17      	ldr	r2, [pc, #92]	; (8007f94 <readSensor+0x204>)
 8007f36:	6812      	ldr	r2, [r2, #0]
 8007f38:	fb02 f303 	mul.w	r3, r2, r3
 8007f3c:	4a16      	ldr	r2, [pc, #88]	; (8007f98 <readSensor+0x208>)
 8007f3e:	fb82 1203 	smull	r1, r2, r2, r3
 8007f42:	1192      	asrs	r2, r2, #6
 8007f44:	17db      	asrs	r3, r3, #31
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	4a0f      	ldr	r2, [pc, #60]	; (8007f88 <readSensor+0x1f8>)
 8007f4a:	6013      	str	r3, [r2, #0]
	DRSensor = DRSensor*reflectionRate/1000;
 8007f4c:	4b0f      	ldr	r3, [pc, #60]	; (8007f8c <readSensor+0x1fc>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a10      	ldr	r2, [pc, #64]	; (8007f94 <readSensor+0x204>)
 8007f52:	6812      	ldr	r2, [r2, #0]
 8007f54:	fb02 f303 	mul.w	r3, r2, r3
 8007f58:	4a0f      	ldr	r2, [pc, #60]	; (8007f98 <readSensor+0x208>)
 8007f5a:	fb82 1203 	smull	r1, r2, r2, r3
 8007f5e:	1192      	asrs	r2, r2, #6
 8007f60:	17db      	asrs	r3, r3, #31
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	4a09      	ldr	r2, [pc, #36]	; (8007f8c <readSensor+0x1fc>)
 8007f66:	6013      	str	r3, [r2, #0]
	
	LED7_OFF;
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007f6e:	4802      	ldr	r0, [pc, #8]	; (8007f78 <readSensor+0x1e8>)
 8007f70:	f7fb ff70 	bl	8003e54 <HAL_GPIO_WritePin>
}
 8007f74:	bf00      	nop
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	40020000 	.word	0x40020000
 8007f7c:	2000039c 	.word	0x2000039c
 8007f80:	200008a0 	.word	0x200008a0
 8007f84:	200008a4 	.word	0x200008a4
 8007f88:	200008a8 	.word	0x200008a8
 8007f8c:	200008ac 	.word	0x200008ac
 8007f90:	40020800 	.word	0x40020800
 8007f94:	20000048 	.word	0x20000048
 8007f98:	10624dd3 	.word	0x10624dd3
 8007f9c:	00000000 	.word	0x00000000

08007fa0 <readVolMeter>:



/*read voltage meter*/
void readVolMeter(void)
{          //3240 = 7.85V
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	af00      	add	r7, sp, #0
	volMeter = read_Vol_Meter;//raw value
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	2004      	movs	r0, #4
 8007fa8:	f7ff fb90 	bl	80076cc <readADC>
 8007fac:	4603      	mov	r3, r0
 8007fae:	461a      	mov	r2, r3
 8007fb0:	4b1b      	ldr	r3, [pc, #108]	; (8008020 <readVolMeter+0x80>)
 8007fb2:	601a      	str	r2, [r3, #0]
	voltage = (volMeter*ADC_REF_VOL/4095)* 2.8;//actual voltage value  ex) 8.2V = 8200
 8007fb4:	4b1a      	ldr	r3, [pc, #104]	; (8008020 <readVolMeter+0x80>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7f8 fab3 	bl	8000524 <__aeabi_i2d>
 8007fbe:	a312      	add	r3, pc, #72	; (adr r3, 8008008 <readVolMeter+0x68>)
 8007fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc4:	f7f8 fb18 	bl	80005f8 <__aeabi_dmul>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4610      	mov	r0, r2
 8007fce:	4619      	mov	r1, r3
 8007fd0:	a30f      	add	r3, pc, #60	; (adr r3, 8008010 <readVolMeter+0x70>)
 8007fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd6:	f7f8 fc39 	bl	800084c <__aeabi_ddiv>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4610      	mov	r0, r2
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	a30d      	add	r3, pc, #52	; (adr r3, 8008018 <readVolMeter+0x78>)
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	f7f8 fb06 	bl	80005f8 <__aeabi_dmul>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	f7f8 fdd8 	bl	8000ba8 <__aeabi_d2f>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	4a0a      	ldr	r2, [pc, #40]	; (8008024 <readVolMeter+0x84>)
 8007ffc:	6013      	str	r3, [r2, #0]
	// if (voltage<LOW_BAT_TH)
	// 	stop_it_all();
}
 8007ffe:	bf00      	nop
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	f3af 8000 	nop.w
 8008008:	bc6a7efa 	.word	0xbc6a7efa
 800800c:	400a9374 	.word	0x400a9374
 8008010:	00000000 	.word	0x00000000
 8008014:	40affe00 	.word	0x40affe00
 8008018:	66666666 	.word	0x66666666
 800801c:	40066666 	.word	0x40066666
 8008020:	20000898 	.word	0x20000898
 8008024:	2000089c 	.word	0x2000089c

08008028 <cppmain>:
u32 i;
bool buttonPress = false;
int mouseState = 0;

int cppmain(void)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	af00      	add	r7, sp, #0
	initialization_block();
 800802c:	f000 f816 	bl	800805c <initialization_block>
	HAL_Delay(1000);
 8008030:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008034:	f7fa fd52 	bl	8002adc <HAL_Delay>
	// disp_state = SENSOR_READ;

	while (1)
	{
		if (finishMove(POINT_TURN,60))
 8008038:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8008054 <cppmain+0x2c>
 800803c:	2002      	movs	r0, #2
 800803e:	f7ff f8d3 	bl	80071e8 <finishMove>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d0f7      	beq.n	8008038 <cppmain+0x10>
		// {
			// STOP_ROBOT;
		// 	HAL_Delay(3000);
		// }
		i++;
 8008048:	4b03      	ldr	r3, [pc, #12]	; (8008058 <cppmain+0x30>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3301      	adds	r3, #1
 800804e:	4a02      	ldr	r2, [pc, #8]	; (8008058 <cppmain+0x30>)
 8008050:	6013      	str	r3, [r2, #0]
		if (finishMove(POINT_TURN,60))
 8008052:	e7f1      	b.n	8008038 <cppmain+0x10>
 8008054:	42700000 	.word	0x42700000
 8008058:	200008b0 	.word	0x200008b0

0800805c <initialization_block>:
		// HAL_Delay(1);
	}
}

int initialization_block(void)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	af00      	add	r7, sp, #0
	ALL_LED_ON;
 8008060:	2201      	movs	r2, #1
 8008062:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008066:	484a      	ldr	r0, [pc, #296]	; (8008190 <initialization_block+0x134>)
 8008068:	f7fb fef4 	bl	8003e54 <HAL_GPIO_WritePin>
 800806c:	2201      	movs	r2, #1
 800806e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008072:	4847      	ldr	r0, [pc, #284]	; (8008190 <initialization_block+0x134>)
 8008074:	f7fb feee 	bl	8003e54 <HAL_GPIO_WritePin>
 8008078:	2201      	movs	r2, #1
 800807a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800807e:	4845      	ldr	r0, [pc, #276]	; (8008194 <initialization_block+0x138>)
 8008080:	f7fb fee8 	bl	8003e54 <HAL_GPIO_WritePin>
 8008084:	2201      	movs	r2, #1
 8008086:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800808a:	4842      	ldr	r0, [pc, #264]	; (8008194 <initialization_block+0x138>)
 800808c:	f7fb fee2 	bl	8003e54 <HAL_GPIO_WritePin>
 8008090:	2201      	movs	r2, #1
 8008092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008096:	483f      	ldr	r0, [pc, #252]	; (8008194 <initialization_block+0x138>)
 8008098:	f7fb fedc 	bl	8003e54 <HAL_GPIO_WritePin>
 800809c:	2201      	movs	r2, #1
 800809e:	2104      	movs	r1, #4
 80080a0:	483d      	ldr	r0, [pc, #244]	; (8008198 <initialization_block+0x13c>)
 80080a2:	f7fb fed7 	bl	8003e54 <HAL_GPIO_WritePin>
 80080a6:	2201      	movs	r2, #1
 80080a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80080ac:	4838      	ldr	r0, [pc, #224]	; (8008190 <initialization_block+0x134>)
 80080ae:	f7fb fed1 	bl	8003e54 <HAL_GPIO_WritePin>
 80080b2:	2201      	movs	r2, #1
 80080b4:	2110      	movs	r1, #16
 80080b6:	4839      	ldr	r0, [pc, #228]	; (800819c <initialization_block+0x140>)
 80080b8:	f7fb fecc 	bl	8003e54 <HAL_GPIO_WritePin>
 80080bc:	2201      	movs	r2, #1
 80080be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80080c2:	4836      	ldr	r0, [pc, #216]	; (800819c <initialization_block+0x140>)
 80080c4:	f7fb fec6 	bl	8003e54 <HAL_GPIO_WritePin>
 80080c8:	2201      	movs	r2, #1
 80080ca:	2101      	movs	r1, #1
 80080cc:	4831      	ldr	r0, [pc, #196]	; (8008194 <initialization_block+0x138>)
 80080ce:	f7fb fec1 	bl	8003e54 <HAL_GPIO_WritePin>
 80080d2:	2201      	movs	r2, #1
 80080d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80080d8:	4830      	ldr	r0, [pc, #192]	; (800819c <initialization_block+0x140>)
 80080da:	f7fb febb 	bl	8003e54 <HAL_GPIO_WritePin>
	TIM1_START; ////////////////// CRUCIAL PART DON"T OFFFFFFFFFFFFFFFF ///////////////////////////
 80080de:	4830      	ldr	r0, [pc, #192]	; (80081a0 <initialization_block+0x144>)
 80080e0:	f7fd f9c6 	bl	8005470 <HAL_TIM_Base_Start>
	// TIM6_IT_START;

	motorInit();
 80080e4:	f7ff fd34 	bl	8007b50 <motorInit>
	encoderInit();
 80080e8:	f7ff fd0c 	bl	8007b04 <encoderInit>
	gyroInit();
 80080ec:	f7fe fe0a 	bl	8006d04 <gyroInit>
	displayInit();
 80080f0:	f7ff fb44 	bl	800777c <displayInit>
	// buzzerInit();

	ALL_LED_OFF;
 80080f4:	2200      	movs	r2, #0
 80080f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80080fa:	4825      	ldr	r0, [pc, #148]	; (8008190 <initialization_block+0x134>)
 80080fc:	f7fb feaa 	bl	8003e54 <HAL_GPIO_WritePin>
 8008100:	2200      	movs	r2, #0
 8008102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008106:	4822      	ldr	r0, [pc, #136]	; (8008190 <initialization_block+0x134>)
 8008108:	f7fb fea4 	bl	8003e54 <HAL_GPIO_WritePin>
 800810c:	2200      	movs	r2, #0
 800810e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008112:	4820      	ldr	r0, [pc, #128]	; (8008194 <initialization_block+0x138>)
 8008114:	f7fb fe9e 	bl	8003e54 <HAL_GPIO_WritePin>
 8008118:	2200      	movs	r2, #0
 800811a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800811e:	481d      	ldr	r0, [pc, #116]	; (8008194 <initialization_block+0x138>)
 8008120:	f7fb fe98 	bl	8003e54 <HAL_GPIO_WritePin>
 8008124:	2200      	movs	r2, #0
 8008126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800812a:	481a      	ldr	r0, [pc, #104]	; (8008194 <initialization_block+0x138>)
 800812c:	f7fb fe92 	bl	8003e54 <HAL_GPIO_WritePin>
 8008130:	2200      	movs	r2, #0
 8008132:	2104      	movs	r1, #4
 8008134:	4818      	ldr	r0, [pc, #96]	; (8008198 <initialization_block+0x13c>)
 8008136:	f7fb fe8d 	bl	8003e54 <HAL_GPIO_WritePin>
 800813a:	2200      	movs	r2, #0
 800813c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008140:	4813      	ldr	r0, [pc, #76]	; (8008190 <initialization_block+0x134>)
 8008142:	f7fb fe87 	bl	8003e54 <HAL_GPIO_WritePin>
 8008146:	2200      	movs	r2, #0
 8008148:	2110      	movs	r1, #16
 800814a:	4814      	ldr	r0, [pc, #80]	; (800819c <initialization_block+0x140>)
 800814c:	f7fb fe82 	bl	8003e54 <HAL_GPIO_WritePin>
 8008150:	2200      	movs	r2, #0
 8008152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008156:	4811      	ldr	r0, [pc, #68]	; (800819c <initialization_block+0x140>)
 8008158:	f7fb fe7c 	bl	8003e54 <HAL_GPIO_WritePin>
 800815c:	2200      	movs	r2, #0
 800815e:	2101      	movs	r1, #1
 8008160:	480c      	ldr	r0, [pc, #48]	; (8008194 <initialization_block+0x138>)
 8008162:	f7fb fe77 	bl	8003e54 <HAL_GPIO_WritePin>
 8008166:	2200      	movs	r2, #0
 8008168:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800816c:	480b      	ldr	r0, [pc, #44]	; (800819c <initialization_block+0x140>)
 800816e:	f7fb fe71 	bl	8003e54 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8008172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008176:	f7fa fcb1 	bl	8002adc <HAL_Delay>
	gyroCalibration();
 800817a:	f7fe ff4d 	bl	8007018 <gyroCalibration>
	disp_state = DEFAULT;
 800817e:	4b09      	ldr	r3, [pc, #36]	; (80081a4 <initialization_block+0x148>)
 8008180:	2201      	movs	r2, #1
 8008182:	701a      	strb	r2, [r3, #0]
	TIM13_IT_START;
 8008184:	4808      	ldr	r0, [pc, #32]	; (80081a8 <initialization_block+0x14c>)
 8008186:	f7fd f9db 	bl	8005540 <HAL_TIM_Base_Start_IT>

	return 0;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	bd80      	pop	{r7, pc}
 8008190:	40020000 	.word	0x40020000
 8008194:	40020800 	.word	0x40020800
 8008198:	40020c00 	.word	0x40020c00
 800819c:	40020400 	.word	0x40020400
 80081a0:	2000039c 	.word	0x2000039c
 80081a4:	2000088c 	.word	0x2000088c
 80081a8:	2000054c 	.word	0x2000054c

080081ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
	if (htim == &htim14)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a0c      	ldr	r2, [pc, #48]	; (80081e8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d102      	bne.n	80081c2 <HAL_TIM_PeriodElapsedCallback+0x16>
		readSensor();
 80081bc:	f7ff fde8 	bl	8007d90 <readSensor>
	else if (htim == &htim13)
		gyroUpdate(),
			readSensor();
	else if (htim == &htim6)
		displayUpdate();
}
 80081c0:	e00e      	b.n	80081e0 <HAL_TIM_PeriodElapsedCallback+0x34>
	else if (htim == &htim13)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a09      	ldr	r2, [pc, #36]	; (80081ec <HAL_TIM_PeriodElapsedCallback+0x40>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d104      	bne.n	80081d4 <HAL_TIM_PeriodElapsedCallback+0x28>
		gyroUpdate(),
 80081ca:	f7fe fe3d 	bl	8006e48 <gyroUpdate>
			readSensor();
 80081ce:	f7ff fddf 	bl	8007d90 <readSensor>
}
 80081d2:	e005      	b.n	80081e0 <HAL_TIM_PeriodElapsedCallback+0x34>
	else if (htim == &htim6)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a06      	ldr	r2, [pc, #24]	; (80081f0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d101      	bne.n	80081e0 <HAL_TIM_PeriodElapsedCallback+0x34>
		displayUpdate();
 80081dc:	f7ff fb88 	bl	80078f0 <displayUpdate>
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	20000594 	.word	0x20000594
 80081ec:	2000054c 	.word	0x2000054c
 80081f0:	200004bc 	.word	0x200004bc

080081f4 <pow>:
 80081f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f6:	ed2d 8b02 	vpush	{d8}
 80081fa:	eeb0 8a40 	vmov.f32	s16, s0
 80081fe:	eef0 8a60 	vmov.f32	s17, s1
 8008202:	ec55 4b11 	vmov	r4, r5, d1
 8008206:	f000 f873 	bl	80082f0 <__ieee754_pow>
 800820a:	4622      	mov	r2, r4
 800820c:	462b      	mov	r3, r5
 800820e:	4620      	mov	r0, r4
 8008210:	4629      	mov	r1, r5
 8008212:	ec57 6b10 	vmov	r6, r7, d0
 8008216:	f7f8 fc89 	bl	8000b2c <__aeabi_dcmpun>
 800821a:	2800      	cmp	r0, #0
 800821c:	d13b      	bne.n	8008296 <pow+0xa2>
 800821e:	ec51 0b18 	vmov	r0, r1, d8
 8008222:	2200      	movs	r2, #0
 8008224:	2300      	movs	r3, #0
 8008226:	f7f8 fc4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800822a:	b1b8      	cbz	r0, 800825c <pow+0x68>
 800822c:	2200      	movs	r2, #0
 800822e:	2300      	movs	r3, #0
 8008230:	4620      	mov	r0, r4
 8008232:	4629      	mov	r1, r5
 8008234:	f7f8 fc48 	bl	8000ac8 <__aeabi_dcmpeq>
 8008238:	2800      	cmp	r0, #0
 800823a:	d146      	bne.n	80082ca <pow+0xd6>
 800823c:	ec45 4b10 	vmov	d0, r4, r5
 8008240:	f000 f848 	bl	80082d4 <finite>
 8008244:	b338      	cbz	r0, 8008296 <pow+0xa2>
 8008246:	2200      	movs	r2, #0
 8008248:	2300      	movs	r3, #0
 800824a:	4620      	mov	r0, r4
 800824c:	4629      	mov	r1, r5
 800824e:	f7f8 fc45 	bl	8000adc <__aeabi_dcmplt>
 8008252:	b300      	cbz	r0, 8008296 <pow+0xa2>
 8008254:	f001 fe12 	bl	8009e7c <__errno>
 8008258:	2322      	movs	r3, #34	; 0x22
 800825a:	e01b      	b.n	8008294 <pow+0xa0>
 800825c:	ec47 6b10 	vmov	d0, r6, r7
 8008260:	f000 f838 	bl	80082d4 <finite>
 8008264:	b9e0      	cbnz	r0, 80082a0 <pow+0xac>
 8008266:	eeb0 0a48 	vmov.f32	s0, s16
 800826a:	eef0 0a68 	vmov.f32	s1, s17
 800826e:	f000 f831 	bl	80082d4 <finite>
 8008272:	b1a8      	cbz	r0, 80082a0 <pow+0xac>
 8008274:	ec45 4b10 	vmov	d0, r4, r5
 8008278:	f000 f82c 	bl	80082d4 <finite>
 800827c:	b180      	cbz	r0, 80082a0 <pow+0xac>
 800827e:	4632      	mov	r2, r6
 8008280:	463b      	mov	r3, r7
 8008282:	4630      	mov	r0, r6
 8008284:	4639      	mov	r1, r7
 8008286:	f7f8 fc51 	bl	8000b2c <__aeabi_dcmpun>
 800828a:	2800      	cmp	r0, #0
 800828c:	d0e2      	beq.n	8008254 <pow+0x60>
 800828e:	f001 fdf5 	bl	8009e7c <__errno>
 8008292:	2321      	movs	r3, #33	; 0x21
 8008294:	6003      	str	r3, [r0, #0]
 8008296:	ecbd 8b02 	vpop	{d8}
 800829a:	ec47 6b10 	vmov	d0, r6, r7
 800829e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082a0:	2200      	movs	r2, #0
 80082a2:	2300      	movs	r3, #0
 80082a4:	4630      	mov	r0, r6
 80082a6:	4639      	mov	r1, r7
 80082a8:	f7f8 fc0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d0f2      	beq.n	8008296 <pow+0xa2>
 80082b0:	eeb0 0a48 	vmov.f32	s0, s16
 80082b4:	eef0 0a68 	vmov.f32	s1, s17
 80082b8:	f000 f80c 	bl	80082d4 <finite>
 80082bc:	2800      	cmp	r0, #0
 80082be:	d0ea      	beq.n	8008296 <pow+0xa2>
 80082c0:	ec45 4b10 	vmov	d0, r4, r5
 80082c4:	f000 f806 	bl	80082d4 <finite>
 80082c8:	e7c3      	b.n	8008252 <pow+0x5e>
 80082ca:	4f01      	ldr	r7, [pc, #4]	; (80082d0 <pow+0xdc>)
 80082cc:	2600      	movs	r6, #0
 80082ce:	e7e2      	b.n	8008296 <pow+0xa2>
 80082d0:	3ff00000 	.word	0x3ff00000

080082d4 <finite>:
 80082d4:	b082      	sub	sp, #8
 80082d6:	ed8d 0b00 	vstr	d0, [sp]
 80082da:	9801      	ldr	r0, [sp, #4]
 80082dc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80082e0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80082e4:	0fc0      	lsrs	r0, r0, #31
 80082e6:	b002      	add	sp, #8
 80082e8:	4770      	bx	lr
 80082ea:	0000      	movs	r0, r0
 80082ec:	0000      	movs	r0, r0
	...

080082f0 <__ieee754_pow>:
 80082f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f4:	ed2d 8b06 	vpush	{d8-d10}
 80082f8:	b089      	sub	sp, #36	; 0x24
 80082fa:	ed8d 1b00 	vstr	d1, [sp]
 80082fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008302:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008306:	ea58 0102 	orrs.w	r1, r8, r2
 800830a:	ec57 6b10 	vmov	r6, r7, d0
 800830e:	d115      	bne.n	800833c <__ieee754_pow+0x4c>
 8008310:	19b3      	adds	r3, r6, r6
 8008312:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008316:	4152      	adcs	r2, r2
 8008318:	4299      	cmp	r1, r3
 800831a:	4b89      	ldr	r3, [pc, #548]	; (8008540 <__ieee754_pow+0x250>)
 800831c:	4193      	sbcs	r3, r2
 800831e:	f080 84d1 	bcs.w	8008cc4 <__ieee754_pow+0x9d4>
 8008322:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008326:	4630      	mov	r0, r6
 8008328:	4639      	mov	r1, r7
 800832a:	f7f7 ffaf 	bl	800028c <__adddf3>
 800832e:	ec41 0b10 	vmov	d0, r0, r1
 8008332:	b009      	add	sp, #36	; 0x24
 8008334:	ecbd 8b06 	vpop	{d8-d10}
 8008338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833c:	4b81      	ldr	r3, [pc, #516]	; (8008544 <__ieee754_pow+0x254>)
 800833e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008342:	429c      	cmp	r4, r3
 8008344:	ee10 aa10 	vmov	sl, s0
 8008348:	463d      	mov	r5, r7
 800834a:	dc06      	bgt.n	800835a <__ieee754_pow+0x6a>
 800834c:	d101      	bne.n	8008352 <__ieee754_pow+0x62>
 800834e:	2e00      	cmp	r6, #0
 8008350:	d1e7      	bne.n	8008322 <__ieee754_pow+0x32>
 8008352:	4598      	cmp	r8, r3
 8008354:	dc01      	bgt.n	800835a <__ieee754_pow+0x6a>
 8008356:	d10f      	bne.n	8008378 <__ieee754_pow+0x88>
 8008358:	b172      	cbz	r2, 8008378 <__ieee754_pow+0x88>
 800835a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800835e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008362:	ea55 050a 	orrs.w	r5, r5, sl
 8008366:	d1dc      	bne.n	8008322 <__ieee754_pow+0x32>
 8008368:	e9dd 3200 	ldrd	r3, r2, [sp]
 800836c:	18db      	adds	r3, r3, r3
 800836e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008372:	4152      	adcs	r2, r2
 8008374:	429d      	cmp	r5, r3
 8008376:	e7d0      	b.n	800831a <__ieee754_pow+0x2a>
 8008378:	2d00      	cmp	r5, #0
 800837a:	da3b      	bge.n	80083f4 <__ieee754_pow+0x104>
 800837c:	4b72      	ldr	r3, [pc, #456]	; (8008548 <__ieee754_pow+0x258>)
 800837e:	4598      	cmp	r8, r3
 8008380:	dc51      	bgt.n	8008426 <__ieee754_pow+0x136>
 8008382:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008386:	4598      	cmp	r8, r3
 8008388:	f340 84ab 	ble.w	8008ce2 <__ieee754_pow+0x9f2>
 800838c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008390:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008394:	2b14      	cmp	r3, #20
 8008396:	dd0f      	ble.n	80083b8 <__ieee754_pow+0xc8>
 8008398:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800839c:	fa22 f103 	lsr.w	r1, r2, r3
 80083a0:	fa01 f303 	lsl.w	r3, r1, r3
 80083a4:	4293      	cmp	r3, r2
 80083a6:	f040 849c 	bne.w	8008ce2 <__ieee754_pow+0x9f2>
 80083aa:	f001 0101 	and.w	r1, r1, #1
 80083ae:	f1c1 0302 	rsb	r3, r1, #2
 80083b2:	9304      	str	r3, [sp, #16]
 80083b4:	b182      	cbz	r2, 80083d8 <__ieee754_pow+0xe8>
 80083b6:	e05f      	b.n	8008478 <__ieee754_pow+0x188>
 80083b8:	2a00      	cmp	r2, #0
 80083ba:	d15b      	bne.n	8008474 <__ieee754_pow+0x184>
 80083bc:	f1c3 0314 	rsb	r3, r3, #20
 80083c0:	fa48 f103 	asr.w	r1, r8, r3
 80083c4:	fa01 f303 	lsl.w	r3, r1, r3
 80083c8:	4543      	cmp	r3, r8
 80083ca:	f040 8487 	bne.w	8008cdc <__ieee754_pow+0x9ec>
 80083ce:	f001 0101 	and.w	r1, r1, #1
 80083d2:	f1c1 0302 	rsb	r3, r1, #2
 80083d6:	9304      	str	r3, [sp, #16]
 80083d8:	4b5c      	ldr	r3, [pc, #368]	; (800854c <__ieee754_pow+0x25c>)
 80083da:	4598      	cmp	r8, r3
 80083dc:	d132      	bne.n	8008444 <__ieee754_pow+0x154>
 80083de:	f1b9 0f00 	cmp.w	r9, #0
 80083e2:	f280 8477 	bge.w	8008cd4 <__ieee754_pow+0x9e4>
 80083e6:	4959      	ldr	r1, [pc, #356]	; (800854c <__ieee754_pow+0x25c>)
 80083e8:	4632      	mov	r2, r6
 80083ea:	463b      	mov	r3, r7
 80083ec:	2000      	movs	r0, #0
 80083ee:	f7f8 fa2d 	bl	800084c <__aeabi_ddiv>
 80083f2:	e79c      	b.n	800832e <__ieee754_pow+0x3e>
 80083f4:	2300      	movs	r3, #0
 80083f6:	9304      	str	r3, [sp, #16]
 80083f8:	2a00      	cmp	r2, #0
 80083fa:	d13d      	bne.n	8008478 <__ieee754_pow+0x188>
 80083fc:	4b51      	ldr	r3, [pc, #324]	; (8008544 <__ieee754_pow+0x254>)
 80083fe:	4598      	cmp	r8, r3
 8008400:	d1ea      	bne.n	80083d8 <__ieee754_pow+0xe8>
 8008402:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008406:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800840a:	ea53 030a 	orrs.w	r3, r3, sl
 800840e:	f000 8459 	beq.w	8008cc4 <__ieee754_pow+0x9d4>
 8008412:	4b4f      	ldr	r3, [pc, #316]	; (8008550 <__ieee754_pow+0x260>)
 8008414:	429c      	cmp	r4, r3
 8008416:	dd08      	ble.n	800842a <__ieee754_pow+0x13a>
 8008418:	f1b9 0f00 	cmp.w	r9, #0
 800841c:	f2c0 8456 	blt.w	8008ccc <__ieee754_pow+0x9dc>
 8008420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008424:	e783      	b.n	800832e <__ieee754_pow+0x3e>
 8008426:	2302      	movs	r3, #2
 8008428:	e7e5      	b.n	80083f6 <__ieee754_pow+0x106>
 800842a:	f1b9 0f00 	cmp.w	r9, #0
 800842e:	f04f 0000 	mov.w	r0, #0
 8008432:	f04f 0100 	mov.w	r1, #0
 8008436:	f6bf af7a 	bge.w	800832e <__ieee754_pow+0x3e>
 800843a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800843e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008442:	e774      	b.n	800832e <__ieee754_pow+0x3e>
 8008444:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008448:	d106      	bne.n	8008458 <__ieee754_pow+0x168>
 800844a:	4632      	mov	r2, r6
 800844c:	463b      	mov	r3, r7
 800844e:	4630      	mov	r0, r6
 8008450:	4639      	mov	r1, r7
 8008452:	f7f8 f8d1 	bl	80005f8 <__aeabi_dmul>
 8008456:	e76a      	b.n	800832e <__ieee754_pow+0x3e>
 8008458:	4b3e      	ldr	r3, [pc, #248]	; (8008554 <__ieee754_pow+0x264>)
 800845a:	4599      	cmp	r9, r3
 800845c:	d10c      	bne.n	8008478 <__ieee754_pow+0x188>
 800845e:	2d00      	cmp	r5, #0
 8008460:	db0a      	blt.n	8008478 <__ieee754_pow+0x188>
 8008462:	ec47 6b10 	vmov	d0, r6, r7
 8008466:	b009      	add	sp, #36	; 0x24
 8008468:	ecbd 8b06 	vpop	{d8-d10}
 800846c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008470:	f000 bd20 	b.w	8008eb4 <__ieee754_sqrt>
 8008474:	2300      	movs	r3, #0
 8008476:	9304      	str	r3, [sp, #16]
 8008478:	ec47 6b10 	vmov	d0, r6, r7
 800847c:	f000 fc62 	bl	8008d44 <fabs>
 8008480:	ec51 0b10 	vmov	r0, r1, d0
 8008484:	f1ba 0f00 	cmp.w	sl, #0
 8008488:	d129      	bne.n	80084de <__ieee754_pow+0x1ee>
 800848a:	b124      	cbz	r4, 8008496 <__ieee754_pow+0x1a6>
 800848c:	4b2f      	ldr	r3, [pc, #188]	; (800854c <__ieee754_pow+0x25c>)
 800848e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008492:	429a      	cmp	r2, r3
 8008494:	d123      	bne.n	80084de <__ieee754_pow+0x1ee>
 8008496:	f1b9 0f00 	cmp.w	r9, #0
 800849a:	da05      	bge.n	80084a8 <__ieee754_pow+0x1b8>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	2000      	movs	r0, #0
 80084a2:	492a      	ldr	r1, [pc, #168]	; (800854c <__ieee754_pow+0x25c>)
 80084a4:	f7f8 f9d2 	bl	800084c <__aeabi_ddiv>
 80084a8:	2d00      	cmp	r5, #0
 80084aa:	f6bf af40 	bge.w	800832e <__ieee754_pow+0x3e>
 80084ae:	9b04      	ldr	r3, [sp, #16]
 80084b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80084b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80084b8:	431c      	orrs	r4, r3
 80084ba:	d108      	bne.n	80084ce <__ieee754_pow+0x1de>
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4610      	mov	r0, r2
 80084c2:	4619      	mov	r1, r3
 80084c4:	f7f7 fee0 	bl	8000288 <__aeabi_dsub>
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	e78f      	b.n	80083ee <__ieee754_pow+0xfe>
 80084ce:	9b04      	ldr	r3, [sp, #16]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	f47f af2c 	bne.w	800832e <__ieee754_pow+0x3e>
 80084d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084da:	4619      	mov	r1, r3
 80084dc:	e727      	b.n	800832e <__ieee754_pow+0x3e>
 80084de:	0feb      	lsrs	r3, r5, #31
 80084e0:	3b01      	subs	r3, #1
 80084e2:	9306      	str	r3, [sp, #24]
 80084e4:	9a06      	ldr	r2, [sp, #24]
 80084e6:	9b04      	ldr	r3, [sp, #16]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	d102      	bne.n	80084f2 <__ieee754_pow+0x202>
 80084ec:	4632      	mov	r2, r6
 80084ee:	463b      	mov	r3, r7
 80084f0:	e7e6      	b.n	80084c0 <__ieee754_pow+0x1d0>
 80084f2:	4b19      	ldr	r3, [pc, #100]	; (8008558 <__ieee754_pow+0x268>)
 80084f4:	4598      	cmp	r8, r3
 80084f6:	f340 80fb 	ble.w	80086f0 <__ieee754_pow+0x400>
 80084fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80084fe:	4598      	cmp	r8, r3
 8008500:	4b13      	ldr	r3, [pc, #76]	; (8008550 <__ieee754_pow+0x260>)
 8008502:	dd0c      	ble.n	800851e <__ieee754_pow+0x22e>
 8008504:	429c      	cmp	r4, r3
 8008506:	dc0f      	bgt.n	8008528 <__ieee754_pow+0x238>
 8008508:	f1b9 0f00 	cmp.w	r9, #0
 800850c:	da0f      	bge.n	800852e <__ieee754_pow+0x23e>
 800850e:	2000      	movs	r0, #0
 8008510:	b009      	add	sp, #36	; 0x24
 8008512:	ecbd 8b06 	vpop	{d8-d10}
 8008516:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851a:	f000 bcc2 	b.w	8008ea2 <__math_oflow>
 800851e:	429c      	cmp	r4, r3
 8008520:	dbf2      	blt.n	8008508 <__ieee754_pow+0x218>
 8008522:	4b0a      	ldr	r3, [pc, #40]	; (800854c <__ieee754_pow+0x25c>)
 8008524:	429c      	cmp	r4, r3
 8008526:	dd19      	ble.n	800855c <__ieee754_pow+0x26c>
 8008528:	f1b9 0f00 	cmp.w	r9, #0
 800852c:	dcef      	bgt.n	800850e <__ieee754_pow+0x21e>
 800852e:	2000      	movs	r0, #0
 8008530:	b009      	add	sp, #36	; 0x24
 8008532:	ecbd 8b06 	vpop	{d8-d10}
 8008536:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853a:	f000 bca9 	b.w	8008e90 <__math_uflow>
 800853e:	bf00      	nop
 8008540:	fff00000 	.word	0xfff00000
 8008544:	7ff00000 	.word	0x7ff00000
 8008548:	433fffff 	.word	0x433fffff
 800854c:	3ff00000 	.word	0x3ff00000
 8008550:	3fefffff 	.word	0x3fefffff
 8008554:	3fe00000 	.word	0x3fe00000
 8008558:	41e00000 	.word	0x41e00000
 800855c:	4b60      	ldr	r3, [pc, #384]	; (80086e0 <__ieee754_pow+0x3f0>)
 800855e:	2200      	movs	r2, #0
 8008560:	f7f7 fe92 	bl	8000288 <__aeabi_dsub>
 8008564:	a354      	add	r3, pc, #336	; (adr r3, 80086b8 <__ieee754_pow+0x3c8>)
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	4604      	mov	r4, r0
 800856c:	460d      	mov	r5, r1
 800856e:	f7f8 f843 	bl	80005f8 <__aeabi_dmul>
 8008572:	a353      	add	r3, pc, #332	; (adr r3, 80086c0 <__ieee754_pow+0x3d0>)
 8008574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008578:	4606      	mov	r6, r0
 800857a:	460f      	mov	r7, r1
 800857c:	4620      	mov	r0, r4
 800857e:	4629      	mov	r1, r5
 8008580:	f7f8 f83a 	bl	80005f8 <__aeabi_dmul>
 8008584:	4b57      	ldr	r3, [pc, #348]	; (80086e4 <__ieee754_pow+0x3f4>)
 8008586:	4682      	mov	sl, r0
 8008588:	468b      	mov	fp, r1
 800858a:	2200      	movs	r2, #0
 800858c:	4620      	mov	r0, r4
 800858e:	4629      	mov	r1, r5
 8008590:	f7f8 f832 	bl	80005f8 <__aeabi_dmul>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	a14b      	add	r1, pc, #300	; (adr r1, 80086c8 <__ieee754_pow+0x3d8>)
 800859a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800859e:	f7f7 fe73 	bl	8000288 <__aeabi_dsub>
 80085a2:	4622      	mov	r2, r4
 80085a4:	462b      	mov	r3, r5
 80085a6:	f7f8 f827 	bl	80005f8 <__aeabi_dmul>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	2000      	movs	r0, #0
 80085b0:	494d      	ldr	r1, [pc, #308]	; (80086e8 <__ieee754_pow+0x3f8>)
 80085b2:	f7f7 fe69 	bl	8000288 <__aeabi_dsub>
 80085b6:	4622      	mov	r2, r4
 80085b8:	4680      	mov	r8, r0
 80085ba:	4689      	mov	r9, r1
 80085bc:	462b      	mov	r3, r5
 80085be:	4620      	mov	r0, r4
 80085c0:	4629      	mov	r1, r5
 80085c2:	f7f8 f819 	bl	80005f8 <__aeabi_dmul>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	4640      	mov	r0, r8
 80085cc:	4649      	mov	r1, r9
 80085ce:	f7f8 f813 	bl	80005f8 <__aeabi_dmul>
 80085d2:	a33f      	add	r3, pc, #252	; (adr r3, 80086d0 <__ieee754_pow+0x3e0>)
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	f7f8 f80e 	bl	80005f8 <__aeabi_dmul>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	4650      	mov	r0, sl
 80085e2:	4659      	mov	r1, fp
 80085e4:	f7f7 fe50 	bl	8000288 <__aeabi_dsub>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4680      	mov	r8, r0
 80085ee:	4689      	mov	r9, r1
 80085f0:	4630      	mov	r0, r6
 80085f2:	4639      	mov	r1, r7
 80085f4:	f7f7 fe4a 	bl	800028c <__adddf3>
 80085f8:	2000      	movs	r0, #0
 80085fa:	4632      	mov	r2, r6
 80085fc:	463b      	mov	r3, r7
 80085fe:	4604      	mov	r4, r0
 8008600:	460d      	mov	r5, r1
 8008602:	f7f7 fe41 	bl	8000288 <__aeabi_dsub>
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	4640      	mov	r0, r8
 800860c:	4649      	mov	r1, r9
 800860e:	f7f7 fe3b 	bl	8000288 <__aeabi_dsub>
 8008612:	9b04      	ldr	r3, [sp, #16]
 8008614:	9a06      	ldr	r2, [sp, #24]
 8008616:	3b01      	subs	r3, #1
 8008618:	4313      	orrs	r3, r2
 800861a:	4682      	mov	sl, r0
 800861c:	468b      	mov	fp, r1
 800861e:	f040 81e7 	bne.w	80089f0 <__ieee754_pow+0x700>
 8008622:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80086d8 <__ieee754_pow+0x3e8>
 8008626:	eeb0 8a47 	vmov.f32	s16, s14
 800862a:	eef0 8a67 	vmov.f32	s17, s15
 800862e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008632:	2600      	movs	r6, #0
 8008634:	4632      	mov	r2, r6
 8008636:	463b      	mov	r3, r7
 8008638:	e9dd 0100 	ldrd	r0, r1, [sp]
 800863c:	f7f7 fe24 	bl	8000288 <__aeabi_dsub>
 8008640:	4622      	mov	r2, r4
 8008642:	462b      	mov	r3, r5
 8008644:	f7f7 ffd8 	bl	80005f8 <__aeabi_dmul>
 8008648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800864c:	4680      	mov	r8, r0
 800864e:	4689      	mov	r9, r1
 8008650:	4650      	mov	r0, sl
 8008652:	4659      	mov	r1, fp
 8008654:	f7f7 ffd0 	bl	80005f8 <__aeabi_dmul>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	4640      	mov	r0, r8
 800865e:	4649      	mov	r1, r9
 8008660:	f7f7 fe14 	bl	800028c <__adddf3>
 8008664:	4632      	mov	r2, r6
 8008666:	463b      	mov	r3, r7
 8008668:	4680      	mov	r8, r0
 800866a:	4689      	mov	r9, r1
 800866c:	4620      	mov	r0, r4
 800866e:	4629      	mov	r1, r5
 8008670:	f7f7 ffc2 	bl	80005f8 <__aeabi_dmul>
 8008674:	460b      	mov	r3, r1
 8008676:	4604      	mov	r4, r0
 8008678:	460d      	mov	r5, r1
 800867a:	4602      	mov	r2, r0
 800867c:	4649      	mov	r1, r9
 800867e:	4640      	mov	r0, r8
 8008680:	f7f7 fe04 	bl	800028c <__adddf3>
 8008684:	4b19      	ldr	r3, [pc, #100]	; (80086ec <__ieee754_pow+0x3fc>)
 8008686:	4299      	cmp	r1, r3
 8008688:	ec45 4b19 	vmov	d9, r4, r5
 800868c:	4606      	mov	r6, r0
 800868e:	460f      	mov	r7, r1
 8008690:	468b      	mov	fp, r1
 8008692:	f340 82f0 	ble.w	8008c76 <__ieee754_pow+0x986>
 8008696:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800869a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800869e:	4303      	orrs	r3, r0
 80086a0:	f000 81e4 	beq.w	8008a6c <__ieee754_pow+0x77c>
 80086a4:	ec51 0b18 	vmov	r0, r1, d8
 80086a8:	2200      	movs	r2, #0
 80086aa:	2300      	movs	r3, #0
 80086ac:	f7f8 fa16 	bl	8000adc <__aeabi_dcmplt>
 80086b0:	3800      	subs	r0, #0
 80086b2:	bf18      	it	ne
 80086b4:	2001      	movne	r0, #1
 80086b6:	e72b      	b.n	8008510 <__ieee754_pow+0x220>
 80086b8:	60000000 	.word	0x60000000
 80086bc:	3ff71547 	.word	0x3ff71547
 80086c0:	f85ddf44 	.word	0xf85ddf44
 80086c4:	3e54ae0b 	.word	0x3e54ae0b
 80086c8:	55555555 	.word	0x55555555
 80086cc:	3fd55555 	.word	0x3fd55555
 80086d0:	652b82fe 	.word	0x652b82fe
 80086d4:	3ff71547 	.word	0x3ff71547
 80086d8:	00000000 	.word	0x00000000
 80086dc:	bff00000 	.word	0xbff00000
 80086e0:	3ff00000 	.word	0x3ff00000
 80086e4:	3fd00000 	.word	0x3fd00000
 80086e8:	3fe00000 	.word	0x3fe00000
 80086ec:	408fffff 	.word	0x408fffff
 80086f0:	4bd5      	ldr	r3, [pc, #852]	; (8008a48 <__ieee754_pow+0x758>)
 80086f2:	402b      	ands	r3, r5
 80086f4:	2200      	movs	r2, #0
 80086f6:	b92b      	cbnz	r3, 8008704 <__ieee754_pow+0x414>
 80086f8:	4bd4      	ldr	r3, [pc, #848]	; (8008a4c <__ieee754_pow+0x75c>)
 80086fa:	f7f7 ff7d 	bl	80005f8 <__aeabi_dmul>
 80086fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008702:	460c      	mov	r4, r1
 8008704:	1523      	asrs	r3, r4, #20
 8008706:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800870a:	4413      	add	r3, r2
 800870c:	9305      	str	r3, [sp, #20]
 800870e:	4bd0      	ldr	r3, [pc, #832]	; (8008a50 <__ieee754_pow+0x760>)
 8008710:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008714:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008718:	429c      	cmp	r4, r3
 800871a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800871e:	dd08      	ble.n	8008732 <__ieee754_pow+0x442>
 8008720:	4bcc      	ldr	r3, [pc, #816]	; (8008a54 <__ieee754_pow+0x764>)
 8008722:	429c      	cmp	r4, r3
 8008724:	f340 8162 	ble.w	80089ec <__ieee754_pow+0x6fc>
 8008728:	9b05      	ldr	r3, [sp, #20]
 800872a:	3301      	adds	r3, #1
 800872c:	9305      	str	r3, [sp, #20]
 800872e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008732:	2400      	movs	r4, #0
 8008734:	00e3      	lsls	r3, r4, #3
 8008736:	9307      	str	r3, [sp, #28]
 8008738:	4bc7      	ldr	r3, [pc, #796]	; (8008a58 <__ieee754_pow+0x768>)
 800873a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800873e:	ed93 7b00 	vldr	d7, [r3]
 8008742:	4629      	mov	r1, r5
 8008744:	ec53 2b17 	vmov	r2, r3, d7
 8008748:	eeb0 9a47 	vmov.f32	s18, s14
 800874c:	eef0 9a67 	vmov.f32	s19, s15
 8008750:	4682      	mov	sl, r0
 8008752:	f7f7 fd99 	bl	8000288 <__aeabi_dsub>
 8008756:	4652      	mov	r2, sl
 8008758:	4606      	mov	r6, r0
 800875a:	460f      	mov	r7, r1
 800875c:	462b      	mov	r3, r5
 800875e:	ec51 0b19 	vmov	r0, r1, d9
 8008762:	f7f7 fd93 	bl	800028c <__adddf3>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	2000      	movs	r0, #0
 800876c:	49bb      	ldr	r1, [pc, #748]	; (8008a5c <__ieee754_pow+0x76c>)
 800876e:	f7f8 f86d 	bl	800084c <__aeabi_ddiv>
 8008772:	ec41 0b1a 	vmov	d10, r0, r1
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	4630      	mov	r0, r6
 800877c:	4639      	mov	r1, r7
 800877e:	f7f7 ff3b 	bl	80005f8 <__aeabi_dmul>
 8008782:	2300      	movs	r3, #0
 8008784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008788:	9302      	str	r3, [sp, #8]
 800878a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800878e:	46ab      	mov	fp, r5
 8008790:	106d      	asrs	r5, r5, #1
 8008792:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008796:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800879a:	ec41 0b18 	vmov	d8, r0, r1
 800879e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80087a2:	2200      	movs	r2, #0
 80087a4:	4640      	mov	r0, r8
 80087a6:	4649      	mov	r1, r9
 80087a8:	4614      	mov	r4, r2
 80087aa:	461d      	mov	r5, r3
 80087ac:	f7f7 ff24 	bl	80005f8 <__aeabi_dmul>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	4630      	mov	r0, r6
 80087b6:	4639      	mov	r1, r7
 80087b8:	f7f7 fd66 	bl	8000288 <__aeabi_dsub>
 80087bc:	ec53 2b19 	vmov	r2, r3, d9
 80087c0:	4606      	mov	r6, r0
 80087c2:	460f      	mov	r7, r1
 80087c4:	4620      	mov	r0, r4
 80087c6:	4629      	mov	r1, r5
 80087c8:	f7f7 fd5e 	bl	8000288 <__aeabi_dsub>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	4650      	mov	r0, sl
 80087d2:	4659      	mov	r1, fp
 80087d4:	f7f7 fd58 	bl	8000288 <__aeabi_dsub>
 80087d8:	4642      	mov	r2, r8
 80087da:	464b      	mov	r3, r9
 80087dc:	f7f7 ff0c 	bl	80005f8 <__aeabi_dmul>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	4630      	mov	r0, r6
 80087e6:	4639      	mov	r1, r7
 80087e8:	f7f7 fd4e 	bl	8000288 <__aeabi_dsub>
 80087ec:	ec53 2b1a 	vmov	r2, r3, d10
 80087f0:	f7f7 ff02 	bl	80005f8 <__aeabi_dmul>
 80087f4:	ec53 2b18 	vmov	r2, r3, d8
 80087f8:	ec41 0b19 	vmov	d9, r0, r1
 80087fc:	ec51 0b18 	vmov	r0, r1, d8
 8008800:	f7f7 fefa 	bl	80005f8 <__aeabi_dmul>
 8008804:	a37c      	add	r3, pc, #496	; (adr r3, 80089f8 <__ieee754_pow+0x708>)
 8008806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880a:	4604      	mov	r4, r0
 800880c:	460d      	mov	r5, r1
 800880e:	f7f7 fef3 	bl	80005f8 <__aeabi_dmul>
 8008812:	a37b      	add	r3, pc, #492	; (adr r3, 8008a00 <__ieee754_pow+0x710>)
 8008814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008818:	f7f7 fd38 	bl	800028c <__adddf3>
 800881c:	4622      	mov	r2, r4
 800881e:	462b      	mov	r3, r5
 8008820:	f7f7 feea 	bl	80005f8 <__aeabi_dmul>
 8008824:	a378      	add	r3, pc, #480	; (adr r3, 8008a08 <__ieee754_pow+0x718>)
 8008826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882a:	f7f7 fd2f 	bl	800028c <__adddf3>
 800882e:	4622      	mov	r2, r4
 8008830:	462b      	mov	r3, r5
 8008832:	f7f7 fee1 	bl	80005f8 <__aeabi_dmul>
 8008836:	a376      	add	r3, pc, #472	; (adr r3, 8008a10 <__ieee754_pow+0x720>)
 8008838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883c:	f7f7 fd26 	bl	800028c <__adddf3>
 8008840:	4622      	mov	r2, r4
 8008842:	462b      	mov	r3, r5
 8008844:	f7f7 fed8 	bl	80005f8 <__aeabi_dmul>
 8008848:	a373      	add	r3, pc, #460	; (adr r3, 8008a18 <__ieee754_pow+0x728>)
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	f7f7 fd1d 	bl	800028c <__adddf3>
 8008852:	4622      	mov	r2, r4
 8008854:	462b      	mov	r3, r5
 8008856:	f7f7 fecf 	bl	80005f8 <__aeabi_dmul>
 800885a:	a371      	add	r3, pc, #452	; (adr r3, 8008a20 <__ieee754_pow+0x730>)
 800885c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008860:	f7f7 fd14 	bl	800028c <__adddf3>
 8008864:	4622      	mov	r2, r4
 8008866:	4606      	mov	r6, r0
 8008868:	460f      	mov	r7, r1
 800886a:	462b      	mov	r3, r5
 800886c:	4620      	mov	r0, r4
 800886e:	4629      	mov	r1, r5
 8008870:	f7f7 fec2 	bl	80005f8 <__aeabi_dmul>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	4630      	mov	r0, r6
 800887a:	4639      	mov	r1, r7
 800887c:	f7f7 febc 	bl	80005f8 <__aeabi_dmul>
 8008880:	4642      	mov	r2, r8
 8008882:	4604      	mov	r4, r0
 8008884:	460d      	mov	r5, r1
 8008886:	464b      	mov	r3, r9
 8008888:	ec51 0b18 	vmov	r0, r1, d8
 800888c:	f7f7 fcfe 	bl	800028c <__adddf3>
 8008890:	ec53 2b19 	vmov	r2, r3, d9
 8008894:	f7f7 feb0 	bl	80005f8 <__aeabi_dmul>
 8008898:	4622      	mov	r2, r4
 800889a:	462b      	mov	r3, r5
 800889c:	f7f7 fcf6 	bl	800028c <__adddf3>
 80088a0:	4642      	mov	r2, r8
 80088a2:	4682      	mov	sl, r0
 80088a4:	468b      	mov	fp, r1
 80088a6:	464b      	mov	r3, r9
 80088a8:	4640      	mov	r0, r8
 80088aa:	4649      	mov	r1, r9
 80088ac:	f7f7 fea4 	bl	80005f8 <__aeabi_dmul>
 80088b0:	4b6b      	ldr	r3, [pc, #428]	; (8008a60 <__ieee754_pow+0x770>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	4606      	mov	r6, r0
 80088b6:	460f      	mov	r7, r1
 80088b8:	f7f7 fce8 	bl	800028c <__adddf3>
 80088bc:	4652      	mov	r2, sl
 80088be:	465b      	mov	r3, fp
 80088c0:	f7f7 fce4 	bl	800028c <__adddf3>
 80088c4:	2000      	movs	r0, #0
 80088c6:	4604      	mov	r4, r0
 80088c8:	460d      	mov	r5, r1
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	4640      	mov	r0, r8
 80088d0:	4649      	mov	r1, r9
 80088d2:	f7f7 fe91 	bl	80005f8 <__aeabi_dmul>
 80088d6:	4b62      	ldr	r3, [pc, #392]	; (8008a60 <__ieee754_pow+0x770>)
 80088d8:	4680      	mov	r8, r0
 80088da:	4689      	mov	r9, r1
 80088dc:	2200      	movs	r2, #0
 80088de:	4620      	mov	r0, r4
 80088e0:	4629      	mov	r1, r5
 80088e2:	f7f7 fcd1 	bl	8000288 <__aeabi_dsub>
 80088e6:	4632      	mov	r2, r6
 80088e8:	463b      	mov	r3, r7
 80088ea:	f7f7 fccd 	bl	8000288 <__aeabi_dsub>
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	4650      	mov	r0, sl
 80088f4:	4659      	mov	r1, fp
 80088f6:	f7f7 fcc7 	bl	8000288 <__aeabi_dsub>
 80088fa:	ec53 2b18 	vmov	r2, r3, d8
 80088fe:	f7f7 fe7b 	bl	80005f8 <__aeabi_dmul>
 8008902:	4622      	mov	r2, r4
 8008904:	4606      	mov	r6, r0
 8008906:	460f      	mov	r7, r1
 8008908:	462b      	mov	r3, r5
 800890a:	ec51 0b19 	vmov	r0, r1, d9
 800890e:	f7f7 fe73 	bl	80005f8 <__aeabi_dmul>
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	4630      	mov	r0, r6
 8008918:	4639      	mov	r1, r7
 800891a:	f7f7 fcb7 	bl	800028c <__adddf3>
 800891e:	4606      	mov	r6, r0
 8008920:	460f      	mov	r7, r1
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	4640      	mov	r0, r8
 8008928:	4649      	mov	r1, r9
 800892a:	f7f7 fcaf 	bl	800028c <__adddf3>
 800892e:	a33e      	add	r3, pc, #248	; (adr r3, 8008a28 <__ieee754_pow+0x738>)
 8008930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008934:	2000      	movs	r0, #0
 8008936:	4604      	mov	r4, r0
 8008938:	460d      	mov	r5, r1
 800893a:	f7f7 fe5d 	bl	80005f8 <__aeabi_dmul>
 800893e:	4642      	mov	r2, r8
 8008940:	ec41 0b18 	vmov	d8, r0, r1
 8008944:	464b      	mov	r3, r9
 8008946:	4620      	mov	r0, r4
 8008948:	4629      	mov	r1, r5
 800894a:	f7f7 fc9d 	bl	8000288 <__aeabi_dsub>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	4630      	mov	r0, r6
 8008954:	4639      	mov	r1, r7
 8008956:	f7f7 fc97 	bl	8000288 <__aeabi_dsub>
 800895a:	a335      	add	r3, pc, #212	; (adr r3, 8008a30 <__ieee754_pow+0x740>)
 800895c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008960:	f7f7 fe4a 	bl	80005f8 <__aeabi_dmul>
 8008964:	a334      	add	r3, pc, #208	; (adr r3, 8008a38 <__ieee754_pow+0x748>)
 8008966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896a:	4606      	mov	r6, r0
 800896c:	460f      	mov	r7, r1
 800896e:	4620      	mov	r0, r4
 8008970:	4629      	mov	r1, r5
 8008972:	f7f7 fe41 	bl	80005f8 <__aeabi_dmul>
 8008976:	4602      	mov	r2, r0
 8008978:	460b      	mov	r3, r1
 800897a:	4630      	mov	r0, r6
 800897c:	4639      	mov	r1, r7
 800897e:	f7f7 fc85 	bl	800028c <__adddf3>
 8008982:	9a07      	ldr	r2, [sp, #28]
 8008984:	4b37      	ldr	r3, [pc, #220]	; (8008a64 <__ieee754_pow+0x774>)
 8008986:	4413      	add	r3, r2
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	f7f7 fc7e 	bl	800028c <__adddf3>
 8008990:	4682      	mov	sl, r0
 8008992:	9805      	ldr	r0, [sp, #20]
 8008994:	468b      	mov	fp, r1
 8008996:	f7f7 fdc5 	bl	8000524 <__aeabi_i2d>
 800899a:	9a07      	ldr	r2, [sp, #28]
 800899c:	4b32      	ldr	r3, [pc, #200]	; (8008a68 <__ieee754_pow+0x778>)
 800899e:	4413      	add	r3, r2
 80089a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089a4:	4606      	mov	r6, r0
 80089a6:	460f      	mov	r7, r1
 80089a8:	4652      	mov	r2, sl
 80089aa:	465b      	mov	r3, fp
 80089ac:	ec51 0b18 	vmov	r0, r1, d8
 80089b0:	f7f7 fc6c 	bl	800028c <__adddf3>
 80089b4:	4642      	mov	r2, r8
 80089b6:	464b      	mov	r3, r9
 80089b8:	f7f7 fc68 	bl	800028c <__adddf3>
 80089bc:	4632      	mov	r2, r6
 80089be:	463b      	mov	r3, r7
 80089c0:	f7f7 fc64 	bl	800028c <__adddf3>
 80089c4:	2000      	movs	r0, #0
 80089c6:	4632      	mov	r2, r6
 80089c8:	463b      	mov	r3, r7
 80089ca:	4604      	mov	r4, r0
 80089cc:	460d      	mov	r5, r1
 80089ce:	f7f7 fc5b 	bl	8000288 <__aeabi_dsub>
 80089d2:	4642      	mov	r2, r8
 80089d4:	464b      	mov	r3, r9
 80089d6:	f7f7 fc57 	bl	8000288 <__aeabi_dsub>
 80089da:	ec53 2b18 	vmov	r2, r3, d8
 80089de:	f7f7 fc53 	bl	8000288 <__aeabi_dsub>
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	4650      	mov	r0, sl
 80089e8:	4659      	mov	r1, fp
 80089ea:	e610      	b.n	800860e <__ieee754_pow+0x31e>
 80089ec:	2401      	movs	r4, #1
 80089ee:	e6a1      	b.n	8008734 <__ieee754_pow+0x444>
 80089f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008a40 <__ieee754_pow+0x750>
 80089f4:	e617      	b.n	8008626 <__ieee754_pow+0x336>
 80089f6:	bf00      	nop
 80089f8:	4a454eef 	.word	0x4a454eef
 80089fc:	3fca7e28 	.word	0x3fca7e28
 8008a00:	93c9db65 	.word	0x93c9db65
 8008a04:	3fcd864a 	.word	0x3fcd864a
 8008a08:	a91d4101 	.word	0xa91d4101
 8008a0c:	3fd17460 	.word	0x3fd17460
 8008a10:	518f264d 	.word	0x518f264d
 8008a14:	3fd55555 	.word	0x3fd55555
 8008a18:	db6fabff 	.word	0xdb6fabff
 8008a1c:	3fdb6db6 	.word	0x3fdb6db6
 8008a20:	33333303 	.word	0x33333303
 8008a24:	3fe33333 	.word	0x3fe33333
 8008a28:	e0000000 	.word	0xe0000000
 8008a2c:	3feec709 	.word	0x3feec709
 8008a30:	dc3a03fd 	.word	0xdc3a03fd
 8008a34:	3feec709 	.word	0x3feec709
 8008a38:	145b01f5 	.word	0x145b01f5
 8008a3c:	be3e2fe0 	.word	0xbe3e2fe0
 8008a40:	00000000 	.word	0x00000000
 8008a44:	3ff00000 	.word	0x3ff00000
 8008a48:	7ff00000 	.word	0x7ff00000
 8008a4c:	43400000 	.word	0x43400000
 8008a50:	0003988e 	.word	0x0003988e
 8008a54:	000bb679 	.word	0x000bb679
 8008a58:	0800eab8 	.word	0x0800eab8
 8008a5c:	3ff00000 	.word	0x3ff00000
 8008a60:	40080000 	.word	0x40080000
 8008a64:	0800ead8 	.word	0x0800ead8
 8008a68:	0800eac8 	.word	0x0800eac8
 8008a6c:	a3b3      	add	r3, pc, #716	; (adr r3, 8008d3c <__ieee754_pow+0xa4c>)
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	4640      	mov	r0, r8
 8008a74:	4649      	mov	r1, r9
 8008a76:	f7f7 fc09 	bl	800028c <__adddf3>
 8008a7a:	4622      	mov	r2, r4
 8008a7c:	ec41 0b1a 	vmov	d10, r0, r1
 8008a80:	462b      	mov	r3, r5
 8008a82:	4630      	mov	r0, r6
 8008a84:	4639      	mov	r1, r7
 8008a86:	f7f7 fbff 	bl	8000288 <__aeabi_dsub>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	ec51 0b1a 	vmov	r0, r1, d10
 8008a92:	f7f8 f841 	bl	8000b18 <__aeabi_dcmpgt>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	f47f ae04 	bne.w	80086a4 <__ieee754_pow+0x3b4>
 8008a9c:	4aa2      	ldr	r2, [pc, #648]	; (8008d28 <__ieee754_pow+0xa38>)
 8008a9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	f340 8107 	ble.w	8008cb6 <__ieee754_pow+0x9c6>
 8008aa8:	151b      	asrs	r3, r3, #20
 8008aaa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008aae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008ab2:	fa4a fa03 	asr.w	sl, sl, r3
 8008ab6:	44da      	add	sl, fp
 8008ab8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008abc:	489b      	ldr	r0, [pc, #620]	; (8008d2c <__ieee754_pow+0xa3c>)
 8008abe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008ac2:	4108      	asrs	r0, r1
 8008ac4:	ea00 030a 	and.w	r3, r0, sl
 8008ac8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008acc:	f1c1 0114 	rsb	r1, r1, #20
 8008ad0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008ad4:	fa4a fa01 	asr.w	sl, sl, r1
 8008ad8:	f1bb 0f00 	cmp.w	fp, #0
 8008adc:	f04f 0200 	mov.w	r2, #0
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	bfb8      	it	lt
 8008ae6:	f1ca 0a00 	rsblt	sl, sl, #0
 8008aea:	f7f7 fbcd 	bl	8000288 <__aeabi_dsub>
 8008aee:	ec41 0b19 	vmov	d9, r0, r1
 8008af2:	4642      	mov	r2, r8
 8008af4:	464b      	mov	r3, r9
 8008af6:	ec51 0b19 	vmov	r0, r1, d9
 8008afa:	f7f7 fbc7 	bl	800028c <__adddf3>
 8008afe:	a37a      	add	r3, pc, #488	; (adr r3, 8008ce8 <__ieee754_pow+0x9f8>)
 8008b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b04:	2000      	movs	r0, #0
 8008b06:	4604      	mov	r4, r0
 8008b08:	460d      	mov	r5, r1
 8008b0a:	f7f7 fd75 	bl	80005f8 <__aeabi_dmul>
 8008b0e:	ec53 2b19 	vmov	r2, r3, d9
 8008b12:	4606      	mov	r6, r0
 8008b14:	460f      	mov	r7, r1
 8008b16:	4620      	mov	r0, r4
 8008b18:	4629      	mov	r1, r5
 8008b1a:	f7f7 fbb5 	bl	8000288 <__aeabi_dsub>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4640      	mov	r0, r8
 8008b24:	4649      	mov	r1, r9
 8008b26:	f7f7 fbaf 	bl	8000288 <__aeabi_dsub>
 8008b2a:	a371      	add	r3, pc, #452	; (adr r3, 8008cf0 <__ieee754_pow+0xa00>)
 8008b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b30:	f7f7 fd62 	bl	80005f8 <__aeabi_dmul>
 8008b34:	a370      	add	r3, pc, #448	; (adr r3, 8008cf8 <__ieee754_pow+0xa08>)
 8008b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3a:	4680      	mov	r8, r0
 8008b3c:	4689      	mov	r9, r1
 8008b3e:	4620      	mov	r0, r4
 8008b40:	4629      	mov	r1, r5
 8008b42:	f7f7 fd59 	bl	80005f8 <__aeabi_dmul>
 8008b46:	4602      	mov	r2, r0
 8008b48:	460b      	mov	r3, r1
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	4649      	mov	r1, r9
 8008b4e:	f7f7 fb9d 	bl	800028c <__adddf3>
 8008b52:	4604      	mov	r4, r0
 8008b54:	460d      	mov	r5, r1
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	4639      	mov	r1, r7
 8008b5e:	f7f7 fb95 	bl	800028c <__adddf3>
 8008b62:	4632      	mov	r2, r6
 8008b64:	463b      	mov	r3, r7
 8008b66:	4680      	mov	r8, r0
 8008b68:	4689      	mov	r9, r1
 8008b6a:	f7f7 fb8d 	bl	8000288 <__aeabi_dsub>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	460b      	mov	r3, r1
 8008b72:	4620      	mov	r0, r4
 8008b74:	4629      	mov	r1, r5
 8008b76:	f7f7 fb87 	bl	8000288 <__aeabi_dsub>
 8008b7a:	4642      	mov	r2, r8
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	460f      	mov	r7, r1
 8008b80:	464b      	mov	r3, r9
 8008b82:	4640      	mov	r0, r8
 8008b84:	4649      	mov	r1, r9
 8008b86:	f7f7 fd37 	bl	80005f8 <__aeabi_dmul>
 8008b8a:	a35d      	add	r3, pc, #372	; (adr r3, 8008d00 <__ieee754_pow+0xa10>)
 8008b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b90:	4604      	mov	r4, r0
 8008b92:	460d      	mov	r5, r1
 8008b94:	f7f7 fd30 	bl	80005f8 <__aeabi_dmul>
 8008b98:	a35b      	add	r3, pc, #364	; (adr r3, 8008d08 <__ieee754_pow+0xa18>)
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	f7f7 fb73 	bl	8000288 <__aeabi_dsub>
 8008ba2:	4622      	mov	r2, r4
 8008ba4:	462b      	mov	r3, r5
 8008ba6:	f7f7 fd27 	bl	80005f8 <__aeabi_dmul>
 8008baa:	a359      	add	r3, pc, #356	; (adr r3, 8008d10 <__ieee754_pow+0xa20>)
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	f7f7 fb6c 	bl	800028c <__adddf3>
 8008bb4:	4622      	mov	r2, r4
 8008bb6:	462b      	mov	r3, r5
 8008bb8:	f7f7 fd1e 	bl	80005f8 <__aeabi_dmul>
 8008bbc:	a356      	add	r3, pc, #344	; (adr r3, 8008d18 <__ieee754_pow+0xa28>)
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	f7f7 fb61 	bl	8000288 <__aeabi_dsub>
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	462b      	mov	r3, r5
 8008bca:	f7f7 fd15 	bl	80005f8 <__aeabi_dmul>
 8008bce:	a354      	add	r3, pc, #336	; (adr r3, 8008d20 <__ieee754_pow+0xa30>)
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	f7f7 fb5a 	bl	800028c <__adddf3>
 8008bd8:	4622      	mov	r2, r4
 8008bda:	462b      	mov	r3, r5
 8008bdc:	f7f7 fd0c 	bl	80005f8 <__aeabi_dmul>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4640      	mov	r0, r8
 8008be6:	4649      	mov	r1, r9
 8008be8:	f7f7 fb4e 	bl	8000288 <__aeabi_dsub>
 8008bec:	4604      	mov	r4, r0
 8008bee:	460d      	mov	r5, r1
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	4640      	mov	r0, r8
 8008bf6:	4649      	mov	r1, r9
 8008bf8:	f7f7 fcfe 	bl	80005f8 <__aeabi_dmul>
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	ec41 0b19 	vmov	d9, r0, r1
 8008c02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c06:	4620      	mov	r0, r4
 8008c08:	4629      	mov	r1, r5
 8008c0a:	f7f7 fb3d 	bl	8000288 <__aeabi_dsub>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	ec51 0b19 	vmov	r0, r1, d9
 8008c16:	f7f7 fe19 	bl	800084c <__aeabi_ddiv>
 8008c1a:	4632      	mov	r2, r6
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	460d      	mov	r5, r1
 8008c20:	463b      	mov	r3, r7
 8008c22:	4640      	mov	r0, r8
 8008c24:	4649      	mov	r1, r9
 8008c26:	f7f7 fce7 	bl	80005f8 <__aeabi_dmul>
 8008c2a:	4632      	mov	r2, r6
 8008c2c:	463b      	mov	r3, r7
 8008c2e:	f7f7 fb2d 	bl	800028c <__adddf3>
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	4620      	mov	r0, r4
 8008c38:	4629      	mov	r1, r5
 8008c3a:	f7f7 fb25 	bl	8000288 <__aeabi_dsub>
 8008c3e:	4642      	mov	r2, r8
 8008c40:	464b      	mov	r3, r9
 8008c42:	f7f7 fb21 	bl	8000288 <__aeabi_dsub>
 8008c46:	460b      	mov	r3, r1
 8008c48:	4602      	mov	r2, r0
 8008c4a:	4939      	ldr	r1, [pc, #228]	; (8008d30 <__ieee754_pow+0xa40>)
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	f7f7 fb1b 	bl	8000288 <__aeabi_dsub>
 8008c52:	ec41 0b10 	vmov	d0, r0, r1
 8008c56:	ee10 3a90 	vmov	r3, s1
 8008c5a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c62:	da2b      	bge.n	8008cbc <__ieee754_pow+0x9cc>
 8008c64:	4650      	mov	r0, sl
 8008c66:	f000 f877 	bl	8008d58 <scalbn>
 8008c6a:	ec51 0b10 	vmov	r0, r1, d0
 8008c6e:	ec53 2b18 	vmov	r2, r3, d8
 8008c72:	f7ff bbee 	b.w	8008452 <__ieee754_pow+0x162>
 8008c76:	4b2f      	ldr	r3, [pc, #188]	; (8008d34 <__ieee754_pow+0xa44>)
 8008c78:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008c7c:	429e      	cmp	r6, r3
 8008c7e:	f77f af0d 	ble.w	8008a9c <__ieee754_pow+0x7ac>
 8008c82:	4b2d      	ldr	r3, [pc, #180]	; (8008d38 <__ieee754_pow+0xa48>)
 8008c84:	440b      	add	r3, r1
 8008c86:	4303      	orrs	r3, r0
 8008c88:	d009      	beq.n	8008c9e <__ieee754_pow+0x9ae>
 8008c8a:	ec51 0b18 	vmov	r0, r1, d8
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2300      	movs	r3, #0
 8008c92:	f7f7 ff23 	bl	8000adc <__aeabi_dcmplt>
 8008c96:	3800      	subs	r0, #0
 8008c98:	bf18      	it	ne
 8008c9a:	2001      	movne	r0, #1
 8008c9c:	e448      	b.n	8008530 <__ieee754_pow+0x240>
 8008c9e:	4622      	mov	r2, r4
 8008ca0:	462b      	mov	r3, r5
 8008ca2:	f7f7 faf1 	bl	8000288 <__aeabi_dsub>
 8008ca6:	4642      	mov	r2, r8
 8008ca8:	464b      	mov	r3, r9
 8008caa:	f7f7 ff2b 	bl	8000b04 <__aeabi_dcmpge>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	f43f aef4 	beq.w	8008a9c <__ieee754_pow+0x7ac>
 8008cb4:	e7e9      	b.n	8008c8a <__ieee754_pow+0x99a>
 8008cb6:	f04f 0a00 	mov.w	sl, #0
 8008cba:	e71a      	b.n	8008af2 <__ieee754_pow+0x802>
 8008cbc:	ec51 0b10 	vmov	r0, r1, d0
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	e7d4      	b.n	8008c6e <__ieee754_pow+0x97e>
 8008cc4:	491a      	ldr	r1, [pc, #104]	; (8008d30 <__ieee754_pow+0xa40>)
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	f7ff bb31 	b.w	800832e <__ieee754_pow+0x3e>
 8008ccc:	2000      	movs	r0, #0
 8008cce:	2100      	movs	r1, #0
 8008cd0:	f7ff bb2d 	b.w	800832e <__ieee754_pow+0x3e>
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	4639      	mov	r1, r7
 8008cd8:	f7ff bb29 	b.w	800832e <__ieee754_pow+0x3e>
 8008cdc:	9204      	str	r2, [sp, #16]
 8008cde:	f7ff bb7b 	b.w	80083d8 <__ieee754_pow+0xe8>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f7ff bb65 	b.w	80083b2 <__ieee754_pow+0xc2>
 8008ce8:	00000000 	.word	0x00000000
 8008cec:	3fe62e43 	.word	0x3fe62e43
 8008cf0:	fefa39ef 	.word	0xfefa39ef
 8008cf4:	3fe62e42 	.word	0x3fe62e42
 8008cf8:	0ca86c39 	.word	0x0ca86c39
 8008cfc:	be205c61 	.word	0xbe205c61
 8008d00:	72bea4d0 	.word	0x72bea4d0
 8008d04:	3e663769 	.word	0x3e663769
 8008d08:	c5d26bf1 	.word	0xc5d26bf1
 8008d0c:	3ebbbd41 	.word	0x3ebbbd41
 8008d10:	af25de2c 	.word	0xaf25de2c
 8008d14:	3f11566a 	.word	0x3f11566a
 8008d18:	16bebd93 	.word	0x16bebd93
 8008d1c:	3f66c16c 	.word	0x3f66c16c
 8008d20:	5555553e 	.word	0x5555553e
 8008d24:	3fc55555 	.word	0x3fc55555
 8008d28:	3fe00000 	.word	0x3fe00000
 8008d2c:	fff00000 	.word	0xfff00000
 8008d30:	3ff00000 	.word	0x3ff00000
 8008d34:	4090cbff 	.word	0x4090cbff
 8008d38:	3f6f3400 	.word	0x3f6f3400
 8008d3c:	652b82fe 	.word	0x652b82fe
 8008d40:	3c971547 	.word	0x3c971547

08008d44 <fabs>:
 8008d44:	ec51 0b10 	vmov	r0, r1, d0
 8008d48:	ee10 2a10 	vmov	r2, s0
 8008d4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008d50:	ec43 2b10 	vmov	d0, r2, r3
 8008d54:	4770      	bx	lr
	...

08008d58 <scalbn>:
 8008d58:	b570      	push	{r4, r5, r6, lr}
 8008d5a:	ec55 4b10 	vmov	r4, r5, d0
 8008d5e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008d62:	4606      	mov	r6, r0
 8008d64:	462b      	mov	r3, r5
 8008d66:	b999      	cbnz	r1, 8008d90 <scalbn+0x38>
 8008d68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008d6c:	4323      	orrs	r3, r4
 8008d6e:	d03f      	beq.n	8008df0 <scalbn+0x98>
 8008d70:	4b35      	ldr	r3, [pc, #212]	; (8008e48 <scalbn+0xf0>)
 8008d72:	4629      	mov	r1, r5
 8008d74:	ee10 0a10 	vmov	r0, s0
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f7f7 fc3d 	bl	80005f8 <__aeabi_dmul>
 8008d7e:	4b33      	ldr	r3, [pc, #204]	; (8008e4c <scalbn+0xf4>)
 8008d80:	429e      	cmp	r6, r3
 8008d82:	4604      	mov	r4, r0
 8008d84:	460d      	mov	r5, r1
 8008d86:	da10      	bge.n	8008daa <scalbn+0x52>
 8008d88:	a327      	add	r3, pc, #156	; (adr r3, 8008e28 <scalbn+0xd0>)
 8008d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8e:	e01f      	b.n	8008dd0 <scalbn+0x78>
 8008d90:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008d94:	4291      	cmp	r1, r2
 8008d96:	d10c      	bne.n	8008db2 <scalbn+0x5a>
 8008d98:	ee10 2a10 	vmov	r2, s0
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	4629      	mov	r1, r5
 8008da0:	f7f7 fa74 	bl	800028c <__adddf3>
 8008da4:	4604      	mov	r4, r0
 8008da6:	460d      	mov	r5, r1
 8008da8:	e022      	b.n	8008df0 <scalbn+0x98>
 8008daa:	460b      	mov	r3, r1
 8008dac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008db0:	3936      	subs	r1, #54	; 0x36
 8008db2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008db6:	4296      	cmp	r6, r2
 8008db8:	dd0d      	ble.n	8008dd6 <scalbn+0x7e>
 8008dba:	2d00      	cmp	r5, #0
 8008dbc:	a11c      	add	r1, pc, #112	; (adr r1, 8008e30 <scalbn+0xd8>)
 8008dbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dc2:	da02      	bge.n	8008dca <scalbn+0x72>
 8008dc4:	a11c      	add	r1, pc, #112	; (adr r1, 8008e38 <scalbn+0xe0>)
 8008dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dca:	a319      	add	r3, pc, #100	; (adr r3, 8008e30 <scalbn+0xd8>)
 8008dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd0:	f7f7 fc12 	bl	80005f8 <__aeabi_dmul>
 8008dd4:	e7e6      	b.n	8008da4 <scalbn+0x4c>
 8008dd6:	1872      	adds	r2, r6, r1
 8008dd8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008ddc:	428a      	cmp	r2, r1
 8008dde:	dcec      	bgt.n	8008dba <scalbn+0x62>
 8008de0:	2a00      	cmp	r2, #0
 8008de2:	dd08      	ble.n	8008df6 <scalbn+0x9e>
 8008de4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008de8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008dec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008df0:	ec45 4b10 	vmov	d0, r4, r5
 8008df4:	bd70      	pop	{r4, r5, r6, pc}
 8008df6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008dfa:	da08      	bge.n	8008e0e <scalbn+0xb6>
 8008dfc:	2d00      	cmp	r5, #0
 8008dfe:	a10a      	add	r1, pc, #40	; (adr r1, 8008e28 <scalbn+0xd0>)
 8008e00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e04:	dac0      	bge.n	8008d88 <scalbn+0x30>
 8008e06:	a10e      	add	r1, pc, #56	; (adr r1, 8008e40 <scalbn+0xe8>)
 8008e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e0c:	e7bc      	b.n	8008d88 <scalbn+0x30>
 8008e0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008e12:	3236      	adds	r2, #54	; 0x36
 8008e14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008e18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	4b0c      	ldr	r3, [pc, #48]	; (8008e50 <scalbn+0xf8>)
 8008e20:	2200      	movs	r2, #0
 8008e22:	e7d5      	b.n	8008dd0 <scalbn+0x78>
 8008e24:	f3af 8000 	nop.w
 8008e28:	c2f8f359 	.word	0xc2f8f359
 8008e2c:	01a56e1f 	.word	0x01a56e1f
 8008e30:	8800759c 	.word	0x8800759c
 8008e34:	7e37e43c 	.word	0x7e37e43c
 8008e38:	8800759c 	.word	0x8800759c
 8008e3c:	fe37e43c 	.word	0xfe37e43c
 8008e40:	c2f8f359 	.word	0xc2f8f359
 8008e44:	81a56e1f 	.word	0x81a56e1f
 8008e48:	43500000 	.word	0x43500000
 8008e4c:	ffff3cb0 	.word	0xffff3cb0
 8008e50:	3c900000 	.word	0x3c900000

08008e54 <with_errno>:
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	4604      	mov	r4, r0
 8008e58:	460d      	mov	r5, r1
 8008e5a:	4616      	mov	r6, r2
 8008e5c:	f001 f80e 	bl	8009e7c <__errno>
 8008e60:	4629      	mov	r1, r5
 8008e62:	6006      	str	r6, [r0, #0]
 8008e64:	4620      	mov	r0, r4
 8008e66:	bd70      	pop	{r4, r5, r6, pc}

08008e68 <xflow>:
 8008e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e6a:	4614      	mov	r4, r2
 8008e6c:	461d      	mov	r5, r3
 8008e6e:	b108      	cbz	r0, 8008e74 <xflow+0xc>
 8008e70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008e74:	e9cd 2300 	strd	r2, r3, [sp]
 8008e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	4629      	mov	r1, r5
 8008e80:	f7f7 fbba 	bl	80005f8 <__aeabi_dmul>
 8008e84:	2222      	movs	r2, #34	; 0x22
 8008e86:	b003      	add	sp, #12
 8008e88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e8c:	f7ff bfe2 	b.w	8008e54 <with_errno>

08008e90 <__math_uflow>:
 8008e90:	b508      	push	{r3, lr}
 8008e92:	2200      	movs	r2, #0
 8008e94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e98:	f7ff ffe6 	bl	8008e68 <xflow>
 8008e9c:	ec41 0b10 	vmov	d0, r0, r1
 8008ea0:	bd08      	pop	{r3, pc}

08008ea2 <__math_oflow>:
 8008ea2:	b508      	push	{r3, lr}
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008eaa:	f7ff ffdd 	bl	8008e68 <xflow>
 8008eae:	ec41 0b10 	vmov	d0, r0, r1
 8008eb2:	bd08      	pop	{r3, pc}

08008eb4 <__ieee754_sqrt>:
 8008eb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb8:	ec55 4b10 	vmov	r4, r5, d0
 8008ebc:	4e67      	ldr	r6, [pc, #412]	; (800905c <__ieee754_sqrt+0x1a8>)
 8008ebe:	43ae      	bics	r6, r5
 8008ec0:	ee10 0a10 	vmov	r0, s0
 8008ec4:	ee10 2a10 	vmov	r2, s0
 8008ec8:	4629      	mov	r1, r5
 8008eca:	462b      	mov	r3, r5
 8008ecc:	d10d      	bne.n	8008eea <__ieee754_sqrt+0x36>
 8008ece:	f7f7 fb93 	bl	80005f8 <__aeabi_dmul>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	4629      	mov	r1, r5
 8008eda:	f7f7 f9d7 	bl	800028c <__adddf3>
 8008ede:	4604      	mov	r4, r0
 8008ee0:	460d      	mov	r5, r1
 8008ee2:	ec45 4b10 	vmov	d0, r4, r5
 8008ee6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eea:	2d00      	cmp	r5, #0
 8008eec:	dc0b      	bgt.n	8008f06 <__ieee754_sqrt+0x52>
 8008eee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008ef2:	4326      	orrs	r6, r4
 8008ef4:	d0f5      	beq.n	8008ee2 <__ieee754_sqrt+0x2e>
 8008ef6:	b135      	cbz	r5, 8008f06 <__ieee754_sqrt+0x52>
 8008ef8:	f7f7 f9c6 	bl	8000288 <__aeabi_dsub>
 8008efc:	4602      	mov	r2, r0
 8008efe:	460b      	mov	r3, r1
 8008f00:	f7f7 fca4 	bl	800084c <__aeabi_ddiv>
 8008f04:	e7eb      	b.n	8008ede <__ieee754_sqrt+0x2a>
 8008f06:	1509      	asrs	r1, r1, #20
 8008f08:	f000 808d 	beq.w	8009026 <__ieee754_sqrt+0x172>
 8008f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f10:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008f14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f18:	07c9      	lsls	r1, r1, #31
 8008f1a:	bf5c      	itt	pl
 8008f1c:	005b      	lslpl	r3, r3, #1
 8008f1e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008f22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008f26:	bf58      	it	pl
 8008f28:	0052      	lslpl	r2, r2, #1
 8008f2a:	2500      	movs	r5, #0
 8008f2c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008f30:	1076      	asrs	r6, r6, #1
 8008f32:	0052      	lsls	r2, r2, #1
 8008f34:	f04f 0e16 	mov.w	lr, #22
 8008f38:	46ac      	mov	ip, r5
 8008f3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f3e:	eb0c 0001 	add.w	r0, ip, r1
 8008f42:	4298      	cmp	r0, r3
 8008f44:	bfde      	ittt	le
 8008f46:	1a1b      	suble	r3, r3, r0
 8008f48:	eb00 0c01 	addle.w	ip, r0, r1
 8008f4c:	186d      	addle	r5, r5, r1
 8008f4e:	005b      	lsls	r3, r3, #1
 8008f50:	f1be 0e01 	subs.w	lr, lr, #1
 8008f54:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008f58:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008f5c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008f60:	d1ed      	bne.n	8008f3e <__ieee754_sqrt+0x8a>
 8008f62:	4674      	mov	r4, lr
 8008f64:	2720      	movs	r7, #32
 8008f66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008f6a:	4563      	cmp	r3, ip
 8008f6c:	eb01 000e 	add.w	r0, r1, lr
 8008f70:	dc02      	bgt.n	8008f78 <__ieee754_sqrt+0xc4>
 8008f72:	d113      	bne.n	8008f9c <__ieee754_sqrt+0xe8>
 8008f74:	4290      	cmp	r0, r2
 8008f76:	d811      	bhi.n	8008f9c <__ieee754_sqrt+0xe8>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	eb00 0e01 	add.w	lr, r0, r1
 8008f7e:	da57      	bge.n	8009030 <__ieee754_sqrt+0x17c>
 8008f80:	f1be 0f00 	cmp.w	lr, #0
 8008f84:	db54      	blt.n	8009030 <__ieee754_sqrt+0x17c>
 8008f86:	f10c 0801 	add.w	r8, ip, #1
 8008f8a:	eba3 030c 	sub.w	r3, r3, ip
 8008f8e:	4290      	cmp	r0, r2
 8008f90:	bf88      	it	hi
 8008f92:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008f96:	1a12      	subs	r2, r2, r0
 8008f98:	440c      	add	r4, r1
 8008f9a:	46c4      	mov	ip, r8
 8008f9c:	005b      	lsls	r3, r3, #1
 8008f9e:	3f01      	subs	r7, #1
 8008fa0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008fa4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008fa8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008fac:	d1dd      	bne.n	8008f6a <__ieee754_sqrt+0xb6>
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	d01b      	beq.n	8008fea <__ieee754_sqrt+0x136>
 8008fb2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009060 <__ieee754_sqrt+0x1ac>
 8008fb6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009064 <__ieee754_sqrt+0x1b0>
 8008fba:	e9da 0100 	ldrd	r0, r1, [sl]
 8008fbe:	e9db 2300 	ldrd	r2, r3, [fp]
 8008fc2:	f7f7 f961 	bl	8000288 <__aeabi_dsub>
 8008fc6:	e9da 8900 	ldrd	r8, r9, [sl]
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	4640      	mov	r0, r8
 8008fd0:	4649      	mov	r1, r9
 8008fd2:	f7f7 fd8d 	bl	8000af0 <__aeabi_dcmple>
 8008fd6:	b140      	cbz	r0, 8008fea <__ieee754_sqrt+0x136>
 8008fd8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008fdc:	e9da 0100 	ldrd	r0, r1, [sl]
 8008fe0:	e9db 2300 	ldrd	r2, r3, [fp]
 8008fe4:	d126      	bne.n	8009034 <__ieee754_sqrt+0x180>
 8008fe6:	3501      	adds	r5, #1
 8008fe8:	463c      	mov	r4, r7
 8008fea:	106a      	asrs	r2, r5, #1
 8008fec:	0863      	lsrs	r3, r4, #1
 8008fee:	07e9      	lsls	r1, r5, #31
 8008ff0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008ff4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008ff8:	bf48      	it	mi
 8008ffa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008ffe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8009002:	461c      	mov	r4, r3
 8009004:	e76d      	b.n	8008ee2 <__ieee754_sqrt+0x2e>
 8009006:	0ad3      	lsrs	r3, r2, #11
 8009008:	3815      	subs	r0, #21
 800900a:	0552      	lsls	r2, r2, #21
 800900c:	2b00      	cmp	r3, #0
 800900e:	d0fa      	beq.n	8009006 <__ieee754_sqrt+0x152>
 8009010:	02dc      	lsls	r4, r3, #11
 8009012:	d50a      	bpl.n	800902a <__ieee754_sqrt+0x176>
 8009014:	f1c1 0420 	rsb	r4, r1, #32
 8009018:	fa22 f404 	lsr.w	r4, r2, r4
 800901c:	1e4d      	subs	r5, r1, #1
 800901e:	408a      	lsls	r2, r1
 8009020:	4323      	orrs	r3, r4
 8009022:	1b41      	subs	r1, r0, r5
 8009024:	e772      	b.n	8008f0c <__ieee754_sqrt+0x58>
 8009026:	4608      	mov	r0, r1
 8009028:	e7f0      	b.n	800900c <__ieee754_sqrt+0x158>
 800902a:	005b      	lsls	r3, r3, #1
 800902c:	3101      	adds	r1, #1
 800902e:	e7ef      	b.n	8009010 <__ieee754_sqrt+0x15c>
 8009030:	46e0      	mov	r8, ip
 8009032:	e7aa      	b.n	8008f8a <__ieee754_sqrt+0xd6>
 8009034:	f7f7 f92a 	bl	800028c <__adddf3>
 8009038:	e9da 8900 	ldrd	r8, r9, [sl]
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	4640      	mov	r0, r8
 8009042:	4649      	mov	r1, r9
 8009044:	f7f7 fd4a 	bl	8000adc <__aeabi_dcmplt>
 8009048:	b120      	cbz	r0, 8009054 <__ieee754_sqrt+0x1a0>
 800904a:	1ca0      	adds	r0, r4, #2
 800904c:	bf08      	it	eq
 800904e:	3501      	addeq	r5, #1
 8009050:	3402      	adds	r4, #2
 8009052:	e7ca      	b.n	8008fea <__ieee754_sqrt+0x136>
 8009054:	3401      	adds	r4, #1
 8009056:	f024 0401 	bic.w	r4, r4, #1
 800905a:	e7c6      	b.n	8008fea <__ieee754_sqrt+0x136>
 800905c:	7ff00000 	.word	0x7ff00000
 8009060:	20000050 	.word	0x20000050
 8009064:	20000058 	.word	0x20000058

08009068 <abort>:
 8009068:	b508      	push	{r3, lr}
 800906a:	2006      	movs	r0, #6
 800906c:	f000 fe90 	bl	8009d90 <raise>
 8009070:	2001      	movs	r0, #1
 8009072:	f7f9 f901 	bl	8002278 <_exit>
	...

08009078 <malloc>:
 8009078:	4b02      	ldr	r3, [pc, #8]	; (8009084 <malloc+0xc>)
 800907a:	4601      	mov	r1, r0
 800907c:	6818      	ldr	r0, [r3, #0]
 800907e:	f000 b823 	b.w	80090c8 <_malloc_r>
 8009082:	bf00      	nop
 8009084:	200000b8 	.word	0x200000b8

08009088 <sbrk_aligned>:
 8009088:	b570      	push	{r4, r5, r6, lr}
 800908a:	4e0e      	ldr	r6, [pc, #56]	; (80090c4 <sbrk_aligned+0x3c>)
 800908c:	460c      	mov	r4, r1
 800908e:	6831      	ldr	r1, [r6, #0]
 8009090:	4605      	mov	r5, r0
 8009092:	b911      	cbnz	r1, 800909a <sbrk_aligned+0x12>
 8009094:	f000 fed0 	bl	8009e38 <_sbrk_r>
 8009098:	6030      	str	r0, [r6, #0]
 800909a:	4621      	mov	r1, r4
 800909c:	4628      	mov	r0, r5
 800909e:	f000 fecb 	bl	8009e38 <_sbrk_r>
 80090a2:	1c43      	adds	r3, r0, #1
 80090a4:	d00a      	beq.n	80090bc <sbrk_aligned+0x34>
 80090a6:	1cc4      	adds	r4, r0, #3
 80090a8:	f024 0403 	bic.w	r4, r4, #3
 80090ac:	42a0      	cmp	r0, r4
 80090ae:	d007      	beq.n	80090c0 <sbrk_aligned+0x38>
 80090b0:	1a21      	subs	r1, r4, r0
 80090b2:	4628      	mov	r0, r5
 80090b4:	f000 fec0 	bl	8009e38 <_sbrk_r>
 80090b8:	3001      	adds	r0, #1
 80090ba:	d101      	bne.n	80090c0 <sbrk_aligned+0x38>
 80090bc:	f04f 34ff 	mov.w	r4, #4294967295
 80090c0:	4620      	mov	r0, r4
 80090c2:	bd70      	pop	{r4, r5, r6, pc}
 80090c4:	200008b8 	.word	0x200008b8

080090c8 <_malloc_r>:
 80090c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090cc:	1ccd      	adds	r5, r1, #3
 80090ce:	f025 0503 	bic.w	r5, r5, #3
 80090d2:	3508      	adds	r5, #8
 80090d4:	2d0c      	cmp	r5, #12
 80090d6:	bf38      	it	cc
 80090d8:	250c      	movcc	r5, #12
 80090da:	2d00      	cmp	r5, #0
 80090dc:	4607      	mov	r7, r0
 80090de:	db01      	blt.n	80090e4 <_malloc_r+0x1c>
 80090e0:	42a9      	cmp	r1, r5
 80090e2:	d905      	bls.n	80090f0 <_malloc_r+0x28>
 80090e4:	230c      	movs	r3, #12
 80090e6:	603b      	str	r3, [r7, #0]
 80090e8:	2600      	movs	r6, #0
 80090ea:	4630      	mov	r0, r6
 80090ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80091c4 <_malloc_r+0xfc>
 80090f4:	f000 f868 	bl	80091c8 <__malloc_lock>
 80090f8:	f8d8 3000 	ldr.w	r3, [r8]
 80090fc:	461c      	mov	r4, r3
 80090fe:	bb5c      	cbnz	r4, 8009158 <_malloc_r+0x90>
 8009100:	4629      	mov	r1, r5
 8009102:	4638      	mov	r0, r7
 8009104:	f7ff ffc0 	bl	8009088 <sbrk_aligned>
 8009108:	1c43      	adds	r3, r0, #1
 800910a:	4604      	mov	r4, r0
 800910c:	d155      	bne.n	80091ba <_malloc_r+0xf2>
 800910e:	f8d8 4000 	ldr.w	r4, [r8]
 8009112:	4626      	mov	r6, r4
 8009114:	2e00      	cmp	r6, #0
 8009116:	d145      	bne.n	80091a4 <_malloc_r+0xdc>
 8009118:	2c00      	cmp	r4, #0
 800911a:	d048      	beq.n	80091ae <_malloc_r+0xe6>
 800911c:	6823      	ldr	r3, [r4, #0]
 800911e:	4631      	mov	r1, r6
 8009120:	4638      	mov	r0, r7
 8009122:	eb04 0903 	add.w	r9, r4, r3
 8009126:	f000 fe87 	bl	8009e38 <_sbrk_r>
 800912a:	4581      	cmp	r9, r0
 800912c:	d13f      	bne.n	80091ae <_malloc_r+0xe6>
 800912e:	6821      	ldr	r1, [r4, #0]
 8009130:	1a6d      	subs	r5, r5, r1
 8009132:	4629      	mov	r1, r5
 8009134:	4638      	mov	r0, r7
 8009136:	f7ff ffa7 	bl	8009088 <sbrk_aligned>
 800913a:	3001      	adds	r0, #1
 800913c:	d037      	beq.n	80091ae <_malloc_r+0xe6>
 800913e:	6823      	ldr	r3, [r4, #0]
 8009140:	442b      	add	r3, r5
 8009142:	6023      	str	r3, [r4, #0]
 8009144:	f8d8 3000 	ldr.w	r3, [r8]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d038      	beq.n	80091be <_malloc_r+0xf6>
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	42a2      	cmp	r2, r4
 8009150:	d12b      	bne.n	80091aa <_malloc_r+0xe2>
 8009152:	2200      	movs	r2, #0
 8009154:	605a      	str	r2, [r3, #4]
 8009156:	e00f      	b.n	8009178 <_malloc_r+0xb0>
 8009158:	6822      	ldr	r2, [r4, #0]
 800915a:	1b52      	subs	r2, r2, r5
 800915c:	d41f      	bmi.n	800919e <_malloc_r+0xd6>
 800915e:	2a0b      	cmp	r2, #11
 8009160:	d917      	bls.n	8009192 <_malloc_r+0xca>
 8009162:	1961      	adds	r1, r4, r5
 8009164:	42a3      	cmp	r3, r4
 8009166:	6025      	str	r5, [r4, #0]
 8009168:	bf18      	it	ne
 800916a:	6059      	strne	r1, [r3, #4]
 800916c:	6863      	ldr	r3, [r4, #4]
 800916e:	bf08      	it	eq
 8009170:	f8c8 1000 	streq.w	r1, [r8]
 8009174:	5162      	str	r2, [r4, r5]
 8009176:	604b      	str	r3, [r1, #4]
 8009178:	4638      	mov	r0, r7
 800917a:	f104 060b 	add.w	r6, r4, #11
 800917e:	f000 f829 	bl	80091d4 <__malloc_unlock>
 8009182:	f026 0607 	bic.w	r6, r6, #7
 8009186:	1d23      	adds	r3, r4, #4
 8009188:	1af2      	subs	r2, r6, r3
 800918a:	d0ae      	beq.n	80090ea <_malloc_r+0x22>
 800918c:	1b9b      	subs	r3, r3, r6
 800918e:	50a3      	str	r3, [r4, r2]
 8009190:	e7ab      	b.n	80090ea <_malloc_r+0x22>
 8009192:	42a3      	cmp	r3, r4
 8009194:	6862      	ldr	r2, [r4, #4]
 8009196:	d1dd      	bne.n	8009154 <_malloc_r+0x8c>
 8009198:	f8c8 2000 	str.w	r2, [r8]
 800919c:	e7ec      	b.n	8009178 <_malloc_r+0xb0>
 800919e:	4623      	mov	r3, r4
 80091a0:	6864      	ldr	r4, [r4, #4]
 80091a2:	e7ac      	b.n	80090fe <_malloc_r+0x36>
 80091a4:	4634      	mov	r4, r6
 80091a6:	6876      	ldr	r6, [r6, #4]
 80091a8:	e7b4      	b.n	8009114 <_malloc_r+0x4c>
 80091aa:	4613      	mov	r3, r2
 80091ac:	e7cc      	b.n	8009148 <_malloc_r+0x80>
 80091ae:	230c      	movs	r3, #12
 80091b0:	603b      	str	r3, [r7, #0]
 80091b2:	4638      	mov	r0, r7
 80091b4:	f000 f80e 	bl	80091d4 <__malloc_unlock>
 80091b8:	e797      	b.n	80090ea <_malloc_r+0x22>
 80091ba:	6025      	str	r5, [r4, #0]
 80091bc:	e7dc      	b.n	8009178 <_malloc_r+0xb0>
 80091be:	605b      	str	r3, [r3, #4]
 80091c0:	deff      	udf	#255	; 0xff
 80091c2:	bf00      	nop
 80091c4:	200008b4 	.word	0x200008b4

080091c8 <__malloc_lock>:
 80091c8:	4801      	ldr	r0, [pc, #4]	; (80091d0 <__malloc_lock+0x8>)
 80091ca:	f000 be81 	b.w	8009ed0 <__retarget_lock_acquire_recursive>
 80091ce:	bf00      	nop
 80091d0:	200009fc 	.word	0x200009fc

080091d4 <__malloc_unlock>:
 80091d4:	4801      	ldr	r0, [pc, #4]	; (80091dc <__malloc_unlock+0x8>)
 80091d6:	f000 be7c 	b.w	8009ed2 <__retarget_lock_release_recursive>
 80091da:	bf00      	nop
 80091dc:	200009fc 	.word	0x200009fc

080091e0 <__cvt>:
 80091e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091e4:	ec55 4b10 	vmov	r4, r5, d0
 80091e8:	2d00      	cmp	r5, #0
 80091ea:	460e      	mov	r6, r1
 80091ec:	4619      	mov	r1, r3
 80091ee:	462b      	mov	r3, r5
 80091f0:	bfbb      	ittet	lt
 80091f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80091f6:	461d      	movlt	r5, r3
 80091f8:	2300      	movge	r3, #0
 80091fa:	232d      	movlt	r3, #45	; 0x2d
 80091fc:	700b      	strb	r3, [r1, #0]
 80091fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009200:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009204:	4691      	mov	r9, r2
 8009206:	f023 0820 	bic.w	r8, r3, #32
 800920a:	bfbc      	itt	lt
 800920c:	4622      	movlt	r2, r4
 800920e:	4614      	movlt	r4, r2
 8009210:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009214:	d005      	beq.n	8009222 <__cvt+0x42>
 8009216:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800921a:	d100      	bne.n	800921e <__cvt+0x3e>
 800921c:	3601      	adds	r6, #1
 800921e:	2102      	movs	r1, #2
 8009220:	e000      	b.n	8009224 <__cvt+0x44>
 8009222:	2103      	movs	r1, #3
 8009224:	ab03      	add	r3, sp, #12
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	ab02      	add	r3, sp, #8
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	ec45 4b10 	vmov	d0, r4, r5
 8009230:	4653      	mov	r3, sl
 8009232:	4632      	mov	r2, r6
 8009234:	f000 fee4 	bl	800a000 <_dtoa_r>
 8009238:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800923c:	4607      	mov	r7, r0
 800923e:	d102      	bne.n	8009246 <__cvt+0x66>
 8009240:	f019 0f01 	tst.w	r9, #1
 8009244:	d022      	beq.n	800928c <__cvt+0xac>
 8009246:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800924a:	eb07 0906 	add.w	r9, r7, r6
 800924e:	d110      	bne.n	8009272 <__cvt+0x92>
 8009250:	783b      	ldrb	r3, [r7, #0]
 8009252:	2b30      	cmp	r3, #48	; 0x30
 8009254:	d10a      	bne.n	800926c <__cvt+0x8c>
 8009256:	2200      	movs	r2, #0
 8009258:	2300      	movs	r3, #0
 800925a:	4620      	mov	r0, r4
 800925c:	4629      	mov	r1, r5
 800925e:	f7f7 fc33 	bl	8000ac8 <__aeabi_dcmpeq>
 8009262:	b918      	cbnz	r0, 800926c <__cvt+0x8c>
 8009264:	f1c6 0601 	rsb	r6, r6, #1
 8009268:	f8ca 6000 	str.w	r6, [sl]
 800926c:	f8da 3000 	ldr.w	r3, [sl]
 8009270:	4499      	add	r9, r3
 8009272:	2200      	movs	r2, #0
 8009274:	2300      	movs	r3, #0
 8009276:	4620      	mov	r0, r4
 8009278:	4629      	mov	r1, r5
 800927a:	f7f7 fc25 	bl	8000ac8 <__aeabi_dcmpeq>
 800927e:	b108      	cbz	r0, 8009284 <__cvt+0xa4>
 8009280:	f8cd 900c 	str.w	r9, [sp, #12]
 8009284:	2230      	movs	r2, #48	; 0x30
 8009286:	9b03      	ldr	r3, [sp, #12]
 8009288:	454b      	cmp	r3, r9
 800928a:	d307      	bcc.n	800929c <__cvt+0xbc>
 800928c:	9b03      	ldr	r3, [sp, #12]
 800928e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009290:	1bdb      	subs	r3, r3, r7
 8009292:	4638      	mov	r0, r7
 8009294:	6013      	str	r3, [r2, #0]
 8009296:	b004      	add	sp, #16
 8009298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800929c:	1c59      	adds	r1, r3, #1
 800929e:	9103      	str	r1, [sp, #12]
 80092a0:	701a      	strb	r2, [r3, #0]
 80092a2:	e7f0      	b.n	8009286 <__cvt+0xa6>

080092a4 <__exponent>:
 80092a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092a6:	4603      	mov	r3, r0
 80092a8:	2900      	cmp	r1, #0
 80092aa:	bfb8      	it	lt
 80092ac:	4249      	neglt	r1, r1
 80092ae:	f803 2b02 	strb.w	r2, [r3], #2
 80092b2:	bfb4      	ite	lt
 80092b4:	222d      	movlt	r2, #45	; 0x2d
 80092b6:	222b      	movge	r2, #43	; 0x2b
 80092b8:	2909      	cmp	r1, #9
 80092ba:	7042      	strb	r2, [r0, #1]
 80092bc:	dd2a      	ble.n	8009314 <__exponent+0x70>
 80092be:	f10d 0207 	add.w	r2, sp, #7
 80092c2:	4617      	mov	r7, r2
 80092c4:	260a      	movs	r6, #10
 80092c6:	4694      	mov	ip, r2
 80092c8:	fb91 f5f6 	sdiv	r5, r1, r6
 80092cc:	fb06 1415 	mls	r4, r6, r5, r1
 80092d0:	3430      	adds	r4, #48	; 0x30
 80092d2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80092d6:	460c      	mov	r4, r1
 80092d8:	2c63      	cmp	r4, #99	; 0x63
 80092da:	f102 32ff 	add.w	r2, r2, #4294967295
 80092de:	4629      	mov	r1, r5
 80092e0:	dcf1      	bgt.n	80092c6 <__exponent+0x22>
 80092e2:	3130      	adds	r1, #48	; 0x30
 80092e4:	f1ac 0402 	sub.w	r4, ip, #2
 80092e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80092ec:	1c41      	adds	r1, r0, #1
 80092ee:	4622      	mov	r2, r4
 80092f0:	42ba      	cmp	r2, r7
 80092f2:	d30a      	bcc.n	800930a <__exponent+0x66>
 80092f4:	f10d 0209 	add.w	r2, sp, #9
 80092f8:	eba2 020c 	sub.w	r2, r2, ip
 80092fc:	42bc      	cmp	r4, r7
 80092fe:	bf88      	it	hi
 8009300:	2200      	movhi	r2, #0
 8009302:	4413      	add	r3, r2
 8009304:	1a18      	subs	r0, r3, r0
 8009306:	b003      	add	sp, #12
 8009308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800930a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800930e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009312:	e7ed      	b.n	80092f0 <__exponent+0x4c>
 8009314:	2330      	movs	r3, #48	; 0x30
 8009316:	3130      	adds	r1, #48	; 0x30
 8009318:	7083      	strb	r3, [r0, #2]
 800931a:	70c1      	strb	r1, [r0, #3]
 800931c:	1d03      	adds	r3, r0, #4
 800931e:	e7f1      	b.n	8009304 <__exponent+0x60>

08009320 <_printf_float>:
 8009320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009324:	ed2d 8b02 	vpush	{d8}
 8009328:	b08d      	sub	sp, #52	; 0x34
 800932a:	460c      	mov	r4, r1
 800932c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009330:	4616      	mov	r6, r2
 8009332:	461f      	mov	r7, r3
 8009334:	4605      	mov	r5, r0
 8009336:	f000 fd33 	bl	8009da0 <_localeconv_r>
 800933a:	f8d0 a000 	ldr.w	sl, [r0]
 800933e:	4650      	mov	r0, sl
 8009340:	f7f6 ff96 	bl	8000270 <strlen>
 8009344:	2300      	movs	r3, #0
 8009346:	930a      	str	r3, [sp, #40]	; 0x28
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	9305      	str	r3, [sp, #20]
 800934c:	f8d8 3000 	ldr.w	r3, [r8]
 8009350:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009354:	3307      	adds	r3, #7
 8009356:	f023 0307 	bic.w	r3, r3, #7
 800935a:	f103 0208 	add.w	r2, r3, #8
 800935e:	f8c8 2000 	str.w	r2, [r8]
 8009362:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009366:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800936a:	9307      	str	r3, [sp, #28]
 800936c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009370:	ee08 0a10 	vmov	s16, r0
 8009374:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009378:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800937c:	4b9e      	ldr	r3, [pc, #632]	; (80095f8 <_printf_float+0x2d8>)
 800937e:	f04f 32ff 	mov.w	r2, #4294967295
 8009382:	f7f7 fbd3 	bl	8000b2c <__aeabi_dcmpun>
 8009386:	bb88      	cbnz	r0, 80093ec <_printf_float+0xcc>
 8009388:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800938c:	4b9a      	ldr	r3, [pc, #616]	; (80095f8 <_printf_float+0x2d8>)
 800938e:	f04f 32ff 	mov.w	r2, #4294967295
 8009392:	f7f7 fbad 	bl	8000af0 <__aeabi_dcmple>
 8009396:	bb48      	cbnz	r0, 80093ec <_printf_float+0xcc>
 8009398:	2200      	movs	r2, #0
 800939a:	2300      	movs	r3, #0
 800939c:	4640      	mov	r0, r8
 800939e:	4649      	mov	r1, r9
 80093a0:	f7f7 fb9c 	bl	8000adc <__aeabi_dcmplt>
 80093a4:	b110      	cbz	r0, 80093ac <_printf_float+0x8c>
 80093a6:	232d      	movs	r3, #45	; 0x2d
 80093a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093ac:	4a93      	ldr	r2, [pc, #588]	; (80095fc <_printf_float+0x2dc>)
 80093ae:	4b94      	ldr	r3, [pc, #592]	; (8009600 <_printf_float+0x2e0>)
 80093b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80093b4:	bf94      	ite	ls
 80093b6:	4690      	movls	r8, r2
 80093b8:	4698      	movhi	r8, r3
 80093ba:	2303      	movs	r3, #3
 80093bc:	6123      	str	r3, [r4, #16]
 80093be:	9b05      	ldr	r3, [sp, #20]
 80093c0:	f023 0304 	bic.w	r3, r3, #4
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	f04f 0900 	mov.w	r9, #0
 80093ca:	9700      	str	r7, [sp, #0]
 80093cc:	4633      	mov	r3, r6
 80093ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80093d0:	4621      	mov	r1, r4
 80093d2:	4628      	mov	r0, r5
 80093d4:	f000 f9da 	bl	800978c <_printf_common>
 80093d8:	3001      	adds	r0, #1
 80093da:	f040 8090 	bne.w	80094fe <_printf_float+0x1de>
 80093de:	f04f 30ff 	mov.w	r0, #4294967295
 80093e2:	b00d      	add	sp, #52	; 0x34
 80093e4:	ecbd 8b02 	vpop	{d8}
 80093e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ec:	4642      	mov	r2, r8
 80093ee:	464b      	mov	r3, r9
 80093f0:	4640      	mov	r0, r8
 80093f2:	4649      	mov	r1, r9
 80093f4:	f7f7 fb9a 	bl	8000b2c <__aeabi_dcmpun>
 80093f8:	b140      	cbz	r0, 800940c <_printf_float+0xec>
 80093fa:	464b      	mov	r3, r9
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	bfbc      	itt	lt
 8009400:	232d      	movlt	r3, #45	; 0x2d
 8009402:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009406:	4a7f      	ldr	r2, [pc, #508]	; (8009604 <_printf_float+0x2e4>)
 8009408:	4b7f      	ldr	r3, [pc, #508]	; (8009608 <_printf_float+0x2e8>)
 800940a:	e7d1      	b.n	80093b0 <_printf_float+0x90>
 800940c:	6863      	ldr	r3, [r4, #4]
 800940e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009412:	9206      	str	r2, [sp, #24]
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	d13f      	bne.n	8009498 <_printf_float+0x178>
 8009418:	2306      	movs	r3, #6
 800941a:	6063      	str	r3, [r4, #4]
 800941c:	9b05      	ldr	r3, [sp, #20]
 800941e:	6861      	ldr	r1, [r4, #4]
 8009420:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009424:	2300      	movs	r3, #0
 8009426:	9303      	str	r3, [sp, #12]
 8009428:	ab0a      	add	r3, sp, #40	; 0x28
 800942a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800942e:	ab09      	add	r3, sp, #36	; 0x24
 8009430:	ec49 8b10 	vmov	d0, r8, r9
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	6022      	str	r2, [r4, #0]
 8009438:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800943c:	4628      	mov	r0, r5
 800943e:	f7ff fecf 	bl	80091e0 <__cvt>
 8009442:	9b06      	ldr	r3, [sp, #24]
 8009444:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009446:	2b47      	cmp	r3, #71	; 0x47
 8009448:	4680      	mov	r8, r0
 800944a:	d108      	bne.n	800945e <_printf_float+0x13e>
 800944c:	1cc8      	adds	r0, r1, #3
 800944e:	db02      	blt.n	8009456 <_printf_float+0x136>
 8009450:	6863      	ldr	r3, [r4, #4]
 8009452:	4299      	cmp	r1, r3
 8009454:	dd41      	ble.n	80094da <_printf_float+0x1ba>
 8009456:	f1ab 0302 	sub.w	r3, fp, #2
 800945a:	fa5f fb83 	uxtb.w	fp, r3
 800945e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009462:	d820      	bhi.n	80094a6 <_printf_float+0x186>
 8009464:	3901      	subs	r1, #1
 8009466:	465a      	mov	r2, fp
 8009468:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800946c:	9109      	str	r1, [sp, #36]	; 0x24
 800946e:	f7ff ff19 	bl	80092a4 <__exponent>
 8009472:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009474:	1813      	adds	r3, r2, r0
 8009476:	2a01      	cmp	r2, #1
 8009478:	4681      	mov	r9, r0
 800947a:	6123      	str	r3, [r4, #16]
 800947c:	dc02      	bgt.n	8009484 <_printf_float+0x164>
 800947e:	6822      	ldr	r2, [r4, #0]
 8009480:	07d2      	lsls	r2, r2, #31
 8009482:	d501      	bpl.n	8009488 <_printf_float+0x168>
 8009484:	3301      	adds	r3, #1
 8009486:	6123      	str	r3, [r4, #16]
 8009488:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800948c:	2b00      	cmp	r3, #0
 800948e:	d09c      	beq.n	80093ca <_printf_float+0xaa>
 8009490:	232d      	movs	r3, #45	; 0x2d
 8009492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009496:	e798      	b.n	80093ca <_printf_float+0xaa>
 8009498:	9a06      	ldr	r2, [sp, #24]
 800949a:	2a47      	cmp	r2, #71	; 0x47
 800949c:	d1be      	bne.n	800941c <_printf_float+0xfc>
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1bc      	bne.n	800941c <_printf_float+0xfc>
 80094a2:	2301      	movs	r3, #1
 80094a4:	e7b9      	b.n	800941a <_printf_float+0xfa>
 80094a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80094aa:	d118      	bne.n	80094de <_printf_float+0x1be>
 80094ac:	2900      	cmp	r1, #0
 80094ae:	6863      	ldr	r3, [r4, #4]
 80094b0:	dd0b      	ble.n	80094ca <_printf_float+0x1aa>
 80094b2:	6121      	str	r1, [r4, #16]
 80094b4:	b913      	cbnz	r3, 80094bc <_printf_float+0x19c>
 80094b6:	6822      	ldr	r2, [r4, #0]
 80094b8:	07d0      	lsls	r0, r2, #31
 80094ba:	d502      	bpl.n	80094c2 <_printf_float+0x1a2>
 80094bc:	3301      	adds	r3, #1
 80094be:	440b      	add	r3, r1
 80094c0:	6123      	str	r3, [r4, #16]
 80094c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80094c4:	f04f 0900 	mov.w	r9, #0
 80094c8:	e7de      	b.n	8009488 <_printf_float+0x168>
 80094ca:	b913      	cbnz	r3, 80094d2 <_printf_float+0x1b2>
 80094cc:	6822      	ldr	r2, [r4, #0]
 80094ce:	07d2      	lsls	r2, r2, #31
 80094d0:	d501      	bpl.n	80094d6 <_printf_float+0x1b6>
 80094d2:	3302      	adds	r3, #2
 80094d4:	e7f4      	b.n	80094c0 <_printf_float+0x1a0>
 80094d6:	2301      	movs	r3, #1
 80094d8:	e7f2      	b.n	80094c0 <_printf_float+0x1a0>
 80094da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80094de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e0:	4299      	cmp	r1, r3
 80094e2:	db05      	blt.n	80094f0 <_printf_float+0x1d0>
 80094e4:	6823      	ldr	r3, [r4, #0]
 80094e6:	6121      	str	r1, [r4, #16]
 80094e8:	07d8      	lsls	r0, r3, #31
 80094ea:	d5ea      	bpl.n	80094c2 <_printf_float+0x1a2>
 80094ec:	1c4b      	adds	r3, r1, #1
 80094ee:	e7e7      	b.n	80094c0 <_printf_float+0x1a0>
 80094f0:	2900      	cmp	r1, #0
 80094f2:	bfd4      	ite	le
 80094f4:	f1c1 0202 	rsble	r2, r1, #2
 80094f8:	2201      	movgt	r2, #1
 80094fa:	4413      	add	r3, r2
 80094fc:	e7e0      	b.n	80094c0 <_printf_float+0x1a0>
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	055a      	lsls	r2, r3, #21
 8009502:	d407      	bmi.n	8009514 <_printf_float+0x1f4>
 8009504:	6923      	ldr	r3, [r4, #16]
 8009506:	4642      	mov	r2, r8
 8009508:	4631      	mov	r1, r6
 800950a:	4628      	mov	r0, r5
 800950c:	47b8      	blx	r7
 800950e:	3001      	adds	r0, #1
 8009510:	d12c      	bne.n	800956c <_printf_float+0x24c>
 8009512:	e764      	b.n	80093de <_printf_float+0xbe>
 8009514:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009518:	f240 80e0 	bls.w	80096dc <_printf_float+0x3bc>
 800951c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009520:	2200      	movs	r2, #0
 8009522:	2300      	movs	r3, #0
 8009524:	f7f7 fad0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009528:	2800      	cmp	r0, #0
 800952a:	d034      	beq.n	8009596 <_printf_float+0x276>
 800952c:	4a37      	ldr	r2, [pc, #220]	; (800960c <_printf_float+0x2ec>)
 800952e:	2301      	movs	r3, #1
 8009530:	4631      	mov	r1, r6
 8009532:	4628      	mov	r0, r5
 8009534:	47b8      	blx	r7
 8009536:	3001      	adds	r0, #1
 8009538:	f43f af51 	beq.w	80093de <_printf_float+0xbe>
 800953c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009540:	429a      	cmp	r2, r3
 8009542:	db02      	blt.n	800954a <_printf_float+0x22a>
 8009544:	6823      	ldr	r3, [r4, #0]
 8009546:	07d8      	lsls	r0, r3, #31
 8009548:	d510      	bpl.n	800956c <_printf_float+0x24c>
 800954a:	ee18 3a10 	vmov	r3, s16
 800954e:	4652      	mov	r2, sl
 8009550:	4631      	mov	r1, r6
 8009552:	4628      	mov	r0, r5
 8009554:	47b8      	blx	r7
 8009556:	3001      	adds	r0, #1
 8009558:	f43f af41 	beq.w	80093de <_printf_float+0xbe>
 800955c:	f04f 0800 	mov.w	r8, #0
 8009560:	f104 091a 	add.w	r9, r4, #26
 8009564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009566:	3b01      	subs	r3, #1
 8009568:	4543      	cmp	r3, r8
 800956a:	dc09      	bgt.n	8009580 <_printf_float+0x260>
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	079b      	lsls	r3, r3, #30
 8009570:	f100 8107 	bmi.w	8009782 <_printf_float+0x462>
 8009574:	68e0      	ldr	r0, [r4, #12]
 8009576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009578:	4298      	cmp	r0, r3
 800957a:	bfb8      	it	lt
 800957c:	4618      	movlt	r0, r3
 800957e:	e730      	b.n	80093e2 <_printf_float+0xc2>
 8009580:	2301      	movs	r3, #1
 8009582:	464a      	mov	r2, r9
 8009584:	4631      	mov	r1, r6
 8009586:	4628      	mov	r0, r5
 8009588:	47b8      	blx	r7
 800958a:	3001      	adds	r0, #1
 800958c:	f43f af27 	beq.w	80093de <_printf_float+0xbe>
 8009590:	f108 0801 	add.w	r8, r8, #1
 8009594:	e7e6      	b.n	8009564 <_printf_float+0x244>
 8009596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009598:	2b00      	cmp	r3, #0
 800959a:	dc39      	bgt.n	8009610 <_printf_float+0x2f0>
 800959c:	4a1b      	ldr	r2, [pc, #108]	; (800960c <_printf_float+0x2ec>)
 800959e:	2301      	movs	r3, #1
 80095a0:	4631      	mov	r1, r6
 80095a2:	4628      	mov	r0, r5
 80095a4:	47b8      	blx	r7
 80095a6:	3001      	adds	r0, #1
 80095a8:	f43f af19 	beq.w	80093de <_printf_float+0xbe>
 80095ac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80095b0:	4313      	orrs	r3, r2
 80095b2:	d102      	bne.n	80095ba <_printf_float+0x29a>
 80095b4:	6823      	ldr	r3, [r4, #0]
 80095b6:	07d9      	lsls	r1, r3, #31
 80095b8:	d5d8      	bpl.n	800956c <_printf_float+0x24c>
 80095ba:	ee18 3a10 	vmov	r3, s16
 80095be:	4652      	mov	r2, sl
 80095c0:	4631      	mov	r1, r6
 80095c2:	4628      	mov	r0, r5
 80095c4:	47b8      	blx	r7
 80095c6:	3001      	adds	r0, #1
 80095c8:	f43f af09 	beq.w	80093de <_printf_float+0xbe>
 80095cc:	f04f 0900 	mov.w	r9, #0
 80095d0:	f104 0a1a 	add.w	sl, r4, #26
 80095d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d6:	425b      	negs	r3, r3
 80095d8:	454b      	cmp	r3, r9
 80095da:	dc01      	bgt.n	80095e0 <_printf_float+0x2c0>
 80095dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095de:	e792      	b.n	8009506 <_printf_float+0x1e6>
 80095e0:	2301      	movs	r3, #1
 80095e2:	4652      	mov	r2, sl
 80095e4:	4631      	mov	r1, r6
 80095e6:	4628      	mov	r0, r5
 80095e8:	47b8      	blx	r7
 80095ea:	3001      	adds	r0, #1
 80095ec:	f43f aef7 	beq.w	80093de <_printf_float+0xbe>
 80095f0:	f109 0901 	add.w	r9, r9, #1
 80095f4:	e7ee      	b.n	80095d4 <_printf_float+0x2b4>
 80095f6:	bf00      	nop
 80095f8:	7fefffff 	.word	0x7fefffff
 80095fc:	0800eae8 	.word	0x0800eae8
 8009600:	0800eaec 	.word	0x0800eaec
 8009604:	0800eaf0 	.word	0x0800eaf0
 8009608:	0800eaf4 	.word	0x0800eaf4
 800960c:	0800eaf8 	.word	0x0800eaf8
 8009610:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009612:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009614:	429a      	cmp	r2, r3
 8009616:	bfa8      	it	ge
 8009618:	461a      	movge	r2, r3
 800961a:	2a00      	cmp	r2, #0
 800961c:	4691      	mov	r9, r2
 800961e:	dc37      	bgt.n	8009690 <_printf_float+0x370>
 8009620:	f04f 0b00 	mov.w	fp, #0
 8009624:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009628:	f104 021a 	add.w	r2, r4, #26
 800962c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800962e:	9305      	str	r3, [sp, #20]
 8009630:	eba3 0309 	sub.w	r3, r3, r9
 8009634:	455b      	cmp	r3, fp
 8009636:	dc33      	bgt.n	80096a0 <_printf_float+0x380>
 8009638:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800963c:	429a      	cmp	r2, r3
 800963e:	db3b      	blt.n	80096b8 <_printf_float+0x398>
 8009640:	6823      	ldr	r3, [r4, #0]
 8009642:	07da      	lsls	r2, r3, #31
 8009644:	d438      	bmi.n	80096b8 <_printf_float+0x398>
 8009646:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800964a:	eba2 0903 	sub.w	r9, r2, r3
 800964e:	9b05      	ldr	r3, [sp, #20]
 8009650:	1ad2      	subs	r2, r2, r3
 8009652:	4591      	cmp	r9, r2
 8009654:	bfa8      	it	ge
 8009656:	4691      	movge	r9, r2
 8009658:	f1b9 0f00 	cmp.w	r9, #0
 800965c:	dc35      	bgt.n	80096ca <_printf_float+0x3aa>
 800965e:	f04f 0800 	mov.w	r8, #0
 8009662:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009666:	f104 0a1a 	add.w	sl, r4, #26
 800966a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800966e:	1a9b      	subs	r3, r3, r2
 8009670:	eba3 0309 	sub.w	r3, r3, r9
 8009674:	4543      	cmp	r3, r8
 8009676:	f77f af79 	ble.w	800956c <_printf_float+0x24c>
 800967a:	2301      	movs	r3, #1
 800967c:	4652      	mov	r2, sl
 800967e:	4631      	mov	r1, r6
 8009680:	4628      	mov	r0, r5
 8009682:	47b8      	blx	r7
 8009684:	3001      	adds	r0, #1
 8009686:	f43f aeaa 	beq.w	80093de <_printf_float+0xbe>
 800968a:	f108 0801 	add.w	r8, r8, #1
 800968e:	e7ec      	b.n	800966a <_printf_float+0x34a>
 8009690:	4613      	mov	r3, r2
 8009692:	4631      	mov	r1, r6
 8009694:	4642      	mov	r2, r8
 8009696:	4628      	mov	r0, r5
 8009698:	47b8      	blx	r7
 800969a:	3001      	adds	r0, #1
 800969c:	d1c0      	bne.n	8009620 <_printf_float+0x300>
 800969e:	e69e      	b.n	80093de <_printf_float+0xbe>
 80096a0:	2301      	movs	r3, #1
 80096a2:	4631      	mov	r1, r6
 80096a4:	4628      	mov	r0, r5
 80096a6:	9205      	str	r2, [sp, #20]
 80096a8:	47b8      	blx	r7
 80096aa:	3001      	adds	r0, #1
 80096ac:	f43f ae97 	beq.w	80093de <_printf_float+0xbe>
 80096b0:	9a05      	ldr	r2, [sp, #20]
 80096b2:	f10b 0b01 	add.w	fp, fp, #1
 80096b6:	e7b9      	b.n	800962c <_printf_float+0x30c>
 80096b8:	ee18 3a10 	vmov	r3, s16
 80096bc:	4652      	mov	r2, sl
 80096be:	4631      	mov	r1, r6
 80096c0:	4628      	mov	r0, r5
 80096c2:	47b8      	blx	r7
 80096c4:	3001      	adds	r0, #1
 80096c6:	d1be      	bne.n	8009646 <_printf_float+0x326>
 80096c8:	e689      	b.n	80093de <_printf_float+0xbe>
 80096ca:	9a05      	ldr	r2, [sp, #20]
 80096cc:	464b      	mov	r3, r9
 80096ce:	4442      	add	r2, r8
 80096d0:	4631      	mov	r1, r6
 80096d2:	4628      	mov	r0, r5
 80096d4:	47b8      	blx	r7
 80096d6:	3001      	adds	r0, #1
 80096d8:	d1c1      	bne.n	800965e <_printf_float+0x33e>
 80096da:	e680      	b.n	80093de <_printf_float+0xbe>
 80096dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096de:	2a01      	cmp	r2, #1
 80096e0:	dc01      	bgt.n	80096e6 <_printf_float+0x3c6>
 80096e2:	07db      	lsls	r3, r3, #31
 80096e4:	d53a      	bpl.n	800975c <_printf_float+0x43c>
 80096e6:	2301      	movs	r3, #1
 80096e8:	4642      	mov	r2, r8
 80096ea:	4631      	mov	r1, r6
 80096ec:	4628      	mov	r0, r5
 80096ee:	47b8      	blx	r7
 80096f0:	3001      	adds	r0, #1
 80096f2:	f43f ae74 	beq.w	80093de <_printf_float+0xbe>
 80096f6:	ee18 3a10 	vmov	r3, s16
 80096fa:	4652      	mov	r2, sl
 80096fc:	4631      	mov	r1, r6
 80096fe:	4628      	mov	r0, r5
 8009700:	47b8      	blx	r7
 8009702:	3001      	adds	r0, #1
 8009704:	f43f ae6b 	beq.w	80093de <_printf_float+0xbe>
 8009708:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800970c:	2200      	movs	r2, #0
 800970e:	2300      	movs	r3, #0
 8009710:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009714:	f7f7 f9d8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009718:	b9d8      	cbnz	r0, 8009752 <_printf_float+0x432>
 800971a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800971e:	f108 0201 	add.w	r2, r8, #1
 8009722:	4631      	mov	r1, r6
 8009724:	4628      	mov	r0, r5
 8009726:	47b8      	blx	r7
 8009728:	3001      	adds	r0, #1
 800972a:	d10e      	bne.n	800974a <_printf_float+0x42a>
 800972c:	e657      	b.n	80093de <_printf_float+0xbe>
 800972e:	2301      	movs	r3, #1
 8009730:	4652      	mov	r2, sl
 8009732:	4631      	mov	r1, r6
 8009734:	4628      	mov	r0, r5
 8009736:	47b8      	blx	r7
 8009738:	3001      	adds	r0, #1
 800973a:	f43f ae50 	beq.w	80093de <_printf_float+0xbe>
 800973e:	f108 0801 	add.w	r8, r8, #1
 8009742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009744:	3b01      	subs	r3, #1
 8009746:	4543      	cmp	r3, r8
 8009748:	dcf1      	bgt.n	800972e <_printf_float+0x40e>
 800974a:	464b      	mov	r3, r9
 800974c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009750:	e6da      	b.n	8009508 <_printf_float+0x1e8>
 8009752:	f04f 0800 	mov.w	r8, #0
 8009756:	f104 0a1a 	add.w	sl, r4, #26
 800975a:	e7f2      	b.n	8009742 <_printf_float+0x422>
 800975c:	2301      	movs	r3, #1
 800975e:	4642      	mov	r2, r8
 8009760:	e7df      	b.n	8009722 <_printf_float+0x402>
 8009762:	2301      	movs	r3, #1
 8009764:	464a      	mov	r2, r9
 8009766:	4631      	mov	r1, r6
 8009768:	4628      	mov	r0, r5
 800976a:	47b8      	blx	r7
 800976c:	3001      	adds	r0, #1
 800976e:	f43f ae36 	beq.w	80093de <_printf_float+0xbe>
 8009772:	f108 0801 	add.w	r8, r8, #1
 8009776:	68e3      	ldr	r3, [r4, #12]
 8009778:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800977a:	1a5b      	subs	r3, r3, r1
 800977c:	4543      	cmp	r3, r8
 800977e:	dcf0      	bgt.n	8009762 <_printf_float+0x442>
 8009780:	e6f8      	b.n	8009574 <_printf_float+0x254>
 8009782:	f04f 0800 	mov.w	r8, #0
 8009786:	f104 0919 	add.w	r9, r4, #25
 800978a:	e7f4      	b.n	8009776 <_printf_float+0x456>

0800978c <_printf_common>:
 800978c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009790:	4616      	mov	r6, r2
 8009792:	4699      	mov	r9, r3
 8009794:	688a      	ldr	r2, [r1, #8]
 8009796:	690b      	ldr	r3, [r1, #16]
 8009798:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800979c:	4293      	cmp	r3, r2
 800979e:	bfb8      	it	lt
 80097a0:	4613      	movlt	r3, r2
 80097a2:	6033      	str	r3, [r6, #0]
 80097a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097a8:	4607      	mov	r7, r0
 80097aa:	460c      	mov	r4, r1
 80097ac:	b10a      	cbz	r2, 80097b2 <_printf_common+0x26>
 80097ae:	3301      	adds	r3, #1
 80097b0:	6033      	str	r3, [r6, #0]
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	0699      	lsls	r1, r3, #26
 80097b6:	bf42      	ittt	mi
 80097b8:	6833      	ldrmi	r3, [r6, #0]
 80097ba:	3302      	addmi	r3, #2
 80097bc:	6033      	strmi	r3, [r6, #0]
 80097be:	6825      	ldr	r5, [r4, #0]
 80097c0:	f015 0506 	ands.w	r5, r5, #6
 80097c4:	d106      	bne.n	80097d4 <_printf_common+0x48>
 80097c6:	f104 0a19 	add.w	sl, r4, #25
 80097ca:	68e3      	ldr	r3, [r4, #12]
 80097cc:	6832      	ldr	r2, [r6, #0]
 80097ce:	1a9b      	subs	r3, r3, r2
 80097d0:	42ab      	cmp	r3, r5
 80097d2:	dc26      	bgt.n	8009822 <_printf_common+0x96>
 80097d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097d8:	1e13      	subs	r3, r2, #0
 80097da:	6822      	ldr	r2, [r4, #0]
 80097dc:	bf18      	it	ne
 80097de:	2301      	movne	r3, #1
 80097e0:	0692      	lsls	r2, r2, #26
 80097e2:	d42b      	bmi.n	800983c <_printf_common+0xb0>
 80097e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097e8:	4649      	mov	r1, r9
 80097ea:	4638      	mov	r0, r7
 80097ec:	47c0      	blx	r8
 80097ee:	3001      	adds	r0, #1
 80097f0:	d01e      	beq.n	8009830 <_printf_common+0xa4>
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	6922      	ldr	r2, [r4, #16]
 80097f6:	f003 0306 	and.w	r3, r3, #6
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	bf02      	ittt	eq
 80097fe:	68e5      	ldreq	r5, [r4, #12]
 8009800:	6833      	ldreq	r3, [r6, #0]
 8009802:	1aed      	subeq	r5, r5, r3
 8009804:	68a3      	ldr	r3, [r4, #8]
 8009806:	bf0c      	ite	eq
 8009808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800980c:	2500      	movne	r5, #0
 800980e:	4293      	cmp	r3, r2
 8009810:	bfc4      	itt	gt
 8009812:	1a9b      	subgt	r3, r3, r2
 8009814:	18ed      	addgt	r5, r5, r3
 8009816:	2600      	movs	r6, #0
 8009818:	341a      	adds	r4, #26
 800981a:	42b5      	cmp	r5, r6
 800981c:	d11a      	bne.n	8009854 <_printf_common+0xc8>
 800981e:	2000      	movs	r0, #0
 8009820:	e008      	b.n	8009834 <_printf_common+0xa8>
 8009822:	2301      	movs	r3, #1
 8009824:	4652      	mov	r2, sl
 8009826:	4649      	mov	r1, r9
 8009828:	4638      	mov	r0, r7
 800982a:	47c0      	blx	r8
 800982c:	3001      	adds	r0, #1
 800982e:	d103      	bne.n	8009838 <_printf_common+0xac>
 8009830:	f04f 30ff 	mov.w	r0, #4294967295
 8009834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009838:	3501      	adds	r5, #1
 800983a:	e7c6      	b.n	80097ca <_printf_common+0x3e>
 800983c:	18e1      	adds	r1, r4, r3
 800983e:	1c5a      	adds	r2, r3, #1
 8009840:	2030      	movs	r0, #48	; 0x30
 8009842:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009846:	4422      	add	r2, r4
 8009848:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800984c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009850:	3302      	adds	r3, #2
 8009852:	e7c7      	b.n	80097e4 <_printf_common+0x58>
 8009854:	2301      	movs	r3, #1
 8009856:	4622      	mov	r2, r4
 8009858:	4649      	mov	r1, r9
 800985a:	4638      	mov	r0, r7
 800985c:	47c0      	blx	r8
 800985e:	3001      	adds	r0, #1
 8009860:	d0e6      	beq.n	8009830 <_printf_common+0xa4>
 8009862:	3601      	adds	r6, #1
 8009864:	e7d9      	b.n	800981a <_printf_common+0x8e>
	...

08009868 <_printf_i>:
 8009868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800986c:	7e0f      	ldrb	r7, [r1, #24]
 800986e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009870:	2f78      	cmp	r7, #120	; 0x78
 8009872:	4691      	mov	r9, r2
 8009874:	4680      	mov	r8, r0
 8009876:	460c      	mov	r4, r1
 8009878:	469a      	mov	sl, r3
 800987a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800987e:	d807      	bhi.n	8009890 <_printf_i+0x28>
 8009880:	2f62      	cmp	r7, #98	; 0x62
 8009882:	d80a      	bhi.n	800989a <_printf_i+0x32>
 8009884:	2f00      	cmp	r7, #0
 8009886:	f000 80d4 	beq.w	8009a32 <_printf_i+0x1ca>
 800988a:	2f58      	cmp	r7, #88	; 0x58
 800988c:	f000 80c0 	beq.w	8009a10 <_printf_i+0x1a8>
 8009890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009894:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009898:	e03a      	b.n	8009910 <_printf_i+0xa8>
 800989a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800989e:	2b15      	cmp	r3, #21
 80098a0:	d8f6      	bhi.n	8009890 <_printf_i+0x28>
 80098a2:	a101      	add	r1, pc, #4	; (adr r1, 80098a8 <_printf_i+0x40>)
 80098a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098a8:	08009901 	.word	0x08009901
 80098ac:	08009915 	.word	0x08009915
 80098b0:	08009891 	.word	0x08009891
 80098b4:	08009891 	.word	0x08009891
 80098b8:	08009891 	.word	0x08009891
 80098bc:	08009891 	.word	0x08009891
 80098c0:	08009915 	.word	0x08009915
 80098c4:	08009891 	.word	0x08009891
 80098c8:	08009891 	.word	0x08009891
 80098cc:	08009891 	.word	0x08009891
 80098d0:	08009891 	.word	0x08009891
 80098d4:	08009a19 	.word	0x08009a19
 80098d8:	08009941 	.word	0x08009941
 80098dc:	080099d3 	.word	0x080099d3
 80098e0:	08009891 	.word	0x08009891
 80098e4:	08009891 	.word	0x08009891
 80098e8:	08009a3b 	.word	0x08009a3b
 80098ec:	08009891 	.word	0x08009891
 80098f0:	08009941 	.word	0x08009941
 80098f4:	08009891 	.word	0x08009891
 80098f8:	08009891 	.word	0x08009891
 80098fc:	080099db 	.word	0x080099db
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	1d1a      	adds	r2, r3, #4
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	602a      	str	r2, [r5, #0]
 8009908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800990c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009910:	2301      	movs	r3, #1
 8009912:	e09f      	b.n	8009a54 <_printf_i+0x1ec>
 8009914:	6820      	ldr	r0, [r4, #0]
 8009916:	682b      	ldr	r3, [r5, #0]
 8009918:	0607      	lsls	r7, r0, #24
 800991a:	f103 0104 	add.w	r1, r3, #4
 800991e:	6029      	str	r1, [r5, #0]
 8009920:	d501      	bpl.n	8009926 <_printf_i+0xbe>
 8009922:	681e      	ldr	r6, [r3, #0]
 8009924:	e003      	b.n	800992e <_printf_i+0xc6>
 8009926:	0646      	lsls	r6, r0, #25
 8009928:	d5fb      	bpl.n	8009922 <_printf_i+0xba>
 800992a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800992e:	2e00      	cmp	r6, #0
 8009930:	da03      	bge.n	800993a <_printf_i+0xd2>
 8009932:	232d      	movs	r3, #45	; 0x2d
 8009934:	4276      	negs	r6, r6
 8009936:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800993a:	485a      	ldr	r0, [pc, #360]	; (8009aa4 <_printf_i+0x23c>)
 800993c:	230a      	movs	r3, #10
 800993e:	e012      	b.n	8009966 <_printf_i+0xfe>
 8009940:	682b      	ldr	r3, [r5, #0]
 8009942:	6820      	ldr	r0, [r4, #0]
 8009944:	1d19      	adds	r1, r3, #4
 8009946:	6029      	str	r1, [r5, #0]
 8009948:	0605      	lsls	r5, r0, #24
 800994a:	d501      	bpl.n	8009950 <_printf_i+0xe8>
 800994c:	681e      	ldr	r6, [r3, #0]
 800994e:	e002      	b.n	8009956 <_printf_i+0xee>
 8009950:	0641      	lsls	r1, r0, #25
 8009952:	d5fb      	bpl.n	800994c <_printf_i+0xe4>
 8009954:	881e      	ldrh	r6, [r3, #0]
 8009956:	4853      	ldr	r0, [pc, #332]	; (8009aa4 <_printf_i+0x23c>)
 8009958:	2f6f      	cmp	r7, #111	; 0x6f
 800995a:	bf0c      	ite	eq
 800995c:	2308      	moveq	r3, #8
 800995e:	230a      	movne	r3, #10
 8009960:	2100      	movs	r1, #0
 8009962:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009966:	6865      	ldr	r5, [r4, #4]
 8009968:	60a5      	str	r5, [r4, #8]
 800996a:	2d00      	cmp	r5, #0
 800996c:	bfa2      	ittt	ge
 800996e:	6821      	ldrge	r1, [r4, #0]
 8009970:	f021 0104 	bicge.w	r1, r1, #4
 8009974:	6021      	strge	r1, [r4, #0]
 8009976:	b90e      	cbnz	r6, 800997c <_printf_i+0x114>
 8009978:	2d00      	cmp	r5, #0
 800997a:	d04b      	beq.n	8009a14 <_printf_i+0x1ac>
 800997c:	4615      	mov	r5, r2
 800997e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009982:	fb03 6711 	mls	r7, r3, r1, r6
 8009986:	5dc7      	ldrb	r7, [r0, r7]
 8009988:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800998c:	4637      	mov	r7, r6
 800998e:	42bb      	cmp	r3, r7
 8009990:	460e      	mov	r6, r1
 8009992:	d9f4      	bls.n	800997e <_printf_i+0x116>
 8009994:	2b08      	cmp	r3, #8
 8009996:	d10b      	bne.n	80099b0 <_printf_i+0x148>
 8009998:	6823      	ldr	r3, [r4, #0]
 800999a:	07de      	lsls	r6, r3, #31
 800999c:	d508      	bpl.n	80099b0 <_printf_i+0x148>
 800999e:	6923      	ldr	r3, [r4, #16]
 80099a0:	6861      	ldr	r1, [r4, #4]
 80099a2:	4299      	cmp	r1, r3
 80099a4:	bfde      	ittt	le
 80099a6:	2330      	movle	r3, #48	; 0x30
 80099a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099b0:	1b52      	subs	r2, r2, r5
 80099b2:	6122      	str	r2, [r4, #16]
 80099b4:	f8cd a000 	str.w	sl, [sp]
 80099b8:	464b      	mov	r3, r9
 80099ba:	aa03      	add	r2, sp, #12
 80099bc:	4621      	mov	r1, r4
 80099be:	4640      	mov	r0, r8
 80099c0:	f7ff fee4 	bl	800978c <_printf_common>
 80099c4:	3001      	adds	r0, #1
 80099c6:	d14a      	bne.n	8009a5e <_printf_i+0x1f6>
 80099c8:	f04f 30ff 	mov.w	r0, #4294967295
 80099cc:	b004      	add	sp, #16
 80099ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	f043 0320 	orr.w	r3, r3, #32
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	4833      	ldr	r0, [pc, #204]	; (8009aa8 <_printf_i+0x240>)
 80099dc:	2778      	movs	r7, #120	; 0x78
 80099de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	6829      	ldr	r1, [r5, #0]
 80099e6:	061f      	lsls	r7, r3, #24
 80099e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80099ec:	d402      	bmi.n	80099f4 <_printf_i+0x18c>
 80099ee:	065f      	lsls	r7, r3, #25
 80099f0:	bf48      	it	mi
 80099f2:	b2b6      	uxthmi	r6, r6
 80099f4:	07df      	lsls	r7, r3, #31
 80099f6:	bf48      	it	mi
 80099f8:	f043 0320 	orrmi.w	r3, r3, #32
 80099fc:	6029      	str	r1, [r5, #0]
 80099fe:	bf48      	it	mi
 8009a00:	6023      	strmi	r3, [r4, #0]
 8009a02:	b91e      	cbnz	r6, 8009a0c <_printf_i+0x1a4>
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	f023 0320 	bic.w	r3, r3, #32
 8009a0a:	6023      	str	r3, [r4, #0]
 8009a0c:	2310      	movs	r3, #16
 8009a0e:	e7a7      	b.n	8009960 <_printf_i+0xf8>
 8009a10:	4824      	ldr	r0, [pc, #144]	; (8009aa4 <_printf_i+0x23c>)
 8009a12:	e7e4      	b.n	80099de <_printf_i+0x176>
 8009a14:	4615      	mov	r5, r2
 8009a16:	e7bd      	b.n	8009994 <_printf_i+0x12c>
 8009a18:	682b      	ldr	r3, [r5, #0]
 8009a1a:	6826      	ldr	r6, [r4, #0]
 8009a1c:	6961      	ldr	r1, [r4, #20]
 8009a1e:	1d18      	adds	r0, r3, #4
 8009a20:	6028      	str	r0, [r5, #0]
 8009a22:	0635      	lsls	r5, r6, #24
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	d501      	bpl.n	8009a2c <_printf_i+0x1c4>
 8009a28:	6019      	str	r1, [r3, #0]
 8009a2a:	e002      	b.n	8009a32 <_printf_i+0x1ca>
 8009a2c:	0670      	lsls	r0, r6, #25
 8009a2e:	d5fb      	bpl.n	8009a28 <_printf_i+0x1c0>
 8009a30:	8019      	strh	r1, [r3, #0]
 8009a32:	2300      	movs	r3, #0
 8009a34:	6123      	str	r3, [r4, #16]
 8009a36:	4615      	mov	r5, r2
 8009a38:	e7bc      	b.n	80099b4 <_printf_i+0x14c>
 8009a3a:	682b      	ldr	r3, [r5, #0]
 8009a3c:	1d1a      	adds	r2, r3, #4
 8009a3e:	602a      	str	r2, [r5, #0]
 8009a40:	681d      	ldr	r5, [r3, #0]
 8009a42:	6862      	ldr	r2, [r4, #4]
 8009a44:	2100      	movs	r1, #0
 8009a46:	4628      	mov	r0, r5
 8009a48:	f7f6 fbc2 	bl	80001d0 <memchr>
 8009a4c:	b108      	cbz	r0, 8009a52 <_printf_i+0x1ea>
 8009a4e:	1b40      	subs	r0, r0, r5
 8009a50:	6060      	str	r0, [r4, #4]
 8009a52:	6863      	ldr	r3, [r4, #4]
 8009a54:	6123      	str	r3, [r4, #16]
 8009a56:	2300      	movs	r3, #0
 8009a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a5c:	e7aa      	b.n	80099b4 <_printf_i+0x14c>
 8009a5e:	6923      	ldr	r3, [r4, #16]
 8009a60:	462a      	mov	r2, r5
 8009a62:	4649      	mov	r1, r9
 8009a64:	4640      	mov	r0, r8
 8009a66:	47d0      	blx	sl
 8009a68:	3001      	adds	r0, #1
 8009a6a:	d0ad      	beq.n	80099c8 <_printf_i+0x160>
 8009a6c:	6823      	ldr	r3, [r4, #0]
 8009a6e:	079b      	lsls	r3, r3, #30
 8009a70:	d413      	bmi.n	8009a9a <_printf_i+0x232>
 8009a72:	68e0      	ldr	r0, [r4, #12]
 8009a74:	9b03      	ldr	r3, [sp, #12]
 8009a76:	4298      	cmp	r0, r3
 8009a78:	bfb8      	it	lt
 8009a7a:	4618      	movlt	r0, r3
 8009a7c:	e7a6      	b.n	80099cc <_printf_i+0x164>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	4632      	mov	r2, r6
 8009a82:	4649      	mov	r1, r9
 8009a84:	4640      	mov	r0, r8
 8009a86:	47d0      	blx	sl
 8009a88:	3001      	adds	r0, #1
 8009a8a:	d09d      	beq.n	80099c8 <_printf_i+0x160>
 8009a8c:	3501      	adds	r5, #1
 8009a8e:	68e3      	ldr	r3, [r4, #12]
 8009a90:	9903      	ldr	r1, [sp, #12]
 8009a92:	1a5b      	subs	r3, r3, r1
 8009a94:	42ab      	cmp	r3, r5
 8009a96:	dcf2      	bgt.n	8009a7e <_printf_i+0x216>
 8009a98:	e7eb      	b.n	8009a72 <_printf_i+0x20a>
 8009a9a:	2500      	movs	r5, #0
 8009a9c:	f104 0619 	add.w	r6, r4, #25
 8009aa0:	e7f5      	b.n	8009a8e <_printf_i+0x226>
 8009aa2:	bf00      	nop
 8009aa4:	0800eafa 	.word	0x0800eafa
 8009aa8:	0800eb0b 	.word	0x0800eb0b

08009aac <std>:
 8009aac:	2300      	movs	r3, #0
 8009aae:	b510      	push	{r4, lr}
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8009ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009aba:	6083      	str	r3, [r0, #8]
 8009abc:	8181      	strh	r1, [r0, #12]
 8009abe:	6643      	str	r3, [r0, #100]	; 0x64
 8009ac0:	81c2      	strh	r2, [r0, #14]
 8009ac2:	6183      	str	r3, [r0, #24]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	2208      	movs	r2, #8
 8009ac8:	305c      	adds	r0, #92	; 0x5c
 8009aca:	f000 f930 	bl	8009d2e <memset>
 8009ace:	4b05      	ldr	r3, [pc, #20]	; (8009ae4 <std+0x38>)
 8009ad0:	6263      	str	r3, [r4, #36]	; 0x24
 8009ad2:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <std+0x3c>)
 8009ad4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ad6:	4b05      	ldr	r3, [pc, #20]	; (8009aec <std+0x40>)
 8009ad8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ada:	4b05      	ldr	r3, [pc, #20]	; (8009af0 <std+0x44>)
 8009adc:	6224      	str	r4, [r4, #32]
 8009ade:	6323      	str	r3, [r4, #48]	; 0x30
 8009ae0:	bd10      	pop	{r4, pc}
 8009ae2:	bf00      	nop
 8009ae4:	08009c75 	.word	0x08009c75
 8009ae8:	08009c97 	.word	0x08009c97
 8009aec:	08009ccf 	.word	0x08009ccf
 8009af0:	08009cf3 	.word	0x08009cf3

08009af4 <stdio_exit_handler>:
 8009af4:	4a02      	ldr	r2, [pc, #8]	; (8009b00 <stdio_exit_handler+0xc>)
 8009af6:	4903      	ldr	r1, [pc, #12]	; (8009b04 <stdio_exit_handler+0x10>)
 8009af8:	4803      	ldr	r0, [pc, #12]	; (8009b08 <stdio_exit_handler+0x14>)
 8009afa:	f000 b869 	b.w	8009bd0 <_fwalk_sglue>
 8009afe:	bf00      	nop
 8009b00:	20000060 	.word	0x20000060
 8009b04:	0800b731 	.word	0x0800b731
 8009b08:	2000006c 	.word	0x2000006c

08009b0c <cleanup_stdio>:
 8009b0c:	6841      	ldr	r1, [r0, #4]
 8009b0e:	4b0c      	ldr	r3, [pc, #48]	; (8009b40 <cleanup_stdio+0x34>)
 8009b10:	4299      	cmp	r1, r3
 8009b12:	b510      	push	{r4, lr}
 8009b14:	4604      	mov	r4, r0
 8009b16:	d001      	beq.n	8009b1c <cleanup_stdio+0x10>
 8009b18:	f001 fe0a 	bl	800b730 <_fflush_r>
 8009b1c:	68a1      	ldr	r1, [r4, #8]
 8009b1e:	4b09      	ldr	r3, [pc, #36]	; (8009b44 <cleanup_stdio+0x38>)
 8009b20:	4299      	cmp	r1, r3
 8009b22:	d002      	beq.n	8009b2a <cleanup_stdio+0x1e>
 8009b24:	4620      	mov	r0, r4
 8009b26:	f001 fe03 	bl	800b730 <_fflush_r>
 8009b2a:	68e1      	ldr	r1, [r4, #12]
 8009b2c:	4b06      	ldr	r3, [pc, #24]	; (8009b48 <cleanup_stdio+0x3c>)
 8009b2e:	4299      	cmp	r1, r3
 8009b30:	d004      	beq.n	8009b3c <cleanup_stdio+0x30>
 8009b32:	4620      	mov	r0, r4
 8009b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b38:	f001 bdfa 	b.w	800b730 <_fflush_r>
 8009b3c:	bd10      	pop	{r4, pc}
 8009b3e:	bf00      	nop
 8009b40:	200008bc 	.word	0x200008bc
 8009b44:	20000924 	.word	0x20000924
 8009b48:	2000098c 	.word	0x2000098c

08009b4c <global_stdio_init.part.0>:
 8009b4c:	b510      	push	{r4, lr}
 8009b4e:	4b0b      	ldr	r3, [pc, #44]	; (8009b7c <global_stdio_init.part.0+0x30>)
 8009b50:	4c0b      	ldr	r4, [pc, #44]	; (8009b80 <global_stdio_init.part.0+0x34>)
 8009b52:	4a0c      	ldr	r2, [pc, #48]	; (8009b84 <global_stdio_init.part.0+0x38>)
 8009b54:	601a      	str	r2, [r3, #0]
 8009b56:	4620      	mov	r0, r4
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2104      	movs	r1, #4
 8009b5c:	f7ff ffa6 	bl	8009aac <std>
 8009b60:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009b64:	2201      	movs	r2, #1
 8009b66:	2109      	movs	r1, #9
 8009b68:	f7ff ffa0 	bl	8009aac <std>
 8009b6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009b70:	2202      	movs	r2, #2
 8009b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b76:	2112      	movs	r1, #18
 8009b78:	f7ff bf98 	b.w	8009aac <std>
 8009b7c:	200009f4 	.word	0x200009f4
 8009b80:	200008bc 	.word	0x200008bc
 8009b84:	08009af5 	.word	0x08009af5

08009b88 <__sfp_lock_acquire>:
 8009b88:	4801      	ldr	r0, [pc, #4]	; (8009b90 <__sfp_lock_acquire+0x8>)
 8009b8a:	f000 b9a1 	b.w	8009ed0 <__retarget_lock_acquire_recursive>
 8009b8e:	bf00      	nop
 8009b90:	200009fd 	.word	0x200009fd

08009b94 <__sfp_lock_release>:
 8009b94:	4801      	ldr	r0, [pc, #4]	; (8009b9c <__sfp_lock_release+0x8>)
 8009b96:	f000 b99c 	b.w	8009ed2 <__retarget_lock_release_recursive>
 8009b9a:	bf00      	nop
 8009b9c:	200009fd 	.word	0x200009fd

08009ba0 <__sinit>:
 8009ba0:	b510      	push	{r4, lr}
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	f7ff fff0 	bl	8009b88 <__sfp_lock_acquire>
 8009ba8:	6a23      	ldr	r3, [r4, #32]
 8009baa:	b11b      	cbz	r3, 8009bb4 <__sinit+0x14>
 8009bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bb0:	f7ff bff0 	b.w	8009b94 <__sfp_lock_release>
 8009bb4:	4b04      	ldr	r3, [pc, #16]	; (8009bc8 <__sinit+0x28>)
 8009bb6:	6223      	str	r3, [r4, #32]
 8009bb8:	4b04      	ldr	r3, [pc, #16]	; (8009bcc <__sinit+0x2c>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1f5      	bne.n	8009bac <__sinit+0xc>
 8009bc0:	f7ff ffc4 	bl	8009b4c <global_stdio_init.part.0>
 8009bc4:	e7f2      	b.n	8009bac <__sinit+0xc>
 8009bc6:	bf00      	nop
 8009bc8:	08009b0d 	.word	0x08009b0d
 8009bcc:	200009f4 	.word	0x200009f4

08009bd0 <_fwalk_sglue>:
 8009bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bd4:	4607      	mov	r7, r0
 8009bd6:	4688      	mov	r8, r1
 8009bd8:	4614      	mov	r4, r2
 8009bda:	2600      	movs	r6, #0
 8009bdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009be0:	f1b9 0901 	subs.w	r9, r9, #1
 8009be4:	d505      	bpl.n	8009bf2 <_fwalk_sglue+0x22>
 8009be6:	6824      	ldr	r4, [r4, #0]
 8009be8:	2c00      	cmp	r4, #0
 8009bea:	d1f7      	bne.n	8009bdc <_fwalk_sglue+0xc>
 8009bec:	4630      	mov	r0, r6
 8009bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bf2:	89ab      	ldrh	r3, [r5, #12]
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d907      	bls.n	8009c08 <_fwalk_sglue+0x38>
 8009bf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	d003      	beq.n	8009c08 <_fwalk_sglue+0x38>
 8009c00:	4629      	mov	r1, r5
 8009c02:	4638      	mov	r0, r7
 8009c04:	47c0      	blx	r8
 8009c06:	4306      	orrs	r6, r0
 8009c08:	3568      	adds	r5, #104	; 0x68
 8009c0a:	e7e9      	b.n	8009be0 <_fwalk_sglue+0x10>

08009c0c <sniprintf>:
 8009c0c:	b40c      	push	{r2, r3}
 8009c0e:	b530      	push	{r4, r5, lr}
 8009c10:	4b17      	ldr	r3, [pc, #92]	; (8009c70 <sniprintf+0x64>)
 8009c12:	1e0c      	subs	r4, r1, #0
 8009c14:	681d      	ldr	r5, [r3, #0]
 8009c16:	b09d      	sub	sp, #116	; 0x74
 8009c18:	da08      	bge.n	8009c2c <sniprintf+0x20>
 8009c1a:	238b      	movs	r3, #139	; 0x8b
 8009c1c:	602b      	str	r3, [r5, #0]
 8009c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c22:	b01d      	add	sp, #116	; 0x74
 8009c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c28:	b002      	add	sp, #8
 8009c2a:	4770      	bx	lr
 8009c2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009c30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009c34:	bf14      	ite	ne
 8009c36:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009c3a:	4623      	moveq	r3, r4
 8009c3c:	9304      	str	r3, [sp, #16]
 8009c3e:	9307      	str	r3, [sp, #28]
 8009c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c44:	9002      	str	r0, [sp, #8]
 8009c46:	9006      	str	r0, [sp, #24]
 8009c48:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c4e:	ab21      	add	r3, sp, #132	; 0x84
 8009c50:	a902      	add	r1, sp, #8
 8009c52:	4628      	mov	r0, r5
 8009c54:	9301      	str	r3, [sp, #4]
 8009c56:	f001 fbe7 	bl	800b428 <_svfiprintf_r>
 8009c5a:	1c43      	adds	r3, r0, #1
 8009c5c:	bfbc      	itt	lt
 8009c5e:	238b      	movlt	r3, #139	; 0x8b
 8009c60:	602b      	strlt	r3, [r5, #0]
 8009c62:	2c00      	cmp	r4, #0
 8009c64:	d0dd      	beq.n	8009c22 <sniprintf+0x16>
 8009c66:	9b02      	ldr	r3, [sp, #8]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	701a      	strb	r2, [r3, #0]
 8009c6c:	e7d9      	b.n	8009c22 <sniprintf+0x16>
 8009c6e:	bf00      	nop
 8009c70:	200000b8 	.word	0x200000b8

08009c74 <__sread>:
 8009c74:	b510      	push	{r4, lr}
 8009c76:	460c      	mov	r4, r1
 8009c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c7c:	f000 f8b6 	bl	8009dec <_read_r>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	bfab      	itete	ge
 8009c84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c86:	89a3      	ldrhlt	r3, [r4, #12]
 8009c88:	181b      	addge	r3, r3, r0
 8009c8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c8e:	bfac      	ite	ge
 8009c90:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c92:	81a3      	strhlt	r3, [r4, #12]
 8009c94:	bd10      	pop	{r4, pc}

08009c96 <__swrite>:
 8009c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c9a:	461f      	mov	r7, r3
 8009c9c:	898b      	ldrh	r3, [r1, #12]
 8009c9e:	05db      	lsls	r3, r3, #23
 8009ca0:	4605      	mov	r5, r0
 8009ca2:	460c      	mov	r4, r1
 8009ca4:	4616      	mov	r6, r2
 8009ca6:	d505      	bpl.n	8009cb4 <__swrite+0x1e>
 8009ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cac:	2302      	movs	r3, #2
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f000 f88a 	bl	8009dc8 <_lseek_r>
 8009cb4:	89a3      	ldrh	r3, [r4, #12]
 8009cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cbe:	81a3      	strh	r3, [r4, #12]
 8009cc0:	4632      	mov	r2, r6
 8009cc2:	463b      	mov	r3, r7
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cca:	f000 b8c5 	b.w	8009e58 <_write_r>

08009cce <__sseek>:
 8009cce:	b510      	push	{r4, lr}
 8009cd0:	460c      	mov	r4, r1
 8009cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd6:	f000 f877 	bl	8009dc8 <_lseek_r>
 8009cda:	1c43      	adds	r3, r0, #1
 8009cdc:	89a3      	ldrh	r3, [r4, #12]
 8009cde:	bf15      	itete	ne
 8009ce0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ce2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ce6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009cea:	81a3      	strheq	r3, [r4, #12]
 8009cec:	bf18      	it	ne
 8009cee:	81a3      	strhne	r3, [r4, #12]
 8009cf0:	bd10      	pop	{r4, pc}

08009cf2 <__sclose>:
 8009cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf6:	f000 b857 	b.w	8009da8 <_close_r>

08009cfa <memmove>:
 8009cfa:	4288      	cmp	r0, r1
 8009cfc:	b510      	push	{r4, lr}
 8009cfe:	eb01 0402 	add.w	r4, r1, r2
 8009d02:	d902      	bls.n	8009d0a <memmove+0x10>
 8009d04:	4284      	cmp	r4, r0
 8009d06:	4623      	mov	r3, r4
 8009d08:	d807      	bhi.n	8009d1a <memmove+0x20>
 8009d0a:	1e43      	subs	r3, r0, #1
 8009d0c:	42a1      	cmp	r1, r4
 8009d0e:	d008      	beq.n	8009d22 <memmove+0x28>
 8009d10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d18:	e7f8      	b.n	8009d0c <memmove+0x12>
 8009d1a:	4402      	add	r2, r0
 8009d1c:	4601      	mov	r1, r0
 8009d1e:	428a      	cmp	r2, r1
 8009d20:	d100      	bne.n	8009d24 <memmove+0x2a>
 8009d22:	bd10      	pop	{r4, pc}
 8009d24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d2c:	e7f7      	b.n	8009d1e <memmove+0x24>

08009d2e <memset>:
 8009d2e:	4402      	add	r2, r0
 8009d30:	4603      	mov	r3, r0
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d100      	bne.n	8009d38 <memset+0xa>
 8009d36:	4770      	bx	lr
 8009d38:	f803 1b01 	strb.w	r1, [r3], #1
 8009d3c:	e7f9      	b.n	8009d32 <memset+0x4>

08009d3e <_raise_r>:
 8009d3e:	291f      	cmp	r1, #31
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	4604      	mov	r4, r0
 8009d44:	460d      	mov	r5, r1
 8009d46:	d904      	bls.n	8009d52 <_raise_r+0x14>
 8009d48:	2316      	movs	r3, #22
 8009d4a:	6003      	str	r3, [r0, #0]
 8009d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d50:	bd38      	pop	{r3, r4, r5, pc}
 8009d52:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009d54:	b112      	cbz	r2, 8009d5c <_raise_r+0x1e>
 8009d56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d5a:	b94b      	cbnz	r3, 8009d70 <_raise_r+0x32>
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f000 f869 	bl	8009e34 <_getpid_r>
 8009d62:	462a      	mov	r2, r5
 8009d64:	4601      	mov	r1, r0
 8009d66:	4620      	mov	r0, r4
 8009d68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d6c:	f000 b850 	b.w	8009e10 <_kill_r>
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d00a      	beq.n	8009d8a <_raise_r+0x4c>
 8009d74:	1c59      	adds	r1, r3, #1
 8009d76:	d103      	bne.n	8009d80 <_raise_r+0x42>
 8009d78:	2316      	movs	r3, #22
 8009d7a:	6003      	str	r3, [r0, #0]
 8009d7c:	2001      	movs	r0, #1
 8009d7e:	e7e7      	b.n	8009d50 <_raise_r+0x12>
 8009d80:	2400      	movs	r4, #0
 8009d82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d86:	4628      	mov	r0, r5
 8009d88:	4798      	blx	r3
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	e7e0      	b.n	8009d50 <_raise_r+0x12>
	...

08009d90 <raise>:
 8009d90:	4b02      	ldr	r3, [pc, #8]	; (8009d9c <raise+0xc>)
 8009d92:	4601      	mov	r1, r0
 8009d94:	6818      	ldr	r0, [r3, #0]
 8009d96:	f7ff bfd2 	b.w	8009d3e <_raise_r>
 8009d9a:	bf00      	nop
 8009d9c:	200000b8 	.word	0x200000b8

08009da0 <_localeconv_r>:
 8009da0:	4800      	ldr	r0, [pc, #0]	; (8009da4 <_localeconv_r+0x4>)
 8009da2:	4770      	bx	lr
 8009da4:	200001ac 	.word	0x200001ac

08009da8 <_close_r>:
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	4d06      	ldr	r5, [pc, #24]	; (8009dc4 <_close_r+0x1c>)
 8009dac:	2300      	movs	r3, #0
 8009dae:	4604      	mov	r4, r0
 8009db0:	4608      	mov	r0, r1
 8009db2:	602b      	str	r3, [r5, #0]
 8009db4:	f7f8 faa3 	bl	80022fe <_close>
 8009db8:	1c43      	adds	r3, r0, #1
 8009dba:	d102      	bne.n	8009dc2 <_close_r+0x1a>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	b103      	cbz	r3, 8009dc2 <_close_r+0x1a>
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	200009f8 	.word	0x200009f8

08009dc8 <_lseek_r>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	4d07      	ldr	r5, [pc, #28]	; (8009de8 <_lseek_r+0x20>)
 8009dcc:	4604      	mov	r4, r0
 8009dce:	4608      	mov	r0, r1
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	602a      	str	r2, [r5, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	f7f8 fab8 	bl	800234c <_lseek>
 8009ddc:	1c43      	adds	r3, r0, #1
 8009dde:	d102      	bne.n	8009de6 <_lseek_r+0x1e>
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	b103      	cbz	r3, 8009de6 <_lseek_r+0x1e>
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	bd38      	pop	{r3, r4, r5, pc}
 8009de8:	200009f8 	.word	0x200009f8

08009dec <_read_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4d07      	ldr	r5, [pc, #28]	; (8009e0c <_read_r+0x20>)
 8009df0:	4604      	mov	r4, r0
 8009df2:	4608      	mov	r0, r1
 8009df4:	4611      	mov	r1, r2
 8009df6:	2200      	movs	r2, #0
 8009df8:	602a      	str	r2, [r5, #0]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	f7f8 fa46 	bl	800228c <_read>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d102      	bne.n	8009e0a <_read_r+0x1e>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	b103      	cbz	r3, 8009e0a <_read_r+0x1e>
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	bd38      	pop	{r3, r4, r5, pc}
 8009e0c:	200009f8 	.word	0x200009f8

08009e10 <_kill_r>:
 8009e10:	b538      	push	{r3, r4, r5, lr}
 8009e12:	4d07      	ldr	r5, [pc, #28]	; (8009e30 <_kill_r+0x20>)
 8009e14:	2300      	movs	r3, #0
 8009e16:	4604      	mov	r4, r0
 8009e18:	4608      	mov	r0, r1
 8009e1a:	4611      	mov	r1, r2
 8009e1c:	602b      	str	r3, [r5, #0]
 8009e1e:	f7f8 fa1b 	bl	8002258 <_kill>
 8009e22:	1c43      	adds	r3, r0, #1
 8009e24:	d102      	bne.n	8009e2c <_kill_r+0x1c>
 8009e26:	682b      	ldr	r3, [r5, #0]
 8009e28:	b103      	cbz	r3, 8009e2c <_kill_r+0x1c>
 8009e2a:	6023      	str	r3, [r4, #0]
 8009e2c:	bd38      	pop	{r3, r4, r5, pc}
 8009e2e:	bf00      	nop
 8009e30:	200009f8 	.word	0x200009f8

08009e34 <_getpid_r>:
 8009e34:	f7f8 ba08 	b.w	8002248 <_getpid>

08009e38 <_sbrk_r>:
 8009e38:	b538      	push	{r3, r4, r5, lr}
 8009e3a:	4d06      	ldr	r5, [pc, #24]	; (8009e54 <_sbrk_r+0x1c>)
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	4604      	mov	r4, r0
 8009e40:	4608      	mov	r0, r1
 8009e42:	602b      	str	r3, [r5, #0]
 8009e44:	f7f8 fa90 	bl	8002368 <_sbrk>
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	d102      	bne.n	8009e52 <_sbrk_r+0x1a>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	b103      	cbz	r3, 8009e52 <_sbrk_r+0x1a>
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	200009f8 	.word	0x200009f8

08009e58 <_write_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4d07      	ldr	r5, [pc, #28]	; (8009e78 <_write_r+0x20>)
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	4608      	mov	r0, r1
 8009e60:	4611      	mov	r1, r2
 8009e62:	2200      	movs	r2, #0
 8009e64:	602a      	str	r2, [r5, #0]
 8009e66:	461a      	mov	r2, r3
 8009e68:	f7f8 fa2d 	bl	80022c6 <_write>
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	d102      	bne.n	8009e76 <_write_r+0x1e>
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	b103      	cbz	r3, 8009e76 <_write_r+0x1e>
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	bd38      	pop	{r3, r4, r5, pc}
 8009e78:	200009f8 	.word	0x200009f8

08009e7c <__errno>:
 8009e7c:	4b01      	ldr	r3, [pc, #4]	; (8009e84 <__errno+0x8>)
 8009e7e:	6818      	ldr	r0, [r3, #0]
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	200000b8 	.word	0x200000b8

08009e88 <__libc_init_array>:
 8009e88:	b570      	push	{r4, r5, r6, lr}
 8009e8a:	4d0d      	ldr	r5, [pc, #52]	; (8009ec0 <__libc_init_array+0x38>)
 8009e8c:	4c0d      	ldr	r4, [pc, #52]	; (8009ec4 <__libc_init_array+0x3c>)
 8009e8e:	1b64      	subs	r4, r4, r5
 8009e90:	10a4      	asrs	r4, r4, #2
 8009e92:	2600      	movs	r6, #0
 8009e94:	42a6      	cmp	r6, r4
 8009e96:	d109      	bne.n	8009eac <__libc_init_array+0x24>
 8009e98:	4d0b      	ldr	r5, [pc, #44]	; (8009ec8 <__libc_init_array+0x40>)
 8009e9a:	4c0c      	ldr	r4, [pc, #48]	; (8009ecc <__libc_init_array+0x44>)
 8009e9c:	f001 ff6a 	bl	800bd74 <_init>
 8009ea0:	1b64      	subs	r4, r4, r5
 8009ea2:	10a4      	asrs	r4, r4, #2
 8009ea4:	2600      	movs	r6, #0
 8009ea6:	42a6      	cmp	r6, r4
 8009ea8:	d105      	bne.n	8009eb6 <__libc_init_array+0x2e>
 8009eaa:	bd70      	pop	{r4, r5, r6, pc}
 8009eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eb0:	4798      	blx	r3
 8009eb2:	3601      	adds	r6, #1
 8009eb4:	e7ee      	b.n	8009e94 <__libc_init_array+0xc>
 8009eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eba:	4798      	blx	r3
 8009ebc:	3601      	adds	r6, #1
 8009ebe:	e7f2      	b.n	8009ea6 <__libc_init_array+0x1e>
 8009ec0:	0800ee64 	.word	0x0800ee64
 8009ec4:	0800ee64 	.word	0x0800ee64
 8009ec8:	0800ee64 	.word	0x0800ee64
 8009ecc:	0800ee68 	.word	0x0800ee68

08009ed0 <__retarget_lock_acquire_recursive>:
 8009ed0:	4770      	bx	lr

08009ed2 <__retarget_lock_release_recursive>:
 8009ed2:	4770      	bx	lr

08009ed4 <memcpy>:
 8009ed4:	440a      	add	r2, r1
 8009ed6:	4291      	cmp	r1, r2
 8009ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009edc:	d100      	bne.n	8009ee0 <memcpy+0xc>
 8009ede:	4770      	bx	lr
 8009ee0:	b510      	push	{r4, lr}
 8009ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009eea:	4291      	cmp	r1, r2
 8009eec:	d1f9      	bne.n	8009ee2 <memcpy+0xe>
 8009eee:	bd10      	pop	{r4, pc}

08009ef0 <quorem>:
 8009ef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef4:	6903      	ldr	r3, [r0, #16]
 8009ef6:	690c      	ldr	r4, [r1, #16]
 8009ef8:	42a3      	cmp	r3, r4
 8009efa:	4607      	mov	r7, r0
 8009efc:	db7e      	blt.n	8009ffc <quorem+0x10c>
 8009efe:	3c01      	subs	r4, #1
 8009f00:	f101 0814 	add.w	r8, r1, #20
 8009f04:	f100 0514 	add.w	r5, r0, #20
 8009f08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f0c:	9301      	str	r3, [sp, #4]
 8009f0e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f16:	3301      	adds	r3, #1
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f1e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f22:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f26:	d331      	bcc.n	8009f8c <quorem+0x9c>
 8009f28:	f04f 0e00 	mov.w	lr, #0
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	46ac      	mov	ip, r5
 8009f30:	46f2      	mov	sl, lr
 8009f32:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f36:	b293      	uxth	r3, r2
 8009f38:	fb06 e303 	mla	r3, r6, r3, lr
 8009f3c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f40:	0c1a      	lsrs	r2, r3, #16
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	ebaa 0303 	sub.w	r3, sl, r3
 8009f48:	f8dc a000 	ldr.w	sl, [ip]
 8009f4c:	fa13 f38a 	uxtah	r3, r3, sl
 8009f50:	fb06 220e 	mla	r2, r6, lr, r2
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	9b00      	ldr	r3, [sp, #0]
 8009f58:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f5c:	b292      	uxth	r2, r2
 8009f5e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009f62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f66:	f8bd 3000 	ldrh.w	r3, [sp]
 8009f6a:	4581      	cmp	r9, r0
 8009f6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f70:	f84c 3b04 	str.w	r3, [ip], #4
 8009f74:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f78:	d2db      	bcs.n	8009f32 <quorem+0x42>
 8009f7a:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f7e:	b92b      	cbnz	r3, 8009f8c <quorem+0x9c>
 8009f80:	9b01      	ldr	r3, [sp, #4]
 8009f82:	3b04      	subs	r3, #4
 8009f84:	429d      	cmp	r5, r3
 8009f86:	461a      	mov	r2, r3
 8009f88:	d32c      	bcc.n	8009fe4 <quorem+0xf4>
 8009f8a:	613c      	str	r4, [r7, #16]
 8009f8c:	4638      	mov	r0, r7
 8009f8e:	f001 f8f1 	bl	800b174 <__mcmp>
 8009f92:	2800      	cmp	r0, #0
 8009f94:	db22      	blt.n	8009fdc <quorem+0xec>
 8009f96:	3601      	adds	r6, #1
 8009f98:	4629      	mov	r1, r5
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009fa0:	f8d1 c000 	ldr.w	ip, [r1]
 8009fa4:	b293      	uxth	r3, r2
 8009fa6:	1ac3      	subs	r3, r0, r3
 8009fa8:	0c12      	lsrs	r2, r2, #16
 8009faa:	fa13 f38c 	uxtah	r3, r3, ip
 8009fae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009fb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fbc:	45c1      	cmp	r9, r8
 8009fbe:	f841 3b04 	str.w	r3, [r1], #4
 8009fc2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009fc6:	d2e9      	bcs.n	8009f9c <quorem+0xac>
 8009fc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fcc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fd0:	b922      	cbnz	r2, 8009fdc <quorem+0xec>
 8009fd2:	3b04      	subs	r3, #4
 8009fd4:	429d      	cmp	r5, r3
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	d30a      	bcc.n	8009ff0 <quorem+0x100>
 8009fda:	613c      	str	r4, [r7, #16]
 8009fdc:	4630      	mov	r0, r6
 8009fde:	b003      	add	sp, #12
 8009fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe4:	6812      	ldr	r2, [r2, #0]
 8009fe6:	3b04      	subs	r3, #4
 8009fe8:	2a00      	cmp	r2, #0
 8009fea:	d1ce      	bne.n	8009f8a <quorem+0x9a>
 8009fec:	3c01      	subs	r4, #1
 8009fee:	e7c9      	b.n	8009f84 <quorem+0x94>
 8009ff0:	6812      	ldr	r2, [r2, #0]
 8009ff2:	3b04      	subs	r3, #4
 8009ff4:	2a00      	cmp	r2, #0
 8009ff6:	d1f0      	bne.n	8009fda <quorem+0xea>
 8009ff8:	3c01      	subs	r4, #1
 8009ffa:	e7eb      	b.n	8009fd4 <quorem+0xe4>
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	e7ee      	b.n	8009fde <quorem+0xee>

0800a000 <_dtoa_r>:
 800a000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a004:	ed2d 8b04 	vpush	{d8-d9}
 800a008:	69c5      	ldr	r5, [r0, #28]
 800a00a:	b093      	sub	sp, #76	; 0x4c
 800a00c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a010:	ec57 6b10 	vmov	r6, r7, d0
 800a014:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a018:	9107      	str	r1, [sp, #28]
 800a01a:	4604      	mov	r4, r0
 800a01c:	920a      	str	r2, [sp, #40]	; 0x28
 800a01e:	930d      	str	r3, [sp, #52]	; 0x34
 800a020:	b975      	cbnz	r5, 800a040 <_dtoa_r+0x40>
 800a022:	2010      	movs	r0, #16
 800a024:	f7ff f828 	bl	8009078 <malloc>
 800a028:	4602      	mov	r2, r0
 800a02a:	61e0      	str	r0, [r4, #28]
 800a02c:	b920      	cbnz	r0, 800a038 <_dtoa_r+0x38>
 800a02e:	4bae      	ldr	r3, [pc, #696]	; (800a2e8 <_dtoa_r+0x2e8>)
 800a030:	21ef      	movs	r1, #239	; 0xef
 800a032:	48ae      	ldr	r0, [pc, #696]	; (800a2ec <_dtoa_r+0x2ec>)
 800a034:	f001 fba4 	bl	800b780 <__assert_func>
 800a038:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a03c:	6005      	str	r5, [r0, #0]
 800a03e:	60c5      	str	r5, [r0, #12]
 800a040:	69e3      	ldr	r3, [r4, #28]
 800a042:	6819      	ldr	r1, [r3, #0]
 800a044:	b151      	cbz	r1, 800a05c <_dtoa_r+0x5c>
 800a046:	685a      	ldr	r2, [r3, #4]
 800a048:	604a      	str	r2, [r1, #4]
 800a04a:	2301      	movs	r3, #1
 800a04c:	4093      	lsls	r3, r2
 800a04e:	608b      	str	r3, [r1, #8]
 800a050:	4620      	mov	r0, r4
 800a052:	f000 fe53 	bl	800acfc <_Bfree>
 800a056:	69e3      	ldr	r3, [r4, #28]
 800a058:	2200      	movs	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]
 800a05c:	1e3b      	subs	r3, r7, #0
 800a05e:	bfbb      	ittet	lt
 800a060:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a064:	9303      	strlt	r3, [sp, #12]
 800a066:	2300      	movge	r3, #0
 800a068:	2201      	movlt	r2, #1
 800a06a:	bfac      	ite	ge
 800a06c:	f8c8 3000 	strge.w	r3, [r8]
 800a070:	f8c8 2000 	strlt.w	r2, [r8]
 800a074:	4b9e      	ldr	r3, [pc, #632]	; (800a2f0 <_dtoa_r+0x2f0>)
 800a076:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a07a:	ea33 0308 	bics.w	r3, r3, r8
 800a07e:	d11b      	bne.n	800a0b8 <_dtoa_r+0xb8>
 800a080:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a082:	f242 730f 	movw	r3, #9999	; 0x270f
 800a086:	6013      	str	r3, [r2, #0]
 800a088:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a08c:	4333      	orrs	r3, r6
 800a08e:	f000 8593 	beq.w	800abb8 <_dtoa_r+0xbb8>
 800a092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a094:	b963      	cbnz	r3, 800a0b0 <_dtoa_r+0xb0>
 800a096:	4b97      	ldr	r3, [pc, #604]	; (800a2f4 <_dtoa_r+0x2f4>)
 800a098:	e027      	b.n	800a0ea <_dtoa_r+0xea>
 800a09a:	4b97      	ldr	r3, [pc, #604]	; (800a2f8 <_dtoa_r+0x2f8>)
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	3308      	adds	r3, #8
 800a0a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0a2:	6013      	str	r3, [r2, #0]
 800a0a4:	9800      	ldr	r0, [sp, #0]
 800a0a6:	b013      	add	sp, #76	; 0x4c
 800a0a8:	ecbd 8b04 	vpop	{d8-d9}
 800a0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b0:	4b90      	ldr	r3, [pc, #576]	; (800a2f4 <_dtoa_r+0x2f4>)
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	3303      	adds	r3, #3
 800a0b6:	e7f3      	b.n	800a0a0 <_dtoa_r+0xa0>
 800a0b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	ec51 0b17 	vmov	r0, r1, d7
 800a0c2:	eeb0 8a47 	vmov.f32	s16, s14
 800a0c6:	eef0 8a67 	vmov.f32	s17, s15
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	f7f6 fcfc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0d0:	4681      	mov	r9, r0
 800a0d2:	b160      	cbz	r0, 800a0ee <_dtoa_r+0xee>
 800a0d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	6013      	str	r3, [r2, #0]
 800a0da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f000 8568 	beq.w	800abb2 <_dtoa_r+0xbb2>
 800a0e2:	4b86      	ldr	r3, [pc, #536]	; (800a2fc <_dtoa_r+0x2fc>)
 800a0e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0e6:	6013      	str	r3, [r2, #0]
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	e7da      	b.n	800a0a4 <_dtoa_r+0xa4>
 800a0ee:	aa10      	add	r2, sp, #64	; 0x40
 800a0f0:	a911      	add	r1, sp, #68	; 0x44
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	eeb0 0a48 	vmov.f32	s0, s16
 800a0f8:	eef0 0a68 	vmov.f32	s1, s17
 800a0fc:	f001 f8e0 	bl	800b2c0 <__d2b>
 800a100:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a104:	4682      	mov	sl, r0
 800a106:	2d00      	cmp	r5, #0
 800a108:	d07f      	beq.n	800a20a <_dtoa_r+0x20a>
 800a10a:	ee18 3a90 	vmov	r3, s17
 800a10e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a112:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a116:	ec51 0b18 	vmov	r0, r1, d8
 800a11a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a11e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a122:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a126:	4619      	mov	r1, r3
 800a128:	2200      	movs	r2, #0
 800a12a:	4b75      	ldr	r3, [pc, #468]	; (800a300 <_dtoa_r+0x300>)
 800a12c:	f7f6 f8ac 	bl	8000288 <__aeabi_dsub>
 800a130:	a367      	add	r3, pc, #412	; (adr r3, 800a2d0 <_dtoa_r+0x2d0>)
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	f7f6 fa5f 	bl	80005f8 <__aeabi_dmul>
 800a13a:	a367      	add	r3, pc, #412	; (adr r3, 800a2d8 <_dtoa_r+0x2d8>)
 800a13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a140:	f7f6 f8a4 	bl	800028c <__adddf3>
 800a144:	4606      	mov	r6, r0
 800a146:	4628      	mov	r0, r5
 800a148:	460f      	mov	r7, r1
 800a14a:	f7f6 f9eb 	bl	8000524 <__aeabi_i2d>
 800a14e:	a364      	add	r3, pc, #400	; (adr r3, 800a2e0 <_dtoa_r+0x2e0>)
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	f7f6 fa50 	bl	80005f8 <__aeabi_dmul>
 800a158:	4602      	mov	r2, r0
 800a15a:	460b      	mov	r3, r1
 800a15c:	4630      	mov	r0, r6
 800a15e:	4639      	mov	r1, r7
 800a160:	f7f6 f894 	bl	800028c <__adddf3>
 800a164:	4606      	mov	r6, r0
 800a166:	460f      	mov	r7, r1
 800a168:	f7f6 fcf6 	bl	8000b58 <__aeabi_d2iz>
 800a16c:	2200      	movs	r2, #0
 800a16e:	4683      	mov	fp, r0
 800a170:	2300      	movs	r3, #0
 800a172:	4630      	mov	r0, r6
 800a174:	4639      	mov	r1, r7
 800a176:	f7f6 fcb1 	bl	8000adc <__aeabi_dcmplt>
 800a17a:	b148      	cbz	r0, 800a190 <_dtoa_r+0x190>
 800a17c:	4658      	mov	r0, fp
 800a17e:	f7f6 f9d1 	bl	8000524 <__aeabi_i2d>
 800a182:	4632      	mov	r2, r6
 800a184:	463b      	mov	r3, r7
 800a186:	f7f6 fc9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a18a:	b908      	cbnz	r0, 800a190 <_dtoa_r+0x190>
 800a18c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a190:	f1bb 0f16 	cmp.w	fp, #22
 800a194:	d857      	bhi.n	800a246 <_dtoa_r+0x246>
 800a196:	4b5b      	ldr	r3, [pc, #364]	; (800a304 <_dtoa_r+0x304>)
 800a198:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a0:	ec51 0b18 	vmov	r0, r1, d8
 800a1a4:	f7f6 fc9a 	bl	8000adc <__aeabi_dcmplt>
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d04e      	beq.n	800a24a <_dtoa_r+0x24a>
 800a1ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	930c      	str	r3, [sp, #48]	; 0x30
 800a1b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1b6:	1b5b      	subs	r3, r3, r5
 800a1b8:	1e5a      	subs	r2, r3, #1
 800a1ba:	bf45      	ittet	mi
 800a1bc:	f1c3 0301 	rsbmi	r3, r3, #1
 800a1c0:	9305      	strmi	r3, [sp, #20]
 800a1c2:	2300      	movpl	r3, #0
 800a1c4:	2300      	movmi	r3, #0
 800a1c6:	9206      	str	r2, [sp, #24]
 800a1c8:	bf54      	ite	pl
 800a1ca:	9305      	strpl	r3, [sp, #20]
 800a1cc:	9306      	strmi	r3, [sp, #24]
 800a1ce:	f1bb 0f00 	cmp.w	fp, #0
 800a1d2:	db3c      	blt.n	800a24e <_dtoa_r+0x24e>
 800a1d4:	9b06      	ldr	r3, [sp, #24]
 800a1d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a1da:	445b      	add	r3, fp
 800a1dc:	9306      	str	r3, [sp, #24]
 800a1de:	2300      	movs	r3, #0
 800a1e0:	9308      	str	r3, [sp, #32]
 800a1e2:	9b07      	ldr	r3, [sp, #28]
 800a1e4:	2b09      	cmp	r3, #9
 800a1e6:	d868      	bhi.n	800a2ba <_dtoa_r+0x2ba>
 800a1e8:	2b05      	cmp	r3, #5
 800a1ea:	bfc4      	itt	gt
 800a1ec:	3b04      	subgt	r3, #4
 800a1ee:	9307      	strgt	r3, [sp, #28]
 800a1f0:	9b07      	ldr	r3, [sp, #28]
 800a1f2:	f1a3 0302 	sub.w	r3, r3, #2
 800a1f6:	bfcc      	ite	gt
 800a1f8:	2500      	movgt	r5, #0
 800a1fa:	2501      	movle	r5, #1
 800a1fc:	2b03      	cmp	r3, #3
 800a1fe:	f200 8085 	bhi.w	800a30c <_dtoa_r+0x30c>
 800a202:	e8df f003 	tbb	[pc, r3]
 800a206:	3b2e      	.short	0x3b2e
 800a208:	5839      	.short	0x5839
 800a20a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a20e:	441d      	add	r5, r3
 800a210:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a214:	2b20      	cmp	r3, #32
 800a216:	bfc1      	itttt	gt
 800a218:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a21c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a220:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a224:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a228:	bfd6      	itet	le
 800a22a:	f1c3 0320 	rsble	r3, r3, #32
 800a22e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a232:	fa06 f003 	lslle.w	r0, r6, r3
 800a236:	f7f6 f965 	bl	8000504 <__aeabi_ui2d>
 800a23a:	2201      	movs	r2, #1
 800a23c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a240:	3d01      	subs	r5, #1
 800a242:	920e      	str	r2, [sp, #56]	; 0x38
 800a244:	e76f      	b.n	800a126 <_dtoa_r+0x126>
 800a246:	2301      	movs	r3, #1
 800a248:	e7b3      	b.n	800a1b2 <_dtoa_r+0x1b2>
 800a24a:	900c      	str	r0, [sp, #48]	; 0x30
 800a24c:	e7b2      	b.n	800a1b4 <_dtoa_r+0x1b4>
 800a24e:	9b05      	ldr	r3, [sp, #20]
 800a250:	eba3 030b 	sub.w	r3, r3, fp
 800a254:	9305      	str	r3, [sp, #20]
 800a256:	f1cb 0300 	rsb	r3, fp, #0
 800a25a:	9308      	str	r3, [sp, #32]
 800a25c:	2300      	movs	r3, #0
 800a25e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a260:	e7bf      	b.n	800a1e2 <_dtoa_r+0x1e2>
 800a262:	2300      	movs	r3, #0
 800a264:	9309      	str	r3, [sp, #36]	; 0x24
 800a266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a268:	2b00      	cmp	r3, #0
 800a26a:	dc52      	bgt.n	800a312 <_dtoa_r+0x312>
 800a26c:	2301      	movs	r3, #1
 800a26e:	9301      	str	r3, [sp, #4]
 800a270:	9304      	str	r3, [sp, #16]
 800a272:	461a      	mov	r2, r3
 800a274:	920a      	str	r2, [sp, #40]	; 0x28
 800a276:	e00b      	b.n	800a290 <_dtoa_r+0x290>
 800a278:	2301      	movs	r3, #1
 800a27a:	e7f3      	b.n	800a264 <_dtoa_r+0x264>
 800a27c:	2300      	movs	r3, #0
 800a27e:	9309      	str	r3, [sp, #36]	; 0x24
 800a280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a282:	445b      	add	r3, fp
 800a284:	9301      	str	r3, [sp, #4]
 800a286:	3301      	adds	r3, #1
 800a288:	2b01      	cmp	r3, #1
 800a28a:	9304      	str	r3, [sp, #16]
 800a28c:	bfb8      	it	lt
 800a28e:	2301      	movlt	r3, #1
 800a290:	69e0      	ldr	r0, [r4, #28]
 800a292:	2100      	movs	r1, #0
 800a294:	2204      	movs	r2, #4
 800a296:	f102 0614 	add.w	r6, r2, #20
 800a29a:	429e      	cmp	r6, r3
 800a29c:	d93d      	bls.n	800a31a <_dtoa_r+0x31a>
 800a29e:	6041      	str	r1, [r0, #4]
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f000 fceb 	bl	800ac7c <_Balloc>
 800a2a6:	9000      	str	r0, [sp, #0]
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	d139      	bne.n	800a320 <_dtoa_r+0x320>
 800a2ac:	4b16      	ldr	r3, [pc, #88]	; (800a308 <_dtoa_r+0x308>)
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	f240 11af 	movw	r1, #431	; 0x1af
 800a2b4:	e6bd      	b.n	800a032 <_dtoa_r+0x32>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e7e1      	b.n	800a27e <_dtoa_r+0x27e>
 800a2ba:	2501      	movs	r5, #1
 800a2bc:	2300      	movs	r3, #0
 800a2be:	9307      	str	r3, [sp, #28]
 800a2c0:	9509      	str	r5, [sp, #36]	; 0x24
 800a2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c6:	9301      	str	r3, [sp, #4]
 800a2c8:	9304      	str	r3, [sp, #16]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	2312      	movs	r3, #18
 800a2ce:	e7d1      	b.n	800a274 <_dtoa_r+0x274>
 800a2d0:	636f4361 	.word	0x636f4361
 800a2d4:	3fd287a7 	.word	0x3fd287a7
 800a2d8:	8b60c8b3 	.word	0x8b60c8b3
 800a2dc:	3fc68a28 	.word	0x3fc68a28
 800a2e0:	509f79fb 	.word	0x509f79fb
 800a2e4:	3fd34413 	.word	0x3fd34413
 800a2e8:	0800eb29 	.word	0x0800eb29
 800a2ec:	0800eb40 	.word	0x0800eb40
 800a2f0:	7ff00000 	.word	0x7ff00000
 800a2f4:	0800eb25 	.word	0x0800eb25
 800a2f8:	0800eb1c 	.word	0x0800eb1c
 800a2fc:	0800eaf9 	.word	0x0800eaf9
 800a300:	3ff80000 	.word	0x3ff80000
 800a304:	0800ec30 	.word	0x0800ec30
 800a308:	0800eb98 	.word	0x0800eb98
 800a30c:	2301      	movs	r3, #1
 800a30e:	9309      	str	r3, [sp, #36]	; 0x24
 800a310:	e7d7      	b.n	800a2c2 <_dtoa_r+0x2c2>
 800a312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a314:	9301      	str	r3, [sp, #4]
 800a316:	9304      	str	r3, [sp, #16]
 800a318:	e7ba      	b.n	800a290 <_dtoa_r+0x290>
 800a31a:	3101      	adds	r1, #1
 800a31c:	0052      	lsls	r2, r2, #1
 800a31e:	e7ba      	b.n	800a296 <_dtoa_r+0x296>
 800a320:	69e3      	ldr	r3, [r4, #28]
 800a322:	9a00      	ldr	r2, [sp, #0]
 800a324:	601a      	str	r2, [r3, #0]
 800a326:	9b04      	ldr	r3, [sp, #16]
 800a328:	2b0e      	cmp	r3, #14
 800a32a:	f200 80a8 	bhi.w	800a47e <_dtoa_r+0x47e>
 800a32e:	2d00      	cmp	r5, #0
 800a330:	f000 80a5 	beq.w	800a47e <_dtoa_r+0x47e>
 800a334:	f1bb 0f00 	cmp.w	fp, #0
 800a338:	dd38      	ble.n	800a3ac <_dtoa_r+0x3ac>
 800a33a:	4bc0      	ldr	r3, [pc, #768]	; (800a63c <_dtoa_r+0x63c>)
 800a33c:	f00b 020f 	and.w	r2, fp, #15
 800a340:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a344:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a348:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a34c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a350:	d019      	beq.n	800a386 <_dtoa_r+0x386>
 800a352:	4bbb      	ldr	r3, [pc, #748]	; (800a640 <_dtoa_r+0x640>)
 800a354:	ec51 0b18 	vmov	r0, r1, d8
 800a358:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a35c:	f7f6 fa76 	bl	800084c <__aeabi_ddiv>
 800a360:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a364:	f008 080f 	and.w	r8, r8, #15
 800a368:	2503      	movs	r5, #3
 800a36a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a640 <_dtoa_r+0x640>
 800a36e:	f1b8 0f00 	cmp.w	r8, #0
 800a372:	d10a      	bne.n	800a38a <_dtoa_r+0x38a>
 800a374:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a378:	4632      	mov	r2, r6
 800a37a:	463b      	mov	r3, r7
 800a37c:	f7f6 fa66 	bl	800084c <__aeabi_ddiv>
 800a380:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a384:	e02b      	b.n	800a3de <_dtoa_r+0x3de>
 800a386:	2502      	movs	r5, #2
 800a388:	e7ef      	b.n	800a36a <_dtoa_r+0x36a>
 800a38a:	f018 0f01 	tst.w	r8, #1
 800a38e:	d008      	beq.n	800a3a2 <_dtoa_r+0x3a2>
 800a390:	4630      	mov	r0, r6
 800a392:	4639      	mov	r1, r7
 800a394:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a398:	f7f6 f92e 	bl	80005f8 <__aeabi_dmul>
 800a39c:	3501      	adds	r5, #1
 800a39e:	4606      	mov	r6, r0
 800a3a0:	460f      	mov	r7, r1
 800a3a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a3a6:	f109 0908 	add.w	r9, r9, #8
 800a3aa:	e7e0      	b.n	800a36e <_dtoa_r+0x36e>
 800a3ac:	f000 809f 	beq.w	800a4ee <_dtoa_r+0x4ee>
 800a3b0:	f1cb 0600 	rsb	r6, fp, #0
 800a3b4:	4ba1      	ldr	r3, [pc, #644]	; (800a63c <_dtoa_r+0x63c>)
 800a3b6:	4fa2      	ldr	r7, [pc, #648]	; (800a640 <_dtoa_r+0x640>)
 800a3b8:	f006 020f 	and.w	r2, r6, #15
 800a3bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	ec51 0b18 	vmov	r0, r1, d8
 800a3c8:	f7f6 f916 	bl	80005f8 <__aeabi_dmul>
 800a3cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3d0:	1136      	asrs	r6, r6, #4
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	2502      	movs	r5, #2
 800a3d6:	2e00      	cmp	r6, #0
 800a3d8:	d17e      	bne.n	800a4d8 <_dtoa_r+0x4d8>
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1d0      	bne.n	800a380 <_dtoa_r+0x380>
 800a3de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 8084 	beq.w	800a4f2 <_dtoa_r+0x4f2>
 800a3ea:	4b96      	ldr	r3, [pc, #600]	; (800a644 <_dtoa_r+0x644>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	4640      	mov	r0, r8
 800a3f0:	4649      	mov	r1, r9
 800a3f2:	f7f6 fb73 	bl	8000adc <__aeabi_dcmplt>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d07b      	beq.n	800a4f2 <_dtoa_r+0x4f2>
 800a3fa:	9b04      	ldr	r3, [sp, #16]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d078      	beq.n	800a4f2 <_dtoa_r+0x4f2>
 800a400:	9b01      	ldr	r3, [sp, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	dd39      	ble.n	800a47a <_dtoa_r+0x47a>
 800a406:	4b90      	ldr	r3, [pc, #576]	; (800a648 <_dtoa_r+0x648>)
 800a408:	2200      	movs	r2, #0
 800a40a:	4640      	mov	r0, r8
 800a40c:	4649      	mov	r1, r9
 800a40e:	f7f6 f8f3 	bl	80005f8 <__aeabi_dmul>
 800a412:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a416:	9e01      	ldr	r6, [sp, #4]
 800a418:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a41c:	3501      	adds	r5, #1
 800a41e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a422:	4628      	mov	r0, r5
 800a424:	f7f6 f87e 	bl	8000524 <__aeabi_i2d>
 800a428:	4642      	mov	r2, r8
 800a42a:	464b      	mov	r3, r9
 800a42c:	f7f6 f8e4 	bl	80005f8 <__aeabi_dmul>
 800a430:	4b86      	ldr	r3, [pc, #536]	; (800a64c <_dtoa_r+0x64c>)
 800a432:	2200      	movs	r2, #0
 800a434:	f7f5 ff2a 	bl	800028c <__adddf3>
 800a438:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a43c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a440:	9303      	str	r3, [sp, #12]
 800a442:	2e00      	cmp	r6, #0
 800a444:	d158      	bne.n	800a4f8 <_dtoa_r+0x4f8>
 800a446:	4b82      	ldr	r3, [pc, #520]	; (800a650 <_dtoa_r+0x650>)
 800a448:	2200      	movs	r2, #0
 800a44a:	4640      	mov	r0, r8
 800a44c:	4649      	mov	r1, r9
 800a44e:	f7f5 ff1b 	bl	8000288 <__aeabi_dsub>
 800a452:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a456:	4680      	mov	r8, r0
 800a458:	4689      	mov	r9, r1
 800a45a:	f7f6 fb5d 	bl	8000b18 <__aeabi_dcmpgt>
 800a45e:	2800      	cmp	r0, #0
 800a460:	f040 8296 	bne.w	800a990 <_dtoa_r+0x990>
 800a464:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a468:	4640      	mov	r0, r8
 800a46a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a46e:	4649      	mov	r1, r9
 800a470:	f7f6 fb34 	bl	8000adc <__aeabi_dcmplt>
 800a474:	2800      	cmp	r0, #0
 800a476:	f040 8289 	bne.w	800a98c <_dtoa_r+0x98c>
 800a47a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a47e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a480:	2b00      	cmp	r3, #0
 800a482:	f2c0 814e 	blt.w	800a722 <_dtoa_r+0x722>
 800a486:	f1bb 0f0e 	cmp.w	fp, #14
 800a48a:	f300 814a 	bgt.w	800a722 <_dtoa_r+0x722>
 800a48e:	4b6b      	ldr	r3, [pc, #428]	; (800a63c <_dtoa_r+0x63c>)
 800a490:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a494:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f280 80dc 	bge.w	800a658 <_dtoa_r+0x658>
 800a4a0:	9b04      	ldr	r3, [sp, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f300 80d8 	bgt.w	800a658 <_dtoa_r+0x658>
 800a4a8:	f040 826f 	bne.w	800a98a <_dtoa_r+0x98a>
 800a4ac:	4b68      	ldr	r3, [pc, #416]	; (800a650 <_dtoa_r+0x650>)
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	4640      	mov	r0, r8
 800a4b2:	4649      	mov	r1, r9
 800a4b4:	f7f6 f8a0 	bl	80005f8 <__aeabi_dmul>
 800a4b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4bc:	f7f6 fb22 	bl	8000b04 <__aeabi_dcmpge>
 800a4c0:	9e04      	ldr	r6, [sp, #16]
 800a4c2:	4637      	mov	r7, r6
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	f040 8245 	bne.w	800a954 <_dtoa_r+0x954>
 800a4ca:	9d00      	ldr	r5, [sp, #0]
 800a4cc:	2331      	movs	r3, #49	; 0x31
 800a4ce:	f805 3b01 	strb.w	r3, [r5], #1
 800a4d2:	f10b 0b01 	add.w	fp, fp, #1
 800a4d6:	e241      	b.n	800a95c <_dtoa_r+0x95c>
 800a4d8:	07f2      	lsls	r2, r6, #31
 800a4da:	d505      	bpl.n	800a4e8 <_dtoa_r+0x4e8>
 800a4dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4e0:	f7f6 f88a 	bl	80005f8 <__aeabi_dmul>
 800a4e4:	3501      	adds	r5, #1
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	1076      	asrs	r6, r6, #1
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	e773      	b.n	800a3d6 <_dtoa_r+0x3d6>
 800a4ee:	2502      	movs	r5, #2
 800a4f0:	e775      	b.n	800a3de <_dtoa_r+0x3de>
 800a4f2:	9e04      	ldr	r6, [sp, #16]
 800a4f4:	465f      	mov	r7, fp
 800a4f6:	e792      	b.n	800a41e <_dtoa_r+0x41e>
 800a4f8:	9900      	ldr	r1, [sp, #0]
 800a4fa:	4b50      	ldr	r3, [pc, #320]	; (800a63c <_dtoa_r+0x63c>)
 800a4fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a500:	4431      	add	r1, r6
 800a502:	9102      	str	r1, [sp, #8]
 800a504:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a506:	eeb0 9a47 	vmov.f32	s18, s14
 800a50a:	eef0 9a67 	vmov.f32	s19, s15
 800a50e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a512:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a516:	2900      	cmp	r1, #0
 800a518:	d044      	beq.n	800a5a4 <_dtoa_r+0x5a4>
 800a51a:	494e      	ldr	r1, [pc, #312]	; (800a654 <_dtoa_r+0x654>)
 800a51c:	2000      	movs	r0, #0
 800a51e:	f7f6 f995 	bl	800084c <__aeabi_ddiv>
 800a522:	ec53 2b19 	vmov	r2, r3, d9
 800a526:	f7f5 feaf 	bl	8000288 <__aeabi_dsub>
 800a52a:	9d00      	ldr	r5, [sp, #0]
 800a52c:	ec41 0b19 	vmov	d9, r0, r1
 800a530:	4649      	mov	r1, r9
 800a532:	4640      	mov	r0, r8
 800a534:	f7f6 fb10 	bl	8000b58 <__aeabi_d2iz>
 800a538:	4606      	mov	r6, r0
 800a53a:	f7f5 fff3 	bl	8000524 <__aeabi_i2d>
 800a53e:	4602      	mov	r2, r0
 800a540:	460b      	mov	r3, r1
 800a542:	4640      	mov	r0, r8
 800a544:	4649      	mov	r1, r9
 800a546:	f7f5 fe9f 	bl	8000288 <__aeabi_dsub>
 800a54a:	3630      	adds	r6, #48	; 0x30
 800a54c:	f805 6b01 	strb.w	r6, [r5], #1
 800a550:	ec53 2b19 	vmov	r2, r3, d9
 800a554:	4680      	mov	r8, r0
 800a556:	4689      	mov	r9, r1
 800a558:	f7f6 fac0 	bl	8000adc <__aeabi_dcmplt>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d164      	bne.n	800a62a <_dtoa_r+0x62a>
 800a560:	4642      	mov	r2, r8
 800a562:	464b      	mov	r3, r9
 800a564:	4937      	ldr	r1, [pc, #220]	; (800a644 <_dtoa_r+0x644>)
 800a566:	2000      	movs	r0, #0
 800a568:	f7f5 fe8e 	bl	8000288 <__aeabi_dsub>
 800a56c:	ec53 2b19 	vmov	r2, r3, d9
 800a570:	f7f6 fab4 	bl	8000adc <__aeabi_dcmplt>
 800a574:	2800      	cmp	r0, #0
 800a576:	f040 80b6 	bne.w	800a6e6 <_dtoa_r+0x6e6>
 800a57a:	9b02      	ldr	r3, [sp, #8]
 800a57c:	429d      	cmp	r5, r3
 800a57e:	f43f af7c 	beq.w	800a47a <_dtoa_r+0x47a>
 800a582:	4b31      	ldr	r3, [pc, #196]	; (800a648 <_dtoa_r+0x648>)
 800a584:	ec51 0b19 	vmov	r0, r1, d9
 800a588:	2200      	movs	r2, #0
 800a58a:	f7f6 f835 	bl	80005f8 <__aeabi_dmul>
 800a58e:	4b2e      	ldr	r3, [pc, #184]	; (800a648 <_dtoa_r+0x648>)
 800a590:	ec41 0b19 	vmov	d9, r0, r1
 800a594:	2200      	movs	r2, #0
 800a596:	4640      	mov	r0, r8
 800a598:	4649      	mov	r1, r9
 800a59a:	f7f6 f82d 	bl	80005f8 <__aeabi_dmul>
 800a59e:	4680      	mov	r8, r0
 800a5a0:	4689      	mov	r9, r1
 800a5a2:	e7c5      	b.n	800a530 <_dtoa_r+0x530>
 800a5a4:	ec51 0b17 	vmov	r0, r1, d7
 800a5a8:	f7f6 f826 	bl	80005f8 <__aeabi_dmul>
 800a5ac:	9b02      	ldr	r3, [sp, #8]
 800a5ae:	9d00      	ldr	r5, [sp, #0]
 800a5b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5b2:	ec41 0b19 	vmov	d9, r0, r1
 800a5b6:	4649      	mov	r1, r9
 800a5b8:	4640      	mov	r0, r8
 800a5ba:	f7f6 facd 	bl	8000b58 <__aeabi_d2iz>
 800a5be:	4606      	mov	r6, r0
 800a5c0:	f7f5 ffb0 	bl	8000524 <__aeabi_i2d>
 800a5c4:	3630      	adds	r6, #48	; 0x30
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	4640      	mov	r0, r8
 800a5cc:	4649      	mov	r1, r9
 800a5ce:	f7f5 fe5b 	bl	8000288 <__aeabi_dsub>
 800a5d2:	f805 6b01 	strb.w	r6, [r5], #1
 800a5d6:	9b02      	ldr	r3, [sp, #8]
 800a5d8:	429d      	cmp	r5, r3
 800a5da:	4680      	mov	r8, r0
 800a5dc:	4689      	mov	r9, r1
 800a5de:	f04f 0200 	mov.w	r2, #0
 800a5e2:	d124      	bne.n	800a62e <_dtoa_r+0x62e>
 800a5e4:	4b1b      	ldr	r3, [pc, #108]	; (800a654 <_dtoa_r+0x654>)
 800a5e6:	ec51 0b19 	vmov	r0, r1, d9
 800a5ea:	f7f5 fe4f 	bl	800028c <__adddf3>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	4640      	mov	r0, r8
 800a5f4:	4649      	mov	r1, r9
 800a5f6:	f7f6 fa8f 	bl	8000b18 <__aeabi_dcmpgt>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d173      	bne.n	800a6e6 <_dtoa_r+0x6e6>
 800a5fe:	ec53 2b19 	vmov	r2, r3, d9
 800a602:	4914      	ldr	r1, [pc, #80]	; (800a654 <_dtoa_r+0x654>)
 800a604:	2000      	movs	r0, #0
 800a606:	f7f5 fe3f 	bl	8000288 <__aeabi_dsub>
 800a60a:	4602      	mov	r2, r0
 800a60c:	460b      	mov	r3, r1
 800a60e:	4640      	mov	r0, r8
 800a610:	4649      	mov	r1, r9
 800a612:	f7f6 fa63 	bl	8000adc <__aeabi_dcmplt>
 800a616:	2800      	cmp	r0, #0
 800a618:	f43f af2f 	beq.w	800a47a <_dtoa_r+0x47a>
 800a61c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a61e:	1e6b      	subs	r3, r5, #1
 800a620:	930f      	str	r3, [sp, #60]	; 0x3c
 800a622:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a626:	2b30      	cmp	r3, #48	; 0x30
 800a628:	d0f8      	beq.n	800a61c <_dtoa_r+0x61c>
 800a62a:	46bb      	mov	fp, r7
 800a62c:	e04a      	b.n	800a6c4 <_dtoa_r+0x6c4>
 800a62e:	4b06      	ldr	r3, [pc, #24]	; (800a648 <_dtoa_r+0x648>)
 800a630:	f7f5 ffe2 	bl	80005f8 <__aeabi_dmul>
 800a634:	4680      	mov	r8, r0
 800a636:	4689      	mov	r9, r1
 800a638:	e7bd      	b.n	800a5b6 <_dtoa_r+0x5b6>
 800a63a:	bf00      	nop
 800a63c:	0800ec30 	.word	0x0800ec30
 800a640:	0800ec08 	.word	0x0800ec08
 800a644:	3ff00000 	.word	0x3ff00000
 800a648:	40240000 	.word	0x40240000
 800a64c:	401c0000 	.word	0x401c0000
 800a650:	40140000 	.word	0x40140000
 800a654:	3fe00000 	.word	0x3fe00000
 800a658:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a65c:	9d00      	ldr	r5, [sp, #0]
 800a65e:	4642      	mov	r2, r8
 800a660:	464b      	mov	r3, r9
 800a662:	4630      	mov	r0, r6
 800a664:	4639      	mov	r1, r7
 800a666:	f7f6 f8f1 	bl	800084c <__aeabi_ddiv>
 800a66a:	f7f6 fa75 	bl	8000b58 <__aeabi_d2iz>
 800a66e:	9001      	str	r0, [sp, #4]
 800a670:	f7f5 ff58 	bl	8000524 <__aeabi_i2d>
 800a674:	4642      	mov	r2, r8
 800a676:	464b      	mov	r3, r9
 800a678:	f7f5 ffbe 	bl	80005f8 <__aeabi_dmul>
 800a67c:	4602      	mov	r2, r0
 800a67e:	460b      	mov	r3, r1
 800a680:	4630      	mov	r0, r6
 800a682:	4639      	mov	r1, r7
 800a684:	f7f5 fe00 	bl	8000288 <__aeabi_dsub>
 800a688:	9e01      	ldr	r6, [sp, #4]
 800a68a:	9f04      	ldr	r7, [sp, #16]
 800a68c:	3630      	adds	r6, #48	; 0x30
 800a68e:	f805 6b01 	strb.w	r6, [r5], #1
 800a692:	9e00      	ldr	r6, [sp, #0]
 800a694:	1bae      	subs	r6, r5, r6
 800a696:	42b7      	cmp	r7, r6
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	d134      	bne.n	800a708 <_dtoa_r+0x708>
 800a69e:	f7f5 fdf5 	bl	800028c <__adddf3>
 800a6a2:	4642      	mov	r2, r8
 800a6a4:	464b      	mov	r3, r9
 800a6a6:	4606      	mov	r6, r0
 800a6a8:	460f      	mov	r7, r1
 800a6aa:	f7f6 fa35 	bl	8000b18 <__aeabi_dcmpgt>
 800a6ae:	b9c8      	cbnz	r0, 800a6e4 <_dtoa_r+0x6e4>
 800a6b0:	4642      	mov	r2, r8
 800a6b2:	464b      	mov	r3, r9
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	4639      	mov	r1, r7
 800a6b8:	f7f6 fa06 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6bc:	b110      	cbz	r0, 800a6c4 <_dtoa_r+0x6c4>
 800a6be:	9b01      	ldr	r3, [sp, #4]
 800a6c0:	07db      	lsls	r3, r3, #31
 800a6c2:	d40f      	bmi.n	800a6e4 <_dtoa_r+0x6e4>
 800a6c4:	4651      	mov	r1, sl
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f000 fb18 	bl	800acfc <_Bfree>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6d0:	702b      	strb	r3, [r5, #0]
 800a6d2:	f10b 0301 	add.w	r3, fp, #1
 800a6d6:	6013      	str	r3, [r2, #0]
 800a6d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f43f ace2 	beq.w	800a0a4 <_dtoa_r+0xa4>
 800a6e0:	601d      	str	r5, [r3, #0]
 800a6e2:	e4df      	b.n	800a0a4 <_dtoa_r+0xa4>
 800a6e4:	465f      	mov	r7, fp
 800a6e6:	462b      	mov	r3, r5
 800a6e8:	461d      	mov	r5, r3
 800a6ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6ee:	2a39      	cmp	r2, #57	; 0x39
 800a6f0:	d106      	bne.n	800a700 <_dtoa_r+0x700>
 800a6f2:	9a00      	ldr	r2, [sp, #0]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d1f7      	bne.n	800a6e8 <_dtoa_r+0x6e8>
 800a6f8:	9900      	ldr	r1, [sp, #0]
 800a6fa:	2230      	movs	r2, #48	; 0x30
 800a6fc:	3701      	adds	r7, #1
 800a6fe:	700a      	strb	r2, [r1, #0]
 800a700:	781a      	ldrb	r2, [r3, #0]
 800a702:	3201      	adds	r2, #1
 800a704:	701a      	strb	r2, [r3, #0]
 800a706:	e790      	b.n	800a62a <_dtoa_r+0x62a>
 800a708:	4ba3      	ldr	r3, [pc, #652]	; (800a998 <_dtoa_r+0x998>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	f7f5 ff74 	bl	80005f8 <__aeabi_dmul>
 800a710:	2200      	movs	r2, #0
 800a712:	2300      	movs	r3, #0
 800a714:	4606      	mov	r6, r0
 800a716:	460f      	mov	r7, r1
 800a718:	f7f6 f9d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d09e      	beq.n	800a65e <_dtoa_r+0x65e>
 800a720:	e7d0      	b.n	800a6c4 <_dtoa_r+0x6c4>
 800a722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a724:	2a00      	cmp	r2, #0
 800a726:	f000 80ca 	beq.w	800a8be <_dtoa_r+0x8be>
 800a72a:	9a07      	ldr	r2, [sp, #28]
 800a72c:	2a01      	cmp	r2, #1
 800a72e:	f300 80ad 	bgt.w	800a88c <_dtoa_r+0x88c>
 800a732:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a734:	2a00      	cmp	r2, #0
 800a736:	f000 80a5 	beq.w	800a884 <_dtoa_r+0x884>
 800a73a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a73e:	9e08      	ldr	r6, [sp, #32]
 800a740:	9d05      	ldr	r5, [sp, #20]
 800a742:	9a05      	ldr	r2, [sp, #20]
 800a744:	441a      	add	r2, r3
 800a746:	9205      	str	r2, [sp, #20]
 800a748:	9a06      	ldr	r2, [sp, #24]
 800a74a:	2101      	movs	r1, #1
 800a74c:	441a      	add	r2, r3
 800a74e:	4620      	mov	r0, r4
 800a750:	9206      	str	r2, [sp, #24]
 800a752:	f000 fb89 	bl	800ae68 <__i2b>
 800a756:	4607      	mov	r7, r0
 800a758:	b165      	cbz	r5, 800a774 <_dtoa_r+0x774>
 800a75a:	9b06      	ldr	r3, [sp, #24]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	dd09      	ble.n	800a774 <_dtoa_r+0x774>
 800a760:	42ab      	cmp	r3, r5
 800a762:	9a05      	ldr	r2, [sp, #20]
 800a764:	bfa8      	it	ge
 800a766:	462b      	movge	r3, r5
 800a768:	1ad2      	subs	r2, r2, r3
 800a76a:	9205      	str	r2, [sp, #20]
 800a76c:	9a06      	ldr	r2, [sp, #24]
 800a76e:	1aed      	subs	r5, r5, r3
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	9306      	str	r3, [sp, #24]
 800a774:	9b08      	ldr	r3, [sp, #32]
 800a776:	b1f3      	cbz	r3, 800a7b6 <_dtoa_r+0x7b6>
 800a778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f000 80a3 	beq.w	800a8c6 <_dtoa_r+0x8c6>
 800a780:	2e00      	cmp	r6, #0
 800a782:	dd10      	ble.n	800a7a6 <_dtoa_r+0x7a6>
 800a784:	4639      	mov	r1, r7
 800a786:	4632      	mov	r2, r6
 800a788:	4620      	mov	r0, r4
 800a78a:	f000 fc2d 	bl	800afe8 <__pow5mult>
 800a78e:	4652      	mov	r2, sl
 800a790:	4601      	mov	r1, r0
 800a792:	4607      	mov	r7, r0
 800a794:	4620      	mov	r0, r4
 800a796:	f000 fb7d 	bl	800ae94 <__multiply>
 800a79a:	4651      	mov	r1, sl
 800a79c:	4680      	mov	r8, r0
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f000 faac 	bl	800acfc <_Bfree>
 800a7a4:	46c2      	mov	sl, r8
 800a7a6:	9b08      	ldr	r3, [sp, #32]
 800a7a8:	1b9a      	subs	r2, r3, r6
 800a7aa:	d004      	beq.n	800a7b6 <_dtoa_r+0x7b6>
 800a7ac:	4651      	mov	r1, sl
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 fc1a 	bl	800afe8 <__pow5mult>
 800a7b4:	4682      	mov	sl, r0
 800a7b6:	2101      	movs	r1, #1
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f000 fb55 	bl	800ae68 <__i2b>
 800a7be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	f340 8081 	ble.w	800a8ca <_dtoa_r+0x8ca>
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	4601      	mov	r1, r0
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f000 fc0b 	bl	800afe8 <__pow5mult>
 800a7d2:	9b07      	ldr	r3, [sp, #28]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	4606      	mov	r6, r0
 800a7d8:	dd7a      	ble.n	800a8d0 <_dtoa_r+0x8d0>
 800a7da:	f04f 0800 	mov.w	r8, #0
 800a7de:	6933      	ldr	r3, [r6, #16]
 800a7e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a7e4:	6918      	ldr	r0, [r3, #16]
 800a7e6:	f000 faf1 	bl	800adcc <__hi0bits>
 800a7ea:	f1c0 0020 	rsb	r0, r0, #32
 800a7ee:	9b06      	ldr	r3, [sp, #24]
 800a7f0:	4418      	add	r0, r3
 800a7f2:	f010 001f 	ands.w	r0, r0, #31
 800a7f6:	f000 8094 	beq.w	800a922 <_dtoa_r+0x922>
 800a7fa:	f1c0 0320 	rsb	r3, r0, #32
 800a7fe:	2b04      	cmp	r3, #4
 800a800:	f340 8085 	ble.w	800a90e <_dtoa_r+0x90e>
 800a804:	9b05      	ldr	r3, [sp, #20]
 800a806:	f1c0 001c 	rsb	r0, r0, #28
 800a80a:	4403      	add	r3, r0
 800a80c:	9305      	str	r3, [sp, #20]
 800a80e:	9b06      	ldr	r3, [sp, #24]
 800a810:	4403      	add	r3, r0
 800a812:	4405      	add	r5, r0
 800a814:	9306      	str	r3, [sp, #24]
 800a816:	9b05      	ldr	r3, [sp, #20]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	dd05      	ble.n	800a828 <_dtoa_r+0x828>
 800a81c:	4651      	mov	r1, sl
 800a81e:	461a      	mov	r2, r3
 800a820:	4620      	mov	r0, r4
 800a822:	f000 fc3b 	bl	800b09c <__lshift>
 800a826:	4682      	mov	sl, r0
 800a828:	9b06      	ldr	r3, [sp, #24]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	dd05      	ble.n	800a83a <_dtoa_r+0x83a>
 800a82e:	4631      	mov	r1, r6
 800a830:	461a      	mov	r2, r3
 800a832:	4620      	mov	r0, r4
 800a834:	f000 fc32 	bl	800b09c <__lshift>
 800a838:	4606      	mov	r6, r0
 800a83a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d072      	beq.n	800a926 <_dtoa_r+0x926>
 800a840:	4631      	mov	r1, r6
 800a842:	4650      	mov	r0, sl
 800a844:	f000 fc96 	bl	800b174 <__mcmp>
 800a848:	2800      	cmp	r0, #0
 800a84a:	da6c      	bge.n	800a926 <_dtoa_r+0x926>
 800a84c:	2300      	movs	r3, #0
 800a84e:	4651      	mov	r1, sl
 800a850:	220a      	movs	r2, #10
 800a852:	4620      	mov	r0, r4
 800a854:	f000 fa74 	bl	800ad40 <__multadd>
 800a858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a85a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a85e:	4682      	mov	sl, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	f000 81b0 	beq.w	800abc6 <_dtoa_r+0xbc6>
 800a866:	2300      	movs	r3, #0
 800a868:	4639      	mov	r1, r7
 800a86a:	220a      	movs	r2, #10
 800a86c:	4620      	mov	r0, r4
 800a86e:	f000 fa67 	bl	800ad40 <__multadd>
 800a872:	9b01      	ldr	r3, [sp, #4]
 800a874:	2b00      	cmp	r3, #0
 800a876:	4607      	mov	r7, r0
 800a878:	f300 8096 	bgt.w	800a9a8 <_dtoa_r+0x9a8>
 800a87c:	9b07      	ldr	r3, [sp, #28]
 800a87e:	2b02      	cmp	r3, #2
 800a880:	dc59      	bgt.n	800a936 <_dtoa_r+0x936>
 800a882:	e091      	b.n	800a9a8 <_dtoa_r+0x9a8>
 800a884:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a886:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a88a:	e758      	b.n	800a73e <_dtoa_r+0x73e>
 800a88c:	9b04      	ldr	r3, [sp, #16]
 800a88e:	1e5e      	subs	r6, r3, #1
 800a890:	9b08      	ldr	r3, [sp, #32]
 800a892:	42b3      	cmp	r3, r6
 800a894:	bfbf      	itttt	lt
 800a896:	9b08      	ldrlt	r3, [sp, #32]
 800a898:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a89a:	9608      	strlt	r6, [sp, #32]
 800a89c:	1af3      	sublt	r3, r6, r3
 800a89e:	bfb4      	ite	lt
 800a8a0:	18d2      	addlt	r2, r2, r3
 800a8a2:	1b9e      	subge	r6, r3, r6
 800a8a4:	9b04      	ldr	r3, [sp, #16]
 800a8a6:	bfbc      	itt	lt
 800a8a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a8aa:	2600      	movlt	r6, #0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	bfb7      	itett	lt
 800a8b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a8b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a8b8:	1a9d      	sublt	r5, r3, r2
 800a8ba:	2300      	movlt	r3, #0
 800a8bc:	e741      	b.n	800a742 <_dtoa_r+0x742>
 800a8be:	9e08      	ldr	r6, [sp, #32]
 800a8c0:	9d05      	ldr	r5, [sp, #20]
 800a8c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a8c4:	e748      	b.n	800a758 <_dtoa_r+0x758>
 800a8c6:	9a08      	ldr	r2, [sp, #32]
 800a8c8:	e770      	b.n	800a7ac <_dtoa_r+0x7ac>
 800a8ca:	9b07      	ldr	r3, [sp, #28]
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	dc19      	bgt.n	800a904 <_dtoa_r+0x904>
 800a8d0:	9b02      	ldr	r3, [sp, #8]
 800a8d2:	b9bb      	cbnz	r3, 800a904 <_dtoa_r+0x904>
 800a8d4:	9b03      	ldr	r3, [sp, #12]
 800a8d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8da:	b99b      	cbnz	r3, 800a904 <_dtoa_r+0x904>
 800a8dc:	9b03      	ldr	r3, [sp, #12]
 800a8de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8e2:	0d1b      	lsrs	r3, r3, #20
 800a8e4:	051b      	lsls	r3, r3, #20
 800a8e6:	b183      	cbz	r3, 800a90a <_dtoa_r+0x90a>
 800a8e8:	9b05      	ldr	r3, [sp, #20]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	9305      	str	r3, [sp, #20]
 800a8ee:	9b06      	ldr	r3, [sp, #24]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	9306      	str	r3, [sp, #24]
 800a8f4:	f04f 0801 	mov.w	r8, #1
 800a8f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	f47f af6f 	bne.w	800a7de <_dtoa_r+0x7de>
 800a900:	2001      	movs	r0, #1
 800a902:	e774      	b.n	800a7ee <_dtoa_r+0x7ee>
 800a904:	f04f 0800 	mov.w	r8, #0
 800a908:	e7f6      	b.n	800a8f8 <_dtoa_r+0x8f8>
 800a90a:	4698      	mov	r8, r3
 800a90c:	e7f4      	b.n	800a8f8 <_dtoa_r+0x8f8>
 800a90e:	d082      	beq.n	800a816 <_dtoa_r+0x816>
 800a910:	9a05      	ldr	r2, [sp, #20]
 800a912:	331c      	adds	r3, #28
 800a914:	441a      	add	r2, r3
 800a916:	9205      	str	r2, [sp, #20]
 800a918:	9a06      	ldr	r2, [sp, #24]
 800a91a:	441a      	add	r2, r3
 800a91c:	441d      	add	r5, r3
 800a91e:	9206      	str	r2, [sp, #24]
 800a920:	e779      	b.n	800a816 <_dtoa_r+0x816>
 800a922:	4603      	mov	r3, r0
 800a924:	e7f4      	b.n	800a910 <_dtoa_r+0x910>
 800a926:	9b04      	ldr	r3, [sp, #16]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	dc37      	bgt.n	800a99c <_dtoa_r+0x99c>
 800a92c:	9b07      	ldr	r3, [sp, #28]
 800a92e:	2b02      	cmp	r3, #2
 800a930:	dd34      	ble.n	800a99c <_dtoa_r+0x99c>
 800a932:	9b04      	ldr	r3, [sp, #16]
 800a934:	9301      	str	r3, [sp, #4]
 800a936:	9b01      	ldr	r3, [sp, #4]
 800a938:	b963      	cbnz	r3, 800a954 <_dtoa_r+0x954>
 800a93a:	4631      	mov	r1, r6
 800a93c:	2205      	movs	r2, #5
 800a93e:	4620      	mov	r0, r4
 800a940:	f000 f9fe 	bl	800ad40 <__multadd>
 800a944:	4601      	mov	r1, r0
 800a946:	4606      	mov	r6, r0
 800a948:	4650      	mov	r0, sl
 800a94a:	f000 fc13 	bl	800b174 <__mcmp>
 800a94e:	2800      	cmp	r0, #0
 800a950:	f73f adbb 	bgt.w	800a4ca <_dtoa_r+0x4ca>
 800a954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a956:	9d00      	ldr	r5, [sp, #0]
 800a958:	ea6f 0b03 	mvn.w	fp, r3
 800a95c:	f04f 0800 	mov.w	r8, #0
 800a960:	4631      	mov	r1, r6
 800a962:	4620      	mov	r0, r4
 800a964:	f000 f9ca 	bl	800acfc <_Bfree>
 800a968:	2f00      	cmp	r7, #0
 800a96a:	f43f aeab 	beq.w	800a6c4 <_dtoa_r+0x6c4>
 800a96e:	f1b8 0f00 	cmp.w	r8, #0
 800a972:	d005      	beq.n	800a980 <_dtoa_r+0x980>
 800a974:	45b8      	cmp	r8, r7
 800a976:	d003      	beq.n	800a980 <_dtoa_r+0x980>
 800a978:	4641      	mov	r1, r8
 800a97a:	4620      	mov	r0, r4
 800a97c:	f000 f9be 	bl	800acfc <_Bfree>
 800a980:	4639      	mov	r1, r7
 800a982:	4620      	mov	r0, r4
 800a984:	f000 f9ba 	bl	800acfc <_Bfree>
 800a988:	e69c      	b.n	800a6c4 <_dtoa_r+0x6c4>
 800a98a:	2600      	movs	r6, #0
 800a98c:	4637      	mov	r7, r6
 800a98e:	e7e1      	b.n	800a954 <_dtoa_r+0x954>
 800a990:	46bb      	mov	fp, r7
 800a992:	4637      	mov	r7, r6
 800a994:	e599      	b.n	800a4ca <_dtoa_r+0x4ca>
 800a996:	bf00      	nop
 800a998:	40240000 	.word	0x40240000
 800a99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f000 80c8 	beq.w	800ab34 <_dtoa_r+0xb34>
 800a9a4:	9b04      	ldr	r3, [sp, #16]
 800a9a6:	9301      	str	r3, [sp, #4]
 800a9a8:	2d00      	cmp	r5, #0
 800a9aa:	dd05      	ble.n	800a9b8 <_dtoa_r+0x9b8>
 800a9ac:	4639      	mov	r1, r7
 800a9ae:	462a      	mov	r2, r5
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	f000 fb73 	bl	800b09c <__lshift>
 800a9b6:	4607      	mov	r7, r0
 800a9b8:	f1b8 0f00 	cmp.w	r8, #0
 800a9bc:	d05b      	beq.n	800aa76 <_dtoa_r+0xa76>
 800a9be:	6879      	ldr	r1, [r7, #4]
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f000 f95b 	bl	800ac7c <_Balloc>
 800a9c6:	4605      	mov	r5, r0
 800a9c8:	b928      	cbnz	r0, 800a9d6 <_dtoa_r+0x9d6>
 800a9ca:	4b83      	ldr	r3, [pc, #524]	; (800abd8 <_dtoa_r+0xbd8>)
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a9d2:	f7ff bb2e 	b.w	800a032 <_dtoa_r+0x32>
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	3202      	adds	r2, #2
 800a9da:	0092      	lsls	r2, r2, #2
 800a9dc:	f107 010c 	add.w	r1, r7, #12
 800a9e0:	300c      	adds	r0, #12
 800a9e2:	f7ff fa77 	bl	8009ed4 <memcpy>
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	f000 fb56 	bl	800b09c <__lshift>
 800a9f0:	9b00      	ldr	r3, [sp, #0]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	9304      	str	r3, [sp, #16]
 800a9f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	9308      	str	r3, [sp, #32]
 800a9fe:	9b02      	ldr	r3, [sp, #8]
 800aa00:	f003 0301 	and.w	r3, r3, #1
 800aa04:	46b8      	mov	r8, r7
 800aa06:	9306      	str	r3, [sp, #24]
 800aa08:	4607      	mov	r7, r0
 800aa0a:	9b04      	ldr	r3, [sp, #16]
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	4650      	mov	r0, sl
 800aa12:	9301      	str	r3, [sp, #4]
 800aa14:	f7ff fa6c 	bl	8009ef0 <quorem>
 800aa18:	4641      	mov	r1, r8
 800aa1a:	9002      	str	r0, [sp, #8]
 800aa1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aa20:	4650      	mov	r0, sl
 800aa22:	f000 fba7 	bl	800b174 <__mcmp>
 800aa26:	463a      	mov	r2, r7
 800aa28:	9005      	str	r0, [sp, #20]
 800aa2a:	4631      	mov	r1, r6
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f000 fbbd 	bl	800b1ac <__mdiff>
 800aa32:	68c2      	ldr	r2, [r0, #12]
 800aa34:	4605      	mov	r5, r0
 800aa36:	bb02      	cbnz	r2, 800aa7a <_dtoa_r+0xa7a>
 800aa38:	4601      	mov	r1, r0
 800aa3a:	4650      	mov	r0, sl
 800aa3c:	f000 fb9a 	bl	800b174 <__mcmp>
 800aa40:	4602      	mov	r2, r0
 800aa42:	4629      	mov	r1, r5
 800aa44:	4620      	mov	r0, r4
 800aa46:	9209      	str	r2, [sp, #36]	; 0x24
 800aa48:	f000 f958 	bl	800acfc <_Bfree>
 800aa4c:	9b07      	ldr	r3, [sp, #28]
 800aa4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa50:	9d04      	ldr	r5, [sp, #16]
 800aa52:	ea43 0102 	orr.w	r1, r3, r2
 800aa56:	9b06      	ldr	r3, [sp, #24]
 800aa58:	4319      	orrs	r1, r3
 800aa5a:	d110      	bne.n	800aa7e <_dtoa_r+0xa7e>
 800aa5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aa60:	d029      	beq.n	800aab6 <_dtoa_r+0xab6>
 800aa62:	9b05      	ldr	r3, [sp, #20]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	dd02      	ble.n	800aa6e <_dtoa_r+0xa6e>
 800aa68:	9b02      	ldr	r3, [sp, #8]
 800aa6a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800aa6e:	9b01      	ldr	r3, [sp, #4]
 800aa70:	f883 9000 	strb.w	r9, [r3]
 800aa74:	e774      	b.n	800a960 <_dtoa_r+0x960>
 800aa76:	4638      	mov	r0, r7
 800aa78:	e7ba      	b.n	800a9f0 <_dtoa_r+0x9f0>
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	e7e1      	b.n	800aa42 <_dtoa_r+0xa42>
 800aa7e:	9b05      	ldr	r3, [sp, #20]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	db04      	blt.n	800aa8e <_dtoa_r+0xa8e>
 800aa84:	9907      	ldr	r1, [sp, #28]
 800aa86:	430b      	orrs	r3, r1
 800aa88:	9906      	ldr	r1, [sp, #24]
 800aa8a:	430b      	orrs	r3, r1
 800aa8c:	d120      	bne.n	800aad0 <_dtoa_r+0xad0>
 800aa8e:	2a00      	cmp	r2, #0
 800aa90:	dded      	ble.n	800aa6e <_dtoa_r+0xa6e>
 800aa92:	4651      	mov	r1, sl
 800aa94:	2201      	movs	r2, #1
 800aa96:	4620      	mov	r0, r4
 800aa98:	f000 fb00 	bl	800b09c <__lshift>
 800aa9c:	4631      	mov	r1, r6
 800aa9e:	4682      	mov	sl, r0
 800aaa0:	f000 fb68 	bl	800b174 <__mcmp>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	dc03      	bgt.n	800aab0 <_dtoa_r+0xab0>
 800aaa8:	d1e1      	bne.n	800aa6e <_dtoa_r+0xa6e>
 800aaaa:	f019 0f01 	tst.w	r9, #1
 800aaae:	d0de      	beq.n	800aa6e <_dtoa_r+0xa6e>
 800aab0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aab4:	d1d8      	bne.n	800aa68 <_dtoa_r+0xa68>
 800aab6:	9a01      	ldr	r2, [sp, #4]
 800aab8:	2339      	movs	r3, #57	; 0x39
 800aaba:	7013      	strb	r3, [r2, #0]
 800aabc:	462b      	mov	r3, r5
 800aabe:	461d      	mov	r5, r3
 800aac0:	3b01      	subs	r3, #1
 800aac2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aac6:	2a39      	cmp	r2, #57	; 0x39
 800aac8:	d06c      	beq.n	800aba4 <_dtoa_r+0xba4>
 800aaca:	3201      	adds	r2, #1
 800aacc:	701a      	strb	r2, [r3, #0]
 800aace:	e747      	b.n	800a960 <_dtoa_r+0x960>
 800aad0:	2a00      	cmp	r2, #0
 800aad2:	dd07      	ble.n	800aae4 <_dtoa_r+0xae4>
 800aad4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aad8:	d0ed      	beq.n	800aab6 <_dtoa_r+0xab6>
 800aada:	9a01      	ldr	r2, [sp, #4]
 800aadc:	f109 0301 	add.w	r3, r9, #1
 800aae0:	7013      	strb	r3, [r2, #0]
 800aae2:	e73d      	b.n	800a960 <_dtoa_r+0x960>
 800aae4:	9b04      	ldr	r3, [sp, #16]
 800aae6:	9a08      	ldr	r2, [sp, #32]
 800aae8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d043      	beq.n	800ab78 <_dtoa_r+0xb78>
 800aaf0:	4651      	mov	r1, sl
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	220a      	movs	r2, #10
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f000 f922 	bl	800ad40 <__multadd>
 800aafc:	45b8      	cmp	r8, r7
 800aafe:	4682      	mov	sl, r0
 800ab00:	f04f 0300 	mov.w	r3, #0
 800ab04:	f04f 020a 	mov.w	r2, #10
 800ab08:	4641      	mov	r1, r8
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	d107      	bne.n	800ab1e <_dtoa_r+0xb1e>
 800ab0e:	f000 f917 	bl	800ad40 <__multadd>
 800ab12:	4680      	mov	r8, r0
 800ab14:	4607      	mov	r7, r0
 800ab16:	9b04      	ldr	r3, [sp, #16]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	9304      	str	r3, [sp, #16]
 800ab1c:	e775      	b.n	800aa0a <_dtoa_r+0xa0a>
 800ab1e:	f000 f90f 	bl	800ad40 <__multadd>
 800ab22:	4639      	mov	r1, r7
 800ab24:	4680      	mov	r8, r0
 800ab26:	2300      	movs	r3, #0
 800ab28:	220a      	movs	r2, #10
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f000 f908 	bl	800ad40 <__multadd>
 800ab30:	4607      	mov	r7, r0
 800ab32:	e7f0      	b.n	800ab16 <_dtoa_r+0xb16>
 800ab34:	9b04      	ldr	r3, [sp, #16]
 800ab36:	9301      	str	r3, [sp, #4]
 800ab38:	9d00      	ldr	r5, [sp, #0]
 800ab3a:	4631      	mov	r1, r6
 800ab3c:	4650      	mov	r0, sl
 800ab3e:	f7ff f9d7 	bl	8009ef0 <quorem>
 800ab42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ab46:	9b00      	ldr	r3, [sp, #0]
 800ab48:	f805 9b01 	strb.w	r9, [r5], #1
 800ab4c:	1aea      	subs	r2, r5, r3
 800ab4e:	9b01      	ldr	r3, [sp, #4]
 800ab50:	4293      	cmp	r3, r2
 800ab52:	dd07      	ble.n	800ab64 <_dtoa_r+0xb64>
 800ab54:	4651      	mov	r1, sl
 800ab56:	2300      	movs	r3, #0
 800ab58:	220a      	movs	r2, #10
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f000 f8f0 	bl	800ad40 <__multadd>
 800ab60:	4682      	mov	sl, r0
 800ab62:	e7ea      	b.n	800ab3a <_dtoa_r+0xb3a>
 800ab64:	9b01      	ldr	r3, [sp, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	bfc8      	it	gt
 800ab6a:	461d      	movgt	r5, r3
 800ab6c:	9b00      	ldr	r3, [sp, #0]
 800ab6e:	bfd8      	it	le
 800ab70:	2501      	movle	r5, #1
 800ab72:	441d      	add	r5, r3
 800ab74:	f04f 0800 	mov.w	r8, #0
 800ab78:	4651      	mov	r1, sl
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f000 fa8d 	bl	800b09c <__lshift>
 800ab82:	4631      	mov	r1, r6
 800ab84:	4682      	mov	sl, r0
 800ab86:	f000 faf5 	bl	800b174 <__mcmp>
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	dc96      	bgt.n	800aabc <_dtoa_r+0xabc>
 800ab8e:	d102      	bne.n	800ab96 <_dtoa_r+0xb96>
 800ab90:	f019 0f01 	tst.w	r9, #1
 800ab94:	d192      	bne.n	800aabc <_dtoa_r+0xabc>
 800ab96:	462b      	mov	r3, r5
 800ab98:	461d      	mov	r5, r3
 800ab9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab9e:	2a30      	cmp	r2, #48	; 0x30
 800aba0:	d0fa      	beq.n	800ab98 <_dtoa_r+0xb98>
 800aba2:	e6dd      	b.n	800a960 <_dtoa_r+0x960>
 800aba4:	9a00      	ldr	r2, [sp, #0]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d189      	bne.n	800aabe <_dtoa_r+0xabe>
 800abaa:	f10b 0b01 	add.w	fp, fp, #1
 800abae:	2331      	movs	r3, #49	; 0x31
 800abb0:	e796      	b.n	800aae0 <_dtoa_r+0xae0>
 800abb2:	4b0a      	ldr	r3, [pc, #40]	; (800abdc <_dtoa_r+0xbdc>)
 800abb4:	f7ff ba99 	b.w	800a0ea <_dtoa_r+0xea>
 800abb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abba:	2b00      	cmp	r3, #0
 800abbc:	f47f aa6d 	bne.w	800a09a <_dtoa_r+0x9a>
 800abc0:	4b07      	ldr	r3, [pc, #28]	; (800abe0 <_dtoa_r+0xbe0>)
 800abc2:	f7ff ba92 	b.w	800a0ea <_dtoa_r+0xea>
 800abc6:	9b01      	ldr	r3, [sp, #4]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	dcb5      	bgt.n	800ab38 <_dtoa_r+0xb38>
 800abcc:	9b07      	ldr	r3, [sp, #28]
 800abce:	2b02      	cmp	r3, #2
 800abd0:	f73f aeb1 	bgt.w	800a936 <_dtoa_r+0x936>
 800abd4:	e7b0      	b.n	800ab38 <_dtoa_r+0xb38>
 800abd6:	bf00      	nop
 800abd8:	0800eb98 	.word	0x0800eb98
 800abdc:	0800eaf8 	.word	0x0800eaf8
 800abe0:	0800eb1c 	.word	0x0800eb1c

0800abe4 <_free_r>:
 800abe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abe6:	2900      	cmp	r1, #0
 800abe8:	d044      	beq.n	800ac74 <_free_r+0x90>
 800abea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abee:	9001      	str	r0, [sp, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f1a1 0404 	sub.w	r4, r1, #4
 800abf6:	bfb8      	it	lt
 800abf8:	18e4      	addlt	r4, r4, r3
 800abfa:	f7fe fae5 	bl	80091c8 <__malloc_lock>
 800abfe:	4a1e      	ldr	r2, [pc, #120]	; (800ac78 <_free_r+0x94>)
 800ac00:	9801      	ldr	r0, [sp, #4]
 800ac02:	6813      	ldr	r3, [r2, #0]
 800ac04:	b933      	cbnz	r3, 800ac14 <_free_r+0x30>
 800ac06:	6063      	str	r3, [r4, #4]
 800ac08:	6014      	str	r4, [r2, #0]
 800ac0a:	b003      	add	sp, #12
 800ac0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac10:	f7fe bae0 	b.w	80091d4 <__malloc_unlock>
 800ac14:	42a3      	cmp	r3, r4
 800ac16:	d908      	bls.n	800ac2a <_free_r+0x46>
 800ac18:	6825      	ldr	r5, [r4, #0]
 800ac1a:	1961      	adds	r1, r4, r5
 800ac1c:	428b      	cmp	r3, r1
 800ac1e:	bf01      	itttt	eq
 800ac20:	6819      	ldreq	r1, [r3, #0]
 800ac22:	685b      	ldreq	r3, [r3, #4]
 800ac24:	1949      	addeq	r1, r1, r5
 800ac26:	6021      	streq	r1, [r4, #0]
 800ac28:	e7ed      	b.n	800ac06 <_free_r+0x22>
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	b10b      	cbz	r3, 800ac34 <_free_r+0x50>
 800ac30:	42a3      	cmp	r3, r4
 800ac32:	d9fa      	bls.n	800ac2a <_free_r+0x46>
 800ac34:	6811      	ldr	r1, [r2, #0]
 800ac36:	1855      	adds	r5, r2, r1
 800ac38:	42a5      	cmp	r5, r4
 800ac3a:	d10b      	bne.n	800ac54 <_free_r+0x70>
 800ac3c:	6824      	ldr	r4, [r4, #0]
 800ac3e:	4421      	add	r1, r4
 800ac40:	1854      	adds	r4, r2, r1
 800ac42:	42a3      	cmp	r3, r4
 800ac44:	6011      	str	r1, [r2, #0]
 800ac46:	d1e0      	bne.n	800ac0a <_free_r+0x26>
 800ac48:	681c      	ldr	r4, [r3, #0]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	6053      	str	r3, [r2, #4]
 800ac4e:	440c      	add	r4, r1
 800ac50:	6014      	str	r4, [r2, #0]
 800ac52:	e7da      	b.n	800ac0a <_free_r+0x26>
 800ac54:	d902      	bls.n	800ac5c <_free_r+0x78>
 800ac56:	230c      	movs	r3, #12
 800ac58:	6003      	str	r3, [r0, #0]
 800ac5a:	e7d6      	b.n	800ac0a <_free_r+0x26>
 800ac5c:	6825      	ldr	r5, [r4, #0]
 800ac5e:	1961      	adds	r1, r4, r5
 800ac60:	428b      	cmp	r3, r1
 800ac62:	bf04      	itt	eq
 800ac64:	6819      	ldreq	r1, [r3, #0]
 800ac66:	685b      	ldreq	r3, [r3, #4]
 800ac68:	6063      	str	r3, [r4, #4]
 800ac6a:	bf04      	itt	eq
 800ac6c:	1949      	addeq	r1, r1, r5
 800ac6e:	6021      	streq	r1, [r4, #0]
 800ac70:	6054      	str	r4, [r2, #4]
 800ac72:	e7ca      	b.n	800ac0a <_free_r+0x26>
 800ac74:	b003      	add	sp, #12
 800ac76:	bd30      	pop	{r4, r5, pc}
 800ac78:	200008b4 	.word	0x200008b4

0800ac7c <_Balloc>:
 800ac7c:	b570      	push	{r4, r5, r6, lr}
 800ac7e:	69c6      	ldr	r6, [r0, #28]
 800ac80:	4604      	mov	r4, r0
 800ac82:	460d      	mov	r5, r1
 800ac84:	b976      	cbnz	r6, 800aca4 <_Balloc+0x28>
 800ac86:	2010      	movs	r0, #16
 800ac88:	f7fe f9f6 	bl	8009078 <malloc>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	61e0      	str	r0, [r4, #28]
 800ac90:	b920      	cbnz	r0, 800ac9c <_Balloc+0x20>
 800ac92:	4b18      	ldr	r3, [pc, #96]	; (800acf4 <_Balloc+0x78>)
 800ac94:	4818      	ldr	r0, [pc, #96]	; (800acf8 <_Balloc+0x7c>)
 800ac96:	216b      	movs	r1, #107	; 0x6b
 800ac98:	f000 fd72 	bl	800b780 <__assert_func>
 800ac9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aca0:	6006      	str	r6, [r0, #0]
 800aca2:	60c6      	str	r6, [r0, #12]
 800aca4:	69e6      	ldr	r6, [r4, #28]
 800aca6:	68f3      	ldr	r3, [r6, #12]
 800aca8:	b183      	cbz	r3, 800accc <_Balloc+0x50>
 800acaa:	69e3      	ldr	r3, [r4, #28]
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acb2:	b9b8      	cbnz	r0, 800ace4 <_Balloc+0x68>
 800acb4:	2101      	movs	r1, #1
 800acb6:	fa01 f605 	lsl.w	r6, r1, r5
 800acba:	1d72      	adds	r2, r6, #5
 800acbc:	0092      	lsls	r2, r2, #2
 800acbe:	4620      	mov	r0, r4
 800acc0:	f000 fd7c 	bl	800b7bc <_calloc_r>
 800acc4:	b160      	cbz	r0, 800ace0 <_Balloc+0x64>
 800acc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acca:	e00e      	b.n	800acea <_Balloc+0x6e>
 800accc:	2221      	movs	r2, #33	; 0x21
 800acce:	2104      	movs	r1, #4
 800acd0:	4620      	mov	r0, r4
 800acd2:	f000 fd73 	bl	800b7bc <_calloc_r>
 800acd6:	69e3      	ldr	r3, [r4, #28]
 800acd8:	60f0      	str	r0, [r6, #12]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1e4      	bne.n	800acaa <_Balloc+0x2e>
 800ace0:	2000      	movs	r0, #0
 800ace2:	bd70      	pop	{r4, r5, r6, pc}
 800ace4:	6802      	ldr	r2, [r0, #0]
 800ace6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acea:	2300      	movs	r3, #0
 800acec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acf0:	e7f7      	b.n	800ace2 <_Balloc+0x66>
 800acf2:	bf00      	nop
 800acf4:	0800eb29 	.word	0x0800eb29
 800acf8:	0800eba9 	.word	0x0800eba9

0800acfc <_Bfree>:
 800acfc:	b570      	push	{r4, r5, r6, lr}
 800acfe:	69c6      	ldr	r6, [r0, #28]
 800ad00:	4605      	mov	r5, r0
 800ad02:	460c      	mov	r4, r1
 800ad04:	b976      	cbnz	r6, 800ad24 <_Bfree+0x28>
 800ad06:	2010      	movs	r0, #16
 800ad08:	f7fe f9b6 	bl	8009078 <malloc>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	61e8      	str	r0, [r5, #28]
 800ad10:	b920      	cbnz	r0, 800ad1c <_Bfree+0x20>
 800ad12:	4b09      	ldr	r3, [pc, #36]	; (800ad38 <_Bfree+0x3c>)
 800ad14:	4809      	ldr	r0, [pc, #36]	; (800ad3c <_Bfree+0x40>)
 800ad16:	218f      	movs	r1, #143	; 0x8f
 800ad18:	f000 fd32 	bl	800b780 <__assert_func>
 800ad1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad20:	6006      	str	r6, [r0, #0]
 800ad22:	60c6      	str	r6, [r0, #12]
 800ad24:	b13c      	cbz	r4, 800ad36 <_Bfree+0x3a>
 800ad26:	69eb      	ldr	r3, [r5, #28]
 800ad28:	6862      	ldr	r2, [r4, #4]
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad30:	6021      	str	r1, [r4, #0]
 800ad32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad36:	bd70      	pop	{r4, r5, r6, pc}
 800ad38:	0800eb29 	.word	0x0800eb29
 800ad3c:	0800eba9 	.word	0x0800eba9

0800ad40 <__multadd>:
 800ad40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad44:	690d      	ldr	r5, [r1, #16]
 800ad46:	4607      	mov	r7, r0
 800ad48:	460c      	mov	r4, r1
 800ad4a:	461e      	mov	r6, r3
 800ad4c:	f101 0c14 	add.w	ip, r1, #20
 800ad50:	2000      	movs	r0, #0
 800ad52:	f8dc 3000 	ldr.w	r3, [ip]
 800ad56:	b299      	uxth	r1, r3
 800ad58:	fb02 6101 	mla	r1, r2, r1, r6
 800ad5c:	0c1e      	lsrs	r6, r3, #16
 800ad5e:	0c0b      	lsrs	r3, r1, #16
 800ad60:	fb02 3306 	mla	r3, r2, r6, r3
 800ad64:	b289      	uxth	r1, r1
 800ad66:	3001      	adds	r0, #1
 800ad68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad6c:	4285      	cmp	r5, r0
 800ad6e:	f84c 1b04 	str.w	r1, [ip], #4
 800ad72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad76:	dcec      	bgt.n	800ad52 <__multadd+0x12>
 800ad78:	b30e      	cbz	r6, 800adbe <__multadd+0x7e>
 800ad7a:	68a3      	ldr	r3, [r4, #8]
 800ad7c:	42ab      	cmp	r3, r5
 800ad7e:	dc19      	bgt.n	800adb4 <__multadd+0x74>
 800ad80:	6861      	ldr	r1, [r4, #4]
 800ad82:	4638      	mov	r0, r7
 800ad84:	3101      	adds	r1, #1
 800ad86:	f7ff ff79 	bl	800ac7c <_Balloc>
 800ad8a:	4680      	mov	r8, r0
 800ad8c:	b928      	cbnz	r0, 800ad9a <__multadd+0x5a>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	4b0c      	ldr	r3, [pc, #48]	; (800adc4 <__multadd+0x84>)
 800ad92:	480d      	ldr	r0, [pc, #52]	; (800adc8 <__multadd+0x88>)
 800ad94:	21ba      	movs	r1, #186	; 0xba
 800ad96:	f000 fcf3 	bl	800b780 <__assert_func>
 800ad9a:	6922      	ldr	r2, [r4, #16]
 800ad9c:	3202      	adds	r2, #2
 800ad9e:	f104 010c 	add.w	r1, r4, #12
 800ada2:	0092      	lsls	r2, r2, #2
 800ada4:	300c      	adds	r0, #12
 800ada6:	f7ff f895 	bl	8009ed4 <memcpy>
 800adaa:	4621      	mov	r1, r4
 800adac:	4638      	mov	r0, r7
 800adae:	f7ff ffa5 	bl	800acfc <_Bfree>
 800adb2:	4644      	mov	r4, r8
 800adb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800adb8:	3501      	adds	r5, #1
 800adba:	615e      	str	r6, [r3, #20]
 800adbc:	6125      	str	r5, [r4, #16]
 800adbe:	4620      	mov	r0, r4
 800adc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc4:	0800eb98 	.word	0x0800eb98
 800adc8:	0800eba9 	.word	0x0800eba9

0800adcc <__hi0bits>:
 800adcc:	0c03      	lsrs	r3, r0, #16
 800adce:	041b      	lsls	r3, r3, #16
 800add0:	b9d3      	cbnz	r3, 800ae08 <__hi0bits+0x3c>
 800add2:	0400      	lsls	r0, r0, #16
 800add4:	2310      	movs	r3, #16
 800add6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800adda:	bf04      	itt	eq
 800addc:	0200      	lsleq	r0, r0, #8
 800adde:	3308      	addeq	r3, #8
 800ade0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ade4:	bf04      	itt	eq
 800ade6:	0100      	lsleq	r0, r0, #4
 800ade8:	3304      	addeq	r3, #4
 800adea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800adee:	bf04      	itt	eq
 800adf0:	0080      	lsleq	r0, r0, #2
 800adf2:	3302      	addeq	r3, #2
 800adf4:	2800      	cmp	r0, #0
 800adf6:	db05      	blt.n	800ae04 <__hi0bits+0x38>
 800adf8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800adfc:	f103 0301 	add.w	r3, r3, #1
 800ae00:	bf08      	it	eq
 800ae02:	2320      	moveq	r3, #32
 800ae04:	4618      	mov	r0, r3
 800ae06:	4770      	bx	lr
 800ae08:	2300      	movs	r3, #0
 800ae0a:	e7e4      	b.n	800add6 <__hi0bits+0xa>

0800ae0c <__lo0bits>:
 800ae0c:	6803      	ldr	r3, [r0, #0]
 800ae0e:	f013 0207 	ands.w	r2, r3, #7
 800ae12:	d00c      	beq.n	800ae2e <__lo0bits+0x22>
 800ae14:	07d9      	lsls	r1, r3, #31
 800ae16:	d422      	bmi.n	800ae5e <__lo0bits+0x52>
 800ae18:	079a      	lsls	r2, r3, #30
 800ae1a:	bf49      	itett	mi
 800ae1c:	085b      	lsrmi	r3, r3, #1
 800ae1e:	089b      	lsrpl	r3, r3, #2
 800ae20:	6003      	strmi	r3, [r0, #0]
 800ae22:	2201      	movmi	r2, #1
 800ae24:	bf5c      	itt	pl
 800ae26:	6003      	strpl	r3, [r0, #0]
 800ae28:	2202      	movpl	r2, #2
 800ae2a:	4610      	mov	r0, r2
 800ae2c:	4770      	bx	lr
 800ae2e:	b299      	uxth	r1, r3
 800ae30:	b909      	cbnz	r1, 800ae36 <__lo0bits+0x2a>
 800ae32:	0c1b      	lsrs	r3, r3, #16
 800ae34:	2210      	movs	r2, #16
 800ae36:	b2d9      	uxtb	r1, r3
 800ae38:	b909      	cbnz	r1, 800ae3e <__lo0bits+0x32>
 800ae3a:	3208      	adds	r2, #8
 800ae3c:	0a1b      	lsrs	r3, r3, #8
 800ae3e:	0719      	lsls	r1, r3, #28
 800ae40:	bf04      	itt	eq
 800ae42:	091b      	lsreq	r3, r3, #4
 800ae44:	3204      	addeq	r2, #4
 800ae46:	0799      	lsls	r1, r3, #30
 800ae48:	bf04      	itt	eq
 800ae4a:	089b      	lsreq	r3, r3, #2
 800ae4c:	3202      	addeq	r2, #2
 800ae4e:	07d9      	lsls	r1, r3, #31
 800ae50:	d403      	bmi.n	800ae5a <__lo0bits+0x4e>
 800ae52:	085b      	lsrs	r3, r3, #1
 800ae54:	f102 0201 	add.w	r2, r2, #1
 800ae58:	d003      	beq.n	800ae62 <__lo0bits+0x56>
 800ae5a:	6003      	str	r3, [r0, #0]
 800ae5c:	e7e5      	b.n	800ae2a <__lo0bits+0x1e>
 800ae5e:	2200      	movs	r2, #0
 800ae60:	e7e3      	b.n	800ae2a <__lo0bits+0x1e>
 800ae62:	2220      	movs	r2, #32
 800ae64:	e7e1      	b.n	800ae2a <__lo0bits+0x1e>
	...

0800ae68 <__i2b>:
 800ae68:	b510      	push	{r4, lr}
 800ae6a:	460c      	mov	r4, r1
 800ae6c:	2101      	movs	r1, #1
 800ae6e:	f7ff ff05 	bl	800ac7c <_Balloc>
 800ae72:	4602      	mov	r2, r0
 800ae74:	b928      	cbnz	r0, 800ae82 <__i2b+0x1a>
 800ae76:	4b05      	ldr	r3, [pc, #20]	; (800ae8c <__i2b+0x24>)
 800ae78:	4805      	ldr	r0, [pc, #20]	; (800ae90 <__i2b+0x28>)
 800ae7a:	f240 1145 	movw	r1, #325	; 0x145
 800ae7e:	f000 fc7f 	bl	800b780 <__assert_func>
 800ae82:	2301      	movs	r3, #1
 800ae84:	6144      	str	r4, [r0, #20]
 800ae86:	6103      	str	r3, [r0, #16]
 800ae88:	bd10      	pop	{r4, pc}
 800ae8a:	bf00      	nop
 800ae8c:	0800eb98 	.word	0x0800eb98
 800ae90:	0800eba9 	.word	0x0800eba9

0800ae94 <__multiply>:
 800ae94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae98:	4691      	mov	r9, r2
 800ae9a:	690a      	ldr	r2, [r1, #16]
 800ae9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	bfb8      	it	lt
 800aea4:	460b      	movlt	r3, r1
 800aea6:	460c      	mov	r4, r1
 800aea8:	bfbc      	itt	lt
 800aeaa:	464c      	movlt	r4, r9
 800aeac:	4699      	movlt	r9, r3
 800aeae:	6927      	ldr	r7, [r4, #16]
 800aeb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aeb4:	68a3      	ldr	r3, [r4, #8]
 800aeb6:	6861      	ldr	r1, [r4, #4]
 800aeb8:	eb07 060a 	add.w	r6, r7, sl
 800aebc:	42b3      	cmp	r3, r6
 800aebe:	b085      	sub	sp, #20
 800aec0:	bfb8      	it	lt
 800aec2:	3101      	addlt	r1, #1
 800aec4:	f7ff feda 	bl	800ac7c <_Balloc>
 800aec8:	b930      	cbnz	r0, 800aed8 <__multiply+0x44>
 800aeca:	4602      	mov	r2, r0
 800aecc:	4b44      	ldr	r3, [pc, #272]	; (800afe0 <__multiply+0x14c>)
 800aece:	4845      	ldr	r0, [pc, #276]	; (800afe4 <__multiply+0x150>)
 800aed0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aed4:	f000 fc54 	bl	800b780 <__assert_func>
 800aed8:	f100 0514 	add.w	r5, r0, #20
 800aedc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aee0:	462b      	mov	r3, r5
 800aee2:	2200      	movs	r2, #0
 800aee4:	4543      	cmp	r3, r8
 800aee6:	d321      	bcc.n	800af2c <__multiply+0x98>
 800aee8:	f104 0314 	add.w	r3, r4, #20
 800aeec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aef0:	f109 0314 	add.w	r3, r9, #20
 800aef4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aef8:	9202      	str	r2, [sp, #8]
 800aefa:	1b3a      	subs	r2, r7, r4
 800aefc:	3a15      	subs	r2, #21
 800aefe:	f022 0203 	bic.w	r2, r2, #3
 800af02:	3204      	adds	r2, #4
 800af04:	f104 0115 	add.w	r1, r4, #21
 800af08:	428f      	cmp	r7, r1
 800af0a:	bf38      	it	cc
 800af0c:	2204      	movcc	r2, #4
 800af0e:	9201      	str	r2, [sp, #4]
 800af10:	9a02      	ldr	r2, [sp, #8]
 800af12:	9303      	str	r3, [sp, #12]
 800af14:	429a      	cmp	r2, r3
 800af16:	d80c      	bhi.n	800af32 <__multiply+0x9e>
 800af18:	2e00      	cmp	r6, #0
 800af1a:	dd03      	ble.n	800af24 <__multiply+0x90>
 800af1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af20:	2b00      	cmp	r3, #0
 800af22:	d05b      	beq.n	800afdc <__multiply+0x148>
 800af24:	6106      	str	r6, [r0, #16]
 800af26:	b005      	add	sp, #20
 800af28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2c:	f843 2b04 	str.w	r2, [r3], #4
 800af30:	e7d8      	b.n	800aee4 <__multiply+0x50>
 800af32:	f8b3 a000 	ldrh.w	sl, [r3]
 800af36:	f1ba 0f00 	cmp.w	sl, #0
 800af3a:	d024      	beq.n	800af86 <__multiply+0xf2>
 800af3c:	f104 0e14 	add.w	lr, r4, #20
 800af40:	46a9      	mov	r9, r5
 800af42:	f04f 0c00 	mov.w	ip, #0
 800af46:	f85e 2b04 	ldr.w	r2, [lr], #4
 800af4a:	f8d9 1000 	ldr.w	r1, [r9]
 800af4e:	fa1f fb82 	uxth.w	fp, r2
 800af52:	b289      	uxth	r1, r1
 800af54:	fb0a 110b 	mla	r1, sl, fp, r1
 800af58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800af5c:	f8d9 2000 	ldr.w	r2, [r9]
 800af60:	4461      	add	r1, ip
 800af62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af66:	fb0a c20b 	mla	r2, sl, fp, ip
 800af6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af6e:	b289      	uxth	r1, r1
 800af70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af74:	4577      	cmp	r7, lr
 800af76:	f849 1b04 	str.w	r1, [r9], #4
 800af7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af7e:	d8e2      	bhi.n	800af46 <__multiply+0xb2>
 800af80:	9a01      	ldr	r2, [sp, #4]
 800af82:	f845 c002 	str.w	ip, [r5, r2]
 800af86:	9a03      	ldr	r2, [sp, #12]
 800af88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af8c:	3304      	adds	r3, #4
 800af8e:	f1b9 0f00 	cmp.w	r9, #0
 800af92:	d021      	beq.n	800afd8 <__multiply+0x144>
 800af94:	6829      	ldr	r1, [r5, #0]
 800af96:	f104 0c14 	add.w	ip, r4, #20
 800af9a:	46ae      	mov	lr, r5
 800af9c:	f04f 0a00 	mov.w	sl, #0
 800afa0:	f8bc b000 	ldrh.w	fp, [ip]
 800afa4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800afa8:	fb09 220b 	mla	r2, r9, fp, r2
 800afac:	4452      	add	r2, sl
 800afae:	b289      	uxth	r1, r1
 800afb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800afb4:	f84e 1b04 	str.w	r1, [lr], #4
 800afb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800afbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800afc0:	f8be 1000 	ldrh.w	r1, [lr]
 800afc4:	fb09 110a 	mla	r1, r9, sl, r1
 800afc8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800afcc:	4567      	cmp	r7, ip
 800afce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800afd2:	d8e5      	bhi.n	800afa0 <__multiply+0x10c>
 800afd4:	9a01      	ldr	r2, [sp, #4]
 800afd6:	50a9      	str	r1, [r5, r2]
 800afd8:	3504      	adds	r5, #4
 800afda:	e799      	b.n	800af10 <__multiply+0x7c>
 800afdc:	3e01      	subs	r6, #1
 800afde:	e79b      	b.n	800af18 <__multiply+0x84>
 800afe0:	0800eb98 	.word	0x0800eb98
 800afe4:	0800eba9 	.word	0x0800eba9

0800afe8 <__pow5mult>:
 800afe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afec:	4615      	mov	r5, r2
 800afee:	f012 0203 	ands.w	r2, r2, #3
 800aff2:	4606      	mov	r6, r0
 800aff4:	460f      	mov	r7, r1
 800aff6:	d007      	beq.n	800b008 <__pow5mult+0x20>
 800aff8:	4c25      	ldr	r4, [pc, #148]	; (800b090 <__pow5mult+0xa8>)
 800affa:	3a01      	subs	r2, #1
 800affc:	2300      	movs	r3, #0
 800affe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b002:	f7ff fe9d 	bl	800ad40 <__multadd>
 800b006:	4607      	mov	r7, r0
 800b008:	10ad      	asrs	r5, r5, #2
 800b00a:	d03d      	beq.n	800b088 <__pow5mult+0xa0>
 800b00c:	69f4      	ldr	r4, [r6, #28]
 800b00e:	b97c      	cbnz	r4, 800b030 <__pow5mult+0x48>
 800b010:	2010      	movs	r0, #16
 800b012:	f7fe f831 	bl	8009078 <malloc>
 800b016:	4602      	mov	r2, r0
 800b018:	61f0      	str	r0, [r6, #28]
 800b01a:	b928      	cbnz	r0, 800b028 <__pow5mult+0x40>
 800b01c:	4b1d      	ldr	r3, [pc, #116]	; (800b094 <__pow5mult+0xac>)
 800b01e:	481e      	ldr	r0, [pc, #120]	; (800b098 <__pow5mult+0xb0>)
 800b020:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b024:	f000 fbac 	bl	800b780 <__assert_func>
 800b028:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b02c:	6004      	str	r4, [r0, #0]
 800b02e:	60c4      	str	r4, [r0, #12]
 800b030:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b034:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b038:	b94c      	cbnz	r4, 800b04e <__pow5mult+0x66>
 800b03a:	f240 2171 	movw	r1, #625	; 0x271
 800b03e:	4630      	mov	r0, r6
 800b040:	f7ff ff12 	bl	800ae68 <__i2b>
 800b044:	2300      	movs	r3, #0
 800b046:	f8c8 0008 	str.w	r0, [r8, #8]
 800b04a:	4604      	mov	r4, r0
 800b04c:	6003      	str	r3, [r0, #0]
 800b04e:	f04f 0900 	mov.w	r9, #0
 800b052:	07eb      	lsls	r3, r5, #31
 800b054:	d50a      	bpl.n	800b06c <__pow5mult+0x84>
 800b056:	4639      	mov	r1, r7
 800b058:	4622      	mov	r2, r4
 800b05a:	4630      	mov	r0, r6
 800b05c:	f7ff ff1a 	bl	800ae94 <__multiply>
 800b060:	4639      	mov	r1, r7
 800b062:	4680      	mov	r8, r0
 800b064:	4630      	mov	r0, r6
 800b066:	f7ff fe49 	bl	800acfc <_Bfree>
 800b06a:	4647      	mov	r7, r8
 800b06c:	106d      	asrs	r5, r5, #1
 800b06e:	d00b      	beq.n	800b088 <__pow5mult+0xa0>
 800b070:	6820      	ldr	r0, [r4, #0]
 800b072:	b938      	cbnz	r0, 800b084 <__pow5mult+0x9c>
 800b074:	4622      	mov	r2, r4
 800b076:	4621      	mov	r1, r4
 800b078:	4630      	mov	r0, r6
 800b07a:	f7ff ff0b 	bl	800ae94 <__multiply>
 800b07e:	6020      	str	r0, [r4, #0]
 800b080:	f8c0 9000 	str.w	r9, [r0]
 800b084:	4604      	mov	r4, r0
 800b086:	e7e4      	b.n	800b052 <__pow5mult+0x6a>
 800b088:	4638      	mov	r0, r7
 800b08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b08e:	bf00      	nop
 800b090:	0800ecf8 	.word	0x0800ecf8
 800b094:	0800eb29 	.word	0x0800eb29
 800b098:	0800eba9 	.word	0x0800eba9

0800b09c <__lshift>:
 800b09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0a0:	460c      	mov	r4, r1
 800b0a2:	6849      	ldr	r1, [r1, #4]
 800b0a4:	6923      	ldr	r3, [r4, #16]
 800b0a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0aa:	68a3      	ldr	r3, [r4, #8]
 800b0ac:	4607      	mov	r7, r0
 800b0ae:	4691      	mov	r9, r2
 800b0b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0b4:	f108 0601 	add.w	r6, r8, #1
 800b0b8:	42b3      	cmp	r3, r6
 800b0ba:	db0b      	blt.n	800b0d4 <__lshift+0x38>
 800b0bc:	4638      	mov	r0, r7
 800b0be:	f7ff fddd 	bl	800ac7c <_Balloc>
 800b0c2:	4605      	mov	r5, r0
 800b0c4:	b948      	cbnz	r0, 800b0da <__lshift+0x3e>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	4b28      	ldr	r3, [pc, #160]	; (800b16c <__lshift+0xd0>)
 800b0ca:	4829      	ldr	r0, [pc, #164]	; (800b170 <__lshift+0xd4>)
 800b0cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b0d0:	f000 fb56 	bl	800b780 <__assert_func>
 800b0d4:	3101      	adds	r1, #1
 800b0d6:	005b      	lsls	r3, r3, #1
 800b0d8:	e7ee      	b.n	800b0b8 <__lshift+0x1c>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	f100 0114 	add.w	r1, r0, #20
 800b0e0:	f100 0210 	add.w	r2, r0, #16
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	4553      	cmp	r3, sl
 800b0e8:	db33      	blt.n	800b152 <__lshift+0xb6>
 800b0ea:	6920      	ldr	r0, [r4, #16]
 800b0ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0f0:	f104 0314 	add.w	r3, r4, #20
 800b0f4:	f019 091f 	ands.w	r9, r9, #31
 800b0f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b0fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b100:	d02b      	beq.n	800b15a <__lshift+0xbe>
 800b102:	f1c9 0e20 	rsb	lr, r9, #32
 800b106:	468a      	mov	sl, r1
 800b108:	2200      	movs	r2, #0
 800b10a:	6818      	ldr	r0, [r3, #0]
 800b10c:	fa00 f009 	lsl.w	r0, r0, r9
 800b110:	4310      	orrs	r0, r2
 800b112:	f84a 0b04 	str.w	r0, [sl], #4
 800b116:	f853 2b04 	ldr.w	r2, [r3], #4
 800b11a:	459c      	cmp	ip, r3
 800b11c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b120:	d8f3      	bhi.n	800b10a <__lshift+0x6e>
 800b122:	ebac 0304 	sub.w	r3, ip, r4
 800b126:	3b15      	subs	r3, #21
 800b128:	f023 0303 	bic.w	r3, r3, #3
 800b12c:	3304      	adds	r3, #4
 800b12e:	f104 0015 	add.w	r0, r4, #21
 800b132:	4584      	cmp	ip, r0
 800b134:	bf38      	it	cc
 800b136:	2304      	movcc	r3, #4
 800b138:	50ca      	str	r2, [r1, r3]
 800b13a:	b10a      	cbz	r2, 800b140 <__lshift+0xa4>
 800b13c:	f108 0602 	add.w	r6, r8, #2
 800b140:	3e01      	subs	r6, #1
 800b142:	4638      	mov	r0, r7
 800b144:	612e      	str	r6, [r5, #16]
 800b146:	4621      	mov	r1, r4
 800b148:	f7ff fdd8 	bl	800acfc <_Bfree>
 800b14c:	4628      	mov	r0, r5
 800b14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b152:	f842 0f04 	str.w	r0, [r2, #4]!
 800b156:	3301      	adds	r3, #1
 800b158:	e7c5      	b.n	800b0e6 <__lshift+0x4a>
 800b15a:	3904      	subs	r1, #4
 800b15c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b160:	f841 2f04 	str.w	r2, [r1, #4]!
 800b164:	459c      	cmp	ip, r3
 800b166:	d8f9      	bhi.n	800b15c <__lshift+0xc0>
 800b168:	e7ea      	b.n	800b140 <__lshift+0xa4>
 800b16a:	bf00      	nop
 800b16c:	0800eb98 	.word	0x0800eb98
 800b170:	0800eba9 	.word	0x0800eba9

0800b174 <__mcmp>:
 800b174:	b530      	push	{r4, r5, lr}
 800b176:	6902      	ldr	r2, [r0, #16]
 800b178:	690c      	ldr	r4, [r1, #16]
 800b17a:	1b12      	subs	r2, r2, r4
 800b17c:	d10e      	bne.n	800b19c <__mcmp+0x28>
 800b17e:	f100 0314 	add.w	r3, r0, #20
 800b182:	3114      	adds	r1, #20
 800b184:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b188:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b18c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b190:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b194:	42a5      	cmp	r5, r4
 800b196:	d003      	beq.n	800b1a0 <__mcmp+0x2c>
 800b198:	d305      	bcc.n	800b1a6 <__mcmp+0x32>
 800b19a:	2201      	movs	r2, #1
 800b19c:	4610      	mov	r0, r2
 800b19e:	bd30      	pop	{r4, r5, pc}
 800b1a0:	4283      	cmp	r3, r0
 800b1a2:	d3f3      	bcc.n	800b18c <__mcmp+0x18>
 800b1a4:	e7fa      	b.n	800b19c <__mcmp+0x28>
 800b1a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1aa:	e7f7      	b.n	800b19c <__mcmp+0x28>

0800b1ac <__mdiff>:
 800b1ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b0:	460c      	mov	r4, r1
 800b1b2:	4606      	mov	r6, r0
 800b1b4:	4611      	mov	r1, r2
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	4690      	mov	r8, r2
 800b1ba:	f7ff ffdb 	bl	800b174 <__mcmp>
 800b1be:	1e05      	subs	r5, r0, #0
 800b1c0:	d110      	bne.n	800b1e4 <__mdiff+0x38>
 800b1c2:	4629      	mov	r1, r5
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	f7ff fd59 	bl	800ac7c <_Balloc>
 800b1ca:	b930      	cbnz	r0, 800b1da <__mdiff+0x2e>
 800b1cc:	4b3a      	ldr	r3, [pc, #232]	; (800b2b8 <__mdiff+0x10c>)
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	f240 2137 	movw	r1, #567	; 0x237
 800b1d4:	4839      	ldr	r0, [pc, #228]	; (800b2bc <__mdiff+0x110>)
 800b1d6:	f000 fad3 	bl	800b780 <__assert_func>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b1e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e4:	bfa4      	itt	ge
 800b1e6:	4643      	movge	r3, r8
 800b1e8:	46a0      	movge	r8, r4
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b1f0:	bfa6      	itte	ge
 800b1f2:	461c      	movge	r4, r3
 800b1f4:	2500      	movge	r5, #0
 800b1f6:	2501      	movlt	r5, #1
 800b1f8:	f7ff fd40 	bl	800ac7c <_Balloc>
 800b1fc:	b920      	cbnz	r0, 800b208 <__mdiff+0x5c>
 800b1fe:	4b2e      	ldr	r3, [pc, #184]	; (800b2b8 <__mdiff+0x10c>)
 800b200:	4602      	mov	r2, r0
 800b202:	f240 2145 	movw	r1, #581	; 0x245
 800b206:	e7e5      	b.n	800b1d4 <__mdiff+0x28>
 800b208:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b20c:	6926      	ldr	r6, [r4, #16]
 800b20e:	60c5      	str	r5, [r0, #12]
 800b210:	f104 0914 	add.w	r9, r4, #20
 800b214:	f108 0514 	add.w	r5, r8, #20
 800b218:	f100 0e14 	add.w	lr, r0, #20
 800b21c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b220:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b224:	f108 0210 	add.w	r2, r8, #16
 800b228:	46f2      	mov	sl, lr
 800b22a:	2100      	movs	r1, #0
 800b22c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b230:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b234:	fa11 f88b 	uxtah	r8, r1, fp
 800b238:	b299      	uxth	r1, r3
 800b23a:	0c1b      	lsrs	r3, r3, #16
 800b23c:	eba8 0801 	sub.w	r8, r8, r1
 800b240:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b244:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b248:	fa1f f888 	uxth.w	r8, r8
 800b24c:	1419      	asrs	r1, r3, #16
 800b24e:	454e      	cmp	r6, r9
 800b250:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b254:	f84a 3b04 	str.w	r3, [sl], #4
 800b258:	d8e8      	bhi.n	800b22c <__mdiff+0x80>
 800b25a:	1b33      	subs	r3, r6, r4
 800b25c:	3b15      	subs	r3, #21
 800b25e:	f023 0303 	bic.w	r3, r3, #3
 800b262:	3304      	adds	r3, #4
 800b264:	3415      	adds	r4, #21
 800b266:	42a6      	cmp	r6, r4
 800b268:	bf38      	it	cc
 800b26a:	2304      	movcc	r3, #4
 800b26c:	441d      	add	r5, r3
 800b26e:	4473      	add	r3, lr
 800b270:	469e      	mov	lr, r3
 800b272:	462e      	mov	r6, r5
 800b274:	4566      	cmp	r6, ip
 800b276:	d30e      	bcc.n	800b296 <__mdiff+0xea>
 800b278:	f10c 0203 	add.w	r2, ip, #3
 800b27c:	1b52      	subs	r2, r2, r5
 800b27e:	f022 0203 	bic.w	r2, r2, #3
 800b282:	3d03      	subs	r5, #3
 800b284:	45ac      	cmp	ip, r5
 800b286:	bf38      	it	cc
 800b288:	2200      	movcc	r2, #0
 800b28a:	4413      	add	r3, r2
 800b28c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b290:	b17a      	cbz	r2, 800b2b2 <__mdiff+0x106>
 800b292:	6107      	str	r7, [r0, #16]
 800b294:	e7a4      	b.n	800b1e0 <__mdiff+0x34>
 800b296:	f856 8b04 	ldr.w	r8, [r6], #4
 800b29a:	fa11 f288 	uxtah	r2, r1, r8
 800b29e:	1414      	asrs	r4, r2, #16
 800b2a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b2a4:	b292      	uxth	r2, r2
 800b2a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b2aa:	f84e 2b04 	str.w	r2, [lr], #4
 800b2ae:	1421      	asrs	r1, r4, #16
 800b2b0:	e7e0      	b.n	800b274 <__mdiff+0xc8>
 800b2b2:	3f01      	subs	r7, #1
 800b2b4:	e7ea      	b.n	800b28c <__mdiff+0xe0>
 800b2b6:	bf00      	nop
 800b2b8:	0800eb98 	.word	0x0800eb98
 800b2bc:	0800eba9 	.word	0x0800eba9

0800b2c0 <__d2b>:
 800b2c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2c4:	460f      	mov	r7, r1
 800b2c6:	2101      	movs	r1, #1
 800b2c8:	ec59 8b10 	vmov	r8, r9, d0
 800b2cc:	4616      	mov	r6, r2
 800b2ce:	f7ff fcd5 	bl	800ac7c <_Balloc>
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	b930      	cbnz	r0, 800b2e4 <__d2b+0x24>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	4b24      	ldr	r3, [pc, #144]	; (800b36c <__d2b+0xac>)
 800b2da:	4825      	ldr	r0, [pc, #148]	; (800b370 <__d2b+0xb0>)
 800b2dc:	f240 310f 	movw	r1, #783	; 0x30f
 800b2e0:	f000 fa4e 	bl	800b780 <__assert_func>
 800b2e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b2e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2ec:	bb2d      	cbnz	r5, 800b33a <__d2b+0x7a>
 800b2ee:	9301      	str	r3, [sp, #4]
 800b2f0:	f1b8 0300 	subs.w	r3, r8, #0
 800b2f4:	d026      	beq.n	800b344 <__d2b+0x84>
 800b2f6:	4668      	mov	r0, sp
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	f7ff fd87 	bl	800ae0c <__lo0bits>
 800b2fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b302:	b1e8      	cbz	r0, 800b340 <__d2b+0x80>
 800b304:	f1c0 0320 	rsb	r3, r0, #32
 800b308:	fa02 f303 	lsl.w	r3, r2, r3
 800b30c:	430b      	orrs	r3, r1
 800b30e:	40c2      	lsrs	r2, r0
 800b310:	6163      	str	r3, [r4, #20]
 800b312:	9201      	str	r2, [sp, #4]
 800b314:	9b01      	ldr	r3, [sp, #4]
 800b316:	61a3      	str	r3, [r4, #24]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	bf14      	ite	ne
 800b31c:	2202      	movne	r2, #2
 800b31e:	2201      	moveq	r2, #1
 800b320:	6122      	str	r2, [r4, #16]
 800b322:	b1bd      	cbz	r5, 800b354 <__d2b+0x94>
 800b324:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b328:	4405      	add	r5, r0
 800b32a:	603d      	str	r5, [r7, #0]
 800b32c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b330:	6030      	str	r0, [r6, #0]
 800b332:	4620      	mov	r0, r4
 800b334:	b003      	add	sp, #12
 800b336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b33a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b33e:	e7d6      	b.n	800b2ee <__d2b+0x2e>
 800b340:	6161      	str	r1, [r4, #20]
 800b342:	e7e7      	b.n	800b314 <__d2b+0x54>
 800b344:	a801      	add	r0, sp, #4
 800b346:	f7ff fd61 	bl	800ae0c <__lo0bits>
 800b34a:	9b01      	ldr	r3, [sp, #4]
 800b34c:	6163      	str	r3, [r4, #20]
 800b34e:	3020      	adds	r0, #32
 800b350:	2201      	movs	r2, #1
 800b352:	e7e5      	b.n	800b320 <__d2b+0x60>
 800b354:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b358:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b35c:	6038      	str	r0, [r7, #0]
 800b35e:	6918      	ldr	r0, [r3, #16]
 800b360:	f7ff fd34 	bl	800adcc <__hi0bits>
 800b364:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b368:	e7e2      	b.n	800b330 <__d2b+0x70>
 800b36a:	bf00      	nop
 800b36c:	0800eb98 	.word	0x0800eb98
 800b370:	0800eba9 	.word	0x0800eba9

0800b374 <__ssputs_r>:
 800b374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b378:	688e      	ldr	r6, [r1, #8]
 800b37a:	461f      	mov	r7, r3
 800b37c:	42be      	cmp	r6, r7
 800b37e:	680b      	ldr	r3, [r1, #0]
 800b380:	4682      	mov	sl, r0
 800b382:	460c      	mov	r4, r1
 800b384:	4690      	mov	r8, r2
 800b386:	d82c      	bhi.n	800b3e2 <__ssputs_r+0x6e>
 800b388:	898a      	ldrh	r2, [r1, #12]
 800b38a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b38e:	d026      	beq.n	800b3de <__ssputs_r+0x6a>
 800b390:	6965      	ldr	r5, [r4, #20]
 800b392:	6909      	ldr	r1, [r1, #16]
 800b394:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b398:	eba3 0901 	sub.w	r9, r3, r1
 800b39c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3a0:	1c7b      	adds	r3, r7, #1
 800b3a2:	444b      	add	r3, r9
 800b3a4:	106d      	asrs	r5, r5, #1
 800b3a6:	429d      	cmp	r5, r3
 800b3a8:	bf38      	it	cc
 800b3aa:	461d      	movcc	r5, r3
 800b3ac:	0553      	lsls	r3, r2, #21
 800b3ae:	d527      	bpl.n	800b400 <__ssputs_r+0x8c>
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	f7fd fe89 	bl	80090c8 <_malloc_r>
 800b3b6:	4606      	mov	r6, r0
 800b3b8:	b360      	cbz	r0, 800b414 <__ssputs_r+0xa0>
 800b3ba:	6921      	ldr	r1, [r4, #16]
 800b3bc:	464a      	mov	r2, r9
 800b3be:	f7fe fd89 	bl	8009ed4 <memcpy>
 800b3c2:	89a3      	ldrh	r3, [r4, #12]
 800b3c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3cc:	81a3      	strh	r3, [r4, #12]
 800b3ce:	6126      	str	r6, [r4, #16]
 800b3d0:	6165      	str	r5, [r4, #20]
 800b3d2:	444e      	add	r6, r9
 800b3d4:	eba5 0509 	sub.w	r5, r5, r9
 800b3d8:	6026      	str	r6, [r4, #0]
 800b3da:	60a5      	str	r5, [r4, #8]
 800b3dc:	463e      	mov	r6, r7
 800b3de:	42be      	cmp	r6, r7
 800b3e0:	d900      	bls.n	800b3e4 <__ssputs_r+0x70>
 800b3e2:	463e      	mov	r6, r7
 800b3e4:	6820      	ldr	r0, [r4, #0]
 800b3e6:	4632      	mov	r2, r6
 800b3e8:	4641      	mov	r1, r8
 800b3ea:	f7fe fc86 	bl	8009cfa <memmove>
 800b3ee:	68a3      	ldr	r3, [r4, #8]
 800b3f0:	1b9b      	subs	r3, r3, r6
 800b3f2:	60a3      	str	r3, [r4, #8]
 800b3f4:	6823      	ldr	r3, [r4, #0]
 800b3f6:	4433      	add	r3, r6
 800b3f8:	6023      	str	r3, [r4, #0]
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b400:	462a      	mov	r2, r5
 800b402:	f000 fa03 	bl	800b80c <_realloc_r>
 800b406:	4606      	mov	r6, r0
 800b408:	2800      	cmp	r0, #0
 800b40a:	d1e0      	bne.n	800b3ce <__ssputs_r+0x5a>
 800b40c:	6921      	ldr	r1, [r4, #16]
 800b40e:	4650      	mov	r0, sl
 800b410:	f7ff fbe8 	bl	800abe4 <_free_r>
 800b414:	230c      	movs	r3, #12
 800b416:	f8ca 3000 	str.w	r3, [sl]
 800b41a:	89a3      	ldrh	r3, [r4, #12]
 800b41c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b420:	81a3      	strh	r3, [r4, #12]
 800b422:	f04f 30ff 	mov.w	r0, #4294967295
 800b426:	e7e9      	b.n	800b3fc <__ssputs_r+0x88>

0800b428 <_svfiprintf_r>:
 800b428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42c:	4698      	mov	r8, r3
 800b42e:	898b      	ldrh	r3, [r1, #12]
 800b430:	061b      	lsls	r3, r3, #24
 800b432:	b09d      	sub	sp, #116	; 0x74
 800b434:	4607      	mov	r7, r0
 800b436:	460d      	mov	r5, r1
 800b438:	4614      	mov	r4, r2
 800b43a:	d50e      	bpl.n	800b45a <_svfiprintf_r+0x32>
 800b43c:	690b      	ldr	r3, [r1, #16]
 800b43e:	b963      	cbnz	r3, 800b45a <_svfiprintf_r+0x32>
 800b440:	2140      	movs	r1, #64	; 0x40
 800b442:	f7fd fe41 	bl	80090c8 <_malloc_r>
 800b446:	6028      	str	r0, [r5, #0]
 800b448:	6128      	str	r0, [r5, #16]
 800b44a:	b920      	cbnz	r0, 800b456 <_svfiprintf_r+0x2e>
 800b44c:	230c      	movs	r3, #12
 800b44e:	603b      	str	r3, [r7, #0]
 800b450:	f04f 30ff 	mov.w	r0, #4294967295
 800b454:	e0d0      	b.n	800b5f8 <_svfiprintf_r+0x1d0>
 800b456:	2340      	movs	r3, #64	; 0x40
 800b458:	616b      	str	r3, [r5, #20]
 800b45a:	2300      	movs	r3, #0
 800b45c:	9309      	str	r3, [sp, #36]	; 0x24
 800b45e:	2320      	movs	r3, #32
 800b460:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b464:	f8cd 800c 	str.w	r8, [sp, #12]
 800b468:	2330      	movs	r3, #48	; 0x30
 800b46a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b610 <_svfiprintf_r+0x1e8>
 800b46e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b472:	f04f 0901 	mov.w	r9, #1
 800b476:	4623      	mov	r3, r4
 800b478:	469a      	mov	sl, r3
 800b47a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b47e:	b10a      	cbz	r2, 800b484 <_svfiprintf_r+0x5c>
 800b480:	2a25      	cmp	r2, #37	; 0x25
 800b482:	d1f9      	bne.n	800b478 <_svfiprintf_r+0x50>
 800b484:	ebba 0b04 	subs.w	fp, sl, r4
 800b488:	d00b      	beq.n	800b4a2 <_svfiprintf_r+0x7a>
 800b48a:	465b      	mov	r3, fp
 800b48c:	4622      	mov	r2, r4
 800b48e:	4629      	mov	r1, r5
 800b490:	4638      	mov	r0, r7
 800b492:	f7ff ff6f 	bl	800b374 <__ssputs_r>
 800b496:	3001      	adds	r0, #1
 800b498:	f000 80a9 	beq.w	800b5ee <_svfiprintf_r+0x1c6>
 800b49c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b49e:	445a      	add	r2, fp
 800b4a0:	9209      	str	r2, [sp, #36]	; 0x24
 800b4a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f000 80a1 	beq.w	800b5ee <_svfiprintf_r+0x1c6>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4b6:	f10a 0a01 	add.w	sl, sl, #1
 800b4ba:	9304      	str	r3, [sp, #16]
 800b4bc:	9307      	str	r3, [sp, #28]
 800b4be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4c2:	931a      	str	r3, [sp, #104]	; 0x68
 800b4c4:	4654      	mov	r4, sl
 800b4c6:	2205      	movs	r2, #5
 800b4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4cc:	4850      	ldr	r0, [pc, #320]	; (800b610 <_svfiprintf_r+0x1e8>)
 800b4ce:	f7f4 fe7f 	bl	80001d0 <memchr>
 800b4d2:	9a04      	ldr	r2, [sp, #16]
 800b4d4:	b9d8      	cbnz	r0, 800b50e <_svfiprintf_r+0xe6>
 800b4d6:	06d0      	lsls	r0, r2, #27
 800b4d8:	bf44      	itt	mi
 800b4da:	2320      	movmi	r3, #32
 800b4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4e0:	0711      	lsls	r1, r2, #28
 800b4e2:	bf44      	itt	mi
 800b4e4:	232b      	movmi	r3, #43	; 0x2b
 800b4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ee:	2b2a      	cmp	r3, #42	; 0x2a
 800b4f0:	d015      	beq.n	800b51e <_svfiprintf_r+0xf6>
 800b4f2:	9a07      	ldr	r2, [sp, #28]
 800b4f4:	4654      	mov	r4, sl
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	f04f 0c0a 	mov.w	ip, #10
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b502:	3b30      	subs	r3, #48	; 0x30
 800b504:	2b09      	cmp	r3, #9
 800b506:	d94d      	bls.n	800b5a4 <_svfiprintf_r+0x17c>
 800b508:	b1b0      	cbz	r0, 800b538 <_svfiprintf_r+0x110>
 800b50a:	9207      	str	r2, [sp, #28]
 800b50c:	e014      	b.n	800b538 <_svfiprintf_r+0x110>
 800b50e:	eba0 0308 	sub.w	r3, r0, r8
 800b512:	fa09 f303 	lsl.w	r3, r9, r3
 800b516:	4313      	orrs	r3, r2
 800b518:	9304      	str	r3, [sp, #16]
 800b51a:	46a2      	mov	sl, r4
 800b51c:	e7d2      	b.n	800b4c4 <_svfiprintf_r+0x9c>
 800b51e:	9b03      	ldr	r3, [sp, #12]
 800b520:	1d19      	adds	r1, r3, #4
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	9103      	str	r1, [sp, #12]
 800b526:	2b00      	cmp	r3, #0
 800b528:	bfbb      	ittet	lt
 800b52a:	425b      	neglt	r3, r3
 800b52c:	f042 0202 	orrlt.w	r2, r2, #2
 800b530:	9307      	strge	r3, [sp, #28]
 800b532:	9307      	strlt	r3, [sp, #28]
 800b534:	bfb8      	it	lt
 800b536:	9204      	strlt	r2, [sp, #16]
 800b538:	7823      	ldrb	r3, [r4, #0]
 800b53a:	2b2e      	cmp	r3, #46	; 0x2e
 800b53c:	d10c      	bne.n	800b558 <_svfiprintf_r+0x130>
 800b53e:	7863      	ldrb	r3, [r4, #1]
 800b540:	2b2a      	cmp	r3, #42	; 0x2a
 800b542:	d134      	bne.n	800b5ae <_svfiprintf_r+0x186>
 800b544:	9b03      	ldr	r3, [sp, #12]
 800b546:	1d1a      	adds	r2, r3, #4
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	9203      	str	r2, [sp, #12]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	bfb8      	it	lt
 800b550:	f04f 33ff 	movlt.w	r3, #4294967295
 800b554:	3402      	adds	r4, #2
 800b556:	9305      	str	r3, [sp, #20]
 800b558:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b620 <_svfiprintf_r+0x1f8>
 800b55c:	7821      	ldrb	r1, [r4, #0]
 800b55e:	2203      	movs	r2, #3
 800b560:	4650      	mov	r0, sl
 800b562:	f7f4 fe35 	bl	80001d0 <memchr>
 800b566:	b138      	cbz	r0, 800b578 <_svfiprintf_r+0x150>
 800b568:	9b04      	ldr	r3, [sp, #16]
 800b56a:	eba0 000a 	sub.w	r0, r0, sl
 800b56e:	2240      	movs	r2, #64	; 0x40
 800b570:	4082      	lsls	r2, r0
 800b572:	4313      	orrs	r3, r2
 800b574:	3401      	adds	r4, #1
 800b576:	9304      	str	r3, [sp, #16]
 800b578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b57c:	4825      	ldr	r0, [pc, #148]	; (800b614 <_svfiprintf_r+0x1ec>)
 800b57e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b582:	2206      	movs	r2, #6
 800b584:	f7f4 fe24 	bl	80001d0 <memchr>
 800b588:	2800      	cmp	r0, #0
 800b58a:	d038      	beq.n	800b5fe <_svfiprintf_r+0x1d6>
 800b58c:	4b22      	ldr	r3, [pc, #136]	; (800b618 <_svfiprintf_r+0x1f0>)
 800b58e:	bb1b      	cbnz	r3, 800b5d8 <_svfiprintf_r+0x1b0>
 800b590:	9b03      	ldr	r3, [sp, #12]
 800b592:	3307      	adds	r3, #7
 800b594:	f023 0307 	bic.w	r3, r3, #7
 800b598:	3308      	adds	r3, #8
 800b59a:	9303      	str	r3, [sp, #12]
 800b59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b59e:	4433      	add	r3, r6
 800b5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b5a2:	e768      	b.n	800b476 <_svfiprintf_r+0x4e>
 800b5a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	2001      	movs	r0, #1
 800b5ac:	e7a6      	b.n	800b4fc <_svfiprintf_r+0xd4>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	3401      	adds	r4, #1
 800b5b2:	9305      	str	r3, [sp, #20]
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	f04f 0c0a 	mov.w	ip, #10
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5c0:	3a30      	subs	r2, #48	; 0x30
 800b5c2:	2a09      	cmp	r2, #9
 800b5c4:	d903      	bls.n	800b5ce <_svfiprintf_r+0x1a6>
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d0c6      	beq.n	800b558 <_svfiprintf_r+0x130>
 800b5ca:	9105      	str	r1, [sp, #20]
 800b5cc:	e7c4      	b.n	800b558 <_svfiprintf_r+0x130>
 800b5ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e7f0      	b.n	800b5ba <_svfiprintf_r+0x192>
 800b5d8:	ab03      	add	r3, sp, #12
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	462a      	mov	r2, r5
 800b5de:	4b0f      	ldr	r3, [pc, #60]	; (800b61c <_svfiprintf_r+0x1f4>)
 800b5e0:	a904      	add	r1, sp, #16
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	f7fd fe9c 	bl	8009320 <_printf_float>
 800b5e8:	1c42      	adds	r2, r0, #1
 800b5ea:	4606      	mov	r6, r0
 800b5ec:	d1d6      	bne.n	800b59c <_svfiprintf_r+0x174>
 800b5ee:	89ab      	ldrh	r3, [r5, #12]
 800b5f0:	065b      	lsls	r3, r3, #25
 800b5f2:	f53f af2d 	bmi.w	800b450 <_svfiprintf_r+0x28>
 800b5f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5f8:	b01d      	add	sp, #116	; 0x74
 800b5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5fe:	ab03      	add	r3, sp, #12
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	462a      	mov	r2, r5
 800b604:	4b05      	ldr	r3, [pc, #20]	; (800b61c <_svfiprintf_r+0x1f4>)
 800b606:	a904      	add	r1, sp, #16
 800b608:	4638      	mov	r0, r7
 800b60a:	f7fe f92d 	bl	8009868 <_printf_i>
 800b60e:	e7eb      	b.n	800b5e8 <_svfiprintf_r+0x1c0>
 800b610:	0800ed04 	.word	0x0800ed04
 800b614:	0800ed0e 	.word	0x0800ed0e
 800b618:	08009321 	.word	0x08009321
 800b61c:	0800b375 	.word	0x0800b375
 800b620:	0800ed0a 	.word	0x0800ed0a

0800b624 <__sflush_r>:
 800b624:	898a      	ldrh	r2, [r1, #12]
 800b626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b62a:	4605      	mov	r5, r0
 800b62c:	0710      	lsls	r0, r2, #28
 800b62e:	460c      	mov	r4, r1
 800b630:	d458      	bmi.n	800b6e4 <__sflush_r+0xc0>
 800b632:	684b      	ldr	r3, [r1, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	dc05      	bgt.n	800b644 <__sflush_r+0x20>
 800b638:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	dc02      	bgt.n	800b644 <__sflush_r+0x20>
 800b63e:	2000      	movs	r0, #0
 800b640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b646:	2e00      	cmp	r6, #0
 800b648:	d0f9      	beq.n	800b63e <__sflush_r+0x1a>
 800b64a:	2300      	movs	r3, #0
 800b64c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b650:	682f      	ldr	r7, [r5, #0]
 800b652:	6a21      	ldr	r1, [r4, #32]
 800b654:	602b      	str	r3, [r5, #0]
 800b656:	d032      	beq.n	800b6be <__sflush_r+0x9a>
 800b658:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b65a:	89a3      	ldrh	r3, [r4, #12]
 800b65c:	075a      	lsls	r2, r3, #29
 800b65e:	d505      	bpl.n	800b66c <__sflush_r+0x48>
 800b660:	6863      	ldr	r3, [r4, #4]
 800b662:	1ac0      	subs	r0, r0, r3
 800b664:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b666:	b10b      	cbz	r3, 800b66c <__sflush_r+0x48>
 800b668:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b66a:	1ac0      	subs	r0, r0, r3
 800b66c:	2300      	movs	r3, #0
 800b66e:	4602      	mov	r2, r0
 800b670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b672:	6a21      	ldr	r1, [r4, #32]
 800b674:	4628      	mov	r0, r5
 800b676:	47b0      	blx	r6
 800b678:	1c43      	adds	r3, r0, #1
 800b67a:	89a3      	ldrh	r3, [r4, #12]
 800b67c:	d106      	bne.n	800b68c <__sflush_r+0x68>
 800b67e:	6829      	ldr	r1, [r5, #0]
 800b680:	291d      	cmp	r1, #29
 800b682:	d82b      	bhi.n	800b6dc <__sflush_r+0xb8>
 800b684:	4a29      	ldr	r2, [pc, #164]	; (800b72c <__sflush_r+0x108>)
 800b686:	410a      	asrs	r2, r1
 800b688:	07d6      	lsls	r6, r2, #31
 800b68a:	d427      	bmi.n	800b6dc <__sflush_r+0xb8>
 800b68c:	2200      	movs	r2, #0
 800b68e:	6062      	str	r2, [r4, #4]
 800b690:	04d9      	lsls	r1, r3, #19
 800b692:	6922      	ldr	r2, [r4, #16]
 800b694:	6022      	str	r2, [r4, #0]
 800b696:	d504      	bpl.n	800b6a2 <__sflush_r+0x7e>
 800b698:	1c42      	adds	r2, r0, #1
 800b69a:	d101      	bne.n	800b6a0 <__sflush_r+0x7c>
 800b69c:	682b      	ldr	r3, [r5, #0]
 800b69e:	b903      	cbnz	r3, 800b6a2 <__sflush_r+0x7e>
 800b6a0:	6560      	str	r0, [r4, #84]	; 0x54
 800b6a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6a4:	602f      	str	r7, [r5, #0]
 800b6a6:	2900      	cmp	r1, #0
 800b6a8:	d0c9      	beq.n	800b63e <__sflush_r+0x1a>
 800b6aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6ae:	4299      	cmp	r1, r3
 800b6b0:	d002      	beq.n	800b6b8 <__sflush_r+0x94>
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	f7ff fa96 	bl	800abe4 <_free_r>
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	6360      	str	r0, [r4, #52]	; 0x34
 800b6bc:	e7c0      	b.n	800b640 <__sflush_r+0x1c>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	47b0      	blx	r6
 800b6c4:	1c41      	adds	r1, r0, #1
 800b6c6:	d1c8      	bne.n	800b65a <__sflush_r+0x36>
 800b6c8:	682b      	ldr	r3, [r5, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d0c5      	beq.n	800b65a <__sflush_r+0x36>
 800b6ce:	2b1d      	cmp	r3, #29
 800b6d0:	d001      	beq.n	800b6d6 <__sflush_r+0xb2>
 800b6d2:	2b16      	cmp	r3, #22
 800b6d4:	d101      	bne.n	800b6da <__sflush_r+0xb6>
 800b6d6:	602f      	str	r7, [r5, #0]
 800b6d8:	e7b1      	b.n	800b63e <__sflush_r+0x1a>
 800b6da:	89a3      	ldrh	r3, [r4, #12]
 800b6dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6e0:	81a3      	strh	r3, [r4, #12]
 800b6e2:	e7ad      	b.n	800b640 <__sflush_r+0x1c>
 800b6e4:	690f      	ldr	r7, [r1, #16]
 800b6e6:	2f00      	cmp	r7, #0
 800b6e8:	d0a9      	beq.n	800b63e <__sflush_r+0x1a>
 800b6ea:	0793      	lsls	r3, r2, #30
 800b6ec:	680e      	ldr	r6, [r1, #0]
 800b6ee:	bf08      	it	eq
 800b6f0:	694b      	ldreq	r3, [r1, #20]
 800b6f2:	600f      	str	r7, [r1, #0]
 800b6f4:	bf18      	it	ne
 800b6f6:	2300      	movne	r3, #0
 800b6f8:	eba6 0807 	sub.w	r8, r6, r7
 800b6fc:	608b      	str	r3, [r1, #8]
 800b6fe:	f1b8 0f00 	cmp.w	r8, #0
 800b702:	dd9c      	ble.n	800b63e <__sflush_r+0x1a>
 800b704:	6a21      	ldr	r1, [r4, #32]
 800b706:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b708:	4643      	mov	r3, r8
 800b70a:	463a      	mov	r2, r7
 800b70c:	4628      	mov	r0, r5
 800b70e:	47b0      	blx	r6
 800b710:	2800      	cmp	r0, #0
 800b712:	dc06      	bgt.n	800b722 <__sflush_r+0xfe>
 800b714:	89a3      	ldrh	r3, [r4, #12]
 800b716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b71a:	81a3      	strh	r3, [r4, #12]
 800b71c:	f04f 30ff 	mov.w	r0, #4294967295
 800b720:	e78e      	b.n	800b640 <__sflush_r+0x1c>
 800b722:	4407      	add	r7, r0
 800b724:	eba8 0800 	sub.w	r8, r8, r0
 800b728:	e7e9      	b.n	800b6fe <__sflush_r+0xda>
 800b72a:	bf00      	nop
 800b72c:	dfbffffe 	.word	0xdfbffffe

0800b730 <_fflush_r>:
 800b730:	b538      	push	{r3, r4, r5, lr}
 800b732:	690b      	ldr	r3, [r1, #16]
 800b734:	4605      	mov	r5, r0
 800b736:	460c      	mov	r4, r1
 800b738:	b913      	cbnz	r3, 800b740 <_fflush_r+0x10>
 800b73a:	2500      	movs	r5, #0
 800b73c:	4628      	mov	r0, r5
 800b73e:	bd38      	pop	{r3, r4, r5, pc}
 800b740:	b118      	cbz	r0, 800b74a <_fflush_r+0x1a>
 800b742:	6a03      	ldr	r3, [r0, #32]
 800b744:	b90b      	cbnz	r3, 800b74a <_fflush_r+0x1a>
 800b746:	f7fe fa2b 	bl	8009ba0 <__sinit>
 800b74a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d0f3      	beq.n	800b73a <_fflush_r+0xa>
 800b752:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b754:	07d0      	lsls	r0, r2, #31
 800b756:	d404      	bmi.n	800b762 <_fflush_r+0x32>
 800b758:	0599      	lsls	r1, r3, #22
 800b75a:	d402      	bmi.n	800b762 <_fflush_r+0x32>
 800b75c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b75e:	f7fe fbb7 	bl	8009ed0 <__retarget_lock_acquire_recursive>
 800b762:	4628      	mov	r0, r5
 800b764:	4621      	mov	r1, r4
 800b766:	f7ff ff5d 	bl	800b624 <__sflush_r>
 800b76a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b76c:	07da      	lsls	r2, r3, #31
 800b76e:	4605      	mov	r5, r0
 800b770:	d4e4      	bmi.n	800b73c <_fflush_r+0xc>
 800b772:	89a3      	ldrh	r3, [r4, #12]
 800b774:	059b      	lsls	r3, r3, #22
 800b776:	d4e1      	bmi.n	800b73c <_fflush_r+0xc>
 800b778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b77a:	f7fe fbaa 	bl	8009ed2 <__retarget_lock_release_recursive>
 800b77e:	e7dd      	b.n	800b73c <_fflush_r+0xc>

0800b780 <__assert_func>:
 800b780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b782:	4614      	mov	r4, r2
 800b784:	461a      	mov	r2, r3
 800b786:	4b09      	ldr	r3, [pc, #36]	; (800b7ac <__assert_func+0x2c>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4605      	mov	r5, r0
 800b78c:	68d8      	ldr	r0, [r3, #12]
 800b78e:	b14c      	cbz	r4, 800b7a4 <__assert_func+0x24>
 800b790:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <__assert_func+0x30>)
 800b792:	9100      	str	r1, [sp, #0]
 800b794:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b798:	4906      	ldr	r1, [pc, #24]	; (800b7b4 <__assert_func+0x34>)
 800b79a:	462b      	mov	r3, r5
 800b79c:	f000 f872 	bl	800b884 <fiprintf>
 800b7a0:	f7fd fc62 	bl	8009068 <abort>
 800b7a4:	4b04      	ldr	r3, [pc, #16]	; (800b7b8 <__assert_func+0x38>)
 800b7a6:	461c      	mov	r4, r3
 800b7a8:	e7f3      	b.n	800b792 <__assert_func+0x12>
 800b7aa:	bf00      	nop
 800b7ac:	200000b8 	.word	0x200000b8
 800b7b0:	0800ed1f 	.word	0x0800ed1f
 800b7b4:	0800ed2c 	.word	0x0800ed2c
 800b7b8:	0800ed5a 	.word	0x0800ed5a

0800b7bc <_calloc_r>:
 800b7bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7be:	fba1 2402 	umull	r2, r4, r1, r2
 800b7c2:	b94c      	cbnz	r4, 800b7d8 <_calloc_r+0x1c>
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	9201      	str	r2, [sp, #4]
 800b7c8:	f7fd fc7e 	bl	80090c8 <_malloc_r>
 800b7cc:	9a01      	ldr	r2, [sp, #4]
 800b7ce:	4605      	mov	r5, r0
 800b7d0:	b930      	cbnz	r0, 800b7e0 <_calloc_r+0x24>
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	b003      	add	sp, #12
 800b7d6:	bd30      	pop	{r4, r5, pc}
 800b7d8:	220c      	movs	r2, #12
 800b7da:	6002      	str	r2, [r0, #0]
 800b7dc:	2500      	movs	r5, #0
 800b7de:	e7f8      	b.n	800b7d2 <_calloc_r+0x16>
 800b7e0:	4621      	mov	r1, r4
 800b7e2:	f7fe faa4 	bl	8009d2e <memset>
 800b7e6:	e7f4      	b.n	800b7d2 <_calloc_r+0x16>

0800b7e8 <__ascii_mbtowc>:
 800b7e8:	b082      	sub	sp, #8
 800b7ea:	b901      	cbnz	r1, 800b7ee <__ascii_mbtowc+0x6>
 800b7ec:	a901      	add	r1, sp, #4
 800b7ee:	b142      	cbz	r2, 800b802 <__ascii_mbtowc+0x1a>
 800b7f0:	b14b      	cbz	r3, 800b806 <__ascii_mbtowc+0x1e>
 800b7f2:	7813      	ldrb	r3, [r2, #0]
 800b7f4:	600b      	str	r3, [r1, #0]
 800b7f6:	7812      	ldrb	r2, [r2, #0]
 800b7f8:	1e10      	subs	r0, r2, #0
 800b7fa:	bf18      	it	ne
 800b7fc:	2001      	movne	r0, #1
 800b7fe:	b002      	add	sp, #8
 800b800:	4770      	bx	lr
 800b802:	4610      	mov	r0, r2
 800b804:	e7fb      	b.n	800b7fe <__ascii_mbtowc+0x16>
 800b806:	f06f 0001 	mvn.w	r0, #1
 800b80a:	e7f8      	b.n	800b7fe <__ascii_mbtowc+0x16>

0800b80c <_realloc_r>:
 800b80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b810:	4680      	mov	r8, r0
 800b812:	4614      	mov	r4, r2
 800b814:	460e      	mov	r6, r1
 800b816:	b921      	cbnz	r1, 800b822 <_realloc_r+0x16>
 800b818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b81c:	4611      	mov	r1, r2
 800b81e:	f7fd bc53 	b.w	80090c8 <_malloc_r>
 800b822:	b92a      	cbnz	r2, 800b830 <_realloc_r+0x24>
 800b824:	f7ff f9de 	bl	800abe4 <_free_r>
 800b828:	4625      	mov	r5, r4
 800b82a:	4628      	mov	r0, r5
 800b82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b830:	f000 f83a 	bl	800b8a8 <_malloc_usable_size_r>
 800b834:	4284      	cmp	r4, r0
 800b836:	4607      	mov	r7, r0
 800b838:	d802      	bhi.n	800b840 <_realloc_r+0x34>
 800b83a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b83e:	d812      	bhi.n	800b866 <_realloc_r+0x5a>
 800b840:	4621      	mov	r1, r4
 800b842:	4640      	mov	r0, r8
 800b844:	f7fd fc40 	bl	80090c8 <_malloc_r>
 800b848:	4605      	mov	r5, r0
 800b84a:	2800      	cmp	r0, #0
 800b84c:	d0ed      	beq.n	800b82a <_realloc_r+0x1e>
 800b84e:	42bc      	cmp	r4, r7
 800b850:	4622      	mov	r2, r4
 800b852:	4631      	mov	r1, r6
 800b854:	bf28      	it	cs
 800b856:	463a      	movcs	r2, r7
 800b858:	f7fe fb3c 	bl	8009ed4 <memcpy>
 800b85c:	4631      	mov	r1, r6
 800b85e:	4640      	mov	r0, r8
 800b860:	f7ff f9c0 	bl	800abe4 <_free_r>
 800b864:	e7e1      	b.n	800b82a <_realloc_r+0x1e>
 800b866:	4635      	mov	r5, r6
 800b868:	e7df      	b.n	800b82a <_realloc_r+0x1e>

0800b86a <__ascii_wctomb>:
 800b86a:	b149      	cbz	r1, 800b880 <__ascii_wctomb+0x16>
 800b86c:	2aff      	cmp	r2, #255	; 0xff
 800b86e:	bf85      	ittet	hi
 800b870:	238a      	movhi	r3, #138	; 0x8a
 800b872:	6003      	strhi	r3, [r0, #0]
 800b874:	700a      	strbls	r2, [r1, #0]
 800b876:	f04f 30ff 	movhi.w	r0, #4294967295
 800b87a:	bf98      	it	ls
 800b87c:	2001      	movls	r0, #1
 800b87e:	4770      	bx	lr
 800b880:	4608      	mov	r0, r1
 800b882:	4770      	bx	lr

0800b884 <fiprintf>:
 800b884:	b40e      	push	{r1, r2, r3}
 800b886:	b503      	push	{r0, r1, lr}
 800b888:	4601      	mov	r1, r0
 800b88a:	ab03      	add	r3, sp, #12
 800b88c:	4805      	ldr	r0, [pc, #20]	; (800b8a4 <fiprintf+0x20>)
 800b88e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b892:	6800      	ldr	r0, [r0, #0]
 800b894:	9301      	str	r3, [sp, #4]
 800b896:	f000 f839 	bl	800b90c <_vfiprintf_r>
 800b89a:	b002      	add	sp, #8
 800b89c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8a0:	b003      	add	sp, #12
 800b8a2:	4770      	bx	lr
 800b8a4:	200000b8 	.word	0x200000b8

0800b8a8 <_malloc_usable_size_r>:
 800b8a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8ac:	1f18      	subs	r0, r3, #4
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	bfbc      	itt	lt
 800b8b2:	580b      	ldrlt	r3, [r1, r0]
 800b8b4:	18c0      	addlt	r0, r0, r3
 800b8b6:	4770      	bx	lr

0800b8b8 <__sfputc_r>:
 800b8b8:	6893      	ldr	r3, [r2, #8]
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	b410      	push	{r4}
 800b8c0:	6093      	str	r3, [r2, #8]
 800b8c2:	da08      	bge.n	800b8d6 <__sfputc_r+0x1e>
 800b8c4:	6994      	ldr	r4, [r2, #24]
 800b8c6:	42a3      	cmp	r3, r4
 800b8c8:	db01      	blt.n	800b8ce <__sfputc_r+0x16>
 800b8ca:	290a      	cmp	r1, #10
 800b8cc:	d103      	bne.n	800b8d6 <__sfputc_r+0x1e>
 800b8ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8d2:	f000 b935 	b.w	800bb40 <__swbuf_r>
 800b8d6:	6813      	ldr	r3, [r2, #0]
 800b8d8:	1c58      	adds	r0, r3, #1
 800b8da:	6010      	str	r0, [r2, #0]
 800b8dc:	7019      	strb	r1, [r3, #0]
 800b8de:	4608      	mov	r0, r1
 800b8e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <__sfputs_r>:
 800b8e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e8:	4606      	mov	r6, r0
 800b8ea:	460f      	mov	r7, r1
 800b8ec:	4614      	mov	r4, r2
 800b8ee:	18d5      	adds	r5, r2, r3
 800b8f0:	42ac      	cmp	r4, r5
 800b8f2:	d101      	bne.n	800b8f8 <__sfputs_r+0x12>
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	e007      	b.n	800b908 <__sfputs_r+0x22>
 800b8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8fc:	463a      	mov	r2, r7
 800b8fe:	4630      	mov	r0, r6
 800b900:	f7ff ffda 	bl	800b8b8 <__sfputc_r>
 800b904:	1c43      	adds	r3, r0, #1
 800b906:	d1f3      	bne.n	800b8f0 <__sfputs_r+0xa>
 800b908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b90c <_vfiprintf_r>:
 800b90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b910:	460d      	mov	r5, r1
 800b912:	b09d      	sub	sp, #116	; 0x74
 800b914:	4614      	mov	r4, r2
 800b916:	4698      	mov	r8, r3
 800b918:	4606      	mov	r6, r0
 800b91a:	b118      	cbz	r0, 800b924 <_vfiprintf_r+0x18>
 800b91c:	6a03      	ldr	r3, [r0, #32]
 800b91e:	b90b      	cbnz	r3, 800b924 <_vfiprintf_r+0x18>
 800b920:	f7fe f93e 	bl	8009ba0 <__sinit>
 800b924:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b926:	07d9      	lsls	r1, r3, #31
 800b928:	d405      	bmi.n	800b936 <_vfiprintf_r+0x2a>
 800b92a:	89ab      	ldrh	r3, [r5, #12]
 800b92c:	059a      	lsls	r2, r3, #22
 800b92e:	d402      	bmi.n	800b936 <_vfiprintf_r+0x2a>
 800b930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b932:	f7fe facd 	bl	8009ed0 <__retarget_lock_acquire_recursive>
 800b936:	89ab      	ldrh	r3, [r5, #12]
 800b938:	071b      	lsls	r3, r3, #28
 800b93a:	d501      	bpl.n	800b940 <_vfiprintf_r+0x34>
 800b93c:	692b      	ldr	r3, [r5, #16]
 800b93e:	b99b      	cbnz	r3, 800b968 <_vfiprintf_r+0x5c>
 800b940:	4629      	mov	r1, r5
 800b942:	4630      	mov	r0, r6
 800b944:	f000 f93a 	bl	800bbbc <__swsetup_r>
 800b948:	b170      	cbz	r0, 800b968 <_vfiprintf_r+0x5c>
 800b94a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b94c:	07dc      	lsls	r4, r3, #31
 800b94e:	d504      	bpl.n	800b95a <_vfiprintf_r+0x4e>
 800b950:	f04f 30ff 	mov.w	r0, #4294967295
 800b954:	b01d      	add	sp, #116	; 0x74
 800b956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95a:	89ab      	ldrh	r3, [r5, #12]
 800b95c:	0598      	lsls	r0, r3, #22
 800b95e:	d4f7      	bmi.n	800b950 <_vfiprintf_r+0x44>
 800b960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b962:	f7fe fab6 	bl	8009ed2 <__retarget_lock_release_recursive>
 800b966:	e7f3      	b.n	800b950 <_vfiprintf_r+0x44>
 800b968:	2300      	movs	r3, #0
 800b96a:	9309      	str	r3, [sp, #36]	; 0x24
 800b96c:	2320      	movs	r3, #32
 800b96e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b972:	f8cd 800c 	str.w	r8, [sp, #12]
 800b976:	2330      	movs	r3, #48	; 0x30
 800b978:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bb2c <_vfiprintf_r+0x220>
 800b97c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b980:	f04f 0901 	mov.w	r9, #1
 800b984:	4623      	mov	r3, r4
 800b986:	469a      	mov	sl, r3
 800b988:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b98c:	b10a      	cbz	r2, 800b992 <_vfiprintf_r+0x86>
 800b98e:	2a25      	cmp	r2, #37	; 0x25
 800b990:	d1f9      	bne.n	800b986 <_vfiprintf_r+0x7a>
 800b992:	ebba 0b04 	subs.w	fp, sl, r4
 800b996:	d00b      	beq.n	800b9b0 <_vfiprintf_r+0xa4>
 800b998:	465b      	mov	r3, fp
 800b99a:	4622      	mov	r2, r4
 800b99c:	4629      	mov	r1, r5
 800b99e:	4630      	mov	r0, r6
 800b9a0:	f7ff ffa1 	bl	800b8e6 <__sfputs_r>
 800b9a4:	3001      	adds	r0, #1
 800b9a6:	f000 80a9 	beq.w	800bafc <_vfiprintf_r+0x1f0>
 800b9aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9ac:	445a      	add	r2, fp
 800b9ae:	9209      	str	r2, [sp, #36]	; 0x24
 800b9b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f000 80a1 	beq.w	800bafc <_vfiprintf_r+0x1f0>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9c4:	f10a 0a01 	add.w	sl, sl, #1
 800b9c8:	9304      	str	r3, [sp, #16]
 800b9ca:	9307      	str	r3, [sp, #28]
 800b9cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9d0:	931a      	str	r3, [sp, #104]	; 0x68
 800b9d2:	4654      	mov	r4, sl
 800b9d4:	2205      	movs	r2, #5
 800b9d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9da:	4854      	ldr	r0, [pc, #336]	; (800bb2c <_vfiprintf_r+0x220>)
 800b9dc:	f7f4 fbf8 	bl	80001d0 <memchr>
 800b9e0:	9a04      	ldr	r2, [sp, #16]
 800b9e2:	b9d8      	cbnz	r0, 800ba1c <_vfiprintf_r+0x110>
 800b9e4:	06d1      	lsls	r1, r2, #27
 800b9e6:	bf44      	itt	mi
 800b9e8:	2320      	movmi	r3, #32
 800b9ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9ee:	0713      	lsls	r3, r2, #28
 800b9f0:	bf44      	itt	mi
 800b9f2:	232b      	movmi	r3, #43	; 0x2b
 800b9f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b9fc:	2b2a      	cmp	r3, #42	; 0x2a
 800b9fe:	d015      	beq.n	800ba2c <_vfiprintf_r+0x120>
 800ba00:	9a07      	ldr	r2, [sp, #28]
 800ba02:	4654      	mov	r4, sl
 800ba04:	2000      	movs	r0, #0
 800ba06:	f04f 0c0a 	mov.w	ip, #10
 800ba0a:	4621      	mov	r1, r4
 800ba0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba10:	3b30      	subs	r3, #48	; 0x30
 800ba12:	2b09      	cmp	r3, #9
 800ba14:	d94d      	bls.n	800bab2 <_vfiprintf_r+0x1a6>
 800ba16:	b1b0      	cbz	r0, 800ba46 <_vfiprintf_r+0x13a>
 800ba18:	9207      	str	r2, [sp, #28]
 800ba1a:	e014      	b.n	800ba46 <_vfiprintf_r+0x13a>
 800ba1c:	eba0 0308 	sub.w	r3, r0, r8
 800ba20:	fa09 f303 	lsl.w	r3, r9, r3
 800ba24:	4313      	orrs	r3, r2
 800ba26:	9304      	str	r3, [sp, #16]
 800ba28:	46a2      	mov	sl, r4
 800ba2a:	e7d2      	b.n	800b9d2 <_vfiprintf_r+0xc6>
 800ba2c:	9b03      	ldr	r3, [sp, #12]
 800ba2e:	1d19      	adds	r1, r3, #4
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	9103      	str	r1, [sp, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	bfbb      	ittet	lt
 800ba38:	425b      	neglt	r3, r3
 800ba3a:	f042 0202 	orrlt.w	r2, r2, #2
 800ba3e:	9307      	strge	r3, [sp, #28]
 800ba40:	9307      	strlt	r3, [sp, #28]
 800ba42:	bfb8      	it	lt
 800ba44:	9204      	strlt	r2, [sp, #16]
 800ba46:	7823      	ldrb	r3, [r4, #0]
 800ba48:	2b2e      	cmp	r3, #46	; 0x2e
 800ba4a:	d10c      	bne.n	800ba66 <_vfiprintf_r+0x15a>
 800ba4c:	7863      	ldrb	r3, [r4, #1]
 800ba4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ba50:	d134      	bne.n	800babc <_vfiprintf_r+0x1b0>
 800ba52:	9b03      	ldr	r3, [sp, #12]
 800ba54:	1d1a      	adds	r2, r3, #4
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	9203      	str	r2, [sp, #12]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	bfb8      	it	lt
 800ba5e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba62:	3402      	adds	r4, #2
 800ba64:	9305      	str	r3, [sp, #20]
 800ba66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bb3c <_vfiprintf_r+0x230>
 800ba6a:	7821      	ldrb	r1, [r4, #0]
 800ba6c:	2203      	movs	r2, #3
 800ba6e:	4650      	mov	r0, sl
 800ba70:	f7f4 fbae 	bl	80001d0 <memchr>
 800ba74:	b138      	cbz	r0, 800ba86 <_vfiprintf_r+0x17a>
 800ba76:	9b04      	ldr	r3, [sp, #16]
 800ba78:	eba0 000a 	sub.w	r0, r0, sl
 800ba7c:	2240      	movs	r2, #64	; 0x40
 800ba7e:	4082      	lsls	r2, r0
 800ba80:	4313      	orrs	r3, r2
 800ba82:	3401      	adds	r4, #1
 800ba84:	9304      	str	r3, [sp, #16]
 800ba86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba8a:	4829      	ldr	r0, [pc, #164]	; (800bb30 <_vfiprintf_r+0x224>)
 800ba8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba90:	2206      	movs	r2, #6
 800ba92:	f7f4 fb9d 	bl	80001d0 <memchr>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	d03f      	beq.n	800bb1a <_vfiprintf_r+0x20e>
 800ba9a:	4b26      	ldr	r3, [pc, #152]	; (800bb34 <_vfiprintf_r+0x228>)
 800ba9c:	bb1b      	cbnz	r3, 800bae6 <_vfiprintf_r+0x1da>
 800ba9e:	9b03      	ldr	r3, [sp, #12]
 800baa0:	3307      	adds	r3, #7
 800baa2:	f023 0307 	bic.w	r3, r3, #7
 800baa6:	3308      	adds	r3, #8
 800baa8:	9303      	str	r3, [sp, #12]
 800baaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baac:	443b      	add	r3, r7
 800baae:	9309      	str	r3, [sp, #36]	; 0x24
 800bab0:	e768      	b.n	800b984 <_vfiprintf_r+0x78>
 800bab2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bab6:	460c      	mov	r4, r1
 800bab8:	2001      	movs	r0, #1
 800baba:	e7a6      	b.n	800ba0a <_vfiprintf_r+0xfe>
 800babc:	2300      	movs	r3, #0
 800babe:	3401      	adds	r4, #1
 800bac0:	9305      	str	r3, [sp, #20]
 800bac2:	4619      	mov	r1, r3
 800bac4:	f04f 0c0a 	mov.w	ip, #10
 800bac8:	4620      	mov	r0, r4
 800baca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bace:	3a30      	subs	r2, #48	; 0x30
 800bad0:	2a09      	cmp	r2, #9
 800bad2:	d903      	bls.n	800badc <_vfiprintf_r+0x1d0>
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d0c6      	beq.n	800ba66 <_vfiprintf_r+0x15a>
 800bad8:	9105      	str	r1, [sp, #20]
 800bada:	e7c4      	b.n	800ba66 <_vfiprintf_r+0x15a>
 800badc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bae0:	4604      	mov	r4, r0
 800bae2:	2301      	movs	r3, #1
 800bae4:	e7f0      	b.n	800bac8 <_vfiprintf_r+0x1bc>
 800bae6:	ab03      	add	r3, sp, #12
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	462a      	mov	r2, r5
 800baec:	4b12      	ldr	r3, [pc, #72]	; (800bb38 <_vfiprintf_r+0x22c>)
 800baee:	a904      	add	r1, sp, #16
 800baf0:	4630      	mov	r0, r6
 800baf2:	f7fd fc15 	bl	8009320 <_printf_float>
 800baf6:	4607      	mov	r7, r0
 800baf8:	1c78      	adds	r0, r7, #1
 800bafa:	d1d6      	bne.n	800baaa <_vfiprintf_r+0x19e>
 800bafc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bafe:	07d9      	lsls	r1, r3, #31
 800bb00:	d405      	bmi.n	800bb0e <_vfiprintf_r+0x202>
 800bb02:	89ab      	ldrh	r3, [r5, #12]
 800bb04:	059a      	lsls	r2, r3, #22
 800bb06:	d402      	bmi.n	800bb0e <_vfiprintf_r+0x202>
 800bb08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb0a:	f7fe f9e2 	bl	8009ed2 <__retarget_lock_release_recursive>
 800bb0e:	89ab      	ldrh	r3, [r5, #12]
 800bb10:	065b      	lsls	r3, r3, #25
 800bb12:	f53f af1d 	bmi.w	800b950 <_vfiprintf_r+0x44>
 800bb16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb18:	e71c      	b.n	800b954 <_vfiprintf_r+0x48>
 800bb1a:	ab03      	add	r3, sp, #12
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	462a      	mov	r2, r5
 800bb20:	4b05      	ldr	r3, [pc, #20]	; (800bb38 <_vfiprintf_r+0x22c>)
 800bb22:	a904      	add	r1, sp, #16
 800bb24:	4630      	mov	r0, r6
 800bb26:	f7fd fe9f 	bl	8009868 <_printf_i>
 800bb2a:	e7e4      	b.n	800baf6 <_vfiprintf_r+0x1ea>
 800bb2c:	0800ed04 	.word	0x0800ed04
 800bb30:	0800ed0e 	.word	0x0800ed0e
 800bb34:	08009321 	.word	0x08009321
 800bb38:	0800b8e7 	.word	0x0800b8e7
 800bb3c:	0800ed0a 	.word	0x0800ed0a

0800bb40 <__swbuf_r>:
 800bb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb42:	460e      	mov	r6, r1
 800bb44:	4614      	mov	r4, r2
 800bb46:	4605      	mov	r5, r0
 800bb48:	b118      	cbz	r0, 800bb52 <__swbuf_r+0x12>
 800bb4a:	6a03      	ldr	r3, [r0, #32]
 800bb4c:	b90b      	cbnz	r3, 800bb52 <__swbuf_r+0x12>
 800bb4e:	f7fe f827 	bl	8009ba0 <__sinit>
 800bb52:	69a3      	ldr	r3, [r4, #24]
 800bb54:	60a3      	str	r3, [r4, #8]
 800bb56:	89a3      	ldrh	r3, [r4, #12]
 800bb58:	071a      	lsls	r2, r3, #28
 800bb5a:	d525      	bpl.n	800bba8 <__swbuf_r+0x68>
 800bb5c:	6923      	ldr	r3, [r4, #16]
 800bb5e:	b31b      	cbz	r3, 800bba8 <__swbuf_r+0x68>
 800bb60:	6823      	ldr	r3, [r4, #0]
 800bb62:	6922      	ldr	r2, [r4, #16]
 800bb64:	1a98      	subs	r0, r3, r2
 800bb66:	6963      	ldr	r3, [r4, #20]
 800bb68:	b2f6      	uxtb	r6, r6
 800bb6a:	4283      	cmp	r3, r0
 800bb6c:	4637      	mov	r7, r6
 800bb6e:	dc04      	bgt.n	800bb7a <__swbuf_r+0x3a>
 800bb70:	4621      	mov	r1, r4
 800bb72:	4628      	mov	r0, r5
 800bb74:	f7ff fddc 	bl	800b730 <_fflush_r>
 800bb78:	b9e0      	cbnz	r0, 800bbb4 <__swbuf_r+0x74>
 800bb7a:	68a3      	ldr	r3, [r4, #8]
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	60a3      	str	r3, [r4, #8]
 800bb80:	6823      	ldr	r3, [r4, #0]
 800bb82:	1c5a      	adds	r2, r3, #1
 800bb84:	6022      	str	r2, [r4, #0]
 800bb86:	701e      	strb	r6, [r3, #0]
 800bb88:	6962      	ldr	r2, [r4, #20]
 800bb8a:	1c43      	adds	r3, r0, #1
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d004      	beq.n	800bb9a <__swbuf_r+0x5a>
 800bb90:	89a3      	ldrh	r3, [r4, #12]
 800bb92:	07db      	lsls	r3, r3, #31
 800bb94:	d506      	bpl.n	800bba4 <__swbuf_r+0x64>
 800bb96:	2e0a      	cmp	r6, #10
 800bb98:	d104      	bne.n	800bba4 <__swbuf_r+0x64>
 800bb9a:	4621      	mov	r1, r4
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	f7ff fdc7 	bl	800b730 <_fflush_r>
 800bba2:	b938      	cbnz	r0, 800bbb4 <__swbuf_r+0x74>
 800bba4:	4638      	mov	r0, r7
 800bba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bba8:	4621      	mov	r1, r4
 800bbaa:	4628      	mov	r0, r5
 800bbac:	f000 f806 	bl	800bbbc <__swsetup_r>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d0d5      	beq.n	800bb60 <__swbuf_r+0x20>
 800bbb4:	f04f 37ff 	mov.w	r7, #4294967295
 800bbb8:	e7f4      	b.n	800bba4 <__swbuf_r+0x64>
	...

0800bbbc <__swsetup_r>:
 800bbbc:	b538      	push	{r3, r4, r5, lr}
 800bbbe:	4b2a      	ldr	r3, [pc, #168]	; (800bc68 <__swsetup_r+0xac>)
 800bbc0:	4605      	mov	r5, r0
 800bbc2:	6818      	ldr	r0, [r3, #0]
 800bbc4:	460c      	mov	r4, r1
 800bbc6:	b118      	cbz	r0, 800bbd0 <__swsetup_r+0x14>
 800bbc8:	6a03      	ldr	r3, [r0, #32]
 800bbca:	b90b      	cbnz	r3, 800bbd0 <__swsetup_r+0x14>
 800bbcc:	f7fd ffe8 	bl	8009ba0 <__sinit>
 800bbd0:	89a3      	ldrh	r3, [r4, #12]
 800bbd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbd6:	0718      	lsls	r0, r3, #28
 800bbd8:	d422      	bmi.n	800bc20 <__swsetup_r+0x64>
 800bbda:	06d9      	lsls	r1, r3, #27
 800bbdc:	d407      	bmi.n	800bbee <__swsetup_r+0x32>
 800bbde:	2309      	movs	r3, #9
 800bbe0:	602b      	str	r3, [r5, #0]
 800bbe2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbe6:	81a3      	strh	r3, [r4, #12]
 800bbe8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbec:	e034      	b.n	800bc58 <__swsetup_r+0x9c>
 800bbee:	0758      	lsls	r0, r3, #29
 800bbf0:	d512      	bpl.n	800bc18 <__swsetup_r+0x5c>
 800bbf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbf4:	b141      	cbz	r1, 800bc08 <__swsetup_r+0x4c>
 800bbf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbfa:	4299      	cmp	r1, r3
 800bbfc:	d002      	beq.n	800bc04 <__swsetup_r+0x48>
 800bbfe:	4628      	mov	r0, r5
 800bc00:	f7fe fff0 	bl	800abe4 <_free_r>
 800bc04:	2300      	movs	r3, #0
 800bc06:	6363      	str	r3, [r4, #52]	; 0x34
 800bc08:	89a3      	ldrh	r3, [r4, #12]
 800bc0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc0e:	81a3      	strh	r3, [r4, #12]
 800bc10:	2300      	movs	r3, #0
 800bc12:	6063      	str	r3, [r4, #4]
 800bc14:	6923      	ldr	r3, [r4, #16]
 800bc16:	6023      	str	r3, [r4, #0]
 800bc18:	89a3      	ldrh	r3, [r4, #12]
 800bc1a:	f043 0308 	orr.w	r3, r3, #8
 800bc1e:	81a3      	strh	r3, [r4, #12]
 800bc20:	6923      	ldr	r3, [r4, #16]
 800bc22:	b94b      	cbnz	r3, 800bc38 <__swsetup_r+0x7c>
 800bc24:	89a3      	ldrh	r3, [r4, #12]
 800bc26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc2e:	d003      	beq.n	800bc38 <__swsetup_r+0x7c>
 800bc30:	4621      	mov	r1, r4
 800bc32:	4628      	mov	r0, r5
 800bc34:	f000 f840 	bl	800bcb8 <__smakebuf_r>
 800bc38:	89a0      	ldrh	r0, [r4, #12]
 800bc3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc3e:	f010 0301 	ands.w	r3, r0, #1
 800bc42:	d00a      	beq.n	800bc5a <__swsetup_r+0x9e>
 800bc44:	2300      	movs	r3, #0
 800bc46:	60a3      	str	r3, [r4, #8]
 800bc48:	6963      	ldr	r3, [r4, #20]
 800bc4a:	425b      	negs	r3, r3
 800bc4c:	61a3      	str	r3, [r4, #24]
 800bc4e:	6923      	ldr	r3, [r4, #16]
 800bc50:	b943      	cbnz	r3, 800bc64 <__swsetup_r+0xa8>
 800bc52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc56:	d1c4      	bne.n	800bbe2 <__swsetup_r+0x26>
 800bc58:	bd38      	pop	{r3, r4, r5, pc}
 800bc5a:	0781      	lsls	r1, r0, #30
 800bc5c:	bf58      	it	pl
 800bc5e:	6963      	ldrpl	r3, [r4, #20]
 800bc60:	60a3      	str	r3, [r4, #8]
 800bc62:	e7f4      	b.n	800bc4e <__swsetup_r+0x92>
 800bc64:	2000      	movs	r0, #0
 800bc66:	e7f7      	b.n	800bc58 <__swsetup_r+0x9c>
 800bc68:	200000b8 	.word	0x200000b8

0800bc6c <__swhatbuf_r>:
 800bc6c:	b570      	push	{r4, r5, r6, lr}
 800bc6e:	460c      	mov	r4, r1
 800bc70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc74:	2900      	cmp	r1, #0
 800bc76:	b096      	sub	sp, #88	; 0x58
 800bc78:	4615      	mov	r5, r2
 800bc7a:	461e      	mov	r6, r3
 800bc7c:	da0d      	bge.n	800bc9a <__swhatbuf_r+0x2e>
 800bc7e:	89a3      	ldrh	r3, [r4, #12]
 800bc80:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bc84:	f04f 0100 	mov.w	r1, #0
 800bc88:	bf0c      	ite	eq
 800bc8a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bc8e:	2340      	movne	r3, #64	; 0x40
 800bc90:	2000      	movs	r0, #0
 800bc92:	6031      	str	r1, [r6, #0]
 800bc94:	602b      	str	r3, [r5, #0]
 800bc96:	b016      	add	sp, #88	; 0x58
 800bc98:	bd70      	pop	{r4, r5, r6, pc}
 800bc9a:	466a      	mov	r2, sp
 800bc9c:	f000 f848 	bl	800bd30 <_fstat_r>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	dbec      	blt.n	800bc7e <__swhatbuf_r+0x12>
 800bca4:	9901      	ldr	r1, [sp, #4]
 800bca6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bcaa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bcae:	4259      	negs	r1, r3
 800bcb0:	4159      	adcs	r1, r3
 800bcb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcb6:	e7eb      	b.n	800bc90 <__swhatbuf_r+0x24>

0800bcb8 <__smakebuf_r>:
 800bcb8:	898b      	ldrh	r3, [r1, #12]
 800bcba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcbc:	079d      	lsls	r5, r3, #30
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	460c      	mov	r4, r1
 800bcc2:	d507      	bpl.n	800bcd4 <__smakebuf_r+0x1c>
 800bcc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bcc8:	6023      	str	r3, [r4, #0]
 800bcca:	6123      	str	r3, [r4, #16]
 800bccc:	2301      	movs	r3, #1
 800bcce:	6163      	str	r3, [r4, #20]
 800bcd0:	b002      	add	sp, #8
 800bcd2:	bd70      	pop	{r4, r5, r6, pc}
 800bcd4:	ab01      	add	r3, sp, #4
 800bcd6:	466a      	mov	r2, sp
 800bcd8:	f7ff ffc8 	bl	800bc6c <__swhatbuf_r>
 800bcdc:	9900      	ldr	r1, [sp, #0]
 800bcde:	4605      	mov	r5, r0
 800bce0:	4630      	mov	r0, r6
 800bce2:	f7fd f9f1 	bl	80090c8 <_malloc_r>
 800bce6:	b948      	cbnz	r0, 800bcfc <__smakebuf_r+0x44>
 800bce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcec:	059a      	lsls	r2, r3, #22
 800bcee:	d4ef      	bmi.n	800bcd0 <__smakebuf_r+0x18>
 800bcf0:	f023 0303 	bic.w	r3, r3, #3
 800bcf4:	f043 0302 	orr.w	r3, r3, #2
 800bcf8:	81a3      	strh	r3, [r4, #12]
 800bcfa:	e7e3      	b.n	800bcc4 <__smakebuf_r+0xc>
 800bcfc:	89a3      	ldrh	r3, [r4, #12]
 800bcfe:	6020      	str	r0, [r4, #0]
 800bd00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd04:	81a3      	strh	r3, [r4, #12]
 800bd06:	9b00      	ldr	r3, [sp, #0]
 800bd08:	6163      	str	r3, [r4, #20]
 800bd0a:	9b01      	ldr	r3, [sp, #4]
 800bd0c:	6120      	str	r0, [r4, #16]
 800bd0e:	b15b      	cbz	r3, 800bd28 <__smakebuf_r+0x70>
 800bd10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd14:	4630      	mov	r0, r6
 800bd16:	f000 f81d 	bl	800bd54 <_isatty_r>
 800bd1a:	b128      	cbz	r0, 800bd28 <__smakebuf_r+0x70>
 800bd1c:	89a3      	ldrh	r3, [r4, #12]
 800bd1e:	f023 0303 	bic.w	r3, r3, #3
 800bd22:	f043 0301 	orr.w	r3, r3, #1
 800bd26:	81a3      	strh	r3, [r4, #12]
 800bd28:	89a3      	ldrh	r3, [r4, #12]
 800bd2a:	431d      	orrs	r5, r3
 800bd2c:	81a5      	strh	r5, [r4, #12]
 800bd2e:	e7cf      	b.n	800bcd0 <__smakebuf_r+0x18>

0800bd30 <_fstat_r>:
 800bd30:	b538      	push	{r3, r4, r5, lr}
 800bd32:	4d07      	ldr	r5, [pc, #28]	; (800bd50 <_fstat_r+0x20>)
 800bd34:	2300      	movs	r3, #0
 800bd36:	4604      	mov	r4, r0
 800bd38:	4608      	mov	r0, r1
 800bd3a:	4611      	mov	r1, r2
 800bd3c:	602b      	str	r3, [r5, #0]
 800bd3e:	f7f6 faea 	bl	8002316 <_fstat>
 800bd42:	1c43      	adds	r3, r0, #1
 800bd44:	d102      	bne.n	800bd4c <_fstat_r+0x1c>
 800bd46:	682b      	ldr	r3, [r5, #0]
 800bd48:	b103      	cbz	r3, 800bd4c <_fstat_r+0x1c>
 800bd4a:	6023      	str	r3, [r4, #0]
 800bd4c:	bd38      	pop	{r3, r4, r5, pc}
 800bd4e:	bf00      	nop
 800bd50:	200009f8 	.word	0x200009f8

0800bd54 <_isatty_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4d06      	ldr	r5, [pc, #24]	; (800bd70 <_isatty_r+0x1c>)
 800bd58:	2300      	movs	r3, #0
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	4608      	mov	r0, r1
 800bd5e:	602b      	str	r3, [r5, #0]
 800bd60:	f7f6 fae9 	bl	8002336 <_isatty>
 800bd64:	1c43      	adds	r3, r0, #1
 800bd66:	d102      	bne.n	800bd6e <_isatty_r+0x1a>
 800bd68:	682b      	ldr	r3, [r5, #0]
 800bd6a:	b103      	cbz	r3, 800bd6e <_isatty_r+0x1a>
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	200009f8 	.word	0x200009f8

0800bd74 <_init>:
 800bd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd76:	bf00      	nop
 800bd78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd7a:	bc08      	pop	{r3}
 800bd7c:	469e      	mov	lr, r3
 800bd7e:	4770      	bx	lr

0800bd80 <_fini>:
 800bd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd82:	bf00      	nop
 800bd84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd86:	bc08      	pop	{r3}
 800bd88:	469e      	mov	lr, r3
 800bd8a:	4770      	bx	lr
