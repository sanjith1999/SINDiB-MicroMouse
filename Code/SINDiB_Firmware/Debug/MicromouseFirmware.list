
MicromouseFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000099c  0800bda0  0800bda0  0001bda0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c73c  0800c73c  000202c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c73c  0800c73c  0001c73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c744  0800c744  000202c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c744  0800c744  0001c744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c748  0800c748  0001c748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  0800c74c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202c8  2**0
                  CONTENTS
 10 .bss          00001788  200002c8  200002c8  000202c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001a50  20001a50  000202c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000172c4  00000000  00000000  0002033b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d15  00000000  00000000  000375ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013a8  00000000  00000000  0003b318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f31  00000000  00000000  0003c6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027b67  00000000  00000000  0003d5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cf6e  00000000  00000000  00065158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5100  00000000  00000000  000820c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006224  00000000  00000000  001571c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0015d3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bd84 	.word	0x0800bd84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	0800bd84 	.word	0x0800bd84

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea8:	f001 fbb8 	bl	800261c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eac:	f000 f83a 	bl	8000f24 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <main+0x74>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 fbff 	bl	80016b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eba:	f000 fbdd 	bl	8001678 <MX_DMA_Init>
  MX_SPI1_Init();
 8000ebe:	f000 f8d3 	bl	8001068 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000ec2:	f000 f9e3 	bl	800128c <MX_TIM4_Init>
  MX_ADC1_Init();
 8000ec6:	f000 f897 	bl	8000ff8 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000eca:	f000 f903 	bl	80010d4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000ece:	f000 f989 	bl	80011e4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000ed2:	f000 fba7 	bl	8001624 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000ed6:	f000 fac5 	bl	8001464 <MX_TIM6_Init>
  MX_TIM14_Init();
 8000eda:	f000 fb7f 	bl	80015dc <MX_TIM14_Init>
  MX_TIM5_Init();
 8000ede:	f000 fa6d 	bl	80013bc <MX_TIM5_Init>
  MX_TIM13_Init();
 8000ee2:	f000 fb57 	bl	8001594 <MX_TIM13_Init>
  MX_TIM1_Init();
 8000ee6:	f000 f92d 	bl	8001144 <MX_TIM1_Init>
  MX_TIM9_Init();
 8000eea:	f000 faf1 	bl	80014d0 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(2000);
 8000eee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ef2:	f001 fc05 	bl	8002700 <HAL_Delay>
  L3GD20_Init();
 8000ef6:	f005 fd21 	bl	800693c <L3GD20_Init>
  ITM_Port32(31) = 2;
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <main+0x74>)
 8000efc:	2202      	movs	r2, #2
 8000efe:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim1);
 8000f00:	4806      	ldr	r0, [pc, #24]	; (8000f1c <main+0x78>)
 8000f02:	f004 f8a3 	bl	800504c <HAL_TIM_Base_Start>
  TIM14_IT_START;
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <main+0x7c>)
 8000f08:	f004 f908 	bl	800511c <HAL_TIM_Base_Start_IT>

  cppmain();
 8000f0c:	f006 fe92 	bl	8007c34 <cppmain>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  return -1;
 8000f10:	f04f 33ff 	mov.w	r3, #4294967295
  }
  /* USER CODE END 3 */
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	e000007c 	.word	0xe000007c
 8000f1c:	2000043c 	.word	0x2000043c
 8000f20:	20000634 	.word	0x20000634

08000f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b094      	sub	sp, #80	; 0x50
 8000f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	2230      	movs	r2, #48	; 0x30
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f008 ff03 	bl	8009d3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	4b28      	ldr	r3, [pc, #160]	; (8000ff0 <SystemClock_Config+0xcc>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	4a27      	ldr	r2, [pc, #156]	; (8000ff0 <SystemClock_Config+0xcc>)
 8000f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f56:	6413      	str	r3, [r2, #64]	; 0x40
 8000f58:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <SystemClock_Config+0xcc>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <SystemClock_Config+0xd0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a21      	ldr	r2, [pc, #132]	; (8000ff4 <SystemClock_Config+0xd0>)
 8000f6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <SystemClock_Config+0xd0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f80:	2301      	movs	r3, #1
 8000f82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f94:	2308      	movs	r3, #8
 8000f96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000f98:	2332      	movs	r3, #50	; 0x32
 8000f9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa4:	f107 0320 	add.w	r3, r7, #32
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 fd99 	bl	8003ae0 <HAL_RCC_OscConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fb4:	f000 fc58 	bl	8001868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb8:	230f      	movs	r3, #15
 8000fba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 fffb 	bl	8003fd0 <HAL_RCC_ClockConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fe0:	f000 fc42 	bl	8001868 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000fe4:	f003 f8da 	bl	800419c <HAL_RCC_EnableCSS>
}
 8000fe8:	bf00      	nop
 8000fea:	3750      	adds	r7, #80	; 0x50
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40007000 	.word	0x40007000

08000ff8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_ADC1_Init+0x64>)
 8000ffe:	4a18      	ldr	r2, [pc, #96]	; (8001060 <MX_ADC1_Init+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_ADC1_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_ADC1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <MX_ADC1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_ADC1_Init+0x64>)
 8001016:	2200      	movs	r2, #0
 8001018:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_ADC1_Init+0x64>)
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_ADC1_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_ADC1_Init+0x64>)
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <MX_ADC1_Init+0x6c>)
 800102c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_ADC1_Init+0x64>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_ADC1_Init+0x64>)
 8001036:	2201      	movs	r2, #1
 8001038:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_ADC1_Init+0x64>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_ADC1_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_ADC1_Init+0x64>)
 800104a:	f001 fb7d 	bl	8002748 <HAL_ADC_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8001054:	f000 fc08 	bl	8001868 <Error_Handler>
  */
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200002e4 	.word	0x200002e4
 8001060:	40012000 	.word	0x40012000
 8001064:	0f000001 	.word	0x0f000001

08001068 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_SPI1_Init+0x64>)
 800106e:	4a18      	ldr	r2, [pc, #96]	; (80010d0 <MX_SPI1_Init+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <MX_SPI1_Init+0x64>)
 8001074:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001078:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_SPI1_Init+0x64>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <MX_SPI1_Init+0x64>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_SPI1_Init+0x64>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_SPI1_Init+0x64>)
 800108e:	2200      	movs	r2, #0
 8001090:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_SPI1_Init+0x64>)
 8001094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001098:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_SPI1_Init+0x64>)
 800109c:	2218      	movs	r2, #24
 800109e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <MX_SPI1_Init+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_SPI1_Init+0x64>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <MX_SPI1_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_SPI1_Init+0x64>)
 80010b4:	220a      	movs	r2, #10
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	; (80010cc <MX_SPI1_Init+0x64>)
 80010ba:	f003 f9ce 	bl	800445a <HAL_SPI_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010c4:	f000 fbd0 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	2000038c 	.word	0x2000038c
 80010d0:	40013000 	.word	0x40013000

080010d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <MX_SPI2_Init+0x68>)
 80010da:	4a19      	ldr	r2, [pc, #100]	; (8001140 <MX_SPI2_Init+0x6c>)
 80010dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_SPI2_Init+0x68>)
 80010e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <MX_SPI2_Init+0x68>)
 80010e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010ec:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <MX_SPI2_Init+0x68>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_SPI2_Init+0x68>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <MX_SPI2_Init+0x68>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_SPI2_Init+0x68>)
 8001102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001106:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_SPI2_Init+0x68>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <MX_SPI2_Init+0x68>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_SPI2_Init+0x68>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <MX_SPI2_Init+0x68>)
 800111c:	2200      	movs	r2, #0
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_SPI2_Init+0x68>)
 8001122:	220a      	movs	r2, #10
 8001124:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_SPI2_Init+0x68>)
 8001128:	f003 f997 	bl	800445a <HAL_SPI_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001132:	f000 fb99 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200003e4 	.word	0x200003e4
 8001140:	40003800 	.word	0x40003800

08001144 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	463b      	mov	r3, r7
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <MX_TIM1_Init+0x98>)
 8001162:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <MX_TIM1_Init+0x9c>)
 8001164:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_TIM1_Init+0x98>)
 8001168:	2231      	movs	r2, #49	; 0x31
 800116a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_TIM1_Init+0x98>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_TIM1_Init+0x98>)
 8001174:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001178:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MX_TIM1_Init+0x98>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_TIM1_Init+0x98>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_TIM1_Init+0x98>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800118c:	4813      	ldr	r0, [pc, #76]	; (80011dc <MX_TIM1_Init+0x98>)
 800118e:	f003 ff0d 	bl	8004fac <HAL_TIM_Base_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001198:	f000 fb66 	bl	8001868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	4619      	mov	r1, r3
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <MX_TIM1_Init+0x98>)
 80011aa:	f004 fc75 	bl	8005a98 <HAL_TIM_ConfigClockSource>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80011b4:	f000 fb58 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_TIM1_Init+0x98>)
 80011c6:	f005 f867 	bl	8006298 <HAL_TIMEx_MasterConfigSynchronization>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80011d0:	f000 fb4a 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2000043c 	.word	0x2000043c
 80011e0:	40010000 	.word	0x40010000

080011e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08c      	sub	sp, #48	; 0x30
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	2224      	movs	r2, #36	; 0x24
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f008 fda3 	bl	8009d3e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <MX_TIM2_Init+0xa4>)
 8001202:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001206:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_TIM2_Init+0xa4>)
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <MX_TIM2_Init+0xa4>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001214:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_TIM2_Init+0xa4>)
 8001216:	f04f 32ff 	mov.w	r2, #4294967295
 800121a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_TIM2_Init+0xa4>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_TIM2_Init+0xa4>)
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001228:	2301      	movs	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001230:	2301      	movs	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001240:	2301      	movs	r3, #1
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	4619      	mov	r1, r3
 8001252:	480d      	ldr	r0, [pc, #52]	; (8001288 <MX_TIM2_Init+0xa4>)
 8001254:	f004 f922 	bl	800549c <HAL_TIM_Encoder_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800125e:	f000 fb03 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	4619      	mov	r1, r3
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <MX_TIM2_Init+0xa4>)
 8001270:	f005 f812 	bl	8006298 <HAL_TIMEx_MasterConfigSynchronization>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800127a:	f000 faf5 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	3730      	adds	r7, #48	; 0x30
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000484 	.word	0x20000484

0800128c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08e      	sub	sp, #56	; 0x38
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	f107 0320 	add.w	r3, r7, #32
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
 80012b8:	615a      	str	r2, [r3, #20]
 80012ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012bc:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <MX_TIM4_Init+0x128>)
 80012be:	4a3e      	ldr	r2, [pc, #248]	; (80013b8 <MX_TIM4_Init+0x12c>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012c2:	4b3c      	ldr	r3, [pc, #240]	; (80013b4 <MX_TIM4_Init+0x128>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <MX_TIM4_Init+0x128>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4095;
 80012ce:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <MX_TIM4_Init+0x128>)
 80012d0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80012d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d6:	4b37      	ldr	r3, [pc, #220]	; (80013b4 <MX_TIM4_Init+0x128>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b35      	ldr	r3, [pc, #212]	; (80013b4 <MX_TIM4_Init+0x128>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012e2:	4834      	ldr	r0, [pc, #208]	; (80013b4 <MX_TIM4_Init+0x128>)
 80012e4:	f003 fe62 	bl	8004fac <HAL_TIM_Base_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80012ee:	f000 fabb 	bl	8001868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012fc:	4619      	mov	r1, r3
 80012fe:	482d      	ldr	r0, [pc, #180]	; (80013b4 <MX_TIM4_Init+0x128>)
 8001300:	f004 fbca 	bl	8005a98 <HAL_TIM_ConfigClockSource>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800130a:	f000 faad 	bl	8001868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800130e:	4829      	ldr	r0, [pc, #164]	; (80013b4 <MX_TIM4_Init+0x128>)
 8001310:	f003 ffa3 	bl	800525a <HAL_TIM_PWM_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800131a:	f000 faa5 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001326:	f107 0320 	add.w	r3, r7, #32
 800132a:	4619      	mov	r1, r3
 800132c:	4821      	ldr	r0, [pc, #132]	; (80013b4 <MX_TIM4_Init+0x128>)
 800132e:	f004 ffb3 	bl	8006298 <HAL_TIMEx_MasterConfigSynchronization>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001338:	f000 fa96 	bl	8001868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800133c:	2360      	movs	r3, #96	; 0x60
 800133e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	4619      	mov	r1, r3
 8001352:	4818      	ldr	r0, [pc, #96]	; (80013b4 <MX_TIM4_Init+0x128>)
 8001354:	f004 fade 	bl	8005914 <HAL_TIM_PWM_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800135e:	f000 fa83 	bl	8001868 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2204      	movs	r2, #4
 8001366:	4619      	mov	r1, r3
 8001368:	4812      	ldr	r0, [pc, #72]	; (80013b4 <MX_TIM4_Init+0x128>)
 800136a:	f004 fad3 	bl	8005914 <HAL_TIM_PWM_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001374:	f000 fa78 	bl	8001868 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2208      	movs	r2, #8
 800137c:	4619      	mov	r1, r3
 800137e:	480d      	ldr	r0, [pc, #52]	; (80013b4 <MX_TIM4_Init+0x128>)
 8001380:	f004 fac8 	bl	8005914 <HAL_TIM_PWM_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800138a:	f000 fa6d 	bl	8001868 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	220c      	movs	r2, #12
 8001392:	4619      	mov	r1, r3
 8001394:	4807      	ldr	r0, [pc, #28]	; (80013b4 <MX_TIM4_Init+0x128>)
 8001396:	f004 fabd 	bl	8005914 <HAL_TIM_PWM_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80013a0:	f000 fa62 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013a4:	4803      	ldr	r0, [pc, #12]	; (80013b4 <MX_TIM4_Init+0x128>)
 80013a6:	f000 fcf3 	bl	8001d90 <HAL_TIM_MspPostInit>

}
 80013aa:	bf00      	nop
 80013ac:	3738      	adds	r7, #56	; 0x38
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200004cc 	.word	0x200004cc
 80013b8:	40000800 	.word	0x40000800

080013bc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08c      	sub	sp, #48	; 0x30
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	2224      	movs	r2, #36	; 0x24
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f008 fcb7 	bl	8009d3e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013d8:	4b20      	ldr	r3, [pc, #128]	; (800145c <MX_TIM5_Init+0xa0>)
 80013da:	4a21      	ldr	r2, [pc, #132]	; (8001460 <MX_TIM5_Init+0xa4>)
 80013dc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <MX_TIM5_Init+0xa0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <MX_TIM5_Init+0xa0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <MX_TIM5_Init+0xa0>)
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <MX_TIM5_Init+0xa0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <MX_TIM5_Init+0xa0>)
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80013fe:	2302      	movs	r3, #2
 8001400:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001406:	2301      	movs	r3, #1
 8001408:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001416:	2301      	movs	r3, #1
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	4619      	mov	r1, r3
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <MX_TIM5_Init+0xa0>)
 800142a:	f004 f837 	bl	800549c <HAL_TIM_Encoder_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001434:	f000 fa18 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_TIM5_Init+0xa0>)
 8001446:	f004 ff27 	bl	8006298 <HAL_TIMEx_MasterConfigSynchronization>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001450:	f000 fa0a 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	3730      	adds	r7, #48	; 0x30
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000514 	.word	0x20000514
 8001460:	40000c00 	.word	0x40000c00

08001464 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_TIM6_Init+0x64>)
 8001474:	4a15      	ldr	r2, [pc, #84]	; (80014cc <MX_TIM6_Init+0x68>)
 8001476:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <MX_TIM6_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_TIM6_Init+0x64>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_TIM6_Init+0x64>)
 8001486:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800148a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_TIM6_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001492:	480d      	ldr	r0, [pc, #52]	; (80014c8 <MX_TIM6_Init+0x64>)
 8001494:	f003 fd8a 	bl	8004fac <HAL_TIM_Base_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800149e:	f000 f9e3 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014aa:	463b      	mov	r3, r7
 80014ac:	4619      	mov	r1, r3
 80014ae:	4806      	ldr	r0, [pc, #24]	; (80014c8 <MX_TIM6_Init+0x64>)
 80014b0:	f004 fef2 	bl	8006298 <HAL_TIMEx_MasterConfigSynchronization>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80014ba:	f000 f9d5 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000055c 	.word	0x2000055c
 80014cc:	40001000 	.word	0x40001000

080014d0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08c      	sub	sp, #48	; 0x30
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d6:	f107 0320 	add.w	r3, r7, #32
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]
 80014f2:	615a      	str	r2, [r3, #20]
 80014f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80014f6:	4b25      	ldr	r3, [pc, #148]	; (800158c <MX_TIM9_Init+0xbc>)
 80014f8:	4a25      	ldr	r2, [pc, #148]	; (8001590 <MX_TIM9_Init+0xc0>)
 80014fa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 49;
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <MX_TIM9_Init+0xbc>)
 80014fe:	2231      	movs	r2, #49	; 0x31
 8001500:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <MX_TIM9_Init+0xbc>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <MX_TIM9_Init+0xbc>)
 800150a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800150e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <MX_TIM9_Init+0xbc>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <MX_TIM9_Init+0xbc>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800151c:	481b      	ldr	r0, [pc, #108]	; (800158c <MX_TIM9_Init+0xbc>)
 800151e:	f003 fd45 	bl	8004fac <HAL_TIM_Base_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001528:	f000 f99e 	bl	8001868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001530:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	4619      	mov	r1, r3
 8001538:	4814      	ldr	r0, [pc, #80]	; (800158c <MX_TIM9_Init+0xbc>)
 800153a:	f004 faad 	bl	8005a98 <HAL_TIM_ConfigClockSource>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001544:	f000 f990 	bl	8001868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001548:	4810      	ldr	r0, [pc, #64]	; (800158c <MX_TIM9_Init+0xbc>)
 800154a:	f003 fe86 	bl	800525a <HAL_TIM_PWM_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001554:	f000 f988 	bl	8001868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001558:	2360      	movs	r3, #96	; 0x60
 800155a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2200      	movs	r2, #0
 800156c:	4619      	mov	r1, r3
 800156e:	4807      	ldr	r0, [pc, #28]	; (800158c <MX_TIM9_Init+0xbc>)
 8001570:	f004 f9d0 	bl	8005914 <HAL_TIM_PWM_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 800157a:	f000 f975 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800157e:	4803      	ldr	r0, [pc, #12]	; (800158c <MX_TIM9_Init+0xbc>)
 8001580:	f000 fc06 	bl	8001d90 <HAL_TIM_MspPostInit>

}
 8001584:	bf00      	nop
 8001586:	3730      	adds	r7, #48	; 0x30
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200005a4 	.word	0x200005a4
 8001590:	40014000 	.word	0x40014000

08001594 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_TIM13_Init+0x40>)
 800159a:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <MX_TIM13_Init+0x44>)
 800159c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <MX_TIM13_Init+0x40>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_TIM13_Init+0x40>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 50000;
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <MX_TIM13_Init+0x40>)
 80015ac:	f24c 3250 	movw	r2, #50000	; 0xc350
 80015b0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_TIM13_Init+0x40>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_TIM13_Init+0x40>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_TIM13_Init+0x40>)
 80015c0:	f003 fcf4 	bl	8004fac <HAL_TIM_Base_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80015ca:	f000 f94d 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200005ec 	.word	0x200005ec
 80015d8:	40001c00 	.word	0x40001c00

080015dc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80015e0:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_TIM14_Init+0x40>)
 80015e2:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <MX_TIM14_Init+0x44>)
 80015e4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1;
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <MX_TIM14_Init+0x40>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_TIM14_Init+0x40>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50000;
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <MX_TIM14_Init+0x40>)
 80015f4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80015f8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_TIM14_Init+0x40>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_TIM14_Init+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_TIM14_Init+0x40>)
 8001608:	f003 fcd0 	bl	8004fac <HAL_TIM_Base_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001612:	f000 f929 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000634 	.word	0x20000634
 8001620:	40002000 	.word	0x40002000

08001624 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 800162a:	4a12      	ldr	r2, [pc, #72]	; (8001674 <MX_USART1_UART_Init+0x50>)
 800162c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 8001630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 800165c:	f004 feac 	bl	80063b8 <HAL_UART_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001666:	f000 f8ff 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000067c 	.word	0x2000067c
 8001674:	40011000 	.word	0x40011000

08001678 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_DMA_Init+0x3c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <MX_DMA_Init+0x3c>)
 8001688:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_DMA_Init+0x3c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	2038      	movs	r0, #56	; 0x38
 80016a0:	f001 fd2d 	bl	80030fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016a4:	2038      	movs	r0, #56	; 0x38
 80016a6:	f001 fd46 	bl	8003136 <HAL_NVIC_EnableIRQ>

}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800

080016b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b60      	ldr	r3, [pc, #384]	; (8001854 <MX_GPIO_Init+0x19c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a5f      	ldr	r2, [pc, #380]	; (8001854 <MX_GPIO_Init+0x19c>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b5d      	ldr	r3, [pc, #372]	; (8001854 <MX_GPIO_Init+0x19c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b59      	ldr	r3, [pc, #356]	; (8001854 <MX_GPIO_Init+0x19c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a58      	ldr	r2, [pc, #352]	; (8001854 <MX_GPIO_Init+0x19c>)
 80016f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b56      	ldr	r3, [pc, #344]	; (8001854 <MX_GPIO_Init+0x19c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	4b52      	ldr	r3, [pc, #328]	; (8001854 <MX_GPIO_Init+0x19c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a51      	ldr	r2, [pc, #324]	; (8001854 <MX_GPIO_Init+0x19c>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b4f      	ldr	r3, [pc, #316]	; (8001854 <MX_GPIO_Init+0x19c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4b4b      	ldr	r3, [pc, #300]	; (8001854 <MX_GPIO_Init+0x19c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a4a      	ldr	r2, [pc, #296]	; (8001854 <MX_GPIO_Init+0x19c>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b48      	ldr	r3, [pc, #288]	; (8001854 <MX_GPIO_Init+0x19c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	4b44      	ldr	r3, [pc, #272]	; (8001854 <MX_GPIO_Init+0x19c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a43      	ldr	r2, [pc, #268]	; (8001854 <MX_GPIO_Init+0x19c>)
 8001748:	f043 0308 	orr.w	r3, r3, #8
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b41      	ldr	r3, [pc, #260]	; (8001854 <MX_GPIO_Init+0x19c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED10_Pin|RF_EMITTER_Pin|D_C_Pin|DIAGONAL_EMITTER_Pin
 800175a:	2200      	movs	r2, #0
 800175c:	f641 51e7 	movw	r1, #7655	; 0x1de7
 8001760:	483d      	ldr	r0, [pc, #244]	; (8001858 <MX_GPIO_Init+0x1a0>)
 8001762:	f002 f989 	bl	8003a78 <HAL_GPIO_WritePin>
                          |CE_Pin|LF_EMITTER_Pin|CS_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED11_Pin|LED9_Pin|LED8_Pin, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	f641 0110 	movw	r1, #6160	; 0x1810
 800176c:	483b      	ldr	r0, [pc, #236]	; (800185c <MX_GPIO_Init+0x1a4>)
 800176e:	f002 f983 	bl	8003a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED7_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8001778:	4839      	ldr	r0, [pc, #228]	; (8001860 <MX_GPIO_Init+0x1a8>)
 800177a:	f002 f97d 	bl	8003a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	2104      	movs	r1, #4
 8001782:	4838      	ldr	r0, [pc, #224]	; (8001864 <MX_GPIO_Init+0x1ac>)
 8001784:	f002 f978 	bl	8003a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TB1_Pin */
  GPIO_InitStruct.Pin = TB1_Pin;
 8001788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800178c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TB1_GPIO_Port, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	482e      	ldr	r0, [pc, #184]	; (8001858 <MX_GPIO_Init+0x1a0>)
 800179e:	f001 ffcf 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED10_Pin RF_EMITTER_Pin D_C_Pin DIAGONAL_EMITTER_Pin
                           CE_Pin LF_EMITTER_Pin CS_Pin LED3_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED10_Pin|RF_EMITTER_Pin|D_C_Pin|DIAGONAL_EMITTER_Pin
 80017a2:	f641 53e7 	movw	r3, #7655	; 0x1de7
 80017a6:	617b      	str	r3, [r7, #20]
                          |CE_Pin|LF_EMITTER_Pin|CS_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	4827      	ldr	r0, [pc, #156]	; (8001858 <MX_GPIO_Init+0x1a0>)
 80017bc:	f001 ffc0 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin;
 80017c0:	2308      	movs	r3, #8
 80017c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRDY_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	4823      	ldr	r0, [pc, #140]	; (8001860 <MX_GPIO_Init+0x1a8>)
 80017d4:	f001 ffb4 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 INT_Pin MISO_Pin BOOT0_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|INT_Pin|MISO_Pin|BOOT0_Pin;
 80017d8:	f244 4324 	movw	r3, #17444	; 0x4424
 80017dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	481b      	ldr	r0, [pc, #108]	; (800185c <MX_GPIO_Init+0x1a4>)
 80017ee:	f001 ffa7 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED11_Pin LED9_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED11_Pin|LED9_Pin|LED8_Pin;
 80017f2:	f641 0310 	movw	r3, #6160	; 0x1810
 80017f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	4814      	ldr	r0, [pc, #80]	; (800185c <MX_GPIO_Init+0x1a4>)
 800180c:	f001 ff98 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED7_Pin|LED1_Pin|LED2_Pin;
 8001810:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	2301      	movs	r3, #1
 8001818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	480d      	ldr	r0, [pc, #52]	; (8001860 <MX_GPIO_Init+0x1a8>)
 800182a:	f001 ff89 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 800182e:	2304      	movs	r3, #4
 8001830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4807      	ldr	r0, [pc, #28]	; (8001864 <MX_GPIO_Init+0x1ac>)
 8001846:	f001 ff7b 	bl	8003740 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	40020800 	.word	0x40020800
 800185c:	40020400 	.word	0x40020400
 8001860:	40020000 	.word	0x40020000
 8001864:	40020c00 	.word	0x40020c00

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001870:	e7fe      	b.n	8001870 <Error_Handler+0x8>
	...

08001874 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <HAL_MspInit+0x4c>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <HAL_MspInit+0x4c>)
 8001884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001888:	6453      	str	r3, [r2, #68]	; 0x44
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HAL_MspInit+0x4c>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_MspInit+0x4c>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <HAL_MspInit+0x4c>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_MspInit+0x4c>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800

080018c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08c      	sub	sp, #48	; 0x30
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a49      	ldr	r2, [pc, #292]	; (8001a08 <HAL_ADC_MspInit+0x144>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	f040 808b 	bne.w	80019fe <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018e8:	2300      	movs	r3, #0
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <HAL_ADC_MspInit+0x148>)
 80018ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f0:	4a46      	ldr	r2, [pc, #280]	; (8001a0c <HAL_ADC_MspInit+0x148>)
 80018f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f6:	6453      	str	r3, [r2, #68]	; 0x44
 80018f8:	4b44      	ldr	r3, [pc, #272]	; (8001a0c <HAL_ADC_MspInit+0x148>)
 80018fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001900:	61bb      	str	r3, [r7, #24]
 8001902:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	4b40      	ldr	r3, [pc, #256]	; (8001a0c <HAL_ADC_MspInit+0x148>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	4a3f      	ldr	r2, [pc, #252]	; (8001a0c <HAL_ADC_MspInit+0x148>)
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	6313      	str	r3, [r2, #48]	; 0x30
 8001914:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <HAL_ADC_MspInit+0x148>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_ADC_MspInit+0x148>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	4a38      	ldr	r2, [pc, #224]	; (8001a0c <HAL_ADC_MspInit+0x148>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6313      	str	r3, [r2, #48]	; 0x30
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <HAL_ADC_MspInit+0x148>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <HAL_ADC_MspInit+0x148>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	4a31      	ldr	r2, [pc, #196]	; (8001a0c <HAL_ADC_MspInit+0x148>)
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	6313      	str	r3, [r2, #48]	; 0x30
 800194c:	4b2f      	ldr	r3, [pc, #188]	; (8001a0c <HAL_ADC_MspInit+0x148>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VOL_METER_Pin|R_RECEIVER_Pin;
 8001958:	2318      	movs	r3, #24
 800195a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800195c:	2303      	movs	r3, #3
 800195e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	4619      	mov	r1, r3
 800196a:	4829      	ldr	r0, [pc, #164]	; (8001a10 <HAL_ADC_MspInit+0x14c>)
 800196c:	f001 fee8 	bl	8003740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_RECEIVER_Pin;
 8001970:	2310      	movs	r3, #16
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001974:	2303      	movs	r3, #3
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RF_RECEIVER_GPIO_Port, &GPIO_InitStruct);
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	4619      	mov	r1, r3
 8001982:	4824      	ldr	r0, [pc, #144]	; (8001a14 <HAL_ADC_MspInit+0x150>)
 8001984:	f001 fedc 	bl	8003740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L_RECEIVER_Pin|LF_RECEIVER_Pin;
 8001988:	2303      	movs	r3, #3
 800198a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198c:	2303      	movs	r3, #3
 800198e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	4619      	mov	r1, r3
 800199a:	481f      	ldr	r0, [pc, #124]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 800199c:	f001 fed0 	bl	8003740 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80019a0:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <HAL_ADC_MspInit+0x158>)
 80019a2:	4a1f      	ldr	r2, [pc, #124]	; (8001a20 <HAL_ADC_MspInit+0x15c>)
 80019a4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_ADC_MspInit+0x158>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_ADC_MspInit+0x158>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <HAL_ADC_MspInit+0x158>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_ADC_MspInit+0x158>)
 80019ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <HAL_ADC_MspInit+0x158>)
 80019c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_ADC_MspInit+0x158>)
 80019ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_ADC_MspInit+0x158>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_ADC_MspInit+0x158>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_ADC_MspInit+0x158>)
 80019de:	2200      	movs	r2, #0
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019e2:	480e      	ldr	r0, [pc, #56]	; (8001a1c <HAL_ADC_MspInit+0x158>)
 80019e4:	f001 fbc2 	bl	800316c <HAL_DMA_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 80019ee:	f7ff ff3b 	bl	8001868 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <HAL_ADC_MspInit+0x158>)
 80019f6:	639a      	str	r2, [r3, #56]	; 0x38
 80019f8:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <HAL_ADC_MspInit+0x158>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019fe:	bf00      	nop
 8001a00:	3730      	adds	r7, #48	; 0x30
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40012000 	.word	0x40012000
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020800 	.word	0x40020800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	2000032c 	.word	0x2000032c
 8001a20:	40026410 	.word	0x40026410

08001a24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	; 0x30
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a32      	ldr	r2, [pc, #200]	; (8001b0c <HAL_SPI_MspInit+0xe8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d12c      	bne.n	8001aa0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <HAL_SPI_MspInit+0xec>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a30      	ldr	r2, [pc, #192]	; (8001b10 <HAL_SPI_MspInit+0xec>)
 8001a50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <HAL_SPI_MspInit+0xec>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <HAL_SPI_MspInit+0xec>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a29      	ldr	r2, [pc, #164]	; (8001b10 <HAL_SPI_MspInit+0xec>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_SPI_MspInit+0xec>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDI_Pin;
 8001a7e:	23e0      	movs	r3, #224	; 0xe0
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a8e:	2305      	movs	r3, #5
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 031c 	add.w	r3, r7, #28
 8001a96:	4619      	mov	r1, r3
 8001a98:	481e      	ldr	r0, [pc, #120]	; (8001b14 <HAL_SPI_MspInit+0xf0>)
 8001a9a:	f001 fe51 	bl	8003740 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a9e:	e031      	b.n	8001b04 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1c      	ldr	r2, [pc, #112]	; (8001b18 <HAL_SPI_MspInit+0xf4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d12c      	bne.n	8001b04 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_SPI_MspInit+0xec>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <HAL_SPI_MspInit+0xec>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_SPI_MspInit+0xec>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_SPI_MspInit+0xec>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a10      	ldr	r2, [pc, #64]	; (8001b10 <HAL_SPI_MspInit+0xec>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_SPI_MspInit+0xec>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CLK_Pin|DATA_IN_Pin;
 8001ae2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001af4:	2305      	movs	r3, #5
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	4619      	mov	r1, r3
 8001afe:	4807      	ldr	r0, [pc, #28]	; (8001b1c <HAL_SPI_MspInit+0xf8>)
 8001b00:	f001 fe1e 	bl	8003740 <HAL_GPIO_Init>
}
 8001b04:	bf00      	nop
 8001b06:	3730      	adds	r7, #48	; 0x30
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40013000 	.word	0x40013000
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40003800 	.word	0x40003800
 8001b1c:	40020400 	.word	0x40020400

08001b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a44      	ldr	r2, [pc, #272]	; (8001c40 <HAL_TIM_Base_MspInit+0x120>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d10e      	bne.n	8001b50 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <HAL_TIM_Base_MspInit+0x124>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a42      	ldr	r2, [pc, #264]	; (8001c44 <HAL_TIM_Base_MspInit+0x124>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b40      	ldr	r3, [pc, #256]	; (8001c44 <HAL_TIM_Base_MspInit+0x124>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001b4e:	e072      	b.n	8001c36 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM4)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a3c      	ldr	r2, [pc, #240]	; (8001c48 <HAL_TIM_Base_MspInit+0x128>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d10e      	bne.n	8001b78 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
 8001b5e:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <HAL_TIM_Base_MspInit+0x124>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a38      	ldr	r2, [pc, #224]	; (8001c44 <HAL_TIM_Base_MspInit+0x124>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	4b36      	ldr	r3, [pc, #216]	; (8001c44 <HAL_TIM_Base_MspInit+0x124>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	69bb      	ldr	r3, [r7, #24]
}
 8001b76:	e05e      	b.n	8001c36 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM6)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a33      	ldr	r2, [pc, #204]	; (8001c4c <HAL_TIM_Base_MspInit+0x12c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d10e      	bne.n	8001ba0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <HAL_TIM_Base_MspInit+0x124>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	4a2e      	ldr	r2, [pc, #184]	; (8001c44 <HAL_TIM_Base_MspInit+0x124>)
 8001b8c:	f043 0310 	orr.w	r3, r3, #16
 8001b90:	6413      	str	r3, [r2, #64]	; 0x40
 8001b92:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <HAL_TIM_Base_MspInit+0x124>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	697b      	ldr	r3, [r7, #20]
}
 8001b9e:	e04a      	b.n	8001c36 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM9)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a2a      	ldr	r2, [pc, #168]	; (8001c50 <HAL_TIM_Base_MspInit+0x130>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d10e      	bne.n	8001bc8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <HAL_TIM_Base_MspInit+0x124>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a24      	ldr	r2, [pc, #144]	; (8001c44 <HAL_TIM_Base_MspInit+0x124>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_TIM_Base_MspInit+0x124>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
}
 8001bc6:	e036      	b.n	8001c36 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM13)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <HAL_TIM_Base_MspInit+0x134>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d116      	bne.n	8001c00 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_TIM_Base_MspInit+0x124>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a1a      	ldr	r2, [pc, #104]	; (8001c44 <HAL_TIM_Base_MspInit+0x124>)
 8001bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <HAL_TIM_Base_MspInit+0x124>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	202c      	movs	r0, #44	; 0x2c
 8001bf4:	f001 fa83 	bl	80030fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001bf8:	202c      	movs	r0, #44	; 0x2c
 8001bfa:	f001 fa9c 	bl	8003136 <HAL_NVIC_EnableIRQ>
}
 8001bfe:	e01a      	b.n	8001c36 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM14)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <HAL_TIM_Base_MspInit+0x138>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d115      	bne.n	8001c36 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <HAL_TIM_Base_MspInit+0x124>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a0c      	ldr	r2, [pc, #48]	; (8001c44 <HAL_TIM_Base_MspInit+0x124>)
 8001c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_TIM_Base_MspInit+0x124>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	202d      	movs	r0, #45	; 0x2d
 8001c2c:	f001 fa67 	bl	80030fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001c30:	202d      	movs	r0, #45	; 0x2d
 8001c32:	f001 fa80 	bl	8003136 <HAL_NVIC_EnableIRQ>
}
 8001c36:	bf00      	nop
 8001c38:	3720      	adds	r7, #32
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40010000 	.word	0x40010000
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40000800 	.word	0x40000800
 8001c4c:	40001000 	.word	0x40001000
 8001c50:	40014000 	.word	0x40014000
 8001c54:	40001c00 	.word	0x40001c00
 8001c58:	40002000 	.word	0x40002000

08001c5c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	; 0x30
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 031c 	add.w	r3, r7, #28
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7c:	d14b      	bne.n	8001d16 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a3e      	ldr	r2, [pc, #248]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a37      	ldr	r2, [pc, #220]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b35      	ldr	r3, [pc, #212]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x124>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x124>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a30      	ldr	r2, [pc, #192]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x124>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x124>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	f107 031c 	add.w	r3, r7, #28
 8001cec:	4619      	mov	r1, r3
 8001cee:	4825      	ldr	r0, [pc, #148]	; (8001d84 <HAL_TIM_Encoder_MspInit+0x128>)
 8001cf0:	f001 fd26 	bl	8003740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cf4:	2308      	movs	r3, #8
 8001cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d04:	2301      	movs	r3, #1
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d08:	f107 031c 	add.w	r3, r7, #28
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	481e      	ldr	r0, [pc, #120]	; (8001d88 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001d10:	f001 fd16 	bl	8003740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001d14:	e030      	b.n	8001d78 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM5)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <HAL_TIM_Encoder_MspInit+0x130>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d12b      	bne.n	8001d78 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d2a:	f043 0308 	orr.w	r3, r3, #8
 8001d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	f107 031c 	add.w	r3, r7, #28
 8001d70:	4619      	mov	r1, r3
 8001d72:	4804      	ldr	r0, [pc, #16]	; (8001d84 <HAL_TIM_Encoder_MspInit+0x128>)
 8001d74:	f001 fce4 	bl	8003740 <HAL_GPIO_Init>
}
 8001d78:	bf00      	nop
 8001d7a:	3730      	adds	r7, #48	; 0x30
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40000c00 	.word	0x40000c00

08001d90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a24      	ldr	r2, [pc, #144]	; (8001e40 <HAL_TIM_MspPostInit+0xb0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d11f      	bne.n	8001df2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <HAL_TIM_MspPostInit+0xb4>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a22      	ldr	r2, [pc, #136]	; (8001e44 <HAL_TIM_MspPostInit+0xb4>)
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <HAL_TIM_MspPostInit+0xb4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = LPWMA_Pin|LPWMB_Pin|RPWMA_Pin|RPWMB_Pin;
 8001dce:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001de0:	2302      	movs	r3, #2
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	4817      	ldr	r0, [pc, #92]	; (8001e48 <HAL_TIM_MspPostInit+0xb8>)
 8001dec:	f001 fca8 	bl	8003740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001df0:	e022      	b.n	8001e38 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a15      	ldr	r2, [pc, #84]	; (8001e4c <HAL_TIM_MspPostInit+0xbc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d11d      	bne.n	8001e38 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <HAL_TIM_MspPostInit+0xb4>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	4a0f      	ldr	r2, [pc, #60]	; (8001e44 <HAL_TIM_MspPostInit+0xb4>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0c:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <HAL_TIM_MspPostInit+0xb4>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e18:	2304      	movs	r3, #4
 8001e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	4807      	ldr	r0, [pc, #28]	; (8001e50 <HAL_TIM_MspPostInit+0xc0>)
 8001e34:	f001 fc84 	bl	8003740 <HAL_GPIO_Init>
}
 8001e38:	bf00      	nop
 8001e3a:	3728      	adds	r7, #40	; 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40000800 	.word	0x40000800
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40014000 	.word	0x40014000
 8001e50:	40020000 	.word	0x40020000

08001e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <HAL_UART_MspInit+0x84>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d12c      	bne.n	8001ed0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	4a17      	ldr	r2, [pc, #92]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001e80:	f043 0310 	orr.w	r3, r3, #16
 8001e84:	6453      	str	r3, [r2, #68]	; 0x44
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a10      	ldr	r2, [pc, #64]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001eae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ec0:	2307      	movs	r3, #7
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <HAL_UART_MspInit+0x8c>)
 8001ecc:	f001 fc38 	bl	8003740 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ed0:	bf00      	nop
 8001ed2:	3728      	adds	r7, #40	; 0x28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40011000 	.word	0x40011000
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000

08001ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001ee8:	f002 fa9c 	bl	8004424 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <NMI_Handler+0x8>

08001eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef2:	e7fe      	b.n	8001ef2 <HardFault_Handler+0x4>

08001ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <MemManage_Handler+0x4>

08001efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <BusFault_Handler+0x4>

08001f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <UsageFault_Handler+0x4>

08001f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f34:	f000 fbc4 	bl	80026c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001f42:	f003 fbdf 	bl	8005704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200005ec 	.word	0x200005ec

08001f50 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001f56:	f003 fbd5 	bl	8005704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000634 	.word	0x20000634

08001f64 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <DMA2_Stream0_IRQHandler+0x10>)
 8001f6a:	f001 f9ad 	bl	80032c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2000032c 	.word	0x2000032c

08001f78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return 1;
 8001f7c:	2301      	movs	r3, #1
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <_kill>:

int _kill(int pid, int sig)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f92:	f007 ff7b 	bl	8009e8c <__errno>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2216      	movs	r2, #22
 8001f9a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <_exit>:

void _exit (int status)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ffe7 	bl	8001f88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fba:	e7fe      	b.n	8001fba <_exit+0x12>

08001fbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	e00a      	b.n	8001fe4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fce:	f3af 8000 	nop.w
 8001fd2:	4601      	mov	r1, r0
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	60ba      	str	r2, [r7, #8]
 8001fda:	b2ca      	uxtb	r2, r1
 8001fdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	dbf0      	blt.n	8001fce <_read+0x12>
  }

  return len;
 8001fec:	687b      	ldr	r3, [r7, #4]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	e009      	b.n	800201c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	60ba      	str	r2, [r7, #8]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	3301      	adds	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	429a      	cmp	r2, r3
 8002022:	dbf1      	blt.n	8002008 <_write+0x12>
  }
  return len;
 8002024:	687b      	ldr	r3, [r7, #4]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <_close>:

int _close(int file)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002056:	605a      	str	r2, [r3, #4]
  return 0;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <_isatty>:

int _isatty(int file)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800206e:	2301      	movs	r3, #1
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a0:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <_sbrk+0x5c>)
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <_sbrk+0x60>)
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d102      	bne.n	80020ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <_sbrk+0x64>)
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <_sbrk+0x68>)
 80020b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d207      	bcs.n	80020d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c8:	f007 fee0 	bl	8009e8c <__errno>
 80020cc:	4603      	mov	r3, r0
 80020ce:	220c      	movs	r2, #12
 80020d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	e009      	b.n	80020ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <_sbrk+0x64>)
 80020e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ea:	68fb      	ldr	r3, [r7, #12]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20020000 	.word	0x20020000
 80020f8:	00000400 	.word	0x00000400
 80020fc:	200006c0 	.word	0x200006c0
 8002100:	20001a50 	.word	0x20001a50

08002104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <SystemInit+0x20>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210e:	4a05      	ldr	r2, [pc, #20]	; (8002124 <SystemInit+0x20>)
 8002110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002160 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800212c:	480d      	ldr	r0, [pc, #52]	; (8002164 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800212e:	490e      	ldr	r1, [pc, #56]	; (8002168 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002130:	4a0e      	ldr	r2, [pc, #56]	; (800216c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002134:	e002      	b.n	800213c <LoopCopyDataInit>

08002136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213a:	3304      	adds	r3, #4

0800213c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800213c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002140:	d3f9      	bcc.n	8002136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002142:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002144:	4c0b      	ldr	r4, [pc, #44]	; (8002174 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002148:	e001      	b.n	800214e <LoopFillZerobss>

0800214a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800214c:	3204      	adds	r2, #4

0800214e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002150:	d3fb      	bcc.n	800214a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002152:	f7ff ffd7 	bl	8002104 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002156:	f007 fe9f 	bl	8009e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800215a:	f7fe fea3 	bl	8000ea4 <main>
  bx  lr    
 800215e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002160:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002168:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 800216c:	0800c74c 	.word	0x0800c74c
  ldr r2, =_sbss
 8002170:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8002174:	20001a50 	.word	0x20001a50

08002178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002178:	e7fe      	b.n	8002178 <ADC_IRQHandler>

0800217a <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 800217a:	b580      	push	{r7, lr}
 800217c:	af00      	add	r7, sp, #0
//
//    // Reset the OLED
//    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
//    HAL_Delay(10);
//    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
    HAL_Delay(10);
 800217e:	200a      	movs	r0, #10
 8002180:	f000 fabe 	bl	8002700 <HAL_Delay>
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}

08002188 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002192:	2200      	movs	r2, #0
 8002194:	2140      	movs	r1, #64	; 0x40
 8002196:	480c      	ldr	r0, [pc, #48]	; (80021c8 <ssd1306_WriteCommand+0x40>)
 8002198:	f001 fc6e 	bl	8003a78 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 800219c:	2200      	movs	r2, #0
 800219e:	2104      	movs	r1, #4
 80021a0:	4809      	ldr	r0, [pc, #36]	; (80021c8 <ssd1306_WriteCommand+0x40>)
 80021a2:	f001 fc69 	bl	8003a78 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 80021a6:	1df9      	adds	r1, r7, #7
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ac:	2201      	movs	r2, #1
 80021ae:	4807      	ldr	r0, [pc, #28]	; (80021cc <ssd1306_WriteCommand+0x44>)
 80021b0:	f002 f9dc 	bl	800456c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80021b4:	2201      	movs	r2, #1
 80021b6:	2140      	movs	r1, #64	; 0x40
 80021b8:	4803      	ldr	r0, [pc, #12]	; (80021c8 <ssd1306_WriteCommand+0x40>)
 80021ba:	f001 fc5d 	bl	8003a78 <HAL_GPIO_WritePin>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40020800 	.word	0x40020800
 80021cc:	200003e4 	.word	0x200003e4

080021d0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80021da:	2200      	movs	r2, #0
 80021dc:	2140      	movs	r1, #64	; 0x40
 80021de:	480c      	ldr	r0, [pc, #48]	; (8002210 <ssd1306_WriteData+0x40>)
 80021e0:	f001 fc4a 	bl	8003a78 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 80021e4:	2201      	movs	r2, #1
 80021e6:	2104      	movs	r1, #4
 80021e8:	4809      	ldr	r0, [pc, #36]	; (8002210 <ssd1306_WriteData+0x40>)
 80021ea:	f001 fc45 	bl	8003a78 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4806      	ldr	r0, [pc, #24]	; (8002214 <ssd1306_WriteData+0x44>)
 80021fa:	f002 f9b7 	bl	800456c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80021fe:	2201      	movs	r2, #1
 8002200:	2140      	movs	r1, #64	; 0x40
 8002202:	4803      	ldr	r0, [pc, #12]	; (8002210 <ssd1306_WriteData+0x40>)
 8002204:	f001 fc38 	bl	8003a78 <HAL_GPIO_WritePin>
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40020800 	.word	0x40020800
 8002214:	200003e4 	.word	0x200003e4

08002218 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800221c:	f7ff ffad 	bl	800217a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002220:	2064      	movs	r0, #100	; 0x64
 8002222:	f000 fa6d 	bl	8002700 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002226:	2000      	movs	r0, #0
 8002228:	f000 f9da 	bl	80025e0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800222c:	2020      	movs	r0, #32
 800222e:	f7ff ffab 	bl	8002188 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002232:	2000      	movs	r0, #0
 8002234:	f7ff ffa8 	bl	8002188 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002238:	20b0      	movs	r0, #176	; 0xb0
 800223a:	f7ff ffa5 	bl	8002188 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800223e:	20c8      	movs	r0, #200	; 0xc8
 8002240:	f7ff ffa2 	bl	8002188 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002244:	2000      	movs	r0, #0
 8002246:	f7ff ff9f 	bl	8002188 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800224a:	2010      	movs	r0, #16
 800224c:	f7ff ff9c 	bl	8002188 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002250:	2040      	movs	r0, #64	; 0x40
 8002252:	f7ff ff99 	bl	8002188 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002256:	20ff      	movs	r0, #255	; 0xff
 8002258:	f000 f9ae 	bl	80025b8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800225c:	20a1      	movs	r0, #161	; 0xa1
 800225e:	f7ff ff93 	bl	8002188 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002262:	20a6      	movs	r0, #166	; 0xa6
 8002264:	f7ff ff90 	bl	8002188 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002268:	20a8      	movs	r0, #168	; 0xa8
 800226a:	f7ff ff8d 	bl	8002188 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800226e:	201f      	movs	r0, #31
 8002270:	f7ff ff8a 	bl	8002188 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002274:	20a4      	movs	r0, #164	; 0xa4
 8002276:	f7ff ff87 	bl	8002188 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800227a:	20d3      	movs	r0, #211	; 0xd3
 800227c:	f7ff ff84 	bl	8002188 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002280:	2000      	movs	r0, #0
 8002282:	f7ff ff81 	bl	8002188 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002286:	20d5      	movs	r0, #213	; 0xd5
 8002288:	f7ff ff7e 	bl	8002188 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800228c:	20f0      	movs	r0, #240	; 0xf0
 800228e:	f7ff ff7b 	bl	8002188 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002292:	20d9      	movs	r0, #217	; 0xd9
 8002294:	f7ff ff78 	bl	8002188 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002298:	2022      	movs	r0, #34	; 0x22
 800229a:	f7ff ff75 	bl	8002188 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800229e:	20da      	movs	r0, #218	; 0xda
 80022a0:	f7ff ff72 	bl	8002188 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80022a4:	2002      	movs	r0, #2
 80022a6:	f7ff ff6f 	bl	8002188 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80022aa:	20db      	movs	r0, #219	; 0xdb
 80022ac:	f7ff ff6c 	bl	8002188 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80022b0:	2020      	movs	r0, #32
 80022b2:	f7ff ff69 	bl	8002188 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80022b6:	208d      	movs	r0, #141	; 0x8d
 80022b8:	f7ff ff66 	bl	8002188 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80022bc:	2014      	movs	r0, #20
 80022be:	f7ff ff63 	bl	8002188 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80022c2:	2001      	movs	r0, #1
 80022c4:	f000 f98c 	bl	80025e0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80022c8:	2000      	movs	r0, #0
 80022ca:	f000 f80f 	bl	80022ec <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80022ce:	f000 f831 	bl	8002334 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <ssd1306_Init+0xd0>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <ssd1306_Init+0xd0>)
 80022da:	2200      	movs	r2, #0
 80022dc:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80022de:	4b02      	ldr	r3, [pc, #8]	; (80022e8 <ssd1306_Init+0xd0>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	711a      	strb	r2, [r3, #4]
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	200008c4 	.word	0x200008c4

080022ec <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	e00d      	b.n	8002318 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <ssd1306_Fill+0x1a>
 8002302:	2100      	movs	r1, #0
 8002304:	e000      	b.n	8002308 <ssd1306_Fill+0x1c>
 8002306:	21ff      	movs	r1, #255	; 0xff
 8002308:	4a09      	ldr	r2, [pc, #36]	; (8002330 <ssd1306_Fill+0x44>)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4413      	add	r3, r2
 800230e:	460a      	mov	r2, r1
 8002310:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3301      	adds	r3, #1
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800231e:	d3ed      	bcc.n	80022fc <ssd1306_Fill+0x10>
    }
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	200006c4 	.word	0x200006c4

08002334 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800233a:	2300      	movs	r3, #0
 800233c:	71fb      	strb	r3, [r7, #7]
 800233e:	e016      	b.n	800236e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	3b50      	subs	r3, #80	; 0x50
 8002344:	b2db      	uxtb	r3, r3
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ff1e 	bl	8002188 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800234c:	2000      	movs	r0, #0
 800234e:	f7ff ff1b 	bl	8002188 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002352:	2010      	movs	r0, #16
 8002354:	f7ff ff18 	bl	8002188 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	01db      	lsls	r3, r3, #7
 800235c:	4a08      	ldr	r2, [pc, #32]	; (8002380 <ssd1306_UpdateScreen+0x4c>)
 800235e:	4413      	add	r3, r2
 8002360:	2180      	movs	r1, #128	; 0x80
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ff34 	bl	80021d0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	3301      	adds	r3, #1
 800236c:	71fb      	strb	r3, [r7, #7]
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d9e5      	bls.n	8002340 <ssd1306_UpdateScreen+0xc>
    }
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	200006c4 	.word	0x200006c4

08002384 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
 800238e:	460b      	mov	r3, r1
 8002390:	71bb      	strb	r3, [r7, #6]
 8002392:	4613      	mov	r3, r2
 8002394:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	2b00      	cmp	r3, #0
 800239c:	db3d      	blt.n	800241a <ssd1306_DrawPixel+0x96>
 800239e:	79bb      	ldrb	r3, [r7, #6]
 80023a0:	2b1f      	cmp	r3, #31
 80023a2:	d83a      	bhi.n	800241a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 80023a4:	797b      	ldrb	r3, [r7, #5]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d11a      	bne.n	80023e0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80023aa:	79fa      	ldrb	r2, [r7, #7]
 80023ac:	79bb      	ldrb	r3, [r7, #6]
 80023ae:	08db      	lsrs	r3, r3, #3
 80023b0:	b2d8      	uxtb	r0, r3
 80023b2:	4603      	mov	r3, r0
 80023b4:	01db      	lsls	r3, r3, #7
 80023b6:	4413      	add	r3, r2
 80023b8:	4a1b      	ldr	r2, [pc, #108]	; (8002428 <ssd1306_DrawPixel+0xa4>)
 80023ba:	5cd3      	ldrb	r3, [r2, r3]
 80023bc:	b25a      	sxtb	r2, r3
 80023be:	79bb      	ldrb	r3, [r7, #6]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	2101      	movs	r1, #1
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	b25b      	sxtb	r3, r3
 80023cc:	4313      	orrs	r3, r2
 80023ce:	b259      	sxtb	r1, r3
 80023d0:	79fa      	ldrb	r2, [r7, #7]
 80023d2:	4603      	mov	r3, r0
 80023d4:	01db      	lsls	r3, r3, #7
 80023d6:	4413      	add	r3, r2
 80023d8:	b2c9      	uxtb	r1, r1
 80023da:	4a13      	ldr	r2, [pc, #76]	; (8002428 <ssd1306_DrawPixel+0xa4>)
 80023dc:	54d1      	strb	r1, [r2, r3]
 80023de:	e01d      	b.n	800241c <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80023e0:	79fa      	ldrb	r2, [r7, #7]
 80023e2:	79bb      	ldrb	r3, [r7, #6]
 80023e4:	08db      	lsrs	r3, r3, #3
 80023e6:	b2d8      	uxtb	r0, r3
 80023e8:	4603      	mov	r3, r0
 80023ea:	01db      	lsls	r3, r3, #7
 80023ec:	4413      	add	r3, r2
 80023ee:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <ssd1306_DrawPixel+0xa4>)
 80023f0:	5cd3      	ldrb	r3, [r2, r3]
 80023f2:	b25a      	sxtb	r2, r3
 80023f4:	79bb      	ldrb	r3, [r7, #6]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	2101      	movs	r1, #1
 80023fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002400:	b25b      	sxtb	r3, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	b25b      	sxtb	r3, r3
 8002406:	4013      	ands	r3, r2
 8002408:	b259      	sxtb	r1, r3
 800240a:	79fa      	ldrb	r2, [r7, #7]
 800240c:	4603      	mov	r3, r0
 800240e:	01db      	lsls	r3, r3, #7
 8002410:	4413      	add	r3, r2
 8002412:	b2c9      	uxtb	r1, r1
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <ssd1306_DrawPixel+0xa4>)
 8002416:	54d1      	strb	r1, [r2, r3]
 8002418:	e000      	b.n	800241c <ssd1306_DrawPixel+0x98>
        return;
 800241a:	bf00      	nop
    }
}
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	200006c4 	.word	0x200006c4

0800242c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	4604      	mov	r4, r0
 8002434:	1d38      	adds	r0, r7, #4
 8002436:	e880 0006 	stmia.w	r0, {r1, r2}
 800243a:	461a      	mov	r2, r3
 800243c:	4623      	mov	r3, r4
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	4613      	mov	r3, r2
 8002442:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	2b1f      	cmp	r3, #31
 8002448:	d902      	bls.n	8002450 <ssd1306_WriteChar+0x24>
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	2b7e      	cmp	r3, #126	; 0x7e
 800244e:	d901      	bls.n	8002454 <ssd1306_WriteChar+0x28>
        return 0;
 8002450:	2300      	movs	r3, #0
 8002452:	e06d      	b.n	8002530 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002454:	4b38      	ldr	r3, [pc, #224]	; (8002538 <ssd1306_WriteChar+0x10c>)
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	793b      	ldrb	r3, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	2b80      	cmp	r3, #128	; 0x80
 8002460:	dc06      	bgt.n	8002470 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002462:	4b35      	ldr	r3, [pc, #212]	; (8002538 <ssd1306_WriteChar+0x10c>)
 8002464:	885b      	ldrh	r3, [r3, #2]
 8002466:	461a      	mov	r2, r3
 8002468:	797b      	ldrb	r3, [r7, #5]
 800246a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800246c:	2b20      	cmp	r3, #32
 800246e:	dd01      	ble.n	8002474 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002470:	2300      	movs	r3, #0
 8002472:	e05d      	b.n	8002530 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
 8002478:	e04c      	b.n	8002514 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	3b20      	subs	r3, #32
 8002480:	7979      	ldrb	r1, [r7, #5]
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	4619      	mov	r1, r3
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	440b      	add	r3, r1
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4413      	add	r3, r2
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002494:	2300      	movs	r3, #0
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	e034      	b.n	8002504 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d012      	beq.n	80024d0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80024aa:	4b23      	ldr	r3, [pc, #140]	; (8002538 <ssd1306_WriteChar+0x10c>)
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	b2d8      	uxtb	r0, r3
 80024b8:	4b1f      	ldr	r3, [pc, #124]	; (8002538 <ssd1306_WriteChar+0x10c>)
 80024ba:	885b      	ldrh	r3, [r3, #2]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	7bba      	ldrb	r2, [r7, #14]
 80024c8:	4619      	mov	r1, r3
 80024ca:	f7ff ff5b 	bl	8002384 <ssd1306_DrawPixel>
 80024ce:	e016      	b.n	80024fe <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <ssd1306_WriteChar+0x10c>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	4413      	add	r3, r2
 80024dc:	b2d8      	uxtb	r0, r3
 80024de:	4b16      	ldr	r3, [pc, #88]	; (8002538 <ssd1306_WriteChar+0x10c>)
 80024e0:	885b      	ldrh	r3, [r3, #2]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	4413      	add	r3, r2
 80024ea:	b2d9      	uxtb	r1, r3
 80024ec:	7bbb      	ldrb	r3, [r7, #14]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bf0c      	ite	eq
 80024f2:	2301      	moveq	r3, #1
 80024f4:	2300      	movne	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	f7ff ff43 	bl	8002384 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	3301      	adds	r3, #1
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	793b      	ldrb	r3, [r7, #4]
 8002506:	461a      	mov	r2, r3
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	4293      	cmp	r3, r2
 800250c:	d3c5      	bcc.n	800249a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3301      	adds	r3, #1
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	797b      	ldrb	r3, [r7, #5]
 8002516:	461a      	mov	r2, r3
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	4293      	cmp	r3, r2
 800251c:	d3ad      	bcc.n	800247a <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <ssd1306_WriteChar+0x10c>)
 8002520:	881a      	ldrh	r2, [r3, #0]
 8002522:	793b      	ldrb	r3, [r7, #4]
 8002524:	b29b      	uxth	r3, r3
 8002526:	4413      	add	r3, r2
 8002528:	b29a      	uxth	r2, r3
 800252a:	4b03      	ldr	r3, [pc, #12]	; (8002538 <ssd1306_WriteChar+0x10c>)
 800252c:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3724      	adds	r7, #36	; 0x24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd90      	pop	{r4, r7, pc}
 8002538:	200008c4 	.word	0x200008c4

0800253c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	1d38      	adds	r0, r7, #4
 8002546:	e880 0006 	stmia.w	r0, {r1, r2}
 800254a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800254c:	e012      	b.n	8002574 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	7818      	ldrb	r0, [r3, #0]
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	1d3a      	adds	r2, r7, #4
 8002556:	ca06      	ldmia	r2, {r1, r2}
 8002558:	f7ff ff68 	bl	800242c <ssd1306_WriteChar>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d002      	beq.n	800256e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	e008      	b.n	8002580 <ssd1306_WriteString+0x44>
        }
        str++;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	3301      	adds	r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e8      	bne.n	800254e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	781b      	ldrb	r3, [r3, #0]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	460a      	mov	r2, r1
 8002592:	71fb      	strb	r3, [r7, #7]
 8002594:	4613      	mov	r3, r2
 8002596:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	b29a      	uxth	r2, r3
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <ssd1306_SetCursor+0x2c>)
 800259e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80025a0:	79bb      	ldrb	r3, [r7, #6]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <ssd1306_SetCursor+0x2c>)
 80025a6:	805a      	strh	r2, [r3, #2]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	200008c4 	.word	0x200008c4

080025b8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80025c2:	2381      	movs	r3, #129	; 0x81
 80025c4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fddd 	bl	8002188 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fdd9 	bl	8002188 <ssd1306_WriteCommand>
}
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80025f0:	23af      	movs	r3, #175	; 0xaf
 80025f2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <ssd1306_SetDisplayOn+0x38>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	715a      	strb	r2, [r3, #5]
 80025fa:	e004      	b.n	8002606 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80025fc:	23ae      	movs	r3, #174	; 0xae
 80025fe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <ssd1306_SetDisplayOn+0x38>)
 8002602:	2200      	movs	r2, #0
 8002604:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fdbd 	bl	8002188 <ssd1306_WriteCommand>
}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200008c4 	.word	0x200008c4

0800261c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <HAL_Init+0x40>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0d      	ldr	r2, [pc, #52]	; (800265c <HAL_Init+0x40>)
 8002626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800262a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_Init+0x40>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0a      	ldr	r2, [pc, #40]	; (800265c <HAL_Init+0x40>)
 8002632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002636:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <HAL_Init+0x40>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a07      	ldr	r2, [pc, #28]	; (800265c <HAL_Init+0x40>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002644:	2003      	movs	r0, #3
 8002646:	f000 fd4f 	bl	80030e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800264a:	200f      	movs	r0, #15
 800264c:	f000 f808 	bl	8002660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002650:	f7ff f910 	bl	8001874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40023c00 	.word	0x40023c00

08002660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_InitTick+0x54>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_InitTick+0x58>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	4619      	mov	r1, r3
 8002672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002676:	fbb3 f3f1 	udiv	r3, r3, r1
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fd67 	bl	8003152 <HAL_SYSTICK_Config>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e00e      	b.n	80026ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b0f      	cmp	r3, #15
 8002692:	d80a      	bhi.n	80026aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002694:	2200      	movs	r2, #0
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	f04f 30ff 	mov.w	r0, #4294967295
 800269c:	f000 fd2f 	bl	80030fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026a0:	4a06      	ldr	r2, [pc, #24]	; (80026bc <HAL_InitTick+0x5c>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e000      	b.n	80026ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000000 	.word	0x20000000
 80026b8:	20000010 	.word	0x20000010
 80026bc:	2000000c 	.word	0x2000000c

080026c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_IncTick+0x20>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_IncTick+0x24>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <HAL_IncTick+0x24>)
 80026d2:	6013      	str	r3, [r2, #0]
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000010 	.word	0x20000010
 80026e4:	200008cc 	.word	0x200008cc

080026e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return uwTick;
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <HAL_GetTick+0x14>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	200008cc 	.word	0x200008cc

08002700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7ff ffee 	bl	80026e8 <HAL_GetTick>
 800270c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d005      	beq.n	8002726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <HAL_Delay+0x44>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4413      	add	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002726:	bf00      	nop
 8002728:	f7ff ffde 	bl	80026e8 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	429a      	cmp	r2, r3
 8002736:	d8f7      	bhi.n	8002728 <HAL_Delay+0x28>
  {
  }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000010 	.word	0x20000010

08002748 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e033      	b.n	80027c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff f8ac 	bl	80018c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b00      	cmp	r3, #0
 8002784:	d118      	bne.n	80027b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800278e:	f023 0302 	bic.w	r3, r3, #2
 8002792:	f043 0202 	orr.w	r2, r3, #2
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fad8 	bl	8002d50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f023 0303 	bic.w	r3, r3, #3
 80027ae:	f043 0201 	orr.w	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40
 80027b6:	e001      	b.n	80027bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_Start+0x1a>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e0b2      	b.n	8002950 <HAL_ADC_Start+0x180>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d018      	beq.n	8002832 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002810:	4b52      	ldr	r3, [pc, #328]	; (800295c <HAL_ADC_Start+0x18c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a52      	ldr	r2, [pc, #328]	; (8002960 <HAL_ADC_Start+0x190>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	0c9a      	lsrs	r2, r3, #18
 800281c:	4613      	mov	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4413      	add	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002824:	e002      	b.n	800282c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	3b01      	subs	r3, #1
 800282a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f9      	bne.n	8002826 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d17a      	bne.n	8002936 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800286a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800287a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287e:	d106      	bne.n	800288e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002884:	f023 0206 	bic.w	r2, r3, #6
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	645a      	str	r2, [r3, #68]	; 0x44
 800288c:	e002      	b.n	8002894 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800289c:	4b31      	ldr	r3, [pc, #196]	; (8002964 <HAL_ADC_Start+0x194>)
 800289e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d12a      	bne.n	800290c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2b      	ldr	r2, [pc, #172]	; (8002968 <HAL_ADC_Start+0x198>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d015      	beq.n	80028ec <HAL_ADC_Start+0x11c>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a29      	ldr	r2, [pc, #164]	; (800296c <HAL_ADC_Start+0x19c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d105      	bne.n	80028d6 <HAL_ADC_Start+0x106>
 80028ca:	4b26      	ldr	r3, [pc, #152]	; (8002964 <HAL_ADC_Start+0x194>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 031f 	and.w	r3, r3, #31
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a25      	ldr	r2, [pc, #148]	; (8002970 <HAL_ADC_Start+0x1a0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d136      	bne.n	800294e <HAL_ADC_Start+0x17e>
 80028e0:	4b20      	ldr	r3, [pc, #128]	; (8002964 <HAL_ADC_Start+0x194>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d130      	bne.n	800294e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d129      	bne.n	800294e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002908:	609a      	str	r2, [r3, #8]
 800290a:	e020      	b.n	800294e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a15      	ldr	r2, [pc, #84]	; (8002968 <HAL_ADC_Start+0x198>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d11b      	bne.n	800294e <HAL_ADC_Start+0x17e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d114      	bne.n	800294e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	e00b      	b.n	800294e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f043 0210 	orr.w	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f043 0201 	orr.w	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	20000000 	.word	0x20000000
 8002960:	431bde83 	.word	0x431bde83
 8002964:	40012300 	.word	0x40012300
 8002968:	40012000 	.word	0x40012000
 800296c:	40012100 	.word	0x40012100
 8002970:	40012200 	.word	0x40012200

08002974 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_ADC_Stop+0x16>
 8002986:	2302      	movs	r3, #2
 8002988:	e021      	b.n	80029ce <HAL_ADC_Stop+0x5a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d109      	bne.n	80029c4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	f043 0201 	orr.w	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f6:	d113      	bne.n	8002a20 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a06:	d10b      	bne.n	8002a20 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	f043 0220 	orr.w	r2, r3, #32
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e063      	b.n	8002ae8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002a20:	f7ff fe62 	bl	80026e8 <HAL_GetTick>
 8002a24:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a26:	e021      	b.n	8002a6c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2e:	d01d      	beq.n	8002a6c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <HAL_ADC_PollForConversion+0x6c>
 8002a36:	f7ff fe57 	bl	80026e8 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d212      	bcs.n	8002a6c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d00b      	beq.n	8002a6c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f043 0204 	orr.w	r2, r3, #4
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e03d      	b.n	8002ae8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d1d6      	bne.n	8002a28 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f06f 0212 	mvn.w	r2, #18
 8002a82:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d123      	bne.n	8002ae6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d11f      	bne.n	8002ae6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d006      	beq.n	8002ac2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d111      	bne.n	8002ae6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d105      	bne.n	8002ae6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f043 0201 	orr.w	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x1c>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e105      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x228>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b09      	cmp	r3, #9
 8002b36:	d925      	bls.n	8002b84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68d9      	ldr	r1, [r3, #12]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	461a      	mov	r2, r3
 8002b46:	4613      	mov	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3b1e      	subs	r3, #30
 8002b4e:	2207      	movs	r2, #7
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43da      	mvns	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68d9      	ldr	r1, [r3, #12]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	4618      	mov	r0, r3
 8002b70:	4603      	mov	r3, r0
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4403      	add	r3, r0
 8002b76:	3b1e      	subs	r3, #30
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	e022      	b.n	8002bca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6919      	ldr	r1, [r3, #16]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	4613      	mov	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4413      	add	r3, r2
 8002b98:	2207      	movs	r2, #7
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	400a      	ands	r2, r1
 8002ba6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6919      	ldr	r1, [r3, #16]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4618      	mov	r0, r3
 8002bba:	4603      	mov	r3, r0
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4403      	add	r3, r0
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b06      	cmp	r3, #6
 8002bd0:	d824      	bhi.n	8002c1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	3b05      	subs	r3, #5
 8002be4:	221f      	movs	r2, #31
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	4618      	mov	r0, r3
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3b05      	subs	r3, #5
 8002c0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	635a      	str	r2, [r3, #52]	; 0x34
 8002c1a:	e04c      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b0c      	cmp	r3, #12
 8002c22:	d824      	bhi.n	8002c6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	3b23      	subs	r3, #35	; 0x23
 8002c36:	221f      	movs	r2, #31
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43da      	mvns	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	400a      	ands	r2, r1
 8002c44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	4618      	mov	r0, r3
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3b23      	subs	r3, #35	; 0x23
 8002c60:	fa00 f203 	lsl.w	r2, r0, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c6c:	e023      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3b41      	subs	r3, #65	; 0x41
 8002c80:	221f      	movs	r2, #31
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43da      	mvns	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3b41      	subs	r3, #65	; 0x41
 8002caa:	fa00 f203 	lsl.w	r2, r0, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cb6:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <HAL_ADC_ConfigChannel+0x234>)
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a21      	ldr	r2, [pc, #132]	; (8002d44 <HAL_ADC_ConfigChannel+0x238>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d109      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x1cc>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b12      	cmp	r3, #18
 8002cca:	d105      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a19      	ldr	r2, [pc, #100]	; (8002d44 <HAL_ADC_ConfigChannel+0x238>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d123      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x21e>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b10      	cmp	r3, #16
 8002ce8:	d003      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x1e6>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b11      	cmp	r3, #17
 8002cf0:	d11b      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b10      	cmp	r3, #16
 8002d04:	d111      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d06:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <HAL_ADC_ConfigChannel+0x23c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a10      	ldr	r2, [pc, #64]	; (8002d4c <HAL_ADC_ConfigChannel+0x240>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	0c9a      	lsrs	r2, r3, #18
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d1c:	e002      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f9      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	40012300 	.word	0x40012300
 8002d44:	40012000 	.word	0x40012000
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	431bde83 	.word	0x431bde83

08002d50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d58:	4b79      	ldr	r3, [pc, #484]	; (8002f40 <ADC_Init+0x1f0>)
 8002d5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	021a      	lsls	r2, r3, #8
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002da8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6899      	ldr	r1, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	4a58      	ldr	r2, [pc, #352]	; (8002f44 <ADC_Init+0x1f4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d022      	beq.n	8002e2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002df6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6899      	ldr	r1, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6899      	ldr	r1, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	e00f      	b.n	8002e4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0202 	bic.w	r2, r2, #2
 8002e5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6899      	ldr	r1, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7e1b      	ldrb	r3, [r3, #24]
 8002e68:	005a      	lsls	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01b      	beq.n	8002eb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6859      	ldr	r1, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	035a      	lsls	r2, r3, #13
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	e007      	b.n	8002ec4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ec2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	051a      	lsls	r2, r3, #20
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6899      	ldr	r1, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f06:	025a      	lsls	r2, r3, #9
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6899      	ldr	r1, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	029a      	lsls	r2, r3, #10
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	40012300 	.word	0x40012300
 8002f44:	0f000001 	.word	0x0f000001

08002f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f58:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <__NVIC_SetPriorityGrouping+0x44>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f64:	4013      	ands	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f7a:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <__NVIC_SetPriorityGrouping+0x44>)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	60d3      	str	r3, [r2, #12]
}
 8002f80:	bf00      	nop
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	0a1b      	lsrs	r3, r3, #8
 8002f9a:	f003 0307 	and.w	r3, r3, #7
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	db0b      	blt.n	8002fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	f003 021f 	and.w	r2, r3, #31
 8002fc4:	4907      	ldr	r1, [pc, #28]	; (8002fe4 <__NVIC_EnableIRQ+0x38>)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	2001      	movs	r0, #1
 8002fce:	fa00 f202 	lsl.w	r2, r0, r2
 8002fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	e000e100 	.word	0xe000e100

08002fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	6039      	str	r1, [r7, #0]
 8002ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	db0a      	blt.n	8003012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	490c      	ldr	r1, [pc, #48]	; (8003034 <__NVIC_SetPriority+0x4c>)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	0112      	lsls	r2, r2, #4
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	440b      	add	r3, r1
 800300c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003010:	e00a      	b.n	8003028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	b2da      	uxtb	r2, r3
 8003016:	4908      	ldr	r1, [pc, #32]	; (8003038 <__NVIC_SetPriority+0x50>)
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	3b04      	subs	r3, #4
 8003020:	0112      	lsls	r2, r2, #4
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	440b      	add	r3, r1
 8003026:	761a      	strb	r2, [r3, #24]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000e100 	.word	0xe000e100
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800303c:	b480      	push	{r7}
 800303e:	b089      	sub	sp, #36	; 0x24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f1c3 0307 	rsb	r3, r3, #7
 8003056:	2b04      	cmp	r3, #4
 8003058:	bf28      	it	cs
 800305a:	2304      	movcs	r3, #4
 800305c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3304      	adds	r3, #4
 8003062:	2b06      	cmp	r3, #6
 8003064:	d902      	bls.n	800306c <NVIC_EncodePriority+0x30>
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3b03      	subs	r3, #3
 800306a:	e000      	b.n	800306e <NVIC_EncodePriority+0x32>
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003070:	f04f 32ff 	mov.w	r2, #4294967295
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43da      	mvns	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	401a      	ands	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003084:	f04f 31ff 	mov.w	r1, #4294967295
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	fa01 f303 	lsl.w	r3, r1, r3
 800308e:	43d9      	mvns	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003094:	4313      	orrs	r3, r2
         );
}
 8003096:	4618      	mov	r0, r3
 8003098:	3724      	adds	r7, #36	; 0x24
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030b4:	d301      	bcc.n	80030ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030b6:	2301      	movs	r3, #1
 80030b8:	e00f      	b.n	80030da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ba:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <SysTick_Config+0x40>)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3b01      	subs	r3, #1
 80030c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030c2:	210f      	movs	r1, #15
 80030c4:	f04f 30ff 	mov.w	r0, #4294967295
 80030c8:	f7ff ff8e 	bl	8002fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <SysTick_Config+0x40>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d2:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <SysTick_Config+0x40>)
 80030d4:	2207      	movs	r2, #7
 80030d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	e000e010 	.word	0xe000e010

080030e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff ff29 	bl	8002f48 <__NVIC_SetPriorityGrouping>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030fe:	b580      	push	{r7, lr}
 8003100:	b086      	sub	sp, #24
 8003102:	af00      	add	r7, sp, #0
 8003104:	4603      	mov	r3, r0
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003110:	f7ff ff3e 	bl	8002f90 <__NVIC_GetPriorityGrouping>
 8003114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	6978      	ldr	r0, [r7, #20]
 800311c:	f7ff ff8e 	bl	800303c <NVIC_EncodePriority>
 8003120:	4602      	mov	r2, r0
 8003122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ff5d 	bl	8002fe8 <__NVIC_SetPriority>
}
 800312e:	bf00      	nop
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	4603      	mov	r3, r0
 800313e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff31 	bl	8002fac <__NVIC_EnableIRQ>
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff ffa2 	bl	80030a4 <SysTick_Config>
 8003160:	4603      	mov	r3, r0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003178:	f7ff fab6 	bl	80026e8 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e099      	b.n	80032bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0201 	bic.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031a8:	e00f      	b.n	80031ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031aa:	f7ff fa9d 	bl	80026e8 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d908      	bls.n	80031ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2203      	movs	r2, #3
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e078      	b.n	80032bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e8      	bne.n	80031aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4b38      	ldr	r3, [pc, #224]	; (80032c4 <HAL_DMA_Init+0x158>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003202:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800320e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	2b04      	cmp	r3, #4
 8003222:	d107      	bne.n	8003234 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	4313      	orrs	r3, r2
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f023 0307 	bic.w	r3, r3, #7
 800324a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	2b04      	cmp	r3, #4
 800325c:	d117      	bne.n	800328e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4313      	orrs	r3, r2
 8003266:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00e      	beq.n	800328e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f9e9 	bl	8003648 <DMA_CheckFifoParam>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2240      	movs	r2, #64	; 0x40
 8003280:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800328a:	2301      	movs	r3, #1
 800328c:	e016      	b.n	80032bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f9a0 	bl	80035dc <DMA_CalcBaseAndBitshift>
 800329c:	4603      	mov	r3, r0
 800329e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a4:	223f      	movs	r2, #63	; 0x3f
 80032a6:	409a      	lsls	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	f010803f 	.word	0xf010803f

080032c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032d4:	4b8e      	ldr	r3, [pc, #568]	; (8003510 <HAL_DMA_IRQHandler+0x248>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a8e      	ldr	r2, [pc, #568]	; (8003514 <HAL_DMA_IRQHandler+0x24c>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	0a9b      	lsrs	r3, r3, #10
 80032e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f2:	2208      	movs	r2, #8
 80032f4:	409a      	lsls	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01a      	beq.n	8003334 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d013      	beq.n	8003334 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0204 	bic.w	r2, r2, #4
 800331a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003320:	2208      	movs	r2, #8
 8003322:	409a      	lsls	r2, r3
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332c:	f043 0201 	orr.w	r2, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	2201      	movs	r2, #1
 800333a:	409a      	lsls	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d012      	beq.n	800336a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003356:	2201      	movs	r2, #1
 8003358:	409a      	lsls	r2, r3
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	f043 0202 	orr.w	r2, r3, #2
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336e:	2204      	movs	r2, #4
 8003370:	409a      	lsls	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d012      	beq.n	80033a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00b      	beq.n	80033a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	2204      	movs	r2, #4
 800338e:	409a      	lsls	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	f043 0204 	orr.w	r2, r3, #4
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a4:	2210      	movs	r2, #16
 80033a6:	409a      	lsls	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d043      	beq.n	8003438 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d03c      	beq.n	8003438 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c2:	2210      	movs	r2, #16
 80033c4:	409a      	lsls	r2, r3
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d018      	beq.n	800340a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d108      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d024      	beq.n	8003438 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	4798      	blx	r3
 80033f6:	e01f      	b.n	8003438 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01b      	beq.n	8003438 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	4798      	blx	r3
 8003408:	e016      	b.n	8003438 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d107      	bne.n	8003428 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0208 	bic.w	r2, r2, #8
 8003426:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	2220      	movs	r2, #32
 800343e:	409a      	lsls	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 808f 	beq.w	8003568 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 8087 	beq.w	8003568 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	2220      	movs	r2, #32
 8003460:	409a      	lsls	r2, r3
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b05      	cmp	r3, #5
 8003470:	d136      	bne.n	80034e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0216 	bic.w	r2, r2, #22
 8003480:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003490:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d103      	bne.n	80034a2 <HAL_DMA_IRQHandler+0x1da>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d007      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0208 	bic.w	r2, r2, #8
 80034b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b6:	223f      	movs	r2, #63	; 0x3f
 80034b8:	409a      	lsls	r2, r3
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d07e      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
        }
        return;
 80034de:	e079      	b.n	80035d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d01d      	beq.n	800352a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10d      	bne.n	8003518 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	2b00      	cmp	r3, #0
 8003502:	d031      	beq.n	8003568 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	4798      	blx	r3
 800350c:	e02c      	b.n	8003568 <HAL_DMA_IRQHandler+0x2a0>
 800350e:	bf00      	nop
 8003510:	20000000 	.word	0x20000000
 8003514:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d023      	beq.n	8003568 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
 8003528:	e01e      	b.n	8003568 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10f      	bne.n	8003558 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0210 	bic.w	r2, r2, #16
 8003546:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356c:	2b00      	cmp	r3, #0
 800356e:	d032      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d022      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2205      	movs	r2, #5
 8003580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0201 	bic.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	3301      	adds	r3, #1
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	429a      	cmp	r2, r3
 800359e:	d307      	bcc.n	80035b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f2      	bne.n	8003594 <HAL_DMA_IRQHandler+0x2cc>
 80035ae:	e000      	b.n	80035b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d005      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	4798      	blx	r3
 80035d2:	e000      	b.n	80035d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80035d4:	bf00      	nop
    }
  }
}
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	3b10      	subs	r3, #16
 80035ec:	4a14      	ldr	r2, [pc, #80]	; (8003640 <DMA_CalcBaseAndBitshift+0x64>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	091b      	lsrs	r3, r3, #4
 80035f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035f6:	4a13      	ldr	r2, [pc, #76]	; (8003644 <DMA_CalcBaseAndBitshift+0x68>)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4413      	add	r3, r2
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b03      	cmp	r3, #3
 8003608:	d909      	bls.n	800361e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003612:	f023 0303 	bic.w	r3, r3, #3
 8003616:	1d1a      	adds	r2, r3, #4
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	659a      	str	r2, [r3, #88]	; 0x58
 800361c:	e007      	b.n	800362e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003626:	f023 0303 	bic.w	r3, r3, #3
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	aaaaaaab 	.word	0xaaaaaaab
 8003644:	0800c3c4 	.word	0x0800c3c4

08003648 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d11f      	bne.n	80036a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d856      	bhi.n	8003716 <DMA_CheckFifoParam+0xce>
 8003668:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <DMA_CheckFifoParam+0x28>)
 800366a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366e:	bf00      	nop
 8003670:	08003681 	.word	0x08003681
 8003674:	08003693 	.word	0x08003693
 8003678:	08003681 	.word	0x08003681
 800367c:	08003717 	.word	0x08003717
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d046      	beq.n	800371a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003690:	e043      	b.n	800371a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003696:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800369a:	d140      	bne.n	800371e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a0:	e03d      	b.n	800371e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036aa:	d121      	bne.n	80036f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d837      	bhi.n	8003722 <DMA_CheckFifoParam+0xda>
 80036b2:	a201      	add	r2, pc, #4	; (adr r2, 80036b8 <DMA_CheckFifoParam+0x70>)
 80036b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b8:	080036c9 	.word	0x080036c9
 80036bc:	080036cf 	.word	0x080036cf
 80036c0:	080036c9 	.word	0x080036c9
 80036c4:	080036e1 	.word	0x080036e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
      break;
 80036cc:	e030      	b.n	8003730 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d025      	beq.n	8003726 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036de:	e022      	b.n	8003726 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036e8:	d11f      	bne.n	800372a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036ee:	e01c      	b.n	800372a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d903      	bls.n	80036fe <DMA_CheckFifoParam+0xb6>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d003      	beq.n	8003704 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036fc:	e018      	b.n	8003730 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
      break;
 8003702:	e015      	b.n	8003730 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00e      	beq.n	800372e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
      break;
 8003714:	e00b      	b.n	800372e <DMA_CheckFifoParam+0xe6>
      break;
 8003716:	bf00      	nop
 8003718:	e00a      	b.n	8003730 <DMA_CheckFifoParam+0xe8>
      break;
 800371a:	bf00      	nop
 800371c:	e008      	b.n	8003730 <DMA_CheckFifoParam+0xe8>
      break;
 800371e:	bf00      	nop
 8003720:	e006      	b.n	8003730 <DMA_CheckFifoParam+0xe8>
      break;
 8003722:	bf00      	nop
 8003724:	e004      	b.n	8003730 <DMA_CheckFifoParam+0xe8>
      break;
 8003726:	bf00      	nop
 8003728:	e002      	b.n	8003730 <DMA_CheckFifoParam+0xe8>
      break;   
 800372a:	bf00      	nop
 800372c:	e000      	b.n	8003730 <DMA_CheckFifoParam+0xe8>
      break;
 800372e:	bf00      	nop
    }
  } 
  
  return status; 
 8003730:	7bfb      	ldrb	r3, [r7, #15]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop

08003740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003740:	b480      	push	{r7}
 8003742:	b089      	sub	sp, #36	; 0x24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	e16b      	b.n	8003a34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800375c:	2201      	movs	r2, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4013      	ands	r3, r2
 800376e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	429a      	cmp	r2, r3
 8003776:	f040 815a 	bne.w	8003a2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d005      	beq.n	8003792 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800378e:	2b02      	cmp	r3, #2
 8003790:	d130      	bne.n	80037f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	2203      	movs	r2, #3
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037c8:	2201      	movs	r2, #1
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f003 0201 	and.w	r2, r3, #1
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d017      	beq.n	8003830 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2203      	movs	r2, #3
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d123      	bne.n	8003884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	08da      	lsrs	r2, r3, #3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3208      	adds	r2, #8
 8003844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	220f      	movs	r2, #15
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	08da      	lsrs	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3208      	adds	r2, #8
 800387e:	69b9      	ldr	r1, [r7, #24]
 8003880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	2203      	movs	r2, #3
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 0203 	and.w	r2, r3, #3
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80b4 	beq.w	8003a2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	4b60      	ldr	r3, [pc, #384]	; (8003a4c <HAL_GPIO_Init+0x30c>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	4a5f      	ldr	r2, [pc, #380]	; (8003a4c <HAL_GPIO_Init+0x30c>)
 80038d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038d4:	6453      	str	r3, [r2, #68]	; 0x44
 80038d6:	4b5d      	ldr	r3, [pc, #372]	; (8003a4c <HAL_GPIO_Init+0x30c>)
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038e2:	4a5b      	ldr	r2, [pc, #364]	; (8003a50 <HAL_GPIO_Init+0x310>)
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	089b      	lsrs	r3, r3, #2
 80038e8:	3302      	adds	r3, #2
 80038ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	220f      	movs	r2, #15
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a52      	ldr	r2, [pc, #328]	; (8003a54 <HAL_GPIO_Init+0x314>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d02b      	beq.n	8003966 <HAL_GPIO_Init+0x226>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a51      	ldr	r2, [pc, #324]	; (8003a58 <HAL_GPIO_Init+0x318>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d025      	beq.n	8003962 <HAL_GPIO_Init+0x222>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a50      	ldr	r2, [pc, #320]	; (8003a5c <HAL_GPIO_Init+0x31c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01f      	beq.n	800395e <HAL_GPIO_Init+0x21e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a4f      	ldr	r2, [pc, #316]	; (8003a60 <HAL_GPIO_Init+0x320>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d019      	beq.n	800395a <HAL_GPIO_Init+0x21a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a4e      	ldr	r2, [pc, #312]	; (8003a64 <HAL_GPIO_Init+0x324>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <HAL_GPIO_Init+0x216>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a4d      	ldr	r2, [pc, #308]	; (8003a68 <HAL_GPIO_Init+0x328>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00d      	beq.n	8003952 <HAL_GPIO_Init+0x212>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a4c      	ldr	r2, [pc, #304]	; (8003a6c <HAL_GPIO_Init+0x32c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <HAL_GPIO_Init+0x20e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a4b      	ldr	r2, [pc, #300]	; (8003a70 <HAL_GPIO_Init+0x330>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <HAL_GPIO_Init+0x20a>
 8003946:	2307      	movs	r3, #7
 8003948:	e00e      	b.n	8003968 <HAL_GPIO_Init+0x228>
 800394a:	2308      	movs	r3, #8
 800394c:	e00c      	b.n	8003968 <HAL_GPIO_Init+0x228>
 800394e:	2306      	movs	r3, #6
 8003950:	e00a      	b.n	8003968 <HAL_GPIO_Init+0x228>
 8003952:	2305      	movs	r3, #5
 8003954:	e008      	b.n	8003968 <HAL_GPIO_Init+0x228>
 8003956:	2304      	movs	r3, #4
 8003958:	e006      	b.n	8003968 <HAL_GPIO_Init+0x228>
 800395a:	2303      	movs	r3, #3
 800395c:	e004      	b.n	8003968 <HAL_GPIO_Init+0x228>
 800395e:	2302      	movs	r3, #2
 8003960:	e002      	b.n	8003968 <HAL_GPIO_Init+0x228>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_GPIO_Init+0x228>
 8003966:	2300      	movs	r3, #0
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	f002 0203 	and.w	r2, r2, #3
 800396e:	0092      	lsls	r2, r2, #2
 8003970:	4093      	lsls	r3, r2
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003978:	4935      	ldr	r1, [pc, #212]	; (8003a50 <HAL_GPIO_Init+0x310>)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	3302      	adds	r3, #2
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003986:	4b3b      	ldr	r3, [pc, #236]	; (8003a74 <HAL_GPIO_Init+0x334>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039aa:	4a32      	ldr	r2, [pc, #200]	; (8003a74 <HAL_GPIO_Init+0x334>)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039b0:	4b30      	ldr	r3, [pc, #192]	; (8003a74 <HAL_GPIO_Init+0x334>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039d4:	4a27      	ldr	r2, [pc, #156]	; (8003a74 <HAL_GPIO_Init+0x334>)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039da:	4b26      	ldr	r3, [pc, #152]	; (8003a74 <HAL_GPIO_Init+0x334>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	43db      	mvns	r3, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039fe:	4a1d      	ldr	r2, [pc, #116]	; (8003a74 <HAL_GPIO_Init+0x334>)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a04:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <HAL_GPIO_Init+0x334>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a28:	4a12      	ldr	r2, [pc, #72]	; (8003a74 <HAL_GPIO_Init+0x334>)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	3301      	adds	r3, #1
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b0f      	cmp	r3, #15
 8003a38:	f67f ae90 	bls.w	800375c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	bf00      	nop
 8003a40:	3724      	adds	r7, #36	; 0x24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40013800 	.word	0x40013800
 8003a54:	40020000 	.word	0x40020000
 8003a58:	40020400 	.word	0x40020400
 8003a5c:	40020800 	.word	0x40020800
 8003a60:	40020c00 	.word	0x40020c00
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40021400 	.word	0x40021400
 8003a6c:	40021800 	.word	0x40021800
 8003a70:	40021c00 	.word	0x40021c00
 8003a74:	40013c00 	.word	0x40013c00

08003a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	807b      	strh	r3, [r7, #2]
 8003a84:	4613      	mov	r3, r2
 8003a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a88:	787b      	ldrb	r3, [r7, #1]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a8e:	887a      	ldrh	r2, [r7, #2]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a94:	e003      	b.n	8003a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a96:	887b      	ldrh	r3, [r7, #2]
 8003a98:	041a      	lsls	r2, r3, #16
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	619a      	str	r2, [r3, #24]
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b085      	sub	sp, #20
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003abc:	887a      	ldrh	r2, [r7, #2]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	041a      	lsls	r2, r3, #16
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	43d9      	mvns	r1, r3
 8003ac8:	887b      	ldrh	r3, [r7, #2]
 8003aca:	400b      	ands	r3, r1
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	619a      	str	r2, [r3, #24]
}
 8003ad2:	bf00      	nop
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
	...

08003ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e267      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d075      	beq.n	8003bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003afe:	4b88      	ldr	r3, [pc, #544]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d00c      	beq.n	8003b24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b0a:	4b85      	ldr	r3, [pc, #532]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d112      	bne.n	8003b3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b16:	4b82      	ldr	r3, [pc, #520]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b22:	d10b      	bne.n	8003b3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b24:	4b7e      	ldr	r3, [pc, #504]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d05b      	beq.n	8003be8 <HAL_RCC_OscConfig+0x108>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d157      	bne.n	8003be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e242      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b44:	d106      	bne.n	8003b54 <HAL_RCC_OscConfig+0x74>
 8003b46:	4b76      	ldr	r3, [pc, #472]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a75      	ldr	r2, [pc, #468]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	e01d      	b.n	8003b90 <HAL_RCC_OscConfig+0xb0>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b5c:	d10c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x98>
 8003b5e:	4b70      	ldr	r3, [pc, #448]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a6f      	ldr	r2, [pc, #444]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	4b6d      	ldr	r3, [pc, #436]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a6c      	ldr	r2, [pc, #432]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	e00b      	b.n	8003b90 <HAL_RCC_OscConfig+0xb0>
 8003b78:	4b69      	ldr	r3, [pc, #420]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a68      	ldr	r2, [pc, #416]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	4b66      	ldr	r3, [pc, #408]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a65      	ldr	r2, [pc, #404]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d013      	beq.n	8003bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fe fda6 	bl	80026e8 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba0:	f7fe fda2 	bl	80026e8 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b64      	cmp	r3, #100	; 0x64
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e207      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb2:	4b5b      	ldr	r3, [pc, #364]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0xc0>
 8003bbe:	e014      	b.n	8003bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc0:	f7fe fd92 	bl	80026e8 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bc8:	f7fe fd8e 	bl	80026e8 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b64      	cmp	r3, #100	; 0x64
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e1f3      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bda:	4b51      	ldr	r3, [pc, #324]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0xe8>
 8003be6:	e000      	b.n	8003bea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d063      	beq.n	8003cbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bf6:	4b4a      	ldr	r3, [pc, #296]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00b      	beq.n	8003c1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c02:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d11c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c0e:	4b44      	ldr	r3, [pc, #272]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d116      	bne.n	8003c48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1a:	4b41      	ldr	r3, [pc, #260]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <HAL_RCC_OscConfig+0x152>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e1c7      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c32:	4b3b      	ldr	r3, [pc, #236]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4937      	ldr	r1, [pc, #220]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c46:	e03a      	b.n	8003cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d020      	beq.n	8003c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c50:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <HAL_RCC_OscConfig+0x244>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fe fd47 	bl	80026e8 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c5e:	f7fe fd43 	bl	80026e8 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e1a8      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c70:	4b2b      	ldr	r3, [pc, #172]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7c:	4b28      	ldr	r3, [pc, #160]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	4925      	ldr	r1, [pc, #148]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	600b      	str	r3, [r1, #0]
 8003c90:	e015      	b.n	8003cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c92:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <HAL_RCC_OscConfig+0x244>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c98:	f7fe fd26 	bl	80026e8 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ca0:	f7fe fd22 	bl	80026e8 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e187      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cb2:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d036      	beq.n	8003d38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d016      	beq.n	8003d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cd2:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <HAL_RCC_OscConfig+0x248>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd8:	f7fe fd06 	bl	80026e8 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce0:	f7fe fd02 	bl	80026e8 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e167      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x200>
 8003cfe:	e01b      	b.n	8003d38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d00:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <HAL_RCC_OscConfig+0x248>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d06:	f7fe fcef 	bl	80026e8 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d0c:	e00e      	b.n	8003d2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d0e:	f7fe fceb 	bl	80026e8 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d907      	bls.n	8003d2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e150      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
 8003d20:	40023800 	.word	0x40023800
 8003d24:	42470000 	.word	0x42470000
 8003d28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d2c:	4b88      	ldr	r3, [pc, #544]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1ea      	bne.n	8003d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 8097 	beq.w	8003e74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4a:	4b81      	ldr	r3, [pc, #516]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10f      	bne.n	8003d76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	4b7d      	ldr	r3, [pc, #500]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	4a7c      	ldr	r2, [pc, #496]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d64:	6413      	str	r3, [r2, #64]	; 0x40
 8003d66:	4b7a      	ldr	r3, [pc, #488]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d72:	2301      	movs	r3, #1
 8003d74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d76:	4b77      	ldr	r3, [pc, #476]	; (8003f54 <HAL_RCC_OscConfig+0x474>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d118      	bne.n	8003db4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d82:	4b74      	ldr	r3, [pc, #464]	; (8003f54 <HAL_RCC_OscConfig+0x474>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a73      	ldr	r2, [pc, #460]	; (8003f54 <HAL_RCC_OscConfig+0x474>)
 8003d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8e:	f7fe fcab 	bl	80026e8 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d96:	f7fe fca7 	bl	80026e8 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e10c      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da8:	4b6a      	ldr	r3, [pc, #424]	; (8003f54 <HAL_RCC_OscConfig+0x474>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d106      	bne.n	8003dca <HAL_RCC_OscConfig+0x2ea>
 8003dbc:	4b64      	ldr	r3, [pc, #400]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc0:	4a63      	ldr	r2, [pc, #396]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc8:	e01c      	b.n	8003e04 <HAL_RCC_OscConfig+0x324>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b05      	cmp	r3, #5
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCC_OscConfig+0x30c>
 8003dd2:	4b5f      	ldr	r3, [pc, #380]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	4a5e      	ldr	r2, [pc, #376]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	f043 0304 	orr.w	r3, r3, #4
 8003ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dde:	4b5c      	ldr	r3, [pc, #368]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de2:	4a5b      	ldr	r2, [pc, #364]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dea:	e00b      	b.n	8003e04 <HAL_RCC_OscConfig+0x324>
 8003dec:	4b58      	ldr	r3, [pc, #352]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	4a57      	ldr	r2, [pc, #348]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003df2:	f023 0301 	bic.w	r3, r3, #1
 8003df6:	6713      	str	r3, [r2, #112]	; 0x70
 8003df8:	4b55      	ldr	r3, [pc, #340]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfc:	4a54      	ldr	r2, [pc, #336]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	f023 0304 	bic.w	r3, r3, #4
 8003e02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d015      	beq.n	8003e38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7fe fc6c 	bl	80026e8 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e14:	f7fe fc68 	bl	80026e8 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e0cb      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2a:	4b49      	ldr	r3, [pc, #292]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0ee      	beq.n	8003e14 <HAL_RCC_OscConfig+0x334>
 8003e36:	e014      	b.n	8003e62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e38:	f7fe fc56 	bl	80026e8 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e40:	f7fe fc52 	bl	80026e8 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e0b5      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e56:	4b3e      	ldr	r3, [pc, #248]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1ee      	bne.n	8003e40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d105      	bne.n	8003e74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e68:	4b39      	ldr	r3, [pc, #228]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	4a38      	ldr	r2, [pc, #224]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 80a1 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e7e:	4b34      	ldr	r3, [pc, #208]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d05c      	beq.n	8003f44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d141      	bne.n	8003f16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e92:	4b31      	ldr	r3, [pc, #196]	; (8003f58 <HAL_RCC_OscConfig+0x478>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fe fc26 	bl	80026e8 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7fe fc22 	bl	80026e8 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e087      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb2:	4b27      	ldr	r3, [pc, #156]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69da      	ldr	r2, [r3, #28]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	019b      	lsls	r3, r3, #6
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	085b      	lsrs	r3, r3, #1
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	041b      	lsls	r3, r3, #16
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	491b      	ldr	r1, [pc, #108]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee8:	4b1b      	ldr	r3, [pc, #108]	; (8003f58 <HAL_RCC_OscConfig+0x478>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eee:	f7fe fbfb 	bl	80026e8 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fe fbf7 	bl	80026e8 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e05c      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f08:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x416>
 8003f14:	e054      	b.n	8003fc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f16:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <HAL_RCC_OscConfig+0x478>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1c:	f7fe fbe4 	bl	80026e8 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f24:	f7fe fbe0 	bl	80026e8 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e045      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f36:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <HAL_RCC_OscConfig+0x470>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f0      	bne.n	8003f24 <HAL_RCC_OscConfig+0x444>
 8003f42:	e03d      	b.n	8003fc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d107      	bne.n	8003f5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e038      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40007000 	.word	0x40007000
 8003f58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f5c:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <HAL_RCC_OscConfig+0x4ec>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d028      	beq.n	8003fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d121      	bne.n	8003fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d11a      	bne.n	8003fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d111      	bne.n	8003fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa2:	085b      	lsrs	r3, r3, #1
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d107      	bne.n	8003fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40023800 	.word	0x40023800

08003fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0cc      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe4:	4b68      	ldr	r3, [pc, #416]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d90c      	bls.n	800400c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff2:	4b65      	ldr	r3, [pc, #404]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffa:	4b63      	ldr	r3, [pc, #396]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d001      	beq.n	800400c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0b8      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d020      	beq.n	800405a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004024:	4b59      	ldr	r3, [pc, #356]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4a58      	ldr	r2, [pc, #352]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800402e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800403c:	4b53      	ldr	r3, [pc, #332]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4a52      	ldr	r2, [pc, #328]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004048:	4b50      	ldr	r3, [pc, #320]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	494d      	ldr	r1, [pc, #308]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d044      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d107      	bne.n	800407e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406e:	4b47      	ldr	r3, [pc, #284]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d119      	bne.n	80040ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e07f      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d003      	beq.n	800408e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800408a:	2b03      	cmp	r3, #3
 800408c:	d107      	bne.n	800409e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408e:	4b3f      	ldr	r3, [pc, #252]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e06f      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409e:	4b3b      	ldr	r3, [pc, #236]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e067      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ae:	4b37      	ldr	r3, [pc, #220]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f023 0203 	bic.w	r2, r3, #3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	4934      	ldr	r1, [pc, #208]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040c0:	f7fe fb12 	bl	80026e8 <HAL_GetTick>
 80040c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	e00a      	b.n	80040de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c8:	f7fe fb0e 	bl	80026e8 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e04f      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040de:	4b2b      	ldr	r3, [pc, #172]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 020c 	and.w	r2, r3, #12
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d1eb      	bne.n	80040c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040f0:	4b25      	ldr	r3, [pc, #148]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d20c      	bcs.n	8004118 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fe:	4b22      	ldr	r3, [pc, #136]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004106:	4b20      	ldr	r3, [pc, #128]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e032      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004124:	4b19      	ldr	r3, [pc, #100]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4916      	ldr	r1, [pc, #88]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004142:	4b12      	ldr	r3, [pc, #72]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	490e      	ldr	r1, [pc, #56]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004156:	f000 f82d 	bl	80041b4 <HAL_RCC_GetSysClockFreq>
 800415a:	4602      	mov	r2, r0
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	490a      	ldr	r1, [pc, #40]	; (8004190 <HAL_RCC_ClockConfig+0x1c0>)
 8004168:	5ccb      	ldrb	r3, [r1, r3]
 800416a:	fa22 f303 	lsr.w	r3, r2, r3
 800416e:	4a09      	ldr	r2, [pc, #36]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 8004170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004172:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCC_ClockConfig+0x1c8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f7fe fa72 	bl	8002660 <HAL_InitTick>

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40023c00 	.word	0x40023c00
 800418c:	40023800 	.word	0x40023800
 8004190:	0800bdbc 	.word	0x0800bdbc
 8004194:	20000000 	.word	0x20000000
 8004198:	2000000c 	.word	0x2000000c

0800419c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80041a0:	4b03      	ldr	r3, [pc, #12]	; (80041b0 <HAL_RCC_EnableCSS+0x14>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
}
 80041a6:	bf00      	nop
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	4247004c 	.word	0x4247004c

080041b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b8:	b094      	sub	sp, #80	; 0x50
 80041ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	647b      	str	r3, [r7, #68]	; 0x44
 80041c0:	2300      	movs	r3, #0
 80041c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c4:	2300      	movs	r3, #0
 80041c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041cc:	4b79      	ldr	r3, [pc, #484]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 030c 	and.w	r3, r3, #12
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d00d      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0x40>
 80041d8:	2b08      	cmp	r3, #8
 80041da:	f200 80e1 	bhi.w	80043a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0x34>
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d003      	beq.n	80041ee <HAL_RCC_GetSysClockFreq+0x3a>
 80041e6:	e0db      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041e8:	4b73      	ldr	r3, [pc, #460]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80041ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041ec:	e0db      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ee:	4b72      	ldr	r3, [pc, #456]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80041f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041f2:	e0d8      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f4:	4b6f      	ldr	r3, [pc, #444]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041fe:	4b6d      	ldr	r3, [pc, #436]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d063      	beq.n	80042d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420a:	4b6a      	ldr	r3, [pc, #424]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	099b      	lsrs	r3, r3, #6
 8004210:	2200      	movs	r2, #0
 8004212:	63bb      	str	r3, [r7, #56]	; 0x38
 8004214:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421c:	633b      	str	r3, [r7, #48]	; 0x30
 800421e:	2300      	movs	r3, #0
 8004220:	637b      	str	r3, [r7, #52]	; 0x34
 8004222:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004226:	4622      	mov	r2, r4
 8004228:	462b      	mov	r3, r5
 800422a:	f04f 0000 	mov.w	r0, #0
 800422e:	f04f 0100 	mov.w	r1, #0
 8004232:	0159      	lsls	r1, r3, #5
 8004234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004238:	0150      	lsls	r0, r2, #5
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	4621      	mov	r1, r4
 8004240:	1a51      	subs	r1, r2, r1
 8004242:	6139      	str	r1, [r7, #16]
 8004244:	4629      	mov	r1, r5
 8004246:	eb63 0301 	sbc.w	r3, r3, r1
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004258:	4659      	mov	r1, fp
 800425a:	018b      	lsls	r3, r1, #6
 800425c:	4651      	mov	r1, sl
 800425e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004262:	4651      	mov	r1, sl
 8004264:	018a      	lsls	r2, r1, #6
 8004266:	4651      	mov	r1, sl
 8004268:	ebb2 0801 	subs.w	r8, r2, r1
 800426c:	4659      	mov	r1, fp
 800426e:	eb63 0901 	sbc.w	r9, r3, r1
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800427e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004286:	4690      	mov	r8, r2
 8004288:	4699      	mov	r9, r3
 800428a:	4623      	mov	r3, r4
 800428c:	eb18 0303 	adds.w	r3, r8, r3
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	462b      	mov	r3, r5
 8004294:	eb49 0303 	adc.w	r3, r9, r3
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042a6:	4629      	mov	r1, r5
 80042a8:	028b      	lsls	r3, r1, #10
 80042aa:	4621      	mov	r1, r4
 80042ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042b0:	4621      	mov	r1, r4
 80042b2:	028a      	lsls	r2, r1, #10
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ba:	2200      	movs	r2, #0
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042c4:	f7fc fc70 	bl	8000ba8 <__aeabi_uldivmod>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4613      	mov	r3, r2
 80042ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042d0:	e058      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d2:	4b38      	ldr	r3, [pc, #224]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	099b      	lsrs	r3, r3, #6
 80042d8:	2200      	movs	r2, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	4611      	mov	r1, r2
 80042de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042e2:	623b      	str	r3, [r7, #32]
 80042e4:	2300      	movs	r3, #0
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
 80042e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042ec:	4642      	mov	r2, r8
 80042ee:	464b      	mov	r3, r9
 80042f0:	f04f 0000 	mov.w	r0, #0
 80042f4:	f04f 0100 	mov.w	r1, #0
 80042f8:	0159      	lsls	r1, r3, #5
 80042fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042fe:	0150      	lsls	r0, r2, #5
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4641      	mov	r1, r8
 8004306:	ebb2 0a01 	subs.w	sl, r2, r1
 800430a:	4649      	mov	r1, r9
 800430c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800431c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004320:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004324:	ebb2 040a 	subs.w	r4, r2, sl
 8004328:	eb63 050b 	sbc.w	r5, r3, fp
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	00eb      	lsls	r3, r5, #3
 8004336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800433a:	00e2      	lsls	r2, r4, #3
 800433c:	4614      	mov	r4, r2
 800433e:	461d      	mov	r5, r3
 8004340:	4643      	mov	r3, r8
 8004342:	18e3      	adds	r3, r4, r3
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	464b      	mov	r3, r9
 8004348:	eb45 0303 	adc.w	r3, r5, r3
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	e9d7 4500 	ldrd	r4, r5, [r7]
 800435a:	4629      	mov	r1, r5
 800435c:	028b      	lsls	r3, r1, #10
 800435e:	4621      	mov	r1, r4
 8004360:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004364:	4621      	mov	r1, r4
 8004366:	028a      	lsls	r2, r1, #10
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800436e:	2200      	movs	r2, #0
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	61fa      	str	r2, [r7, #28]
 8004374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004378:	f7fc fc16 	bl	8000ba8 <__aeabi_uldivmod>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4613      	mov	r3, r2
 8004382:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	3301      	adds	r3, #1
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004394:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800439e:	e002      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80043a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3750      	adds	r7, #80	; 0x50
 80043ac:	46bd      	mov	sp, r7
 80043ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b2:	bf00      	nop
 80043b4:	40023800 	.word	0x40023800
 80043b8:	00f42400 	.word	0x00f42400

080043bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c0:	4b03      	ldr	r3, [pc, #12]	; (80043d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043c2:	681b      	ldr	r3, [r3, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000000 	.word	0x20000000

080043d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043d8:	f7ff fff0 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 80043dc:	4602      	mov	r2, r0
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	0a9b      	lsrs	r3, r3, #10
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	4903      	ldr	r1, [pc, #12]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ea:	5ccb      	ldrb	r3, [r1, r3]
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40023800 	.word	0x40023800
 80043f8:	0800bdcc 	.word	0x0800bdcc

080043fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004400:	f7ff ffdc 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 8004404:	4602      	mov	r2, r0
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	0b5b      	lsrs	r3, r3, #13
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	4903      	ldr	r1, [pc, #12]	; (8004420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004412:	5ccb      	ldrb	r3, [r1, r3]
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40023800 	.word	0x40023800
 8004420:	0800bdcc 	.word	0x0800bdcc

08004424 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004428:	4b06      	ldr	r3, [pc, #24]	; (8004444 <HAL_RCC_NMI_IRQHandler+0x20>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004430:	2b80      	cmp	r3, #128	; 0x80
 8004432:	d104      	bne.n	800443e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004434:	f000 f80a 	bl	800444c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <HAL_RCC_NMI_IRQHandler+0x24>)
 800443a:	2280      	movs	r2, #128	; 0x80
 800443c:	701a      	strb	r2, [r3, #0]
  }
}
 800443e:	bf00      	nop
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40023800 	.word	0x40023800
 8004448:	4002380e 	.word	0x4002380e

0800444c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b082      	sub	sp, #8
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e07b      	b.n	8004564 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	d108      	bne.n	8004486 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800447c:	d009      	beq.n	8004492 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	61da      	str	r2, [r3, #28]
 8004484:	e005      	b.n	8004492 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d106      	bne.n	80044b2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fd fab9 	bl	8001a24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2202      	movs	r2, #2
 80044b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004516:	ea42 0103 	orr.w	r1, r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	0c1b      	lsrs	r3, r3, #16
 8004530:	f003 0104 	and.w	r1, r3, #4
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	f003 0210 	and.w	r2, r3, #16
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004552:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	4613      	mov	r3, r2
 800457a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_SPI_Transmit+0x22>
 800458a:	2302      	movs	r3, #2
 800458c:	e126      	b.n	80047dc <HAL_SPI_Transmit+0x270>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004596:	f7fe f8a7 	bl	80026e8 <HAL_GetTick>
 800459a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800459c:	88fb      	ldrh	r3, [r7, #6]
 800459e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d002      	beq.n	80045b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045ac:	2302      	movs	r3, #2
 80045ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045b0:	e10b      	b.n	80047ca <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <HAL_SPI_Transmit+0x52>
 80045b8:	88fb      	ldrh	r3, [r7, #6]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d102      	bne.n	80045c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045c2:	e102      	b.n	80047ca <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2203      	movs	r2, #3
 80045c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	88fa      	ldrh	r2, [r7, #6]
 80045dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	88fa      	ldrh	r2, [r7, #6]
 80045e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800460a:	d10f      	bne.n	800462c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800461a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800462a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004636:	2b40      	cmp	r3, #64	; 0x40
 8004638:	d007      	beq.n	800464a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004648:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004652:	d14b      	bne.n	80046ec <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_SPI_Transmit+0xf6>
 800465c:	8afb      	ldrh	r3, [r7, #22]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d13e      	bne.n	80046e0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	881a      	ldrh	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	1c9a      	adds	r2, r3, #2
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800467c:	b29b      	uxth	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004686:	e02b      	b.n	80046e0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b02      	cmp	r3, #2
 8004694:	d112      	bne.n	80046bc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	881a      	ldrh	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	1c9a      	adds	r2, r3, #2
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80046ba:	e011      	b.n	80046e0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046bc:	f7fe f814 	bl	80026e8 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d803      	bhi.n	80046d4 <HAL_SPI_Transmit+0x168>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d2:	d102      	bne.n	80046da <HAL_SPI_Transmit+0x16e>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d102      	bne.n	80046e0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046de:	e074      	b.n	80047ca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1ce      	bne.n	8004688 <HAL_SPI_Transmit+0x11c>
 80046ea:	e04c      	b.n	8004786 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <HAL_SPI_Transmit+0x18e>
 80046f4:	8afb      	ldrh	r3, [r7, #22]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d140      	bne.n	800477c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	330c      	adds	r3, #12
 8004704:	7812      	ldrb	r2, [r2, #0]
 8004706:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004720:	e02c      	b.n	800477c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b02      	cmp	r3, #2
 800472e:	d113      	bne.n	8004758 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	330c      	adds	r3, #12
 800473a:	7812      	ldrb	r2, [r2, #0]
 800473c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800474c:	b29b      	uxth	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	86da      	strh	r2, [r3, #54]	; 0x36
 8004756:	e011      	b.n	800477c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004758:	f7fd ffc6 	bl	80026e8 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d803      	bhi.n	8004770 <HAL_SPI_Transmit+0x204>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476e:	d102      	bne.n	8004776 <HAL_SPI_Transmit+0x20a>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d102      	bne.n	800477c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	77fb      	strb	r3, [r7, #31]
          goto error;
 800477a:	e026      	b.n	80047ca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1cd      	bne.n	8004722 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	6839      	ldr	r1, [r7, #0]
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 fbcc 	bl	8004f28 <SPI_EndRxTxTransaction>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10a      	bne.n	80047ba <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	77fb      	strb	r3, [r7, #31]
 80047c6:	e000      	b.n	80047ca <HAL_SPI_Transmit+0x25e>
  }

error:
 80047c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047da:	7ffb      	ldrb	r3, [r7, #31]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3720      	adds	r7, #32
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	4613      	mov	r3, r2
 80047f2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004800:	d112      	bne.n	8004828 <HAL_SPI_Receive+0x44>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10e      	bne.n	8004828 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2204      	movs	r2, #4
 800480e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004812:	88fa      	ldrh	r2, [r7, #6]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	4613      	mov	r3, r2
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f8f1 	bl	8004a06 <HAL_SPI_TransmitReceive>
 8004824:	4603      	mov	r3, r0
 8004826:	e0ea      	b.n	80049fe <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800482e:	2b01      	cmp	r3, #1
 8004830:	d101      	bne.n	8004836 <HAL_SPI_Receive+0x52>
 8004832:	2302      	movs	r3, #2
 8004834:	e0e3      	b.n	80049fe <HAL_SPI_Receive+0x21a>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800483e:	f7fd ff53 	bl	80026e8 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d002      	beq.n	8004856 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004850:	2302      	movs	r3, #2
 8004852:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004854:	e0ca      	b.n	80049ec <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <HAL_SPI_Receive+0x7e>
 800485c:	88fb      	ldrh	r3, [r7, #6]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d102      	bne.n	8004868 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004866:	e0c1      	b.n	80049ec <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2204      	movs	r2, #4
 800486c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	88fa      	ldrh	r2, [r7, #6]
 8004880:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	88fa      	ldrh	r2, [r7, #6]
 8004886:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ae:	d10f      	bne.n	80048d0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048da:	2b40      	cmp	r3, #64	; 0x40
 80048dc:	d007      	beq.n	80048ee <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d162      	bne.n	80049bc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80048f6:	e02e      	b.n	8004956 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b01      	cmp	r3, #1
 8004904:	d115      	bne.n	8004932 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f103 020c 	add.w	r2, r3, #12
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004912:	7812      	ldrb	r2, [r2, #0]
 8004914:	b2d2      	uxtb	r2, r2
 8004916:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004930:	e011      	b.n	8004956 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004932:	f7fd fed9 	bl	80026e8 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d803      	bhi.n	800494a <HAL_SPI_Receive+0x166>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004948:	d102      	bne.n	8004950 <HAL_SPI_Receive+0x16c>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d102      	bne.n	8004956 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004954:	e04a      	b.n	80049ec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1cb      	bne.n	80048f8 <HAL_SPI_Receive+0x114>
 8004960:	e031      	b.n	80049c6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b01      	cmp	r3, #1
 800496e:	d113      	bne.n	8004998 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	b292      	uxth	r2, r2
 800497c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	1c9a      	adds	r2, r3, #2
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004996:	e011      	b.n	80049bc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004998:	f7fd fea6 	bl	80026e8 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d803      	bhi.n	80049b0 <HAL_SPI_Receive+0x1cc>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d102      	bne.n	80049b6 <HAL_SPI_Receive+0x1d2>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d102      	bne.n	80049bc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80049ba:	e017      	b.n	80049ec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1cd      	bne.n	8004962 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	6839      	ldr	r1, [r7, #0]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 fa46 	bl	8004e5c <SPI_EndRxTransaction>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	75fb      	strb	r3, [r7, #23]
 80049e8:	e000      	b.n	80049ec <HAL_SPI_Receive+0x208>
  }

error :
 80049ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b08c      	sub	sp, #48	; 0x30
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	607a      	str	r2, [r7, #4]
 8004a12:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a14:	2301      	movs	r3, #1
 8004a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_SPI_TransmitReceive+0x26>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e18a      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x33c>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a34:	f7fd fe58 	bl	80026e8 <HAL_GetTick>
 8004a38:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a4a:	887b      	ldrh	r3, [r7, #2]
 8004a4c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d00f      	beq.n	8004a76 <HAL_SPI_TransmitReceive+0x70>
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a5c:	d107      	bne.n	8004a6e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <HAL_SPI_TransmitReceive+0x68>
 8004a66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d003      	beq.n	8004a76 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a6e:	2302      	movs	r3, #2
 8004a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a74:	e15b      	b.n	8004d2e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_SPI_TransmitReceive+0x82>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <HAL_SPI_TransmitReceive+0x82>
 8004a82:	887b      	ldrh	r3, [r7, #2]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d103      	bne.n	8004a90 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a8e:	e14e      	b.n	8004d2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d003      	beq.n	8004aa4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2205      	movs	r2, #5
 8004aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	887a      	ldrh	r2, [r7, #2]
 8004ab4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	887a      	ldrh	r2, [r7, #2]
 8004aba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	887a      	ldrh	r2, [r7, #2]
 8004ac6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	887a      	ldrh	r2, [r7, #2]
 8004acc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d007      	beq.n	8004af8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004af6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b00:	d178      	bne.n	8004bf4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <HAL_SPI_TransmitReceive+0x10a>
 8004b0a:	8b7b      	ldrh	r3, [r7, #26]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d166      	bne.n	8004bde <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	881a      	ldrh	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	1c9a      	adds	r2, r3, #2
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b34:	e053      	b.n	8004bde <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d11b      	bne.n	8004b7c <HAL_SPI_TransmitReceive+0x176>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d016      	beq.n	8004b7c <HAL_SPI_TransmitReceive+0x176>
 8004b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d113      	bne.n	8004b7c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	881a      	ldrh	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	1c9a      	adds	r2, r3, #2
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d119      	bne.n	8004bbe <HAL_SPI_TransmitReceive+0x1b8>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d014      	beq.n	8004bbe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	b292      	uxth	r2, r2
 8004ba0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	1c9a      	adds	r2, r3, #2
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bbe:	f7fd fd93 	bl	80026e8 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d807      	bhi.n	8004bde <HAL_SPI_TransmitReceive+0x1d8>
 8004bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d003      	beq.n	8004bde <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004bdc:	e0a7      	b.n	8004d2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1a6      	bne.n	8004b36 <HAL_SPI_TransmitReceive+0x130>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1a1      	bne.n	8004b36 <HAL_SPI_TransmitReceive+0x130>
 8004bf2:	e07c      	b.n	8004cee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <HAL_SPI_TransmitReceive+0x1fc>
 8004bfc:	8b7b      	ldrh	r3, [r7, #26]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d16b      	bne.n	8004cda <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c28:	e057      	b.n	8004cda <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d11c      	bne.n	8004c72 <HAL_SPI_TransmitReceive+0x26c>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d017      	beq.n	8004c72 <HAL_SPI_TransmitReceive+0x26c>
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d114      	bne.n	8004c72 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	7812      	ldrb	r2, [r2, #0]
 8004c54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3b01      	subs	r3, #1
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d119      	bne.n	8004cb4 <HAL_SPI_TransmitReceive+0x2ae>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d014      	beq.n	8004cb4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cb4:	f7fd fd18 	bl	80026e8 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d803      	bhi.n	8004ccc <HAL_SPI_TransmitReceive+0x2c6>
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cca:	d102      	bne.n	8004cd2 <HAL_SPI_TransmitReceive+0x2cc>
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d103      	bne.n	8004cda <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004cd8:	e029      	b.n	8004d2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1a2      	bne.n	8004c2a <HAL_SPI_TransmitReceive+0x224>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d19d      	bne.n	8004c2a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 f918 	bl	8004f28 <SPI_EndRxTxTransaction>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d006      	beq.n	8004d0c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d0a:	e010      	b.n	8004d2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10b      	bne.n	8004d2c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d14:	2300      	movs	r3, #0
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	e000      	b.n	8004d2e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004d2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3730      	adds	r7, #48	; 0x30
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d5c:	f7fd fcc4 	bl	80026e8 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	1a9b      	subs	r3, r3, r2
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	4413      	add	r3, r2
 8004d6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d6c:	f7fd fcbc 	bl	80026e8 <HAL_GetTick>
 8004d70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d72:	4b39      	ldr	r3, [pc, #228]	; (8004e58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	015b      	lsls	r3, r3, #5
 8004d78:	0d1b      	lsrs	r3, r3, #20
 8004d7a:	69fa      	ldr	r2, [r7, #28]
 8004d7c:	fb02 f303 	mul.w	r3, r2, r3
 8004d80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d82:	e054      	b.n	8004e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8a:	d050      	beq.n	8004e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d8c:	f7fd fcac 	bl	80026e8 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	69fa      	ldr	r2, [r7, #28]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d902      	bls.n	8004da2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d13d      	bne.n	8004e1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004db0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dba:	d111      	bne.n	8004de0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc4:	d004      	beq.n	8004dd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dce:	d107      	bne.n	8004de0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de8:	d10f      	bne.n	8004e0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e017      	b.n	8004e4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4013      	ands	r3, r2
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	bf0c      	ite	eq
 8004e3e:	2301      	moveq	r3, #1
 8004e40:	2300      	movne	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d19b      	bne.n	8004d84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3720      	adds	r7, #32
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000000 	.word	0x20000000

08004e5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e70:	d111      	bne.n	8004e96 <SPI_EndRxTransaction+0x3a>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7a:	d004      	beq.n	8004e86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e84:	d107      	bne.n	8004e96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e9e:	d12a      	bne.n	8004ef6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea8:	d012      	beq.n	8004ed0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2180      	movs	r1, #128	; 0x80
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff ff49 	bl	8004d4c <SPI_WaitFlagStateUntilTimeout>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d02d      	beq.n	8004f1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e026      	b.n	8004f1e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2101      	movs	r1, #1
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f7ff ff36 	bl	8004d4c <SPI_WaitFlagStateUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d01a      	beq.n	8004f1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eea:	f043 0220 	orr.w	r2, r3, #32
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e013      	b.n	8004f1e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2200      	movs	r2, #0
 8004efe:	2101      	movs	r1, #1
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f7ff ff23 	bl	8004d4c <SPI_WaitFlagStateUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d007      	beq.n	8004f1c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f10:	f043 0220 	orr.w	r2, r3, #32
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e000      	b.n	8004f1e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f34:	4b1b      	ldr	r3, [pc, #108]	; (8004fa4 <SPI_EndRxTxTransaction+0x7c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a1b      	ldr	r2, [pc, #108]	; (8004fa8 <SPI_EndRxTxTransaction+0x80>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	0d5b      	lsrs	r3, r3, #21
 8004f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f44:	fb02 f303 	mul.w	r3, r2, r3
 8004f48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f52:	d112      	bne.n	8004f7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2180      	movs	r1, #128	; 0x80
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff fef4 	bl	8004d4c <SPI_WaitFlagStateUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d016      	beq.n	8004f98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6e:	f043 0220 	orr.w	r2, r3, #32
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e00f      	b.n	8004f9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f90:	2b80      	cmp	r3, #128	; 0x80
 8004f92:	d0f2      	beq.n	8004f7a <SPI_EndRxTxTransaction+0x52>
 8004f94:	e000      	b.n	8004f98 <SPI_EndRxTxTransaction+0x70>
        break;
 8004f96:	bf00      	nop
  }

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000000 	.word	0x20000000
 8004fa8:	165e9f81 	.word	0x165e9f81

08004fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e041      	b.n	8005042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fc fda4 	bl	8001b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f000 fe44 	bl	8005c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b01      	cmp	r3, #1
 800505e:	d001      	beq.n	8005064 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e046      	b.n	80050f2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a23      	ldr	r2, [pc, #140]	; (8005100 <HAL_TIM_Base_Start+0xb4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d022      	beq.n	80050bc <HAL_TIM_Base_Start+0x70>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507e:	d01d      	beq.n	80050bc <HAL_TIM_Base_Start+0x70>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1f      	ldr	r2, [pc, #124]	; (8005104 <HAL_TIM_Base_Start+0xb8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d018      	beq.n	80050bc <HAL_TIM_Base_Start+0x70>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <HAL_TIM_Base_Start+0xbc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <HAL_TIM_Base_Start+0x70>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1c      	ldr	r2, [pc, #112]	; (800510c <HAL_TIM_Base_Start+0xc0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00e      	beq.n	80050bc <HAL_TIM_Base_Start+0x70>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1b      	ldr	r2, [pc, #108]	; (8005110 <HAL_TIM_Base_Start+0xc4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d009      	beq.n	80050bc <HAL_TIM_Base_Start+0x70>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a19      	ldr	r2, [pc, #100]	; (8005114 <HAL_TIM_Base_Start+0xc8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <HAL_TIM_Base_Start+0x70>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a18      	ldr	r2, [pc, #96]	; (8005118 <HAL_TIM_Base_Start+0xcc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d111      	bne.n	80050e0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b06      	cmp	r3, #6
 80050cc:	d010      	beq.n	80050f0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f042 0201 	orr.w	r2, r2, #1
 80050dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050de:	e007      	b.n	80050f0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0201 	orr.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40010000 	.word	0x40010000
 8005104:	40000400 	.word	0x40000400
 8005108:	40000800 	.word	0x40000800
 800510c:	40000c00 	.word	0x40000c00
 8005110:	40010400 	.word	0x40010400
 8005114:	40014000 	.word	0x40014000
 8005118:	40001800 	.word	0x40001800

0800511c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	d001      	beq.n	8005134 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e04e      	b.n	80051d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a23      	ldr	r2, [pc, #140]	; (80051e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d022      	beq.n	800519c <HAL_TIM_Base_Start_IT+0x80>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515e:	d01d      	beq.n	800519c <HAL_TIM_Base_Start_IT+0x80>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1f      	ldr	r2, [pc, #124]	; (80051e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d018      	beq.n	800519c <HAL_TIM_Base_Start_IT+0x80>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1e      	ldr	r2, [pc, #120]	; (80051e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d013      	beq.n	800519c <HAL_TIM_Base_Start_IT+0x80>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1c      	ldr	r2, [pc, #112]	; (80051ec <HAL_TIM_Base_Start_IT+0xd0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00e      	beq.n	800519c <HAL_TIM_Base_Start_IT+0x80>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1b      	ldr	r2, [pc, #108]	; (80051f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d009      	beq.n	800519c <HAL_TIM_Base_Start_IT+0x80>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a19      	ldr	r2, [pc, #100]	; (80051f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d004      	beq.n	800519c <HAL_TIM_Base_Start_IT+0x80>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a18      	ldr	r2, [pc, #96]	; (80051f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d111      	bne.n	80051c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b06      	cmp	r3, #6
 80051ac:	d010      	beq.n	80051d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0201 	orr.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051be:	e007      	b.n	80051d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40000400 	.word	0x40000400
 80051e8:	40000800 	.word	0x40000800
 80051ec:	40000c00 	.word	0x40000c00
 80051f0:	40010400 	.word	0x40010400
 80051f4:	40014000 	.word	0x40014000
 80051f8:	40001800 	.word	0x40001800

080051fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0201 	bic.w	r2, r2, #1
 8005212:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6a1a      	ldr	r2, [r3, #32]
 800521a:	f241 1311 	movw	r3, #4369	; 0x1111
 800521e:	4013      	ands	r3, r2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10f      	bne.n	8005244 <HAL_TIM_Base_Stop_IT+0x48>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6a1a      	ldr	r2, [r3, #32]
 800522a:	f240 4344 	movw	r3, #1092	; 0x444
 800522e:	4013      	ands	r3, r2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d107      	bne.n	8005244 <HAL_TIM_Base_Stop_IT+0x48>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0201 	bic.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b082      	sub	sp, #8
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e041      	b.n	80052f0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d106      	bne.n	8005286 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f839 	bl	80052f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2202      	movs	r2, #2
 800528a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	3304      	adds	r3, #4
 8005296:	4619      	mov	r1, r3
 8005298:	4610      	mov	r0, r2
 800529a:	f000 fced 	bl	8005c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d109      	bne.n	8005330 <HAL_TIM_PWM_Start+0x24>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	bf14      	ite	ne
 8005328:	2301      	movne	r3, #1
 800532a:	2300      	moveq	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	e022      	b.n	8005376 <HAL_TIM_PWM_Start+0x6a>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2b04      	cmp	r3, #4
 8005334:	d109      	bne.n	800534a <HAL_TIM_PWM_Start+0x3e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b01      	cmp	r3, #1
 8005340:	bf14      	ite	ne
 8005342:	2301      	movne	r3, #1
 8005344:	2300      	moveq	r3, #0
 8005346:	b2db      	uxtb	r3, r3
 8005348:	e015      	b.n	8005376 <HAL_TIM_PWM_Start+0x6a>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b08      	cmp	r3, #8
 800534e:	d109      	bne.n	8005364 <HAL_TIM_PWM_Start+0x58>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b01      	cmp	r3, #1
 800535a:	bf14      	ite	ne
 800535c:	2301      	movne	r3, #1
 800535e:	2300      	moveq	r3, #0
 8005360:	b2db      	uxtb	r3, r3
 8005362:	e008      	b.n	8005376 <HAL_TIM_PWM_Start+0x6a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b01      	cmp	r3, #1
 800536e:	bf14      	ite	ne
 8005370:	2301      	movne	r3, #1
 8005372:	2300      	moveq	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e07c      	b.n	8005478 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d104      	bne.n	800538e <HAL_TIM_PWM_Start+0x82>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800538c:	e013      	b.n	80053b6 <HAL_TIM_PWM_Start+0xaa>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b04      	cmp	r3, #4
 8005392:	d104      	bne.n	800539e <HAL_TIM_PWM_Start+0x92>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800539c:	e00b      	b.n	80053b6 <HAL_TIM_PWM_Start+0xaa>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d104      	bne.n	80053ae <HAL_TIM_PWM_Start+0xa2>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ac:	e003      	b.n	80053b6 <HAL_TIM_PWM_Start+0xaa>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2201      	movs	r2, #1
 80053bc:	6839      	ldr	r1, [r7, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 ff44 	bl	800624c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a2d      	ldr	r2, [pc, #180]	; (8005480 <HAL_TIM_PWM_Start+0x174>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_TIM_PWM_Start+0xcc>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a2c      	ldr	r2, [pc, #176]	; (8005484 <HAL_TIM_PWM_Start+0x178>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d101      	bne.n	80053dc <HAL_TIM_PWM_Start+0xd0>
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <HAL_TIM_PWM_Start+0xd2>
 80053dc:	2300      	movs	r3, #0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a22      	ldr	r2, [pc, #136]	; (8005480 <HAL_TIM_PWM_Start+0x174>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d022      	beq.n	8005442 <HAL_TIM_PWM_Start+0x136>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005404:	d01d      	beq.n	8005442 <HAL_TIM_PWM_Start+0x136>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a1f      	ldr	r2, [pc, #124]	; (8005488 <HAL_TIM_PWM_Start+0x17c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d018      	beq.n	8005442 <HAL_TIM_PWM_Start+0x136>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a1d      	ldr	r2, [pc, #116]	; (800548c <HAL_TIM_PWM_Start+0x180>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d013      	beq.n	8005442 <HAL_TIM_PWM_Start+0x136>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a1c      	ldr	r2, [pc, #112]	; (8005490 <HAL_TIM_PWM_Start+0x184>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00e      	beq.n	8005442 <HAL_TIM_PWM_Start+0x136>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a16      	ldr	r2, [pc, #88]	; (8005484 <HAL_TIM_PWM_Start+0x178>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d009      	beq.n	8005442 <HAL_TIM_PWM_Start+0x136>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a18      	ldr	r2, [pc, #96]	; (8005494 <HAL_TIM_PWM_Start+0x188>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d004      	beq.n	8005442 <HAL_TIM_PWM_Start+0x136>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a16      	ldr	r2, [pc, #88]	; (8005498 <HAL_TIM_PWM_Start+0x18c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d111      	bne.n	8005466 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b06      	cmp	r3, #6
 8005452:	d010      	beq.n	8005476 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005464:	e007      	b.n	8005476 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0201 	orr.w	r2, r2, #1
 8005474:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	40010000 	.word	0x40010000
 8005484:	40010400 	.word	0x40010400
 8005488:	40000400 	.word	0x40000400
 800548c:	40000800 	.word	0x40000800
 8005490:	40000c00 	.word	0x40000c00
 8005494:	40014000 	.word	0x40014000
 8005498:	40001800 	.word	0x40001800

0800549c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e097      	b.n	80055e0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d106      	bne.n	80054ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7fc fbc9 	bl	8001c5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054e0:	f023 0307 	bic.w	r3, r3, #7
 80054e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3304      	adds	r3, #4
 80054ee:	4619      	mov	r1, r3
 80054f0:	4610      	mov	r0, r2
 80054f2:	f000 fbc1 	bl	8005c78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551e:	f023 0303 	bic.w	r3, r3, #3
 8005522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	021b      	lsls	r3, r3, #8
 800552e:	4313      	orrs	r3, r2
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4313      	orrs	r3, r2
 8005534:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800553c:	f023 030c 	bic.w	r3, r3, #12
 8005540:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005548:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800554c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	021b      	lsls	r3, r3, #8
 8005558:	4313      	orrs	r3, r2
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	011a      	lsls	r2, r3, #4
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	031b      	lsls	r3, r3, #12
 800556c:	4313      	orrs	r3, r2
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800557a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005582:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	4313      	orrs	r3, r2
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005600:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005608:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005610:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d110      	bne.n	800563a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d102      	bne.n	8005624 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800561e:	7b7b      	ldrb	r3, [r7, #13]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d001      	beq.n	8005628 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e069      	b.n	80056fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005638:	e031      	b.n	800569e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b04      	cmp	r3, #4
 800563e:	d110      	bne.n	8005662 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005640:	7bbb      	ldrb	r3, [r7, #14]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d102      	bne.n	800564c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005646:	7b3b      	ldrb	r3, [r7, #12]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d001      	beq.n	8005650 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e055      	b.n	80056fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005660:	e01d      	b.n	800569e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d108      	bne.n	800567a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005668:	7bbb      	ldrb	r3, [r7, #14]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d105      	bne.n	800567a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800566e:	7b7b      	ldrb	r3, [r7, #13]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d102      	bne.n	800567a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005674:	7b3b      	ldrb	r3, [r7, #12]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d001      	beq.n	800567e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e03e      	b.n	80056fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2202      	movs	r2, #2
 8005682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2202      	movs	r2, #2
 800568a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2202      	movs	r2, #2
 8005692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2202      	movs	r2, #2
 800569a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <HAL_TIM_Encoder_Start+0xc4>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d008      	beq.n	80056bc <HAL_TIM_Encoder_Start+0xd4>
 80056aa:	e00f      	b.n	80056cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2201      	movs	r2, #1
 80056b2:	2100      	movs	r1, #0
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fdc9 	bl	800624c <TIM_CCxChannelCmd>
      break;
 80056ba:	e016      	b.n	80056ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2201      	movs	r2, #1
 80056c2:	2104      	movs	r1, #4
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fdc1 	bl	800624c <TIM_CCxChannelCmd>
      break;
 80056ca:	e00e      	b.n	80056ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2201      	movs	r2, #1
 80056d2:	2100      	movs	r1, #0
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fdb9 	bl	800624c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2201      	movs	r2, #1
 80056e0:	2104      	movs	r1, #4
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fdb2 	bl	800624c <TIM_CCxChannelCmd>
      break;
 80056e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0201 	orr.w	r2, r2, #1
 80056f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b02      	cmp	r3, #2
 8005718:	d122      	bne.n	8005760 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b02      	cmp	r3, #2
 8005726:	d11b      	bne.n	8005760 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0202 	mvn.w	r2, #2
 8005730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fa77 	bl	8005c3a <HAL_TIM_IC_CaptureCallback>
 800574c:	e005      	b.n	800575a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fa69 	bl	8005c26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fa7a 	bl	8005c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0304 	and.w	r3, r3, #4
 800576a:	2b04      	cmp	r3, #4
 800576c:	d122      	bne.n	80057b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b04      	cmp	r3, #4
 800577a:	d11b      	bne.n	80057b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0204 	mvn.w	r2, #4
 8005784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2202      	movs	r2, #2
 800578a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fa4d 	bl	8005c3a <HAL_TIM_IC_CaptureCallback>
 80057a0:	e005      	b.n	80057ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fa3f 	bl	8005c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fa50 	bl	8005c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b08      	cmp	r3, #8
 80057c0:	d122      	bne.n	8005808 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0308 	and.w	r3, r3, #8
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d11b      	bne.n	8005808 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0208 	mvn.w	r2, #8
 80057d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2204      	movs	r2, #4
 80057de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fa23 	bl	8005c3a <HAL_TIM_IC_CaptureCallback>
 80057f4:	e005      	b.n	8005802 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fa15 	bl	8005c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fa26 	bl	8005c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	2b10      	cmp	r3, #16
 8005814:	d122      	bne.n	800585c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b10      	cmp	r3, #16
 8005822:	d11b      	bne.n	800585c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0210 	mvn.w	r2, #16
 800582c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2208      	movs	r2, #8
 8005832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f9f9 	bl	8005c3a <HAL_TIM_IC_CaptureCallback>
 8005848:	e005      	b.n	8005856 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f9eb 	bl	8005c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f9fc 	bl	8005c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b01      	cmp	r3, #1
 8005868:	d10e      	bne.n	8005888 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b01      	cmp	r3, #1
 8005876:	d107      	bne.n	8005888 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0201 	mvn.w	r2, #1
 8005880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f002 f8c4 	bl	8007a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005892:	2b80      	cmp	r3, #128	; 0x80
 8005894:	d10e      	bne.n	80058b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a0:	2b80      	cmp	r3, #128	; 0x80
 80058a2:	d107      	bne.n	80058b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fd78 	bl	80063a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058be:	2b40      	cmp	r3, #64	; 0x40
 80058c0:	d10e      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058cc:	2b40      	cmp	r3, #64	; 0x40
 80058ce:	d107      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f9c1 	bl	8005c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b20      	cmp	r3, #32
 80058ec:	d10e      	bne.n	800590c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b20      	cmp	r3, #32
 80058fa:	d107      	bne.n	800590c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0220 	mvn.w	r2, #32
 8005904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fd42 	bl	8006390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800592e:	2302      	movs	r3, #2
 8005930:	e0ae      	b.n	8005a90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b0c      	cmp	r3, #12
 800593e:	f200 809f 	bhi.w	8005a80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005942:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	0800597d 	.word	0x0800597d
 800594c:	08005a81 	.word	0x08005a81
 8005950:	08005a81 	.word	0x08005a81
 8005954:	08005a81 	.word	0x08005a81
 8005958:	080059bd 	.word	0x080059bd
 800595c:	08005a81 	.word	0x08005a81
 8005960:	08005a81 	.word	0x08005a81
 8005964:	08005a81 	.word	0x08005a81
 8005968:	080059ff 	.word	0x080059ff
 800596c:	08005a81 	.word	0x08005a81
 8005970:	08005a81 	.word	0x08005a81
 8005974:	08005a81 	.word	0x08005a81
 8005978:	08005a3f 	.word	0x08005a3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fa18 	bl	8005db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699a      	ldr	r2, [r3, #24]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0208 	orr.w	r2, r2, #8
 8005996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0204 	bic.w	r2, r2, #4
 80059a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6999      	ldr	r1, [r3, #24]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	691a      	ldr	r2, [r3, #16]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	619a      	str	r2, [r3, #24]
      break;
 80059ba:	e064      	b.n	8005a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fa68 	bl	8005e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6999      	ldr	r1, [r3, #24]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	021a      	lsls	r2, r3, #8
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	619a      	str	r2, [r3, #24]
      break;
 80059fc:	e043      	b.n	8005a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 fabd 	bl	8005f84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69da      	ldr	r2, [r3, #28]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0208 	orr.w	r2, r2, #8
 8005a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0204 	bic.w	r2, r2, #4
 8005a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69d9      	ldr	r1, [r3, #28]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	61da      	str	r2, [r3, #28]
      break;
 8005a3c:	e023      	b.n	8005a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fb11 	bl	800606c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69da      	ldr	r2, [r3, #28]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69da      	ldr	r2, [r3, #28]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69d9      	ldr	r1, [r3, #28]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	021a      	lsls	r2, r3, #8
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	61da      	str	r2, [r3, #28]
      break;
 8005a7e:	e002      	b.n	8005a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	75fb      	strb	r3, [r7, #23]
      break;
 8005a84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d101      	bne.n	8005ab4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	e0b4      	b.n	8005c1e <HAL_TIM_ConfigClockSource+0x186>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aec:	d03e      	beq.n	8005b6c <HAL_TIM_ConfigClockSource+0xd4>
 8005aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af2:	f200 8087 	bhi.w	8005c04 <HAL_TIM_ConfigClockSource+0x16c>
 8005af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005afa:	f000 8086 	beq.w	8005c0a <HAL_TIM_ConfigClockSource+0x172>
 8005afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b02:	d87f      	bhi.n	8005c04 <HAL_TIM_ConfigClockSource+0x16c>
 8005b04:	2b70      	cmp	r3, #112	; 0x70
 8005b06:	d01a      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0xa6>
 8005b08:	2b70      	cmp	r3, #112	; 0x70
 8005b0a:	d87b      	bhi.n	8005c04 <HAL_TIM_ConfigClockSource+0x16c>
 8005b0c:	2b60      	cmp	r3, #96	; 0x60
 8005b0e:	d050      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0x11a>
 8005b10:	2b60      	cmp	r3, #96	; 0x60
 8005b12:	d877      	bhi.n	8005c04 <HAL_TIM_ConfigClockSource+0x16c>
 8005b14:	2b50      	cmp	r3, #80	; 0x50
 8005b16:	d03c      	beq.n	8005b92 <HAL_TIM_ConfigClockSource+0xfa>
 8005b18:	2b50      	cmp	r3, #80	; 0x50
 8005b1a:	d873      	bhi.n	8005c04 <HAL_TIM_ConfigClockSource+0x16c>
 8005b1c:	2b40      	cmp	r3, #64	; 0x40
 8005b1e:	d058      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0x13a>
 8005b20:	2b40      	cmp	r3, #64	; 0x40
 8005b22:	d86f      	bhi.n	8005c04 <HAL_TIM_ConfigClockSource+0x16c>
 8005b24:	2b30      	cmp	r3, #48	; 0x30
 8005b26:	d064      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8005b28:	2b30      	cmp	r3, #48	; 0x30
 8005b2a:	d86b      	bhi.n	8005c04 <HAL_TIM_ConfigClockSource+0x16c>
 8005b2c:	2b20      	cmp	r3, #32
 8005b2e:	d060      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d867      	bhi.n	8005c04 <HAL_TIM_ConfigClockSource+0x16c>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d05c      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8005b38:	2b10      	cmp	r3, #16
 8005b3a:	d05a      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8005b3c:	e062      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6818      	ldr	r0, [r3, #0]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	6899      	ldr	r1, [r3, #8]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f000 fb5d 	bl	800620c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	609a      	str	r2, [r3, #8]
      break;
 8005b6a:	e04f      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	6899      	ldr	r1, [r3, #8]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f000 fb46 	bl	800620c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b8e:	609a      	str	r2, [r3, #8]
      break;
 8005b90:	e03c      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	6859      	ldr	r1, [r3, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f000 faba 	bl	8006118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2150      	movs	r1, #80	; 0x50
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fb13 	bl	80061d6 <TIM_ITRx_SetConfig>
      break;
 8005bb0:	e02c      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	6859      	ldr	r1, [r3, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f000 fad9 	bl	8006176 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2160      	movs	r1, #96	; 0x60
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fb03 	bl	80061d6 <TIM_ITRx_SetConfig>
      break;
 8005bd0:	e01c      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6859      	ldr	r1, [r3, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	461a      	mov	r2, r3
 8005be0:	f000 fa9a 	bl	8006118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2140      	movs	r1, #64	; 0x40
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 faf3 	bl	80061d6 <TIM_ITRx_SetConfig>
      break;
 8005bf0:	e00c      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	f000 faea 	bl	80061d6 <TIM_ITRx_SetConfig>
      break;
 8005c02:	e003      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	73fb      	strb	r3, [r7, #15]
      break;
 8005c08:	e000      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
	...

08005c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a40      	ldr	r2, [pc, #256]	; (8005d8c <TIM_Base_SetConfig+0x114>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d013      	beq.n	8005cb8 <TIM_Base_SetConfig+0x40>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c96:	d00f      	beq.n	8005cb8 <TIM_Base_SetConfig+0x40>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a3d      	ldr	r2, [pc, #244]	; (8005d90 <TIM_Base_SetConfig+0x118>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00b      	beq.n	8005cb8 <TIM_Base_SetConfig+0x40>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a3c      	ldr	r2, [pc, #240]	; (8005d94 <TIM_Base_SetConfig+0x11c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d007      	beq.n	8005cb8 <TIM_Base_SetConfig+0x40>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a3b      	ldr	r2, [pc, #236]	; (8005d98 <TIM_Base_SetConfig+0x120>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d003      	beq.n	8005cb8 <TIM_Base_SetConfig+0x40>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a3a      	ldr	r2, [pc, #232]	; (8005d9c <TIM_Base_SetConfig+0x124>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d108      	bne.n	8005cca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a2f      	ldr	r2, [pc, #188]	; (8005d8c <TIM_Base_SetConfig+0x114>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d02b      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd8:	d027      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a2c      	ldr	r2, [pc, #176]	; (8005d90 <TIM_Base_SetConfig+0x118>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d023      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a2b      	ldr	r2, [pc, #172]	; (8005d94 <TIM_Base_SetConfig+0x11c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d01f      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a2a      	ldr	r2, [pc, #168]	; (8005d98 <TIM_Base_SetConfig+0x120>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d01b      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a29      	ldr	r2, [pc, #164]	; (8005d9c <TIM_Base_SetConfig+0x124>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d017      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a28      	ldr	r2, [pc, #160]	; (8005da0 <TIM_Base_SetConfig+0x128>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d013      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a27      	ldr	r2, [pc, #156]	; (8005da4 <TIM_Base_SetConfig+0x12c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d00f      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a26      	ldr	r2, [pc, #152]	; (8005da8 <TIM_Base_SetConfig+0x130>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d00b      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a25      	ldr	r2, [pc, #148]	; (8005dac <TIM_Base_SetConfig+0x134>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d007      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a24      	ldr	r2, [pc, #144]	; (8005db0 <TIM_Base_SetConfig+0x138>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d003      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a23      	ldr	r2, [pc, #140]	; (8005db4 <TIM_Base_SetConfig+0x13c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d108      	bne.n	8005d3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a0a      	ldr	r2, [pc, #40]	; (8005d8c <TIM_Base_SetConfig+0x114>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_Base_SetConfig+0xf8>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a0c      	ldr	r2, [pc, #48]	; (8005d9c <TIM_Base_SetConfig+0x124>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d103      	bne.n	8005d78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	615a      	str	r2, [r3, #20]
}
 8005d7e:	bf00      	nop
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40010000 	.word	0x40010000
 8005d90:	40000400 	.word	0x40000400
 8005d94:	40000800 	.word	0x40000800
 8005d98:	40000c00 	.word	0x40000c00
 8005d9c:	40010400 	.word	0x40010400
 8005da0:	40014000 	.word	0x40014000
 8005da4:	40014400 	.word	0x40014400
 8005da8:	40014800 	.word	0x40014800
 8005dac:	40001800 	.word	0x40001800
 8005db0:	40001c00 	.word	0x40001c00
 8005db4:	40002000 	.word	0x40002000

08005db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f023 0201 	bic.w	r2, r3, #1
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 0303 	bic.w	r3, r3, #3
 8005dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f023 0302 	bic.w	r3, r3, #2
 8005e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a20      	ldr	r2, [pc, #128]	; (8005e90 <TIM_OC1_SetConfig+0xd8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_OC1_SetConfig+0x64>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a1f      	ldr	r2, [pc, #124]	; (8005e94 <TIM_OC1_SetConfig+0xdc>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d10c      	bne.n	8005e36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f023 0308 	bic.w	r3, r3, #8
 8005e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f023 0304 	bic.w	r3, r3, #4
 8005e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a15      	ldr	r2, [pc, #84]	; (8005e90 <TIM_OC1_SetConfig+0xd8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d003      	beq.n	8005e46 <TIM_OC1_SetConfig+0x8e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a14      	ldr	r2, [pc, #80]	; (8005e94 <TIM_OC1_SetConfig+0xdc>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d111      	bne.n	8005e6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	621a      	str	r2, [r3, #32]
}
 8005e84:	bf00      	nop
 8005e86:	371c      	adds	r7, #28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	40010000 	.word	0x40010000
 8005e94:	40010400 	.word	0x40010400

08005e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	f023 0210 	bic.w	r2, r3, #16
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	021b      	lsls	r3, r3, #8
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f023 0320 	bic.w	r3, r3, #32
 8005ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a22      	ldr	r2, [pc, #136]	; (8005f7c <TIM_OC2_SetConfig+0xe4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <TIM_OC2_SetConfig+0x68>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a21      	ldr	r2, [pc, #132]	; (8005f80 <TIM_OC2_SetConfig+0xe8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d10d      	bne.n	8005f1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a17      	ldr	r2, [pc, #92]	; (8005f7c <TIM_OC2_SetConfig+0xe4>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_OC2_SetConfig+0x94>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a16      	ldr	r2, [pc, #88]	; (8005f80 <TIM_OC2_SetConfig+0xe8>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d113      	bne.n	8005f54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	621a      	str	r2, [r3, #32]
}
 8005f6e:	bf00      	nop
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	40010000 	.word	0x40010000
 8005f80:	40010400 	.word	0x40010400

08005f84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 0303 	bic.w	r3, r3, #3
 8005fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	021b      	lsls	r3, r3, #8
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a21      	ldr	r2, [pc, #132]	; (8006064 <TIM_OC3_SetConfig+0xe0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d003      	beq.n	8005fea <TIM_OC3_SetConfig+0x66>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a20      	ldr	r2, [pc, #128]	; (8006068 <TIM_OC3_SetConfig+0xe4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d10d      	bne.n	8006006 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	021b      	lsls	r3, r3, #8
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a16      	ldr	r2, [pc, #88]	; (8006064 <TIM_OC3_SetConfig+0xe0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d003      	beq.n	8006016 <TIM_OC3_SetConfig+0x92>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a15      	ldr	r2, [pc, #84]	; (8006068 <TIM_OC3_SetConfig+0xe4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d113      	bne.n	800603e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800601c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	4313      	orrs	r3, r2
 8006030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	4313      	orrs	r3, r2
 800603c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	621a      	str	r2, [r3, #32]
}
 8006058:	bf00      	nop
 800605a:	371c      	adds	r7, #28
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	40010000 	.word	0x40010000
 8006068:	40010400 	.word	0x40010400

0800606c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800609a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	021b      	lsls	r3, r3, #8
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	031b      	lsls	r3, r3, #12
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a12      	ldr	r2, [pc, #72]	; (8006110 <TIM_OC4_SetConfig+0xa4>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d003      	beq.n	80060d4 <TIM_OC4_SetConfig+0x68>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a11      	ldr	r2, [pc, #68]	; (8006114 <TIM_OC4_SetConfig+0xa8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d109      	bne.n	80060e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	019b      	lsls	r3, r3, #6
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	621a      	str	r2, [r3, #32]
}
 8006102:	bf00      	nop
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	40010000 	.word	0x40010000
 8006114:	40010400 	.word	0x40010400

08006118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	f023 0201 	bic.w	r2, r3, #1
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f023 030a 	bic.w	r3, r3, #10
 8006154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4313      	orrs	r3, r2
 800615c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	621a      	str	r2, [r3, #32]
}
 800616a:	bf00      	nop
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006176:	b480      	push	{r7}
 8006178:	b087      	sub	sp, #28
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	f023 0210 	bic.w	r2, r3, #16
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	031b      	lsls	r3, r3, #12
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	621a      	str	r2, [r3, #32]
}
 80061ca:	bf00      	nop
 80061cc:	371c      	adds	r7, #28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b085      	sub	sp, #20
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	f043 0307 	orr.w	r3, r3, #7
 80061f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	609a      	str	r2, [r3, #8]
}
 8006200:	bf00      	nop
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	021a      	lsls	r2, r3, #8
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	431a      	orrs	r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4313      	orrs	r3, r2
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	609a      	str	r2, [r3, #8]
}
 8006240:	bf00      	nop
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f003 031f 	and.w	r3, r3, #31
 800625e:	2201      	movs	r2, #1
 8006260:	fa02 f303 	lsl.w	r3, r2, r3
 8006264:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6a1a      	ldr	r2, [r3, #32]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	43db      	mvns	r3, r3
 800626e:	401a      	ands	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a1a      	ldr	r2, [r3, #32]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	fa01 f303 	lsl.w	r3, r1, r3
 8006284:	431a      	orrs	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	621a      	str	r2, [r3, #32]
}
 800628a:	bf00      	nop
 800628c:	371c      	adds	r7, #28
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
	...

08006298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e05a      	b.n	8006366 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a21      	ldr	r2, [pc, #132]	; (8006374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d022      	beq.n	800633a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062fc:	d01d      	beq.n	800633a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a1d      	ldr	r2, [pc, #116]	; (8006378 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d018      	beq.n	800633a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a1b      	ldr	r2, [pc, #108]	; (800637c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d013      	beq.n	800633a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a1a      	ldr	r2, [pc, #104]	; (8006380 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d00e      	beq.n	800633a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a18      	ldr	r2, [pc, #96]	; (8006384 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d009      	beq.n	800633a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a17      	ldr	r2, [pc, #92]	; (8006388 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d004      	beq.n	800633a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a15      	ldr	r2, [pc, #84]	; (800638c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d10c      	bne.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	4313      	orrs	r3, r2
 800634a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	40010000 	.word	0x40010000
 8006378:	40000400 	.word	0x40000400
 800637c:	40000800 	.word	0x40000800
 8006380:	40000c00 	.word	0x40000c00
 8006384:	40010400 	.word	0x40010400
 8006388:	40014000 	.word	0x40014000
 800638c:	40001800 	.word	0x40001800

08006390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e03f      	b.n	800644a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7fb fd38 	bl	8001e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2224      	movs	r2, #36	; 0x24
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f829 	bl	8006454 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006410:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	695a      	ldr	r2, [r3, #20]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006420:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006430:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
	...

08006454 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006458:	b0c0      	sub	sp, #256	; 0x100
 800645a:	af00      	add	r7, sp, #0
 800645c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800646c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006470:	68d9      	ldr	r1, [r3, #12]
 8006472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	ea40 0301 	orr.w	r3, r0, r1
 800647c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800647e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	431a      	orrs	r2, r3
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	431a      	orrs	r2, r3
 8006494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064ac:	f021 010c 	bic.w	r1, r1, #12
 80064b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064ba:	430b      	orrs	r3, r1
 80064bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ce:	6999      	ldr	r1, [r3, #24]
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	ea40 0301 	orr.w	r3, r0, r1
 80064da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b8f      	ldr	r3, [pc, #572]	; (8006720 <UART_SetConfig+0x2cc>)
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d005      	beq.n	80064f4 <UART_SetConfig+0xa0>
 80064e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	4b8d      	ldr	r3, [pc, #564]	; (8006724 <UART_SetConfig+0x2d0>)
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d104      	bne.n	80064fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064f4:	f7fd ff82 	bl	80043fc <HAL_RCC_GetPCLK2Freq>
 80064f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80064fc:	e003      	b.n	8006506 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064fe:	f7fd ff69 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 8006502:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006510:	f040 810c 	bne.w	800672c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006518:	2200      	movs	r2, #0
 800651a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800651e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006522:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006526:	4622      	mov	r2, r4
 8006528:	462b      	mov	r3, r5
 800652a:	1891      	adds	r1, r2, r2
 800652c:	65b9      	str	r1, [r7, #88]	; 0x58
 800652e:	415b      	adcs	r3, r3
 8006530:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006532:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006536:	4621      	mov	r1, r4
 8006538:	eb12 0801 	adds.w	r8, r2, r1
 800653c:	4629      	mov	r1, r5
 800653e:	eb43 0901 	adc.w	r9, r3, r1
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	f04f 0300 	mov.w	r3, #0
 800654a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800654e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006552:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006556:	4690      	mov	r8, r2
 8006558:	4699      	mov	r9, r3
 800655a:	4623      	mov	r3, r4
 800655c:	eb18 0303 	adds.w	r3, r8, r3
 8006560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006564:	462b      	mov	r3, r5
 8006566:	eb49 0303 	adc.w	r3, r9, r3
 800656a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800656e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800657a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800657e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006582:	460b      	mov	r3, r1
 8006584:	18db      	adds	r3, r3, r3
 8006586:	653b      	str	r3, [r7, #80]	; 0x50
 8006588:	4613      	mov	r3, r2
 800658a:	eb42 0303 	adc.w	r3, r2, r3
 800658e:	657b      	str	r3, [r7, #84]	; 0x54
 8006590:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006594:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006598:	f7fa fb06 	bl	8000ba8 <__aeabi_uldivmod>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4b61      	ldr	r3, [pc, #388]	; (8006728 <UART_SetConfig+0x2d4>)
 80065a2:	fba3 2302 	umull	r2, r3, r3, r2
 80065a6:	095b      	lsrs	r3, r3, #5
 80065a8:	011c      	lsls	r4, r3, #4
 80065aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80065b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065bc:	4642      	mov	r2, r8
 80065be:	464b      	mov	r3, r9
 80065c0:	1891      	adds	r1, r2, r2
 80065c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80065c4:	415b      	adcs	r3, r3
 80065c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065cc:	4641      	mov	r1, r8
 80065ce:	eb12 0a01 	adds.w	sl, r2, r1
 80065d2:	4649      	mov	r1, r9
 80065d4:	eb43 0b01 	adc.w	fp, r3, r1
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065ec:	4692      	mov	sl, r2
 80065ee:	469b      	mov	fp, r3
 80065f0:	4643      	mov	r3, r8
 80065f2:	eb1a 0303 	adds.w	r3, sl, r3
 80065f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065fa:	464b      	mov	r3, r9
 80065fc:	eb4b 0303 	adc.w	r3, fp, r3
 8006600:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006610:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006614:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006618:	460b      	mov	r3, r1
 800661a:	18db      	adds	r3, r3, r3
 800661c:	643b      	str	r3, [r7, #64]	; 0x40
 800661e:	4613      	mov	r3, r2
 8006620:	eb42 0303 	adc.w	r3, r2, r3
 8006624:	647b      	str	r3, [r7, #68]	; 0x44
 8006626:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800662a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800662e:	f7fa fabb 	bl	8000ba8 <__aeabi_uldivmod>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4611      	mov	r1, r2
 8006638:	4b3b      	ldr	r3, [pc, #236]	; (8006728 <UART_SetConfig+0x2d4>)
 800663a:	fba3 2301 	umull	r2, r3, r3, r1
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	2264      	movs	r2, #100	; 0x64
 8006642:	fb02 f303 	mul.w	r3, r2, r3
 8006646:	1acb      	subs	r3, r1, r3
 8006648:	00db      	lsls	r3, r3, #3
 800664a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800664e:	4b36      	ldr	r3, [pc, #216]	; (8006728 <UART_SetConfig+0x2d4>)
 8006650:	fba3 2302 	umull	r2, r3, r3, r2
 8006654:	095b      	lsrs	r3, r3, #5
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800665c:	441c      	add	r4, r3
 800665e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006662:	2200      	movs	r2, #0
 8006664:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006668:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800666c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006670:	4642      	mov	r2, r8
 8006672:	464b      	mov	r3, r9
 8006674:	1891      	adds	r1, r2, r2
 8006676:	63b9      	str	r1, [r7, #56]	; 0x38
 8006678:	415b      	adcs	r3, r3
 800667a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800667c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006680:	4641      	mov	r1, r8
 8006682:	1851      	adds	r1, r2, r1
 8006684:	6339      	str	r1, [r7, #48]	; 0x30
 8006686:	4649      	mov	r1, r9
 8006688:	414b      	adcs	r3, r1
 800668a:	637b      	str	r3, [r7, #52]	; 0x34
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	f04f 0300 	mov.w	r3, #0
 8006694:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006698:	4659      	mov	r1, fp
 800669a:	00cb      	lsls	r3, r1, #3
 800669c:	4651      	mov	r1, sl
 800669e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066a2:	4651      	mov	r1, sl
 80066a4:	00ca      	lsls	r2, r1, #3
 80066a6:	4610      	mov	r0, r2
 80066a8:	4619      	mov	r1, r3
 80066aa:	4603      	mov	r3, r0
 80066ac:	4642      	mov	r2, r8
 80066ae:	189b      	adds	r3, r3, r2
 80066b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066b4:	464b      	mov	r3, r9
 80066b6:	460a      	mov	r2, r1
 80066b8:	eb42 0303 	adc.w	r3, r2, r3
 80066bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80066d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80066d4:	460b      	mov	r3, r1
 80066d6:	18db      	adds	r3, r3, r3
 80066d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066da:	4613      	mov	r3, r2
 80066dc:	eb42 0303 	adc.w	r3, r2, r3
 80066e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80066ea:	f7fa fa5d 	bl	8000ba8 <__aeabi_uldivmod>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	4b0d      	ldr	r3, [pc, #52]	; (8006728 <UART_SetConfig+0x2d4>)
 80066f4:	fba3 1302 	umull	r1, r3, r3, r2
 80066f8:	095b      	lsrs	r3, r3, #5
 80066fa:	2164      	movs	r1, #100	; 0x64
 80066fc:	fb01 f303 	mul.w	r3, r1, r3
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	3332      	adds	r3, #50	; 0x32
 8006706:	4a08      	ldr	r2, [pc, #32]	; (8006728 <UART_SetConfig+0x2d4>)
 8006708:	fba2 2303 	umull	r2, r3, r2, r3
 800670c:	095b      	lsrs	r3, r3, #5
 800670e:	f003 0207 	and.w	r2, r3, #7
 8006712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4422      	add	r2, r4
 800671a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800671c:	e106      	b.n	800692c <UART_SetConfig+0x4d8>
 800671e:	bf00      	nop
 8006720:	40011000 	.word	0x40011000
 8006724:	40011400 	.word	0x40011400
 8006728:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800672c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006730:	2200      	movs	r2, #0
 8006732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006736:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800673a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800673e:	4642      	mov	r2, r8
 8006740:	464b      	mov	r3, r9
 8006742:	1891      	adds	r1, r2, r2
 8006744:	6239      	str	r1, [r7, #32]
 8006746:	415b      	adcs	r3, r3
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
 800674a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800674e:	4641      	mov	r1, r8
 8006750:	1854      	adds	r4, r2, r1
 8006752:	4649      	mov	r1, r9
 8006754:	eb43 0501 	adc.w	r5, r3, r1
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	f04f 0300 	mov.w	r3, #0
 8006760:	00eb      	lsls	r3, r5, #3
 8006762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006766:	00e2      	lsls	r2, r4, #3
 8006768:	4614      	mov	r4, r2
 800676a:	461d      	mov	r5, r3
 800676c:	4643      	mov	r3, r8
 800676e:	18e3      	adds	r3, r4, r3
 8006770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006774:	464b      	mov	r3, r9
 8006776:	eb45 0303 	adc.w	r3, r5, r3
 800677a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800677e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800678a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800678e:	f04f 0200 	mov.w	r2, #0
 8006792:	f04f 0300 	mov.w	r3, #0
 8006796:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800679a:	4629      	mov	r1, r5
 800679c:	008b      	lsls	r3, r1, #2
 800679e:	4621      	mov	r1, r4
 80067a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067a4:	4621      	mov	r1, r4
 80067a6:	008a      	lsls	r2, r1, #2
 80067a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067ac:	f7fa f9fc 	bl	8000ba8 <__aeabi_uldivmod>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	4b60      	ldr	r3, [pc, #384]	; (8006938 <UART_SetConfig+0x4e4>)
 80067b6:	fba3 2302 	umull	r2, r3, r3, r2
 80067ba:	095b      	lsrs	r3, r3, #5
 80067bc:	011c      	lsls	r4, r3, #4
 80067be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80067d0:	4642      	mov	r2, r8
 80067d2:	464b      	mov	r3, r9
 80067d4:	1891      	adds	r1, r2, r2
 80067d6:	61b9      	str	r1, [r7, #24]
 80067d8:	415b      	adcs	r3, r3
 80067da:	61fb      	str	r3, [r7, #28]
 80067dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067e0:	4641      	mov	r1, r8
 80067e2:	1851      	adds	r1, r2, r1
 80067e4:	6139      	str	r1, [r7, #16]
 80067e6:	4649      	mov	r1, r9
 80067e8:	414b      	adcs	r3, r1
 80067ea:	617b      	str	r3, [r7, #20]
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	f04f 0300 	mov.w	r3, #0
 80067f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067f8:	4659      	mov	r1, fp
 80067fa:	00cb      	lsls	r3, r1, #3
 80067fc:	4651      	mov	r1, sl
 80067fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006802:	4651      	mov	r1, sl
 8006804:	00ca      	lsls	r2, r1, #3
 8006806:	4610      	mov	r0, r2
 8006808:	4619      	mov	r1, r3
 800680a:	4603      	mov	r3, r0
 800680c:	4642      	mov	r2, r8
 800680e:	189b      	adds	r3, r3, r2
 8006810:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006814:	464b      	mov	r3, r9
 8006816:	460a      	mov	r2, r1
 8006818:	eb42 0303 	adc.w	r3, r2, r3
 800681c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	67bb      	str	r3, [r7, #120]	; 0x78
 800682a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006838:	4649      	mov	r1, r9
 800683a:	008b      	lsls	r3, r1, #2
 800683c:	4641      	mov	r1, r8
 800683e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006842:	4641      	mov	r1, r8
 8006844:	008a      	lsls	r2, r1, #2
 8006846:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800684a:	f7fa f9ad 	bl	8000ba8 <__aeabi_uldivmod>
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	4611      	mov	r1, r2
 8006854:	4b38      	ldr	r3, [pc, #224]	; (8006938 <UART_SetConfig+0x4e4>)
 8006856:	fba3 2301 	umull	r2, r3, r3, r1
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	2264      	movs	r2, #100	; 0x64
 800685e:	fb02 f303 	mul.w	r3, r2, r3
 8006862:	1acb      	subs	r3, r1, r3
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	3332      	adds	r3, #50	; 0x32
 8006868:	4a33      	ldr	r2, [pc, #204]	; (8006938 <UART_SetConfig+0x4e4>)
 800686a:	fba2 2303 	umull	r2, r3, r2, r3
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006874:	441c      	add	r4, r3
 8006876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800687a:	2200      	movs	r2, #0
 800687c:	673b      	str	r3, [r7, #112]	; 0x70
 800687e:	677a      	str	r2, [r7, #116]	; 0x74
 8006880:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006884:	4642      	mov	r2, r8
 8006886:	464b      	mov	r3, r9
 8006888:	1891      	adds	r1, r2, r2
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	415b      	adcs	r3, r3
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006894:	4641      	mov	r1, r8
 8006896:	1851      	adds	r1, r2, r1
 8006898:	6039      	str	r1, [r7, #0]
 800689a:	4649      	mov	r1, r9
 800689c:	414b      	adcs	r3, r1
 800689e:	607b      	str	r3, [r7, #4]
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068ac:	4659      	mov	r1, fp
 80068ae:	00cb      	lsls	r3, r1, #3
 80068b0:	4651      	mov	r1, sl
 80068b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068b6:	4651      	mov	r1, sl
 80068b8:	00ca      	lsls	r2, r1, #3
 80068ba:	4610      	mov	r0, r2
 80068bc:	4619      	mov	r1, r3
 80068be:	4603      	mov	r3, r0
 80068c0:	4642      	mov	r2, r8
 80068c2:	189b      	adds	r3, r3, r2
 80068c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80068c6:	464b      	mov	r3, r9
 80068c8:	460a      	mov	r2, r1
 80068ca:	eb42 0303 	adc.w	r3, r2, r3
 80068ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	663b      	str	r3, [r7, #96]	; 0x60
 80068da:	667a      	str	r2, [r7, #100]	; 0x64
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80068e8:	4649      	mov	r1, r9
 80068ea:	008b      	lsls	r3, r1, #2
 80068ec:	4641      	mov	r1, r8
 80068ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068f2:	4641      	mov	r1, r8
 80068f4:	008a      	lsls	r2, r1, #2
 80068f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80068fa:	f7fa f955 	bl	8000ba8 <__aeabi_uldivmod>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4b0d      	ldr	r3, [pc, #52]	; (8006938 <UART_SetConfig+0x4e4>)
 8006904:	fba3 1302 	umull	r1, r3, r3, r2
 8006908:	095b      	lsrs	r3, r3, #5
 800690a:	2164      	movs	r1, #100	; 0x64
 800690c:	fb01 f303 	mul.w	r3, r1, r3
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	3332      	adds	r3, #50	; 0x32
 8006916:	4a08      	ldr	r2, [pc, #32]	; (8006938 <UART_SetConfig+0x4e4>)
 8006918:	fba2 2303 	umull	r2, r3, r2, r3
 800691c:	095b      	lsrs	r3, r3, #5
 800691e:	f003 020f 	and.w	r2, r3, #15
 8006922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4422      	add	r2, r4
 800692a:	609a      	str	r2, [r3, #8]
}
 800692c:	bf00      	nop
 800692e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006932:	46bd      	mov	sp, r7
 8006934:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006938:	51eb851f 	.word	0x51eb851f

0800693c <L3GD20_Init>:
int ss;

volatile int16_t Raw_z = 0;

void L3GD20_Init(void)
{	LED9_ON;LED10_ON;LED11_ON;
 800693c:	b580      	push	{r7, lr}
 800693e:	b08a      	sub	sp, #40	; 0x28
 8006940:	af00      	add	r7, sp, #0
 8006942:	2201      	movs	r2, #1
 8006944:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006948:	48ac      	ldr	r0, [pc, #688]	; (8006bfc <L3GD20_Init+0x2c0>)
 800694a:	f7fd f895 	bl	8003a78 <HAL_GPIO_WritePin>
 800694e:	2201      	movs	r2, #1
 8006950:	2101      	movs	r1, #1
 8006952:	48ab      	ldr	r0, [pc, #684]	; (8006c00 <L3GD20_Init+0x2c4>)
 8006954:	f7fd f890 	bl	8003a78 <HAL_GPIO_WritePin>
 8006958:	2201      	movs	r2, #1
 800695a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800695e:	48a7      	ldr	r0, [pc, #668]	; (8006bfc <L3GD20_Init+0x2c0>)
 8006960:	f7fd f88a 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006964:	2200      	movs	r2, #0
 8006966:	f44f 7180 	mov.w	r1, #256	; 0x100
 800696a:	48a5      	ldr	r0, [pc, #660]	; (8006c00 <L3GD20_Init+0x2c4>)
 800696c:	f7fd f884 	bl	8003a78 <HAL_GPIO_WritePin>
	spiTxBuf[0] = 0x0F; // who i am register address
 8006970:	4ba4      	ldr	r3, [pc, #656]	; (8006c04 <L3GD20_Init+0x2c8>)
 8006972:	220f      	movs	r2, #15
 8006974:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8006976:	2332      	movs	r3, #50	; 0x32
 8006978:	2201      	movs	r2, #1
 800697a:	49a2      	ldr	r1, [pc, #648]	; (8006c04 <L3GD20_Init+0x2c8>)
 800697c:	48a2      	ldr	r0, [pc, #648]	; (8006c08 <L3GD20_Init+0x2cc>)
 800697e:	f7fd fdf5 	bl	800456c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &spiRxBuf[1], 1, 50);
 8006982:	2332      	movs	r3, #50	; 0x32
 8006984:	2201      	movs	r2, #1
 8006986:	49a1      	ldr	r1, [pc, #644]	; (8006c0c <L3GD20_Init+0x2d0>)
 8006988:	489f      	ldr	r0, [pc, #636]	; (8006c08 <L3GD20_Init+0x2cc>)
 800698a:	f7fd ff2b 	bl	80047e4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800698e:	2201      	movs	r2, #1
 8006990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006994:	489a      	ldr	r0, [pc, #616]	; (8006c00 <L3GD20_Init+0x2c4>)
 8006996:	f7fd f86f 	bl	8003a78 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800699a:	2201      	movs	r2, #1
 800699c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80069a0:	4897      	ldr	r0, [pc, #604]	; (8006c00 <L3GD20_Init+0x2c4>)
 80069a2:	f7fd f869 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80069a6:	2014      	movs	r0, #20
 80069a8:	f7fb feaa 	bl	8002700 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80069ac:	2200      	movs	r2, #0
 80069ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80069b2:	4893      	ldr	r0, [pc, #588]	; (8006c00 <L3GD20_Init+0x2c4>)
 80069b4:	f7fd f860 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80069b8:	2014      	movs	r0, #20
 80069ba:	f7fb fea1 	bl	8002700 <HAL_Delay>
	spiTxBuf[0] = 0x20;
 80069be:	4b91      	ldr	r3, [pc, #580]	; (8006c04 <L3GD20_Init+0x2c8>)
 80069c0:	2220      	movs	r2, #32
 80069c2:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0xff;
 80069c4:	4b8f      	ldr	r3, [pc, #572]	; (8006c04 <L3GD20_Init+0x2c8>)
 80069c6:	22ff      	movs	r2, #255	; 0xff
 80069c8:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 80069ca:	2332      	movs	r3, #50	; 0x32
 80069cc:	2202      	movs	r2, #2
 80069ce:	498d      	ldr	r1, [pc, #564]	; (8006c04 <L3GD20_Init+0x2c8>)
 80069d0:	488d      	ldr	r0, [pc, #564]	; (8006c08 <L3GD20_Init+0x2cc>)
 80069d2:	f7fd fdcb 	bl	800456c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80069d6:	2201      	movs	r2, #1
 80069d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80069dc:	4888      	ldr	r0, [pc, #544]	; (8006c00 <L3GD20_Init+0x2c4>)
 80069de:	f7fd f84b 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80069e2:	2014      	movs	r0, #20
 80069e4:	f7fb fe8c 	bl	8002700 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80069e8:	2200      	movs	r2, #0
 80069ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80069ee:	4884      	ldr	r0, [pc, #528]	; (8006c00 <L3GD20_Init+0x2c4>)
 80069f0:	f7fd f842 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80069f4:	2014      	movs	r0, #20
 80069f6:	f7fb fe83 	bl	8002700 <HAL_Delay>
	spiTxBuf[0] = 0x21;
 80069fa:	4b82      	ldr	r3, [pc, #520]	; (8006c04 <L3GD20_Init+0x2c8>)
 80069fc:	2221      	movs	r2, #33	; 0x21
 80069fe:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x00;
 8006a00:	4b80      	ldr	r3, [pc, #512]	; (8006c04 <L3GD20_Init+0x2c8>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8006a06:	2332      	movs	r3, #50	; 0x32
 8006a08:	2202      	movs	r2, #2
 8006a0a:	497e      	ldr	r1, [pc, #504]	; (8006c04 <L3GD20_Init+0x2c8>)
 8006a0c:	487e      	ldr	r0, [pc, #504]	; (8006c08 <L3GD20_Init+0x2cc>)
 8006a0e:	f7fd fdad 	bl	800456c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006a12:	2201      	movs	r2, #1
 8006a14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a18:	4879      	ldr	r0, [pc, #484]	; (8006c00 <L3GD20_Init+0x2c4>)
 8006a1a:	f7fd f82d 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006a1e:	2014      	movs	r0, #20
 8006a20:	f7fb fe6e 	bl	8002700 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006a24:	2200      	movs	r2, #0
 8006a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a2a:	4875      	ldr	r0, [pc, #468]	; (8006c00 <L3GD20_Init+0x2c4>)
 8006a2c:	f7fd f824 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006a30:	2014      	movs	r0, #20
 8006a32:	f7fb fe65 	bl	8002700 <HAL_Delay>
	spiTxBuf[0] = 0x22;
 8006a36:	4b73      	ldr	r3, [pc, #460]	; (8006c04 <L3GD20_Init+0x2c8>)
 8006a38:	2222      	movs	r2, #34	; 0x22
 8006a3a:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x00;
 8006a3c:	4b71      	ldr	r3, [pc, #452]	; (8006c04 <L3GD20_Init+0x2c8>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8006a42:	2332      	movs	r3, #50	; 0x32
 8006a44:	2202      	movs	r2, #2
 8006a46:	496f      	ldr	r1, [pc, #444]	; (8006c04 <L3GD20_Init+0x2c8>)
 8006a48:	486f      	ldr	r0, [pc, #444]	; (8006c08 <L3GD20_Init+0x2cc>)
 8006a4a:	f7fd fd8f 	bl	800456c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a54:	486a      	ldr	r0, [pc, #424]	; (8006c00 <L3GD20_Init+0x2c4>)
 8006a56:	f7fd f80f 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006a5a:	2014      	movs	r0, #20
 8006a5c:	f7fb fe50 	bl	8002700 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006a60:	2200      	movs	r2, #0
 8006a62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a66:	4866      	ldr	r0, [pc, #408]	; (8006c00 <L3GD20_Init+0x2c4>)
 8006a68:	f7fd f806 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006a6c:	2014      	movs	r0, #20
 8006a6e:	f7fb fe47 	bl	8002700 <HAL_Delay>
	spiTxBuf[0] = 0x23;
 8006a72:	4b64      	ldr	r3, [pc, #400]	; (8006c04 <L3GD20_Init+0x2c8>)
 8006a74:	2223      	movs	r2, #35	; 0x23
 8006a76:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x20;
 8006a78:	4b62      	ldr	r3, [pc, #392]	; (8006c04 <L3GD20_Init+0x2c8>)
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8006a7e:	2332      	movs	r3, #50	; 0x32
 8006a80:	2202      	movs	r2, #2
 8006a82:	4960      	ldr	r1, [pc, #384]	; (8006c04 <L3GD20_Init+0x2c8>)
 8006a84:	4860      	ldr	r0, [pc, #384]	; (8006c08 <L3GD20_Init+0x2cc>)
 8006a86:	f7fd fd71 	bl	800456c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a90:	485b      	ldr	r0, [pc, #364]	; (8006c00 <L3GD20_Init+0x2c4>)
 8006a92:	f7fc fff1 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006a96:	2014      	movs	r0, #20
 8006a98:	f7fb fe32 	bl	8002700 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006aa2:	4857      	ldr	r0, [pc, #348]	; (8006c00 <L3GD20_Init+0x2c4>)
 8006aa4:	f7fc ffe8 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006aa8:	2014      	movs	r0, #20
 8006aaa:	f7fb fe29 	bl	8002700 <HAL_Delay>
	spiTxBuf[0] = 0x24;
 8006aae:	4b55      	ldr	r3, [pc, #340]	; (8006c04 <L3GD20_Init+0x2c8>)
 8006ab0:	2224      	movs	r2, #36	; 0x24
 8006ab2:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x10;
 8006ab4:	4b53      	ldr	r3, [pc, #332]	; (8006c04 <L3GD20_Init+0x2c8>)
 8006ab6:	2210      	movs	r2, #16
 8006ab8:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8006aba:	2332      	movs	r3, #50	; 0x32
 8006abc:	2202      	movs	r2, #2
 8006abe:	4951      	ldr	r1, [pc, #324]	; (8006c04 <L3GD20_Init+0x2c8>)
 8006ac0:	4851      	ldr	r0, [pc, #324]	; (8006c08 <L3GD20_Init+0x2cc>)
 8006ac2:	f7fd fd53 	bl	800456c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006acc:	484c      	ldr	r0, [pc, #304]	; (8006c00 <L3GD20_Init+0x2c4>)
 8006ace:	f7fc ffd3 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006ad2:	2014      	movs	r0, #20
 8006ad4:	f7fb fe14 	bl	8002700 <HAL_Delay>

	Raw_z = 0;
 8006ad8:	4b4d      	ldr	r3, [pc, #308]	; (8006c10 <L3GD20_Init+0x2d4>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	801a      	strh	r2, [r3, #0]


	int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 8006ade:	1d3b      	adds	r3, r7, #4
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	605a      	str	r2, [r3, #4]
 8006ae6:	609a      	str	r2, [r3, #8]
 8006ae8:	60da      	str	r2, [r3, #12]
 8006aea:	611a      	str	r2, [r3, #16]

	uint32_t windowPosition = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t tempSum_Z = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	623b      	str	r3, [r7, #32]

	while (1)
	{
		switch (currentState)
 8006af4:	4b47      	ldr	r3, [pc, #284]	; (8006c14 <L3GD20_Init+0x2d8>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <L3GD20_Init+0x1c6>
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d042      	beq.n	8006b86 <L3GD20_Init+0x24a>
 8006b00:	e11e      	b.n	8006d40 <L3GD20_Init+0x404>
		{
		case (L3GD20_fisrt):
			if (dataReadyFlag == L3GD20_DATA_READY)
 8006b02:	4b45      	ldr	r3, [pc, #276]	; (8006c18 <L3GD20_Init+0x2dc>)
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	f040 811e 	bne.w	8006d48 <L3GD20_Init+0x40c>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b12:	483b      	ldr	r0, [pc, #236]	; (8006c00 <L3GD20_Init+0x2c4>)
 8006b14:	f7fc ffb0 	bl	8003a78 <HAL_GPIO_WritePin>
				spiTxBuf[0] = 0x2c | 0x80;
 8006b18:	4b3a      	ldr	r3, [pc, #232]	; (8006c04 <L3GD20_Init+0x2c8>)
 8006b1a:	22ac      	movs	r2, #172	; 0xac
 8006b1c:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8006b1e:	2332      	movs	r3, #50	; 0x32
 8006b20:	2201      	movs	r2, #1
 8006b22:	4938      	ldr	r1, [pc, #224]	; (8006c04 <L3GD20_Init+0x2c8>)
 8006b24:	4838      	ldr	r0, [pc, #224]	; (8006c08 <L3GD20_Init+0x2cc>)
 8006b26:	f7fd fd21 	bl	800456c <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi1, &spiRxBuf[5], 1, 50);
 8006b2a:	2332      	movs	r3, #50	; 0x32
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	493b      	ldr	r1, [pc, #236]	; (8006c1c <L3GD20_Init+0x2e0>)
 8006b30:	4835      	ldr	r0, [pc, #212]	; (8006c08 <L3GD20_Init+0x2cc>)
 8006b32:	f7fd fe57 	bl	80047e4 <HAL_SPI_Receive>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006b36:	2201      	movs	r2, #1
 8006b38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b3c:	4830      	ldr	r0, [pc, #192]	; (8006c00 <L3GD20_Init+0x2c4>)
 8006b3e:	f7fc ff9b 	bl	8003a78 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006b42:	2200      	movs	r2, #0
 8006b44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b48:	482d      	ldr	r0, [pc, #180]	; (8006c00 <L3GD20_Init+0x2c4>)
 8006b4a:	f7fc ff95 	bl	8003a78 <HAL_GPIO_WritePin>
				spiTxBuf[0] = 0x2d | 0x80;
 8006b4e:	4b2d      	ldr	r3, [pc, #180]	; (8006c04 <L3GD20_Init+0x2c8>)
 8006b50:	22ad      	movs	r2, #173	; 0xad
 8006b52:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8006b54:	2332      	movs	r3, #50	; 0x32
 8006b56:	2201      	movs	r2, #1
 8006b58:	492a      	ldr	r1, [pc, #168]	; (8006c04 <L3GD20_Init+0x2c8>)
 8006b5a:	482b      	ldr	r0, [pc, #172]	; (8006c08 <L3GD20_Init+0x2cc>)
 8006b5c:	f7fd fd06 	bl	800456c <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi1, &spiRxBuf[6], 1, 50);
 8006b60:	2332      	movs	r3, #50	; 0x32
 8006b62:	2201      	movs	r2, #1
 8006b64:	492e      	ldr	r1, [pc, #184]	; (8006c20 <L3GD20_Init+0x2e4>)
 8006b66:	4828      	ldr	r0, [pc, #160]	; (8006c08 <L3GD20_Init+0x2cc>)
 8006b68:	f7fd fe3c 	bl	80047e4 <HAL_SPI_Receive>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b72:	4823      	ldr	r0, [pc, #140]	; (8006c00 <L3GD20_Init+0x2c4>)
 8006b74:	f7fc ff80 	bl	8003a78 <HAL_GPIO_WritePin>

				currentState = L3GD20_second;
 8006b78:	4b26      	ldr	r3, [pc, #152]	; (8006c14 <L3GD20_Init+0x2d8>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	701a      	strb	r2, [r3, #0]
				dataReadyFlag = L3GD20_DATA_NOT_READY;
 8006b7e:	4b26      	ldr	r3, [pc, #152]	; (8006c18 <L3GD20_Init+0x2dc>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	701a      	strb	r2, [r3, #0]
			}
			else
			{
			}
			break;
 8006b84:	e0e0      	b.n	8006d48 <L3GD20_Init+0x40c>

		case (L3GD20_second):
			Raw_z = (spiRxBuf[6] << 8) | spiRxBuf[5];
 8006b86:	4b27      	ldr	r3, [pc, #156]	; (8006c24 <L3GD20_Init+0x2e8>)
 8006b88:	799b      	ldrb	r3, [r3, #6]
 8006b8a:	021b      	lsls	r3, r3, #8
 8006b8c:	b21a      	sxth	r2, r3
 8006b8e:	4b25      	ldr	r3, [pc, #148]	; (8006c24 <L3GD20_Init+0x2e8>)
 8006b90:	795b      	ldrb	r3, [r3, #5]
 8006b92:	b21b      	sxth	r3, r3
 8006b94:	4313      	orrs	r3, r2
 8006b96:	b21a      	sxth	r2, r3
 8006b98:	4b1d      	ldr	r3, [pc, #116]	; (8006c10 <L3GD20_Init+0x2d4>)
 8006b9a:	801a      	strh	r2, [r3, #0]

			if (currentcalistate == L3GD20_calibrated)
 8006b9c:	4b22      	ldr	r3, [pc, #136]	; (8006c28 <L3GD20_Init+0x2ec>)
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	f000 80d3 	beq.w	8006d4c <L3GD20_Init+0x410>
			{
				break;
			}
			else
			{
				switch (currentcalistate)
 8006ba6:	4b20      	ldr	r3, [pc, #128]	; (8006c28 <L3GD20_Init+0x2ec>)
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	f000 80bf 	beq.w	8006d2e <L3GD20_Init+0x3f2>
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	f300 80b8 	bgt.w	8006d26 <L3GD20_Init+0x3ea>
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <L3GD20_Init+0x284>
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d01a      	beq.n	8006bf4 <L3GD20_Init+0x2b8>
 8006bbe:	e0b2      	b.n	8006d26 <L3GD20_Init+0x3ea>
				{
				//---------------------------------------------------------------------------------------------------------
				case (L3GD20_collect_calibration_samples):
					calibrationBuffer_Z[caliCounter] = Raw_z;
 8006bc0:	4b1a      	ldr	r3, [pc, #104]	; (8006c2c <L3GD20_Init+0x2f0>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a12      	ldr	r2, [pc, #72]	; (8006c10 <L3GD20_Init+0x2d4>)
 8006bc6:	8812      	ldrh	r2, [r2, #0]
 8006bc8:	b211      	sxth	r1, r2
 8006bca:	4a19      	ldr	r2, [pc, #100]	; (8006c30 <L3GD20_Init+0x2f4>)
 8006bcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					caliCounter++;
 8006bd0:	4b16      	ldr	r3, [pc, #88]	; (8006c2c <L3GD20_Init+0x2f0>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	4a15      	ldr	r2, [pc, #84]	; (8006c2c <L3GD20_Init+0x2f0>)
 8006bd8:	6013      	str	r3, [r2, #0]

					if (caliCounter >= CALIBRATION_BUFFER_LENGTH)
 8006bda:	4b14      	ldr	r3, [pc, #80]	; (8006c2c <L3GD20_Init+0x2f0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006be2:	f0c0 80a6 	bcc.w	8006d32 <L3GD20_Init+0x3f6>
					{
						caliCounter = 0;
 8006be6:	4b11      	ldr	r3, [pc, #68]	; (8006c2c <L3GD20_Init+0x2f0>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]

						currentcalistate = L3GD20_process_calibration_samples;
 8006bec:	4b0e      	ldr	r3, [pc, #56]	; (8006c28 <L3GD20_Init+0x2ec>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	701a      	strb	r2, [r3, #0]
					}
					else
					{
					}
					break;
 8006bf2:	e09e      	b.n	8006d32 <L3GD20_Init+0x3f6>
					//----------------------------------------------------------------------------------------------------------
				case (L3GD20_process_calibration_samples):
					for (uint32_t idx = 0; idx < CALIBRATION_BUFFER_LENGTH;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	61fb      	str	r3, [r7, #28]
 8006bf8:	e049      	b.n	8006c8e <L3GD20_Init+0x352>
 8006bfa:	bf00      	nop
 8006bfc:	40020400 	.word	0x40020400
 8006c00:	40020800 	.word	0x40020800
 8006c04:	20001890 	.word	0x20001890
 8006c08:	2000038c 	.word	0x2000038c
 8006c0c:	20001895 	.word	0x20001895
 8006c10:	200018a0 	.word	0x200018a0
 8006c14:	200008d1 	.word	0x200008d1
 8006c18:	20000011 	.word	0x20000011
 8006c1c:	20001899 	.word	0x20001899
 8006c20:	2000189a 	.word	0x2000189a
 8006c24:	20001894 	.word	0x20001894
 8006c28:	200008d0 	.word	0x200008d0
 8006c2c:	200008ec 	.word	0x200008ec
 8006c30:	200008f0 	.word	0x200008f0
						 idx++)
					{
						tempSum_Z = tempSum_Z - averageWindow_Z[windowPosition] + calibrationBuffer_Z[idx];
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	3328      	adds	r3, #40	; 0x28
 8006c3a:	443b      	add	r3, r7
 8006c3c:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8006c40:	461a      	mov	r2, r3
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	1a9b      	subs	r3, r3, r2
 8006c46:	4951      	ldr	r1, [pc, #324]	; (8006d8c <L3GD20_Init+0x450>)
 8006c48:	69fa      	ldr	r2, [r7, #28]
 8006c4a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8006c4e:	4413      	add	r3, r2
 8006c50:	623b      	str	r3, [r7, #32]

						averageWindow_Z[windowPosition] = calibrationBuffer_Z[idx];
 8006c52:	4a4e      	ldr	r2, [pc, #312]	; (8006d8c <L3GD20_Init+0x450>)
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	3328      	adds	r3, #40	; 0x28
 8006c60:	443b      	add	r3, r7
 8006c62:	f823 2c24 	strh.w	r2, [r3, #-36]

						offset_z = tempSum_Z / (int32_t)AVERAGE_WINDOW_SIZE;
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	4a49      	ldr	r2, [pc, #292]	; (8006d90 <L3GD20_Init+0x454>)
 8006c6a:	fb82 1203 	smull	r1, r2, r2, r3
 8006c6e:	1092      	asrs	r2, r2, #2
 8006c70:	17db      	asrs	r3, r3, #31
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	4a47      	ldr	r2, [pc, #284]	; (8006d94 <L3GD20_Init+0x458>)
 8006c76:	6013      	str	r3, [r2, #0]

						windowPosition++;
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24

						if (windowPosition >= AVERAGE_WINDOW_SIZE)
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	2b09      	cmp	r3, #9
 8006c82:	d901      	bls.n	8006c88 <L3GD20_Init+0x34c>
						{
							windowPosition = 0;
 8006c84:	2300      	movs	r3, #0
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24
						 idx++)
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	61fb      	str	r3, [r7, #28]
					for (uint32_t idx = 0; idx < CALIBRATION_BUFFER_LENGTH;
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006c94:	d3ce      	bcc.n	8006c34 <L3GD20_Init+0x2f8>
						}
						else
						{
						}
					}
					for (uint32_t idx = 0; idx < CALIBRATION_BUFFER_LENGTH; idx++)
 8006c96:	2300      	movs	r3, #0
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	e02f      	b.n	8006cfc <L3GD20_Init+0x3c0>
						if (((int32_t)calibrationBuffer_Z[idx] - offset_z) > TempNoise_Z)
 8006c9c:	4a3b      	ldr	r2, [pc, #236]	; (8006d8c <L3GD20_Init+0x450>)
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	4b3b      	ldr	r3, [pc, #236]	; (8006d94 <L3GD20_Init+0x458>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	1ad2      	subs	r2, r2, r3
 8006cac:	4b3a      	ldr	r3, [pc, #232]	; (8006d98 <L3GD20_Init+0x45c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	dd0a      	ble.n	8006cca <L3GD20_Init+0x38e>
							TempNoise_Z = (int32_t)calibrationBuffer_Z[idx] - offset_z;
 8006cb4:	4a35      	ldr	r2, [pc, #212]	; (8006d8c <L3GD20_Init+0x450>)
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	4b35      	ldr	r3, [pc, #212]	; (8006d94 <L3GD20_Init+0x458>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	4a34      	ldr	r2, [pc, #208]	; (8006d98 <L3GD20_Init+0x45c>)
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	e015      	b.n	8006cf6 <L3GD20_Init+0x3ba>
						else if (((int32_t)calibrationBuffer_Z[idx] - offset_z) < -TempNoise_Z)
 8006cca:	4a30      	ldr	r2, [pc, #192]	; (8006d8c <L3GD20_Init+0x450>)
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	4b2f      	ldr	r3, [pc, #188]	; (8006d94 <L3GD20_Init+0x458>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	1ad2      	subs	r2, r2, r3
 8006cda:	4b2f      	ldr	r3, [pc, #188]	; (8006d98 <L3GD20_Init+0x45c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	425b      	negs	r3, r3
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	da08      	bge.n	8006cf6 <L3GD20_Init+0x3ba>
							TempNoise_Z = -((int32_t)calibrationBuffer_Z[idx] - offset_z);
 8006ce4:	4b2b      	ldr	r3, [pc, #172]	; (8006d94 <L3GD20_Init+0x458>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4928      	ldr	r1, [pc, #160]	; (8006d8c <L3GD20_Init+0x450>)
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8006cf0:	1a9b      	subs	r3, r3, r2
 8006cf2:	4a29      	ldr	r2, [pc, #164]	; (8006d98 <L3GD20_Init+0x45c>)
 8006cf4:	6013      	str	r3, [r2, #0]
					for (uint32_t idx = 0; idx < CALIBRATION_BUFFER_LENGTH; idx++)
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	61bb      	str	r3, [r7, #24]
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006d02:	d3cb      	bcc.n	8006c9c <L3GD20_Init+0x360>

					Noise_Z = (float)TempNoise_Z * GYRO_SENSITIVITY;
 8006d04:	4b24      	ldr	r3, [pc, #144]	; (8006d98 <L3GD20_Init+0x45c>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	ee07 3a90 	vmov	s15, r3
 8006d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d10:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006d9c <L3GD20_Init+0x460>
 8006d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d18:	4b21      	ldr	r3, [pc, #132]	; (8006da0 <L3GD20_Init+0x464>)
 8006d1a:	edc3 7a00 	vstr	s15, [r3]

					currentcalistate = L3GD20_calibrated;
 8006d1e:	4b21      	ldr	r3, [pc, #132]	; (8006da4 <L3GD20_Init+0x468>)
 8006d20:	2202      	movs	r2, #2
 8006d22:	701a      	strb	r2, [r3, #0]
					break;
 8006d24:	e006      	b.n	8006d34 <L3GD20_Init+0x3f8>

				case (L3GD20_calibrated):
					break;

				default:
					currentcalistate = L3GD20_collect_calibration_samples;
 8006d26:	4b1f      	ldr	r3, [pc, #124]	; (8006da4 <L3GD20_Init+0x468>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	701a      	strb	r2, [r3, #0]
					break;
 8006d2c:	e002      	b.n	8006d34 <L3GD20_Init+0x3f8>
					break;
 8006d2e:	bf00      	nop
 8006d30:	e000      	b.n	8006d34 <L3GD20_Init+0x3f8>
					break;
 8006d32:	bf00      	nop
				}
			}
			currentState = L3GD20_fisrt;
 8006d34:	4b1c      	ldr	r3, [pc, #112]	; (8006da8 <L3GD20_Init+0x46c>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	701a      	strb	r2, [r3, #0]
			dataReadyFlag = L3GD20_DATA_READY;
 8006d3a:	4b1c      	ldr	r3, [pc, #112]	; (8006dac <L3GD20_Init+0x470>)
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	701a      	strb	r2, [r3, #0]

		default:
			currentState = L3GD20_fisrt;
 8006d40:	4b19      	ldr	r3, [pc, #100]	; (8006da8 <L3GD20_Init+0x46c>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	e002      	b.n	8006d4e <L3GD20_Init+0x412>
			break;
 8006d48:	bf00      	nop
 8006d4a:	e000      	b.n	8006d4e <L3GD20_Init+0x412>
				break;
 8006d4c:	bf00      	nop
		}
		if (currentcalistate == L3GD20_calibrated)
 8006d4e:	4b15      	ldr	r3, [pc, #84]	; (8006da4 <L3GD20_Init+0x468>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d003      	beq.n	8006d5e <L3GD20_Init+0x422>
		{
			break;
		}

		HAL_Delay(1);
 8006d56:	2001      	movs	r0, #1
 8006d58:	f7fb fcd2 	bl	8002700 <HAL_Delay>
		switch (currentState)
 8006d5c:	e6ca      	b.n	8006af4 <L3GD20_Init+0x1b8>
			break;
 8006d5e:	bf00      	nop
	}
	LED9_OFF;LED10_OFF;LED11_OFF;
 8006d60:	2200      	movs	r2, #0
 8006d62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d66:	4812      	ldr	r0, [pc, #72]	; (8006db0 <L3GD20_Init+0x474>)
 8006d68:	f7fc fe86 	bl	8003a78 <HAL_GPIO_WritePin>
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2101      	movs	r1, #1
 8006d70:	4810      	ldr	r0, [pc, #64]	; (8006db4 <L3GD20_Init+0x478>)
 8006d72:	f7fc fe81 	bl	8003a78 <HAL_GPIO_WritePin>
 8006d76:	2200      	movs	r2, #0
 8006d78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d7c:	480c      	ldr	r0, [pc, #48]	; (8006db0 <L3GD20_Init+0x474>)
 8006d7e:	f7fc fe7b 	bl	8003a78 <HAL_GPIO_WritePin>
}
 8006d82:	bf00      	nop
 8006d84:	3728      	adds	r7, #40	; 0x28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	200008f0 	.word	0x200008f0
 8006d90:	66666667 	.word	0x66666667
 8006d94:	200008d8 	.word	0x200008d8
 8006d98:	200008e8 	.word	0x200008e8
 8006d9c:	3e0b5dcc 	.word	0x3e0b5dcc
 8006da0:	200008dc 	.word	0x200008dc
 8006da4:	200008d0 	.word	0x200008d0
 8006da8:	200008d1 	.word	0x200008d1
 8006dac:	20000011 	.word	0x20000011
 8006db0:	40020400 	.word	0x40020400
 8006db4:	40020800 	.word	0x40020800

08006db8 <L3GD20_loop>:

void L3GD20_loop(void)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
	Noise_Z = (Noise_Z>GYRO_NOISE_THRESHOLD)? GYRO_NOISE_THRESHOLD:Noise_Z;
 8006dbc:	4b55      	ldr	r3, [pc, #340]	; (8006f14 <L3GD20_loop+0x15c>)
 8006dbe:	edd3 7a00 	vldr	s15, [r3]
 8006dc2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006f18 <L3GD20_loop+0x160>
 8006dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dce:	dd01      	ble.n	8006dd4 <L3GD20_loop+0x1c>
 8006dd0:	4b52      	ldr	r3, [pc, #328]	; (8006f1c <L3GD20_loop+0x164>)
 8006dd2:	e001      	b.n	8006dd8 <L3GD20_loop+0x20>
 8006dd4:	4b4f      	ldr	r3, [pc, #316]	; (8006f14 <L3GD20_loop+0x15c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a4e      	ldr	r2, [pc, #312]	; (8006f14 <L3GD20_loop+0x15c>)
 8006dda:	6013      	str	r3, [r2, #0]
	Raw_z = 0;
 8006ddc:	4b50      	ldr	r3, [pc, #320]	; (8006f20 <L3GD20_loop+0x168>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	801a      	strh	r2, [r3, #0]

	if (dataReadyFlag == L3GD20_DATA_READY)
 8006de2:	4b50      	ldr	r3, [pc, #320]	; (8006f24 <L3GD20_loop+0x16c>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d139      	bne.n	8006e5e <L3GD20_loop+0xa6>
	{

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006dea:	2200      	movs	r2, #0
 8006dec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006df0:	484d      	ldr	r0, [pc, #308]	; (8006f28 <L3GD20_loop+0x170>)
 8006df2:	f7fc fe41 	bl	8003a78 <HAL_GPIO_WritePin>
		spiTxBuf[0] = 0x2c | 0x80;
 8006df6:	4b4d      	ldr	r3, [pc, #308]	; (8006f2c <L3GD20_loop+0x174>)
 8006df8:	22ac      	movs	r2, #172	; 0xac
 8006dfa:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8006dfc:	2332      	movs	r3, #50	; 0x32
 8006dfe:	2201      	movs	r2, #1
 8006e00:	494a      	ldr	r1, [pc, #296]	; (8006f2c <L3GD20_loop+0x174>)
 8006e02:	484b      	ldr	r0, [pc, #300]	; (8006f30 <L3GD20_loop+0x178>)
 8006e04:	f7fd fbb2 	bl	800456c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &spiRxBuf[5], 1, 50);
 8006e08:	2332      	movs	r3, #50	; 0x32
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	4949      	ldr	r1, [pc, #292]	; (8006f34 <L3GD20_loop+0x17c>)
 8006e0e:	4848      	ldr	r0, [pc, #288]	; (8006f30 <L3GD20_loop+0x178>)
 8006e10:	f7fd fce8 	bl	80047e4 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006e14:	2201      	movs	r2, #1
 8006e16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e1a:	4843      	ldr	r0, [pc, #268]	; (8006f28 <L3GD20_loop+0x170>)
 8006e1c:	f7fc fe2c 	bl	8003a78 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006e20:	2200      	movs	r2, #0
 8006e22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e26:	4840      	ldr	r0, [pc, #256]	; (8006f28 <L3GD20_loop+0x170>)
 8006e28:	f7fc fe26 	bl	8003a78 <HAL_GPIO_WritePin>
		spiTxBuf[0] = 0x2d | 0x80;
 8006e2c:	4b3f      	ldr	r3, [pc, #252]	; (8006f2c <L3GD20_loop+0x174>)
 8006e2e:	22ad      	movs	r2, #173	; 0xad
 8006e30:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8006e32:	2332      	movs	r3, #50	; 0x32
 8006e34:	2201      	movs	r2, #1
 8006e36:	493d      	ldr	r1, [pc, #244]	; (8006f2c <L3GD20_loop+0x174>)
 8006e38:	483d      	ldr	r0, [pc, #244]	; (8006f30 <L3GD20_loop+0x178>)
 8006e3a:	f7fd fb97 	bl	800456c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &spiRxBuf[6], 1, 50);
 8006e3e:	2332      	movs	r3, #50	; 0x32
 8006e40:	2201      	movs	r2, #1
 8006e42:	493d      	ldr	r1, [pc, #244]	; (8006f38 <L3GD20_loop+0x180>)
 8006e44:	483a      	ldr	r0, [pc, #232]	; (8006f30 <L3GD20_loop+0x178>)
 8006e46:	f7fd fccd 	bl	80047e4 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e50:	4835      	ldr	r0, [pc, #212]	; (8006f28 <L3GD20_loop+0x170>)
 8006e52:	f7fc fe11 	bl	8003a78 <HAL_GPIO_WritePin>

		dataReadyFlag = L3GD20_DATA_NOT_READY;
 8006e56:	4b33      	ldr	r3, [pc, #204]	; (8006f24 <L3GD20_loop+0x16c>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	701a      	strb	r2, [r3, #0]
			LastAngleRate_Z = angleRate_z;
		}
		else;
		dataReadyFlag = L3GD20_DATA_READY;
	}
}
 8006e5c:	e057      	b.n	8006f0e <L3GD20_loop+0x156>
		Raw_z = (spiRxBuf[6] << 8) | spiRxBuf[5];
 8006e5e:	4b37      	ldr	r3, [pc, #220]	; (8006f3c <L3GD20_loop+0x184>)
 8006e60:	799b      	ldrb	r3, [r3, #6]
 8006e62:	021b      	lsls	r3, r3, #8
 8006e64:	b21a      	sxth	r2, r3
 8006e66:	4b35      	ldr	r3, [pc, #212]	; (8006f3c <L3GD20_loop+0x184>)
 8006e68:	795b      	ldrb	r3, [r3, #5]
 8006e6a:	b21b      	sxth	r3, r3
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	b21a      	sxth	r2, r3
 8006e70:	4b2b      	ldr	r3, [pc, #172]	; (8006f20 <L3GD20_loop+0x168>)
 8006e72:	801a      	strh	r2, [r3, #0]
		angleRate_z = (float)(Raw_z - (offset_z)) * GYRO_SENSITIVITY;
 8006e74:	4b2a      	ldr	r3, [pc, #168]	; (8006f20 <L3GD20_loop+0x168>)
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	b21b      	sxth	r3, r3
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	4b30      	ldr	r3, [pc, #192]	; (8006f40 <L3GD20_loop+0x188>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e8a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8006f44 <L3GD20_loop+0x18c>
 8006e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e92:	4b2d      	ldr	r3, [pc, #180]	; (8006f48 <L3GD20_loop+0x190>)
 8006e94:	edc3 7a00 	vstr	s15, [r3]
		timeDifference = 0.001;
 8006e98:	4b2c      	ldr	r3, [pc, #176]	; (8006f4c <L3GD20_loop+0x194>)
 8006e9a:	4a2d      	ldr	r2, [pc, #180]	; (8006f50 <L3GD20_loop+0x198>)
 8006e9c:	601a      	str	r2, [r3, #0]
		if ((angleRate_z > Noise_Z) || (angleRate_z < -Noise_Z))
 8006e9e:	4b2a      	ldr	r3, [pc, #168]	; (8006f48 <L3GD20_loop+0x190>)
 8006ea0:	ed93 7a00 	vldr	s14, [r3]
 8006ea4:	4b1b      	ldr	r3, [pc, #108]	; (8006f14 <L3GD20_loop+0x15c>)
 8006ea6:	edd3 7a00 	vldr	s15, [r3]
 8006eaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb2:	dc0c      	bgt.n	8006ece <L3GD20_loop+0x116>
 8006eb4:	4b17      	ldr	r3, [pc, #92]	; (8006f14 <L3GD20_loop+0x15c>)
 8006eb6:	edd3 7a00 	vldr	s15, [r3]
 8006eba:	eeb1 7a67 	vneg.f32	s14, s15
 8006ebe:	4b22      	ldr	r3, [pc, #136]	; (8006f48 <L3GD20_loop+0x190>)
 8006ec0:	edd3 7a00 	vldr	s15, [r3]
 8006ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ecc:	dd1c      	ble.n	8006f08 <L3GD20_loop+0x150>
			Angle_Z += ((angleRate_z + LastAngleRate_Z) * timeDifference) / (2.0f);
 8006ece:	4b1e      	ldr	r3, [pc, #120]	; (8006f48 <L3GD20_loop+0x190>)
 8006ed0:	ed93 7a00 	vldr	s14, [r3]
 8006ed4:	4b1f      	ldr	r3, [pc, #124]	; (8006f54 <L3GD20_loop+0x19c>)
 8006ed6:	edd3 7a00 	vldr	s15, [r3]
 8006eda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ede:	4b1b      	ldr	r3, [pc, #108]	; (8006f4c <L3GD20_loop+0x194>)
 8006ee0:	edd3 7a00 	vldr	s15, [r3]
 8006ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006eec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006ef0:	4b19      	ldr	r3, [pc, #100]	; (8006f58 <L3GD20_loop+0x1a0>)
 8006ef2:	edd3 7a00 	vldr	s15, [r3]
 8006ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006efa:	4b17      	ldr	r3, [pc, #92]	; (8006f58 <L3GD20_loop+0x1a0>)
 8006efc:	edc3 7a00 	vstr	s15, [r3]
			LastAngleRate_Z = angleRate_z;
 8006f00:	4b11      	ldr	r3, [pc, #68]	; (8006f48 <L3GD20_loop+0x190>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a13      	ldr	r2, [pc, #76]	; (8006f54 <L3GD20_loop+0x19c>)
 8006f06:	6013      	str	r3, [r2, #0]
		dataReadyFlag = L3GD20_DATA_READY;
 8006f08:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <L3GD20_loop+0x16c>)
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	701a      	strb	r2, [r3, #0]
}
 8006f0e:	bf00      	nop
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	200008dc 	.word	0x200008dc
 8006f18:	3f733333 	.word	0x3f733333
 8006f1c:	3f733333 	.word	0x3f733333
 8006f20:	200018a0 	.word	0x200018a0
 8006f24:	20000011 	.word	0x20000011
 8006f28:	40020800 	.word	0x40020800
 8006f2c:	20001890 	.word	0x20001890
 8006f30:	2000038c 	.word	0x2000038c
 8006f34:	20001899 	.word	0x20001899
 8006f38:	2000189a 	.word	0x2000189a
 8006f3c:	20001894 	.word	0x20001894
 8006f40:	200008d8 	.word	0x200008d8
 8006f44:	3e0b5dcc 	.word	0x3e0b5dcc
 8006f48:	200008d4 	.word	0x200008d4
 8006f4c:	2000189c 	.word	0x2000189c
 8006f50:	3a83126f 	.word	0x3a83126f
 8006f54:	200008e4 	.word	0x200008e4
 8006f58:	200008e0 	.word	0x200008e0

08006f5c <readADC>:
#include "adc.h"



uint16_t readADC(adc_channels channel, uint8_t timeout)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b088      	sub	sp, #32
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	4603      	mov	r3, r0
 8006f64:	460a      	mov	r2, r1
 8006f66:	71fb      	strb	r3, [r7, #7]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	71bb      	strb	r3, [r7, #6]
    ADC_ChannelConfTypeDef sConfig = {0};
 8006f6c:	f107 030c 	add.w	r3, r7, #12
 8006f70:	2200      	movs	r2, #0
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	605a      	str	r2, [r3, #4]
 8006f76:	609a      	str	r2, [r3, #8]
 8006f78:	60da      	str	r2, [r3, #12]
    uint16_t adc_val = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	83fb      	strh	r3, [r7, #30]
    switch (channel)
 8006f7e:	79fb      	ldrb	r3, [r7, #7]
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	d81c      	bhi.n	8006fbe <readADC+0x62>
 8006f84:	a201      	add	r2, pc, #4	; (adr r2, 8006f8c <readADC+0x30>)
 8006f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8a:	bf00      	nop
 8006f8c:	08006fad 	.word	0x08006fad
 8006f90:	08006fa1 	.word	0x08006fa1
 8006f94:	08006fb9 	.word	0x08006fb9
 8006f98:	08006fa7 	.word	0x08006fa7
 8006f9c:	08006fb3 	.word	0x08006fb3
    {
        case RF_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_4;
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	60fb      	str	r3, [r7, #12]
            break;
 8006fa4:	e00b      	b.n	8006fbe <readADC+0x62>

        case DL_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_8;
 8006fa6:	2308      	movs	r3, #8
 8006fa8:	60fb      	str	r3, [r7, #12]
            break;
 8006faa:	e008      	b.n	8006fbe <readADC+0x62>

        case LF_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_9;
 8006fac:	2309      	movs	r3, #9
 8006fae:	60fb      	str	r3, [r7, #12]
            break;
 8006fb0:	e005      	b.n	8006fbe <readADC+0x62>

        case BAT_VOL:
        	sConfig.Channel = ADC_CHANNEL_13;
 8006fb2:	230d      	movs	r3, #13
 8006fb4:	60fb      	str	r3, [r7, #12]
            break;
 8006fb6:	e002      	b.n	8006fbe <readADC+0x62>
        
        case DR_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_14;
 8006fb8:	230e      	movs	r3, #14
 8006fba:	60fb      	str	r3, [r7, #12]
            break;
 8006fbc:	bf00      	nop
    }


    sConfig.Rank = 1;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8006fc2:	2304      	movs	r3, #4
 8006fc4:	617b      	str	r3, [r7, #20]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006fc6:	f107 030c 	add.w	r3, r7, #12
 8006fca:	4619      	mov	r1, r3
 8006fcc:	480e      	ldr	r0, [pc, #56]	; (8007008 <readADC+0xac>)
 8006fce:	f7fb fd9d 	bl	8002b0c <HAL_ADC_ConfigChannel>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <readADC+0x80>
    {
      Error_Handler();
 8006fd8:	f7fa fc46 	bl	8001868 <Error_Handler>
    }

    HAL_ADC_Start(&hadc1);
 8006fdc:	480a      	ldr	r0, [pc, #40]	; (8007008 <readADC+0xac>)
 8006fde:	f7fb fbf7 	bl	80027d0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1,timeout);
 8006fe2:	79bb      	ldrb	r3, [r7, #6]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4808      	ldr	r0, [pc, #32]	; (8007008 <readADC+0xac>)
 8006fe8:	f7fb fcf7 	bl	80029da <HAL_ADC_PollForConversion>
    adc_val = HAL_ADC_GetValue(&hadc1);
 8006fec:	4806      	ldr	r0, [pc, #24]	; (8007008 <readADC+0xac>)
 8006fee:	f7fb fd7f 	bl	8002af0 <HAL_ADC_GetValue>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(&hadc1);
 8006ff6:	4804      	ldr	r0, [pc, #16]	; (8007008 <readADC+0xac>)
 8006ff8:	f7fb fcbc 	bl	8002974 <HAL_ADC_Stop>

    return adc_val;
 8006ffc:	8bfb      	ldrh	r3, [r7, #30]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	200002e4 	.word	0x200002e4

0800700c <buzzerInit>:
#include "buzzer.h"

void buzzerInit(void){
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8007010:	2100      	movs	r1, #0
 8007012:	4802      	ldr	r0, [pc, #8]	; (800701c <buzzerInit+0x10>)
 8007014:	f7fe f97a 	bl	800530c <HAL_TIM_PWM_Start>
}
 8007018:	bf00      	nop
 800701a:	bd80      	pop	{r7, pc}
 800701c:	200005a4 	.word	0x200005a4

08007020 <clearScreen>:
#include "display.h"

void clearScreen(){
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8007024:	2000      	movs	r0, #0
 8007026:	f7fb f961 	bl	80022ec <ssd1306_Fill>
}
 800702a:	bf00      	nop
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <printChr_font_6x8>:

	ssd1306_WriteString(str, Font_6x8, White);
	ssd1306_UpdateScreen();
}

void printChr_font_6x8(char chr, int x, int y){
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	73fb      	strb	r3, [r7, #15]
	char str[2];
	// Copy the character into the string
	str[0] = chr;
 800703e:	7bfb      	ldrb	r3, [r7, #15]
 8007040:	753b      	strb	r3, [r7, #20]
	// Null-terminate the string
	str[1] = '\0';
 8007042:	2300      	movs	r3, #0
 8007044:	757b      	strb	r3, [r7, #21]

	ssd1306_SetCursor(x, y);
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	b2db      	uxtb	r3, r3
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	b2d2      	uxtb	r2, r2
 800704e:	4611      	mov	r1, r2
 8007050:	4618      	mov	r0, r3
 8007052:	f7fb fa99 	bl	8002588 <ssd1306_SetCursor>

	ssd1306_WriteString(str, Font_6x8, White);
 8007056:	4a06      	ldr	r2, [pc, #24]	; (8007070 <printChr_font_6x8+0x40>)
 8007058:	f107 0014 	add.w	r0, r7, #20
 800705c:	2301      	movs	r3, #1
 800705e:	ca06      	ldmia	r2, {r1, r2}
 8007060:	f7fb fa6c 	bl	800253c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8007064:	f7fb f966 	bl	8002334 <ssd1306_UpdateScreen>
}
 8007068:	bf00      	nop
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	20000004 	.word	0x20000004

08007074 <printInt_font_6x8>:

void printInt_font_6x8(int INT, int x, int y){
 8007074:	b580      	push	{r7, lr}
 8007076:	b094      	sub	sp, #80	; 0x50
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
	char buff[64];
	snprintf(buff, sizeof(buff), "%d", INT);
 8007080:	f107 0010 	add.w	r0, r7, #16
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4a0c      	ldr	r2, [pc, #48]	; (80070b8 <printInt_font_6x8+0x44>)
 8007088:	2140      	movs	r1, #64	; 0x40
 800708a:	f002 fdc7 	bl	8009c1c <sniprintf>

	ssd1306_SetCursor(x, y);
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	b2db      	uxtb	r3, r3
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	b2d2      	uxtb	r2, r2
 8007096:	4611      	mov	r1, r2
 8007098:	4618      	mov	r0, r3
 800709a:	f7fb fa75 	bl	8002588 <ssd1306_SetCursor>

	ssd1306_WriteString(buff, Font_6x8, White);
 800709e:	4a07      	ldr	r2, [pc, #28]	; (80070bc <printInt_font_6x8+0x48>)
 80070a0:	f107 0010 	add.w	r0, r7, #16
 80070a4:	2301      	movs	r3, #1
 80070a6:	ca06      	ldmia	r2, {r1, r2}
 80070a8:	f7fb fa48 	bl	800253c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80070ac:	f7fb f942 	bl	8002334 <ssd1306_UpdateScreen>
}
 80070b0:	bf00      	nop
 80070b2:	3750      	adds	r7, #80	; 0x50
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	0800bda0 	.word	0x0800bda0
 80070bc:	20000004 	.word	0x20000004

080070c0 <encoderInit>:
#include "encoder.h"


// FUCTION: INTIALIZATION OF ENCODER RELATED HARDWARE
void encoderInit(void){
 80070c0:	b580      	push	{r7, lr}
 80070c2:	af00      	add	r7, sp, #0
	// LEFT ENCODER
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80070c4:	213c      	movs	r1, #60	; 0x3c
 80070c6:	4804      	ldr	r0, [pc, #16]	; (80070d8 <encoderInit+0x18>)
 80070c8:	f7fe fa8e 	bl	80055e8 <HAL_TIM_Encoder_Start>

	// RIGHT ENCODER
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80070cc:	213c      	movs	r1, #60	; 0x3c
 80070ce:	4803      	ldr	r0, [pc, #12]	; (80070dc <encoderInit+0x1c>)
 80070d0:	f7fe fa8a 	bl	80055e8 <HAL_TIM_Encoder_Start>
}
 80070d4:	bf00      	nop
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	20000484 	.word	0x20000484
 80070dc:	20000514 	.word	0x20000514

080070e0 <resetEncoder>:

void resetEncoder(void){
 80070e0:	b480      	push	{r7}
 80070e2:	af00      	add	r7, sp, #0
	TIM2->CNT = _ENCODER_START;
 80070e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070e8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80070ec:	625a      	str	r2, [r3, #36]	; 0x24
	TIM5->CNT = u32_max-_ENCODER_START;
 80070ee:	4b04      	ldr	r3, [pc, #16]	; (8007100 <resetEncoder+0x20>)
 80070f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80070f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80070f6:	bf00      	nop
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	40000c00 	.word	0x40000c00

08007104 <motorInit>:
	return (a > b) ? a : b;
}

// INITIALIZATIONS
void motorInit(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
	// Start PWM for TIM4 channels (you may need to adjust this based on your application)
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // LPWMA
 8007108:	2100      	movs	r1, #0
 800710a:	480b      	ldr	r0, [pc, #44]	; (8007138 <motorInit+0x34>)
 800710c:	f7fe f8fe 	bl	800530c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // LPWMB
 8007110:	2104      	movs	r1, #4
 8007112:	4809      	ldr	r0, [pc, #36]	; (8007138 <motorInit+0x34>)
 8007114:	f7fe f8fa 	bl	800530c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // RPWMA
 8007118:	2108      	movs	r1, #8
 800711a:	4807      	ldr	r0, [pc, #28]	; (8007138 <motorInit+0x34>)
 800711c:	f7fe f8f6 	bl	800530c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // RPWMB
 8007120:	210c      	movs	r1, #12
 8007122:	4805      	ldr	r0, [pc, #20]	; (8007138 <motorInit+0x34>)
 8007124:	f7fe f8f2 	bl	800530c <HAL_TIM_PWM_Start>
	setWheels(0, 0);
 8007128:	eddf 0a04 	vldr	s1, [pc, #16]	; 800713c <motorInit+0x38>
 800712c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800713c <motorInit+0x38>
 8007130:	f000 f8ea 	bl	8007308 <setWheels>
}
 8007134:	bf00      	nop
 8007136:	bd80      	pop	{r7, pc}
 8007138:	200004cc 	.word	0x200004cc
 800713c:	00000000 	.word	0x00000000

08007140 <setLeftWheel>:

// LEFT WHEEL PLANNER
void setLeftWheel(float l_speed)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t l_pwma, l_pwmb;

	if (abs(l_speed) > lmax_speed)
 800714a:	edd7 7a01 	vldr	s15, [r7, #4]
 800714e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007152:	ee17 3a90 	vmov	r3, s15
 8007156:	2b00      	cmp	r3, #0
 8007158:	bfb8      	it	lt
 800715a:	425b      	neglt	r3, r3
 800715c:	ee07 3a90 	vmov	s15, r3
 8007160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007164:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007218 <setLeftWheel+0xd8>
 8007168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800716c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007170:	dd0f      	ble.n	8007192 <setLeftWheel+0x52>
		l_speed = (l_speed > 0) ? lmax_speed : -lmax_speed;
 8007172:	edd7 7a01 	vldr	s15, [r7, #4]
 8007176:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800717a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800717e:	dd02      	ble.n	8007186 <setLeftWheel+0x46>
 8007180:	eddf 7a25 	vldr	s15, [pc, #148]	; 8007218 <setLeftWheel+0xd8>
 8007184:	e003      	b.n	800718e <setLeftWheel+0x4e>
 8007186:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007218 <setLeftWheel+0xd8>
 800718a:	eef1 7a67 	vneg.f32	s15, s15
 800718e:	edc7 7a01 	vstr	s15, [r7, #4]

	l_pwma = (l_speed >= 0) ? l_speed * max_limit : 0;
 8007192:	edd7 7a01 	vldr	s15, [r7, #4]
 8007196:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800719a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800719e:	db0f      	blt.n	80071c0 <setLeftWheel+0x80>
 80071a0:	4b1e      	ldr	r3, [pc, #120]	; (800721c <setLeftWheel+0xdc>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	ee07 3a90 	vmov	s15, r3
 80071a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80071b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071b8:	ee17 3a90 	vmov	r3, s15
 80071bc:	b29b      	uxth	r3, r3
 80071be:	e000      	b.n	80071c2 <setLeftWheel+0x82>
 80071c0:	2300      	movs	r3, #0
 80071c2:	81fb      	strh	r3, [r7, #14]
	l_pwmb = (l_speed < 0) ? (-l_speed) * max_limit : 0;
 80071c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80071c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d0:	d511      	bpl.n	80071f6 <setLeftWheel+0xb6>
 80071d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80071d6:	eeb1 7a67 	vneg.f32	s14, s15
 80071da:	4b10      	ldr	r3, [pc, #64]	; (800721c <setLeftWheel+0xdc>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ee:	ee17 3a90 	vmov	r3, s15
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	e000      	b.n	80071f8 <setLeftWheel+0xb8>
 80071f6:	2300      	movs	r3, #0
 80071f8:	81bb      	strh	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, l_pwma); // LPWMA
 80071fa:	4b09      	ldr	r3, [pc, #36]	; (8007220 <setLeftWheel+0xe0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	89fa      	ldrh	r2, [r7, #14]
 8007200:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, l_pwmb); // LPWMB
 8007202:	4b07      	ldr	r3, [pc, #28]	; (8007220 <setLeftWheel+0xe0>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	89ba      	ldrh	r2, [r7, #12]
 8007208:	635a      	str	r2, [r3, #52]	; 0x34
}
 800720a:	bf00      	nop
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	3e99999a 	.word	0x3e99999a
 800721c:	20000014 	.word	0x20000014
 8007220:	200004cc 	.word	0x200004cc

08007224 <setRightWheel>:

void setRightWheel(float r_speed)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t r_pwma, r_pwmb;

	if (abs(r_speed) > rmax_speed)
 800722e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007236:	ee17 3a90 	vmov	r3, s15
 800723a:	2b00      	cmp	r3, #0
 800723c:	bfb8      	it	lt
 800723e:	425b      	neglt	r3, r3
 8007240:	ee07 3a90 	vmov	s15, r3
 8007244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007248:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80072fc <setRightWheel+0xd8>
 800724c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007254:	dd0f      	ble.n	8007276 <setRightWheel+0x52>
		r_speed = (r_speed > 0) ? rmax_speed : -rmax_speed;
 8007256:	edd7 7a01 	vldr	s15, [r7, #4]
 800725a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800725e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007262:	dd02      	ble.n	800726a <setRightWheel+0x46>
 8007264:	eddf 7a25 	vldr	s15, [pc, #148]	; 80072fc <setRightWheel+0xd8>
 8007268:	e003      	b.n	8007272 <setRightWheel+0x4e>
 800726a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80072fc <setRightWheel+0xd8>
 800726e:	eef1 7a67 	vneg.f32	s15, s15
 8007272:	edc7 7a01 	vstr	s15, [r7, #4]
	r_pwma = (r_speed >= 0) ? r_speed * max_limit : 0;
 8007276:	edd7 7a01 	vldr	s15, [r7, #4]
 800727a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800727e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007282:	db0f      	blt.n	80072a4 <setRightWheel+0x80>
 8007284:	4b1e      	ldr	r3, [pc, #120]	; (8007300 <setRightWheel+0xdc>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	ee07 3a90 	vmov	s15, r3
 800728c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007290:	edd7 7a01 	vldr	s15, [r7, #4]
 8007294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800729c:	ee17 3a90 	vmov	r3, s15
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	e000      	b.n	80072a6 <setRightWheel+0x82>
 80072a4:	2300      	movs	r3, #0
 80072a6:	81fb      	strh	r3, [r7, #14]
	r_pwmb = (r_speed < 0) ? (-r_speed) * max_limit : 0;
 80072a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80072ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80072b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b4:	d511      	bpl.n	80072da <setRightWheel+0xb6>
 80072b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80072ba:	eeb1 7a67 	vneg.f32	s14, s15
 80072be:	4b10      	ldr	r3, [pc, #64]	; (8007300 <setRightWheel+0xdc>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	ee07 3a90 	vmov	s15, r3
 80072c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072d2:	ee17 3a90 	vmov	r3, s15
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	e000      	b.n	80072dc <setRightWheel+0xb8>
 80072da:	2300      	movs	r3, #0
 80072dc:	81bb      	strh	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, r_pwma); // RPWMA
 80072de:	4b09      	ldr	r3, [pc, #36]	; (8007304 <setRightWheel+0xe0>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	89fa      	ldrh	r2, [r7, #14]
 80072e4:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, r_pwmb); // RPWMB
 80072e6:	4b07      	ldr	r3, [pc, #28]	; (8007304 <setRightWheel+0xe0>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	89ba      	ldrh	r2, [r7, #12]
 80072ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80072ee:	bf00      	nop
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	3e99999a 	.word	0x3e99999a
 8007300:	20000014 	.word	0x20000014
 8007304:	200004cc 	.word	0x200004cc

08007308 <setWheels>:

void setWheels(float l_speed, float r_speed)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	ed87 0a01 	vstr	s0, [r7, #4]
 8007312:	edc7 0a00 	vstr	s1, [r7]
	setLeftWheel(l_speed);
 8007316:	ed97 0a01 	vldr	s0, [r7, #4]
 800731a:	f7ff ff11 	bl	8007140 <setLeftWheel>
	setRightWheel(r_speed);
 800731e:	ed97 0a00 	vldr	s0, [r7]
 8007322:	f7ff ff7f 	bl	8007224 <setRightWheel>
}
 8007326:	bf00      	nop
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <moveStraight>:

void moveStraight(float dist_cm)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	ed87 0a01 	vstr	s0, [r7, #4]
	int count = dist_cm*lin_sens;
 800733a:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8007468 <moveStraight+0x138>
 800733e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007342:	edd7 7a01 	vldr	s15, [r7, #4]
 8007346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800734e:	ee17 3a90 	vmov	r3, s15
 8007352:	60fb      	str	r3, [r7, #12]
	l_start = l_position;
 8007354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	461a      	mov	r2, r3
 800735c:	4b43      	ldr	r3, [pc, #268]	; (800746c <moveStraight+0x13c>)
 800735e:	601a      	str	r2, [r3, #0]
	r_start = r_position;
 8007360:	4b43      	ldr	r3, [pc, #268]	; (8007470 <moveStraight+0x140>)
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	43db      	mvns	r3, r3
 8007366:	4a43      	ldr	r2, [pc, #268]	; (8007474 <moveStraight+0x144>)
 8007368:	6013      	str	r3, [r2, #0]

	while (1)
	{
		l_dist = l_position - l_start;
 800736a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	4a3e      	ldr	r2, [pc, #248]	; (800746c <moveStraight+0x13c>)
 8007372:	6812      	ldr	r2, [r2, #0]
 8007374:	1a9b      	subs	r3, r3, r2
 8007376:	461a      	mov	r2, r3
 8007378:	4b3f      	ldr	r3, [pc, #252]	; (8007478 <moveStraight+0x148>)
 800737a:	601a      	str	r2, [r3, #0]
		r_dist = r_position - r_start;
 800737c:	4b3c      	ldr	r3, [pc, #240]	; (8007470 <moveStraight+0x140>)
 800737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007380:	43db      	mvns	r3, r3
 8007382:	4a3c      	ldr	r2, [pc, #240]	; (8007474 <moveStraight+0x144>)
 8007384:	6812      	ldr	r2, [r2, #0]
 8007386:	1a9b      	subs	r3, r3, r2
 8007388:	461a      	mov	r2, r3
 800738a:	4b3c      	ldr	r3, [pc, #240]	; (800747c <moveStraight+0x14c>)
 800738c:	601a      	str	r2, [r3, #0]

		error = l_dist - r_dist;
 800738e:	4b3a      	ldr	r3, [pc, #232]	; (8007478 <moveStraight+0x148>)
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	4b3a      	ldr	r3, [pc, #232]	; (800747c <moveStraight+0x14c>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	4a39      	ldr	r2, [pc, #228]	; (8007480 <moveStraight+0x150>)
 800739a:	6013      	str	r3, [r2, #0]
		I = I + error;
 800739c:	4b39      	ldr	r3, [pc, #228]	; (8007484 <moveStraight+0x154>)
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	4b37      	ldr	r3, [pc, #220]	; (8007480 <moveStraight+0x150>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4413      	add	r3, r2
 80073a6:	4a37      	ldr	r2, [pc, #220]	; (8007484 <moveStraight+0x154>)
 80073a8:	6013      	str	r3, [r2, #0]

		correction = (float)(error * StKp + I * StKi + (error - lastErr) * StKd) / 50.0;
 80073aa:	4b35      	ldr	r3, [pc, #212]	; (8007480 <moveStraight+0x150>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80073be:	4b31      	ldr	r3, [pc, #196]	; (8007484 <moveStraight+0x154>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	ee07 3a90 	vmov	s15, r3
 80073c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073ca:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8007488 <moveStraight+0x158>
 80073ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80073d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80073d6:	4b2a      	ldr	r3, [pc, #168]	; (8007480 <moveStraight+0x150>)
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	4b2c      	ldr	r3, [pc, #176]	; (800748c <moveStraight+0x15c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	ee07 3a90 	vmov	s15, r3
 80073e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073e8:	eddf 6a27 	vldr	s13, [pc, #156]	; 8007488 <moveStraight+0x158>
 80073ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80073f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80073f4:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007490 <moveStraight+0x160>
 80073f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073fc:	4b25      	ldr	r3, [pc, #148]	; (8007494 <moveStraight+0x164>)
 80073fe:	edc3 7a00 	vstr	s15, [r3]
		lastErr = error;
 8007402:	4b1f      	ldr	r3, [pc, #124]	; (8007480 <moveStraight+0x150>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a21      	ldr	r2, [pc, #132]	; (800748c <moveStraight+0x15c>)
 8007408:	6013      	str	r3, [r2, #0]

		if (l_dist < count && r_dist < count)
 800740a:	4b1b      	ldr	r3, [pc, #108]	; (8007478 <moveStraight+0x148>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	429a      	cmp	r2, r3
 8007412:	dd1d      	ble.n	8007450 <moveStraight+0x120>
 8007414:	4b19      	ldr	r3, [pc, #100]	; (800747c <moveStraight+0x14c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	429a      	cmp	r2, r3
 800741c:	dd18      	ble.n	8007450 <moveStraight+0x120>
		{
			setLeftWheel(base_speed_l - correction);
 800741e:	4b1e      	ldr	r3, [pc, #120]	; (8007498 <moveStraight+0x168>)
 8007420:	ed93 7a00 	vldr	s14, [r3]
 8007424:	4b1b      	ldr	r3, [pc, #108]	; (8007494 <moveStraight+0x164>)
 8007426:	edd3 7a00 	vldr	s15, [r3]
 800742a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800742e:	eeb0 0a67 	vmov.f32	s0, s15
 8007432:	f7ff fe85 	bl	8007140 <setLeftWheel>
			setRightWheel(base_speed_r + correction);
 8007436:	4b19      	ldr	r3, [pc, #100]	; (800749c <moveStraight+0x16c>)
 8007438:	ed93 7a00 	vldr	s14, [r3]
 800743c:	4b15      	ldr	r3, [pc, #84]	; (8007494 <moveStraight+0x164>)
 800743e:	edd3 7a00 	vldr	s15, [r3]
 8007442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007446:	eeb0 0a67 	vmov.f32	s0, s15
 800744a:	f7ff feeb 	bl	8007224 <setRightWheel>
		l_dist = l_position - l_start;
 800744e:	e78c      	b.n	800736a <moveStraight+0x3a>
		}
		else
		{
			STOP_ROBOT;
 8007450:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8007488 <moveStraight+0x158>
 8007454:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007488 <moveStraight+0x158>
 8007458:	f7ff ff56 	bl	8007308 <setWheels>
			break;
 800745c:	bf00      	nop
		}
	}
	//	return true;
}
 800745e:	bf00      	nop
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	0000000c 	.word	0x0000000c
 800746c:	200018a4 	.word	0x200018a4
 8007470:	40000c00 	.word	0x40000c00
 8007474:	200018a8 	.word	0x200018a8
 8007478:	200018ac 	.word	0x200018ac
 800747c:	200018b0 	.word	0x200018b0
 8007480:	200018b4 	.word	0x200018b4
 8007484:	200018bc 	.word	0x200018bc
 8007488:	00000000 	.word	0x00000000
 800748c:	200018b8 	.word	0x200018b8
 8007490:	42480000 	.word	0x42480000
 8007494:	200018c0 	.word	0x200018c0
 8007498:	20000018 	.word	0x20000018
 800749c:	2000001c 	.word	0x2000001c

080074a0 <turnGyroLR>:
	}
}

// TURN USING GYRO
void turnGyroLR(float angle)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	ed87 0a01 	vstr	s0, [r7, #4]
	bool thres = true;
 80074aa:	2301      	movs	r3, #1
 80074ac:	73fb      	strb	r3, [r7, #15]
	TIM13_IT_START;
 80074ae:	488e      	ldr	r0, [pc, #568]	; (80076e8 <turnGyroLR+0x248>)
 80074b0:	f7fd fe34 	bl	800511c <HAL_TIM_Base_Start_IT>
	LED6_ON;
 80074b4:	2201      	movs	r2, #1
 80074b6:	2104      	movs	r1, #4
 80074b8:	488c      	ldr	r0, [pc, #560]	; (80076ec <turnGyroLR+0x24c>)
 80074ba:	f7fc fadd 	bl	8003a78 <HAL_GPIO_WritePin>

	Angle_Z = 0;
 80074be:	4b8c      	ldr	r3, [pc, #560]	; (80076f0 <turnGyroLR+0x250>)
 80074c0:	f04f 0200 	mov.w	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
	l_start = l_position;
 80074c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	461a      	mov	r2, r3
 80074ce:	4b89      	ldr	r3, [pc, #548]	; (80076f4 <turnGyroLR+0x254>)
 80074d0:	601a      	str	r2, [r3, #0]
	r_start = r_position;
 80074d2:	4b89      	ldr	r3, [pc, #548]	; (80076f8 <turnGyroLR+0x258>)
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	43db      	mvns	r3, r3
 80074d8:	4a88      	ldr	r2, [pc, #544]	; (80076fc <turnGyroLR+0x25c>)
 80074da:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if (thres && (abs(Angle_Z - angle) > 10.0))
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d079      	beq.n	80075d6 <turnGyroLR+0x136>
 80074e2:	4b83      	ldr	r3, [pc, #524]	; (80076f0 <turnGyroLR+0x250>)
 80074e4:	ed93 7a00 	vldr	s14, [r3]
 80074e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80074ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074f4:	ee17 3a90 	vmov	r3, s15
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	bfb8      	it	lt
 80074fc:	425b      	neglt	r3, r3
 80074fe:	2b0a      	cmp	r3, #10
 8007500:	dd69      	ble.n	80075d6 <turnGyroLR+0x136>
		{
			l_dist = l_start - l_position;
 8007502:	4b7c      	ldr	r3, [pc, #496]	; (80076f4 <turnGyroLR+0x254>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	461a      	mov	r2, r3
 8007512:	4b7b      	ldr	r3, [pc, #492]	; (8007700 <turnGyroLR+0x260>)
 8007514:	601a      	str	r2, [r3, #0]
			r_dist = -r_start + r_position;
 8007516:	4b79      	ldr	r3, [pc, #484]	; (80076fc <turnGyroLR+0x25c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	43da      	mvns	r2, r3
 800751c:	4b76      	ldr	r3, [pc, #472]	; (80076f8 <turnGyroLR+0x258>)
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	461a      	mov	r2, r3
 8007524:	4b77      	ldr	r3, [pc, #476]	; (8007704 <turnGyroLR+0x264>)
 8007526:	601a      	str	r2, [r3, #0]

			error = l_dist - r_dist;
 8007528:	4b75      	ldr	r3, [pc, #468]	; (8007700 <turnGyroLR+0x260>)
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	4b75      	ldr	r3, [pc, #468]	; (8007704 <turnGyroLR+0x264>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	4a75      	ldr	r2, [pc, #468]	; (8007708 <turnGyroLR+0x268>)
 8007534:	6013      	str	r3, [r2, #0]
			I = I + error;
 8007536:	4b75      	ldr	r3, [pc, #468]	; (800770c <turnGyroLR+0x26c>)
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	4b73      	ldr	r3, [pc, #460]	; (8007708 <turnGyroLR+0x268>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4413      	add	r3, r2
 8007540:	4a72      	ldr	r2, [pc, #456]	; (800770c <turnGyroLR+0x26c>)
 8007542:	6013      	str	r3, [r2, #0]

			correction = (float)(error * StKp + I * StKi + (error - lastErr) * StKd) / 50.0;
 8007544:	4b70      	ldr	r3, [pc, #448]	; (8007708 <turnGyroLR+0x268>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	ee07 3a90 	vmov	s15, r3
 800754c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007550:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007554:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007558:	4b6c      	ldr	r3, [pc, #432]	; (800770c <turnGyroLR+0x26c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	ee07 3a90 	vmov	s15, r3
 8007560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007564:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8007710 <turnGyroLR+0x270>
 8007568:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800756c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007570:	4b65      	ldr	r3, [pc, #404]	; (8007708 <turnGyroLR+0x268>)
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	4b67      	ldr	r3, [pc, #412]	; (8007714 <turnGyroLR+0x274>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007582:	eddf 6a63 	vldr	s13, [pc, #396]	; 8007710 <turnGyroLR+0x270>
 8007586:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800758a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800758e:	eddf 6a62 	vldr	s13, [pc, #392]	; 8007718 <turnGyroLR+0x278>
 8007592:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007596:	4b61      	ldr	r3, [pc, #388]	; (800771c <turnGyroLR+0x27c>)
 8007598:	edc3 7a00 	vstr	s15, [r3]
			lastErr = error;
 800759c:	4b5a      	ldr	r3, [pc, #360]	; (8007708 <turnGyroLR+0x268>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a5c      	ldr	r2, [pc, #368]	; (8007714 <turnGyroLR+0x274>)
 80075a2:	6013      	str	r3, [r2, #0]

			setWheels(-(base_speed_l - correction), base_speed_r + correction);
 80075a4:	4b5e      	ldr	r3, [pc, #376]	; (8007720 <turnGyroLR+0x280>)
 80075a6:	ed93 7a00 	vldr	s14, [r3]
 80075aa:	4b5c      	ldr	r3, [pc, #368]	; (800771c <turnGyroLR+0x27c>)
 80075ac:	edd3 7a00 	vldr	s15, [r3]
 80075b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075b4:	eef1 6a67 	vneg.f32	s13, s15
 80075b8:	4b5a      	ldr	r3, [pc, #360]	; (8007724 <turnGyroLR+0x284>)
 80075ba:	ed93 7a00 	vldr	s14, [r3]
 80075be:	4b57      	ldr	r3, [pc, #348]	; (800771c <turnGyroLR+0x27c>)
 80075c0:	edd3 7a00 	vldr	s15, [r3]
 80075c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075c8:	eef0 0a67 	vmov.f32	s1, s15
 80075cc:	eeb0 0a66 	vmov.f32	s0, s13
 80075d0:	f7ff fe9a 	bl	8007308 <setWheels>
 80075d4:	e07b      	b.n	80076ce <turnGyroLR+0x22e>
		}
		else
		{
			thres = false;
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]
			correction = .002;
 80075da:	4b50      	ldr	r3, [pc, #320]	; (800771c <turnGyroLR+0x27c>)
 80075dc:	4a52      	ldr	r2, [pc, #328]	; (8007728 <turnGyroLR+0x288>)
 80075de:	601a      	str	r2, [r3, #0]
			if (abs(correction) > .001)
 80075e0:	4b4e      	ldr	r3, [pc, #312]	; (800771c <turnGyroLR+0x27c>)
 80075e2:	edd3 7a00 	vldr	s15, [r3]
 80075e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075ea:	ee17 3a90 	vmov	r3, s15
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	bfb8      	it	lt
 80075f2:	425b      	neglt	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	dd63      	ble.n	80076c0 <turnGyroLR+0x220>
			{
				error = Angle_Z - angle;
 80075f8:	4b3d      	ldr	r3, [pc, #244]	; (80076f0 <turnGyroLR+0x250>)
 80075fa:	ed93 7a00 	vldr	s14, [r3]
 80075fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8007602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800760a:	ee17 2a90 	vmov	r2, s15
 800760e:	4b3e      	ldr	r3, [pc, #248]	; (8007708 <turnGyroLR+0x268>)
 8007610:	601a      	str	r2, [r3, #0]
				I = I + error;
 8007612:	4b3e      	ldr	r3, [pc, #248]	; (800770c <turnGyroLR+0x26c>)
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	4b3c      	ldr	r3, [pc, #240]	; (8007708 <turnGyroLR+0x268>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4413      	add	r3, r2
 800761c:	4a3b      	ldr	r2, [pc, #236]	; (800770c <turnGyroLR+0x26c>)
 800761e:	6013      	str	r3, [r2, #0]

				correction = (float)(error * RTKp + I * RTKi + (error - lastErr) * RTKd) / 10;
 8007620:	4b39      	ldr	r3, [pc, #228]	; (8007708 <turnGyroLR+0x268>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	ee07 3a90 	vmov	s15, r3
 8007628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800762c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007630:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007634:	4b35      	ldr	r3, [pc, #212]	; (800770c <turnGyroLR+0x26c>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	ee07 3a90 	vmov	s15, r3
 800763c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007640:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800772c <turnGyroLR+0x28c>
 8007644:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007648:	ee37 7a27 	vadd.f32	s14, s14, s15
 800764c:	4b2e      	ldr	r3, [pc, #184]	; (8007708 <turnGyroLR+0x268>)
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	4b30      	ldr	r3, [pc, #192]	; (8007714 <turnGyroLR+0x274>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800765e:	eddf 6a34 	vldr	s13, [pc, #208]	; 8007730 <turnGyroLR+0x290>
 8007662:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800766a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800766e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007672:	4b2a      	ldr	r3, [pc, #168]	; (800771c <turnGyroLR+0x27c>)
 8007674:	edc3 7a00 	vstr	s15, [r3]
				correction = (correction > base_speed_l) ? .2 : base_speed_l;
 8007678:	4b28      	ldr	r3, [pc, #160]	; (800771c <turnGyroLR+0x27c>)
 800767a:	ed93 7a00 	vldr	s14, [r3]
 800767e:	4b28      	ldr	r3, [pc, #160]	; (8007720 <turnGyroLR+0x280>)
 8007680:	edd3 7a00 	vldr	s15, [r3]
 8007684:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800768c:	dd01      	ble.n	8007692 <turnGyroLR+0x1f2>
 800768e:	4b29      	ldr	r3, [pc, #164]	; (8007734 <turnGyroLR+0x294>)
 8007690:	e001      	b.n	8007696 <turnGyroLR+0x1f6>
 8007692:	4b23      	ldr	r3, [pc, #140]	; (8007720 <turnGyroLR+0x280>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a21      	ldr	r2, [pc, #132]	; (800771c <turnGyroLR+0x27c>)
 8007698:	6013      	str	r3, [r2, #0]
				lastErr = error;
 800769a:	4b1b      	ldr	r3, [pc, #108]	; (8007708 <turnGyroLR+0x268>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a1d      	ldr	r2, [pc, #116]	; (8007714 <turnGyroLR+0x274>)
 80076a0:	6013      	str	r3, [r2, #0]

				setWheels(-correction, correction);
 80076a2:	4b1e      	ldr	r3, [pc, #120]	; (800771c <turnGyroLR+0x27c>)
 80076a4:	edd3 7a00 	vldr	s15, [r3]
 80076a8:	eef1 7a67 	vneg.f32	s15, s15
 80076ac:	4b1b      	ldr	r3, [pc, #108]	; (800771c <turnGyroLR+0x27c>)
 80076ae:	ed93 7a00 	vldr	s14, [r3]
 80076b2:	eef0 0a47 	vmov.f32	s1, s14
 80076b6:	eeb0 0a67 	vmov.f32	s0, s15
 80076ba:	f7ff fe25 	bl	8007308 <setWheels>
 80076be:	e70d      	b.n	80074dc <turnGyroLR+0x3c>
			}
			else
			{
				STOP_ROBOT;
 80076c0:	eddf 0a13 	vldr	s1, [pc, #76]	; 8007710 <turnGyroLR+0x270>
 80076c4:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8007710 <turnGyroLR+0x270>
 80076c8:	f7ff fe1e 	bl	8007308 <setWheels>
				break;
 80076cc:	e000      	b.n	80076d0 <turnGyroLR+0x230>
		if (thres && (abs(Angle_Z - angle) > 10.0))
 80076ce:	e705      	b.n	80074dc <turnGyroLR+0x3c>
			}
		}
	}
	TIM13_IT_STOP;
 80076d0:	4805      	ldr	r0, [pc, #20]	; (80076e8 <turnGyroLR+0x248>)
 80076d2:	f7fd fd93 	bl	80051fc <HAL_TIM_Base_Stop_IT>
	LED6_OFF;
 80076d6:	2200      	movs	r2, #0
 80076d8:	2104      	movs	r1, #4
 80076da:	4804      	ldr	r0, [pc, #16]	; (80076ec <turnGyroLR+0x24c>)
 80076dc:	f7fc f9cc 	bl	8003a78 <HAL_GPIO_WritePin>
}
 80076e0:	bf00      	nop
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	200005ec 	.word	0x200005ec
 80076ec:	40020c00 	.word	0x40020c00
 80076f0:	200008e0 	.word	0x200008e0
 80076f4:	200018a4 	.word	0x200018a4
 80076f8:	40000c00 	.word	0x40000c00
 80076fc:	200018a8 	.word	0x200018a8
 8007700:	200018ac 	.word	0x200018ac
 8007704:	200018b0 	.word	0x200018b0
 8007708:	200018b4 	.word	0x200018b4
 800770c:	200018bc 	.word	0x200018bc
 8007710:	00000000 	.word	0x00000000
 8007714:	200018b8 	.word	0x200018b8
 8007718:	42480000 	.word	0x42480000
 800771c:	200018c0 	.word	0x200018c0
 8007720:	20000018 	.word	0x20000018
 8007724:	2000001c 	.word	0x2000001c
 8007728:	3b03126f 	.word	0x3b03126f
 800772c:	3dcccccd 	.word	0x3dcccccd
 8007730:	3f19999a 	.word	0x3f19999a
 8007734:	3e4ccccd 	.word	0x3e4ccccd

08007738 <cellTurnLeft>:
	STOP_ROBOT;
}

float ang = 85;

void cellTurnLeft(){
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
	moveStraight(14.2);
 800773c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007770 <cellTurnLeft+0x38>
 8007740:	f7ff fdf6 	bl	8007330 <moveStraight>
	HAL_Delay(1000);
 8007744:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007748:	f7fa ffda 	bl	8002700 <HAL_Delay>
	turnGyroLR(ang);
 800774c:	4b09      	ldr	r3, [pc, #36]	; (8007774 <cellTurnLeft+0x3c>)
 800774e:	edd3 7a00 	vldr	s15, [r3]
 8007752:	eeb0 0a67 	vmov.f32	s0, s15
 8007756:	f7ff fea3 	bl	80074a0 <turnGyroLR>
	HAL_Delay(1000);
 800775a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800775e:	f7fa ffcf 	bl	8002700 <HAL_Delay>
	moveStraight(1.8);
 8007762:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8007778 <cellTurnLeft+0x40>
 8007766:	f7ff fde3 	bl	8007330 <moveStraight>
}
 800776a:	bf00      	nop
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	41633333 	.word	0x41633333
 8007774:	20000020 	.word	0x20000020
 8007778:	3fe66666 	.word	0x3fe66666

0800777c <cellTurnRight>:

void cellTurnRight(){
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0
	moveStraight(14.2);
 8007780:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80077b8 <cellTurnRight+0x3c>
 8007784:	f7ff fdd4 	bl	8007330 <moveStraight>
	HAL_Delay(1000);
 8007788:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800778c:	f7fa ffb8 	bl	8002700 <HAL_Delay>
	turnGyroLR(-ang);
 8007790:	4b0a      	ldr	r3, [pc, #40]	; (80077bc <cellTurnRight+0x40>)
 8007792:	edd3 7a00 	vldr	s15, [r3]
 8007796:	eef1 7a67 	vneg.f32	s15, s15
 800779a:	eeb0 0a67 	vmov.f32	s0, s15
 800779e:	f7ff fe7f 	bl	80074a0 <turnGyroLR>
	HAL_Delay(1000);
 80077a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80077a6:	f7fa ffab 	bl	8002700 <HAL_Delay>
	moveStraight(1.8);
 80077aa:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80077c0 <cellTurnRight+0x44>
 80077ae:	f7ff fdbf 	bl	8007330 <moveStraight>
}
 80077b2:	bf00      	nop
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	41633333 	.word	0x41633333
 80077bc:	20000020 	.word	0x20000020
 80077c0:	3fe66666 	.word	0x3fe66666

080077c4 <cellTurnBack>:

void cellTurnBack(){
 80077c4:	b580      	push	{r7, lr}
 80077c6:	af00      	add	r7, sp, #0
	moveStraight(14.2);
 80077c8:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8007810 <cellTurnBack+0x4c>
 80077cc:	f7ff fdb0 	bl	8007330 <moveStraight>
	HAL_Delay(1000);
 80077d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80077d4:	f7fa ff94 	bl	8002700 <HAL_Delay>
	turnGyroLR(ang);
 80077d8:	4b0e      	ldr	r3, [pc, #56]	; (8007814 <cellTurnBack+0x50>)
 80077da:	edd3 7a00 	vldr	s15, [r3]
 80077de:	eeb0 0a67 	vmov.f32	s0, s15
 80077e2:	f7ff fe5d 	bl	80074a0 <turnGyroLR>
	HAL_Delay(1000);
 80077e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80077ea:	f7fa ff89 	bl	8002700 <HAL_Delay>
	turnGyroLR(ang);
 80077ee:	4b09      	ldr	r3, [pc, #36]	; (8007814 <cellTurnBack+0x50>)
 80077f0:	edd3 7a00 	vldr	s15, [r3]
 80077f4:	eeb0 0a67 	vmov.f32	s0, s15
 80077f8:	f7ff fe52 	bl	80074a0 <turnGyroLR>
	HAL_Delay(1000);
 80077fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007800:	f7fa ff7e 	bl	8002700 <HAL_Delay>
	moveStraight(1.8);
 8007804:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8007818 <cellTurnBack+0x54>
 8007808:	f7ff fd92 	bl	8007330 <moveStraight>
}
 800780c:	bf00      	nop
 800780e:	bd80      	pop	{r7, pc}
 8007810:	41633333 	.word	0x41633333
 8007814:	20000020 	.word	0x20000020
 8007818:	3fe66666 	.word	0x3fe66666

0800781c <readSensor>:
bool R = false;
bool F = false;

/*read IR sensors*/
void readSensor(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8007820:	4b73      	ldr	r3, [pc, #460]	; (80079f0 <readSensor+0x1d4>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2200      	movs	r2, #0
 8007826:	625a      	str	r2, [r3, #36]	; 0x24
	//read DC value	
	LFSensor = read_LF_Sensor;	
 8007828:	2101      	movs	r1, #1
 800782a:	2000      	movs	r0, #0
 800782c:	f7ff fb96 	bl	8006f5c <readADC>
 8007830:	4603      	mov	r3, r0
 8007832:	461a      	mov	r2, r3
 8007834:	4b6f      	ldr	r3, [pc, #444]	; (80079f4 <readSensor+0x1d8>)
 8007836:	601a      	str	r2, [r3, #0]
	RFSensor = read_RF_Sensor;	
 8007838:	2101      	movs	r1, #1
 800783a:	2001      	movs	r0, #1
 800783c:	f7ff fb8e 	bl	8006f5c <readADC>
 8007840:	4603      	mov	r3, r0
 8007842:	461a      	mov	r2, r3
 8007844:	4b6c      	ldr	r3, [pc, #432]	; (80079f8 <readSensor+0x1dc>)
 8007846:	601a      	str	r2, [r3, #0]
	DLSensor = read_DL_Sensor;
 8007848:	2101      	movs	r1, #1
 800784a:	2003      	movs	r0, #3
 800784c:	f7ff fb86 	bl	8006f5c <readADC>
 8007850:	4603      	mov	r3, r0
 8007852:	461a      	mov	r2, r3
 8007854:	4b69      	ldr	r3, [pc, #420]	; (80079fc <readSensor+0x1e0>)
 8007856:	601a      	str	r2, [r3, #0]
	DRSensor = read_DR_Sensor;	
 8007858:	2101      	movs	r1, #1
 800785a:	2002      	movs	r0, #2
 800785c:	f7ff fb7e 	bl	8006f5c <readADC>
 8007860:	4603      	mov	r3, r0
 8007862:	461a      	mov	r2, r3
 8007864:	4b66      	ldr	r3, [pc, #408]	; (8007a00 <readSensor+0x1e4>)
 8007866:	601a      	str	r2, [r3, #0]
	
	
    //left front sensor
	LF_EM_ON;
 8007868:	2201      	movs	r2, #1
 800786a:	2180      	movs	r1, #128	; 0x80
 800786c:	4865      	ldr	r0, [pc, #404]	; (8007a04 <readSensor+0x1e8>)
 800786e:	f7fc f903 	bl	8003a78 <HAL_GPIO_WritePin>
	LFSensor = read_LF_Sensor - LFSensor;
 8007872:	2101      	movs	r1, #1
 8007874:	2000      	movs	r0, #0
 8007876:	f7ff fb71 	bl	8006f5c <readADC>
 800787a:	4603      	mov	r3, r0
 800787c:	461a      	mov	r2, r3
 800787e:	4b5d      	ldr	r3, [pc, #372]	; (80079f4 <readSensor+0x1d8>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	4a5b      	ldr	r2, [pc, #364]	; (80079f4 <readSensor+0x1d8>)
 8007886:	6013      	str	r3, [r2, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<120);
 8007888:	bf00      	nop
 800788a:	4b59      	ldr	r3, [pc, #356]	; (80079f0 <readSensor+0x1d4>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007890:	2b77      	cmp	r3, #119	; 0x77
 8007892:	d9fa      	bls.n	800788a <readSensor+0x6e>
	LF_EM_OFF;
 8007894:	2200      	movs	r2, #0
 8007896:	2180      	movs	r1, #128	; 0x80
 8007898:	485a      	ldr	r0, [pc, #360]	; (8007a04 <readSensor+0x1e8>)
 800789a:	f7fc f8ed 	bl	8003a78 <HAL_GPIO_WritePin>
	if(LFSensor < 0)//error check
 800789e:	4b55      	ldr	r3, [pc, #340]	; (80079f4 <readSensor+0x1d8>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	da02      	bge.n	80078ac <readSensor+0x90>
		LFSensor = 0;
 80078a6:	4b53      	ldr	r3, [pc, #332]	; (80079f4 <readSensor+0x1d8>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<280);
 80078ac:	bf00      	nop
 80078ae:	4b50      	ldr	r3, [pc, #320]	; (80079f0 <readSensor+0x1d4>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80078b8:	d3f9      	bcc.n	80078ae <readSensor+0x92>

	//right front sensor
	RF_EM_ON;
 80078ba:	2201      	movs	r2, #1
 80078bc:	2102      	movs	r1, #2
 80078be:	4851      	ldr	r0, [pc, #324]	; (8007a04 <readSensor+0x1e8>)
 80078c0:	f7fc f8da 	bl	8003a78 <HAL_GPIO_WritePin>
	RFSensor = read_RF_Sensor - RFSensor;
 80078c4:	2101      	movs	r1, #1
 80078c6:	2001      	movs	r0, #1
 80078c8:	f7ff fb48 	bl	8006f5c <readADC>
 80078cc:	4603      	mov	r3, r0
 80078ce:	461a      	mov	r2, r3
 80078d0:	4b49      	ldr	r3, [pc, #292]	; (80079f8 <readSensor+0x1dc>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	4a48      	ldr	r2, [pc, #288]	; (80079f8 <readSensor+0x1dc>)
 80078d8:	6013      	str	r3, [r2, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<400);
 80078da:	bf00      	nop
 80078dc:	4b44      	ldr	r3, [pc, #272]	; (80079f0 <readSensor+0x1d4>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80078e6:	d3f9      	bcc.n	80078dc <readSensor+0xc0>
	RF_EM_OFF;
 80078e8:	2200      	movs	r2, #0
 80078ea:	2102      	movs	r1, #2
 80078ec:	4845      	ldr	r0, [pc, #276]	; (8007a04 <readSensor+0x1e8>)
 80078ee:	f7fc f8c3 	bl	8003a78 <HAL_GPIO_WritePin>
	if(RFSensor < 0)
 80078f2:	4b41      	ldr	r3, [pc, #260]	; (80079f8 <readSensor+0x1dc>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	da02      	bge.n	8007900 <readSensor+0xe4>
		RFSensor = 0;
 80078fa:	4b3f      	ldr	r3, [pc, #252]	; (80079f8 <readSensor+0x1dc>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<560);
 8007900:	bf00      	nop
 8007902:	4b3b      	ldr	r3, [pc, #236]	; (80079f0 <readSensor+0x1d4>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
 800790c:	d3f9      	bcc.n	8007902 <readSensor+0xe6>

    //diagonal sensors
	SIDE_EM_ON;
 800790e:	2201      	movs	r2, #1
 8007910:	2120      	movs	r1, #32
 8007912:	483c      	ldr	r0, [pc, #240]	; (8007a04 <readSensor+0x1e8>)
 8007914:	f7fc f8b0 	bl	8003a78 <HAL_GPIO_WritePin>
	while(__HAL_TIM_GET_COUNTER(&htim1)<680);
 8007918:	bf00      	nop
 800791a:	4b35      	ldr	r3, [pc, #212]	; (80079f0 <readSensor+0x1d4>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8007924:	d3f9      	bcc.n	800791a <readSensor+0xfe>
	DLSensor = read_DL_Sensor - DLSensor;
 8007926:	2101      	movs	r1, #1
 8007928:	2003      	movs	r0, #3
 800792a:	f7ff fb17 	bl	8006f5c <readADC>
 800792e:	4603      	mov	r3, r0
 8007930:	461a      	mov	r2, r3
 8007932:	4b32      	ldr	r3, [pc, #200]	; (80079fc <readSensor+0x1e0>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	4a30      	ldr	r2, [pc, #192]	; (80079fc <readSensor+0x1e0>)
 800793a:	6013      	str	r3, [r2, #0]
	DRSensor = read_DR_Sensor - DRSensor;
 800793c:	2101      	movs	r1, #1
 800793e:	2002      	movs	r0, #2
 8007940:	f7ff fb0c 	bl	8006f5c <readADC>
 8007944:	4603      	mov	r3, r0
 8007946:	461a      	mov	r2, r3
 8007948:	4b2d      	ldr	r3, [pc, #180]	; (8007a00 <readSensor+0x1e4>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	4a2c      	ldr	r2, [pc, #176]	; (8007a00 <readSensor+0x1e4>)
 8007950:	6013      	str	r3, [r2, #0]
    SIDE_EM_OFF;
 8007952:	2200      	movs	r2, #0
 8007954:	2120      	movs	r1, #32
 8007956:	482b      	ldr	r0, [pc, #172]	; (8007a04 <readSensor+0x1e8>)
 8007958:	f7fc f88e 	bl	8003a78 <HAL_GPIO_WritePin>
	if(DLSensor < 0)
 800795c:	4b27      	ldr	r3, [pc, #156]	; (80079fc <readSensor+0x1e0>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	da02      	bge.n	800796a <readSensor+0x14e>
		DLSensor = 0;
 8007964:	4b25      	ldr	r3, [pc, #148]	; (80079fc <readSensor+0x1e0>)
 8007966:	2200      	movs	r2, #0
 8007968:	601a      	str	r2, [r3, #0]
	if(DRSensor < 0)
 800796a:	4b25      	ldr	r3, [pc, #148]	; (8007a00 <readSensor+0x1e4>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	da02      	bge.n	8007978 <readSensor+0x15c>
		DRSensor = 0;
 8007972:	4b23      	ldr	r3, [pc, #140]	; (8007a00 <readSensor+0x1e4>)
 8007974:	2200      	movs	r2, #0
 8007976:	601a      	str	r2, [r3, #0]
	// while(__HAL_TIM_GET_COUNTER(&htim1)<500);
	
	readVolMeter();
 8007978:	f000 f86e 	bl	8007a58 <readVolMeter>
	
	LFSensor = LFSensor*reflectionRate/1000;
 800797c:	4b1d      	ldr	r3, [pc, #116]	; (80079f4 <readSensor+0x1d8>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a21      	ldr	r2, [pc, #132]	; (8007a08 <readSensor+0x1ec>)
 8007982:	6812      	ldr	r2, [r2, #0]
 8007984:	fb02 f303 	mul.w	r3, r2, r3
 8007988:	4a20      	ldr	r2, [pc, #128]	; (8007a0c <readSensor+0x1f0>)
 800798a:	fb82 1203 	smull	r1, r2, r2, r3
 800798e:	1192      	asrs	r2, r2, #6
 8007990:	17db      	asrs	r3, r3, #31
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	4a17      	ldr	r2, [pc, #92]	; (80079f4 <readSensor+0x1d8>)
 8007996:	6013      	str	r3, [r2, #0]
	RFSensor = RFSensor*reflectionRate/1000;
 8007998:	4b17      	ldr	r3, [pc, #92]	; (80079f8 <readSensor+0x1dc>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a1a      	ldr	r2, [pc, #104]	; (8007a08 <readSensor+0x1ec>)
 800799e:	6812      	ldr	r2, [r2, #0]
 80079a0:	fb02 f303 	mul.w	r3, r2, r3
 80079a4:	4a19      	ldr	r2, [pc, #100]	; (8007a0c <readSensor+0x1f0>)
 80079a6:	fb82 1203 	smull	r1, r2, r2, r3
 80079aa:	1192      	asrs	r2, r2, #6
 80079ac:	17db      	asrs	r3, r3, #31
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	4a11      	ldr	r2, [pc, #68]	; (80079f8 <readSensor+0x1dc>)
 80079b2:	6013      	str	r3, [r2, #0]
	DLSensor = DLSensor*reflectionRate/1000;
 80079b4:	4b11      	ldr	r3, [pc, #68]	; (80079fc <readSensor+0x1e0>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a13      	ldr	r2, [pc, #76]	; (8007a08 <readSensor+0x1ec>)
 80079ba:	6812      	ldr	r2, [r2, #0]
 80079bc:	fb02 f303 	mul.w	r3, r2, r3
 80079c0:	4a12      	ldr	r2, [pc, #72]	; (8007a0c <readSensor+0x1f0>)
 80079c2:	fb82 1203 	smull	r1, r2, r2, r3
 80079c6:	1192      	asrs	r2, r2, #6
 80079c8:	17db      	asrs	r3, r3, #31
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	4a0b      	ldr	r2, [pc, #44]	; (80079fc <readSensor+0x1e0>)
 80079ce:	6013      	str	r3, [r2, #0]
	DRSensor = DRSensor*reflectionRate/1000;
 80079d0:	4b0b      	ldr	r3, [pc, #44]	; (8007a00 <readSensor+0x1e4>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a0c      	ldr	r2, [pc, #48]	; (8007a08 <readSensor+0x1ec>)
 80079d6:	6812      	ldr	r2, [r2, #0]
 80079d8:	fb02 f303 	mul.w	r3, r2, r3
 80079dc:	4a0b      	ldr	r2, [pc, #44]	; (8007a0c <readSensor+0x1f0>)
 80079de:	fb82 1203 	smull	r1, r2, r2, r3
 80079e2:	1192      	asrs	r2, r2, #6
 80079e4:	17db      	asrs	r3, r3, #31
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	4a05      	ldr	r2, [pc, #20]	; (8007a00 <readSensor+0x1e4>)
 80079ea:	6013      	str	r3, [r2, #0]
	
}
 80079ec:	bf00      	nop
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	2000043c 	.word	0x2000043c
 80079f4:	200018cc 	.word	0x200018cc
 80079f8:	200018d0 	.word	0x200018d0
 80079fc:	200018d4 	.word	0x200018d4
 8007a00:	200018d8 	.word	0x200018d8
 8007a04:	40020800 	.word	0x40020800
 8007a08:	20000024 	.word	0x20000024
 8007a0c:	10624dd3 	.word	0x10624dd3

08007a10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  if (htim == &htim14 )
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a0c      	ldr	r2, [pc, #48]	; (8007a4c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d106      	bne.n	8007a2e <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
    readSensor();
 8007a20:	f7ff fefc 	bl	800781c <readSensor>
	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8007a24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007a28:	4809      	ldr	r0, [pc, #36]	; (8007a50 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8007a2a:	f7fc f83e 	bl	8003aaa <HAL_GPIO_TogglePin>
  }
  if (htim == &htim13)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a08      	ldr	r2, [pc, #32]	; (8007a54 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d106      	bne.n	8007a44 <HAL_TIM_PeriodElapsedCallback+0x34>
  {
	HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8007a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007a3a:	4805      	ldr	r0, [pc, #20]	; (8007a50 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8007a3c:	f7fc f835 	bl	8003aaa <HAL_GPIO_TogglePin>
	L3GD20_loop();
 8007a40:	f7ff f9ba 	bl	8006db8 <L3GD20_loop>
  }
}
 8007a44:	bf00      	nop
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20000634 	.word	0x20000634
 8007a50:	40020000 	.word	0x40020000
 8007a54:	200005ec 	.word	0x200005ec

08007a58 <readVolMeter>:



/*read voltage meter*/
void readVolMeter(void)
{          //3240 = 7.85V
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	af00      	add	r7, sp, #0
	volMeter = read_Vol_Meter;//raw value
 8007a5c:	2101      	movs	r1, #1
 8007a5e:	2004      	movs	r0, #4
 8007a60:	f7ff fa7c 	bl	8006f5c <readADC>
 8007a64:	4603      	mov	r3, r0
 8007a66:	461a      	mov	r2, r3
 8007a68:	4b09      	ldr	r3, [pc, #36]	; (8007a90 <readVolMeter+0x38>)
 8007a6a:	601a      	str	r2, [r3, #0]
	voltage = volMeter*809/3248;//actual voltage value  ex) 8.2V = 8200
 8007a6c:	4b08      	ldr	r3, [pc, #32]	; (8007a90 <readVolMeter+0x38>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f240 3229 	movw	r2, #809	; 0x329
 8007a74:	fb02 f303 	mul.w	r3, r2, r3
 8007a78:	4a06      	ldr	r2, [pc, #24]	; (8007a94 <readVolMeter+0x3c>)
 8007a7a:	fb82 1203 	smull	r1, r2, r2, r3
 8007a7e:	441a      	add	r2, r3
 8007a80:	12d2      	asrs	r2, r2, #11
 8007a82:	17db      	asrs	r3, r3, #31
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	4a04      	ldr	r2, [pc, #16]	; (8007a98 <readVolMeter+0x40>)
 8007a88:	6013      	str	r3, [r2, #0]
}
 8007a8a:	bf00      	nop
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	200018c4 	.word	0x200018c4
 8007a94:	a16b312f 	.word	0xa16b312f
 8007a98:	200018c8 	.word	0x200018c8

08007a9c <getSensorReadings>:
			return true;
		}
	return false;
}

void getSensorReadings() {
 8007a9c:	b480      	push	{r7}
 8007a9e:	af00      	add	r7, sp, #0
	static uint32_t t1 = 150;
	static uint32_t t2 = 100;

	if (DLSensor > t1 && DRSensor > t1 && DRSensor > t1 && RFSensor > t1){
 8007aa0:	4b5b      	ldr	r3, [pc, #364]	; (8007c10 <getSensorReadings+0x174>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	4b5b      	ldr	r3, [pc, #364]	; (8007c14 <getSensorReadings+0x178>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d91e      	bls.n	8007aec <getSensorReadings+0x50>
 8007aae:	4b5a      	ldr	r3, [pc, #360]	; (8007c18 <getSensorReadings+0x17c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	4b57      	ldr	r3, [pc, #348]	; (8007c14 <getSensorReadings+0x178>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d917      	bls.n	8007aec <getSensorReadings+0x50>
 8007abc:	4b56      	ldr	r3, [pc, #344]	; (8007c18 <getSensorReadings+0x17c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	4b54      	ldr	r3, [pc, #336]	; (8007c14 <getSensorReadings+0x178>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d910      	bls.n	8007aec <getSensorReadings+0x50>
 8007aca:	4b54      	ldr	r3, [pc, #336]	; (8007c1c <getSensorReadings+0x180>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	4b50      	ldr	r3, [pc, #320]	; (8007c14 <getSensorReadings+0x178>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d909      	bls.n	8007aec <getSensorReadings+0x50>
		F = true;
 8007ad8:	4b51      	ldr	r3, [pc, #324]	; (8007c20 <getSensorReadings+0x184>)
 8007ada:	2201      	movs	r2, #1
 8007adc:	701a      	strb	r2, [r3, #0]
		R = true;
 8007ade:	4b51      	ldr	r3, [pc, #324]	; (8007c24 <getSensorReadings+0x188>)
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	701a      	strb	r2, [r3, #0]
		L = true;
 8007ae4:	4b50      	ldr	r3, [pc, #320]	; (8007c28 <getSensorReadings+0x18c>)
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	701a      	strb	r2, [r3, #0]
 8007aea:	e08b      	b.n	8007c04 <getSensorReadings+0x168>
	} else if (DLSensor > t1 && DRSensor > t1){
 8007aec:	4b48      	ldr	r3, [pc, #288]	; (8007c10 <getSensorReadings+0x174>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	4b48      	ldr	r3, [pc, #288]	; (8007c14 <getSensorReadings+0x178>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d910      	bls.n	8007b1c <getSensorReadings+0x80>
 8007afa:	4b47      	ldr	r3, [pc, #284]	; (8007c18 <getSensorReadings+0x17c>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	4b44      	ldr	r3, [pc, #272]	; (8007c14 <getSensorReadings+0x178>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d909      	bls.n	8007b1c <getSensorReadings+0x80>
		F = false;
 8007b08:	4b45      	ldr	r3, [pc, #276]	; (8007c20 <getSensorReadings+0x184>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	701a      	strb	r2, [r3, #0]
		R = true;
 8007b0e:	4b45      	ldr	r3, [pc, #276]	; (8007c24 <getSensorReadings+0x188>)
 8007b10:	2201      	movs	r2, #1
 8007b12:	701a      	strb	r2, [r3, #0]
		L = true;
 8007b14:	4b44      	ldr	r3, [pc, #272]	; (8007c28 <getSensorReadings+0x18c>)
 8007b16:	2201      	movs	r2, #1
 8007b18:	701a      	strb	r2, [r3, #0]
 8007b1a:	e073      	b.n	8007c04 <getSensorReadings+0x168>
	} else if (LFSensor > t1 && DLSensor > t1){
 8007b1c:	4b43      	ldr	r3, [pc, #268]	; (8007c2c <getSensorReadings+0x190>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	461a      	mov	r2, r3
 8007b22:	4b3c      	ldr	r3, [pc, #240]	; (8007c14 <getSensorReadings+0x178>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d910      	bls.n	8007b4c <getSensorReadings+0xb0>
 8007b2a:	4b39      	ldr	r3, [pc, #228]	; (8007c10 <getSensorReadings+0x174>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	4b38      	ldr	r3, [pc, #224]	; (8007c14 <getSensorReadings+0x178>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d909      	bls.n	8007b4c <getSensorReadings+0xb0>
		F = true;
 8007b38:	4b39      	ldr	r3, [pc, #228]	; (8007c20 <getSensorReadings+0x184>)
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	701a      	strb	r2, [r3, #0]
		R = false;
 8007b3e:	4b39      	ldr	r3, [pc, #228]	; (8007c24 <getSensorReadings+0x188>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	701a      	strb	r2, [r3, #0]
		L = true;
 8007b44:	4b38      	ldr	r3, [pc, #224]	; (8007c28 <getSensorReadings+0x18c>)
 8007b46:	2201      	movs	r2, #1
 8007b48:	701a      	strb	r2, [r3, #0]
 8007b4a:	e05b      	b.n	8007c04 <getSensorReadings+0x168>
	} else if (RFSensor > t1 && DRSensor > t1){
 8007b4c:	4b33      	ldr	r3, [pc, #204]	; (8007c1c <getSensorReadings+0x180>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	461a      	mov	r2, r3
 8007b52:	4b30      	ldr	r3, [pc, #192]	; (8007c14 <getSensorReadings+0x178>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d910      	bls.n	8007b7c <getSensorReadings+0xe0>
 8007b5a:	4b2f      	ldr	r3, [pc, #188]	; (8007c18 <getSensorReadings+0x17c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	4b2c      	ldr	r3, [pc, #176]	; (8007c14 <getSensorReadings+0x178>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d909      	bls.n	8007b7c <getSensorReadings+0xe0>
		F = true;
 8007b68:	4b2d      	ldr	r3, [pc, #180]	; (8007c20 <getSensorReadings+0x184>)
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	701a      	strb	r2, [r3, #0]
		R = true;
 8007b6e:	4b2d      	ldr	r3, [pc, #180]	; (8007c24 <getSensorReadings+0x188>)
 8007b70:	2201      	movs	r2, #1
 8007b72:	701a      	strb	r2, [r3, #0]
		L = false;
 8007b74:	4b2c      	ldr	r3, [pc, #176]	; (8007c28 <getSensorReadings+0x18c>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	701a      	strb	r2, [r3, #0]
 8007b7a:	e043      	b.n	8007c04 <getSensorReadings+0x168>
	} else if (DLSensor > t1){
 8007b7c:	4b24      	ldr	r3, [pc, #144]	; (8007c10 <getSensorReadings+0x174>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	461a      	mov	r2, r3
 8007b82:	4b24      	ldr	r3, [pc, #144]	; (8007c14 <getSensorReadings+0x178>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d909      	bls.n	8007b9e <getSensorReadings+0x102>
		F = false;
 8007b8a:	4b25      	ldr	r3, [pc, #148]	; (8007c20 <getSensorReadings+0x184>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	701a      	strb	r2, [r3, #0]
		R = false;
 8007b90:	4b24      	ldr	r3, [pc, #144]	; (8007c24 <getSensorReadings+0x188>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	701a      	strb	r2, [r3, #0]
		L = true;
 8007b96:	4b24      	ldr	r3, [pc, #144]	; (8007c28 <getSensorReadings+0x18c>)
 8007b98:	2201      	movs	r2, #1
 8007b9a:	701a      	strb	r2, [r3, #0]
		R = false;
		L = false;
	}


}
 8007b9c:	e032      	b.n	8007c04 <getSensorReadings+0x168>
	} else if (DRSensor > t1){
 8007b9e:	4b1e      	ldr	r3, [pc, #120]	; (8007c18 <getSensorReadings+0x17c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	4b1b      	ldr	r3, [pc, #108]	; (8007c14 <getSensorReadings+0x178>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d909      	bls.n	8007bc0 <getSensorReadings+0x124>
		F = false;
 8007bac:	4b1c      	ldr	r3, [pc, #112]	; (8007c20 <getSensorReadings+0x184>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	701a      	strb	r2, [r3, #0]
		R = true;
 8007bb2:	4b1c      	ldr	r3, [pc, #112]	; (8007c24 <getSensorReadings+0x188>)
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	701a      	strb	r2, [r3, #0]
		L = false;
 8007bb8:	4b1b      	ldr	r3, [pc, #108]	; (8007c28 <getSensorReadings+0x18c>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	701a      	strb	r2, [r3, #0]
}
 8007bbe:	e021      	b.n	8007c04 <getSensorReadings+0x168>
	} else if (RFSensor > t2 || LFSensor > t2){
 8007bc0:	4b16      	ldr	r3, [pc, #88]	; (8007c1c <getSensorReadings+0x180>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	4b1a      	ldr	r3, [pc, #104]	; (8007c30 <getSensorReadings+0x194>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d806      	bhi.n	8007bdc <getSensorReadings+0x140>
 8007bce:	4b17      	ldr	r3, [pc, #92]	; (8007c2c <getSensorReadings+0x190>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	4b16      	ldr	r3, [pc, #88]	; (8007c30 <getSensorReadings+0x194>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d909      	bls.n	8007bf0 <getSensorReadings+0x154>
		F = true;
 8007bdc:	4b10      	ldr	r3, [pc, #64]	; (8007c20 <getSensorReadings+0x184>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	701a      	strb	r2, [r3, #0]
		R = false;
 8007be2:	4b10      	ldr	r3, [pc, #64]	; (8007c24 <getSensorReadings+0x188>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	701a      	strb	r2, [r3, #0]
		L = false;
 8007be8:	4b0f      	ldr	r3, [pc, #60]	; (8007c28 <getSensorReadings+0x18c>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	701a      	strb	r2, [r3, #0]
 8007bee:	e009      	b.n	8007c04 <getSensorReadings+0x168>
		F = false;
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <getSensorReadings+0x184>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	701a      	strb	r2, [r3, #0]
		R = false;
 8007bf6:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <getSensorReadings+0x188>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	701a      	strb	r2, [r3, #0]
		L = false;
 8007bfc:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <getSensorReadings+0x18c>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	701a      	strb	r2, [r3, #0]
}
 8007c02:	e7ff      	b.n	8007c04 <getSensorReadings+0x168>
 8007c04:	bf00      	nop
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	200018d4 	.word	0x200018d4
 8007c14:	20000028 	.word	0x20000028
 8007c18:	200018d8 	.word	0x200018d8
 8007c1c:	200018d0 	.word	0x200018d0
 8007c20:	200018de 	.word	0x200018de
 8007c24:	200018dd 	.word	0x200018dd
 8007c28:	200018dc 	.word	0x200018dc
 8007c2c:	200018cc 	.word	0x200018cc
 8007c30:	2000002c 	.word	0x2000002c

08007c34 <cppmain>:
bool buttonPress = false;

int mouseState = 2;


void cppmain(void) {
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0
	LED1_ON;
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c3e:	4851      	ldr	r0, [pc, #324]	; (8007d84 <cppmain+0x150>)
 8007c40:	f7fb ff1a 	bl	8003a78 <HAL_GPIO_WritePin>

	// INITIALIZATION OF HARDWARES
	motorInit();
 8007c44:	f7ff fa5e 	bl	8007104 <motorInit>
	encoderInit();
 8007c48:	f7ff fa3a 	bl	80070c0 <encoderInit>
	resetEncoder();
 8007c4c:	f7ff fa48 	bl	80070e0 <resetEncoder>
	ssd1306_Init();
 8007c50:	f7fa fae2 	bl	8002218 <ssd1306_Init>
	buzzerInit();
 8007c54:	f7ff f9da 	bl	800700c <buzzerInit>

	ALL_LED_ON;
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c5e:	4849      	ldr	r0, [pc, #292]	; (8007d84 <cppmain+0x150>)
 8007c60:	f7fb ff0a 	bl	8003a78 <HAL_GPIO_WritePin>
 8007c64:	2201      	movs	r2, #1
 8007c66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c6a:	4846      	ldr	r0, [pc, #280]	; (8007d84 <cppmain+0x150>)
 8007c6c:	f7fb ff04 	bl	8003a78 <HAL_GPIO_WritePin>
 8007c70:	2201      	movs	r2, #1
 8007c72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c76:	4844      	ldr	r0, [pc, #272]	; (8007d88 <cppmain+0x154>)
 8007c78:	f7fb fefe 	bl	8003a78 <HAL_GPIO_WritePin>
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c82:	4841      	ldr	r0, [pc, #260]	; (8007d88 <cppmain+0x154>)
 8007c84:	f7fb fef8 	bl	8003a78 <HAL_GPIO_WritePin>
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c8e:	483e      	ldr	r0, [pc, #248]	; (8007d88 <cppmain+0x154>)
 8007c90:	f7fb fef2 	bl	8003a78 <HAL_GPIO_WritePin>
 8007c94:	2201      	movs	r2, #1
 8007c96:	2104      	movs	r1, #4
 8007c98:	483c      	ldr	r0, [pc, #240]	; (8007d8c <cppmain+0x158>)
 8007c9a:	f7fb feed 	bl	8003a78 <HAL_GPIO_WritePin>
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ca4:	4837      	ldr	r0, [pc, #220]	; (8007d84 <cppmain+0x150>)
 8007ca6:	f7fb fee7 	bl	8003a78 <HAL_GPIO_WritePin>
 8007caa:	2201      	movs	r2, #1
 8007cac:	2110      	movs	r1, #16
 8007cae:	4838      	ldr	r0, [pc, #224]	; (8007d90 <cppmain+0x15c>)
 8007cb0:	f7fb fee2 	bl	8003a78 <HAL_GPIO_WritePin>
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007cba:	4835      	ldr	r0, [pc, #212]	; (8007d90 <cppmain+0x15c>)
 8007cbc:	f7fb fedc 	bl	8003a78 <HAL_GPIO_WritePin>
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	4830      	ldr	r0, [pc, #192]	; (8007d88 <cppmain+0x154>)
 8007cc6:	f7fb fed7 	bl	8003a78 <HAL_GPIO_WritePin>
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007cd0:	482f      	ldr	r0, [pc, #188]	; (8007d90 <cppmain+0x15c>)
 8007cd2:	f7fb fed1 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8007cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007cda:	f7fa fd11 	bl	8002700 <HAL_Delay>
	ALL_LED_OFF;
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ce4:	4827      	ldr	r0, [pc, #156]	; (8007d84 <cppmain+0x150>)
 8007ce6:	f7fb fec7 	bl	8003a78 <HAL_GPIO_WritePin>
 8007cea:	2200      	movs	r2, #0
 8007cec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007cf0:	4824      	ldr	r0, [pc, #144]	; (8007d84 <cppmain+0x150>)
 8007cf2:	f7fb fec1 	bl	8003a78 <HAL_GPIO_WritePin>
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cfc:	4822      	ldr	r0, [pc, #136]	; (8007d88 <cppmain+0x154>)
 8007cfe:	f7fb febb 	bl	8003a78 <HAL_GPIO_WritePin>
 8007d02:	2200      	movs	r2, #0
 8007d04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d08:	481f      	ldr	r0, [pc, #124]	; (8007d88 <cppmain+0x154>)
 8007d0a:	f7fb feb5 	bl	8003a78 <HAL_GPIO_WritePin>
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007d14:	481c      	ldr	r0, [pc, #112]	; (8007d88 <cppmain+0x154>)
 8007d16:	f7fb feaf 	bl	8003a78 <HAL_GPIO_WritePin>
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2104      	movs	r1, #4
 8007d1e:	481b      	ldr	r0, [pc, #108]	; (8007d8c <cppmain+0x158>)
 8007d20:	f7fb feaa 	bl	8003a78 <HAL_GPIO_WritePin>
 8007d24:	2200      	movs	r2, #0
 8007d26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d2a:	4816      	ldr	r0, [pc, #88]	; (8007d84 <cppmain+0x150>)
 8007d2c:	f7fb fea4 	bl	8003a78 <HAL_GPIO_WritePin>
 8007d30:	2200      	movs	r2, #0
 8007d32:	2110      	movs	r1, #16
 8007d34:	4816      	ldr	r0, [pc, #88]	; (8007d90 <cppmain+0x15c>)
 8007d36:	f7fb fe9f 	bl	8003a78 <HAL_GPIO_WritePin>
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007d40:	4813      	ldr	r0, [pc, #76]	; (8007d90 <cppmain+0x15c>)
 8007d42:	f7fb fe99 	bl	8003a78 <HAL_GPIO_WritePin>
 8007d46:	2200      	movs	r2, #0
 8007d48:	2101      	movs	r1, #1
 8007d4a:	480f      	ldr	r0, [pc, #60]	; (8007d88 <cppmain+0x154>)
 8007d4c:	f7fb fe94 	bl	8003a78 <HAL_GPIO_WritePin>
 8007d50:	2200      	movs	r2, #0
 8007d52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d56:	480e      	ldr	r0, [pc, #56]	; (8007d90 <cppmain+0x15c>)
 8007d58:	f7fb fe8e 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8007d5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d60:	f7fa fcce 	bl	8002700 <HAL_Delay>

//	straightCountsPID(dist);

	while (1) {
	
		l_pos = l_position;
 8007d64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6a:	4a0a      	ldr	r2, [pc, #40]	; (8007d94 <cppmain+0x160>)
 8007d6c:	6013      	str	r3, [r2, #0]
		r_pos = r_position;
 8007d6e:	4b0a      	ldr	r3, [pc, #40]	; (8007d98 <cppmain+0x164>)
 8007d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d72:	43db      	mvns	r3, r3
 8007d74:	4a09      	ldr	r2, [pc, #36]	; (8007d9c <cppmain+0x168>)
 8007d76:	6013      	str	r3, [r2, #0]
//		HAL_Delay(1000);
//		moveStraight(1.8);
		// HAL_Delay(100);


		mouseState = searchForward();
 8007d78:	f001 f868 	bl	8008e4c <searchForward>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	4a08      	ldr	r2, [pc, #32]	; (8007da0 <cppmain+0x16c>)
 8007d80:	6013      	str	r3, [r2, #0]
		l_pos = l_position;
 8007d82:	e7ef      	b.n	8007d64 <cppmain+0x130>
 8007d84:	40020000 	.word	0x40020000
 8007d88:	40020800 	.word	0x40020800
 8007d8c:	40020c00 	.word	0x40020c00
 8007d90:	40020400 	.word	0x40020400
 8007d94:	200018e4 	.word	0x200018e4
 8007d98:	40000c00 	.word	0x40000c00
 8007d9c:	200018e0 	.word	0x200018e0
 8007da0:	20000030 	.word	0x20000030

08007da4 <_Z27rotateFloodCounterClockwisev>:
						-1, -1, }, };
int backFlood[ROWS][COLUMNS] = { { -1, -1, -1, -1, -1, },
		{ -1, -1, -1, -1, -1, }, { -1, -1, -1, -1, -1, },
		{ -1, -1, -1, -1, -1, }, { -1, -1, -1, -1, -1, }, };

void rotateFloodCounterClockwise(void) {
 8007da4:	b480      	push	{r7}
 8007da6:	b09f      	sub	sp, #124	; 0x7c
 8007da8:	af00      	add	r7, sp, #0
	int original[ROWS][COLUMNS];
	// Copy the contents of 'flood' into 'original'
	for (int i = 0; i < ROWS; i++) {
 8007daa:	2300      	movs	r3, #0
 8007dac:	677b      	str	r3, [r7, #116]	; 0x74
 8007dae:	e01f      	b.n	8007df0 <_Z27rotateFloodCounterClockwisev+0x4c>
		for (int j = 0; j < COLUMNS; j++) {
 8007db0:	2300      	movs	r3, #0
 8007db2:	673b      	str	r3, [r7, #112]	; 0x70
 8007db4:	e016      	b.n	8007de4 <_Z27rotateFloodCounterClockwisev+0x40>
			original[i][j] = flood[i][j];
 8007db6:	4927      	ldr	r1, [pc, #156]	; (8007e54 <_Z27rotateFloodCounterClockwisev+0xb0>)
 8007db8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007dba:	4613      	mov	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007dc8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007dca:	4613      	mov	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007dd2:	4413      	add	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	3378      	adds	r3, #120	; 0x78
 8007dd8:	443b      	add	r3, r7
 8007dda:	f843 1c74 	str.w	r1, [r3, #-116]
		for (int j = 0; j < COLUMNS; j++) {
 8007dde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007de0:	3301      	adds	r3, #1
 8007de2:	673b      	str	r3, [r7, #112]	; 0x70
 8007de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	dde5      	ble.n	8007db6 <_Z27rotateFloodCounterClockwisev+0x12>
	for (int i = 0; i < ROWS; i++) {
 8007dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dec:	3301      	adds	r3, #1
 8007dee:	677b      	str	r3, [r7, #116]	; 0x74
 8007df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	dddc      	ble.n	8007db0 <_Z27rotateFloodCounterClockwisev+0xc>
		}
	}

	for (int i = 0; i < ROWS; i++) {
 8007df6:	2300      	movs	r3, #0
 8007df8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007dfa:	e021      	b.n	8007e40 <_Z27rotateFloodCounterClockwisev+0x9c>
		for (int j = 0; j < COLUMNS; j++) {
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e00:	e018      	b.n	8007e34 <_Z27rotateFloodCounterClockwisev+0x90>
			flood[i][j] = original[j][ROWS - 1 - i];
 8007e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e04:	f1c3 0104 	rsb	r1, r3, #4
 8007e08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	440b      	add	r3, r1
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	3378      	adds	r3, #120	; 0x78
 8007e16:	443b      	add	r3, r7
 8007e18:	f853 1c74 	ldr.w	r1, [r3, #-116]
 8007e1c:	480d      	ldr	r0, [pc, #52]	; (8007e54 <_Z27rotateFloodCounterClockwisev+0xb0>)
 8007e1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e20:	4613      	mov	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e28:	4413      	add	r3, r2
 8007e2a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		for (int j = 0; j < COLUMNS; j++) {
 8007e2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e30:	3301      	adds	r3, #1
 8007e32:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e36:	2b04      	cmp	r3, #4
 8007e38:	dde3      	ble.n	8007e02 <_Z27rotateFloodCounterClockwisev+0x5e>
	for (int i = 0; i < ROWS; i++) {
 8007e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	ddda      	ble.n	8007dfc <_Z27rotateFloodCounterClockwisev+0x58>
		}
	}
}
 8007e46:	bf00      	nop
 8007e48:	bf00      	nop
 8007e4a:	377c      	adds	r7, #124	; 0x7c
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	20000034 	.word	0x20000034

08007e58 <_ZN5QNodeC1E10coordinate>:
};

struct QNode {
	struct coordinate point;
	QNode *next;
	QNode(struct coordinate p) {
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	1d3b      	adds	r3, r7, #4
 8007e62:	e883 0006 	stmia.w	r3, {r1, r2}
		point = p;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	1d3b      	adds	r3, r7, #4
 8007e6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007e70:	e882 0003 	stmia.w	r2, {r0, r1}
		next = NULL;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	609a      	str	r2, [r3, #8]
	}
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <_ZN5QueueC1Ev>:
};

struct Queue {
	QNode *front, *rear;
	Queue() {
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
		front = rear = NULL;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	605a      	str	r2, [r3, #4]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685a      	ldr	r2, [r3, #4]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	601a      	str	r2, [r3, #0]
	}
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <_ZN5Queue7isemptyEv>:

	bool isempty() {
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
		if (front == NULL && rear == NULL) {
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d105      	bne.n	8007ec8 <_ZN5Queue7isemptyEv+0x1c>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d101      	bne.n	8007ec8 <_ZN5Queue7isemptyEv+0x1c>
			return true;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e000      	b.n	8007eca <_ZN5Queue7isemptyEv+0x1e>
		} else {
			return false;
 8007ec8:	2300      	movs	r3, #0
		}
	}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <_ZN5Queue7enQueueE10coordinate>:

	void enQueue(struct coordinate point) {
 8007ed6:	b590      	push	{r4, r7, lr}
 8007ed8:	b089      	sub	sp, #36	; 0x24
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	1d3b      	adds	r3, r7, #4
 8007ee0:	e883 0006 	stmia.w	r3, {r1, r2}

		// Create a new LL node
		QNode *temp = new QNode(point);
 8007ee4:	f107 0314 	add.w	r3, r7, #20
 8007ee8:	1d3a      	adds	r2, r7, #4
 8007eea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007eee:	e883 0003 	stmia.w	r3, {r0, r1}
 8007ef2:	200c      	movs	r0, #12
 8007ef4:	f001 f89c 	bl	8009030 <_Znwj>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	461c      	mov	r4, r3
 8007efc:	f107 0314 	add.w	r3, r7, #20
 8007f00:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007f04:	4620      	mov	r0, r4
 8007f06:	f7ff ffa7 	bl	8007e58 <_ZN5QNodeC1E10coordinate>
 8007f0a:	61fc      	str	r4, [r7, #28]

		// If queue is empty, then
		// new node is front and rear both
		if (rear == NULL) {
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d107      	bne.n	8007f24 <_ZN5Queue7enQueueE10coordinate+0x4e>
			front = rear = temp;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	69fa      	ldr	r2, [r7, #28]
 8007f18:	605a      	str	r2, [r3, #4]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	601a      	str	r2, [r3, #0]
			return;
 8007f22:	e006      	b.n	8007f32 <_ZN5Queue7enQueueE10coordinate+0x5c>
		}

		// Add the new node at
		// the end of queue and change rear
		rear->next = temp;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	69fa      	ldr	r2, [r7, #28]
 8007f2a:	609a      	str	r2, [r3, #8]
		rear = temp;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	69fa      	ldr	r2, [r7, #28]
 8007f30:	605a      	str	r2, [r3, #4]
	}
 8007f32:	3724      	adds	r7, #36	; 0x24
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd90      	pop	{r4, r7, pc}

08007f38 <_ZN5Queue7deQueueEv>:

	// Function to remove
	// a key from given queue q
	struct coordinate deQueue() {
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
		// If queue is empty, return NULL.
		if (front == NULL) {
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d01c      	beq.n	8007f84 <_ZN5Queue7deQueueEv+0x4c>
		} else {
			// Store previous front and
			// move front one node ahead
			QNode *temp = front;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	60fb      	str	r3, [r7, #12]
			front = front->next;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	689a      	ldr	r2, [r3, #8]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	601a      	str	r2, [r3, #0]

			// If front becomes NULL, then
			// change rear also as NULL
			if (front == NULL)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d102      	bne.n	8007f68 <_ZN5Queue7deQueueEv+0x30>
				rear = NULL;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2200      	movs	r2, #0
 8007f66:	605a      	str	r2, [r3, #4]

			delete (temp);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <_ZN5Queue7deQueueEv+0x3e>
 8007f6e:	210c      	movs	r1, #12
 8007f70:	4618      	mov	r0, r3
 8007f72:	f001 f85b 	bl	800902c <_ZdlPvj>
			return temp->point;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007f82:	e000      	b.n	8007f86 <_ZN5Queue7deQueueEv+0x4e>
		}
	}
 8007f84:	bf00      	nop
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
	...

08007f90 <_Z11updateWalls10coordinateibbb>:
 1- East
 2- South
 3- West
 */

void updateWalls(struct coordinate point, int orient, bool L, bool R, bool F) {
 8007f90:	b490      	push	{r4, r7}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	f107 0408 	add.w	r4, r7, #8
 8007f9a:	e884 0003 	stmia.w	r4, {r0, r1}
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	70fb      	strb	r3, [r7, #3]
	if ((L && R) && F) {
 8007fa2:	78fb      	ldrb	r3, [r7, #3]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d03e      	beq.n	8008026 <_Z11updateWalls10coordinateibbb+0x96>
 8007fa8:	7e3b      	ldrb	r3, [r7, #24]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d03b      	beq.n	8008026 <_Z11updateWalls10coordinateibbb+0x96>
 8007fae:	7f3b      	ldrb	r3, [r7, #28]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d038      	beq.n	8008026 <_Z11updateWalls10coordinateibbb+0x96>
		if (orient == 0) {
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10a      	bne.n	8007fd0 <_Z11updateWalls10coordinateibbb+0x40>
			cells[point.x][point.y] = 13;
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	68f9      	ldr	r1, [r7, #12]
 8007fbe:	48a8      	ldr	r0, [pc, #672]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	440b      	add	r3, r1
 8007fc8:	220d      	movs	r2, #13
 8007fca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (orient == 0) {
 8007fce:	e1b9      	b.n	8008344 <_Z11updateWalls10coordinateibbb+0x3b4>
		}            //|-|
		else if (orient == 1) {
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d10a      	bne.n	8007fec <_Z11updateWalls10coordinateibbb+0x5c>
			cells[point.x][point.y] = 12;
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	68f9      	ldr	r1, [r7, #12]
 8007fda:	48a1      	ldr	r0, [pc, #644]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 8007fdc:	4613      	mov	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	440b      	add	r3, r1
 8007fe4:	220c      	movs	r2, #12
 8007fe6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (orient == 0) {
 8007fea:	e1ab      	b.n	8008344 <_Z11updateWalls10coordinateibbb+0x3b4>
		}            //_-|
		else if (orient == 2) {
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d10a      	bne.n	8008008 <_Z11updateWalls10coordinateibbb+0x78>
			cells[point.x][point.y] = 11;
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	68f9      	ldr	r1, [r7, #12]
 8007ff6:	489a      	ldr	r0, [pc, #616]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	440b      	add	r3, r1
 8008000:	220b      	movs	r2, #11
 8008002:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (orient == 0) {
 8008006:	e19d      	b.n	8008344 <_Z11updateWalls10coordinateibbb+0x3b4>
		}            //|_|
		else if (orient == 3) {
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b03      	cmp	r3, #3
 800800c:	f040 819a 	bne.w	8008344 <_Z11updateWalls10coordinateibbb+0x3b4>
			cells[point.x][point.y] = 14;
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	68f9      	ldr	r1, [r7, #12]
 8008014:	4892      	ldr	r0, [pc, #584]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 8008016:	4613      	mov	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	440b      	add	r3, r1
 800801e:	220e      	movs	r2, #14
 8008020:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (orient == 0) {
 8008024:	e18e      	b.n	8008344 <_Z11updateWalls10coordinateibbb+0x3b4>
		}            //|-_
	} else if ((L && R) && (!F)) {
 8008026:	78fb      	ldrb	r3, [r7, #3]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d041      	beq.n	80080b0 <_Z11updateWalls10coordinateibbb+0x120>
 800802c:	7e3b      	ldrb	r3, [r7, #24]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d03e      	beq.n	80080b0 <_Z11updateWalls10coordinateibbb+0x120>
 8008032:	7f3b      	ldrb	r3, [r7, #28]
 8008034:	f083 0301 	eor.w	r3, r3, #1
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d038      	beq.n	80080b0 <_Z11updateWalls10coordinateibbb+0x120>
		if (orient == 0) {
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10a      	bne.n	800805a <_Z11updateWalls10coordinateibbb+0xca>
			cells[point.x][point.y] = 9;
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	68f9      	ldr	r1, [r7, #12]
 8008048:	4885      	ldr	r0, [pc, #532]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 800804a:	4613      	mov	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	440b      	add	r3, r1
 8008052:	2209      	movs	r2, #9
 8008054:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (orient == 0) {
 8008058:	e176      	b.n	8008348 <_Z11updateWalls10coordinateibbb+0x3b8>
		}            //| |
		else if (orient == 1) {
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d10a      	bne.n	8008076 <_Z11updateWalls10coordinateibbb+0xe6>
			cells[point.x][point.y] = 10;
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	68f9      	ldr	r1, [r7, #12]
 8008064:	487e      	ldr	r0, [pc, #504]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 8008066:	4613      	mov	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	440b      	add	r3, r1
 800806e:	220a      	movs	r2, #10
 8008070:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (orient == 0) {
 8008074:	e168      	b.n	8008348 <_Z11updateWalls10coordinateibbb+0x3b8>
		}            //_-
		else if (orient == 2) {
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2b02      	cmp	r3, #2
 800807a:	d10a      	bne.n	8008092 <_Z11updateWalls10coordinateibbb+0x102>
			cells[point.x][point.y] = 9;
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	68f9      	ldr	r1, [r7, #12]
 8008080:	4877      	ldr	r0, [pc, #476]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 8008082:	4613      	mov	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	440b      	add	r3, r1
 800808a:	2209      	movs	r2, #9
 800808c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (orient == 0) {
 8008090:	e15a      	b.n	8008348 <_Z11updateWalls10coordinateibbb+0x3b8>
		}            //| |
		else if (orient == 3) {
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b03      	cmp	r3, #3
 8008096:	f040 8157 	bne.w	8008348 <_Z11updateWalls10coordinateibbb+0x3b8>
			cells[point.x][point.y] = 10;
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	68f9      	ldr	r1, [r7, #12]
 800809e:	4870      	ldr	r0, [pc, #448]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 80080a0:	4613      	mov	r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4413      	add	r3, r2
 80080a6:	440b      	add	r3, r1
 80080a8:	220a      	movs	r2, #10
 80080aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (orient == 0) {
 80080ae:	e14b      	b.n	8008348 <_Z11updateWalls10coordinateibbb+0x3b8>
		}            //_-
	} else if ((L && F) && (!R)) {
 80080b0:	78fb      	ldrb	r3, [r7, #3]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d041      	beq.n	800813a <_Z11updateWalls10coordinateibbb+0x1aa>
 80080b6:	7f3b      	ldrb	r3, [r7, #28]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d03e      	beq.n	800813a <_Z11updateWalls10coordinateibbb+0x1aa>
 80080bc:	7e3b      	ldrb	r3, [r7, #24]
 80080be:	f083 0301 	eor.w	r3, r3, #1
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d038      	beq.n	800813a <_Z11updateWalls10coordinateibbb+0x1aa>
		if (orient == 0) {
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10a      	bne.n	80080e4 <_Z11updateWalls10coordinateibbb+0x154>
			cells[point.x][point.y] = 8;
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	68f9      	ldr	r1, [r7, #12]
 80080d2:	4863      	ldr	r0, [pc, #396]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 80080d4:	4613      	mov	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	440b      	add	r3, r1
 80080dc:	2208      	movs	r2, #8
 80080de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (orient == 0) {
 80080e2:	e133      	b.n	800834c <_Z11updateWalls10coordinateibbb+0x3bc>
		}            //|-
		else if (orient == 1) {
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d10a      	bne.n	8008100 <_Z11updateWalls10coordinateibbb+0x170>
			cells[point.x][point.y] = 7;
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	68f9      	ldr	r1, [r7, #12]
 80080ee:	485c      	ldr	r0, [pc, #368]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 80080f0:	4613      	mov	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	440b      	add	r3, r1
 80080f8:	2207      	movs	r2, #7
 80080fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (orient == 0) {
 80080fe:	e125      	b.n	800834c <_Z11updateWalls10coordinateibbb+0x3bc>
		}            //-|
		else if (orient == 2) {
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b02      	cmp	r3, #2
 8008104:	d10a      	bne.n	800811c <_Z11updateWalls10coordinateibbb+0x18c>
			cells[point.x][point.y] = 6;
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	68f9      	ldr	r1, [r7, #12]
 800810a:	4855      	ldr	r0, [pc, #340]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 800810c:	4613      	mov	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	440b      	add	r3, r1
 8008114:	2206      	movs	r2, #6
 8008116:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (orient == 0) {
 800811a:	e117      	b.n	800834c <_Z11updateWalls10coordinateibbb+0x3bc>
		}            //_|
		else if (orient == 3) {
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b03      	cmp	r3, #3
 8008120:	f040 8114 	bne.w	800834c <_Z11updateWalls10coordinateibbb+0x3bc>
			cells[point.x][point.y] = 5;
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	68f9      	ldr	r1, [r7, #12]
 8008128:	484d      	ldr	r0, [pc, #308]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 800812a:	4613      	mov	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	440b      	add	r3, r1
 8008132:	2205      	movs	r2, #5
 8008134:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (orient == 0) {
 8008138:	e108      	b.n	800834c <_Z11updateWalls10coordinateibbb+0x3bc>
		}            //|_
	} else if ((R && F) && (!L)) {
 800813a:	7e3b      	ldrb	r3, [r7, #24]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d041      	beq.n	80081c4 <_Z11updateWalls10coordinateibbb+0x234>
 8008140:	7f3b      	ldrb	r3, [r7, #28]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d03e      	beq.n	80081c4 <_Z11updateWalls10coordinateibbb+0x234>
 8008146:	78fb      	ldrb	r3, [r7, #3]
 8008148:	f083 0301 	eor.w	r3, r3, #1
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d038      	beq.n	80081c4 <_Z11updateWalls10coordinateibbb+0x234>
		if (orient == 0) {
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10a      	bne.n	800816e <_Z11updateWalls10coordinateibbb+0x1de>
			cells[point.x][point.y] = 7;
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	68f9      	ldr	r1, [r7, #12]
 800815c:	4840      	ldr	r0, [pc, #256]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 800815e:	4613      	mov	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	440b      	add	r3, r1
 8008166:	2207      	movs	r2, #7
 8008168:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (orient == 0) {
 800816c:	e0f0      	b.n	8008350 <_Z11updateWalls10coordinateibbb+0x3c0>
		}            //-|
		else if (orient == 1) {
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d10a      	bne.n	800818a <_Z11updateWalls10coordinateibbb+0x1fa>
			cells[point.x][point.y] = 6;
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	68f9      	ldr	r1, [r7, #12]
 8008178:	4839      	ldr	r0, [pc, #228]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 800817a:	4613      	mov	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	440b      	add	r3, r1
 8008182:	2206      	movs	r2, #6
 8008184:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (orient == 0) {
 8008188:	e0e2      	b.n	8008350 <_Z11updateWalls10coordinateibbb+0x3c0>
		}            //_|
		else if (orient == 2) {
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b02      	cmp	r3, #2
 800818e:	d10a      	bne.n	80081a6 <_Z11updateWalls10coordinateibbb+0x216>
			cells[point.x][point.y] = 5;
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	68f9      	ldr	r1, [r7, #12]
 8008194:	4832      	ldr	r0, [pc, #200]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 8008196:	4613      	mov	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4413      	add	r3, r2
 800819c:	440b      	add	r3, r1
 800819e:	2205      	movs	r2, #5
 80081a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (orient == 0) {
 80081a4:	e0d4      	b.n	8008350 <_Z11updateWalls10coordinateibbb+0x3c0>
		}            //|_
		else if (orient == 3) {
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b03      	cmp	r3, #3
 80081aa:	f040 80d1 	bne.w	8008350 <_Z11updateWalls10coordinateibbb+0x3c0>
			cells[point.x][point.y] = 8;
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	68f9      	ldr	r1, [r7, #12]
 80081b2:	482b      	ldr	r0, [pc, #172]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 80081b4:	4613      	mov	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	440b      	add	r3, r1
 80081bc:	2208      	movs	r2, #8
 80081be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (orient == 0) {
 80081c2:	e0c5      	b.n	8008350 <_Z11updateWalls10coordinateibbb+0x3c0>
		}            //|-
	} else if (F) {
 80081c4:	7f3b      	ldrb	r3, [r7, #28]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d038      	beq.n	800823c <_Z11updateWalls10coordinateibbb+0x2ac>
		if (orient == 0) {
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10a      	bne.n	80081e6 <_Z11updateWalls10coordinateibbb+0x256>
			cells[point.x][point.y] = 2;
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	68f9      	ldr	r1, [r7, #12]
 80081d4:	4822      	ldr	r0, [pc, #136]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 80081d6:	4613      	mov	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	440b      	add	r3, r1
 80081de:	2202      	movs	r2, #2
 80081e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			cells[point.x][point.y] = 4;
		}            //-
	} else {
		cells[point.x][point.y] = 0;            //
	}
}
 80081e4:	e0b5      	b.n	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
		else if (orient == 1) {
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d10a      	bne.n	8008202 <_Z11updateWalls10coordinateibbb+0x272>
			cells[point.x][point.y] = 3;
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	68f9      	ldr	r1, [r7, #12]
 80081f0:	481b      	ldr	r0, [pc, #108]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 80081f2:	4613      	mov	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	440b      	add	r3, r1
 80081fa:	2203      	movs	r2, #3
 80081fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8008200:	e0a7      	b.n	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
		else if (orient == 2) {
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b02      	cmp	r3, #2
 8008206:	d10a      	bne.n	800821e <_Z11updateWalls10coordinateibbb+0x28e>
			cells[point.x][point.y] = 4;
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	68f9      	ldr	r1, [r7, #12]
 800820c:	4814      	ldr	r0, [pc, #80]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 800820e:	4613      	mov	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	440b      	add	r3, r1
 8008216:	2204      	movs	r2, #4
 8008218:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800821c:	e099      	b.n	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
		else if (orient == 3) {
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b03      	cmp	r3, #3
 8008222:	f040 8096 	bne.w	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
			cells[point.x][point.y] = 1;
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	68f9      	ldr	r1, [r7, #12]
 800822a:	480d      	ldr	r0, [pc, #52]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 800822c:	4613      	mov	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	440b      	add	r3, r1
 8008234:	2201      	movs	r2, #1
 8008236:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800823a:	e08a      	b.n	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
	} else if (L) {
 800823c:	78fb      	ldrb	r3, [r7, #3]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d03a      	beq.n	80082b8 <_Z11updateWalls10coordinateibbb+0x328>
		if (orient == 0) {
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10d      	bne.n	8008264 <_Z11updateWalls10coordinateibbb+0x2d4>
			cells[point.x][point.y] = 1;
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	68f9      	ldr	r1, [r7, #12]
 800824c:	4804      	ldr	r0, [pc, #16]	; (8008260 <_Z11updateWalls10coordinateibbb+0x2d0>)
 800824e:	4613      	mov	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4413      	add	r3, r2
 8008254:	440b      	add	r3, r1
 8008256:	2201      	movs	r2, #1
 8008258:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800825c:	e079      	b.n	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
 800825e:	bf00      	nop
 8008260:	20000098 	.word	0x20000098
		else if (orient == 1) {
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d10a      	bne.n	8008280 <_Z11updateWalls10coordinateibbb+0x2f0>
			cells[point.x][point.y] = 2;
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	68f9      	ldr	r1, [r7, #12]
 800826e:	483b      	ldr	r0, [pc, #236]	; (800835c <_Z11updateWalls10coordinateibbb+0x3cc>)
 8008270:	4613      	mov	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	440b      	add	r3, r1
 8008278:	2202      	movs	r2, #2
 800827a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800827e:	e068      	b.n	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
		else if (orient == 2) {
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b02      	cmp	r3, #2
 8008284:	d10a      	bne.n	800829c <_Z11updateWalls10coordinateibbb+0x30c>
			cells[point.x][point.y] = 3;
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	68f9      	ldr	r1, [r7, #12]
 800828a:	4834      	ldr	r0, [pc, #208]	; (800835c <_Z11updateWalls10coordinateibbb+0x3cc>)
 800828c:	4613      	mov	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4413      	add	r3, r2
 8008292:	440b      	add	r3, r1
 8008294:	2203      	movs	r2, #3
 8008296:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800829a:	e05a      	b.n	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
		else if (orient == 3) {
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b03      	cmp	r3, #3
 80082a0:	d157      	bne.n	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
			cells[point.x][point.y] = 4;
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	68f9      	ldr	r1, [r7, #12]
 80082a6:	482d      	ldr	r0, [pc, #180]	; (800835c <_Z11updateWalls10coordinateibbb+0x3cc>)
 80082a8:	4613      	mov	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	440b      	add	r3, r1
 80082b0:	2204      	movs	r2, #4
 80082b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80082b6:	e04c      	b.n	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
	} else if (R) {
 80082b8:	7e3b      	ldrb	r3, [r7, #24]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d037      	beq.n	800832e <_Z11updateWalls10coordinateibbb+0x39e>
		if (orient == 0) {
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10a      	bne.n	80082da <_Z11updateWalls10coordinateibbb+0x34a>
			cells[point.x][point.y] = 3;
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	68f9      	ldr	r1, [r7, #12]
 80082c8:	4824      	ldr	r0, [pc, #144]	; (800835c <_Z11updateWalls10coordinateibbb+0x3cc>)
 80082ca:	4613      	mov	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4413      	add	r3, r2
 80082d0:	440b      	add	r3, r1
 80082d2:	2203      	movs	r2, #3
 80082d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80082d8:	e03b      	b.n	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
		else if (orient == 1) {
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d10a      	bne.n	80082f6 <_Z11updateWalls10coordinateibbb+0x366>
			cells[point.x][point.y] = 4;
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	68f9      	ldr	r1, [r7, #12]
 80082e4:	481d      	ldr	r0, [pc, #116]	; (800835c <_Z11updateWalls10coordinateibbb+0x3cc>)
 80082e6:	4613      	mov	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4413      	add	r3, r2
 80082ec:	440b      	add	r3, r1
 80082ee:	2204      	movs	r2, #4
 80082f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80082f4:	e02d      	b.n	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
		else if (orient == 2) {
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d10a      	bne.n	8008312 <_Z11updateWalls10coordinateibbb+0x382>
			cells[point.x][point.y] = 3;
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	68f9      	ldr	r1, [r7, #12]
 8008300:	4816      	ldr	r0, [pc, #88]	; (800835c <_Z11updateWalls10coordinateibbb+0x3cc>)
 8008302:	4613      	mov	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	440b      	add	r3, r1
 800830a:	2203      	movs	r2, #3
 800830c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8008310:	e01f      	b.n	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
		else if (orient == 3) {
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2b03      	cmp	r3, #3
 8008316:	d11c      	bne.n	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
			cells[point.x][point.y] = 4;
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	68f9      	ldr	r1, [r7, #12]
 800831c:	480f      	ldr	r0, [pc, #60]	; (800835c <_Z11updateWalls10coordinateibbb+0x3cc>)
 800831e:	4613      	mov	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	440b      	add	r3, r1
 8008326:	2204      	movs	r2, #4
 8008328:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800832c:	e011      	b.n	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
		cells[point.x][point.y] = 0;            //
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	68f9      	ldr	r1, [r7, #12]
 8008332:	480a      	ldr	r0, [pc, #40]	; (800835c <_Z11updateWalls10coordinateibbb+0x3cc>)
 8008334:	4613      	mov	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
 800833a:	440b      	add	r3, r1
 800833c:	2200      	movs	r2, #0
 800833e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8008342:	e006      	b.n	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
		if (orient == 0) {
 8008344:	bf00      	nop
 8008346:	e004      	b.n	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
		if (orient == 0) {
 8008348:	bf00      	nop
 800834a:	e002      	b.n	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
		if (orient == 0) {
 800834c:	bf00      	nop
 800834e:	e000      	b.n	8008352 <_Z11updateWalls10coordinateibbb+0x3c2>
		if (orient == 0) {
 8008350:	bf00      	nop
}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bc90      	pop	{r4, r7}
 800835a:	4770      	bx	lr
 800835c:	20000098 	.word	0x20000098

08008360 <_Z12isAccessible10coordinateS_>:

bool isAccessible(struct coordinate p, struct coordinate p1) {
 8008360:	b490      	push	{r4, r7}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	f107 0408 	add.w	r4, r7, #8
 800836a:	e884 0003 	stmia.w	r4, {r0, r1}
 800836e:	4639      	mov	r1, r7
 8008370:	e881 000c 	stmia.w	r1, {r2, r3}
	if (p1.x < 0 || p1.y < 0 || p1.x >=ROWS  || p1.y >= COLUMNS) {
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	db08      	blt.n	800838c <_Z12isAccessible10coordinateS_+0x2c>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	db05      	blt.n	800838c <_Z12isAccessible10coordinateS_+0x2c>
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2b04      	cmp	r3, #4
 8008384:	dc02      	bgt.n	800838c <_Z12isAccessible10coordinateS_+0x2c>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b04      	cmp	r3, #4
 800838a:	dd01      	ble.n	8008390 <_Z12isAccessible10coordinateS_+0x30>
		return false;
 800838c:	2300      	movs	r3, #0
 800838e:	e156      	b.n	800863e <_Z12isAccessible10coordinateS_+0x2de>
	}

	if (p.x == p1.x) {
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	429a      	cmp	r2, r3
 8008396:	f040 80a6 	bne.w	80084e6 <_Z12isAccessible10coordinateS_+0x186>
		if (p.y > p1.y) {
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	429a      	cmp	r2, r3
 80083a0:	dd50      	ble.n	8008444 <_Z12isAccessible10coordinateS_+0xe4>
			if (cells[p.x][p.y] == 4 || cells[p.x][p.y] == 5
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	68f9      	ldr	r1, [r7, #12]
 80083a6:	48a8      	ldr	r0, [pc, #672]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 80083a8:	4613      	mov	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	440b      	add	r3, r1
 80083b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	d041      	beq.n	800843c <_Z12isAccessible10coordinateS_+0xdc>
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	68f9      	ldr	r1, [r7, #12]
 80083bc:	48a2      	ldr	r0, [pc, #648]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 80083be:	4613      	mov	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	440b      	add	r3, r1
 80083c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80083ca:	2b05      	cmp	r3, #5
 80083cc:	d036      	beq.n	800843c <_Z12isAccessible10coordinateS_+0xdc>
					|| cells[p.x][p.y] == 6 || cells[p.x][p.y] == 10
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	68f9      	ldr	r1, [r7, #12]
 80083d2:	489d      	ldr	r0, [pc, #628]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 80083d4:	4613      	mov	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	440b      	add	r3, r1
 80083dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80083e0:	2b06      	cmp	r3, #6
 80083e2:	d02b      	beq.n	800843c <_Z12isAccessible10coordinateS_+0xdc>
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	68f9      	ldr	r1, [r7, #12]
 80083e8:	4897      	ldr	r0, [pc, #604]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 80083ea:	4613      	mov	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	440b      	add	r3, r1
 80083f2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80083f6:	2b0a      	cmp	r3, #10
 80083f8:	d020      	beq.n	800843c <_Z12isAccessible10coordinateS_+0xdc>
					|| cells[p.x][p.y] == 11 || cells[p.x][p.y] == 12
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	68f9      	ldr	r1, [r7, #12]
 80083fe:	4892      	ldr	r0, [pc, #584]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 8008400:	4613      	mov	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	440b      	add	r3, r1
 8008408:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800840c:	2b0b      	cmp	r3, #11
 800840e:	d015      	beq.n	800843c <_Z12isAccessible10coordinateS_+0xdc>
 8008410:	68ba      	ldr	r2, [r7, #8]
 8008412:	68f9      	ldr	r1, [r7, #12]
 8008414:	488c      	ldr	r0, [pc, #560]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 8008416:	4613      	mov	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	440b      	add	r3, r1
 800841e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008422:	2b0c      	cmp	r3, #12
 8008424:	d00a      	beq.n	800843c <_Z12isAccessible10coordinateS_+0xdc>
					|| cells[p.x][p.y] == 14) {
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	68f9      	ldr	r1, [r7, #12]
 800842a:	4887      	ldr	r0, [pc, #540]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 800842c:	4613      	mov	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	440b      	add	r3, r1
 8008434:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008438:	2b0e      	cmp	r3, #14
 800843a:	d101      	bne.n	8008440 <_Z12isAccessible10coordinateS_+0xe0>
				return false;
 800843c:	2300      	movs	r3, #0
 800843e:	e0fe      	b.n	800863e <_Z12isAccessible10coordinateS_+0x2de>
			}

			else {
				return true;
 8008440:	2301      	movs	r3, #1
 8008442:	e0fc      	b.n	800863e <_Z12isAccessible10coordinateS_+0x2de>
			}
		} else {
			if (cells[p.x][p.y] == 2 || cells[p.x][p.y] == 7
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	68f9      	ldr	r1, [r7, #12]
 8008448:	487f      	ldr	r0, [pc, #508]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 800844a:	4613      	mov	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	440b      	add	r3, r1
 8008452:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008456:	2b02      	cmp	r3, #2
 8008458:	d041      	beq.n	80084de <_Z12isAccessible10coordinateS_+0x17e>
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	68f9      	ldr	r1, [r7, #12]
 800845e:	487a      	ldr	r0, [pc, #488]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 8008460:	4613      	mov	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	440b      	add	r3, r1
 8008468:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800846c:	2b07      	cmp	r3, #7
 800846e:	d036      	beq.n	80084de <_Z12isAccessible10coordinateS_+0x17e>
					|| cells[p.x][p.y] == 8 || cells[p.x][p.y] == 10
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	68f9      	ldr	r1, [r7, #12]
 8008474:	4874      	ldr	r0, [pc, #464]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 8008476:	4613      	mov	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	440b      	add	r3, r1
 800847e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008482:	2b08      	cmp	r3, #8
 8008484:	d02b      	beq.n	80084de <_Z12isAccessible10coordinateS_+0x17e>
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	68f9      	ldr	r1, [r7, #12]
 800848a:	486f      	ldr	r0, [pc, #444]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 800848c:	4613      	mov	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	440b      	add	r3, r1
 8008494:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008498:	2b0a      	cmp	r3, #10
 800849a:	d020      	beq.n	80084de <_Z12isAccessible10coordinateS_+0x17e>
					|| cells[p.x][p.y] == 12 || cells[p.x][p.y] == 13
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	68f9      	ldr	r1, [r7, #12]
 80084a0:	4869      	ldr	r0, [pc, #420]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 80084a2:	4613      	mov	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	440b      	add	r3, r1
 80084aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80084ae:	2b0c      	cmp	r3, #12
 80084b0:	d015      	beq.n	80084de <_Z12isAccessible10coordinateS_+0x17e>
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	68f9      	ldr	r1, [r7, #12]
 80084b6:	4864      	ldr	r0, [pc, #400]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 80084b8:	4613      	mov	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	440b      	add	r3, r1
 80084c0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80084c4:	2b0d      	cmp	r3, #13
 80084c6:	d00a      	beq.n	80084de <_Z12isAccessible10coordinateS_+0x17e>
					|| cells[p.x][p.y] == 14) {
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	68f9      	ldr	r1, [r7, #12]
 80084cc:	485e      	ldr	r0, [pc, #376]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 80084ce:	4613      	mov	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	440b      	add	r3, r1
 80084d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80084da:	2b0e      	cmp	r3, #14
 80084dc:	d101      	bne.n	80084e2 <_Z12isAccessible10coordinateS_+0x182>
				return false;
 80084de:	2300      	movs	r3, #0
 80084e0:	e0ad      	b.n	800863e <_Z12isAccessible10coordinateS_+0x2de>
			}

			else {
				return true;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e0ab      	b.n	800863e <_Z12isAccessible10coordinateS_+0x2de>
			}

		}
	} else if (p.y == p1.y) {
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	f040 80a6 	bne.w	800863c <_Z12isAccessible10coordinateS_+0x2dc>
		if (p.x > p1.x) {
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	dd50      	ble.n	800859a <_Z12isAccessible10coordinateS_+0x23a>
			if (cells[p.x][p.y] == 1 || cells[p.x][p.y] == 5
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	68f9      	ldr	r1, [r7, #12]
 80084fc:	4852      	ldr	r0, [pc, #328]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 80084fe:	4613      	mov	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	440b      	add	r3, r1
 8008506:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d041      	beq.n	8008592 <_Z12isAccessible10coordinateS_+0x232>
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	68f9      	ldr	r1, [r7, #12]
 8008512:	484d      	ldr	r0, [pc, #308]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 8008514:	4613      	mov	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	440b      	add	r3, r1
 800851c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008520:	2b05      	cmp	r3, #5
 8008522:	d036      	beq.n	8008592 <_Z12isAccessible10coordinateS_+0x232>
					|| cells[p.x][p.y] == 8 || cells[p.x][p.y] == 9
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	68f9      	ldr	r1, [r7, #12]
 8008528:	4847      	ldr	r0, [pc, #284]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 800852a:	4613      	mov	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	440b      	add	r3, r1
 8008532:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008536:	2b08      	cmp	r3, #8
 8008538:	d02b      	beq.n	8008592 <_Z12isAccessible10coordinateS_+0x232>
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	68f9      	ldr	r1, [r7, #12]
 800853e:	4842      	ldr	r0, [pc, #264]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 8008540:	4613      	mov	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4413      	add	r3, r2
 8008546:	440b      	add	r3, r1
 8008548:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800854c:	2b09      	cmp	r3, #9
 800854e:	d020      	beq.n	8008592 <_Z12isAccessible10coordinateS_+0x232>
					|| cells[p.x][p.y] == 11 || cells[p.x][p.y] == 13
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	68f9      	ldr	r1, [r7, #12]
 8008554:	483c      	ldr	r0, [pc, #240]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 8008556:	4613      	mov	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	440b      	add	r3, r1
 800855e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008562:	2b0b      	cmp	r3, #11
 8008564:	d015      	beq.n	8008592 <_Z12isAccessible10coordinateS_+0x232>
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	68f9      	ldr	r1, [r7, #12]
 800856a:	4837      	ldr	r0, [pc, #220]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 800856c:	4613      	mov	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	440b      	add	r3, r1
 8008574:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008578:	2b0d      	cmp	r3, #13
 800857a:	d00a      	beq.n	8008592 <_Z12isAccessible10coordinateS_+0x232>
					|| cells[p.x][p.y] == 14) {
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	68f9      	ldr	r1, [r7, #12]
 8008580:	4831      	ldr	r0, [pc, #196]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 8008582:	4613      	mov	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	440b      	add	r3, r1
 800858a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800858e:	2b0e      	cmp	r3, #14
 8008590:	d101      	bne.n	8008596 <_Z12isAccessible10coordinateS_+0x236>
				return false;
 8008592:	2300      	movs	r3, #0
 8008594:	e053      	b.n	800863e <_Z12isAccessible10coordinateS_+0x2de>
			} else {
				return true;
 8008596:	2301      	movs	r3, #1
 8008598:	e051      	b.n	800863e <_Z12isAccessible10coordinateS_+0x2de>
			}
		} else {
			if (cells[p.x][p.y] == 3 || cells[p.x][p.y] == 6
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	68f9      	ldr	r1, [r7, #12]
 800859e:	482a      	ldr	r0, [pc, #168]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 80085a0:	4613      	mov	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	440b      	add	r3, r1
 80085a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80085ac:	2b03      	cmp	r3, #3
 80085ae:	d041      	beq.n	8008634 <_Z12isAccessible10coordinateS_+0x2d4>
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	68f9      	ldr	r1, [r7, #12]
 80085b4:	4824      	ldr	r0, [pc, #144]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 80085b6:	4613      	mov	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	440b      	add	r3, r1
 80085be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80085c2:	2b06      	cmp	r3, #6
 80085c4:	d036      	beq.n	8008634 <_Z12isAccessible10coordinateS_+0x2d4>
					|| cells[p.x][p.y] == 7 || cells[p.x][p.y] == 9
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	68f9      	ldr	r1, [r7, #12]
 80085ca:	481f      	ldr	r0, [pc, #124]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 80085cc:	4613      	mov	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	440b      	add	r3, r1
 80085d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80085d8:	2b07      	cmp	r3, #7
 80085da:	d02b      	beq.n	8008634 <_Z12isAccessible10coordinateS_+0x2d4>
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	68f9      	ldr	r1, [r7, #12]
 80085e0:	4819      	ldr	r0, [pc, #100]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 80085e2:	4613      	mov	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	440b      	add	r3, r1
 80085ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80085ee:	2b09      	cmp	r3, #9
 80085f0:	d020      	beq.n	8008634 <_Z12isAccessible10coordinateS_+0x2d4>
					|| cells[p.x][p.y] == 11 || cells[p.x][p.y] == 12
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	68f9      	ldr	r1, [r7, #12]
 80085f6:	4814      	ldr	r0, [pc, #80]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 80085f8:	4613      	mov	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	440b      	add	r3, r1
 8008600:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008604:	2b0b      	cmp	r3, #11
 8008606:	d015      	beq.n	8008634 <_Z12isAccessible10coordinateS_+0x2d4>
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	68f9      	ldr	r1, [r7, #12]
 800860c:	480e      	ldr	r0, [pc, #56]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 800860e:	4613      	mov	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	440b      	add	r3, r1
 8008616:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800861a:	2b0c      	cmp	r3, #12
 800861c:	d00a      	beq.n	8008634 <_Z12isAccessible10coordinateS_+0x2d4>
					|| cells[p.x][p.y] == 13) {
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	68f9      	ldr	r1, [r7, #12]
 8008622:	4809      	ldr	r0, [pc, #36]	; (8008648 <_Z12isAccessible10coordinateS_+0x2e8>)
 8008624:	4613      	mov	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	440b      	add	r3, r1
 800862c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008630:	2b0d      	cmp	r3, #13
 8008632:	d101      	bne.n	8008638 <_Z12isAccessible10coordinateS_+0x2d8>
				return false;
 8008634:	2300      	movs	r3, #0
 8008636:	e002      	b.n	800863e <_Z12isAccessible10coordinateS_+0x2de>
			} else {
				return true;
 8008638:	2301      	movs	r3, #1
 800863a:	e000      	b.n	800863e <_Z12isAccessible10coordinateS_+0x2de>
			}
		}
	} else {
		return false;
 800863c:	2300      	movs	r3, #0
	}
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bc90      	pop	{r4, r7}
 8008646:	4770      	bx	lr
 8008648:	20000098 	.word	0x20000098

0800864c <_Z12getSurrounds10coordinate>:

struct surroundCoor getSurrounds(struct coordinate p) {
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	1d3b      	adds	r3, r7, #4
 8008656:	e883 0006 	stmia.w	r3, {r1, r2}
	struct surroundCoor surCoor;
	surCoor.N.x = p.x - 1;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	1e5a      	subs	r2, r3, #1
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	601a      	str	r2, [r3, #0]
	surCoor.N.y = p.y;
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	605a      	str	r2, [r3, #4]

	surCoor.S.x = p.x + 1;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	1c5a      	adds	r2, r3, #1
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	609a      	str	r2, [r3, #8]
	surCoor.S.y = p.y;
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	60da      	str	r2, [r3, #12]

	surCoor.W.x = p.x;
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	611a      	str	r2, [r3, #16]
	surCoor.W.y = p.y - 1;
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	1e5a      	subs	r2, r3, #1
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	615a      	str	r2, [r3, #20]

	surCoor.E.x = p.x;
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	619a      	str	r2, [r3, #24]
	surCoor.E.y = p.y + 1;
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	1c5a      	adds	r2, r3, #1
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	61da      	str	r2, [r3, #28]

	if (surCoor.S.x >= ROWS) {
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	2b04      	cmp	r3, #4
 8008698:	dd03      	ble.n	80086a2 <_Z12getSurrounds10coordinate+0x56>
		surCoor.S.x = -1;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f04f 32ff 	mov.w	r2, #4294967295
 80086a0:	609a      	str	r2, [r3, #8]
	}
	if (surCoor.E.y >= COLUMNS) {
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	2b04      	cmp	r3, #4
 80086a8:	dd03      	ble.n	80086b2 <_Z12getSurrounds10coordinate+0x66>
		surCoor.E.y = -1;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f04f 32ff 	mov.w	r2, #4294967295
 80086b0:	61da      	str	r2, [r3, #28]
	}

	return surCoor;
 80086b2:	bf00      	nop
}
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <_Z12isConsistant10coordinate>:

bool isConsistant(struct coordinate p) {
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b092      	sub	sp, #72	; 0x48
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	463b      	mov	r3, r7
 80086c8:	e883 0003 	stmia.w	r3, {r0, r1}
	struct surroundCoor surr = getSurrounds(p);
 80086cc:	f107 001c 	add.w	r0, r7, #28
 80086d0:	463b      	mov	r3, r7
 80086d2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80086d6:	f7ff ffb9 	bl	800864c <_Z12getSurrounds10coordinate>
	int minVals[4];
	if (surr.N.x >= 0 && surr.N.y >= 0) {
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	db16      	blt.n	800870e <_Z12isConsistant10coordinate+0x4e>
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	db13      	blt.n	800870e <_Z12isConsistant10coordinate+0x4e>
		if (isAccessible(p, surr.N)) {
 80086e6:	f107 031c 	add.w	r3, r7, #28
 80086ea:	cb0c      	ldmia	r3, {r2, r3}
 80086ec:	4639      	mov	r1, r7
 80086ee:	c903      	ldmia	r1, {r0, r1}
 80086f0:	f7ff fe36 	bl	8008360 <_Z12isAccessible10coordinateS_>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d009      	beq.n	800870e <_Z12isConsistant10coordinate+0x4e>
			minVals[0] = flood[surr.N.x][surr.N.y];
 80086fa:	69fa      	ldr	r2, [r7, #28]
 80086fc:	6a39      	ldr	r1, [r7, #32]
 80086fe:	4847      	ldr	r0, [pc, #284]	; (800881c <_Z12isConsistant10coordinate+0x15c>)
 8008700:	4613      	mov	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4413      	add	r3, r2
 8008706:	440b      	add	r3, r1
 8008708:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800870c:	60fb      	str	r3, [r7, #12]
		}
	}
	if (surr.E.x >= 0 && surr.E.y >= 0) {
 800870e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008710:	2b00      	cmp	r3, #0
 8008712:	db16      	blt.n	8008742 <_Z12isConsistant10coordinate+0x82>
 8008714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008716:	2b00      	cmp	r3, #0
 8008718:	db13      	blt.n	8008742 <_Z12isConsistant10coordinate+0x82>
		if (isAccessible(p, surr.E)) {
 800871a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800871e:	cb0c      	ldmia	r3, {r2, r3}
 8008720:	4639      	mov	r1, r7
 8008722:	c903      	ldmia	r1, {r0, r1}
 8008724:	f7ff fe1c 	bl	8008360 <_Z12isAccessible10coordinateS_>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d009      	beq.n	8008742 <_Z12isConsistant10coordinate+0x82>
			minVals[1] = flood[surr.E.x][surr.E.y];
 800872e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008730:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008732:	483a      	ldr	r0, [pc, #232]	; (800881c <_Z12isConsistant10coordinate+0x15c>)
 8008734:	4613      	mov	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	440b      	add	r3, r1
 800873c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008740:	613b      	str	r3, [r7, #16]
		}
	}
	if (surr.W.x >= 0 && surr.W.y >= 0) {
 8008742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008744:	2b00      	cmp	r3, #0
 8008746:	db16      	blt.n	8008776 <_Z12isConsistant10coordinate+0xb6>
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	2b00      	cmp	r3, #0
 800874c:	db13      	blt.n	8008776 <_Z12isConsistant10coordinate+0xb6>
		if (isAccessible(p, surr.W)) {
 800874e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008752:	cb0c      	ldmia	r3, {r2, r3}
 8008754:	4639      	mov	r1, r7
 8008756:	c903      	ldmia	r1, {r0, r1}
 8008758:	f7ff fe02 	bl	8008360 <_Z12isAccessible10coordinateS_>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d009      	beq.n	8008776 <_Z12isConsistant10coordinate+0xb6>
			minVals[2] = flood[surr.W.x][surr.W.y];
 8008762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008766:	482d      	ldr	r0, [pc, #180]	; (800881c <_Z12isConsistant10coordinate+0x15c>)
 8008768:	4613      	mov	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	440b      	add	r3, r1
 8008770:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008774:	617b      	str	r3, [r7, #20]
		}
	}
	if (surr.S.x >= 0 && surr.S.y >= 0) {
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	2b00      	cmp	r3, #0
 800877a:	db16      	blt.n	80087aa <_Z12isConsistant10coordinate+0xea>
 800877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877e:	2b00      	cmp	r3, #0
 8008780:	db13      	blt.n	80087aa <_Z12isConsistant10coordinate+0xea>
		if (isAccessible(p, surr.S)) {
 8008782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008786:	cb0c      	ldmia	r3, {r2, r3}
 8008788:	4639      	mov	r1, r7
 800878a:	c903      	ldmia	r1, {r0, r1}
 800878c:	f7ff fde8 	bl	8008360 <_Z12isAccessible10coordinateS_>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d009      	beq.n	80087aa <_Z12isConsistant10coordinate+0xea>
			minVals[3] = flood[surr.S.x][surr.S.y];
 8008796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800879a:	4820      	ldr	r0, [pc, #128]	; (800881c <_Z12isConsistant10coordinate+0x15c>)
 800879c:	4613      	mov	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	440b      	add	r3, r1
 80087a4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80087a8:	61bb      	str	r3, [r7, #24]
		}
	}
	int val = flood[p.x][p.y];
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	481b      	ldr	r0, [pc, #108]	; (800881c <_Z12isConsistant10coordinate+0x15c>)
 80087b0:	4613      	mov	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	440b      	add	r3, r1
 80087b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80087bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	int minCount = 0;
 80087be:	2300      	movs	r3, #0
 80087c0:	647b      	str	r3, [r7, #68]	; 0x44
	for (int i = 0; i < 4; i++) {
 80087c2:	2300      	movs	r3, #0
 80087c4:	643b      	str	r3, [r7, #64]	; 0x40
 80087c6:	e018      	b.n	80087fa <_Z12isConsistant10coordinate+0x13a>
		if (minVals[i] == val - 1 && minVals[i] != -1) {
 80087c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	3348      	adds	r3, #72	; 0x48
 80087ce:	443b      	add	r3, r7
 80087d0:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80087d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d6:	3b01      	subs	r3, #1
 80087d8:	429a      	cmp	r2, r3
 80087da:	d10b      	bne.n	80087f4 <_Z12isConsistant10coordinate+0x134>
 80087dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	3348      	adds	r3, #72	; 0x48
 80087e2:	443b      	add	r3, r7
 80087e4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80087e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ec:	d002      	beq.n	80087f4 <_Z12isConsistant10coordinate+0x134>
			minCount++;
 80087ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087f0:	3301      	adds	r3, #1
 80087f2:	647b      	str	r3, [r7, #68]	; 0x44
	for (int i = 0; i < 4; i++) {
 80087f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087f6:	3301      	adds	r3, #1
 80087f8:	643b      	str	r3, [r7, #64]	; 0x40
 80087fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087fc:	2b03      	cmp	r3, #3
 80087fe:	dde3      	ble.n	80087c8 <_Z12isConsistant10coordinate+0x108>
		}
	}

	if (minCount > 0 || val == 0) {
 8008800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008802:	2b00      	cmp	r3, #0
 8008804:	dc02      	bgt.n	800880c <_Z12isConsistant10coordinate+0x14c>
 8008806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008808:	2b00      	cmp	r3, #0
 800880a:	d101      	bne.n	8008810 <_Z12isConsistant10coordinate+0x150>
		return true;
 800880c:	2301      	movs	r3, #1
 800880e:	e000      	b.n	8008812 <_Z12isConsistant10coordinate+0x152>
	} else {
		return false;
 8008810:	2300      	movs	r3, #0
	}

}
 8008812:	4618      	mov	r0, r3
 8008814:	3748      	adds	r7, #72	; 0x48
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20000034 	.word	0x20000034

08008820 <_Z14makeConsistant10coordinate>:

void makeConsistant(struct coordinate p) {
 8008820:	b590      	push	{r4, r7, lr}
 8008822:	b091      	sub	sp, #68	; 0x44
 8008824:	af00      	add	r7, sp, #0
 8008826:	463b      	mov	r3, r7
 8008828:	e883 0003 	stmia.w	r3, {r0, r1}
	struct surroundCoor surr = getSurrounds(p);
 800882c:	f107 0018 	add.w	r0, r7, #24
 8008830:	463b      	mov	r3, r7
 8008832:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008836:	f7ff ff09 	bl	800864c <_Z12getSurrounds10coordinate>
	int minVals[4];
	if (surr.N.x >= 0 && surr.N.y >= 0) {
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	2b00      	cmp	r3, #0
 800883e:	db16      	blt.n	800886e <_Z14makeConsistant10coordinate+0x4e>
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	2b00      	cmp	r3, #0
 8008844:	db13      	blt.n	800886e <_Z14makeConsistant10coordinate+0x4e>
		if (isAccessible(p, surr.N)) {
 8008846:	f107 0318 	add.w	r3, r7, #24
 800884a:	cb0c      	ldmia	r3, {r2, r3}
 800884c:	4639      	mov	r1, r7
 800884e:	c903      	ldmia	r1, {r0, r1}
 8008850:	f7ff fd86 	bl	8008360 <_Z12isAccessible10coordinateS_>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d009      	beq.n	800886e <_Z14makeConsistant10coordinate+0x4e>
			minVals[0] = flood[surr.N.x][surr.N.y];
 800885a:	69ba      	ldr	r2, [r7, #24]
 800885c:	69f9      	ldr	r1, [r7, #28]
 800885e:	4849      	ldr	r0, [pc, #292]	; (8008984 <_Z14makeConsistant10coordinate+0x164>)
 8008860:	4613      	mov	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4413      	add	r3, r2
 8008866:	440b      	add	r3, r1
 8008868:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800886c:	60bb      	str	r3, [r7, #8]
		}
	}
	if (surr.E.x >= 0 && surr.E.y >= 0) {
 800886e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008870:	2b00      	cmp	r3, #0
 8008872:	db16      	blt.n	80088a2 <_Z14makeConsistant10coordinate+0x82>
 8008874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008876:	2b00      	cmp	r3, #0
 8008878:	db13      	blt.n	80088a2 <_Z14makeConsistant10coordinate+0x82>
		if (isAccessible(p, surr.E)) {
 800887a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800887e:	cb0c      	ldmia	r3, {r2, r3}
 8008880:	4639      	mov	r1, r7
 8008882:	c903      	ldmia	r1, {r0, r1}
 8008884:	f7ff fd6c 	bl	8008360 <_Z12isAccessible10coordinateS_>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d009      	beq.n	80088a2 <_Z14makeConsistant10coordinate+0x82>
			minVals[1] = flood[surr.E.x][surr.E.y];
 800888e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008890:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008892:	483c      	ldr	r0, [pc, #240]	; (8008984 <_Z14makeConsistant10coordinate+0x164>)
 8008894:	4613      	mov	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4413      	add	r3, r2
 800889a:	440b      	add	r3, r1
 800889c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80088a0:	60fb      	str	r3, [r7, #12]
		}
	}
	if (surr.W.x >= 0 && surr.W.y >= 0) {
 80088a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	db16      	blt.n	80088d6 <_Z14makeConsistant10coordinate+0xb6>
 80088a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	db13      	blt.n	80088d6 <_Z14makeConsistant10coordinate+0xb6>
		if (isAccessible(p, surr.W)) {
 80088ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088b2:	cb0c      	ldmia	r3, {r2, r3}
 80088b4:	4639      	mov	r1, r7
 80088b6:	c903      	ldmia	r1, {r0, r1}
 80088b8:	f7ff fd52 	bl	8008360 <_Z12isAccessible10coordinateS_>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d009      	beq.n	80088d6 <_Z14makeConsistant10coordinate+0xb6>
			minVals[2] = flood[surr.W.x][surr.W.y];
 80088c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088c6:	482f      	ldr	r0, [pc, #188]	; (8008984 <_Z14makeConsistant10coordinate+0x164>)
 80088c8:	4613      	mov	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	440b      	add	r3, r1
 80088d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80088d4:	613b      	str	r3, [r7, #16]
		}
	}
	if (surr.S.x >= 0 && surr.S.y >= 0) {
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	db16      	blt.n	800890a <_Z14makeConsistant10coordinate+0xea>
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	2b00      	cmp	r3, #0
 80088e0:	db13      	blt.n	800890a <_Z14makeConsistant10coordinate+0xea>
		if (isAccessible(p, surr.S)) {
 80088e2:	f107 0320 	add.w	r3, r7, #32
 80088e6:	cb0c      	ldmia	r3, {r2, r3}
 80088e8:	4639      	mov	r1, r7
 80088ea:	c903      	ldmia	r1, {r0, r1}
 80088ec:	f7ff fd38 	bl	8008360 <_Z12isAccessible10coordinateS_>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d009      	beq.n	800890a <_Z14makeConsistant10coordinate+0xea>
			minVals[3] = flood[surr.S.x][surr.S.y];
 80088f6:	6a3a      	ldr	r2, [r7, #32]
 80088f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088fa:	4822      	ldr	r0, [pc, #136]	; (8008984 <_Z14makeConsistant10coordinate+0x164>)
 80088fc:	4613      	mov	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	440b      	add	r3, r1
 8008904:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008908:	617b      	str	r3, [r7, #20]
		}
	}
	int minimum = 1000;
 800890a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800890e:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (int i = 0; i < 4; i++) {
 8008910:	2300      	movs	r3, #0
 8008912:	63bb      	str	r3, [r7, #56]	; 0x38
 8008914:	e023      	b.n	800895e <_Z14makeConsistant10coordinate+0x13e>
		if (minVals[i] == -1) {
 8008916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	3340      	adds	r3, #64	; 0x40
 800891c:	443b      	add	r3, r7
 800891e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8008922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008926:	d107      	bne.n	8008938 <_Z14makeConsistant10coordinate+0x118>
			minVals[i] = 1000;
 8008928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	3340      	adds	r3, #64	; 0x40
 800892e:	443b      	add	r3, r7
 8008930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008934:	f843 2c38 	str.w	r2, [r3, #-56]
		}
		if (minVals[i] < minimum) {
 8008938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	3340      	adds	r3, #64	; 0x40
 800893e:	443b      	add	r3, r7
 8008940:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8008944:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008946:	429a      	cmp	r2, r3
 8008948:	dd06      	ble.n	8008958 <_Z14makeConsistant10coordinate+0x138>
			minimum = minVals[i];
 800894a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	3340      	adds	r3, #64	; 0x40
 8008950:	443b      	add	r3, r7
 8008952:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8008956:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (int i = 0; i < 4; i++) {
 8008958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895a:	3301      	adds	r3, #1
 800895c:	63bb      	str	r3, [r7, #56]	; 0x38
 800895e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008960:	2b03      	cmp	r3, #3
 8008962:	ddd8      	ble.n	8008916 <_Z14makeConsistant10coordinate+0xf6>
		}
	}
	flood[p.x][p.y] = minimum + 1;
 8008964:	683a      	ldr	r2, [r7, #0]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800896a:	1c59      	adds	r1, r3, #1
 800896c:	4c05      	ldr	r4, [pc, #20]	; (8008984 <_Z14makeConsistant10coordinate+0x164>)
 800896e:	4613      	mov	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	4403      	add	r3, r0
 8008976:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
}
 800897a:	bf00      	nop
 800897c:	3744      	adds	r7, #68	; 0x44
 800897e:	46bd      	mov	sp, r7
 8008980:	bd90      	pop	{r4, r7, pc}
 8008982:	bf00      	nop
 8008984:	20000034 	.word	0x20000034

08008988 <_Z9floodFill10coordinateS_>:

void floodFill(struct coordinate p, struct coordinate prev) {
 8008988:	b590      	push	{r4, r7, lr}
 800898a:	b091      	sub	sp, #68	; 0x44
 800898c:	af00      	add	r7, sp, #0
 800898e:	f107 0408 	add.w	r4, r7, #8
 8008992:	e884 0003 	stmia.w	r4, {r0, r1}
 8008996:	4639      	mov	r1, r7
 8008998:	e881 000c 	stmia.w	r1, {r2, r3}
	if (!isConsistant(p)) {
 800899c:	f107 0308 	add.w	r3, r7, #8
 80089a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80089a4:	f7ff fe8c 	bl	80086c0 <_Z12isConsistant10coordinate>
 80089a8:	4603      	mov	r3, r0
 80089aa:	f083 0301 	eor.w	r3, r3, #1
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d012      	beq.n	80089da <_Z9floodFill10coordinateS_+0x52>
		flood[p.x][p.y] = flood[prev.x][prev.y] + 1;
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	6879      	ldr	r1, [r7, #4]
 80089b8:	485d      	ldr	r0, [pc, #372]	; (8008b30 <_Z9floodFill10coordinateS_+0x1a8>)
 80089ba:	4613      	mov	r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	440b      	add	r3, r1
 80089c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	1c59      	adds	r1, r3, #1
 80089cc:	4c58      	ldr	r4, [pc, #352]	; (8008b30 <_Z9floodFill10coordinateS_+0x1a8>)
 80089ce:	4613      	mov	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	4403      	add	r3, r0
 80089d6:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
	}

	Queue q;
 80089da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff fa52 	bl	8007e88 <_ZN5QueueC1Ev>
	q.enQueue(p);
 80089e4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80089e8:	f107 0308 	add.w	r3, r7, #8
 80089ec:	e893 0006 	ldmia.w	r3, {r1, r2}
 80089f0:	f7ff fa71 	bl	8007ed6 <_ZN5Queue7enQueueE10coordinate>

	while (!q.isempty()) {
 80089f4:	e08a      	b.n	8008b0c <_Z9floodFill10coordinateS_+0x184>
		struct coordinate crun = q.deQueue();
 80089f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80089fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80089fe:	4611      	mov	r1, r2
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7ff fa99 	bl	8007f38 <_ZN5Queue7deQueueEv>
		if (isConsistant(crun)) {
 8008a06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008a0e:	f7ff fe57 	bl	80086c0 <_Z12isConsistant10coordinate>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d179      	bne.n	8008b0c <_Z9floodFill10coordinateS_+0x184>

		} else {
			makeConsistant(crun);
 8008a18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008a20:	f7ff fefe 	bl	8008820 <_Z14makeConsistant10coordinate>
			q.enQueue(crun);
 8008a24:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8008a28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a2c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008a30:	f7ff fa51 	bl	8007ed6 <_ZN5Queue7enQueueE10coordinate>
			struct surroundCoor surr = getSurrounds(crun);
 8008a34:	f107 0010 	add.w	r0, r7, #16
 8008a38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a3c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008a40:	f7ff fe04 	bl	800864c <_Z12getSurrounds10coordinate>
			if (surr.N.x >= 0 && surr.N.y >= 0) {
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	db15      	blt.n	8008a76 <_Z9floodFill10coordinateS_+0xee>
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	db12      	blt.n	8008a76 <_Z9floodFill10coordinateS_+0xee>
				if (isAccessible(crun, surr.N)) {
 8008a50:	f107 0310 	add.w	r3, r7, #16
 8008a54:	cb0c      	ldmia	r3, {r2, r3}
 8008a56:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008a5a:	c903      	ldmia	r1, {r0, r1}
 8008a5c:	f7ff fc80 	bl	8008360 <_Z12isAccessible10coordinateS_>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d007      	beq.n	8008a76 <_Z9floodFill10coordinateS_+0xee>
					q.enQueue(surr.N);
 8008a66:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8008a6a:	f107 0310 	add.w	r3, r7, #16
 8008a6e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008a72:	f7ff fa30 	bl	8007ed6 <_ZN5Queue7enQueueE10coordinate>
				}
			}
			if (surr.E.x >= 0 && surr.E.y >= 0) {
 8008a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	db15      	blt.n	8008aa8 <_Z9floodFill10coordinateS_+0x120>
 8008a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	db12      	blt.n	8008aa8 <_Z9floodFill10coordinateS_+0x120>
				if (isAccessible(crun, surr.E)) {
 8008a82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008a86:	cb0c      	ldmia	r3, {r2, r3}
 8008a88:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008a8c:	c903      	ldmia	r1, {r0, r1}
 8008a8e:	f7ff fc67 	bl	8008360 <_Z12isAccessible10coordinateS_>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d007      	beq.n	8008aa8 <_Z9floodFill10coordinateS_+0x120>
					q.enQueue(surr.E);
 8008a98:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8008a9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008aa0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008aa4:	f7ff fa17 	bl	8007ed6 <_ZN5Queue7enQueueE10coordinate>
				}
			}
			if (surr.W.x >= 0 && surr.W.y >= 0) {
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	db15      	blt.n	8008ada <_Z9floodFill10coordinateS_+0x152>
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	db12      	blt.n	8008ada <_Z9floodFill10coordinateS_+0x152>
				if (isAccessible(crun, surr.W)) {
 8008ab4:	f107 0320 	add.w	r3, r7, #32
 8008ab8:	cb0c      	ldmia	r3, {r2, r3}
 8008aba:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008abe:	c903      	ldmia	r1, {r0, r1}
 8008ac0:	f7ff fc4e 	bl	8008360 <_Z12isAccessible10coordinateS_>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d007      	beq.n	8008ada <_Z9floodFill10coordinateS_+0x152>
					q.enQueue(surr.W);
 8008aca:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8008ace:	f107 0320 	add.w	r3, r7, #32
 8008ad2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008ad6:	f7ff f9fe 	bl	8007ed6 <_ZN5Queue7enQueueE10coordinate>
				}
			}
			if (surr.S.x >= 0 && surr.S.y >= 0) {
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	db15      	blt.n	8008b0c <_Z9floodFill10coordinateS_+0x184>
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	db12      	blt.n	8008b0c <_Z9floodFill10coordinateS_+0x184>
				if (isAccessible(crun, surr.S)) {
 8008ae6:	f107 0318 	add.w	r3, r7, #24
 8008aea:	cb0c      	ldmia	r3, {r2, r3}
 8008aec:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008af0:	c903      	ldmia	r1, {r0, r1}
 8008af2:	f7ff fc35 	bl	8008360 <_Z12isAccessible10coordinateS_>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d007      	beq.n	8008b0c <_Z9floodFill10coordinateS_+0x184>
					q.enQueue(surr.S);
 8008afc:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8008b00:	f107 0318 	add.w	r3, r7, #24
 8008b04:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008b08:	f7ff f9e5 	bl	8007ed6 <_ZN5Queue7enQueueE10coordinate>
	while (!q.isempty()) {
 8008b0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7ff f9cb 	bl	8007eac <_ZN5Queue7isemptyEv>
 8008b16:	4603      	mov	r3, r0
 8008b18:	f083 0301 	eor.w	r3, r3, #1
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f47f af69 	bne.w	80089f6 <_Z9floodFill10coordinateS_+0x6e>
				}
			}
		}
	}

}
 8008b24:	bf00      	nop
 8008b26:	bf00      	nop
 8008b28:	3744      	adds	r7, #68	; 0x44
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd90      	pop	{r4, r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	20000034 	.word	0x20000034

08008b34 <_Z6toMove10coordinateS_i>:

char toMove(struct coordinate p, struct coordinate prevPos, int orient) {
 8008b34:	b590      	push	{r4, r7, lr}
 8008b36:	b097      	sub	sp, #92	; 0x5c
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	f107 0408 	add.w	r4, r7, #8
 8008b3e:	e884 0003 	stmia.w	r4, {r0, r1}
 8008b42:	4639      	mov	r1, r7
 8008b44:	e881 000c 	stmia.w	r1, {r2, r3}
	struct surroundCoor surr = getSurrounds(p);
 8008b48:	f107 0020 	add.w	r0, r7, #32
 8008b4c:	f107 0308 	add.w	r3, r7, #8
 8008b50:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008b54:	f7ff fd7a 	bl	800864c <_Z12getSurrounds10coordinate>
//	int val = flood[p.x][p.y];
	int minVals[4] = { 1000, 1000, 1000, 1000 };
 8008b58:	4b83      	ldr	r3, [pc, #524]	; (8008d68 <_Z6toMove10coordinateS_i+0x234>)
 8008b5a:	f107 0410 	add.w	r4, r7, #16
 8008b5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int prevDir = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	657b      	str	r3, [r7, #84]	; 0x54
	if (surr.N.x >= 0 && surr.N.y >= 0) {
 8008b68:	6a3b      	ldr	r3, [r7, #32]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	db21      	blt.n	8008bb2 <_Z6toMove10coordinateS_i+0x7e>
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	db1e      	blt.n	8008bb2 <_Z6toMove10coordinateS_i+0x7e>
		if (isAccessible(p, surr.N)) {
 8008b74:	f107 0320 	add.w	r3, r7, #32
 8008b78:	cb0c      	ldmia	r3, {r2, r3}
 8008b7a:	f107 0108 	add.w	r1, r7, #8
 8008b7e:	c903      	ldmia	r1, {r0, r1}
 8008b80:	f7ff fbee 	bl	8008360 <_Z12isAccessible10coordinateS_>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d013      	beq.n	8008bb2 <_Z6toMove10coordinateS_i+0x7e>
			minVals[0] = flood[surr.N.x][surr.N.y];
 8008b8a:	6a3a      	ldr	r2, [r7, #32]
 8008b8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b8e:	4877      	ldr	r0, [pc, #476]	; (8008d6c <_Z6toMove10coordinateS_i+0x238>)
 8008b90:	4613      	mov	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	440b      	add	r3, r1
 8008b98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008b9c:	613b      	str	r3, [r7, #16]
			if (surr.N.x == prevPos.x && surr.N.y == prevPos.y) {
 8008b9e:	6a3a      	ldr	r2, [r7, #32]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d105      	bne.n	8008bb2 <_Z6toMove10coordinateS_i+0x7e>
 8008ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d101      	bne.n	8008bb2 <_Z6toMove10coordinateS_i+0x7e>
				prevDir = 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	657b      	str	r3, [r7, #84]	; 0x54
			}
		}
	}
	if (surr.E.x >= 0 && surr.E.y >= 0) {
 8008bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	db21      	blt.n	8008bfc <_Z6toMove10coordinateS_i+0xc8>
 8008bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	db1e      	blt.n	8008bfc <_Z6toMove10coordinateS_i+0xc8>
		if (isAccessible(p, surr.E)) {
 8008bbe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008bc2:	cb0c      	ldmia	r3, {r2, r3}
 8008bc4:	f107 0108 	add.w	r1, r7, #8
 8008bc8:	c903      	ldmia	r1, {r0, r1}
 8008bca:	f7ff fbc9 	bl	8008360 <_Z12isAccessible10coordinateS_>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d013      	beq.n	8008bfc <_Z6toMove10coordinateS_i+0xc8>
			minVals[1] = flood[surr.E.x][surr.E.y];
 8008bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bd8:	4864      	ldr	r0, [pc, #400]	; (8008d6c <_Z6toMove10coordinateS_i+0x238>)
 8008bda:	4613      	mov	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4413      	add	r3, r2
 8008be0:	440b      	add	r3, r1
 8008be2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008be6:	617b      	str	r3, [r7, #20]
			if (surr.E.x == prevPos.x && surr.E.y == prevPos.y) {
 8008be8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d105      	bne.n	8008bfc <_Z6toMove10coordinateS_i+0xc8>
 8008bf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d101      	bne.n	8008bfc <_Z6toMove10coordinateS_i+0xc8>
				prevDir = 1;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	657b      	str	r3, [r7, #84]	; 0x54
			}
		}
	}
	if (surr.W.x >= 0 && surr.W.y >= 0) {
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	db21      	blt.n	8008c46 <_Z6toMove10coordinateS_i+0x112>
 8008c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	db1e      	blt.n	8008c46 <_Z6toMove10coordinateS_i+0x112>
		if (isAccessible(p, surr.W)) {
 8008c08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c0c:	cb0c      	ldmia	r3, {r2, r3}
 8008c0e:	f107 0108 	add.w	r1, r7, #8
 8008c12:	c903      	ldmia	r1, {r0, r1}
 8008c14:	f7ff fba4 	bl	8008360 <_Z12isAccessible10coordinateS_>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d013      	beq.n	8008c46 <_Z6toMove10coordinateS_i+0x112>
			minVals[2] = flood[surr.W.x][surr.W.y];
 8008c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008c22:	4852      	ldr	r0, [pc, #328]	; (8008d6c <_Z6toMove10coordinateS_i+0x238>)
 8008c24:	4613      	mov	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	440b      	add	r3, r1
 8008c2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008c30:	61bb      	str	r3, [r7, #24]
			if (surr.W.x == prevPos.x && surr.W.y == prevPos.y) {
 8008c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d105      	bne.n	8008c46 <_Z6toMove10coordinateS_i+0x112>
 8008c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d101      	bne.n	8008c46 <_Z6toMove10coordinateS_i+0x112>
				prevDir = 2;
 8008c42:	2302      	movs	r3, #2
 8008c44:	657b      	str	r3, [r7, #84]	; 0x54
			}
		}
	}
	if (surr.S.x >= 0 && surr.S.y >= 0) {
 8008c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	db21      	blt.n	8008c90 <_Z6toMove10coordinateS_i+0x15c>
 8008c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	db1e      	blt.n	8008c90 <_Z6toMove10coordinateS_i+0x15c>
		if (isAccessible(p, surr.S)) {
 8008c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c56:	cb0c      	ldmia	r3, {r2, r3}
 8008c58:	f107 0108 	add.w	r1, r7, #8
 8008c5c:	c903      	ldmia	r1, {r0, r1}
 8008c5e:	f7ff fb7f 	bl	8008360 <_Z12isAccessible10coordinateS_>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d013      	beq.n	8008c90 <_Z6toMove10coordinateS_i+0x15c>
			minVals[3] = flood[surr.S.x][surr.S.y];
 8008c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c6c:	483f      	ldr	r0, [pc, #252]	; (8008d6c <_Z6toMove10coordinateS_i+0x238>)
 8008c6e:	4613      	mov	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	440b      	add	r3, r1
 8008c76:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008c7a:	61fb      	str	r3, [r7, #28]
			if (surr.S.x == prevPos.x && surr.S.y == prevPos.y) {
 8008c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d105      	bne.n	8008c90 <_Z6toMove10coordinateS_i+0x15c>
 8008c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d101      	bne.n	8008c90 <_Z6toMove10coordinateS_i+0x15c>
				prevDir = 3;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	657b      	str	r3, [r7, #84]	; 0x54
			}
		}
	}
	int minimum = 1000;
 8008c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c94:	653b      	str	r3, [r7, #80]	; 0x50
	int noMovements = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (int i = 0; i < 4; i++) {
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c9e:	e00e      	b.n	8008cbe <_Z6toMove10coordinateS_i+0x18a>
		if (minVals[i] != 1000) {
 8008ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	3358      	adds	r3, #88	; 0x58
 8008ca6:	443b      	add	r3, r7
 8008ca8:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8008cac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cb0:	d002      	beq.n	8008cb8 <_Z6toMove10coordinateS_i+0x184>
			noMovements++;
 8008cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (int i = 0; i < 4; i++) {
 8008cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cba:	3301      	adds	r3, #1
 8008cbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	dded      	ble.n	8008ca0 <_Z6toMove10coordinateS_i+0x16c>
		}
	}

	int minCell = 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	647b      	str	r3, [r7, #68]	; 0x44
	for (int i = 0; i < 4; i++) {
 8008cc8:	2300      	movs	r3, #0
 8008cca:	643b      	str	r3, [r7, #64]	; 0x40
 8008ccc:	e025      	b.n	8008d1a <_Z6toMove10coordinateS_i+0x1e6>
		if (minVals[i] < minimum) {
 8008cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	3358      	adds	r3, #88	; 0x58
 8008cd4:	443b      	add	r3, r7
 8008cd6:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8008cda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	dd19      	ble.n	8008d14 <_Z6toMove10coordinateS_i+0x1e0>
			if (noMovements == 1) {
 8008ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d109      	bne.n	8008cfa <_Z6toMove10coordinateS_i+0x1c6>
				minimum = minVals[i];
 8008ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	3358      	adds	r3, #88	; 0x58
 8008cec:	443b      	add	r3, r7
 8008cee:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8008cf2:	653b      	str	r3, [r7, #80]	; 0x50
				minCell = i;
 8008cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8008cf8:	e00c      	b.n	8008d14 <_Z6toMove10coordinateS_i+0x1e0>
			} else {
				if (i == prevDir) {
 8008cfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d008      	beq.n	8008d14 <_Z6toMove10coordinateS_i+0x1e0>

				} else {
					minimum = minVals[i];
 8008d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	3358      	adds	r3, #88	; 0x58
 8008d08:	443b      	add	r3, r7
 8008d0a:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8008d0e:	653b      	str	r3, [r7, #80]	; 0x50
					minCell = i;
 8008d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d12:	647b      	str	r3, [r7, #68]	; 0x44
	for (int i = 0; i < 4; i++) {
 8008d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d16:	3301      	adds	r3, #1
 8008d18:	643b      	str	r3, [r7, #64]	; 0x40
 8008d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	ddd6      	ble.n	8008cce <_Z6toMove10coordinateS_i+0x19a>
			}

		}
	}

	if (minCell == orient) {
 8008d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d101      	bne.n	8008d2c <_Z6toMove10coordinateS_i+0x1f8>
		return 'F';
 8008d28:	2346      	movs	r3, #70	; 0x46
 8008d2a:	e018      	b.n	8008d5e <_Z6toMove10coordinateS_i+0x22a>
	} else if (minCell == orient - 1 || minCell == orient + 3) {
 8008d2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d004      	beq.n	8008d40 <_Z6toMove10coordinateS_i+0x20c>
 8008d36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d38:	3303      	adds	r3, #3
 8008d3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d101      	bne.n	8008d44 <_Z6toMove10coordinateS_i+0x210>
		return 'L';
 8008d40:	234c      	movs	r3, #76	; 0x4c
 8008d42:	e00c      	b.n	8008d5e <_Z6toMove10coordinateS_i+0x22a>
	} else if (minCell == orient + 1 || minCell == orient - 3) {
 8008d44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d46:	3301      	adds	r3, #1
 8008d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d004      	beq.n	8008d58 <_Z6toMove10coordinateS_i+0x224>
 8008d4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d50:	3b03      	subs	r3, #3
 8008d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d101      	bne.n	8008d5c <_Z6toMove10coordinateS_i+0x228>
		return 'R';
 8008d58:	2352      	movs	r3, #82	; 0x52
 8008d5a:	e000      	b.n	8008d5e <_Z6toMove10coordinateS_i+0x22a>
	} else {
		return 'B';
 8008d5c:	2342      	movs	r3, #66	; 0x42
	}

}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	375c      	adds	r7, #92	; 0x5c
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd90      	pop	{r4, r7, pc}
 8008d66:	bf00      	nop
 8008d68:	0800bdac 	.word	0x0800bdac
 8008d6c:	20000034 	.word	0x20000034

08008d70 <_Z11orientationic>:
		distance += 1;
	}

}

int orientation(int orient, char turning) {
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	70fb      	strb	r3, [r7, #3]
	if (turning == 'L') {
 8008d7c:	78fb      	ldrb	r3, [r7, #3]
 8008d7e:	2b4c      	cmp	r3, #76	; 0x4c
 8008d80:	d109      	bne.n	8008d96 <_Z11orientationic+0x26>
		orient -= 1;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	3b01      	subs	r3, #1
 8008d86:	607b      	str	r3, [r7, #4]
		if (orient == -1) {
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8e:	d128      	bne.n	8008de2 <_Z11orientationic+0x72>
			orient = 3;
 8008d90:	2303      	movs	r3, #3
 8008d92:	607b      	str	r3, [r7, #4]
 8008d94:	e025      	b.n	8008de2 <_Z11orientationic+0x72>
		}
	}

	else if (turning == 'R') {
 8008d96:	78fb      	ldrb	r3, [r7, #3]
 8008d98:	2b52      	cmp	r3, #82	; 0x52
 8008d9a:	d108      	bne.n	8008dae <_Z11orientationic+0x3e>
		orient += 1;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	607b      	str	r3, [r7, #4]
		if (orient == 4) {
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	d11c      	bne.n	8008de2 <_Z11orientationic+0x72>
			orient = 0;
 8008da8:	2300      	movs	r3, #0
 8008daa:	607b      	str	r3, [r7, #4]
 8008dac:	e019      	b.n	8008de2 <_Z11orientationic+0x72>
		}
	}

	else if (turning == 'B') {
 8008dae:	78fb      	ldrb	r3, [r7, #3]
 8008db0:	2b42      	cmp	r3, #66	; 0x42
 8008db2:	d116      	bne.n	8008de2 <_Z11orientationic+0x72>
		if (orient == 0) {
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d102      	bne.n	8008dc0 <_Z11orientationic+0x50>
			orient = 2;
 8008dba:	2302      	movs	r3, #2
 8008dbc:	607b      	str	r3, [r7, #4]
 8008dbe:	e010      	b.n	8008de2 <_Z11orientationic+0x72>
		} else if (orient == 1) {
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d102      	bne.n	8008dcc <_Z11orientationic+0x5c>
			orient = 3;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	607b      	str	r3, [r7, #4]
 8008dca:	e00a      	b.n	8008de2 <_Z11orientationic+0x72>
		} else if (orient == 2) {
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d102      	bne.n	8008dd8 <_Z11orientationic+0x68>
			orient = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	607b      	str	r3, [r7, #4]
 8008dd6:	e004      	b.n	8008de2 <_Z11orientationic+0x72>
		} else if (orient == 3) {
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d101      	bne.n	8008de2 <_Z11orientationic+0x72>
			orient = 1;
 8008dde:	2301      	movs	r3, #1
 8008de0:	607b      	str	r3, [r7, #4]
		}
	}
	return orient;
 8008de2:	687b      	ldr	r3, [r7, #4]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <_Z17updateCoordinates10coordinatei>:

struct coordinate updateCoordinates(struct coordinate coordi, int orient) {
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	1d38      	adds	r0, r7, #4
 8008dfa:	e880 0006 	stmia.w	r0, {r1, r2}
 8008dfe:	603b      	str	r3, [r7, #0]
	if (orient == 0) {
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d102      	bne.n	8008e0c <_Z17updateCoordinates10coordinatei+0x1c>
		coordi.x -= 1;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	607b      	str	r3, [r7, #4]
	}
	if (orient == 1) {
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d102      	bne.n	8008e18 <_Z17updateCoordinates10coordinatei+0x28>
		coordi.y += 1;
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	3301      	adds	r3, #1
 8008e16:	60bb      	str	r3, [r7, #8]
	}
	if (orient == 2) {
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d102      	bne.n	8008e24 <_Z17updateCoordinates10coordinatei+0x34>
		coordi.x += 1;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	3301      	adds	r3, #1
 8008e22:	607b      	str	r3, [r7, #4]
	}
	if (orient == 3) {
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	d102      	bne.n	8008e30 <_Z17updateCoordinates10coordinatei+0x40>
		coordi.y -= 1;
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	60bb      	str	r3, [r7, #8]
	}
	return coordi;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	461a      	mov	r2, r3
 8008e34:	1d3b      	adds	r3, r7, #4
 8008e36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008e3a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
	...

08008e4c <searchForward>:
			return 4;
		}
	}
}

int searchForward() {
 8008e4c:	b590      	push	{r4, r7, lr}
 8008e4e:	b087      	sub	sp, #28
 8008e50:	af02      	add	r7, sp, #8


	for (int i = 0; i <= startPos; i++) {
 8008e52:	2300      	movs	r3, #0
 8008e54:	60fb      	str	r3, [r7, #12]
 8008e56:	e004      	b.n	8008e62 <searchForward+0x16>
		rotateFloodCounterClockwise();
 8008e58:	f7fe ffa4 	bl	8007da4 <_Z27rotateFloodCounterClockwisev>
	for (int i = 0; i <= startPos; i++) {
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	4b65      	ldr	r3, [pc, #404]	; (8008ff8 <searchForward+0x1ac>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	ddf5      	ble.n	8008e58 <searchForward+0xc>
	    }

	XY.x = 1;
 8008e6c:	4b63      	ldr	r3, [pc, #396]	; (8008ffc <searchForward+0x1b0>)
 8008e6e:	2201      	movs	r2, #1
 8008e70:	601a      	str	r2, [r3, #0]
	XY.y = 0;
 8008e72:	4b62      	ldr	r3, [pc, #392]	; (8008ffc <searchForward+0x1b0>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	605a      	str	r2, [r3, #4]

	XY_prev.x = 0;
 8008e78:	4b61      	ldr	r3, [pc, #388]	; (8009000 <searchForward+0x1b4>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	601a      	str	r2, [r3, #0]
	XY_prev.y = 0;
 8008e7e:	4b60      	ldr	r3, [pc, #384]	; (8009000 <searchForward+0x1b4>)
 8008e80:	2200      	movs	r2, #0
 8008e82:	605a      	str	r2, [r3, #4]

	while (1) {


		clearScreen();
 8008e84:	f7fe f8cc 	bl	8007020 <clearScreen>
		printInt_font_6x8(LFSensor, 80, 10);
 8008e88:	4b5e      	ldr	r3, [pc, #376]	; (8009004 <searchForward+0x1b8>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	220a      	movs	r2, #10
 8008e8e:	2150      	movs	r1, #80	; 0x50
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fe f8ef 	bl	8007074 <printInt_font_6x8>
		printInt_font_6x8(RFSensor, 2, 10);
 8008e96:	4b5c      	ldr	r3, [pc, #368]	; (8009008 <searchForward+0x1bc>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	220a      	movs	r2, #10
 8008e9c:	2102      	movs	r1, #2
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fe f8e8 	bl	8007074 <printInt_font_6x8>
		printInt_font_6x8(DLSensor, 80, 24);
 8008ea4:	4b59      	ldr	r3, [pc, #356]	; (800900c <searchForward+0x1c0>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2218      	movs	r2, #24
 8008eaa:	2150      	movs	r1, #80	; 0x50
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7fe f8e1 	bl	8007074 <printInt_font_6x8>
		printInt_font_6x8(DRSensor, 2, 24);
 8008eb2:	4b57      	ldr	r3, [pc, #348]	; (8009010 <searchForward+0x1c4>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2218      	movs	r2, #24
 8008eb8:	2102      	movs	r1, #2
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fe f8da 	bl	8007074 <printInt_font_6x8>
		getSensorReadings();
 8008ec0:	f7fe fdec 	bl	8007a9c <getSensorReadings>

		HAL_Delay(4000);
 8008ec4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8008ec8:	f7f9 fc1a 	bl	8002700 <HAL_Delay>

		updateWalls(XY, orient, L, R, F);
 8008ecc:	4b51      	ldr	r3, [pc, #324]	; (8009014 <searchForward+0x1c8>)
 8008ece:	6819      	ldr	r1, [r3, #0]
 8008ed0:	4b51      	ldr	r3, [pc, #324]	; (8009018 <searchForward+0x1cc>)
 8008ed2:	7818      	ldrb	r0, [r3, #0]
 8008ed4:	4b51      	ldr	r3, [pc, #324]	; (800901c <searchForward+0x1d0>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	4a51      	ldr	r2, [pc, #324]	; (8009020 <searchForward+0x1d4>)
 8008eda:	7812      	ldrb	r2, [r2, #0]
 8008edc:	4c47      	ldr	r4, [pc, #284]	; (8008ffc <searchForward+0x1b0>)
 8008ede:	9201      	str	r2, [sp, #4]
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	460a      	mov	r2, r1
 8008ee6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008eea:	f7ff f851 	bl	8007f90 <_Z11updateWalls10coordinateibbb>

		if (flood[XY.x][XY.y] >= 1) //NotInCenter
 8008eee:	4b43      	ldr	r3, [pc, #268]	; (8008ffc <searchForward+0x1b0>)
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	4b42      	ldr	r3, [pc, #264]	; (8008ffc <searchForward+0x1b0>)
 8008ef4:	6859      	ldr	r1, [r3, #4]
 8008ef6:	484b      	ldr	r0, [pc, #300]	; (8009024 <searchForward+0x1d8>)
 8008ef8:	4613      	mov	r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4413      	add	r3, r2
 8008efe:	440b      	add	r3, r1
 8008f00:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	dd6d      	ble.n	8008fe4 <searchForward+0x198>
				{
			floodFill(XY, XY_prev);
 8008f08:	4b3d      	ldr	r3, [pc, #244]	; (8009000 <searchForward+0x1b4>)
 8008f0a:	493c      	ldr	r1, [pc, #240]	; (8008ffc <searchForward+0x1b0>)
 8008f0c:	cb0c      	ldmia	r3, {r2, r3}
 8008f0e:	c903      	ldmia	r1, {r0, r1}
 8008f10:	f7ff fd3a 	bl	8008988 <_Z9floodFill10coordinateS_>
			char direction = toMove(XY, XY_prev, orient);
 8008f14:	4b3f      	ldr	r3, [pc, #252]	; (8009014 <searchForward+0x1c8>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a39      	ldr	r2, [pc, #228]	; (8009000 <searchForward+0x1b4>)
 8008f1a:	4938      	ldr	r1, [pc, #224]	; (8008ffc <searchForward+0x1b0>)
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	ca0c      	ldmia	r2, {r2, r3}
 8008f20:	c903      	ldmia	r1, {r0, r1}
 8008f22:	f7ff fe07 	bl	8008b34 <_Z6toMove10coordinateS_i>
 8008f26:	4603      	mov	r3, r0
 8008f28:	72fb      	strb	r3, [r7, #11]

			clearScreen();
 8008f2a:	f7fe f879 	bl	8007020 <clearScreen>
			printChr_font_6x8(direction, 40, 16);
 8008f2e:	7afb      	ldrb	r3, [r7, #11]
 8008f30:	2210      	movs	r2, #16
 8008f32:	2128      	movs	r1, #40	; 0x28
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fe f87b 	bl	8007030 <printChr_font_6x8>

			HAL_Delay(4000);
 8008f3a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8008f3e:	f7f9 fbdf 	bl	8002700 <HAL_Delay>

			if (direction == 'L') {
 8008f42:	7afb      	ldrb	r3, [r7, #11]
 8008f44:	2b4c      	cmp	r3, #76	; 0x4c
 8008f46:	d10c      	bne.n	8008f62 <searchForward+0x116>
				cellTurnLeft();
 8008f48:	f7fe fbf6 	bl	8007738 <cellTurnLeft>
				orient = orientation(orient, direction);
 8008f4c:	4b31      	ldr	r3, [pc, #196]	; (8009014 <searchForward+0x1c8>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	7afa      	ldrb	r2, [r7, #11]
 8008f52:	4611      	mov	r1, r2
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7ff ff0b 	bl	8008d70 <_Z11orientationic>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	4a2d      	ldr	r2, [pc, #180]	; (8009014 <searchForward+0x1c8>)
 8008f5e:	6013      	str	r3, [r2, #0]
 8008f60:	e026      	b.n	8008fb0 <searchForward+0x164>
			} else if (direction == 'R') {
 8008f62:	7afb      	ldrb	r3, [r7, #11]
 8008f64:	2b52      	cmp	r3, #82	; 0x52
 8008f66:	d10c      	bne.n	8008f82 <searchForward+0x136>
				cellTurnRight();
 8008f68:	f7fe fc08 	bl	800777c <cellTurnRight>
				orient = orientation(orient, direction);
 8008f6c:	4b29      	ldr	r3, [pc, #164]	; (8009014 <searchForward+0x1c8>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	7afa      	ldrb	r2, [r7, #11]
 8008f72:	4611      	mov	r1, r2
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7ff fefb 	bl	8008d70 <_Z11orientationic>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	4a25      	ldr	r2, [pc, #148]	; (8009014 <searchForward+0x1c8>)
 8008f7e:	6013      	str	r3, [r2, #0]
 8008f80:	e016      	b.n	8008fb0 <searchForward+0x164>
			} else if (direction == 'B') {
 8008f82:	7afb      	ldrb	r3, [r7, #11]
 8008f84:	2b42      	cmp	r3, #66	; 0x42
 8008f86:	d10c      	bne.n	8008fa2 <searchForward+0x156>
				cellTurnBack();
 8008f88:	f7fe fc1c 	bl	80077c4 <cellTurnBack>
				orient = orientation(orient, direction);
 8008f8c:	4b21      	ldr	r3, [pc, #132]	; (8009014 <searchForward+0x1c8>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	7afa      	ldrb	r2, [r7, #11]
 8008f92:	4611      	mov	r1, r2
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7ff feeb 	bl	8008d70 <_Z11orientationic>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	4a1d      	ldr	r2, [pc, #116]	; (8009014 <searchForward+0x1c8>)
 8008f9e:	6013      	str	r3, [r2, #0]
 8008fa0:	e006      	b.n	8008fb0 <searchForward+0x164>
			} else if (direction == 'F') {
 8008fa2:	7afb      	ldrb	r3, [r7, #11]
 8008fa4:	2b46      	cmp	r3, #70	; 0x46
 8008fa6:	d103      	bne.n	8008fb0 <searchForward+0x164>
				moveStraight(16);
 8008fa8:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 8008fac:	f7fe f9c0 	bl	8007330 <moveStraight>
			}

			XY_prev = XY;
 8008fb0:	4b13      	ldr	r3, [pc, #76]	; (8009000 <searchForward+0x1b4>)
 8008fb2:	4a12      	ldr	r2, [pc, #72]	; (8008ffc <searchForward+0x1b0>)
 8008fb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fb8:	e883 0003 	stmia.w	r3, {r0, r1}
			XY = updateCoordinates(XY, orient);
 8008fbc:	4b15      	ldr	r3, [pc, #84]	; (8009014 <searchForward+0x1c8>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4c0e      	ldr	r4, [pc, #56]	; (8008ffc <searchForward+0x1b0>)
 8008fc2:	4638      	mov	r0, r7
 8008fc4:	4a0d      	ldr	r2, [pc, #52]	; (8008ffc <searchForward+0x1b0>)
 8008fc6:	ca06      	ldmia	r2, {r1, r2}
 8008fc8:	f7ff ff12 	bl	8008df0 <_Z17updateCoordinates10coordinatei>
 8008fcc:	4622      	mov	r2, r4
 8008fce:	463b      	mov	r3, r7
 8008fd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008fd4:	e882 0003 	stmia.w	r2, {r0, r1}

		} else {
			return 3;
		}

		if (buttonPress) {
 8008fd8:	4b13      	ldr	r3, [pc, #76]	; (8009028 <searchForward+0x1dc>)
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f43f af51 	beq.w	8008e84 <searchForward+0x38>
 8008fe2:	e001      	b.n	8008fe8 <searchForward+0x19c>
			return 3;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e003      	b.n	8008ff0 <searchForward+0x1a4>
			buttonPress = false;
 8008fe8:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <searchForward+0x1dc>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	701a      	strb	r2, [r3, #0]
			return 4;
 8008fee:	2304      	movs	r3, #4
		}
	}

	return 3;
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd90      	pop	{r4, r7, pc}
 8008ff8:	200018ec 	.word	0x200018ec
 8008ffc:	200018f0 	.word	0x200018f0
 8009000:	200018f8 	.word	0x200018f8
 8009004:	200018cc 	.word	0x200018cc
 8009008:	200018d0 	.word	0x200018d0
 800900c:	200018d4 	.word	0x200018d4
 8009010:	200018d8 	.word	0x200018d8
 8009014:	200000fc 	.word	0x200000fc
 8009018:	200018dc 	.word	0x200018dc
 800901c:	200018dd 	.word	0x200018dd
 8009020:	200018de 	.word	0x200018de
 8009024:	20000034 	.word	0x20000034
 8009028:	200018e8 	.word	0x200018e8

0800902c <_ZdlPvj>:
 800902c:	f000 b811 	b.w	8009052 <_ZdlPv>

08009030 <_Znwj>:
 8009030:	2801      	cmp	r0, #1
 8009032:	bf38      	it	cc
 8009034:	2001      	movcc	r0, #1
 8009036:	b510      	push	{r4, lr}
 8009038:	4604      	mov	r4, r0
 800903a:	4620      	mov	r0, r4
 800903c:	f000 f81c 	bl	8009078 <malloc>
 8009040:	b100      	cbz	r0, 8009044 <_Znwj+0x14>
 8009042:	bd10      	pop	{r4, pc}
 8009044:	f000 f808 	bl	8009058 <_ZSt15get_new_handlerv>
 8009048:	b908      	cbnz	r0, 800904e <_Znwj+0x1e>
 800904a:	f000 f80d 	bl	8009068 <abort>
 800904e:	4780      	blx	r0
 8009050:	e7f3      	b.n	800903a <_Znwj+0xa>

08009052 <_ZdlPv>:
 8009052:	f000 b819 	b.w	8009088 <free>
	...

08009058 <_ZSt15get_new_handlerv>:
 8009058:	4b02      	ldr	r3, [pc, #8]	; (8009064 <_ZSt15get_new_handlerv+0xc>)
 800905a:	6818      	ldr	r0, [r3, #0]
 800905c:	f3bf 8f5b 	dmb	ish
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	20001900 	.word	0x20001900

08009068 <abort>:
 8009068:	b508      	push	{r3, lr}
 800906a:	2006      	movs	r0, #6
 800906c:	f000 fe98 	bl	8009da0 <raise>
 8009070:	2001      	movs	r0, #1
 8009072:	f7f8 ff99 	bl	8001fa8 <_exit>
	...

08009078 <malloc>:
 8009078:	4b02      	ldr	r3, [pc, #8]	; (8009084 <malloc+0xc>)
 800907a:	4601      	mov	r1, r0
 800907c:	6818      	ldr	r0, [r3, #0]
 800907e:	f000 b82b 	b.w	80090d8 <_malloc_r>
 8009082:	bf00      	nop
 8009084:	20000158 	.word	0x20000158

08009088 <free>:
 8009088:	4b02      	ldr	r3, [pc, #8]	; (8009094 <free+0xc>)
 800908a:	4601      	mov	r1, r0
 800908c:	6818      	ldr	r0, [r3, #0]
 800908e:	f001 bdb1 	b.w	800abf4 <_free_r>
 8009092:	bf00      	nop
 8009094:	20000158 	.word	0x20000158

08009098 <sbrk_aligned>:
 8009098:	b570      	push	{r4, r5, r6, lr}
 800909a:	4e0e      	ldr	r6, [pc, #56]	; (80090d4 <sbrk_aligned+0x3c>)
 800909c:	460c      	mov	r4, r1
 800909e:	6831      	ldr	r1, [r6, #0]
 80090a0:	4605      	mov	r5, r0
 80090a2:	b911      	cbnz	r1, 80090aa <sbrk_aligned+0x12>
 80090a4:	f000 fed0 	bl	8009e48 <_sbrk_r>
 80090a8:	6030      	str	r0, [r6, #0]
 80090aa:	4621      	mov	r1, r4
 80090ac:	4628      	mov	r0, r5
 80090ae:	f000 fecb 	bl	8009e48 <_sbrk_r>
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	d00a      	beq.n	80090cc <sbrk_aligned+0x34>
 80090b6:	1cc4      	adds	r4, r0, #3
 80090b8:	f024 0403 	bic.w	r4, r4, #3
 80090bc:	42a0      	cmp	r0, r4
 80090be:	d007      	beq.n	80090d0 <sbrk_aligned+0x38>
 80090c0:	1a21      	subs	r1, r4, r0
 80090c2:	4628      	mov	r0, r5
 80090c4:	f000 fec0 	bl	8009e48 <_sbrk_r>
 80090c8:	3001      	adds	r0, #1
 80090ca:	d101      	bne.n	80090d0 <sbrk_aligned+0x38>
 80090cc:	f04f 34ff 	mov.w	r4, #4294967295
 80090d0:	4620      	mov	r0, r4
 80090d2:	bd70      	pop	{r4, r5, r6, pc}
 80090d4:	20001908 	.word	0x20001908

080090d8 <_malloc_r>:
 80090d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090dc:	1ccd      	adds	r5, r1, #3
 80090de:	f025 0503 	bic.w	r5, r5, #3
 80090e2:	3508      	adds	r5, #8
 80090e4:	2d0c      	cmp	r5, #12
 80090e6:	bf38      	it	cc
 80090e8:	250c      	movcc	r5, #12
 80090ea:	2d00      	cmp	r5, #0
 80090ec:	4607      	mov	r7, r0
 80090ee:	db01      	blt.n	80090f4 <_malloc_r+0x1c>
 80090f0:	42a9      	cmp	r1, r5
 80090f2:	d905      	bls.n	8009100 <_malloc_r+0x28>
 80090f4:	230c      	movs	r3, #12
 80090f6:	603b      	str	r3, [r7, #0]
 80090f8:	2600      	movs	r6, #0
 80090fa:	4630      	mov	r0, r6
 80090fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009100:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80091d4 <_malloc_r+0xfc>
 8009104:	f000 f868 	bl	80091d8 <__malloc_lock>
 8009108:	f8d8 3000 	ldr.w	r3, [r8]
 800910c:	461c      	mov	r4, r3
 800910e:	bb5c      	cbnz	r4, 8009168 <_malloc_r+0x90>
 8009110:	4629      	mov	r1, r5
 8009112:	4638      	mov	r0, r7
 8009114:	f7ff ffc0 	bl	8009098 <sbrk_aligned>
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	4604      	mov	r4, r0
 800911c:	d155      	bne.n	80091ca <_malloc_r+0xf2>
 800911e:	f8d8 4000 	ldr.w	r4, [r8]
 8009122:	4626      	mov	r6, r4
 8009124:	2e00      	cmp	r6, #0
 8009126:	d145      	bne.n	80091b4 <_malloc_r+0xdc>
 8009128:	2c00      	cmp	r4, #0
 800912a:	d048      	beq.n	80091be <_malloc_r+0xe6>
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	4631      	mov	r1, r6
 8009130:	4638      	mov	r0, r7
 8009132:	eb04 0903 	add.w	r9, r4, r3
 8009136:	f000 fe87 	bl	8009e48 <_sbrk_r>
 800913a:	4581      	cmp	r9, r0
 800913c:	d13f      	bne.n	80091be <_malloc_r+0xe6>
 800913e:	6821      	ldr	r1, [r4, #0]
 8009140:	1a6d      	subs	r5, r5, r1
 8009142:	4629      	mov	r1, r5
 8009144:	4638      	mov	r0, r7
 8009146:	f7ff ffa7 	bl	8009098 <sbrk_aligned>
 800914a:	3001      	adds	r0, #1
 800914c:	d037      	beq.n	80091be <_malloc_r+0xe6>
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	442b      	add	r3, r5
 8009152:	6023      	str	r3, [r4, #0]
 8009154:	f8d8 3000 	ldr.w	r3, [r8]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d038      	beq.n	80091ce <_malloc_r+0xf6>
 800915c:	685a      	ldr	r2, [r3, #4]
 800915e:	42a2      	cmp	r2, r4
 8009160:	d12b      	bne.n	80091ba <_malloc_r+0xe2>
 8009162:	2200      	movs	r2, #0
 8009164:	605a      	str	r2, [r3, #4]
 8009166:	e00f      	b.n	8009188 <_malloc_r+0xb0>
 8009168:	6822      	ldr	r2, [r4, #0]
 800916a:	1b52      	subs	r2, r2, r5
 800916c:	d41f      	bmi.n	80091ae <_malloc_r+0xd6>
 800916e:	2a0b      	cmp	r2, #11
 8009170:	d917      	bls.n	80091a2 <_malloc_r+0xca>
 8009172:	1961      	adds	r1, r4, r5
 8009174:	42a3      	cmp	r3, r4
 8009176:	6025      	str	r5, [r4, #0]
 8009178:	bf18      	it	ne
 800917a:	6059      	strne	r1, [r3, #4]
 800917c:	6863      	ldr	r3, [r4, #4]
 800917e:	bf08      	it	eq
 8009180:	f8c8 1000 	streq.w	r1, [r8]
 8009184:	5162      	str	r2, [r4, r5]
 8009186:	604b      	str	r3, [r1, #4]
 8009188:	4638      	mov	r0, r7
 800918a:	f104 060b 	add.w	r6, r4, #11
 800918e:	f000 f829 	bl	80091e4 <__malloc_unlock>
 8009192:	f026 0607 	bic.w	r6, r6, #7
 8009196:	1d23      	adds	r3, r4, #4
 8009198:	1af2      	subs	r2, r6, r3
 800919a:	d0ae      	beq.n	80090fa <_malloc_r+0x22>
 800919c:	1b9b      	subs	r3, r3, r6
 800919e:	50a3      	str	r3, [r4, r2]
 80091a0:	e7ab      	b.n	80090fa <_malloc_r+0x22>
 80091a2:	42a3      	cmp	r3, r4
 80091a4:	6862      	ldr	r2, [r4, #4]
 80091a6:	d1dd      	bne.n	8009164 <_malloc_r+0x8c>
 80091a8:	f8c8 2000 	str.w	r2, [r8]
 80091ac:	e7ec      	b.n	8009188 <_malloc_r+0xb0>
 80091ae:	4623      	mov	r3, r4
 80091b0:	6864      	ldr	r4, [r4, #4]
 80091b2:	e7ac      	b.n	800910e <_malloc_r+0x36>
 80091b4:	4634      	mov	r4, r6
 80091b6:	6876      	ldr	r6, [r6, #4]
 80091b8:	e7b4      	b.n	8009124 <_malloc_r+0x4c>
 80091ba:	4613      	mov	r3, r2
 80091bc:	e7cc      	b.n	8009158 <_malloc_r+0x80>
 80091be:	230c      	movs	r3, #12
 80091c0:	603b      	str	r3, [r7, #0]
 80091c2:	4638      	mov	r0, r7
 80091c4:	f000 f80e 	bl	80091e4 <__malloc_unlock>
 80091c8:	e797      	b.n	80090fa <_malloc_r+0x22>
 80091ca:	6025      	str	r5, [r4, #0]
 80091cc:	e7dc      	b.n	8009188 <_malloc_r+0xb0>
 80091ce:	605b      	str	r3, [r3, #4]
 80091d0:	deff      	udf	#255	; 0xff
 80091d2:	bf00      	nop
 80091d4:	20001904 	.word	0x20001904

080091d8 <__malloc_lock>:
 80091d8:	4801      	ldr	r0, [pc, #4]	; (80091e0 <__malloc_lock+0x8>)
 80091da:	f000 be81 	b.w	8009ee0 <__retarget_lock_acquire_recursive>
 80091de:	bf00      	nop
 80091e0:	20001a4c 	.word	0x20001a4c

080091e4 <__malloc_unlock>:
 80091e4:	4801      	ldr	r0, [pc, #4]	; (80091ec <__malloc_unlock+0x8>)
 80091e6:	f000 be7c 	b.w	8009ee2 <__retarget_lock_release_recursive>
 80091ea:	bf00      	nop
 80091ec:	20001a4c 	.word	0x20001a4c

080091f0 <__cvt>:
 80091f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091f4:	ec55 4b10 	vmov	r4, r5, d0
 80091f8:	2d00      	cmp	r5, #0
 80091fa:	460e      	mov	r6, r1
 80091fc:	4619      	mov	r1, r3
 80091fe:	462b      	mov	r3, r5
 8009200:	bfbb      	ittet	lt
 8009202:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009206:	461d      	movlt	r5, r3
 8009208:	2300      	movge	r3, #0
 800920a:	232d      	movlt	r3, #45	; 0x2d
 800920c:	700b      	strb	r3, [r1, #0]
 800920e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009210:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009214:	4691      	mov	r9, r2
 8009216:	f023 0820 	bic.w	r8, r3, #32
 800921a:	bfbc      	itt	lt
 800921c:	4622      	movlt	r2, r4
 800921e:	4614      	movlt	r4, r2
 8009220:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009224:	d005      	beq.n	8009232 <__cvt+0x42>
 8009226:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800922a:	d100      	bne.n	800922e <__cvt+0x3e>
 800922c:	3601      	adds	r6, #1
 800922e:	2102      	movs	r1, #2
 8009230:	e000      	b.n	8009234 <__cvt+0x44>
 8009232:	2103      	movs	r1, #3
 8009234:	ab03      	add	r3, sp, #12
 8009236:	9301      	str	r3, [sp, #4]
 8009238:	ab02      	add	r3, sp, #8
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	ec45 4b10 	vmov	d0, r4, r5
 8009240:	4653      	mov	r3, sl
 8009242:	4632      	mov	r2, r6
 8009244:	f000 fee4 	bl	800a010 <_dtoa_r>
 8009248:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800924c:	4607      	mov	r7, r0
 800924e:	d102      	bne.n	8009256 <__cvt+0x66>
 8009250:	f019 0f01 	tst.w	r9, #1
 8009254:	d022      	beq.n	800929c <__cvt+0xac>
 8009256:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800925a:	eb07 0906 	add.w	r9, r7, r6
 800925e:	d110      	bne.n	8009282 <__cvt+0x92>
 8009260:	783b      	ldrb	r3, [r7, #0]
 8009262:	2b30      	cmp	r3, #48	; 0x30
 8009264:	d10a      	bne.n	800927c <__cvt+0x8c>
 8009266:	2200      	movs	r2, #0
 8009268:	2300      	movs	r3, #0
 800926a:	4620      	mov	r0, r4
 800926c:	4629      	mov	r1, r5
 800926e:	f7f7 fc2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009272:	b918      	cbnz	r0, 800927c <__cvt+0x8c>
 8009274:	f1c6 0601 	rsb	r6, r6, #1
 8009278:	f8ca 6000 	str.w	r6, [sl]
 800927c:	f8da 3000 	ldr.w	r3, [sl]
 8009280:	4499      	add	r9, r3
 8009282:	2200      	movs	r2, #0
 8009284:	2300      	movs	r3, #0
 8009286:	4620      	mov	r0, r4
 8009288:	4629      	mov	r1, r5
 800928a:	f7f7 fc1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800928e:	b108      	cbz	r0, 8009294 <__cvt+0xa4>
 8009290:	f8cd 900c 	str.w	r9, [sp, #12]
 8009294:	2230      	movs	r2, #48	; 0x30
 8009296:	9b03      	ldr	r3, [sp, #12]
 8009298:	454b      	cmp	r3, r9
 800929a:	d307      	bcc.n	80092ac <__cvt+0xbc>
 800929c:	9b03      	ldr	r3, [sp, #12]
 800929e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092a0:	1bdb      	subs	r3, r3, r7
 80092a2:	4638      	mov	r0, r7
 80092a4:	6013      	str	r3, [r2, #0]
 80092a6:	b004      	add	sp, #16
 80092a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ac:	1c59      	adds	r1, r3, #1
 80092ae:	9103      	str	r1, [sp, #12]
 80092b0:	701a      	strb	r2, [r3, #0]
 80092b2:	e7f0      	b.n	8009296 <__cvt+0xa6>

080092b4 <__exponent>:
 80092b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092b6:	4603      	mov	r3, r0
 80092b8:	2900      	cmp	r1, #0
 80092ba:	bfb8      	it	lt
 80092bc:	4249      	neglt	r1, r1
 80092be:	f803 2b02 	strb.w	r2, [r3], #2
 80092c2:	bfb4      	ite	lt
 80092c4:	222d      	movlt	r2, #45	; 0x2d
 80092c6:	222b      	movge	r2, #43	; 0x2b
 80092c8:	2909      	cmp	r1, #9
 80092ca:	7042      	strb	r2, [r0, #1]
 80092cc:	dd2a      	ble.n	8009324 <__exponent+0x70>
 80092ce:	f10d 0207 	add.w	r2, sp, #7
 80092d2:	4617      	mov	r7, r2
 80092d4:	260a      	movs	r6, #10
 80092d6:	4694      	mov	ip, r2
 80092d8:	fb91 f5f6 	sdiv	r5, r1, r6
 80092dc:	fb06 1415 	mls	r4, r6, r5, r1
 80092e0:	3430      	adds	r4, #48	; 0x30
 80092e2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80092e6:	460c      	mov	r4, r1
 80092e8:	2c63      	cmp	r4, #99	; 0x63
 80092ea:	f102 32ff 	add.w	r2, r2, #4294967295
 80092ee:	4629      	mov	r1, r5
 80092f0:	dcf1      	bgt.n	80092d6 <__exponent+0x22>
 80092f2:	3130      	adds	r1, #48	; 0x30
 80092f4:	f1ac 0402 	sub.w	r4, ip, #2
 80092f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80092fc:	1c41      	adds	r1, r0, #1
 80092fe:	4622      	mov	r2, r4
 8009300:	42ba      	cmp	r2, r7
 8009302:	d30a      	bcc.n	800931a <__exponent+0x66>
 8009304:	f10d 0209 	add.w	r2, sp, #9
 8009308:	eba2 020c 	sub.w	r2, r2, ip
 800930c:	42bc      	cmp	r4, r7
 800930e:	bf88      	it	hi
 8009310:	2200      	movhi	r2, #0
 8009312:	4413      	add	r3, r2
 8009314:	1a18      	subs	r0, r3, r0
 8009316:	b003      	add	sp, #12
 8009318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800931a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800931e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009322:	e7ed      	b.n	8009300 <__exponent+0x4c>
 8009324:	2330      	movs	r3, #48	; 0x30
 8009326:	3130      	adds	r1, #48	; 0x30
 8009328:	7083      	strb	r3, [r0, #2]
 800932a:	70c1      	strb	r1, [r0, #3]
 800932c:	1d03      	adds	r3, r0, #4
 800932e:	e7f1      	b.n	8009314 <__exponent+0x60>

08009330 <_printf_float>:
 8009330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009334:	ed2d 8b02 	vpush	{d8}
 8009338:	b08d      	sub	sp, #52	; 0x34
 800933a:	460c      	mov	r4, r1
 800933c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009340:	4616      	mov	r6, r2
 8009342:	461f      	mov	r7, r3
 8009344:	4605      	mov	r5, r0
 8009346:	f000 fd33 	bl	8009db0 <_localeconv_r>
 800934a:	f8d0 a000 	ldr.w	sl, [r0]
 800934e:	4650      	mov	r0, sl
 8009350:	f7f6 ff8e 	bl	8000270 <strlen>
 8009354:	2300      	movs	r3, #0
 8009356:	930a      	str	r3, [sp, #40]	; 0x28
 8009358:	6823      	ldr	r3, [r4, #0]
 800935a:	9305      	str	r3, [sp, #20]
 800935c:	f8d8 3000 	ldr.w	r3, [r8]
 8009360:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009364:	3307      	adds	r3, #7
 8009366:	f023 0307 	bic.w	r3, r3, #7
 800936a:	f103 0208 	add.w	r2, r3, #8
 800936e:	f8c8 2000 	str.w	r2, [r8]
 8009372:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009376:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800937a:	9307      	str	r3, [sp, #28]
 800937c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009380:	ee08 0a10 	vmov	s16, r0
 8009384:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009388:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800938c:	4b9e      	ldr	r3, [pc, #632]	; (8009608 <_printf_float+0x2d8>)
 800938e:	f04f 32ff 	mov.w	r2, #4294967295
 8009392:	f7f7 fbcb 	bl	8000b2c <__aeabi_dcmpun>
 8009396:	bb88      	cbnz	r0, 80093fc <_printf_float+0xcc>
 8009398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800939c:	4b9a      	ldr	r3, [pc, #616]	; (8009608 <_printf_float+0x2d8>)
 800939e:	f04f 32ff 	mov.w	r2, #4294967295
 80093a2:	f7f7 fba5 	bl	8000af0 <__aeabi_dcmple>
 80093a6:	bb48      	cbnz	r0, 80093fc <_printf_float+0xcc>
 80093a8:	2200      	movs	r2, #0
 80093aa:	2300      	movs	r3, #0
 80093ac:	4640      	mov	r0, r8
 80093ae:	4649      	mov	r1, r9
 80093b0:	f7f7 fb94 	bl	8000adc <__aeabi_dcmplt>
 80093b4:	b110      	cbz	r0, 80093bc <_printf_float+0x8c>
 80093b6:	232d      	movs	r3, #45	; 0x2d
 80093b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093bc:	4a93      	ldr	r2, [pc, #588]	; (800960c <_printf_float+0x2dc>)
 80093be:	4b94      	ldr	r3, [pc, #592]	; (8009610 <_printf_float+0x2e0>)
 80093c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80093c4:	bf94      	ite	ls
 80093c6:	4690      	movls	r8, r2
 80093c8:	4698      	movhi	r8, r3
 80093ca:	2303      	movs	r3, #3
 80093cc:	6123      	str	r3, [r4, #16]
 80093ce:	9b05      	ldr	r3, [sp, #20]
 80093d0:	f023 0304 	bic.w	r3, r3, #4
 80093d4:	6023      	str	r3, [r4, #0]
 80093d6:	f04f 0900 	mov.w	r9, #0
 80093da:	9700      	str	r7, [sp, #0]
 80093dc:	4633      	mov	r3, r6
 80093de:	aa0b      	add	r2, sp, #44	; 0x2c
 80093e0:	4621      	mov	r1, r4
 80093e2:	4628      	mov	r0, r5
 80093e4:	f000 f9da 	bl	800979c <_printf_common>
 80093e8:	3001      	adds	r0, #1
 80093ea:	f040 8090 	bne.w	800950e <_printf_float+0x1de>
 80093ee:	f04f 30ff 	mov.w	r0, #4294967295
 80093f2:	b00d      	add	sp, #52	; 0x34
 80093f4:	ecbd 8b02 	vpop	{d8}
 80093f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fc:	4642      	mov	r2, r8
 80093fe:	464b      	mov	r3, r9
 8009400:	4640      	mov	r0, r8
 8009402:	4649      	mov	r1, r9
 8009404:	f7f7 fb92 	bl	8000b2c <__aeabi_dcmpun>
 8009408:	b140      	cbz	r0, 800941c <_printf_float+0xec>
 800940a:	464b      	mov	r3, r9
 800940c:	2b00      	cmp	r3, #0
 800940e:	bfbc      	itt	lt
 8009410:	232d      	movlt	r3, #45	; 0x2d
 8009412:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009416:	4a7f      	ldr	r2, [pc, #508]	; (8009614 <_printf_float+0x2e4>)
 8009418:	4b7f      	ldr	r3, [pc, #508]	; (8009618 <_printf_float+0x2e8>)
 800941a:	e7d1      	b.n	80093c0 <_printf_float+0x90>
 800941c:	6863      	ldr	r3, [r4, #4]
 800941e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009422:	9206      	str	r2, [sp, #24]
 8009424:	1c5a      	adds	r2, r3, #1
 8009426:	d13f      	bne.n	80094a8 <_printf_float+0x178>
 8009428:	2306      	movs	r3, #6
 800942a:	6063      	str	r3, [r4, #4]
 800942c:	9b05      	ldr	r3, [sp, #20]
 800942e:	6861      	ldr	r1, [r4, #4]
 8009430:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009434:	2300      	movs	r3, #0
 8009436:	9303      	str	r3, [sp, #12]
 8009438:	ab0a      	add	r3, sp, #40	; 0x28
 800943a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800943e:	ab09      	add	r3, sp, #36	; 0x24
 8009440:	ec49 8b10 	vmov	d0, r8, r9
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	6022      	str	r2, [r4, #0]
 8009448:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800944c:	4628      	mov	r0, r5
 800944e:	f7ff fecf 	bl	80091f0 <__cvt>
 8009452:	9b06      	ldr	r3, [sp, #24]
 8009454:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009456:	2b47      	cmp	r3, #71	; 0x47
 8009458:	4680      	mov	r8, r0
 800945a:	d108      	bne.n	800946e <_printf_float+0x13e>
 800945c:	1cc8      	adds	r0, r1, #3
 800945e:	db02      	blt.n	8009466 <_printf_float+0x136>
 8009460:	6863      	ldr	r3, [r4, #4]
 8009462:	4299      	cmp	r1, r3
 8009464:	dd41      	ble.n	80094ea <_printf_float+0x1ba>
 8009466:	f1ab 0302 	sub.w	r3, fp, #2
 800946a:	fa5f fb83 	uxtb.w	fp, r3
 800946e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009472:	d820      	bhi.n	80094b6 <_printf_float+0x186>
 8009474:	3901      	subs	r1, #1
 8009476:	465a      	mov	r2, fp
 8009478:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800947c:	9109      	str	r1, [sp, #36]	; 0x24
 800947e:	f7ff ff19 	bl	80092b4 <__exponent>
 8009482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009484:	1813      	adds	r3, r2, r0
 8009486:	2a01      	cmp	r2, #1
 8009488:	4681      	mov	r9, r0
 800948a:	6123      	str	r3, [r4, #16]
 800948c:	dc02      	bgt.n	8009494 <_printf_float+0x164>
 800948e:	6822      	ldr	r2, [r4, #0]
 8009490:	07d2      	lsls	r2, r2, #31
 8009492:	d501      	bpl.n	8009498 <_printf_float+0x168>
 8009494:	3301      	adds	r3, #1
 8009496:	6123      	str	r3, [r4, #16]
 8009498:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800949c:	2b00      	cmp	r3, #0
 800949e:	d09c      	beq.n	80093da <_printf_float+0xaa>
 80094a0:	232d      	movs	r3, #45	; 0x2d
 80094a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094a6:	e798      	b.n	80093da <_printf_float+0xaa>
 80094a8:	9a06      	ldr	r2, [sp, #24]
 80094aa:	2a47      	cmp	r2, #71	; 0x47
 80094ac:	d1be      	bne.n	800942c <_printf_float+0xfc>
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1bc      	bne.n	800942c <_printf_float+0xfc>
 80094b2:	2301      	movs	r3, #1
 80094b4:	e7b9      	b.n	800942a <_printf_float+0xfa>
 80094b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80094ba:	d118      	bne.n	80094ee <_printf_float+0x1be>
 80094bc:	2900      	cmp	r1, #0
 80094be:	6863      	ldr	r3, [r4, #4]
 80094c0:	dd0b      	ble.n	80094da <_printf_float+0x1aa>
 80094c2:	6121      	str	r1, [r4, #16]
 80094c4:	b913      	cbnz	r3, 80094cc <_printf_float+0x19c>
 80094c6:	6822      	ldr	r2, [r4, #0]
 80094c8:	07d0      	lsls	r0, r2, #31
 80094ca:	d502      	bpl.n	80094d2 <_printf_float+0x1a2>
 80094cc:	3301      	adds	r3, #1
 80094ce:	440b      	add	r3, r1
 80094d0:	6123      	str	r3, [r4, #16]
 80094d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80094d4:	f04f 0900 	mov.w	r9, #0
 80094d8:	e7de      	b.n	8009498 <_printf_float+0x168>
 80094da:	b913      	cbnz	r3, 80094e2 <_printf_float+0x1b2>
 80094dc:	6822      	ldr	r2, [r4, #0]
 80094de:	07d2      	lsls	r2, r2, #31
 80094e0:	d501      	bpl.n	80094e6 <_printf_float+0x1b6>
 80094e2:	3302      	adds	r3, #2
 80094e4:	e7f4      	b.n	80094d0 <_printf_float+0x1a0>
 80094e6:	2301      	movs	r3, #1
 80094e8:	e7f2      	b.n	80094d0 <_printf_float+0x1a0>
 80094ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80094ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094f0:	4299      	cmp	r1, r3
 80094f2:	db05      	blt.n	8009500 <_printf_float+0x1d0>
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	6121      	str	r1, [r4, #16]
 80094f8:	07d8      	lsls	r0, r3, #31
 80094fa:	d5ea      	bpl.n	80094d2 <_printf_float+0x1a2>
 80094fc:	1c4b      	adds	r3, r1, #1
 80094fe:	e7e7      	b.n	80094d0 <_printf_float+0x1a0>
 8009500:	2900      	cmp	r1, #0
 8009502:	bfd4      	ite	le
 8009504:	f1c1 0202 	rsble	r2, r1, #2
 8009508:	2201      	movgt	r2, #1
 800950a:	4413      	add	r3, r2
 800950c:	e7e0      	b.n	80094d0 <_printf_float+0x1a0>
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	055a      	lsls	r2, r3, #21
 8009512:	d407      	bmi.n	8009524 <_printf_float+0x1f4>
 8009514:	6923      	ldr	r3, [r4, #16]
 8009516:	4642      	mov	r2, r8
 8009518:	4631      	mov	r1, r6
 800951a:	4628      	mov	r0, r5
 800951c:	47b8      	blx	r7
 800951e:	3001      	adds	r0, #1
 8009520:	d12c      	bne.n	800957c <_printf_float+0x24c>
 8009522:	e764      	b.n	80093ee <_printf_float+0xbe>
 8009524:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009528:	f240 80e0 	bls.w	80096ec <_printf_float+0x3bc>
 800952c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009530:	2200      	movs	r2, #0
 8009532:	2300      	movs	r3, #0
 8009534:	f7f7 fac8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009538:	2800      	cmp	r0, #0
 800953a:	d034      	beq.n	80095a6 <_printf_float+0x276>
 800953c:	4a37      	ldr	r2, [pc, #220]	; (800961c <_printf_float+0x2ec>)
 800953e:	2301      	movs	r3, #1
 8009540:	4631      	mov	r1, r6
 8009542:	4628      	mov	r0, r5
 8009544:	47b8      	blx	r7
 8009546:	3001      	adds	r0, #1
 8009548:	f43f af51 	beq.w	80093ee <_printf_float+0xbe>
 800954c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009550:	429a      	cmp	r2, r3
 8009552:	db02      	blt.n	800955a <_printf_float+0x22a>
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	07d8      	lsls	r0, r3, #31
 8009558:	d510      	bpl.n	800957c <_printf_float+0x24c>
 800955a:	ee18 3a10 	vmov	r3, s16
 800955e:	4652      	mov	r2, sl
 8009560:	4631      	mov	r1, r6
 8009562:	4628      	mov	r0, r5
 8009564:	47b8      	blx	r7
 8009566:	3001      	adds	r0, #1
 8009568:	f43f af41 	beq.w	80093ee <_printf_float+0xbe>
 800956c:	f04f 0800 	mov.w	r8, #0
 8009570:	f104 091a 	add.w	r9, r4, #26
 8009574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009576:	3b01      	subs	r3, #1
 8009578:	4543      	cmp	r3, r8
 800957a:	dc09      	bgt.n	8009590 <_printf_float+0x260>
 800957c:	6823      	ldr	r3, [r4, #0]
 800957e:	079b      	lsls	r3, r3, #30
 8009580:	f100 8107 	bmi.w	8009792 <_printf_float+0x462>
 8009584:	68e0      	ldr	r0, [r4, #12]
 8009586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009588:	4298      	cmp	r0, r3
 800958a:	bfb8      	it	lt
 800958c:	4618      	movlt	r0, r3
 800958e:	e730      	b.n	80093f2 <_printf_float+0xc2>
 8009590:	2301      	movs	r3, #1
 8009592:	464a      	mov	r2, r9
 8009594:	4631      	mov	r1, r6
 8009596:	4628      	mov	r0, r5
 8009598:	47b8      	blx	r7
 800959a:	3001      	adds	r0, #1
 800959c:	f43f af27 	beq.w	80093ee <_printf_float+0xbe>
 80095a0:	f108 0801 	add.w	r8, r8, #1
 80095a4:	e7e6      	b.n	8009574 <_printf_float+0x244>
 80095a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	dc39      	bgt.n	8009620 <_printf_float+0x2f0>
 80095ac:	4a1b      	ldr	r2, [pc, #108]	; (800961c <_printf_float+0x2ec>)
 80095ae:	2301      	movs	r3, #1
 80095b0:	4631      	mov	r1, r6
 80095b2:	4628      	mov	r0, r5
 80095b4:	47b8      	blx	r7
 80095b6:	3001      	adds	r0, #1
 80095b8:	f43f af19 	beq.w	80093ee <_printf_float+0xbe>
 80095bc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80095c0:	4313      	orrs	r3, r2
 80095c2:	d102      	bne.n	80095ca <_printf_float+0x29a>
 80095c4:	6823      	ldr	r3, [r4, #0]
 80095c6:	07d9      	lsls	r1, r3, #31
 80095c8:	d5d8      	bpl.n	800957c <_printf_float+0x24c>
 80095ca:	ee18 3a10 	vmov	r3, s16
 80095ce:	4652      	mov	r2, sl
 80095d0:	4631      	mov	r1, r6
 80095d2:	4628      	mov	r0, r5
 80095d4:	47b8      	blx	r7
 80095d6:	3001      	adds	r0, #1
 80095d8:	f43f af09 	beq.w	80093ee <_printf_float+0xbe>
 80095dc:	f04f 0900 	mov.w	r9, #0
 80095e0:	f104 0a1a 	add.w	sl, r4, #26
 80095e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e6:	425b      	negs	r3, r3
 80095e8:	454b      	cmp	r3, r9
 80095ea:	dc01      	bgt.n	80095f0 <_printf_float+0x2c0>
 80095ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ee:	e792      	b.n	8009516 <_printf_float+0x1e6>
 80095f0:	2301      	movs	r3, #1
 80095f2:	4652      	mov	r2, sl
 80095f4:	4631      	mov	r1, r6
 80095f6:	4628      	mov	r0, r5
 80095f8:	47b8      	blx	r7
 80095fa:	3001      	adds	r0, #1
 80095fc:	f43f aef7 	beq.w	80093ee <_printf_float+0xbe>
 8009600:	f109 0901 	add.w	r9, r9, #1
 8009604:	e7ee      	b.n	80095e4 <_printf_float+0x2b4>
 8009606:	bf00      	nop
 8009608:	7fefffff 	.word	0x7fefffff
 800960c:	0800c3cc 	.word	0x0800c3cc
 8009610:	0800c3d0 	.word	0x0800c3d0
 8009614:	0800c3d4 	.word	0x0800c3d4
 8009618:	0800c3d8 	.word	0x0800c3d8
 800961c:	0800c3dc 	.word	0x0800c3dc
 8009620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009622:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009624:	429a      	cmp	r2, r3
 8009626:	bfa8      	it	ge
 8009628:	461a      	movge	r2, r3
 800962a:	2a00      	cmp	r2, #0
 800962c:	4691      	mov	r9, r2
 800962e:	dc37      	bgt.n	80096a0 <_printf_float+0x370>
 8009630:	f04f 0b00 	mov.w	fp, #0
 8009634:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009638:	f104 021a 	add.w	r2, r4, #26
 800963c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800963e:	9305      	str	r3, [sp, #20]
 8009640:	eba3 0309 	sub.w	r3, r3, r9
 8009644:	455b      	cmp	r3, fp
 8009646:	dc33      	bgt.n	80096b0 <_printf_float+0x380>
 8009648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800964c:	429a      	cmp	r2, r3
 800964e:	db3b      	blt.n	80096c8 <_printf_float+0x398>
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	07da      	lsls	r2, r3, #31
 8009654:	d438      	bmi.n	80096c8 <_printf_float+0x398>
 8009656:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800965a:	eba2 0903 	sub.w	r9, r2, r3
 800965e:	9b05      	ldr	r3, [sp, #20]
 8009660:	1ad2      	subs	r2, r2, r3
 8009662:	4591      	cmp	r9, r2
 8009664:	bfa8      	it	ge
 8009666:	4691      	movge	r9, r2
 8009668:	f1b9 0f00 	cmp.w	r9, #0
 800966c:	dc35      	bgt.n	80096da <_printf_float+0x3aa>
 800966e:	f04f 0800 	mov.w	r8, #0
 8009672:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009676:	f104 0a1a 	add.w	sl, r4, #26
 800967a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800967e:	1a9b      	subs	r3, r3, r2
 8009680:	eba3 0309 	sub.w	r3, r3, r9
 8009684:	4543      	cmp	r3, r8
 8009686:	f77f af79 	ble.w	800957c <_printf_float+0x24c>
 800968a:	2301      	movs	r3, #1
 800968c:	4652      	mov	r2, sl
 800968e:	4631      	mov	r1, r6
 8009690:	4628      	mov	r0, r5
 8009692:	47b8      	blx	r7
 8009694:	3001      	adds	r0, #1
 8009696:	f43f aeaa 	beq.w	80093ee <_printf_float+0xbe>
 800969a:	f108 0801 	add.w	r8, r8, #1
 800969e:	e7ec      	b.n	800967a <_printf_float+0x34a>
 80096a0:	4613      	mov	r3, r2
 80096a2:	4631      	mov	r1, r6
 80096a4:	4642      	mov	r2, r8
 80096a6:	4628      	mov	r0, r5
 80096a8:	47b8      	blx	r7
 80096aa:	3001      	adds	r0, #1
 80096ac:	d1c0      	bne.n	8009630 <_printf_float+0x300>
 80096ae:	e69e      	b.n	80093ee <_printf_float+0xbe>
 80096b0:	2301      	movs	r3, #1
 80096b2:	4631      	mov	r1, r6
 80096b4:	4628      	mov	r0, r5
 80096b6:	9205      	str	r2, [sp, #20]
 80096b8:	47b8      	blx	r7
 80096ba:	3001      	adds	r0, #1
 80096bc:	f43f ae97 	beq.w	80093ee <_printf_float+0xbe>
 80096c0:	9a05      	ldr	r2, [sp, #20]
 80096c2:	f10b 0b01 	add.w	fp, fp, #1
 80096c6:	e7b9      	b.n	800963c <_printf_float+0x30c>
 80096c8:	ee18 3a10 	vmov	r3, s16
 80096cc:	4652      	mov	r2, sl
 80096ce:	4631      	mov	r1, r6
 80096d0:	4628      	mov	r0, r5
 80096d2:	47b8      	blx	r7
 80096d4:	3001      	adds	r0, #1
 80096d6:	d1be      	bne.n	8009656 <_printf_float+0x326>
 80096d8:	e689      	b.n	80093ee <_printf_float+0xbe>
 80096da:	9a05      	ldr	r2, [sp, #20]
 80096dc:	464b      	mov	r3, r9
 80096de:	4442      	add	r2, r8
 80096e0:	4631      	mov	r1, r6
 80096e2:	4628      	mov	r0, r5
 80096e4:	47b8      	blx	r7
 80096e6:	3001      	adds	r0, #1
 80096e8:	d1c1      	bne.n	800966e <_printf_float+0x33e>
 80096ea:	e680      	b.n	80093ee <_printf_float+0xbe>
 80096ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096ee:	2a01      	cmp	r2, #1
 80096f0:	dc01      	bgt.n	80096f6 <_printf_float+0x3c6>
 80096f2:	07db      	lsls	r3, r3, #31
 80096f4:	d53a      	bpl.n	800976c <_printf_float+0x43c>
 80096f6:	2301      	movs	r3, #1
 80096f8:	4642      	mov	r2, r8
 80096fa:	4631      	mov	r1, r6
 80096fc:	4628      	mov	r0, r5
 80096fe:	47b8      	blx	r7
 8009700:	3001      	adds	r0, #1
 8009702:	f43f ae74 	beq.w	80093ee <_printf_float+0xbe>
 8009706:	ee18 3a10 	vmov	r3, s16
 800970a:	4652      	mov	r2, sl
 800970c:	4631      	mov	r1, r6
 800970e:	4628      	mov	r0, r5
 8009710:	47b8      	blx	r7
 8009712:	3001      	adds	r0, #1
 8009714:	f43f ae6b 	beq.w	80093ee <_printf_float+0xbe>
 8009718:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800971c:	2200      	movs	r2, #0
 800971e:	2300      	movs	r3, #0
 8009720:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009724:	f7f7 f9d0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009728:	b9d8      	cbnz	r0, 8009762 <_printf_float+0x432>
 800972a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800972e:	f108 0201 	add.w	r2, r8, #1
 8009732:	4631      	mov	r1, r6
 8009734:	4628      	mov	r0, r5
 8009736:	47b8      	blx	r7
 8009738:	3001      	adds	r0, #1
 800973a:	d10e      	bne.n	800975a <_printf_float+0x42a>
 800973c:	e657      	b.n	80093ee <_printf_float+0xbe>
 800973e:	2301      	movs	r3, #1
 8009740:	4652      	mov	r2, sl
 8009742:	4631      	mov	r1, r6
 8009744:	4628      	mov	r0, r5
 8009746:	47b8      	blx	r7
 8009748:	3001      	adds	r0, #1
 800974a:	f43f ae50 	beq.w	80093ee <_printf_float+0xbe>
 800974e:	f108 0801 	add.w	r8, r8, #1
 8009752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009754:	3b01      	subs	r3, #1
 8009756:	4543      	cmp	r3, r8
 8009758:	dcf1      	bgt.n	800973e <_printf_float+0x40e>
 800975a:	464b      	mov	r3, r9
 800975c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009760:	e6da      	b.n	8009518 <_printf_float+0x1e8>
 8009762:	f04f 0800 	mov.w	r8, #0
 8009766:	f104 0a1a 	add.w	sl, r4, #26
 800976a:	e7f2      	b.n	8009752 <_printf_float+0x422>
 800976c:	2301      	movs	r3, #1
 800976e:	4642      	mov	r2, r8
 8009770:	e7df      	b.n	8009732 <_printf_float+0x402>
 8009772:	2301      	movs	r3, #1
 8009774:	464a      	mov	r2, r9
 8009776:	4631      	mov	r1, r6
 8009778:	4628      	mov	r0, r5
 800977a:	47b8      	blx	r7
 800977c:	3001      	adds	r0, #1
 800977e:	f43f ae36 	beq.w	80093ee <_printf_float+0xbe>
 8009782:	f108 0801 	add.w	r8, r8, #1
 8009786:	68e3      	ldr	r3, [r4, #12]
 8009788:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800978a:	1a5b      	subs	r3, r3, r1
 800978c:	4543      	cmp	r3, r8
 800978e:	dcf0      	bgt.n	8009772 <_printf_float+0x442>
 8009790:	e6f8      	b.n	8009584 <_printf_float+0x254>
 8009792:	f04f 0800 	mov.w	r8, #0
 8009796:	f104 0919 	add.w	r9, r4, #25
 800979a:	e7f4      	b.n	8009786 <_printf_float+0x456>

0800979c <_printf_common>:
 800979c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a0:	4616      	mov	r6, r2
 80097a2:	4699      	mov	r9, r3
 80097a4:	688a      	ldr	r2, [r1, #8]
 80097a6:	690b      	ldr	r3, [r1, #16]
 80097a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097ac:	4293      	cmp	r3, r2
 80097ae:	bfb8      	it	lt
 80097b0:	4613      	movlt	r3, r2
 80097b2:	6033      	str	r3, [r6, #0]
 80097b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097b8:	4607      	mov	r7, r0
 80097ba:	460c      	mov	r4, r1
 80097bc:	b10a      	cbz	r2, 80097c2 <_printf_common+0x26>
 80097be:	3301      	adds	r3, #1
 80097c0:	6033      	str	r3, [r6, #0]
 80097c2:	6823      	ldr	r3, [r4, #0]
 80097c4:	0699      	lsls	r1, r3, #26
 80097c6:	bf42      	ittt	mi
 80097c8:	6833      	ldrmi	r3, [r6, #0]
 80097ca:	3302      	addmi	r3, #2
 80097cc:	6033      	strmi	r3, [r6, #0]
 80097ce:	6825      	ldr	r5, [r4, #0]
 80097d0:	f015 0506 	ands.w	r5, r5, #6
 80097d4:	d106      	bne.n	80097e4 <_printf_common+0x48>
 80097d6:	f104 0a19 	add.w	sl, r4, #25
 80097da:	68e3      	ldr	r3, [r4, #12]
 80097dc:	6832      	ldr	r2, [r6, #0]
 80097de:	1a9b      	subs	r3, r3, r2
 80097e0:	42ab      	cmp	r3, r5
 80097e2:	dc26      	bgt.n	8009832 <_printf_common+0x96>
 80097e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097e8:	1e13      	subs	r3, r2, #0
 80097ea:	6822      	ldr	r2, [r4, #0]
 80097ec:	bf18      	it	ne
 80097ee:	2301      	movne	r3, #1
 80097f0:	0692      	lsls	r2, r2, #26
 80097f2:	d42b      	bmi.n	800984c <_printf_common+0xb0>
 80097f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097f8:	4649      	mov	r1, r9
 80097fa:	4638      	mov	r0, r7
 80097fc:	47c0      	blx	r8
 80097fe:	3001      	adds	r0, #1
 8009800:	d01e      	beq.n	8009840 <_printf_common+0xa4>
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	6922      	ldr	r2, [r4, #16]
 8009806:	f003 0306 	and.w	r3, r3, #6
 800980a:	2b04      	cmp	r3, #4
 800980c:	bf02      	ittt	eq
 800980e:	68e5      	ldreq	r5, [r4, #12]
 8009810:	6833      	ldreq	r3, [r6, #0]
 8009812:	1aed      	subeq	r5, r5, r3
 8009814:	68a3      	ldr	r3, [r4, #8]
 8009816:	bf0c      	ite	eq
 8009818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800981c:	2500      	movne	r5, #0
 800981e:	4293      	cmp	r3, r2
 8009820:	bfc4      	itt	gt
 8009822:	1a9b      	subgt	r3, r3, r2
 8009824:	18ed      	addgt	r5, r5, r3
 8009826:	2600      	movs	r6, #0
 8009828:	341a      	adds	r4, #26
 800982a:	42b5      	cmp	r5, r6
 800982c:	d11a      	bne.n	8009864 <_printf_common+0xc8>
 800982e:	2000      	movs	r0, #0
 8009830:	e008      	b.n	8009844 <_printf_common+0xa8>
 8009832:	2301      	movs	r3, #1
 8009834:	4652      	mov	r2, sl
 8009836:	4649      	mov	r1, r9
 8009838:	4638      	mov	r0, r7
 800983a:	47c0      	blx	r8
 800983c:	3001      	adds	r0, #1
 800983e:	d103      	bne.n	8009848 <_printf_common+0xac>
 8009840:	f04f 30ff 	mov.w	r0, #4294967295
 8009844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009848:	3501      	adds	r5, #1
 800984a:	e7c6      	b.n	80097da <_printf_common+0x3e>
 800984c:	18e1      	adds	r1, r4, r3
 800984e:	1c5a      	adds	r2, r3, #1
 8009850:	2030      	movs	r0, #48	; 0x30
 8009852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009856:	4422      	add	r2, r4
 8009858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800985c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009860:	3302      	adds	r3, #2
 8009862:	e7c7      	b.n	80097f4 <_printf_common+0x58>
 8009864:	2301      	movs	r3, #1
 8009866:	4622      	mov	r2, r4
 8009868:	4649      	mov	r1, r9
 800986a:	4638      	mov	r0, r7
 800986c:	47c0      	blx	r8
 800986e:	3001      	adds	r0, #1
 8009870:	d0e6      	beq.n	8009840 <_printf_common+0xa4>
 8009872:	3601      	adds	r6, #1
 8009874:	e7d9      	b.n	800982a <_printf_common+0x8e>
	...

08009878 <_printf_i>:
 8009878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800987c:	7e0f      	ldrb	r7, [r1, #24]
 800987e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009880:	2f78      	cmp	r7, #120	; 0x78
 8009882:	4691      	mov	r9, r2
 8009884:	4680      	mov	r8, r0
 8009886:	460c      	mov	r4, r1
 8009888:	469a      	mov	sl, r3
 800988a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800988e:	d807      	bhi.n	80098a0 <_printf_i+0x28>
 8009890:	2f62      	cmp	r7, #98	; 0x62
 8009892:	d80a      	bhi.n	80098aa <_printf_i+0x32>
 8009894:	2f00      	cmp	r7, #0
 8009896:	f000 80d4 	beq.w	8009a42 <_printf_i+0x1ca>
 800989a:	2f58      	cmp	r7, #88	; 0x58
 800989c:	f000 80c0 	beq.w	8009a20 <_printf_i+0x1a8>
 80098a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098a8:	e03a      	b.n	8009920 <_printf_i+0xa8>
 80098aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098ae:	2b15      	cmp	r3, #21
 80098b0:	d8f6      	bhi.n	80098a0 <_printf_i+0x28>
 80098b2:	a101      	add	r1, pc, #4	; (adr r1, 80098b8 <_printf_i+0x40>)
 80098b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098b8:	08009911 	.word	0x08009911
 80098bc:	08009925 	.word	0x08009925
 80098c0:	080098a1 	.word	0x080098a1
 80098c4:	080098a1 	.word	0x080098a1
 80098c8:	080098a1 	.word	0x080098a1
 80098cc:	080098a1 	.word	0x080098a1
 80098d0:	08009925 	.word	0x08009925
 80098d4:	080098a1 	.word	0x080098a1
 80098d8:	080098a1 	.word	0x080098a1
 80098dc:	080098a1 	.word	0x080098a1
 80098e0:	080098a1 	.word	0x080098a1
 80098e4:	08009a29 	.word	0x08009a29
 80098e8:	08009951 	.word	0x08009951
 80098ec:	080099e3 	.word	0x080099e3
 80098f0:	080098a1 	.word	0x080098a1
 80098f4:	080098a1 	.word	0x080098a1
 80098f8:	08009a4b 	.word	0x08009a4b
 80098fc:	080098a1 	.word	0x080098a1
 8009900:	08009951 	.word	0x08009951
 8009904:	080098a1 	.word	0x080098a1
 8009908:	080098a1 	.word	0x080098a1
 800990c:	080099eb 	.word	0x080099eb
 8009910:	682b      	ldr	r3, [r5, #0]
 8009912:	1d1a      	adds	r2, r3, #4
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	602a      	str	r2, [r5, #0]
 8009918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800991c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009920:	2301      	movs	r3, #1
 8009922:	e09f      	b.n	8009a64 <_printf_i+0x1ec>
 8009924:	6820      	ldr	r0, [r4, #0]
 8009926:	682b      	ldr	r3, [r5, #0]
 8009928:	0607      	lsls	r7, r0, #24
 800992a:	f103 0104 	add.w	r1, r3, #4
 800992e:	6029      	str	r1, [r5, #0]
 8009930:	d501      	bpl.n	8009936 <_printf_i+0xbe>
 8009932:	681e      	ldr	r6, [r3, #0]
 8009934:	e003      	b.n	800993e <_printf_i+0xc6>
 8009936:	0646      	lsls	r6, r0, #25
 8009938:	d5fb      	bpl.n	8009932 <_printf_i+0xba>
 800993a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800993e:	2e00      	cmp	r6, #0
 8009940:	da03      	bge.n	800994a <_printf_i+0xd2>
 8009942:	232d      	movs	r3, #45	; 0x2d
 8009944:	4276      	negs	r6, r6
 8009946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800994a:	485a      	ldr	r0, [pc, #360]	; (8009ab4 <_printf_i+0x23c>)
 800994c:	230a      	movs	r3, #10
 800994e:	e012      	b.n	8009976 <_printf_i+0xfe>
 8009950:	682b      	ldr	r3, [r5, #0]
 8009952:	6820      	ldr	r0, [r4, #0]
 8009954:	1d19      	adds	r1, r3, #4
 8009956:	6029      	str	r1, [r5, #0]
 8009958:	0605      	lsls	r5, r0, #24
 800995a:	d501      	bpl.n	8009960 <_printf_i+0xe8>
 800995c:	681e      	ldr	r6, [r3, #0]
 800995e:	e002      	b.n	8009966 <_printf_i+0xee>
 8009960:	0641      	lsls	r1, r0, #25
 8009962:	d5fb      	bpl.n	800995c <_printf_i+0xe4>
 8009964:	881e      	ldrh	r6, [r3, #0]
 8009966:	4853      	ldr	r0, [pc, #332]	; (8009ab4 <_printf_i+0x23c>)
 8009968:	2f6f      	cmp	r7, #111	; 0x6f
 800996a:	bf0c      	ite	eq
 800996c:	2308      	moveq	r3, #8
 800996e:	230a      	movne	r3, #10
 8009970:	2100      	movs	r1, #0
 8009972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009976:	6865      	ldr	r5, [r4, #4]
 8009978:	60a5      	str	r5, [r4, #8]
 800997a:	2d00      	cmp	r5, #0
 800997c:	bfa2      	ittt	ge
 800997e:	6821      	ldrge	r1, [r4, #0]
 8009980:	f021 0104 	bicge.w	r1, r1, #4
 8009984:	6021      	strge	r1, [r4, #0]
 8009986:	b90e      	cbnz	r6, 800998c <_printf_i+0x114>
 8009988:	2d00      	cmp	r5, #0
 800998a:	d04b      	beq.n	8009a24 <_printf_i+0x1ac>
 800998c:	4615      	mov	r5, r2
 800998e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009992:	fb03 6711 	mls	r7, r3, r1, r6
 8009996:	5dc7      	ldrb	r7, [r0, r7]
 8009998:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800999c:	4637      	mov	r7, r6
 800999e:	42bb      	cmp	r3, r7
 80099a0:	460e      	mov	r6, r1
 80099a2:	d9f4      	bls.n	800998e <_printf_i+0x116>
 80099a4:	2b08      	cmp	r3, #8
 80099a6:	d10b      	bne.n	80099c0 <_printf_i+0x148>
 80099a8:	6823      	ldr	r3, [r4, #0]
 80099aa:	07de      	lsls	r6, r3, #31
 80099ac:	d508      	bpl.n	80099c0 <_printf_i+0x148>
 80099ae:	6923      	ldr	r3, [r4, #16]
 80099b0:	6861      	ldr	r1, [r4, #4]
 80099b2:	4299      	cmp	r1, r3
 80099b4:	bfde      	ittt	le
 80099b6:	2330      	movle	r3, #48	; 0x30
 80099b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099c0:	1b52      	subs	r2, r2, r5
 80099c2:	6122      	str	r2, [r4, #16]
 80099c4:	f8cd a000 	str.w	sl, [sp]
 80099c8:	464b      	mov	r3, r9
 80099ca:	aa03      	add	r2, sp, #12
 80099cc:	4621      	mov	r1, r4
 80099ce:	4640      	mov	r0, r8
 80099d0:	f7ff fee4 	bl	800979c <_printf_common>
 80099d4:	3001      	adds	r0, #1
 80099d6:	d14a      	bne.n	8009a6e <_printf_i+0x1f6>
 80099d8:	f04f 30ff 	mov.w	r0, #4294967295
 80099dc:	b004      	add	sp, #16
 80099de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	f043 0320 	orr.w	r3, r3, #32
 80099e8:	6023      	str	r3, [r4, #0]
 80099ea:	4833      	ldr	r0, [pc, #204]	; (8009ab8 <_printf_i+0x240>)
 80099ec:	2778      	movs	r7, #120	; 0x78
 80099ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	6829      	ldr	r1, [r5, #0]
 80099f6:	061f      	lsls	r7, r3, #24
 80099f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80099fc:	d402      	bmi.n	8009a04 <_printf_i+0x18c>
 80099fe:	065f      	lsls	r7, r3, #25
 8009a00:	bf48      	it	mi
 8009a02:	b2b6      	uxthmi	r6, r6
 8009a04:	07df      	lsls	r7, r3, #31
 8009a06:	bf48      	it	mi
 8009a08:	f043 0320 	orrmi.w	r3, r3, #32
 8009a0c:	6029      	str	r1, [r5, #0]
 8009a0e:	bf48      	it	mi
 8009a10:	6023      	strmi	r3, [r4, #0]
 8009a12:	b91e      	cbnz	r6, 8009a1c <_printf_i+0x1a4>
 8009a14:	6823      	ldr	r3, [r4, #0]
 8009a16:	f023 0320 	bic.w	r3, r3, #32
 8009a1a:	6023      	str	r3, [r4, #0]
 8009a1c:	2310      	movs	r3, #16
 8009a1e:	e7a7      	b.n	8009970 <_printf_i+0xf8>
 8009a20:	4824      	ldr	r0, [pc, #144]	; (8009ab4 <_printf_i+0x23c>)
 8009a22:	e7e4      	b.n	80099ee <_printf_i+0x176>
 8009a24:	4615      	mov	r5, r2
 8009a26:	e7bd      	b.n	80099a4 <_printf_i+0x12c>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	6826      	ldr	r6, [r4, #0]
 8009a2c:	6961      	ldr	r1, [r4, #20]
 8009a2e:	1d18      	adds	r0, r3, #4
 8009a30:	6028      	str	r0, [r5, #0]
 8009a32:	0635      	lsls	r5, r6, #24
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	d501      	bpl.n	8009a3c <_printf_i+0x1c4>
 8009a38:	6019      	str	r1, [r3, #0]
 8009a3a:	e002      	b.n	8009a42 <_printf_i+0x1ca>
 8009a3c:	0670      	lsls	r0, r6, #25
 8009a3e:	d5fb      	bpl.n	8009a38 <_printf_i+0x1c0>
 8009a40:	8019      	strh	r1, [r3, #0]
 8009a42:	2300      	movs	r3, #0
 8009a44:	6123      	str	r3, [r4, #16]
 8009a46:	4615      	mov	r5, r2
 8009a48:	e7bc      	b.n	80099c4 <_printf_i+0x14c>
 8009a4a:	682b      	ldr	r3, [r5, #0]
 8009a4c:	1d1a      	adds	r2, r3, #4
 8009a4e:	602a      	str	r2, [r5, #0]
 8009a50:	681d      	ldr	r5, [r3, #0]
 8009a52:	6862      	ldr	r2, [r4, #4]
 8009a54:	2100      	movs	r1, #0
 8009a56:	4628      	mov	r0, r5
 8009a58:	f7f6 fbba 	bl	80001d0 <memchr>
 8009a5c:	b108      	cbz	r0, 8009a62 <_printf_i+0x1ea>
 8009a5e:	1b40      	subs	r0, r0, r5
 8009a60:	6060      	str	r0, [r4, #4]
 8009a62:	6863      	ldr	r3, [r4, #4]
 8009a64:	6123      	str	r3, [r4, #16]
 8009a66:	2300      	movs	r3, #0
 8009a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a6c:	e7aa      	b.n	80099c4 <_printf_i+0x14c>
 8009a6e:	6923      	ldr	r3, [r4, #16]
 8009a70:	462a      	mov	r2, r5
 8009a72:	4649      	mov	r1, r9
 8009a74:	4640      	mov	r0, r8
 8009a76:	47d0      	blx	sl
 8009a78:	3001      	adds	r0, #1
 8009a7a:	d0ad      	beq.n	80099d8 <_printf_i+0x160>
 8009a7c:	6823      	ldr	r3, [r4, #0]
 8009a7e:	079b      	lsls	r3, r3, #30
 8009a80:	d413      	bmi.n	8009aaa <_printf_i+0x232>
 8009a82:	68e0      	ldr	r0, [r4, #12]
 8009a84:	9b03      	ldr	r3, [sp, #12]
 8009a86:	4298      	cmp	r0, r3
 8009a88:	bfb8      	it	lt
 8009a8a:	4618      	movlt	r0, r3
 8009a8c:	e7a6      	b.n	80099dc <_printf_i+0x164>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	4632      	mov	r2, r6
 8009a92:	4649      	mov	r1, r9
 8009a94:	4640      	mov	r0, r8
 8009a96:	47d0      	blx	sl
 8009a98:	3001      	adds	r0, #1
 8009a9a:	d09d      	beq.n	80099d8 <_printf_i+0x160>
 8009a9c:	3501      	adds	r5, #1
 8009a9e:	68e3      	ldr	r3, [r4, #12]
 8009aa0:	9903      	ldr	r1, [sp, #12]
 8009aa2:	1a5b      	subs	r3, r3, r1
 8009aa4:	42ab      	cmp	r3, r5
 8009aa6:	dcf2      	bgt.n	8009a8e <_printf_i+0x216>
 8009aa8:	e7eb      	b.n	8009a82 <_printf_i+0x20a>
 8009aaa:	2500      	movs	r5, #0
 8009aac:	f104 0619 	add.w	r6, r4, #25
 8009ab0:	e7f5      	b.n	8009a9e <_printf_i+0x226>
 8009ab2:	bf00      	nop
 8009ab4:	0800c3de 	.word	0x0800c3de
 8009ab8:	0800c3ef 	.word	0x0800c3ef

08009abc <std>:
 8009abc:	2300      	movs	r3, #0
 8009abe:	b510      	push	{r4, lr}
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	e9c0 3300 	strd	r3, r3, [r0]
 8009ac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009aca:	6083      	str	r3, [r0, #8]
 8009acc:	8181      	strh	r1, [r0, #12]
 8009ace:	6643      	str	r3, [r0, #100]	; 0x64
 8009ad0:	81c2      	strh	r2, [r0, #14]
 8009ad2:	6183      	str	r3, [r0, #24]
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	2208      	movs	r2, #8
 8009ad8:	305c      	adds	r0, #92	; 0x5c
 8009ada:	f000 f930 	bl	8009d3e <memset>
 8009ade:	4b05      	ldr	r3, [pc, #20]	; (8009af4 <std+0x38>)
 8009ae0:	6263      	str	r3, [r4, #36]	; 0x24
 8009ae2:	4b05      	ldr	r3, [pc, #20]	; (8009af8 <std+0x3c>)
 8009ae4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ae6:	4b05      	ldr	r3, [pc, #20]	; (8009afc <std+0x40>)
 8009ae8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009aea:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <std+0x44>)
 8009aec:	6224      	str	r4, [r4, #32]
 8009aee:	6323      	str	r3, [r4, #48]	; 0x30
 8009af0:	bd10      	pop	{r4, pc}
 8009af2:	bf00      	nop
 8009af4:	08009c85 	.word	0x08009c85
 8009af8:	08009ca7 	.word	0x08009ca7
 8009afc:	08009cdf 	.word	0x08009cdf
 8009b00:	08009d03 	.word	0x08009d03

08009b04 <stdio_exit_handler>:
 8009b04:	4a02      	ldr	r2, [pc, #8]	; (8009b10 <stdio_exit_handler+0xc>)
 8009b06:	4903      	ldr	r1, [pc, #12]	; (8009b14 <stdio_exit_handler+0x10>)
 8009b08:	4803      	ldr	r0, [pc, #12]	; (8009b18 <stdio_exit_handler+0x14>)
 8009b0a:	f000 b869 	b.w	8009be0 <_fwalk_sglue>
 8009b0e:	bf00      	nop
 8009b10:	20000100 	.word	0x20000100
 8009b14:	0800b741 	.word	0x0800b741
 8009b18:	2000010c 	.word	0x2000010c

08009b1c <cleanup_stdio>:
 8009b1c:	6841      	ldr	r1, [r0, #4]
 8009b1e:	4b0c      	ldr	r3, [pc, #48]	; (8009b50 <cleanup_stdio+0x34>)
 8009b20:	4299      	cmp	r1, r3
 8009b22:	b510      	push	{r4, lr}
 8009b24:	4604      	mov	r4, r0
 8009b26:	d001      	beq.n	8009b2c <cleanup_stdio+0x10>
 8009b28:	f001 fe0a 	bl	800b740 <_fflush_r>
 8009b2c:	68a1      	ldr	r1, [r4, #8]
 8009b2e:	4b09      	ldr	r3, [pc, #36]	; (8009b54 <cleanup_stdio+0x38>)
 8009b30:	4299      	cmp	r1, r3
 8009b32:	d002      	beq.n	8009b3a <cleanup_stdio+0x1e>
 8009b34:	4620      	mov	r0, r4
 8009b36:	f001 fe03 	bl	800b740 <_fflush_r>
 8009b3a:	68e1      	ldr	r1, [r4, #12]
 8009b3c:	4b06      	ldr	r3, [pc, #24]	; (8009b58 <cleanup_stdio+0x3c>)
 8009b3e:	4299      	cmp	r1, r3
 8009b40:	d004      	beq.n	8009b4c <cleanup_stdio+0x30>
 8009b42:	4620      	mov	r0, r4
 8009b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b48:	f001 bdfa 	b.w	800b740 <_fflush_r>
 8009b4c:	bd10      	pop	{r4, pc}
 8009b4e:	bf00      	nop
 8009b50:	2000190c 	.word	0x2000190c
 8009b54:	20001974 	.word	0x20001974
 8009b58:	200019dc 	.word	0x200019dc

08009b5c <global_stdio_init.part.0>:
 8009b5c:	b510      	push	{r4, lr}
 8009b5e:	4b0b      	ldr	r3, [pc, #44]	; (8009b8c <global_stdio_init.part.0+0x30>)
 8009b60:	4c0b      	ldr	r4, [pc, #44]	; (8009b90 <global_stdio_init.part.0+0x34>)
 8009b62:	4a0c      	ldr	r2, [pc, #48]	; (8009b94 <global_stdio_init.part.0+0x38>)
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	4620      	mov	r0, r4
 8009b68:	2200      	movs	r2, #0
 8009b6a:	2104      	movs	r1, #4
 8009b6c:	f7ff ffa6 	bl	8009abc <std>
 8009b70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009b74:	2201      	movs	r2, #1
 8009b76:	2109      	movs	r1, #9
 8009b78:	f7ff ffa0 	bl	8009abc <std>
 8009b7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009b80:	2202      	movs	r2, #2
 8009b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b86:	2112      	movs	r1, #18
 8009b88:	f7ff bf98 	b.w	8009abc <std>
 8009b8c:	20001a44 	.word	0x20001a44
 8009b90:	2000190c 	.word	0x2000190c
 8009b94:	08009b05 	.word	0x08009b05

08009b98 <__sfp_lock_acquire>:
 8009b98:	4801      	ldr	r0, [pc, #4]	; (8009ba0 <__sfp_lock_acquire+0x8>)
 8009b9a:	f000 b9a1 	b.w	8009ee0 <__retarget_lock_acquire_recursive>
 8009b9e:	bf00      	nop
 8009ba0:	20001a4d 	.word	0x20001a4d

08009ba4 <__sfp_lock_release>:
 8009ba4:	4801      	ldr	r0, [pc, #4]	; (8009bac <__sfp_lock_release+0x8>)
 8009ba6:	f000 b99c 	b.w	8009ee2 <__retarget_lock_release_recursive>
 8009baa:	bf00      	nop
 8009bac:	20001a4d 	.word	0x20001a4d

08009bb0 <__sinit>:
 8009bb0:	b510      	push	{r4, lr}
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	f7ff fff0 	bl	8009b98 <__sfp_lock_acquire>
 8009bb8:	6a23      	ldr	r3, [r4, #32]
 8009bba:	b11b      	cbz	r3, 8009bc4 <__sinit+0x14>
 8009bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bc0:	f7ff bff0 	b.w	8009ba4 <__sfp_lock_release>
 8009bc4:	4b04      	ldr	r3, [pc, #16]	; (8009bd8 <__sinit+0x28>)
 8009bc6:	6223      	str	r3, [r4, #32]
 8009bc8:	4b04      	ldr	r3, [pc, #16]	; (8009bdc <__sinit+0x2c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d1f5      	bne.n	8009bbc <__sinit+0xc>
 8009bd0:	f7ff ffc4 	bl	8009b5c <global_stdio_init.part.0>
 8009bd4:	e7f2      	b.n	8009bbc <__sinit+0xc>
 8009bd6:	bf00      	nop
 8009bd8:	08009b1d 	.word	0x08009b1d
 8009bdc:	20001a44 	.word	0x20001a44

08009be0 <_fwalk_sglue>:
 8009be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009be4:	4607      	mov	r7, r0
 8009be6:	4688      	mov	r8, r1
 8009be8:	4614      	mov	r4, r2
 8009bea:	2600      	movs	r6, #0
 8009bec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bf0:	f1b9 0901 	subs.w	r9, r9, #1
 8009bf4:	d505      	bpl.n	8009c02 <_fwalk_sglue+0x22>
 8009bf6:	6824      	ldr	r4, [r4, #0]
 8009bf8:	2c00      	cmp	r4, #0
 8009bfa:	d1f7      	bne.n	8009bec <_fwalk_sglue+0xc>
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c02:	89ab      	ldrh	r3, [r5, #12]
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d907      	bls.n	8009c18 <_fwalk_sglue+0x38>
 8009c08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	d003      	beq.n	8009c18 <_fwalk_sglue+0x38>
 8009c10:	4629      	mov	r1, r5
 8009c12:	4638      	mov	r0, r7
 8009c14:	47c0      	blx	r8
 8009c16:	4306      	orrs	r6, r0
 8009c18:	3568      	adds	r5, #104	; 0x68
 8009c1a:	e7e9      	b.n	8009bf0 <_fwalk_sglue+0x10>

08009c1c <sniprintf>:
 8009c1c:	b40c      	push	{r2, r3}
 8009c1e:	b530      	push	{r4, r5, lr}
 8009c20:	4b17      	ldr	r3, [pc, #92]	; (8009c80 <sniprintf+0x64>)
 8009c22:	1e0c      	subs	r4, r1, #0
 8009c24:	681d      	ldr	r5, [r3, #0]
 8009c26:	b09d      	sub	sp, #116	; 0x74
 8009c28:	da08      	bge.n	8009c3c <sniprintf+0x20>
 8009c2a:	238b      	movs	r3, #139	; 0x8b
 8009c2c:	602b      	str	r3, [r5, #0]
 8009c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c32:	b01d      	add	sp, #116	; 0x74
 8009c34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c38:	b002      	add	sp, #8
 8009c3a:	4770      	bx	lr
 8009c3c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009c40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009c44:	bf14      	ite	ne
 8009c46:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009c4a:	4623      	moveq	r3, r4
 8009c4c:	9304      	str	r3, [sp, #16]
 8009c4e:	9307      	str	r3, [sp, #28]
 8009c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c54:	9002      	str	r0, [sp, #8]
 8009c56:	9006      	str	r0, [sp, #24]
 8009c58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c5e:	ab21      	add	r3, sp, #132	; 0x84
 8009c60:	a902      	add	r1, sp, #8
 8009c62:	4628      	mov	r0, r5
 8009c64:	9301      	str	r3, [sp, #4]
 8009c66:	f001 fbe7 	bl	800b438 <_svfiprintf_r>
 8009c6a:	1c43      	adds	r3, r0, #1
 8009c6c:	bfbc      	itt	lt
 8009c6e:	238b      	movlt	r3, #139	; 0x8b
 8009c70:	602b      	strlt	r3, [r5, #0]
 8009c72:	2c00      	cmp	r4, #0
 8009c74:	d0dd      	beq.n	8009c32 <sniprintf+0x16>
 8009c76:	9b02      	ldr	r3, [sp, #8]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	701a      	strb	r2, [r3, #0]
 8009c7c:	e7d9      	b.n	8009c32 <sniprintf+0x16>
 8009c7e:	bf00      	nop
 8009c80:	20000158 	.word	0x20000158

08009c84 <__sread>:
 8009c84:	b510      	push	{r4, lr}
 8009c86:	460c      	mov	r4, r1
 8009c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c8c:	f000 f8b6 	bl	8009dfc <_read_r>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	bfab      	itete	ge
 8009c94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c96:	89a3      	ldrhlt	r3, [r4, #12]
 8009c98:	181b      	addge	r3, r3, r0
 8009c9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c9e:	bfac      	ite	ge
 8009ca0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ca2:	81a3      	strhlt	r3, [r4, #12]
 8009ca4:	bd10      	pop	{r4, pc}

08009ca6 <__swrite>:
 8009ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009caa:	461f      	mov	r7, r3
 8009cac:	898b      	ldrh	r3, [r1, #12]
 8009cae:	05db      	lsls	r3, r3, #23
 8009cb0:	4605      	mov	r5, r0
 8009cb2:	460c      	mov	r4, r1
 8009cb4:	4616      	mov	r6, r2
 8009cb6:	d505      	bpl.n	8009cc4 <__swrite+0x1e>
 8009cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f000 f88a 	bl	8009dd8 <_lseek_r>
 8009cc4:	89a3      	ldrh	r3, [r4, #12]
 8009cc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cce:	81a3      	strh	r3, [r4, #12]
 8009cd0:	4632      	mov	r2, r6
 8009cd2:	463b      	mov	r3, r7
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cda:	f000 b8c5 	b.w	8009e68 <_write_r>

08009cde <__sseek>:
 8009cde:	b510      	push	{r4, lr}
 8009ce0:	460c      	mov	r4, r1
 8009ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce6:	f000 f877 	bl	8009dd8 <_lseek_r>
 8009cea:	1c43      	adds	r3, r0, #1
 8009cec:	89a3      	ldrh	r3, [r4, #12]
 8009cee:	bf15      	itete	ne
 8009cf0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009cf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009cf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009cfa:	81a3      	strheq	r3, [r4, #12]
 8009cfc:	bf18      	it	ne
 8009cfe:	81a3      	strhne	r3, [r4, #12]
 8009d00:	bd10      	pop	{r4, pc}

08009d02 <__sclose>:
 8009d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d06:	f000 b857 	b.w	8009db8 <_close_r>

08009d0a <memmove>:
 8009d0a:	4288      	cmp	r0, r1
 8009d0c:	b510      	push	{r4, lr}
 8009d0e:	eb01 0402 	add.w	r4, r1, r2
 8009d12:	d902      	bls.n	8009d1a <memmove+0x10>
 8009d14:	4284      	cmp	r4, r0
 8009d16:	4623      	mov	r3, r4
 8009d18:	d807      	bhi.n	8009d2a <memmove+0x20>
 8009d1a:	1e43      	subs	r3, r0, #1
 8009d1c:	42a1      	cmp	r1, r4
 8009d1e:	d008      	beq.n	8009d32 <memmove+0x28>
 8009d20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d24:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d28:	e7f8      	b.n	8009d1c <memmove+0x12>
 8009d2a:	4402      	add	r2, r0
 8009d2c:	4601      	mov	r1, r0
 8009d2e:	428a      	cmp	r2, r1
 8009d30:	d100      	bne.n	8009d34 <memmove+0x2a>
 8009d32:	bd10      	pop	{r4, pc}
 8009d34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d38:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d3c:	e7f7      	b.n	8009d2e <memmove+0x24>

08009d3e <memset>:
 8009d3e:	4402      	add	r2, r0
 8009d40:	4603      	mov	r3, r0
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d100      	bne.n	8009d48 <memset+0xa>
 8009d46:	4770      	bx	lr
 8009d48:	f803 1b01 	strb.w	r1, [r3], #1
 8009d4c:	e7f9      	b.n	8009d42 <memset+0x4>

08009d4e <_raise_r>:
 8009d4e:	291f      	cmp	r1, #31
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	4604      	mov	r4, r0
 8009d54:	460d      	mov	r5, r1
 8009d56:	d904      	bls.n	8009d62 <_raise_r+0x14>
 8009d58:	2316      	movs	r3, #22
 8009d5a:	6003      	str	r3, [r0, #0]
 8009d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d60:	bd38      	pop	{r3, r4, r5, pc}
 8009d62:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009d64:	b112      	cbz	r2, 8009d6c <_raise_r+0x1e>
 8009d66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d6a:	b94b      	cbnz	r3, 8009d80 <_raise_r+0x32>
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f000 f869 	bl	8009e44 <_getpid_r>
 8009d72:	462a      	mov	r2, r5
 8009d74:	4601      	mov	r1, r0
 8009d76:	4620      	mov	r0, r4
 8009d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d7c:	f000 b850 	b.w	8009e20 <_kill_r>
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d00a      	beq.n	8009d9a <_raise_r+0x4c>
 8009d84:	1c59      	adds	r1, r3, #1
 8009d86:	d103      	bne.n	8009d90 <_raise_r+0x42>
 8009d88:	2316      	movs	r3, #22
 8009d8a:	6003      	str	r3, [r0, #0]
 8009d8c:	2001      	movs	r0, #1
 8009d8e:	e7e7      	b.n	8009d60 <_raise_r+0x12>
 8009d90:	2400      	movs	r4, #0
 8009d92:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d96:	4628      	mov	r0, r5
 8009d98:	4798      	blx	r3
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	e7e0      	b.n	8009d60 <_raise_r+0x12>
	...

08009da0 <raise>:
 8009da0:	4b02      	ldr	r3, [pc, #8]	; (8009dac <raise+0xc>)
 8009da2:	4601      	mov	r1, r0
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	f7ff bfd2 	b.w	8009d4e <_raise_r>
 8009daa:	bf00      	nop
 8009dac:	20000158 	.word	0x20000158

08009db0 <_localeconv_r>:
 8009db0:	4800      	ldr	r0, [pc, #0]	; (8009db4 <_localeconv_r+0x4>)
 8009db2:	4770      	bx	lr
 8009db4:	2000024c 	.word	0x2000024c

08009db8 <_close_r>:
 8009db8:	b538      	push	{r3, r4, r5, lr}
 8009dba:	4d06      	ldr	r5, [pc, #24]	; (8009dd4 <_close_r+0x1c>)
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	4608      	mov	r0, r1
 8009dc2:	602b      	str	r3, [r5, #0]
 8009dc4:	f7f8 f933 	bl	800202e <_close>
 8009dc8:	1c43      	adds	r3, r0, #1
 8009dca:	d102      	bne.n	8009dd2 <_close_r+0x1a>
 8009dcc:	682b      	ldr	r3, [r5, #0]
 8009dce:	b103      	cbz	r3, 8009dd2 <_close_r+0x1a>
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	bd38      	pop	{r3, r4, r5, pc}
 8009dd4:	20001a48 	.word	0x20001a48

08009dd8 <_lseek_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	4d07      	ldr	r5, [pc, #28]	; (8009df8 <_lseek_r+0x20>)
 8009ddc:	4604      	mov	r4, r0
 8009dde:	4608      	mov	r0, r1
 8009de0:	4611      	mov	r1, r2
 8009de2:	2200      	movs	r2, #0
 8009de4:	602a      	str	r2, [r5, #0]
 8009de6:	461a      	mov	r2, r3
 8009de8:	f7f8 f948 	bl	800207c <_lseek>
 8009dec:	1c43      	adds	r3, r0, #1
 8009dee:	d102      	bne.n	8009df6 <_lseek_r+0x1e>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	b103      	cbz	r3, 8009df6 <_lseek_r+0x1e>
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	bd38      	pop	{r3, r4, r5, pc}
 8009df8:	20001a48 	.word	0x20001a48

08009dfc <_read_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4d07      	ldr	r5, [pc, #28]	; (8009e1c <_read_r+0x20>)
 8009e00:	4604      	mov	r4, r0
 8009e02:	4608      	mov	r0, r1
 8009e04:	4611      	mov	r1, r2
 8009e06:	2200      	movs	r2, #0
 8009e08:	602a      	str	r2, [r5, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f7f8 f8d6 	bl	8001fbc <_read>
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d102      	bne.n	8009e1a <_read_r+0x1e>
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	b103      	cbz	r3, 8009e1a <_read_r+0x1e>
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	20001a48 	.word	0x20001a48

08009e20 <_kill_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	4d07      	ldr	r5, [pc, #28]	; (8009e40 <_kill_r+0x20>)
 8009e24:	2300      	movs	r3, #0
 8009e26:	4604      	mov	r4, r0
 8009e28:	4608      	mov	r0, r1
 8009e2a:	4611      	mov	r1, r2
 8009e2c:	602b      	str	r3, [r5, #0]
 8009e2e:	f7f8 f8ab 	bl	8001f88 <_kill>
 8009e32:	1c43      	adds	r3, r0, #1
 8009e34:	d102      	bne.n	8009e3c <_kill_r+0x1c>
 8009e36:	682b      	ldr	r3, [r5, #0]
 8009e38:	b103      	cbz	r3, 8009e3c <_kill_r+0x1c>
 8009e3a:	6023      	str	r3, [r4, #0]
 8009e3c:	bd38      	pop	{r3, r4, r5, pc}
 8009e3e:	bf00      	nop
 8009e40:	20001a48 	.word	0x20001a48

08009e44 <_getpid_r>:
 8009e44:	f7f8 b898 	b.w	8001f78 <_getpid>

08009e48 <_sbrk_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4d06      	ldr	r5, [pc, #24]	; (8009e64 <_sbrk_r+0x1c>)
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	4604      	mov	r4, r0
 8009e50:	4608      	mov	r0, r1
 8009e52:	602b      	str	r3, [r5, #0]
 8009e54:	f7f8 f920 	bl	8002098 <_sbrk>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d102      	bne.n	8009e62 <_sbrk_r+0x1a>
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	b103      	cbz	r3, 8009e62 <_sbrk_r+0x1a>
 8009e60:	6023      	str	r3, [r4, #0]
 8009e62:	bd38      	pop	{r3, r4, r5, pc}
 8009e64:	20001a48 	.word	0x20001a48

08009e68 <_write_r>:
 8009e68:	b538      	push	{r3, r4, r5, lr}
 8009e6a:	4d07      	ldr	r5, [pc, #28]	; (8009e88 <_write_r+0x20>)
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	4608      	mov	r0, r1
 8009e70:	4611      	mov	r1, r2
 8009e72:	2200      	movs	r2, #0
 8009e74:	602a      	str	r2, [r5, #0]
 8009e76:	461a      	mov	r2, r3
 8009e78:	f7f8 f8bd 	bl	8001ff6 <_write>
 8009e7c:	1c43      	adds	r3, r0, #1
 8009e7e:	d102      	bne.n	8009e86 <_write_r+0x1e>
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	b103      	cbz	r3, 8009e86 <_write_r+0x1e>
 8009e84:	6023      	str	r3, [r4, #0]
 8009e86:	bd38      	pop	{r3, r4, r5, pc}
 8009e88:	20001a48 	.word	0x20001a48

08009e8c <__errno>:
 8009e8c:	4b01      	ldr	r3, [pc, #4]	; (8009e94 <__errno+0x8>)
 8009e8e:	6818      	ldr	r0, [r3, #0]
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	20000158 	.word	0x20000158

08009e98 <__libc_init_array>:
 8009e98:	b570      	push	{r4, r5, r6, lr}
 8009e9a:	4d0d      	ldr	r5, [pc, #52]	; (8009ed0 <__libc_init_array+0x38>)
 8009e9c:	4c0d      	ldr	r4, [pc, #52]	; (8009ed4 <__libc_init_array+0x3c>)
 8009e9e:	1b64      	subs	r4, r4, r5
 8009ea0:	10a4      	asrs	r4, r4, #2
 8009ea2:	2600      	movs	r6, #0
 8009ea4:	42a6      	cmp	r6, r4
 8009ea6:	d109      	bne.n	8009ebc <__libc_init_array+0x24>
 8009ea8:	4d0b      	ldr	r5, [pc, #44]	; (8009ed8 <__libc_init_array+0x40>)
 8009eaa:	4c0c      	ldr	r4, [pc, #48]	; (8009edc <__libc_init_array+0x44>)
 8009eac:	f001 ff6a 	bl	800bd84 <_init>
 8009eb0:	1b64      	subs	r4, r4, r5
 8009eb2:	10a4      	asrs	r4, r4, #2
 8009eb4:	2600      	movs	r6, #0
 8009eb6:	42a6      	cmp	r6, r4
 8009eb8:	d105      	bne.n	8009ec6 <__libc_init_array+0x2e>
 8009eba:	bd70      	pop	{r4, r5, r6, pc}
 8009ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ec0:	4798      	blx	r3
 8009ec2:	3601      	adds	r6, #1
 8009ec4:	e7ee      	b.n	8009ea4 <__libc_init_array+0xc>
 8009ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eca:	4798      	blx	r3
 8009ecc:	3601      	adds	r6, #1
 8009ece:	e7f2      	b.n	8009eb6 <__libc_init_array+0x1e>
 8009ed0:	0800c744 	.word	0x0800c744
 8009ed4:	0800c744 	.word	0x0800c744
 8009ed8:	0800c744 	.word	0x0800c744
 8009edc:	0800c748 	.word	0x0800c748

08009ee0 <__retarget_lock_acquire_recursive>:
 8009ee0:	4770      	bx	lr

08009ee2 <__retarget_lock_release_recursive>:
 8009ee2:	4770      	bx	lr

08009ee4 <memcpy>:
 8009ee4:	440a      	add	r2, r1
 8009ee6:	4291      	cmp	r1, r2
 8009ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009eec:	d100      	bne.n	8009ef0 <memcpy+0xc>
 8009eee:	4770      	bx	lr
 8009ef0:	b510      	push	{r4, lr}
 8009ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009efa:	4291      	cmp	r1, r2
 8009efc:	d1f9      	bne.n	8009ef2 <memcpy+0xe>
 8009efe:	bd10      	pop	{r4, pc}

08009f00 <quorem>:
 8009f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f04:	6903      	ldr	r3, [r0, #16]
 8009f06:	690c      	ldr	r4, [r1, #16]
 8009f08:	42a3      	cmp	r3, r4
 8009f0a:	4607      	mov	r7, r0
 8009f0c:	db7e      	blt.n	800a00c <quorem+0x10c>
 8009f0e:	3c01      	subs	r4, #1
 8009f10:	f101 0814 	add.w	r8, r1, #20
 8009f14:	f100 0514 	add.w	r5, r0, #20
 8009f18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f1c:	9301      	str	r3, [sp, #4]
 8009f1e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f26:	3301      	adds	r3, #1
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f32:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f36:	d331      	bcc.n	8009f9c <quorem+0x9c>
 8009f38:	f04f 0e00 	mov.w	lr, #0
 8009f3c:	4640      	mov	r0, r8
 8009f3e:	46ac      	mov	ip, r5
 8009f40:	46f2      	mov	sl, lr
 8009f42:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f46:	b293      	uxth	r3, r2
 8009f48:	fb06 e303 	mla	r3, r6, r3, lr
 8009f4c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f50:	0c1a      	lsrs	r2, r3, #16
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	ebaa 0303 	sub.w	r3, sl, r3
 8009f58:	f8dc a000 	ldr.w	sl, [ip]
 8009f5c:	fa13 f38a 	uxtah	r3, r3, sl
 8009f60:	fb06 220e 	mla	r2, r6, lr, r2
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	9b00      	ldr	r3, [sp, #0]
 8009f68:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f6c:	b292      	uxth	r2, r2
 8009f6e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009f72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f76:	f8bd 3000 	ldrh.w	r3, [sp]
 8009f7a:	4581      	cmp	r9, r0
 8009f7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f80:	f84c 3b04 	str.w	r3, [ip], #4
 8009f84:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f88:	d2db      	bcs.n	8009f42 <quorem+0x42>
 8009f8a:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f8e:	b92b      	cbnz	r3, 8009f9c <quorem+0x9c>
 8009f90:	9b01      	ldr	r3, [sp, #4]
 8009f92:	3b04      	subs	r3, #4
 8009f94:	429d      	cmp	r5, r3
 8009f96:	461a      	mov	r2, r3
 8009f98:	d32c      	bcc.n	8009ff4 <quorem+0xf4>
 8009f9a:	613c      	str	r4, [r7, #16]
 8009f9c:	4638      	mov	r0, r7
 8009f9e:	f001 f8f1 	bl	800b184 <__mcmp>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	db22      	blt.n	8009fec <quorem+0xec>
 8009fa6:	3601      	adds	r6, #1
 8009fa8:	4629      	mov	r1, r5
 8009faa:	2000      	movs	r0, #0
 8009fac:	f858 2b04 	ldr.w	r2, [r8], #4
 8009fb0:	f8d1 c000 	ldr.w	ip, [r1]
 8009fb4:	b293      	uxth	r3, r2
 8009fb6:	1ac3      	subs	r3, r0, r3
 8009fb8:	0c12      	lsrs	r2, r2, #16
 8009fba:	fa13 f38c 	uxtah	r3, r3, ip
 8009fbe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009fc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fcc:	45c1      	cmp	r9, r8
 8009fce:	f841 3b04 	str.w	r3, [r1], #4
 8009fd2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009fd6:	d2e9      	bcs.n	8009fac <quorem+0xac>
 8009fd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fe0:	b922      	cbnz	r2, 8009fec <quorem+0xec>
 8009fe2:	3b04      	subs	r3, #4
 8009fe4:	429d      	cmp	r5, r3
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	d30a      	bcc.n	800a000 <quorem+0x100>
 8009fea:	613c      	str	r4, [r7, #16]
 8009fec:	4630      	mov	r0, r6
 8009fee:	b003      	add	sp, #12
 8009ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff4:	6812      	ldr	r2, [r2, #0]
 8009ff6:	3b04      	subs	r3, #4
 8009ff8:	2a00      	cmp	r2, #0
 8009ffa:	d1ce      	bne.n	8009f9a <quorem+0x9a>
 8009ffc:	3c01      	subs	r4, #1
 8009ffe:	e7c9      	b.n	8009f94 <quorem+0x94>
 800a000:	6812      	ldr	r2, [r2, #0]
 800a002:	3b04      	subs	r3, #4
 800a004:	2a00      	cmp	r2, #0
 800a006:	d1f0      	bne.n	8009fea <quorem+0xea>
 800a008:	3c01      	subs	r4, #1
 800a00a:	e7eb      	b.n	8009fe4 <quorem+0xe4>
 800a00c:	2000      	movs	r0, #0
 800a00e:	e7ee      	b.n	8009fee <quorem+0xee>

0800a010 <_dtoa_r>:
 800a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a014:	ed2d 8b04 	vpush	{d8-d9}
 800a018:	69c5      	ldr	r5, [r0, #28]
 800a01a:	b093      	sub	sp, #76	; 0x4c
 800a01c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a020:	ec57 6b10 	vmov	r6, r7, d0
 800a024:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a028:	9107      	str	r1, [sp, #28]
 800a02a:	4604      	mov	r4, r0
 800a02c:	920a      	str	r2, [sp, #40]	; 0x28
 800a02e:	930d      	str	r3, [sp, #52]	; 0x34
 800a030:	b975      	cbnz	r5, 800a050 <_dtoa_r+0x40>
 800a032:	2010      	movs	r0, #16
 800a034:	f7ff f820 	bl	8009078 <malloc>
 800a038:	4602      	mov	r2, r0
 800a03a:	61e0      	str	r0, [r4, #28]
 800a03c:	b920      	cbnz	r0, 800a048 <_dtoa_r+0x38>
 800a03e:	4bae      	ldr	r3, [pc, #696]	; (800a2f8 <_dtoa_r+0x2e8>)
 800a040:	21ef      	movs	r1, #239	; 0xef
 800a042:	48ae      	ldr	r0, [pc, #696]	; (800a2fc <_dtoa_r+0x2ec>)
 800a044:	f001 fba4 	bl	800b790 <__assert_func>
 800a048:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a04c:	6005      	str	r5, [r0, #0]
 800a04e:	60c5      	str	r5, [r0, #12]
 800a050:	69e3      	ldr	r3, [r4, #28]
 800a052:	6819      	ldr	r1, [r3, #0]
 800a054:	b151      	cbz	r1, 800a06c <_dtoa_r+0x5c>
 800a056:	685a      	ldr	r2, [r3, #4]
 800a058:	604a      	str	r2, [r1, #4]
 800a05a:	2301      	movs	r3, #1
 800a05c:	4093      	lsls	r3, r2
 800a05e:	608b      	str	r3, [r1, #8]
 800a060:	4620      	mov	r0, r4
 800a062:	f000 fe53 	bl	800ad0c <_Bfree>
 800a066:	69e3      	ldr	r3, [r4, #28]
 800a068:	2200      	movs	r2, #0
 800a06a:	601a      	str	r2, [r3, #0]
 800a06c:	1e3b      	subs	r3, r7, #0
 800a06e:	bfbb      	ittet	lt
 800a070:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a074:	9303      	strlt	r3, [sp, #12]
 800a076:	2300      	movge	r3, #0
 800a078:	2201      	movlt	r2, #1
 800a07a:	bfac      	ite	ge
 800a07c:	f8c8 3000 	strge.w	r3, [r8]
 800a080:	f8c8 2000 	strlt.w	r2, [r8]
 800a084:	4b9e      	ldr	r3, [pc, #632]	; (800a300 <_dtoa_r+0x2f0>)
 800a086:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a08a:	ea33 0308 	bics.w	r3, r3, r8
 800a08e:	d11b      	bne.n	800a0c8 <_dtoa_r+0xb8>
 800a090:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a092:	f242 730f 	movw	r3, #9999	; 0x270f
 800a096:	6013      	str	r3, [r2, #0]
 800a098:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a09c:	4333      	orrs	r3, r6
 800a09e:	f000 8593 	beq.w	800abc8 <_dtoa_r+0xbb8>
 800a0a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0a4:	b963      	cbnz	r3, 800a0c0 <_dtoa_r+0xb0>
 800a0a6:	4b97      	ldr	r3, [pc, #604]	; (800a304 <_dtoa_r+0x2f4>)
 800a0a8:	e027      	b.n	800a0fa <_dtoa_r+0xea>
 800a0aa:	4b97      	ldr	r3, [pc, #604]	; (800a308 <_dtoa_r+0x2f8>)
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	3308      	adds	r3, #8
 800a0b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0b2:	6013      	str	r3, [r2, #0]
 800a0b4:	9800      	ldr	r0, [sp, #0]
 800a0b6:	b013      	add	sp, #76	; 0x4c
 800a0b8:	ecbd 8b04 	vpop	{d8-d9}
 800a0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c0:	4b90      	ldr	r3, [pc, #576]	; (800a304 <_dtoa_r+0x2f4>)
 800a0c2:	9300      	str	r3, [sp, #0]
 800a0c4:	3303      	adds	r3, #3
 800a0c6:	e7f3      	b.n	800a0b0 <_dtoa_r+0xa0>
 800a0c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	ec51 0b17 	vmov	r0, r1, d7
 800a0d2:	eeb0 8a47 	vmov.f32	s16, s14
 800a0d6:	eef0 8a67 	vmov.f32	s17, s15
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f7f6 fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0e0:	4681      	mov	r9, r0
 800a0e2:	b160      	cbz	r0, 800a0fe <_dtoa_r+0xee>
 800a0e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	6013      	str	r3, [r2, #0]
 800a0ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 8568 	beq.w	800abc2 <_dtoa_r+0xbb2>
 800a0f2:	4b86      	ldr	r3, [pc, #536]	; (800a30c <_dtoa_r+0x2fc>)
 800a0f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0f6:	6013      	str	r3, [r2, #0]
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	9300      	str	r3, [sp, #0]
 800a0fc:	e7da      	b.n	800a0b4 <_dtoa_r+0xa4>
 800a0fe:	aa10      	add	r2, sp, #64	; 0x40
 800a100:	a911      	add	r1, sp, #68	; 0x44
 800a102:	4620      	mov	r0, r4
 800a104:	eeb0 0a48 	vmov.f32	s0, s16
 800a108:	eef0 0a68 	vmov.f32	s1, s17
 800a10c:	f001 f8e0 	bl	800b2d0 <__d2b>
 800a110:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a114:	4682      	mov	sl, r0
 800a116:	2d00      	cmp	r5, #0
 800a118:	d07f      	beq.n	800a21a <_dtoa_r+0x20a>
 800a11a:	ee18 3a90 	vmov	r3, s17
 800a11e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a122:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a126:	ec51 0b18 	vmov	r0, r1, d8
 800a12a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a12e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a132:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a136:	4619      	mov	r1, r3
 800a138:	2200      	movs	r2, #0
 800a13a:	4b75      	ldr	r3, [pc, #468]	; (800a310 <_dtoa_r+0x300>)
 800a13c:	f7f6 f8a4 	bl	8000288 <__aeabi_dsub>
 800a140:	a367      	add	r3, pc, #412	; (adr r3, 800a2e0 <_dtoa_r+0x2d0>)
 800a142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a146:	f7f6 fa57 	bl	80005f8 <__aeabi_dmul>
 800a14a:	a367      	add	r3, pc, #412	; (adr r3, 800a2e8 <_dtoa_r+0x2d8>)
 800a14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a150:	f7f6 f89c 	bl	800028c <__adddf3>
 800a154:	4606      	mov	r6, r0
 800a156:	4628      	mov	r0, r5
 800a158:	460f      	mov	r7, r1
 800a15a:	f7f6 f9e3 	bl	8000524 <__aeabi_i2d>
 800a15e:	a364      	add	r3, pc, #400	; (adr r3, 800a2f0 <_dtoa_r+0x2e0>)
 800a160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a164:	f7f6 fa48 	bl	80005f8 <__aeabi_dmul>
 800a168:	4602      	mov	r2, r0
 800a16a:	460b      	mov	r3, r1
 800a16c:	4630      	mov	r0, r6
 800a16e:	4639      	mov	r1, r7
 800a170:	f7f6 f88c 	bl	800028c <__adddf3>
 800a174:	4606      	mov	r6, r0
 800a176:	460f      	mov	r7, r1
 800a178:	f7f6 fcee 	bl	8000b58 <__aeabi_d2iz>
 800a17c:	2200      	movs	r2, #0
 800a17e:	4683      	mov	fp, r0
 800a180:	2300      	movs	r3, #0
 800a182:	4630      	mov	r0, r6
 800a184:	4639      	mov	r1, r7
 800a186:	f7f6 fca9 	bl	8000adc <__aeabi_dcmplt>
 800a18a:	b148      	cbz	r0, 800a1a0 <_dtoa_r+0x190>
 800a18c:	4658      	mov	r0, fp
 800a18e:	f7f6 f9c9 	bl	8000524 <__aeabi_i2d>
 800a192:	4632      	mov	r2, r6
 800a194:	463b      	mov	r3, r7
 800a196:	f7f6 fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 800a19a:	b908      	cbnz	r0, 800a1a0 <_dtoa_r+0x190>
 800a19c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1a0:	f1bb 0f16 	cmp.w	fp, #22
 800a1a4:	d857      	bhi.n	800a256 <_dtoa_r+0x246>
 800a1a6:	4b5b      	ldr	r3, [pc, #364]	; (800a314 <_dtoa_r+0x304>)
 800a1a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b0:	ec51 0b18 	vmov	r0, r1, d8
 800a1b4:	f7f6 fc92 	bl	8000adc <__aeabi_dcmplt>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d04e      	beq.n	800a25a <_dtoa_r+0x24a>
 800a1bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	930c      	str	r3, [sp, #48]	; 0x30
 800a1c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1c6:	1b5b      	subs	r3, r3, r5
 800a1c8:	1e5a      	subs	r2, r3, #1
 800a1ca:	bf45      	ittet	mi
 800a1cc:	f1c3 0301 	rsbmi	r3, r3, #1
 800a1d0:	9305      	strmi	r3, [sp, #20]
 800a1d2:	2300      	movpl	r3, #0
 800a1d4:	2300      	movmi	r3, #0
 800a1d6:	9206      	str	r2, [sp, #24]
 800a1d8:	bf54      	ite	pl
 800a1da:	9305      	strpl	r3, [sp, #20]
 800a1dc:	9306      	strmi	r3, [sp, #24]
 800a1de:	f1bb 0f00 	cmp.w	fp, #0
 800a1e2:	db3c      	blt.n	800a25e <_dtoa_r+0x24e>
 800a1e4:	9b06      	ldr	r3, [sp, #24]
 800a1e6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a1ea:	445b      	add	r3, fp
 800a1ec:	9306      	str	r3, [sp, #24]
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	9308      	str	r3, [sp, #32]
 800a1f2:	9b07      	ldr	r3, [sp, #28]
 800a1f4:	2b09      	cmp	r3, #9
 800a1f6:	d868      	bhi.n	800a2ca <_dtoa_r+0x2ba>
 800a1f8:	2b05      	cmp	r3, #5
 800a1fa:	bfc4      	itt	gt
 800a1fc:	3b04      	subgt	r3, #4
 800a1fe:	9307      	strgt	r3, [sp, #28]
 800a200:	9b07      	ldr	r3, [sp, #28]
 800a202:	f1a3 0302 	sub.w	r3, r3, #2
 800a206:	bfcc      	ite	gt
 800a208:	2500      	movgt	r5, #0
 800a20a:	2501      	movle	r5, #1
 800a20c:	2b03      	cmp	r3, #3
 800a20e:	f200 8085 	bhi.w	800a31c <_dtoa_r+0x30c>
 800a212:	e8df f003 	tbb	[pc, r3]
 800a216:	3b2e      	.short	0x3b2e
 800a218:	5839      	.short	0x5839
 800a21a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a21e:	441d      	add	r5, r3
 800a220:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a224:	2b20      	cmp	r3, #32
 800a226:	bfc1      	itttt	gt
 800a228:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a22c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a230:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a234:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a238:	bfd6      	itet	le
 800a23a:	f1c3 0320 	rsble	r3, r3, #32
 800a23e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a242:	fa06 f003 	lslle.w	r0, r6, r3
 800a246:	f7f6 f95d 	bl	8000504 <__aeabi_ui2d>
 800a24a:	2201      	movs	r2, #1
 800a24c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a250:	3d01      	subs	r5, #1
 800a252:	920e      	str	r2, [sp, #56]	; 0x38
 800a254:	e76f      	b.n	800a136 <_dtoa_r+0x126>
 800a256:	2301      	movs	r3, #1
 800a258:	e7b3      	b.n	800a1c2 <_dtoa_r+0x1b2>
 800a25a:	900c      	str	r0, [sp, #48]	; 0x30
 800a25c:	e7b2      	b.n	800a1c4 <_dtoa_r+0x1b4>
 800a25e:	9b05      	ldr	r3, [sp, #20]
 800a260:	eba3 030b 	sub.w	r3, r3, fp
 800a264:	9305      	str	r3, [sp, #20]
 800a266:	f1cb 0300 	rsb	r3, fp, #0
 800a26a:	9308      	str	r3, [sp, #32]
 800a26c:	2300      	movs	r3, #0
 800a26e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a270:	e7bf      	b.n	800a1f2 <_dtoa_r+0x1e2>
 800a272:	2300      	movs	r3, #0
 800a274:	9309      	str	r3, [sp, #36]	; 0x24
 800a276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a278:	2b00      	cmp	r3, #0
 800a27a:	dc52      	bgt.n	800a322 <_dtoa_r+0x312>
 800a27c:	2301      	movs	r3, #1
 800a27e:	9301      	str	r3, [sp, #4]
 800a280:	9304      	str	r3, [sp, #16]
 800a282:	461a      	mov	r2, r3
 800a284:	920a      	str	r2, [sp, #40]	; 0x28
 800a286:	e00b      	b.n	800a2a0 <_dtoa_r+0x290>
 800a288:	2301      	movs	r3, #1
 800a28a:	e7f3      	b.n	800a274 <_dtoa_r+0x264>
 800a28c:	2300      	movs	r3, #0
 800a28e:	9309      	str	r3, [sp, #36]	; 0x24
 800a290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a292:	445b      	add	r3, fp
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	3301      	adds	r3, #1
 800a298:	2b01      	cmp	r3, #1
 800a29a:	9304      	str	r3, [sp, #16]
 800a29c:	bfb8      	it	lt
 800a29e:	2301      	movlt	r3, #1
 800a2a0:	69e0      	ldr	r0, [r4, #28]
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	2204      	movs	r2, #4
 800a2a6:	f102 0614 	add.w	r6, r2, #20
 800a2aa:	429e      	cmp	r6, r3
 800a2ac:	d93d      	bls.n	800a32a <_dtoa_r+0x31a>
 800a2ae:	6041      	str	r1, [r0, #4]
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f000 fceb 	bl	800ac8c <_Balloc>
 800a2b6:	9000      	str	r0, [sp, #0]
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	d139      	bne.n	800a330 <_dtoa_r+0x320>
 800a2bc:	4b16      	ldr	r3, [pc, #88]	; (800a318 <_dtoa_r+0x308>)
 800a2be:	4602      	mov	r2, r0
 800a2c0:	f240 11af 	movw	r1, #431	; 0x1af
 800a2c4:	e6bd      	b.n	800a042 <_dtoa_r+0x32>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e7e1      	b.n	800a28e <_dtoa_r+0x27e>
 800a2ca:	2501      	movs	r5, #1
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	9307      	str	r3, [sp, #28]
 800a2d0:	9509      	str	r5, [sp, #36]	; 0x24
 800a2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d6:	9301      	str	r3, [sp, #4]
 800a2d8:	9304      	str	r3, [sp, #16]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	2312      	movs	r3, #18
 800a2de:	e7d1      	b.n	800a284 <_dtoa_r+0x274>
 800a2e0:	636f4361 	.word	0x636f4361
 800a2e4:	3fd287a7 	.word	0x3fd287a7
 800a2e8:	8b60c8b3 	.word	0x8b60c8b3
 800a2ec:	3fc68a28 	.word	0x3fc68a28
 800a2f0:	509f79fb 	.word	0x509f79fb
 800a2f4:	3fd34413 	.word	0x3fd34413
 800a2f8:	0800c40d 	.word	0x0800c40d
 800a2fc:	0800c424 	.word	0x0800c424
 800a300:	7ff00000 	.word	0x7ff00000
 800a304:	0800c409 	.word	0x0800c409
 800a308:	0800c400 	.word	0x0800c400
 800a30c:	0800c3dd 	.word	0x0800c3dd
 800a310:	3ff80000 	.word	0x3ff80000
 800a314:	0800c510 	.word	0x0800c510
 800a318:	0800c47c 	.word	0x0800c47c
 800a31c:	2301      	movs	r3, #1
 800a31e:	9309      	str	r3, [sp, #36]	; 0x24
 800a320:	e7d7      	b.n	800a2d2 <_dtoa_r+0x2c2>
 800a322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a324:	9301      	str	r3, [sp, #4]
 800a326:	9304      	str	r3, [sp, #16]
 800a328:	e7ba      	b.n	800a2a0 <_dtoa_r+0x290>
 800a32a:	3101      	adds	r1, #1
 800a32c:	0052      	lsls	r2, r2, #1
 800a32e:	e7ba      	b.n	800a2a6 <_dtoa_r+0x296>
 800a330:	69e3      	ldr	r3, [r4, #28]
 800a332:	9a00      	ldr	r2, [sp, #0]
 800a334:	601a      	str	r2, [r3, #0]
 800a336:	9b04      	ldr	r3, [sp, #16]
 800a338:	2b0e      	cmp	r3, #14
 800a33a:	f200 80a8 	bhi.w	800a48e <_dtoa_r+0x47e>
 800a33e:	2d00      	cmp	r5, #0
 800a340:	f000 80a5 	beq.w	800a48e <_dtoa_r+0x47e>
 800a344:	f1bb 0f00 	cmp.w	fp, #0
 800a348:	dd38      	ble.n	800a3bc <_dtoa_r+0x3ac>
 800a34a:	4bc0      	ldr	r3, [pc, #768]	; (800a64c <_dtoa_r+0x63c>)
 800a34c:	f00b 020f 	and.w	r2, fp, #15
 800a350:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a354:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a358:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a35c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a360:	d019      	beq.n	800a396 <_dtoa_r+0x386>
 800a362:	4bbb      	ldr	r3, [pc, #748]	; (800a650 <_dtoa_r+0x640>)
 800a364:	ec51 0b18 	vmov	r0, r1, d8
 800a368:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a36c:	f7f6 fa6e 	bl	800084c <__aeabi_ddiv>
 800a370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a374:	f008 080f 	and.w	r8, r8, #15
 800a378:	2503      	movs	r5, #3
 800a37a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a650 <_dtoa_r+0x640>
 800a37e:	f1b8 0f00 	cmp.w	r8, #0
 800a382:	d10a      	bne.n	800a39a <_dtoa_r+0x38a>
 800a384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a388:	4632      	mov	r2, r6
 800a38a:	463b      	mov	r3, r7
 800a38c:	f7f6 fa5e 	bl	800084c <__aeabi_ddiv>
 800a390:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a394:	e02b      	b.n	800a3ee <_dtoa_r+0x3de>
 800a396:	2502      	movs	r5, #2
 800a398:	e7ef      	b.n	800a37a <_dtoa_r+0x36a>
 800a39a:	f018 0f01 	tst.w	r8, #1
 800a39e:	d008      	beq.n	800a3b2 <_dtoa_r+0x3a2>
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	4639      	mov	r1, r7
 800a3a4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a3a8:	f7f6 f926 	bl	80005f8 <__aeabi_dmul>
 800a3ac:	3501      	adds	r5, #1
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	460f      	mov	r7, r1
 800a3b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a3b6:	f109 0908 	add.w	r9, r9, #8
 800a3ba:	e7e0      	b.n	800a37e <_dtoa_r+0x36e>
 800a3bc:	f000 809f 	beq.w	800a4fe <_dtoa_r+0x4ee>
 800a3c0:	f1cb 0600 	rsb	r6, fp, #0
 800a3c4:	4ba1      	ldr	r3, [pc, #644]	; (800a64c <_dtoa_r+0x63c>)
 800a3c6:	4fa2      	ldr	r7, [pc, #648]	; (800a650 <_dtoa_r+0x640>)
 800a3c8:	f006 020f 	and.w	r2, r6, #15
 800a3cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d4:	ec51 0b18 	vmov	r0, r1, d8
 800a3d8:	f7f6 f90e 	bl	80005f8 <__aeabi_dmul>
 800a3dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3e0:	1136      	asrs	r6, r6, #4
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	2502      	movs	r5, #2
 800a3e6:	2e00      	cmp	r6, #0
 800a3e8:	d17e      	bne.n	800a4e8 <_dtoa_r+0x4d8>
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1d0      	bne.n	800a390 <_dtoa_r+0x380>
 800a3ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3f0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f000 8084 	beq.w	800a502 <_dtoa_r+0x4f2>
 800a3fa:	4b96      	ldr	r3, [pc, #600]	; (800a654 <_dtoa_r+0x644>)
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	4640      	mov	r0, r8
 800a400:	4649      	mov	r1, r9
 800a402:	f7f6 fb6b 	bl	8000adc <__aeabi_dcmplt>
 800a406:	2800      	cmp	r0, #0
 800a408:	d07b      	beq.n	800a502 <_dtoa_r+0x4f2>
 800a40a:	9b04      	ldr	r3, [sp, #16]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d078      	beq.n	800a502 <_dtoa_r+0x4f2>
 800a410:	9b01      	ldr	r3, [sp, #4]
 800a412:	2b00      	cmp	r3, #0
 800a414:	dd39      	ble.n	800a48a <_dtoa_r+0x47a>
 800a416:	4b90      	ldr	r3, [pc, #576]	; (800a658 <_dtoa_r+0x648>)
 800a418:	2200      	movs	r2, #0
 800a41a:	4640      	mov	r0, r8
 800a41c:	4649      	mov	r1, r9
 800a41e:	f7f6 f8eb 	bl	80005f8 <__aeabi_dmul>
 800a422:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a426:	9e01      	ldr	r6, [sp, #4]
 800a428:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a42c:	3501      	adds	r5, #1
 800a42e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a432:	4628      	mov	r0, r5
 800a434:	f7f6 f876 	bl	8000524 <__aeabi_i2d>
 800a438:	4642      	mov	r2, r8
 800a43a:	464b      	mov	r3, r9
 800a43c:	f7f6 f8dc 	bl	80005f8 <__aeabi_dmul>
 800a440:	4b86      	ldr	r3, [pc, #536]	; (800a65c <_dtoa_r+0x64c>)
 800a442:	2200      	movs	r2, #0
 800a444:	f7f5 ff22 	bl	800028c <__adddf3>
 800a448:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a44c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a450:	9303      	str	r3, [sp, #12]
 800a452:	2e00      	cmp	r6, #0
 800a454:	d158      	bne.n	800a508 <_dtoa_r+0x4f8>
 800a456:	4b82      	ldr	r3, [pc, #520]	; (800a660 <_dtoa_r+0x650>)
 800a458:	2200      	movs	r2, #0
 800a45a:	4640      	mov	r0, r8
 800a45c:	4649      	mov	r1, r9
 800a45e:	f7f5 ff13 	bl	8000288 <__aeabi_dsub>
 800a462:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a466:	4680      	mov	r8, r0
 800a468:	4689      	mov	r9, r1
 800a46a:	f7f6 fb55 	bl	8000b18 <__aeabi_dcmpgt>
 800a46e:	2800      	cmp	r0, #0
 800a470:	f040 8296 	bne.w	800a9a0 <_dtoa_r+0x990>
 800a474:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a478:	4640      	mov	r0, r8
 800a47a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a47e:	4649      	mov	r1, r9
 800a480:	f7f6 fb2c 	bl	8000adc <__aeabi_dcmplt>
 800a484:	2800      	cmp	r0, #0
 800a486:	f040 8289 	bne.w	800a99c <_dtoa_r+0x98c>
 800a48a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a48e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a490:	2b00      	cmp	r3, #0
 800a492:	f2c0 814e 	blt.w	800a732 <_dtoa_r+0x722>
 800a496:	f1bb 0f0e 	cmp.w	fp, #14
 800a49a:	f300 814a 	bgt.w	800a732 <_dtoa_r+0x722>
 800a49e:	4b6b      	ldr	r3, [pc, #428]	; (800a64c <_dtoa_r+0x63c>)
 800a4a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a4a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f280 80dc 	bge.w	800a668 <_dtoa_r+0x658>
 800a4b0:	9b04      	ldr	r3, [sp, #16]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f300 80d8 	bgt.w	800a668 <_dtoa_r+0x658>
 800a4b8:	f040 826f 	bne.w	800a99a <_dtoa_r+0x98a>
 800a4bc:	4b68      	ldr	r3, [pc, #416]	; (800a660 <_dtoa_r+0x650>)
 800a4be:	2200      	movs	r2, #0
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	4649      	mov	r1, r9
 800a4c4:	f7f6 f898 	bl	80005f8 <__aeabi_dmul>
 800a4c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4cc:	f7f6 fb1a 	bl	8000b04 <__aeabi_dcmpge>
 800a4d0:	9e04      	ldr	r6, [sp, #16]
 800a4d2:	4637      	mov	r7, r6
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	f040 8245 	bne.w	800a964 <_dtoa_r+0x954>
 800a4da:	9d00      	ldr	r5, [sp, #0]
 800a4dc:	2331      	movs	r3, #49	; 0x31
 800a4de:	f805 3b01 	strb.w	r3, [r5], #1
 800a4e2:	f10b 0b01 	add.w	fp, fp, #1
 800a4e6:	e241      	b.n	800a96c <_dtoa_r+0x95c>
 800a4e8:	07f2      	lsls	r2, r6, #31
 800a4ea:	d505      	bpl.n	800a4f8 <_dtoa_r+0x4e8>
 800a4ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4f0:	f7f6 f882 	bl	80005f8 <__aeabi_dmul>
 800a4f4:	3501      	adds	r5, #1
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	1076      	asrs	r6, r6, #1
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	e773      	b.n	800a3e6 <_dtoa_r+0x3d6>
 800a4fe:	2502      	movs	r5, #2
 800a500:	e775      	b.n	800a3ee <_dtoa_r+0x3de>
 800a502:	9e04      	ldr	r6, [sp, #16]
 800a504:	465f      	mov	r7, fp
 800a506:	e792      	b.n	800a42e <_dtoa_r+0x41e>
 800a508:	9900      	ldr	r1, [sp, #0]
 800a50a:	4b50      	ldr	r3, [pc, #320]	; (800a64c <_dtoa_r+0x63c>)
 800a50c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a510:	4431      	add	r1, r6
 800a512:	9102      	str	r1, [sp, #8]
 800a514:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a516:	eeb0 9a47 	vmov.f32	s18, s14
 800a51a:	eef0 9a67 	vmov.f32	s19, s15
 800a51e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a522:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a526:	2900      	cmp	r1, #0
 800a528:	d044      	beq.n	800a5b4 <_dtoa_r+0x5a4>
 800a52a:	494e      	ldr	r1, [pc, #312]	; (800a664 <_dtoa_r+0x654>)
 800a52c:	2000      	movs	r0, #0
 800a52e:	f7f6 f98d 	bl	800084c <__aeabi_ddiv>
 800a532:	ec53 2b19 	vmov	r2, r3, d9
 800a536:	f7f5 fea7 	bl	8000288 <__aeabi_dsub>
 800a53a:	9d00      	ldr	r5, [sp, #0]
 800a53c:	ec41 0b19 	vmov	d9, r0, r1
 800a540:	4649      	mov	r1, r9
 800a542:	4640      	mov	r0, r8
 800a544:	f7f6 fb08 	bl	8000b58 <__aeabi_d2iz>
 800a548:	4606      	mov	r6, r0
 800a54a:	f7f5 ffeb 	bl	8000524 <__aeabi_i2d>
 800a54e:	4602      	mov	r2, r0
 800a550:	460b      	mov	r3, r1
 800a552:	4640      	mov	r0, r8
 800a554:	4649      	mov	r1, r9
 800a556:	f7f5 fe97 	bl	8000288 <__aeabi_dsub>
 800a55a:	3630      	adds	r6, #48	; 0x30
 800a55c:	f805 6b01 	strb.w	r6, [r5], #1
 800a560:	ec53 2b19 	vmov	r2, r3, d9
 800a564:	4680      	mov	r8, r0
 800a566:	4689      	mov	r9, r1
 800a568:	f7f6 fab8 	bl	8000adc <__aeabi_dcmplt>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d164      	bne.n	800a63a <_dtoa_r+0x62a>
 800a570:	4642      	mov	r2, r8
 800a572:	464b      	mov	r3, r9
 800a574:	4937      	ldr	r1, [pc, #220]	; (800a654 <_dtoa_r+0x644>)
 800a576:	2000      	movs	r0, #0
 800a578:	f7f5 fe86 	bl	8000288 <__aeabi_dsub>
 800a57c:	ec53 2b19 	vmov	r2, r3, d9
 800a580:	f7f6 faac 	bl	8000adc <__aeabi_dcmplt>
 800a584:	2800      	cmp	r0, #0
 800a586:	f040 80b6 	bne.w	800a6f6 <_dtoa_r+0x6e6>
 800a58a:	9b02      	ldr	r3, [sp, #8]
 800a58c:	429d      	cmp	r5, r3
 800a58e:	f43f af7c 	beq.w	800a48a <_dtoa_r+0x47a>
 800a592:	4b31      	ldr	r3, [pc, #196]	; (800a658 <_dtoa_r+0x648>)
 800a594:	ec51 0b19 	vmov	r0, r1, d9
 800a598:	2200      	movs	r2, #0
 800a59a:	f7f6 f82d 	bl	80005f8 <__aeabi_dmul>
 800a59e:	4b2e      	ldr	r3, [pc, #184]	; (800a658 <_dtoa_r+0x648>)
 800a5a0:	ec41 0b19 	vmov	d9, r0, r1
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	4640      	mov	r0, r8
 800a5a8:	4649      	mov	r1, r9
 800a5aa:	f7f6 f825 	bl	80005f8 <__aeabi_dmul>
 800a5ae:	4680      	mov	r8, r0
 800a5b0:	4689      	mov	r9, r1
 800a5b2:	e7c5      	b.n	800a540 <_dtoa_r+0x530>
 800a5b4:	ec51 0b17 	vmov	r0, r1, d7
 800a5b8:	f7f6 f81e 	bl	80005f8 <__aeabi_dmul>
 800a5bc:	9b02      	ldr	r3, [sp, #8]
 800a5be:	9d00      	ldr	r5, [sp, #0]
 800a5c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5c2:	ec41 0b19 	vmov	d9, r0, r1
 800a5c6:	4649      	mov	r1, r9
 800a5c8:	4640      	mov	r0, r8
 800a5ca:	f7f6 fac5 	bl	8000b58 <__aeabi_d2iz>
 800a5ce:	4606      	mov	r6, r0
 800a5d0:	f7f5 ffa8 	bl	8000524 <__aeabi_i2d>
 800a5d4:	3630      	adds	r6, #48	; 0x30
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4640      	mov	r0, r8
 800a5dc:	4649      	mov	r1, r9
 800a5de:	f7f5 fe53 	bl	8000288 <__aeabi_dsub>
 800a5e2:	f805 6b01 	strb.w	r6, [r5], #1
 800a5e6:	9b02      	ldr	r3, [sp, #8]
 800a5e8:	429d      	cmp	r5, r3
 800a5ea:	4680      	mov	r8, r0
 800a5ec:	4689      	mov	r9, r1
 800a5ee:	f04f 0200 	mov.w	r2, #0
 800a5f2:	d124      	bne.n	800a63e <_dtoa_r+0x62e>
 800a5f4:	4b1b      	ldr	r3, [pc, #108]	; (800a664 <_dtoa_r+0x654>)
 800a5f6:	ec51 0b19 	vmov	r0, r1, d9
 800a5fa:	f7f5 fe47 	bl	800028c <__adddf3>
 800a5fe:	4602      	mov	r2, r0
 800a600:	460b      	mov	r3, r1
 800a602:	4640      	mov	r0, r8
 800a604:	4649      	mov	r1, r9
 800a606:	f7f6 fa87 	bl	8000b18 <__aeabi_dcmpgt>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	d173      	bne.n	800a6f6 <_dtoa_r+0x6e6>
 800a60e:	ec53 2b19 	vmov	r2, r3, d9
 800a612:	4914      	ldr	r1, [pc, #80]	; (800a664 <_dtoa_r+0x654>)
 800a614:	2000      	movs	r0, #0
 800a616:	f7f5 fe37 	bl	8000288 <__aeabi_dsub>
 800a61a:	4602      	mov	r2, r0
 800a61c:	460b      	mov	r3, r1
 800a61e:	4640      	mov	r0, r8
 800a620:	4649      	mov	r1, r9
 800a622:	f7f6 fa5b 	bl	8000adc <__aeabi_dcmplt>
 800a626:	2800      	cmp	r0, #0
 800a628:	f43f af2f 	beq.w	800a48a <_dtoa_r+0x47a>
 800a62c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a62e:	1e6b      	subs	r3, r5, #1
 800a630:	930f      	str	r3, [sp, #60]	; 0x3c
 800a632:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a636:	2b30      	cmp	r3, #48	; 0x30
 800a638:	d0f8      	beq.n	800a62c <_dtoa_r+0x61c>
 800a63a:	46bb      	mov	fp, r7
 800a63c:	e04a      	b.n	800a6d4 <_dtoa_r+0x6c4>
 800a63e:	4b06      	ldr	r3, [pc, #24]	; (800a658 <_dtoa_r+0x648>)
 800a640:	f7f5 ffda 	bl	80005f8 <__aeabi_dmul>
 800a644:	4680      	mov	r8, r0
 800a646:	4689      	mov	r9, r1
 800a648:	e7bd      	b.n	800a5c6 <_dtoa_r+0x5b6>
 800a64a:	bf00      	nop
 800a64c:	0800c510 	.word	0x0800c510
 800a650:	0800c4e8 	.word	0x0800c4e8
 800a654:	3ff00000 	.word	0x3ff00000
 800a658:	40240000 	.word	0x40240000
 800a65c:	401c0000 	.word	0x401c0000
 800a660:	40140000 	.word	0x40140000
 800a664:	3fe00000 	.word	0x3fe00000
 800a668:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a66c:	9d00      	ldr	r5, [sp, #0]
 800a66e:	4642      	mov	r2, r8
 800a670:	464b      	mov	r3, r9
 800a672:	4630      	mov	r0, r6
 800a674:	4639      	mov	r1, r7
 800a676:	f7f6 f8e9 	bl	800084c <__aeabi_ddiv>
 800a67a:	f7f6 fa6d 	bl	8000b58 <__aeabi_d2iz>
 800a67e:	9001      	str	r0, [sp, #4]
 800a680:	f7f5 ff50 	bl	8000524 <__aeabi_i2d>
 800a684:	4642      	mov	r2, r8
 800a686:	464b      	mov	r3, r9
 800a688:	f7f5 ffb6 	bl	80005f8 <__aeabi_dmul>
 800a68c:	4602      	mov	r2, r0
 800a68e:	460b      	mov	r3, r1
 800a690:	4630      	mov	r0, r6
 800a692:	4639      	mov	r1, r7
 800a694:	f7f5 fdf8 	bl	8000288 <__aeabi_dsub>
 800a698:	9e01      	ldr	r6, [sp, #4]
 800a69a:	9f04      	ldr	r7, [sp, #16]
 800a69c:	3630      	adds	r6, #48	; 0x30
 800a69e:	f805 6b01 	strb.w	r6, [r5], #1
 800a6a2:	9e00      	ldr	r6, [sp, #0]
 800a6a4:	1bae      	subs	r6, r5, r6
 800a6a6:	42b7      	cmp	r7, r6
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	d134      	bne.n	800a718 <_dtoa_r+0x708>
 800a6ae:	f7f5 fded 	bl	800028c <__adddf3>
 800a6b2:	4642      	mov	r2, r8
 800a6b4:	464b      	mov	r3, r9
 800a6b6:	4606      	mov	r6, r0
 800a6b8:	460f      	mov	r7, r1
 800a6ba:	f7f6 fa2d 	bl	8000b18 <__aeabi_dcmpgt>
 800a6be:	b9c8      	cbnz	r0, 800a6f4 <_dtoa_r+0x6e4>
 800a6c0:	4642      	mov	r2, r8
 800a6c2:	464b      	mov	r3, r9
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	4639      	mov	r1, r7
 800a6c8:	f7f6 f9fe 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6cc:	b110      	cbz	r0, 800a6d4 <_dtoa_r+0x6c4>
 800a6ce:	9b01      	ldr	r3, [sp, #4]
 800a6d0:	07db      	lsls	r3, r3, #31
 800a6d2:	d40f      	bmi.n	800a6f4 <_dtoa_r+0x6e4>
 800a6d4:	4651      	mov	r1, sl
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	f000 fb18 	bl	800ad0c <_Bfree>
 800a6dc:	2300      	movs	r3, #0
 800a6de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6e0:	702b      	strb	r3, [r5, #0]
 800a6e2:	f10b 0301 	add.w	r3, fp, #1
 800a6e6:	6013      	str	r3, [r2, #0]
 800a6e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f43f ace2 	beq.w	800a0b4 <_dtoa_r+0xa4>
 800a6f0:	601d      	str	r5, [r3, #0]
 800a6f2:	e4df      	b.n	800a0b4 <_dtoa_r+0xa4>
 800a6f4:	465f      	mov	r7, fp
 800a6f6:	462b      	mov	r3, r5
 800a6f8:	461d      	mov	r5, r3
 800a6fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6fe:	2a39      	cmp	r2, #57	; 0x39
 800a700:	d106      	bne.n	800a710 <_dtoa_r+0x700>
 800a702:	9a00      	ldr	r2, [sp, #0]
 800a704:	429a      	cmp	r2, r3
 800a706:	d1f7      	bne.n	800a6f8 <_dtoa_r+0x6e8>
 800a708:	9900      	ldr	r1, [sp, #0]
 800a70a:	2230      	movs	r2, #48	; 0x30
 800a70c:	3701      	adds	r7, #1
 800a70e:	700a      	strb	r2, [r1, #0]
 800a710:	781a      	ldrb	r2, [r3, #0]
 800a712:	3201      	adds	r2, #1
 800a714:	701a      	strb	r2, [r3, #0]
 800a716:	e790      	b.n	800a63a <_dtoa_r+0x62a>
 800a718:	4ba3      	ldr	r3, [pc, #652]	; (800a9a8 <_dtoa_r+0x998>)
 800a71a:	2200      	movs	r2, #0
 800a71c:	f7f5 ff6c 	bl	80005f8 <__aeabi_dmul>
 800a720:	2200      	movs	r2, #0
 800a722:	2300      	movs	r3, #0
 800a724:	4606      	mov	r6, r0
 800a726:	460f      	mov	r7, r1
 800a728:	f7f6 f9ce 	bl	8000ac8 <__aeabi_dcmpeq>
 800a72c:	2800      	cmp	r0, #0
 800a72e:	d09e      	beq.n	800a66e <_dtoa_r+0x65e>
 800a730:	e7d0      	b.n	800a6d4 <_dtoa_r+0x6c4>
 800a732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a734:	2a00      	cmp	r2, #0
 800a736:	f000 80ca 	beq.w	800a8ce <_dtoa_r+0x8be>
 800a73a:	9a07      	ldr	r2, [sp, #28]
 800a73c:	2a01      	cmp	r2, #1
 800a73e:	f300 80ad 	bgt.w	800a89c <_dtoa_r+0x88c>
 800a742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a744:	2a00      	cmp	r2, #0
 800a746:	f000 80a5 	beq.w	800a894 <_dtoa_r+0x884>
 800a74a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a74e:	9e08      	ldr	r6, [sp, #32]
 800a750:	9d05      	ldr	r5, [sp, #20]
 800a752:	9a05      	ldr	r2, [sp, #20]
 800a754:	441a      	add	r2, r3
 800a756:	9205      	str	r2, [sp, #20]
 800a758:	9a06      	ldr	r2, [sp, #24]
 800a75a:	2101      	movs	r1, #1
 800a75c:	441a      	add	r2, r3
 800a75e:	4620      	mov	r0, r4
 800a760:	9206      	str	r2, [sp, #24]
 800a762:	f000 fb89 	bl	800ae78 <__i2b>
 800a766:	4607      	mov	r7, r0
 800a768:	b165      	cbz	r5, 800a784 <_dtoa_r+0x774>
 800a76a:	9b06      	ldr	r3, [sp, #24]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	dd09      	ble.n	800a784 <_dtoa_r+0x774>
 800a770:	42ab      	cmp	r3, r5
 800a772:	9a05      	ldr	r2, [sp, #20]
 800a774:	bfa8      	it	ge
 800a776:	462b      	movge	r3, r5
 800a778:	1ad2      	subs	r2, r2, r3
 800a77a:	9205      	str	r2, [sp, #20]
 800a77c:	9a06      	ldr	r2, [sp, #24]
 800a77e:	1aed      	subs	r5, r5, r3
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	9306      	str	r3, [sp, #24]
 800a784:	9b08      	ldr	r3, [sp, #32]
 800a786:	b1f3      	cbz	r3, 800a7c6 <_dtoa_r+0x7b6>
 800a788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f000 80a3 	beq.w	800a8d6 <_dtoa_r+0x8c6>
 800a790:	2e00      	cmp	r6, #0
 800a792:	dd10      	ble.n	800a7b6 <_dtoa_r+0x7a6>
 800a794:	4639      	mov	r1, r7
 800a796:	4632      	mov	r2, r6
 800a798:	4620      	mov	r0, r4
 800a79a:	f000 fc2d 	bl	800aff8 <__pow5mult>
 800a79e:	4652      	mov	r2, sl
 800a7a0:	4601      	mov	r1, r0
 800a7a2:	4607      	mov	r7, r0
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f000 fb7d 	bl	800aea4 <__multiply>
 800a7aa:	4651      	mov	r1, sl
 800a7ac:	4680      	mov	r8, r0
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 faac 	bl	800ad0c <_Bfree>
 800a7b4:	46c2      	mov	sl, r8
 800a7b6:	9b08      	ldr	r3, [sp, #32]
 800a7b8:	1b9a      	subs	r2, r3, r6
 800a7ba:	d004      	beq.n	800a7c6 <_dtoa_r+0x7b6>
 800a7bc:	4651      	mov	r1, sl
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f000 fc1a 	bl	800aff8 <__pow5mult>
 800a7c4:	4682      	mov	sl, r0
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f000 fb55 	bl	800ae78 <__i2b>
 800a7ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	4606      	mov	r6, r0
 800a7d4:	f340 8081 	ble.w	800a8da <_dtoa_r+0x8ca>
 800a7d8:	461a      	mov	r2, r3
 800a7da:	4601      	mov	r1, r0
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f000 fc0b 	bl	800aff8 <__pow5mult>
 800a7e2:	9b07      	ldr	r3, [sp, #28]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	dd7a      	ble.n	800a8e0 <_dtoa_r+0x8d0>
 800a7ea:	f04f 0800 	mov.w	r8, #0
 800a7ee:	6933      	ldr	r3, [r6, #16]
 800a7f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a7f4:	6918      	ldr	r0, [r3, #16]
 800a7f6:	f000 faf1 	bl	800addc <__hi0bits>
 800a7fa:	f1c0 0020 	rsb	r0, r0, #32
 800a7fe:	9b06      	ldr	r3, [sp, #24]
 800a800:	4418      	add	r0, r3
 800a802:	f010 001f 	ands.w	r0, r0, #31
 800a806:	f000 8094 	beq.w	800a932 <_dtoa_r+0x922>
 800a80a:	f1c0 0320 	rsb	r3, r0, #32
 800a80e:	2b04      	cmp	r3, #4
 800a810:	f340 8085 	ble.w	800a91e <_dtoa_r+0x90e>
 800a814:	9b05      	ldr	r3, [sp, #20]
 800a816:	f1c0 001c 	rsb	r0, r0, #28
 800a81a:	4403      	add	r3, r0
 800a81c:	9305      	str	r3, [sp, #20]
 800a81e:	9b06      	ldr	r3, [sp, #24]
 800a820:	4403      	add	r3, r0
 800a822:	4405      	add	r5, r0
 800a824:	9306      	str	r3, [sp, #24]
 800a826:	9b05      	ldr	r3, [sp, #20]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	dd05      	ble.n	800a838 <_dtoa_r+0x828>
 800a82c:	4651      	mov	r1, sl
 800a82e:	461a      	mov	r2, r3
 800a830:	4620      	mov	r0, r4
 800a832:	f000 fc3b 	bl	800b0ac <__lshift>
 800a836:	4682      	mov	sl, r0
 800a838:	9b06      	ldr	r3, [sp, #24]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	dd05      	ble.n	800a84a <_dtoa_r+0x83a>
 800a83e:	4631      	mov	r1, r6
 800a840:	461a      	mov	r2, r3
 800a842:	4620      	mov	r0, r4
 800a844:	f000 fc32 	bl	800b0ac <__lshift>
 800a848:	4606      	mov	r6, r0
 800a84a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d072      	beq.n	800a936 <_dtoa_r+0x926>
 800a850:	4631      	mov	r1, r6
 800a852:	4650      	mov	r0, sl
 800a854:	f000 fc96 	bl	800b184 <__mcmp>
 800a858:	2800      	cmp	r0, #0
 800a85a:	da6c      	bge.n	800a936 <_dtoa_r+0x926>
 800a85c:	2300      	movs	r3, #0
 800a85e:	4651      	mov	r1, sl
 800a860:	220a      	movs	r2, #10
 800a862:	4620      	mov	r0, r4
 800a864:	f000 fa74 	bl	800ad50 <__multadd>
 800a868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a86a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a86e:	4682      	mov	sl, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 81b0 	beq.w	800abd6 <_dtoa_r+0xbc6>
 800a876:	2300      	movs	r3, #0
 800a878:	4639      	mov	r1, r7
 800a87a:	220a      	movs	r2, #10
 800a87c:	4620      	mov	r0, r4
 800a87e:	f000 fa67 	bl	800ad50 <__multadd>
 800a882:	9b01      	ldr	r3, [sp, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	4607      	mov	r7, r0
 800a888:	f300 8096 	bgt.w	800a9b8 <_dtoa_r+0x9a8>
 800a88c:	9b07      	ldr	r3, [sp, #28]
 800a88e:	2b02      	cmp	r3, #2
 800a890:	dc59      	bgt.n	800a946 <_dtoa_r+0x936>
 800a892:	e091      	b.n	800a9b8 <_dtoa_r+0x9a8>
 800a894:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a896:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a89a:	e758      	b.n	800a74e <_dtoa_r+0x73e>
 800a89c:	9b04      	ldr	r3, [sp, #16]
 800a89e:	1e5e      	subs	r6, r3, #1
 800a8a0:	9b08      	ldr	r3, [sp, #32]
 800a8a2:	42b3      	cmp	r3, r6
 800a8a4:	bfbf      	itttt	lt
 800a8a6:	9b08      	ldrlt	r3, [sp, #32]
 800a8a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a8aa:	9608      	strlt	r6, [sp, #32]
 800a8ac:	1af3      	sublt	r3, r6, r3
 800a8ae:	bfb4      	ite	lt
 800a8b0:	18d2      	addlt	r2, r2, r3
 800a8b2:	1b9e      	subge	r6, r3, r6
 800a8b4:	9b04      	ldr	r3, [sp, #16]
 800a8b6:	bfbc      	itt	lt
 800a8b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a8ba:	2600      	movlt	r6, #0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	bfb7      	itett	lt
 800a8c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a8c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a8c8:	1a9d      	sublt	r5, r3, r2
 800a8ca:	2300      	movlt	r3, #0
 800a8cc:	e741      	b.n	800a752 <_dtoa_r+0x742>
 800a8ce:	9e08      	ldr	r6, [sp, #32]
 800a8d0:	9d05      	ldr	r5, [sp, #20]
 800a8d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a8d4:	e748      	b.n	800a768 <_dtoa_r+0x758>
 800a8d6:	9a08      	ldr	r2, [sp, #32]
 800a8d8:	e770      	b.n	800a7bc <_dtoa_r+0x7ac>
 800a8da:	9b07      	ldr	r3, [sp, #28]
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	dc19      	bgt.n	800a914 <_dtoa_r+0x904>
 800a8e0:	9b02      	ldr	r3, [sp, #8]
 800a8e2:	b9bb      	cbnz	r3, 800a914 <_dtoa_r+0x904>
 800a8e4:	9b03      	ldr	r3, [sp, #12]
 800a8e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8ea:	b99b      	cbnz	r3, 800a914 <_dtoa_r+0x904>
 800a8ec:	9b03      	ldr	r3, [sp, #12]
 800a8ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8f2:	0d1b      	lsrs	r3, r3, #20
 800a8f4:	051b      	lsls	r3, r3, #20
 800a8f6:	b183      	cbz	r3, 800a91a <_dtoa_r+0x90a>
 800a8f8:	9b05      	ldr	r3, [sp, #20]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	9305      	str	r3, [sp, #20]
 800a8fe:	9b06      	ldr	r3, [sp, #24]
 800a900:	3301      	adds	r3, #1
 800a902:	9306      	str	r3, [sp, #24]
 800a904:	f04f 0801 	mov.w	r8, #1
 800a908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f47f af6f 	bne.w	800a7ee <_dtoa_r+0x7de>
 800a910:	2001      	movs	r0, #1
 800a912:	e774      	b.n	800a7fe <_dtoa_r+0x7ee>
 800a914:	f04f 0800 	mov.w	r8, #0
 800a918:	e7f6      	b.n	800a908 <_dtoa_r+0x8f8>
 800a91a:	4698      	mov	r8, r3
 800a91c:	e7f4      	b.n	800a908 <_dtoa_r+0x8f8>
 800a91e:	d082      	beq.n	800a826 <_dtoa_r+0x816>
 800a920:	9a05      	ldr	r2, [sp, #20]
 800a922:	331c      	adds	r3, #28
 800a924:	441a      	add	r2, r3
 800a926:	9205      	str	r2, [sp, #20]
 800a928:	9a06      	ldr	r2, [sp, #24]
 800a92a:	441a      	add	r2, r3
 800a92c:	441d      	add	r5, r3
 800a92e:	9206      	str	r2, [sp, #24]
 800a930:	e779      	b.n	800a826 <_dtoa_r+0x816>
 800a932:	4603      	mov	r3, r0
 800a934:	e7f4      	b.n	800a920 <_dtoa_r+0x910>
 800a936:	9b04      	ldr	r3, [sp, #16]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	dc37      	bgt.n	800a9ac <_dtoa_r+0x99c>
 800a93c:	9b07      	ldr	r3, [sp, #28]
 800a93e:	2b02      	cmp	r3, #2
 800a940:	dd34      	ble.n	800a9ac <_dtoa_r+0x99c>
 800a942:	9b04      	ldr	r3, [sp, #16]
 800a944:	9301      	str	r3, [sp, #4]
 800a946:	9b01      	ldr	r3, [sp, #4]
 800a948:	b963      	cbnz	r3, 800a964 <_dtoa_r+0x954>
 800a94a:	4631      	mov	r1, r6
 800a94c:	2205      	movs	r2, #5
 800a94e:	4620      	mov	r0, r4
 800a950:	f000 f9fe 	bl	800ad50 <__multadd>
 800a954:	4601      	mov	r1, r0
 800a956:	4606      	mov	r6, r0
 800a958:	4650      	mov	r0, sl
 800a95a:	f000 fc13 	bl	800b184 <__mcmp>
 800a95e:	2800      	cmp	r0, #0
 800a960:	f73f adbb 	bgt.w	800a4da <_dtoa_r+0x4ca>
 800a964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a966:	9d00      	ldr	r5, [sp, #0]
 800a968:	ea6f 0b03 	mvn.w	fp, r3
 800a96c:	f04f 0800 	mov.w	r8, #0
 800a970:	4631      	mov	r1, r6
 800a972:	4620      	mov	r0, r4
 800a974:	f000 f9ca 	bl	800ad0c <_Bfree>
 800a978:	2f00      	cmp	r7, #0
 800a97a:	f43f aeab 	beq.w	800a6d4 <_dtoa_r+0x6c4>
 800a97e:	f1b8 0f00 	cmp.w	r8, #0
 800a982:	d005      	beq.n	800a990 <_dtoa_r+0x980>
 800a984:	45b8      	cmp	r8, r7
 800a986:	d003      	beq.n	800a990 <_dtoa_r+0x980>
 800a988:	4641      	mov	r1, r8
 800a98a:	4620      	mov	r0, r4
 800a98c:	f000 f9be 	bl	800ad0c <_Bfree>
 800a990:	4639      	mov	r1, r7
 800a992:	4620      	mov	r0, r4
 800a994:	f000 f9ba 	bl	800ad0c <_Bfree>
 800a998:	e69c      	b.n	800a6d4 <_dtoa_r+0x6c4>
 800a99a:	2600      	movs	r6, #0
 800a99c:	4637      	mov	r7, r6
 800a99e:	e7e1      	b.n	800a964 <_dtoa_r+0x954>
 800a9a0:	46bb      	mov	fp, r7
 800a9a2:	4637      	mov	r7, r6
 800a9a4:	e599      	b.n	800a4da <_dtoa_r+0x4ca>
 800a9a6:	bf00      	nop
 800a9a8:	40240000 	.word	0x40240000
 800a9ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f000 80c8 	beq.w	800ab44 <_dtoa_r+0xb34>
 800a9b4:	9b04      	ldr	r3, [sp, #16]
 800a9b6:	9301      	str	r3, [sp, #4]
 800a9b8:	2d00      	cmp	r5, #0
 800a9ba:	dd05      	ble.n	800a9c8 <_dtoa_r+0x9b8>
 800a9bc:	4639      	mov	r1, r7
 800a9be:	462a      	mov	r2, r5
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f000 fb73 	bl	800b0ac <__lshift>
 800a9c6:	4607      	mov	r7, r0
 800a9c8:	f1b8 0f00 	cmp.w	r8, #0
 800a9cc:	d05b      	beq.n	800aa86 <_dtoa_r+0xa76>
 800a9ce:	6879      	ldr	r1, [r7, #4]
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f000 f95b 	bl	800ac8c <_Balloc>
 800a9d6:	4605      	mov	r5, r0
 800a9d8:	b928      	cbnz	r0, 800a9e6 <_dtoa_r+0x9d6>
 800a9da:	4b83      	ldr	r3, [pc, #524]	; (800abe8 <_dtoa_r+0xbd8>)
 800a9dc:	4602      	mov	r2, r0
 800a9de:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a9e2:	f7ff bb2e 	b.w	800a042 <_dtoa_r+0x32>
 800a9e6:	693a      	ldr	r2, [r7, #16]
 800a9e8:	3202      	adds	r2, #2
 800a9ea:	0092      	lsls	r2, r2, #2
 800a9ec:	f107 010c 	add.w	r1, r7, #12
 800a9f0:	300c      	adds	r0, #12
 800a9f2:	f7ff fa77 	bl	8009ee4 <memcpy>
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 fb56 	bl	800b0ac <__lshift>
 800aa00:	9b00      	ldr	r3, [sp, #0]
 800aa02:	3301      	adds	r3, #1
 800aa04:	9304      	str	r3, [sp, #16]
 800aa06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	9308      	str	r3, [sp, #32]
 800aa0e:	9b02      	ldr	r3, [sp, #8]
 800aa10:	f003 0301 	and.w	r3, r3, #1
 800aa14:	46b8      	mov	r8, r7
 800aa16:	9306      	str	r3, [sp, #24]
 800aa18:	4607      	mov	r7, r0
 800aa1a:	9b04      	ldr	r3, [sp, #16]
 800aa1c:	4631      	mov	r1, r6
 800aa1e:	3b01      	subs	r3, #1
 800aa20:	4650      	mov	r0, sl
 800aa22:	9301      	str	r3, [sp, #4]
 800aa24:	f7ff fa6c 	bl	8009f00 <quorem>
 800aa28:	4641      	mov	r1, r8
 800aa2a:	9002      	str	r0, [sp, #8]
 800aa2c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aa30:	4650      	mov	r0, sl
 800aa32:	f000 fba7 	bl	800b184 <__mcmp>
 800aa36:	463a      	mov	r2, r7
 800aa38:	9005      	str	r0, [sp, #20]
 800aa3a:	4631      	mov	r1, r6
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f000 fbbd 	bl	800b1bc <__mdiff>
 800aa42:	68c2      	ldr	r2, [r0, #12]
 800aa44:	4605      	mov	r5, r0
 800aa46:	bb02      	cbnz	r2, 800aa8a <_dtoa_r+0xa7a>
 800aa48:	4601      	mov	r1, r0
 800aa4a:	4650      	mov	r0, sl
 800aa4c:	f000 fb9a 	bl	800b184 <__mcmp>
 800aa50:	4602      	mov	r2, r0
 800aa52:	4629      	mov	r1, r5
 800aa54:	4620      	mov	r0, r4
 800aa56:	9209      	str	r2, [sp, #36]	; 0x24
 800aa58:	f000 f958 	bl	800ad0c <_Bfree>
 800aa5c:	9b07      	ldr	r3, [sp, #28]
 800aa5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa60:	9d04      	ldr	r5, [sp, #16]
 800aa62:	ea43 0102 	orr.w	r1, r3, r2
 800aa66:	9b06      	ldr	r3, [sp, #24]
 800aa68:	4319      	orrs	r1, r3
 800aa6a:	d110      	bne.n	800aa8e <_dtoa_r+0xa7e>
 800aa6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aa70:	d029      	beq.n	800aac6 <_dtoa_r+0xab6>
 800aa72:	9b05      	ldr	r3, [sp, #20]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	dd02      	ble.n	800aa7e <_dtoa_r+0xa6e>
 800aa78:	9b02      	ldr	r3, [sp, #8]
 800aa7a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800aa7e:	9b01      	ldr	r3, [sp, #4]
 800aa80:	f883 9000 	strb.w	r9, [r3]
 800aa84:	e774      	b.n	800a970 <_dtoa_r+0x960>
 800aa86:	4638      	mov	r0, r7
 800aa88:	e7ba      	b.n	800aa00 <_dtoa_r+0x9f0>
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	e7e1      	b.n	800aa52 <_dtoa_r+0xa42>
 800aa8e:	9b05      	ldr	r3, [sp, #20]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	db04      	blt.n	800aa9e <_dtoa_r+0xa8e>
 800aa94:	9907      	ldr	r1, [sp, #28]
 800aa96:	430b      	orrs	r3, r1
 800aa98:	9906      	ldr	r1, [sp, #24]
 800aa9a:	430b      	orrs	r3, r1
 800aa9c:	d120      	bne.n	800aae0 <_dtoa_r+0xad0>
 800aa9e:	2a00      	cmp	r2, #0
 800aaa0:	dded      	ble.n	800aa7e <_dtoa_r+0xa6e>
 800aaa2:	4651      	mov	r1, sl
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f000 fb00 	bl	800b0ac <__lshift>
 800aaac:	4631      	mov	r1, r6
 800aaae:	4682      	mov	sl, r0
 800aab0:	f000 fb68 	bl	800b184 <__mcmp>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	dc03      	bgt.n	800aac0 <_dtoa_r+0xab0>
 800aab8:	d1e1      	bne.n	800aa7e <_dtoa_r+0xa6e>
 800aaba:	f019 0f01 	tst.w	r9, #1
 800aabe:	d0de      	beq.n	800aa7e <_dtoa_r+0xa6e>
 800aac0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aac4:	d1d8      	bne.n	800aa78 <_dtoa_r+0xa68>
 800aac6:	9a01      	ldr	r2, [sp, #4]
 800aac8:	2339      	movs	r3, #57	; 0x39
 800aaca:	7013      	strb	r3, [r2, #0]
 800aacc:	462b      	mov	r3, r5
 800aace:	461d      	mov	r5, r3
 800aad0:	3b01      	subs	r3, #1
 800aad2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aad6:	2a39      	cmp	r2, #57	; 0x39
 800aad8:	d06c      	beq.n	800abb4 <_dtoa_r+0xba4>
 800aada:	3201      	adds	r2, #1
 800aadc:	701a      	strb	r2, [r3, #0]
 800aade:	e747      	b.n	800a970 <_dtoa_r+0x960>
 800aae0:	2a00      	cmp	r2, #0
 800aae2:	dd07      	ble.n	800aaf4 <_dtoa_r+0xae4>
 800aae4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aae8:	d0ed      	beq.n	800aac6 <_dtoa_r+0xab6>
 800aaea:	9a01      	ldr	r2, [sp, #4]
 800aaec:	f109 0301 	add.w	r3, r9, #1
 800aaf0:	7013      	strb	r3, [r2, #0]
 800aaf2:	e73d      	b.n	800a970 <_dtoa_r+0x960>
 800aaf4:	9b04      	ldr	r3, [sp, #16]
 800aaf6:	9a08      	ldr	r2, [sp, #32]
 800aaf8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d043      	beq.n	800ab88 <_dtoa_r+0xb78>
 800ab00:	4651      	mov	r1, sl
 800ab02:	2300      	movs	r3, #0
 800ab04:	220a      	movs	r2, #10
 800ab06:	4620      	mov	r0, r4
 800ab08:	f000 f922 	bl	800ad50 <__multadd>
 800ab0c:	45b8      	cmp	r8, r7
 800ab0e:	4682      	mov	sl, r0
 800ab10:	f04f 0300 	mov.w	r3, #0
 800ab14:	f04f 020a 	mov.w	r2, #10
 800ab18:	4641      	mov	r1, r8
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	d107      	bne.n	800ab2e <_dtoa_r+0xb1e>
 800ab1e:	f000 f917 	bl	800ad50 <__multadd>
 800ab22:	4680      	mov	r8, r0
 800ab24:	4607      	mov	r7, r0
 800ab26:	9b04      	ldr	r3, [sp, #16]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	9304      	str	r3, [sp, #16]
 800ab2c:	e775      	b.n	800aa1a <_dtoa_r+0xa0a>
 800ab2e:	f000 f90f 	bl	800ad50 <__multadd>
 800ab32:	4639      	mov	r1, r7
 800ab34:	4680      	mov	r8, r0
 800ab36:	2300      	movs	r3, #0
 800ab38:	220a      	movs	r2, #10
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f000 f908 	bl	800ad50 <__multadd>
 800ab40:	4607      	mov	r7, r0
 800ab42:	e7f0      	b.n	800ab26 <_dtoa_r+0xb16>
 800ab44:	9b04      	ldr	r3, [sp, #16]
 800ab46:	9301      	str	r3, [sp, #4]
 800ab48:	9d00      	ldr	r5, [sp, #0]
 800ab4a:	4631      	mov	r1, r6
 800ab4c:	4650      	mov	r0, sl
 800ab4e:	f7ff f9d7 	bl	8009f00 <quorem>
 800ab52:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ab56:	9b00      	ldr	r3, [sp, #0]
 800ab58:	f805 9b01 	strb.w	r9, [r5], #1
 800ab5c:	1aea      	subs	r2, r5, r3
 800ab5e:	9b01      	ldr	r3, [sp, #4]
 800ab60:	4293      	cmp	r3, r2
 800ab62:	dd07      	ble.n	800ab74 <_dtoa_r+0xb64>
 800ab64:	4651      	mov	r1, sl
 800ab66:	2300      	movs	r3, #0
 800ab68:	220a      	movs	r2, #10
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f000 f8f0 	bl	800ad50 <__multadd>
 800ab70:	4682      	mov	sl, r0
 800ab72:	e7ea      	b.n	800ab4a <_dtoa_r+0xb3a>
 800ab74:	9b01      	ldr	r3, [sp, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	bfc8      	it	gt
 800ab7a:	461d      	movgt	r5, r3
 800ab7c:	9b00      	ldr	r3, [sp, #0]
 800ab7e:	bfd8      	it	le
 800ab80:	2501      	movle	r5, #1
 800ab82:	441d      	add	r5, r3
 800ab84:	f04f 0800 	mov.w	r8, #0
 800ab88:	4651      	mov	r1, sl
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	f000 fa8d 	bl	800b0ac <__lshift>
 800ab92:	4631      	mov	r1, r6
 800ab94:	4682      	mov	sl, r0
 800ab96:	f000 faf5 	bl	800b184 <__mcmp>
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	dc96      	bgt.n	800aacc <_dtoa_r+0xabc>
 800ab9e:	d102      	bne.n	800aba6 <_dtoa_r+0xb96>
 800aba0:	f019 0f01 	tst.w	r9, #1
 800aba4:	d192      	bne.n	800aacc <_dtoa_r+0xabc>
 800aba6:	462b      	mov	r3, r5
 800aba8:	461d      	mov	r5, r3
 800abaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abae:	2a30      	cmp	r2, #48	; 0x30
 800abb0:	d0fa      	beq.n	800aba8 <_dtoa_r+0xb98>
 800abb2:	e6dd      	b.n	800a970 <_dtoa_r+0x960>
 800abb4:	9a00      	ldr	r2, [sp, #0]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d189      	bne.n	800aace <_dtoa_r+0xabe>
 800abba:	f10b 0b01 	add.w	fp, fp, #1
 800abbe:	2331      	movs	r3, #49	; 0x31
 800abc0:	e796      	b.n	800aaf0 <_dtoa_r+0xae0>
 800abc2:	4b0a      	ldr	r3, [pc, #40]	; (800abec <_dtoa_r+0xbdc>)
 800abc4:	f7ff ba99 	b.w	800a0fa <_dtoa_r+0xea>
 800abc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f47f aa6d 	bne.w	800a0aa <_dtoa_r+0x9a>
 800abd0:	4b07      	ldr	r3, [pc, #28]	; (800abf0 <_dtoa_r+0xbe0>)
 800abd2:	f7ff ba92 	b.w	800a0fa <_dtoa_r+0xea>
 800abd6:	9b01      	ldr	r3, [sp, #4]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	dcb5      	bgt.n	800ab48 <_dtoa_r+0xb38>
 800abdc:	9b07      	ldr	r3, [sp, #28]
 800abde:	2b02      	cmp	r3, #2
 800abe0:	f73f aeb1 	bgt.w	800a946 <_dtoa_r+0x936>
 800abe4:	e7b0      	b.n	800ab48 <_dtoa_r+0xb38>
 800abe6:	bf00      	nop
 800abe8:	0800c47c 	.word	0x0800c47c
 800abec:	0800c3dc 	.word	0x0800c3dc
 800abf0:	0800c400 	.word	0x0800c400

0800abf4 <_free_r>:
 800abf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abf6:	2900      	cmp	r1, #0
 800abf8:	d044      	beq.n	800ac84 <_free_r+0x90>
 800abfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abfe:	9001      	str	r0, [sp, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f1a1 0404 	sub.w	r4, r1, #4
 800ac06:	bfb8      	it	lt
 800ac08:	18e4      	addlt	r4, r4, r3
 800ac0a:	f7fe fae5 	bl	80091d8 <__malloc_lock>
 800ac0e:	4a1e      	ldr	r2, [pc, #120]	; (800ac88 <_free_r+0x94>)
 800ac10:	9801      	ldr	r0, [sp, #4]
 800ac12:	6813      	ldr	r3, [r2, #0]
 800ac14:	b933      	cbnz	r3, 800ac24 <_free_r+0x30>
 800ac16:	6063      	str	r3, [r4, #4]
 800ac18:	6014      	str	r4, [r2, #0]
 800ac1a:	b003      	add	sp, #12
 800ac1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac20:	f7fe bae0 	b.w	80091e4 <__malloc_unlock>
 800ac24:	42a3      	cmp	r3, r4
 800ac26:	d908      	bls.n	800ac3a <_free_r+0x46>
 800ac28:	6825      	ldr	r5, [r4, #0]
 800ac2a:	1961      	adds	r1, r4, r5
 800ac2c:	428b      	cmp	r3, r1
 800ac2e:	bf01      	itttt	eq
 800ac30:	6819      	ldreq	r1, [r3, #0]
 800ac32:	685b      	ldreq	r3, [r3, #4]
 800ac34:	1949      	addeq	r1, r1, r5
 800ac36:	6021      	streq	r1, [r4, #0]
 800ac38:	e7ed      	b.n	800ac16 <_free_r+0x22>
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	b10b      	cbz	r3, 800ac44 <_free_r+0x50>
 800ac40:	42a3      	cmp	r3, r4
 800ac42:	d9fa      	bls.n	800ac3a <_free_r+0x46>
 800ac44:	6811      	ldr	r1, [r2, #0]
 800ac46:	1855      	adds	r5, r2, r1
 800ac48:	42a5      	cmp	r5, r4
 800ac4a:	d10b      	bne.n	800ac64 <_free_r+0x70>
 800ac4c:	6824      	ldr	r4, [r4, #0]
 800ac4e:	4421      	add	r1, r4
 800ac50:	1854      	adds	r4, r2, r1
 800ac52:	42a3      	cmp	r3, r4
 800ac54:	6011      	str	r1, [r2, #0]
 800ac56:	d1e0      	bne.n	800ac1a <_free_r+0x26>
 800ac58:	681c      	ldr	r4, [r3, #0]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	6053      	str	r3, [r2, #4]
 800ac5e:	440c      	add	r4, r1
 800ac60:	6014      	str	r4, [r2, #0]
 800ac62:	e7da      	b.n	800ac1a <_free_r+0x26>
 800ac64:	d902      	bls.n	800ac6c <_free_r+0x78>
 800ac66:	230c      	movs	r3, #12
 800ac68:	6003      	str	r3, [r0, #0]
 800ac6a:	e7d6      	b.n	800ac1a <_free_r+0x26>
 800ac6c:	6825      	ldr	r5, [r4, #0]
 800ac6e:	1961      	adds	r1, r4, r5
 800ac70:	428b      	cmp	r3, r1
 800ac72:	bf04      	itt	eq
 800ac74:	6819      	ldreq	r1, [r3, #0]
 800ac76:	685b      	ldreq	r3, [r3, #4]
 800ac78:	6063      	str	r3, [r4, #4]
 800ac7a:	bf04      	itt	eq
 800ac7c:	1949      	addeq	r1, r1, r5
 800ac7e:	6021      	streq	r1, [r4, #0]
 800ac80:	6054      	str	r4, [r2, #4]
 800ac82:	e7ca      	b.n	800ac1a <_free_r+0x26>
 800ac84:	b003      	add	sp, #12
 800ac86:	bd30      	pop	{r4, r5, pc}
 800ac88:	20001904 	.word	0x20001904

0800ac8c <_Balloc>:
 800ac8c:	b570      	push	{r4, r5, r6, lr}
 800ac8e:	69c6      	ldr	r6, [r0, #28]
 800ac90:	4604      	mov	r4, r0
 800ac92:	460d      	mov	r5, r1
 800ac94:	b976      	cbnz	r6, 800acb4 <_Balloc+0x28>
 800ac96:	2010      	movs	r0, #16
 800ac98:	f7fe f9ee 	bl	8009078 <malloc>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	61e0      	str	r0, [r4, #28]
 800aca0:	b920      	cbnz	r0, 800acac <_Balloc+0x20>
 800aca2:	4b18      	ldr	r3, [pc, #96]	; (800ad04 <_Balloc+0x78>)
 800aca4:	4818      	ldr	r0, [pc, #96]	; (800ad08 <_Balloc+0x7c>)
 800aca6:	216b      	movs	r1, #107	; 0x6b
 800aca8:	f000 fd72 	bl	800b790 <__assert_func>
 800acac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acb0:	6006      	str	r6, [r0, #0]
 800acb2:	60c6      	str	r6, [r0, #12]
 800acb4:	69e6      	ldr	r6, [r4, #28]
 800acb6:	68f3      	ldr	r3, [r6, #12]
 800acb8:	b183      	cbz	r3, 800acdc <_Balloc+0x50>
 800acba:	69e3      	ldr	r3, [r4, #28]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acc2:	b9b8      	cbnz	r0, 800acf4 <_Balloc+0x68>
 800acc4:	2101      	movs	r1, #1
 800acc6:	fa01 f605 	lsl.w	r6, r1, r5
 800acca:	1d72      	adds	r2, r6, #5
 800accc:	0092      	lsls	r2, r2, #2
 800acce:	4620      	mov	r0, r4
 800acd0:	f000 fd7c 	bl	800b7cc <_calloc_r>
 800acd4:	b160      	cbz	r0, 800acf0 <_Balloc+0x64>
 800acd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acda:	e00e      	b.n	800acfa <_Balloc+0x6e>
 800acdc:	2221      	movs	r2, #33	; 0x21
 800acde:	2104      	movs	r1, #4
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 fd73 	bl	800b7cc <_calloc_r>
 800ace6:	69e3      	ldr	r3, [r4, #28]
 800ace8:	60f0      	str	r0, [r6, #12]
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d1e4      	bne.n	800acba <_Balloc+0x2e>
 800acf0:	2000      	movs	r0, #0
 800acf2:	bd70      	pop	{r4, r5, r6, pc}
 800acf4:	6802      	ldr	r2, [r0, #0]
 800acf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acfa:	2300      	movs	r3, #0
 800acfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad00:	e7f7      	b.n	800acf2 <_Balloc+0x66>
 800ad02:	bf00      	nop
 800ad04:	0800c40d 	.word	0x0800c40d
 800ad08:	0800c48d 	.word	0x0800c48d

0800ad0c <_Bfree>:
 800ad0c:	b570      	push	{r4, r5, r6, lr}
 800ad0e:	69c6      	ldr	r6, [r0, #28]
 800ad10:	4605      	mov	r5, r0
 800ad12:	460c      	mov	r4, r1
 800ad14:	b976      	cbnz	r6, 800ad34 <_Bfree+0x28>
 800ad16:	2010      	movs	r0, #16
 800ad18:	f7fe f9ae 	bl	8009078 <malloc>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	61e8      	str	r0, [r5, #28]
 800ad20:	b920      	cbnz	r0, 800ad2c <_Bfree+0x20>
 800ad22:	4b09      	ldr	r3, [pc, #36]	; (800ad48 <_Bfree+0x3c>)
 800ad24:	4809      	ldr	r0, [pc, #36]	; (800ad4c <_Bfree+0x40>)
 800ad26:	218f      	movs	r1, #143	; 0x8f
 800ad28:	f000 fd32 	bl	800b790 <__assert_func>
 800ad2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad30:	6006      	str	r6, [r0, #0]
 800ad32:	60c6      	str	r6, [r0, #12]
 800ad34:	b13c      	cbz	r4, 800ad46 <_Bfree+0x3a>
 800ad36:	69eb      	ldr	r3, [r5, #28]
 800ad38:	6862      	ldr	r2, [r4, #4]
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad40:	6021      	str	r1, [r4, #0]
 800ad42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad46:	bd70      	pop	{r4, r5, r6, pc}
 800ad48:	0800c40d 	.word	0x0800c40d
 800ad4c:	0800c48d 	.word	0x0800c48d

0800ad50 <__multadd>:
 800ad50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad54:	690d      	ldr	r5, [r1, #16]
 800ad56:	4607      	mov	r7, r0
 800ad58:	460c      	mov	r4, r1
 800ad5a:	461e      	mov	r6, r3
 800ad5c:	f101 0c14 	add.w	ip, r1, #20
 800ad60:	2000      	movs	r0, #0
 800ad62:	f8dc 3000 	ldr.w	r3, [ip]
 800ad66:	b299      	uxth	r1, r3
 800ad68:	fb02 6101 	mla	r1, r2, r1, r6
 800ad6c:	0c1e      	lsrs	r6, r3, #16
 800ad6e:	0c0b      	lsrs	r3, r1, #16
 800ad70:	fb02 3306 	mla	r3, r2, r6, r3
 800ad74:	b289      	uxth	r1, r1
 800ad76:	3001      	adds	r0, #1
 800ad78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad7c:	4285      	cmp	r5, r0
 800ad7e:	f84c 1b04 	str.w	r1, [ip], #4
 800ad82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad86:	dcec      	bgt.n	800ad62 <__multadd+0x12>
 800ad88:	b30e      	cbz	r6, 800adce <__multadd+0x7e>
 800ad8a:	68a3      	ldr	r3, [r4, #8]
 800ad8c:	42ab      	cmp	r3, r5
 800ad8e:	dc19      	bgt.n	800adc4 <__multadd+0x74>
 800ad90:	6861      	ldr	r1, [r4, #4]
 800ad92:	4638      	mov	r0, r7
 800ad94:	3101      	adds	r1, #1
 800ad96:	f7ff ff79 	bl	800ac8c <_Balloc>
 800ad9a:	4680      	mov	r8, r0
 800ad9c:	b928      	cbnz	r0, 800adaa <__multadd+0x5a>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	4b0c      	ldr	r3, [pc, #48]	; (800add4 <__multadd+0x84>)
 800ada2:	480d      	ldr	r0, [pc, #52]	; (800add8 <__multadd+0x88>)
 800ada4:	21ba      	movs	r1, #186	; 0xba
 800ada6:	f000 fcf3 	bl	800b790 <__assert_func>
 800adaa:	6922      	ldr	r2, [r4, #16]
 800adac:	3202      	adds	r2, #2
 800adae:	f104 010c 	add.w	r1, r4, #12
 800adb2:	0092      	lsls	r2, r2, #2
 800adb4:	300c      	adds	r0, #12
 800adb6:	f7ff f895 	bl	8009ee4 <memcpy>
 800adba:	4621      	mov	r1, r4
 800adbc:	4638      	mov	r0, r7
 800adbe:	f7ff ffa5 	bl	800ad0c <_Bfree>
 800adc2:	4644      	mov	r4, r8
 800adc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800adc8:	3501      	adds	r5, #1
 800adca:	615e      	str	r6, [r3, #20]
 800adcc:	6125      	str	r5, [r4, #16]
 800adce:	4620      	mov	r0, r4
 800add0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add4:	0800c47c 	.word	0x0800c47c
 800add8:	0800c48d 	.word	0x0800c48d

0800addc <__hi0bits>:
 800addc:	0c03      	lsrs	r3, r0, #16
 800adde:	041b      	lsls	r3, r3, #16
 800ade0:	b9d3      	cbnz	r3, 800ae18 <__hi0bits+0x3c>
 800ade2:	0400      	lsls	r0, r0, #16
 800ade4:	2310      	movs	r3, #16
 800ade6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800adea:	bf04      	itt	eq
 800adec:	0200      	lsleq	r0, r0, #8
 800adee:	3308      	addeq	r3, #8
 800adf0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800adf4:	bf04      	itt	eq
 800adf6:	0100      	lsleq	r0, r0, #4
 800adf8:	3304      	addeq	r3, #4
 800adfa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800adfe:	bf04      	itt	eq
 800ae00:	0080      	lsleq	r0, r0, #2
 800ae02:	3302      	addeq	r3, #2
 800ae04:	2800      	cmp	r0, #0
 800ae06:	db05      	blt.n	800ae14 <__hi0bits+0x38>
 800ae08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ae0c:	f103 0301 	add.w	r3, r3, #1
 800ae10:	bf08      	it	eq
 800ae12:	2320      	moveq	r3, #32
 800ae14:	4618      	mov	r0, r3
 800ae16:	4770      	bx	lr
 800ae18:	2300      	movs	r3, #0
 800ae1a:	e7e4      	b.n	800ade6 <__hi0bits+0xa>

0800ae1c <__lo0bits>:
 800ae1c:	6803      	ldr	r3, [r0, #0]
 800ae1e:	f013 0207 	ands.w	r2, r3, #7
 800ae22:	d00c      	beq.n	800ae3e <__lo0bits+0x22>
 800ae24:	07d9      	lsls	r1, r3, #31
 800ae26:	d422      	bmi.n	800ae6e <__lo0bits+0x52>
 800ae28:	079a      	lsls	r2, r3, #30
 800ae2a:	bf49      	itett	mi
 800ae2c:	085b      	lsrmi	r3, r3, #1
 800ae2e:	089b      	lsrpl	r3, r3, #2
 800ae30:	6003      	strmi	r3, [r0, #0]
 800ae32:	2201      	movmi	r2, #1
 800ae34:	bf5c      	itt	pl
 800ae36:	6003      	strpl	r3, [r0, #0]
 800ae38:	2202      	movpl	r2, #2
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	4770      	bx	lr
 800ae3e:	b299      	uxth	r1, r3
 800ae40:	b909      	cbnz	r1, 800ae46 <__lo0bits+0x2a>
 800ae42:	0c1b      	lsrs	r3, r3, #16
 800ae44:	2210      	movs	r2, #16
 800ae46:	b2d9      	uxtb	r1, r3
 800ae48:	b909      	cbnz	r1, 800ae4e <__lo0bits+0x32>
 800ae4a:	3208      	adds	r2, #8
 800ae4c:	0a1b      	lsrs	r3, r3, #8
 800ae4e:	0719      	lsls	r1, r3, #28
 800ae50:	bf04      	itt	eq
 800ae52:	091b      	lsreq	r3, r3, #4
 800ae54:	3204      	addeq	r2, #4
 800ae56:	0799      	lsls	r1, r3, #30
 800ae58:	bf04      	itt	eq
 800ae5a:	089b      	lsreq	r3, r3, #2
 800ae5c:	3202      	addeq	r2, #2
 800ae5e:	07d9      	lsls	r1, r3, #31
 800ae60:	d403      	bmi.n	800ae6a <__lo0bits+0x4e>
 800ae62:	085b      	lsrs	r3, r3, #1
 800ae64:	f102 0201 	add.w	r2, r2, #1
 800ae68:	d003      	beq.n	800ae72 <__lo0bits+0x56>
 800ae6a:	6003      	str	r3, [r0, #0]
 800ae6c:	e7e5      	b.n	800ae3a <__lo0bits+0x1e>
 800ae6e:	2200      	movs	r2, #0
 800ae70:	e7e3      	b.n	800ae3a <__lo0bits+0x1e>
 800ae72:	2220      	movs	r2, #32
 800ae74:	e7e1      	b.n	800ae3a <__lo0bits+0x1e>
	...

0800ae78 <__i2b>:
 800ae78:	b510      	push	{r4, lr}
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	2101      	movs	r1, #1
 800ae7e:	f7ff ff05 	bl	800ac8c <_Balloc>
 800ae82:	4602      	mov	r2, r0
 800ae84:	b928      	cbnz	r0, 800ae92 <__i2b+0x1a>
 800ae86:	4b05      	ldr	r3, [pc, #20]	; (800ae9c <__i2b+0x24>)
 800ae88:	4805      	ldr	r0, [pc, #20]	; (800aea0 <__i2b+0x28>)
 800ae8a:	f240 1145 	movw	r1, #325	; 0x145
 800ae8e:	f000 fc7f 	bl	800b790 <__assert_func>
 800ae92:	2301      	movs	r3, #1
 800ae94:	6144      	str	r4, [r0, #20]
 800ae96:	6103      	str	r3, [r0, #16]
 800ae98:	bd10      	pop	{r4, pc}
 800ae9a:	bf00      	nop
 800ae9c:	0800c47c 	.word	0x0800c47c
 800aea0:	0800c48d 	.word	0x0800c48d

0800aea4 <__multiply>:
 800aea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea8:	4691      	mov	r9, r2
 800aeaa:	690a      	ldr	r2, [r1, #16]
 800aeac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	bfb8      	it	lt
 800aeb4:	460b      	movlt	r3, r1
 800aeb6:	460c      	mov	r4, r1
 800aeb8:	bfbc      	itt	lt
 800aeba:	464c      	movlt	r4, r9
 800aebc:	4699      	movlt	r9, r3
 800aebe:	6927      	ldr	r7, [r4, #16]
 800aec0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aec4:	68a3      	ldr	r3, [r4, #8]
 800aec6:	6861      	ldr	r1, [r4, #4]
 800aec8:	eb07 060a 	add.w	r6, r7, sl
 800aecc:	42b3      	cmp	r3, r6
 800aece:	b085      	sub	sp, #20
 800aed0:	bfb8      	it	lt
 800aed2:	3101      	addlt	r1, #1
 800aed4:	f7ff feda 	bl	800ac8c <_Balloc>
 800aed8:	b930      	cbnz	r0, 800aee8 <__multiply+0x44>
 800aeda:	4602      	mov	r2, r0
 800aedc:	4b44      	ldr	r3, [pc, #272]	; (800aff0 <__multiply+0x14c>)
 800aede:	4845      	ldr	r0, [pc, #276]	; (800aff4 <__multiply+0x150>)
 800aee0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aee4:	f000 fc54 	bl	800b790 <__assert_func>
 800aee8:	f100 0514 	add.w	r5, r0, #20
 800aeec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aef0:	462b      	mov	r3, r5
 800aef2:	2200      	movs	r2, #0
 800aef4:	4543      	cmp	r3, r8
 800aef6:	d321      	bcc.n	800af3c <__multiply+0x98>
 800aef8:	f104 0314 	add.w	r3, r4, #20
 800aefc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800af00:	f109 0314 	add.w	r3, r9, #20
 800af04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800af08:	9202      	str	r2, [sp, #8]
 800af0a:	1b3a      	subs	r2, r7, r4
 800af0c:	3a15      	subs	r2, #21
 800af0e:	f022 0203 	bic.w	r2, r2, #3
 800af12:	3204      	adds	r2, #4
 800af14:	f104 0115 	add.w	r1, r4, #21
 800af18:	428f      	cmp	r7, r1
 800af1a:	bf38      	it	cc
 800af1c:	2204      	movcc	r2, #4
 800af1e:	9201      	str	r2, [sp, #4]
 800af20:	9a02      	ldr	r2, [sp, #8]
 800af22:	9303      	str	r3, [sp, #12]
 800af24:	429a      	cmp	r2, r3
 800af26:	d80c      	bhi.n	800af42 <__multiply+0x9e>
 800af28:	2e00      	cmp	r6, #0
 800af2a:	dd03      	ble.n	800af34 <__multiply+0x90>
 800af2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af30:	2b00      	cmp	r3, #0
 800af32:	d05b      	beq.n	800afec <__multiply+0x148>
 800af34:	6106      	str	r6, [r0, #16]
 800af36:	b005      	add	sp, #20
 800af38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af3c:	f843 2b04 	str.w	r2, [r3], #4
 800af40:	e7d8      	b.n	800aef4 <__multiply+0x50>
 800af42:	f8b3 a000 	ldrh.w	sl, [r3]
 800af46:	f1ba 0f00 	cmp.w	sl, #0
 800af4a:	d024      	beq.n	800af96 <__multiply+0xf2>
 800af4c:	f104 0e14 	add.w	lr, r4, #20
 800af50:	46a9      	mov	r9, r5
 800af52:	f04f 0c00 	mov.w	ip, #0
 800af56:	f85e 2b04 	ldr.w	r2, [lr], #4
 800af5a:	f8d9 1000 	ldr.w	r1, [r9]
 800af5e:	fa1f fb82 	uxth.w	fp, r2
 800af62:	b289      	uxth	r1, r1
 800af64:	fb0a 110b 	mla	r1, sl, fp, r1
 800af68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800af6c:	f8d9 2000 	ldr.w	r2, [r9]
 800af70:	4461      	add	r1, ip
 800af72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af76:	fb0a c20b 	mla	r2, sl, fp, ip
 800af7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af7e:	b289      	uxth	r1, r1
 800af80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af84:	4577      	cmp	r7, lr
 800af86:	f849 1b04 	str.w	r1, [r9], #4
 800af8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af8e:	d8e2      	bhi.n	800af56 <__multiply+0xb2>
 800af90:	9a01      	ldr	r2, [sp, #4]
 800af92:	f845 c002 	str.w	ip, [r5, r2]
 800af96:	9a03      	ldr	r2, [sp, #12]
 800af98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af9c:	3304      	adds	r3, #4
 800af9e:	f1b9 0f00 	cmp.w	r9, #0
 800afa2:	d021      	beq.n	800afe8 <__multiply+0x144>
 800afa4:	6829      	ldr	r1, [r5, #0]
 800afa6:	f104 0c14 	add.w	ip, r4, #20
 800afaa:	46ae      	mov	lr, r5
 800afac:	f04f 0a00 	mov.w	sl, #0
 800afb0:	f8bc b000 	ldrh.w	fp, [ip]
 800afb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800afb8:	fb09 220b 	mla	r2, r9, fp, r2
 800afbc:	4452      	add	r2, sl
 800afbe:	b289      	uxth	r1, r1
 800afc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800afc4:	f84e 1b04 	str.w	r1, [lr], #4
 800afc8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800afcc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800afd0:	f8be 1000 	ldrh.w	r1, [lr]
 800afd4:	fb09 110a 	mla	r1, r9, sl, r1
 800afd8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800afdc:	4567      	cmp	r7, ip
 800afde:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800afe2:	d8e5      	bhi.n	800afb0 <__multiply+0x10c>
 800afe4:	9a01      	ldr	r2, [sp, #4]
 800afe6:	50a9      	str	r1, [r5, r2]
 800afe8:	3504      	adds	r5, #4
 800afea:	e799      	b.n	800af20 <__multiply+0x7c>
 800afec:	3e01      	subs	r6, #1
 800afee:	e79b      	b.n	800af28 <__multiply+0x84>
 800aff0:	0800c47c 	.word	0x0800c47c
 800aff4:	0800c48d 	.word	0x0800c48d

0800aff8 <__pow5mult>:
 800aff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800affc:	4615      	mov	r5, r2
 800affe:	f012 0203 	ands.w	r2, r2, #3
 800b002:	4606      	mov	r6, r0
 800b004:	460f      	mov	r7, r1
 800b006:	d007      	beq.n	800b018 <__pow5mult+0x20>
 800b008:	4c25      	ldr	r4, [pc, #148]	; (800b0a0 <__pow5mult+0xa8>)
 800b00a:	3a01      	subs	r2, #1
 800b00c:	2300      	movs	r3, #0
 800b00e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b012:	f7ff fe9d 	bl	800ad50 <__multadd>
 800b016:	4607      	mov	r7, r0
 800b018:	10ad      	asrs	r5, r5, #2
 800b01a:	d03d      	beq.n	800b098 <__pow5mult+0xa0>
 800b01c:	69f4      	ldr	r4, [r6, #28]
 800b01e:	b97c      	cbnz	r4, 800b040 <__pow5mult+0x48>
 800b020:	2010      	movs	r0, #16
 800b022:	f7fe f829 	bl	8009078 <malloc>
 800b026:	4602      	mov	r2, r0
 800b028:	61f0      	str	r0, [r6, #28]
 800b02a:	b928      	cbnz	r0, 800b038 <__pow5mult+0x40>
 800b02c:	4b1d      	ldr	r3, [pc, #116]	; (800b0a4 <__pow5mult+0xac>)
 800b02e:	481e      	ldr	r0, [pc, #120]	; (800b0a8 <__pow5mult+0xb0>)
 800b030:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b034:	f000 fbac 	bl	800b790 <__assert_func>
 800b038:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b03c:	6004      	str	r4, [r0, #0]
 800b03e:	60c4      	str	r4, [r0, #12]
 800b040:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b044:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b048:	b94c      	cbnz	r4, 800b05e <__pow5mult+0x66>
 800b04a:	f240 2171 	movw	r1, #625	; 0x271
 800b04e:	4630      	mov	r0, r6
 800b050:	f7ff ff12 	bl	800ae78 <__i2b>
 800b054:	2300      	movs	r3, #0
 800b056:	f8c8 0008 	str.w	r0, [r8, #8]
 800b05a:	4604      	mov	r4, r0
 800b05c:	6003      	str	r3, [r0, #0]
 800b05e:	f04f 0900 	mov.w	r9, #0
 800b062:	07eb      	lsls	r3, r5, #31
 800b064:	d50a      	bpl.n	800b07c <__pow5mult+0x84>
 800b066:	4639      	mov	r1, r7
 800b068:	4622      	mov	r2, r4
 800b06a:	4630      	mov	r0, r6
 800b06c:	f7ff ff1a 	bl	800aea4 <__multiply>
 800b070:	4639      	mov	r1, r7
 800b072:	4680      	mov	r8, r0
 800b074:	4630      	mov	r0, r6
 800b076:	f7ff fe49 	bl	800ad0c <_Bfree>
 800b07a:	4647      	mov	r7, r8
 800b07c:	106d      	asrs	r5, r5, #1
 800b07e:	d00b      	beq.n	800b098 <__pow5mult+0xa0>
 800b080:	6820      	ldr	r0, [r4, #0]
 800b082:	b938      	cbnz	r0, 800b094 <__pow5mult+0x9c>
 800b084:	4622      	mov	r2, r4
 800b086:	4621      	mov	r1, r4
 800b088:	4630      	mov	r0, r6
 800b08a:	f7ff ff0b 	bl	800aea4 <__multiply>
 800b08e:	6020      	str	r0, [r4, #0]
 800b090:	f8c0 9000 	str.w	r9, [r0]
 800b094:	4604      	mov	r4, r0
 800b096:	e7e4      	b.n	800b062 <__pow5mult+0x6a>
 800b098:	4638      	mov	r0, r7
 800b09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b09e:	bf00      	nop
 800b0a0:	0800c5d8 	.word	0x0800c5d8
 800b0a4:	0800c40d 	.word	0x0800c40d
 800b0a8:	0800c48d 	.word	0x0800c48d

0800b0ac <__lshift>:
 800b0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b0:	460c      	mov	r4, r1
 800b0b2:	6849      	ldr	r1, [r1, #4]
 800b0b4:	6923      	ldr	r3, [r4, #16]
 800b0b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0ba:	68a3      	ldr	r3, [r4, #8]
 800b0bc:	4607      	mov	r7, r0
 800b0be:	4691      	mov	r9, r2
 800b0c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0c4:	f108 0601 	add.w	r6, r8, #1
 800b0c8:	42b3      	cmp	r3, r6
 800b0ca:	db0b      	blt.n	800b0e4 <__lshift+0x38>
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	f7ff fddd 	bl	800ac8c <_Balloc>
 800b0d2:	4605      	mov	r5, r0
 800b0d4:	b948      	cbnz	r0, 800b0ea <__lshift+0x3e>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	4b28      	ldr	r3, [pc, #160]	; (800b17c <__lshift+0xd0>)
 800b0da:	4829      	ldr	r0, [pc, #164]	; (800b180 <__lshift+0xd4>)
 800b0dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b0e0:	f000 fb56 	bl	800b790 <__assert_func>
 800b0e4:	3101      	adds	r1, #1
 800b0e6:	005b      	lsls	r3, r3, #1
 800b0e8:	e7ee      	b.n	800b0c8 <__lshift+0x1c>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	f100 0114 	add.w	r1, r0, #20
 800b0f0:	f100 0210 	add.w	r2, r0, #16
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	4553      	cmp	r3, sl
 800b0f8:	db33      	blt.n	800b162 <__lshift+0xb6>
 800b0fa:	6920      	ldr	r0, [r4, #16]
 800b0fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b100:	f104 0314 	add.w	r3, r4, #20
 800b104:	f019 091f 	ands.w	r9, r9, #31
 800b108:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b10c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b110:	d02b      	beq.n	800b16a <__lshift+0xbe>
 800b112:	f1c9 0e20 	rsb	lr, r9, #32
 800b116:	468a      	mov	sl, r1
 800b118:	2200      	movs	r2, #0
 800b11a:	6818      	ldr	r0, [r3, #0]
 800b11c:	fa00 f009 	lsl.w	r0, r0, r9
 800b120:	4310      	orrs	r0, r2
 800b122:	f84a 0b04 	str.w	r0, [sl], #4
 800b126:	f853 2b04 	ldr.w	r2, [r3], #4
 800b12a:	459c      	cmp	ip, r3
 800b12c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b130:	d8f3      	bhi.n	800b11a <__lshift+0x6e>
 800b132:	ebac 0304 	sub.w	r3, ip, r4
 800b136:	3b15      	subs	r3, #21
 800b138:	f023 0303 	bic.w	r3, r3, #3
 800b13c:	3304      	adds	r3, #4
 800b13e:	f104 0015 	add.w	r0, r4, #21
 800b142:	4584      	cmp	ip, r0
 800b144:	bf38      	it	cc
 800b146:	2304      	movcc	r3, #4
 800b148:	50ca      	str	r2, [r1, r3]
 800b14a:	b10a      	cbz	r2, 800b150 <__lshift+0xa4>
 800b14c:	f108 0602 	add.w	r6, r8, #2
 800b150:	3e01      	subs	r6, #1
 800b152:	4638      	mov	r0, r7
 800b154:	612e      	str	r6, [r5, #16]
 800b156:	4621      	mov	r1, r4
 800b158:	f7ff fdd8 	bl	800ad0c <_Bfree>
 800b15c:	4628      	mov	r0, r5
 800b15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b162:	f842 0f04 	str.w	r0, [r2, #4]!
 800b166:	3301      	adds	r3, #1
 800b168:	e7c5      	b.n	800b0f6 <__lshift+0x4a>
 800b16a:	3904      	subs	r1, #4
 800b16c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b170:	f841 2f04 	str.w	r2, [r1, #4]!
 800b174:	459c      	cmp	ip, r3
 800b176:	d8f9      	bhi.n	800b16c <__lshift+0xc0>
 800b178:	e7ea      	b.n	800b150 <__lshift+0xa4>
 800b17a:	bf00      	nop
 800b17c:	0800c47c 	.word	0x0800c47c
 800b180:	0800c48d 	.word	0x0800c48d

0800b184 <__mcmp>:
 800b184:	b530      	push	{r4, r5, lr}
 800b186:	6902      	ldr	r2, [r0, #16]
 800b188:	690c      	ldr	r4, [r1, #16]
 800b18a:	1b12      	subs	r2, r2, r4
 800b18c:	d10e      	bne.n	800b1ac <__mcmp+0x28>
 800b18e:	f100 0314 	add.w	r3, r0, #20
 800b192:	3114      	adds	r1, #20
 800b194:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b198:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b19c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b1a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b1a4:	42a5      	cmp	r5, r4
 800b1a6:	d003      	beq.n	800b1b0 <__mcmp+0x2c>
 800b1a8:	d305      	bcc.n	800b1b6 <__mcmp+0x32>
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	4610      	mov	r0, r2
 800b1ae:	bd30      	pop	{r4, r5, pc}
 800b1b0:	4283      	cmp	r3, r0
 800b1b2:	d3f3      	bcc.n	800b19c <__mcmp+0x18>
 800b1b4:	e7fa      	b.n	800b1ac <__mcmp+0x28>
 800b1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ba:	e7f7      	b.n	800b1ac <__mcmp+0x28>

0800b1bc <__mdiff>:
 800b1bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	4606      	mov	r6, r0
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	4690      	mov	r8, r2
 800b1ca:	f7ff ffdb 	bl	800b184 <__mcmp>
 800b1ce:	1e05      	subs	r5, r0, #0
 800b1d0:	d110      	bne.n	800b1f4 <__mdiff+0x38>
 800b1d2:	4629      	mov	r1, r5
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	f7ff fd59 	bl	800ac8c <_Balloc>
 800b1da:	b930      	cbnz	r0, 800b1ea <__mdiff+0x2e>
 800b1dc:	4b3a      	ldr	r3, [pc, #232]	; (800b2c8 <__mdiff+0x10c>)
 800b1de:	4602      	mov	r2, r0
 800b1e0:	f240 2137 	movw	r1, #567	; 0x237
 800b1e4:	4839      	ldr	r0, [pc, #228]	; (800b2cc <__mdiff+0x110>)
 800b1e6:	f000 fad3 	bl	800b790 <__assert_func>
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b1f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f4:	bfa4      	itt	ge
 800b1f6:	4643      	movge	r3, r8
 800b1f8:	46a0      	movge	r8, r4
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b200:	bfa6      	itte	ge
 800b202:	461c      	movge	r4, r3
 800b204:	2500      	movge	r5, #0
 800b206:	2501      	movlt	r5, #1
 800b208:	f7ff fd40 	bl	800ac8c <_Balloc>
 800b20c:	b920      	cbnz	r0, 800b218 <__mdiff+0x5c>
 800b20e:	4b2e      	ldr	r3, [pc, #184]	; (800b2c8 <__mdiff+0x10c>)
 800b210:	4602      	mov	r2, r0
 800b212:	f240 2145 	movw	r1, #581	; 0x245
 800b216:	e7e5      	b.n	800b1e4 <__mdiff+0x28>
 800b218:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b21c:	6926      	ldr	r6, [r4, #16]
 800b21e:	60c5      	str	r5, [r0, #12]
 800b220:	f104 0914 	add.w	r9, r4, #20
 800b224:	f108 0514 	add.w	r5, r8, #20
 800b228:	f100 0e14 	add.w	lr, r0, #20
 800b22c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b230:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b234:	f108 0210 	add.w	r2, r8, #16
 800b238:	46f2      	mov	sl, lr
 800b23a:	2100      	movs	r1, #0
 800b23c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b240:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b244:	fa11 f88b 	uxtah	r8, r1, fp
 800b248:	b299      	uxth	r1, r3
 800b24a:	0c1b      	lsrs	r3, r3, #16
 800b24c:	eba8 0801 	sub.w	r8, r8, r1
 800b250:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b254:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b258:	fa1f f888 	uxth.w	r8, r8
 800b25c:	1419      	asrs	r1, r3, #16
 800b25e:	454e      	cmp	r6, r9
 800b260:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b264:	f84a 3b04 	str.w	r3, [sl], #4
 800b268:	d8e8      	bhi.n	800b23c <__mdiff+0x80>
 800b26a:	1b33      	subs	r3, r6, r4
 800b26c:	3b15      	subs	r3, #21
 800b26e:	f023 0303 	bic.w	r3, r3, #3
 800b272:	3304      	adds	r3, #4
 800b274:	3415      	adds	r4, #21
 800b276:	42a6      	cmp	r6, r4
 800b278:	bf38      	it	cc
 800b27a:	2304      	movcc	r3, #4
 800b27c:	441d      	add	r5, r3
 800b27e:	4473      	add	r3, lr
 800b280:	469e      	mov	lr, r3
 800b282:	462e      	mov	r6, r5
 800b284:	4566      	cmp	r6, ip
 800b286:	d30e      	bcc.n	800b2a6 <__mdiff+0xea>
 800b288:	f10c 0203 	add.w	r2, ip, #3
 800b28c:	1b52      	subs	r2, r2, r5
 800b28e:	f022 0203 	bic.w	r2, r2, #3
 800b292:	3d03      	subs	r5, #3
 800b294:	45ac      	cmp	ip, r5
 800b296:	bf38      	it	cc
 800b298:	2200      	movcc	r2, #0
 800b29a:	4413      	add	r3, r2
 800b29c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b2a0:	b17a      	cbz	r2, 800b2c2 <__mdiff+0x106>
 800b2a2:	6107      	str	r7, [r0, #16]
 800b2a4:	e7a4      	b.n	800b1f0 <__mdiff+0x34>
 800b2a6:	f856 8b04 	ldr.w	r8, [r6], #4
 800b2aa:	fa11 f288 	uxtah	r2, r1, r8
 800b2ae:	1414      	asrs	r4, r2, #16
 800b2b0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b2b4:	b292      	uxth	r2, r2
 800b2b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b2ba:	f84e 2b04 	str.w	r2, [lr], #4
 800b2be:	1421      	asrs	r1, r4, #16
 800b2c0:	e7e0      	b.n	800b284 <__mdiff+0xc8>
 800b2c2:	3f01      	subs	r7, #1
 800b2c4:	e7ea      	b.n	800b29c <__mdiff+0xe0>
 800b2c6:	bf00      	nop
 800b2c8:	0800c47c 	.word	0x0800c47c
 800b2cc:	0800c48d 	.word	0x0800c48d

0800b2d0 <__d2b>:
 800b2d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2d4:	460f      	mov	r7, r1
 800b2d6:	2101      	movs	r1, #1
 800b2d8:	ec59 8b10 	vmov	r8, r9, d0
 800b2dc:	4616      	mov	r6, r2
 800b2de:	f7ff fcd5 	bl	800ac8c <_Balloc>
 800b2e2:	4604      	mov	r4, r0
 800b2e4:	b930      	cbnz	r0, 800b2f4 <__d2b+0x24>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	4b24      	ldr	r3, [pc, #144]	; (800b37c <__d2b+0xac>)
 800b2ea:	4825      	ldr	r0, [pc, #148]	; (800b380 <__d2b+0xb0>)
 800b2ec:	f240 310f 	movw	r1, #783	; 0x30f
 800b2f0:	f000 fa4e 	bl	800b790 <__assert_func>
 800b2f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b2f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2fc:	bb2d      	cbnz	r5, 800b34a <__d2b+0x7a>
 800b2fe:	9301      	str	r3, [sp, #4]
 800b300:	f1b8 0300 	subs.w	r3, r8, #0
 800b304:	d026      	beq.n	800b354 <__d2b+0x84>
 800b306:	4668      	mov	r0, sp
 800b308:	9300      	str	r3, [sp, #0]
 800b30a:	f7ff fd87 	bl	800ae1c <__lo0bits>
 800b30e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b312:	b1e8      	cbz	r0, 800b350 <__d2b+0x80>
 800b314:	f1c0 0320 	rsb	r3, r0, #32
 800b318:	fa02 f303 	lsl.w	r3, r2, r3
 800b31c:	430b      	orrs	r3, r1
 800b31e:	40c2      	lsrs	r2, r0
 800b320:	6163      	str	r3, [r4, #20]
 800b322:	9201      	str	r2, [sp, #4]
 800b324:	9b01      	ldr	r3, [sp, #4]
 800b326:	61a3      	str	r3, [r4, #24]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	bf14      	ite	ne
 800b32c:	2202      	movne	r2, #2
 800b32e:	2201      	moveq	r2, #1
 800b330:	6122      	str	r2, [r4, #16]
 800b332:	b1bd      	cbz	r5, 800b364 <__d2b+0x94>
 800b334:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b338:	4405      	add	r5, r0
 800b33a:	603d      	str	r5, [r7, #0]
 800b33c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b340:	6030      	str	r0, [r6, #0]
 800b342:	4620      	mov	r0, r4
 800b344:	b003      	add	sp, #12
 800b346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b34a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b34e:	e7d6      	b.n	800b2fe <__d2b+0x2e>
 800b350:	6161      	str	r1, [r4, #20]
 800b352:	e7e7      	b.n	800b324 <__d2b+0x54>
 800b354:	a801      	add	r0, sp, #4
 800b356:	f7ff fd61 	bl	800ae1c <__lo0bits>
 800b35a:	9b01      	ldr	r3, [sp, #4]
 800b35c:	6163      	str	r3, [r4, #20]
 800b35e:	3020      	adds	r0, #32
 800b360:	2201      	movs	r2, #1
 800b362:	e7e5      	b.n	800b330 <__d2b+0x60>
 800b364:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b368:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b36c:	6038      	str	r0, [r7, #0]
 800b36e:	6918      	ldr	r0, [r3, #16]
 800b370:	f7ff fd34 	bl	800addc <__hi0bits>
 800b374:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b378:	e7e2      	b.n	800b340 <__d2b+0x70>
 800b37a:	bf00      	nop
 800b37c:	0800c47c 	.word	0x0800c47c
 800b380:	0800c48d 	.word	0x0800c48d

0800b384 <__ssputs_r>:
 800b384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b388:	688e      	ldr	r6, [r1, #8]
 800b38a:	461f      	mov	r7, r3
 800b38c:	42be      	cmp	r6, r7
 800b38e:	680b      	ldr	r3, [r1, #0]
 800b390:	4682      	mov	sl, r0
 800b392:	460c      	mov	r4, r1
 800b394:	4690      	mov	r8, r2
 800b396:	d82c      	bhi.n	800b3f2 <__ssputs_r+0x6e>
 800b398:	898a      	ldrh	r2, [r1, #12]
 800b39a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b39e:	d026      	beq.n	800b3ee <__ssputs_r+0x6a>
 800b3a0:	6965      	ldr	r5, [r4, #20]
 800b3a2:	6909      	ldr	r1, [r1, #16]
 800b3a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3a8:	eba3 0901 	sub.w	r9, r3, r1
 800b3ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3b0:	1c7b      	adds	r3, r7, #1
 800b3b2:	444b      	add	r3, r9
 800b3b4:	106d      	asrs	r5, r5, #1
 800b3b6:	429d      	cmp	r5, r3
 800b3b8:	bf38      	it	cc
 800b3ba:	461d      	movcc	r5, r3
 800b3bc:	0553      	lsls	r3, r2, #21
 800b3be:	d527      	bpl.n	800b410 <__ssputs_r+0x8c>
 800b3c0:	4629      	mov	r1, r5
 800b3c2:	f7fd fe89 	bl	80090d8 <_malloc_r>
 800b3c6:	4606      	mov	r6, r0
 800b3c8:	b360      	cbz	r0, 800b424 <__ssputs_r+0xa0>
 800b3ca:	6921      	ldr	r1, [r4, #16]
 800b3cc:	464a      	mov	r2, r9
 800b3ce:	f7fe fd89 	bl	8009ee4 <memcpy>
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3dc:	81a3      	strh	r3, [r4, #12]
 800b3de:	6126      	str	r6, [r4, #16]
 800b3e0:	6165      	str	r5, [r4, #20]
 800b3e2:	444e      	add	r6, r9
 800b3e4:	eba5 0509 	sub.w	r5, r5, r9
 800b3e8:	6026      	str	r6, [r4, #0]
 800b3ea:	60a5      	str	r5, [r4, #8]
 800b3ec:	463e      	mov	r6, r7
 800b3ee:	42be      	cmp	r6, r7
 800b3f0:	d900      	bls.n	800b3f4 <__ssputs_r+0x70>
 800b3f2:	463e      	mov	r6, r7
 800b3f4:	6820      	ldr	r0, [r4, #0]
 800b3f6:	4632      	mov	r2, r6
 800b3f8:	4641      	mov	r1, r8
 800b3fa:	f7fe fc86 	bl	8009d0a <memmove>
 800b3fe:	68a3      	ldr	r3, [r4, #8]
 800b400:	1b9b      	subs	r3, r3, r6
 800b402:	60a3      	str	r3, [r4, #8]
 800b404:	6823      	ldr	r3, [r4, #0]
 800b406:	4433      	add	r3, r6
 800b408:	6023      	str	r3, [r4, #0]
 800b40a:	2000      	movs	r0, #0
 800b40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b410:	462a      	mov	r2, r5
 800b412:	f000 fa03 	bl	800b81c <_realloc_r>
 800b416:	4606      	mov	r6, r0
 800b418:	2800      	cmp	r0, #0
 800b41a:	d1e0      	bne.n	800b3de <__ssputs_r+0x5a>
 800b41c:	6921      	ldr	r1, [r4, #16]
 800b41e:	4650      	mov	r0, sl
 800b420:	f7ff fbe8 	bl	800abf4 <_free_r>
 800b424:	230c      	movs	r3, #12
 800b426:	f8ca 3000 	str.w	r3, [sl]
 800b42a:	89a3      	ldrh	r3, [r4, #12]
 800b42c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b430:	81a3      	strh	r3, [r4, #12]
 800b432:	f04f 30ff 	mov.w	r0, #4294967295
 800b436:	e7e9      	b.n	800b40c <__ssputs_r+0x88>

0800b438 <_svfiprintf_r>:
 800b438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43c:	4698      	mov	r8, r3
 800b43e:	898b      	ldrh	r3, [r1, #12]
 800b440:	061b      	lsls	r3, r3, #24
 800b442:	b09d      	sub	sp, #116	; 0x74
 800b444:	4607      	mov	r7, r0
 800b446:	460d      	mov	r5, r1
 800b448:	4614      	mov	r4, r2
 800b44a:	d50e      	bpl.n	800b46a <_svfiprintf_r+0x32>
 800b44c:	690b      	ldr	r3, [r1, #16]
 800b44e:	b963      	cbnz	r3, 800b46a <_svfiprintf_r+0x32>
 800b450:	2140      	movs	r1, #64	; 0x40
 800b452:	f7fd fe41 	bl	80090d8 <_malloc_r>
 800b456:	6028      	str	r0, [r5, #0]
 800b458:	6128      	str	r0, [r5, #16]
 800b45a:	b920      	cbnz	r0, 800b466 <_svfiprintf_r+0x2e>
 800b45c:	230c      	movs	r3, #12
 800b45e:	603b      	str	r3, [r7, #0]
 800b460:	f04f 30ff 	mov.w	r0, #4294967295
 800b464:	e0d0      	b.n	800b608 <_svfiprintf_r+0x1d0>
 800b466:	2340      	movs	r3, #64	; 0x40
 800b468:	616b      	str	r3, [r5, #20]
 800b46a:	2300      	movs	r3, #0
 800b46c:	9309      	str	r3, [sp, #36]	; 0x24
 800b46e:	2320      	movs	r3, #32
 800b470:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b474:	f8cd 800c 	str.w	r8, [sp, #12]
 800b478:	2330      	movs	r3, #48	; 0x30
 800b47a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b620 <_svfiprintf_r+0x1e8>
 800b47e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b482:	f04f 0901 	mov.w	r9, #1
 800b486:	4623      	mov	r3, r4
 800b488:	469a      	mov	sl, r3
 800b48a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b48e:	b10a      	cbz	r2, 800b494 <_svfiprintf_r+0x5c>
 800b490:	2a25      	cmp	r2, #37	; 0x25
 800b492:	d1f9      	bne.n	800b488 <_svfiprintf_r+0x50>
 800b494:	ebba 0b04 	subs.w	fp, sl, r4
 800b498:	d00b      	beq.n	800b4b2 <_svfiprintf_r+0x7a>
 800b49a:	465b      	mov	r3, fp
 800b49c:	4622      	mov	r2, r4
 800b49e:	4629      	mov	r1, r5
 800b4a0:	4638      	mov	r0, r7
 800b4a2:	f7ff ff6f 	bl	800b384 <__ssputs_r>
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	f000 80a9 	beq.w	800b5fe <_svfiprintf_r+0x1c6>
 800b4ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4ae:	445a      	add	r2, fp
 800b4b0:	9209      	str	r2, [sp, #36]	; 0x24
 800b4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f000 80a1 	beq.w	800b5fe <_svfiprintf_r+0x1c6>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4c6:	f10a 0a01 	add.w	sl, sl, #1
 800b4ca:	9304      	str	r3, [sp, #16]
 800b4cc:	9307      	str	r3, [sp, #28]
 800b4ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4d2:	931a      	str	r3, [sp, #104]	; 0x68
 800b4d4:	4654      	mov	r4, sl
 800b4d6:	2205      	movs	r2, #5
 800b4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4dc:	4850      	ldr	r0, [pc, #320]	; (800b620 <_svfiprintf_r+0x1e8>)
 800b4de:	f7f4 fe77 	bl	80001d0 <memchr>
 800b4e2:	9a04      	ldr	r2, [sp, #16]
 800b4e4:	b9d8      	cbnz	r0, 800b51e <_svfiprintf_r+0xe6>
 800b4e6:	06d0      	lsls	r0, r2, #27
 800b4e8:	bf44      	itt	mi
 800b4ea:	2320      	movmi	r3, #32
 800b4ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4f0:	0711      	lsls	r1, r2, #28
 800b4f2:	bf44      	itt	mi
 800b4f4:	232b      	movmi	r3, #43	; 0x2b
 800b4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b4fe:	2b2a      	cmp	r3, #42	; 0x2a
 800b500:	d015      	beq.n	800b52e <_svfiprintf_r+0xf6>
 800b502:	9a07      	ldr	r2, [sp, #28]
 800b504:	4654      	mov	r4, sl
 800b506:	2000      	movs	r0, #0
 800b508:	f04f 0c0a 	mov.w	ip, #10
 800b50c:	4621      	mov	r1, r4
 800b50e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b512:	3b30      	subs	r3, #48	; 0x30
 800b514:	2b09      	cmp	r3, #9
 800b516:	d94d      	bls.n	800b5b4 <_svfiprintf_r+0x17c>
 800b518:	b1b0      	cbz	r0, 800b548 <_svfiprintf_r+0x110>
 800b51a:	9207      	str	r2, [sp, #28]
 800b51c:	e014      	b.n	800b548 <_svfiprintf_r+0x110>
 800b51e:	eba0 0308 	sub.w	r3, r0, r8
 800b522:	fa09 f303 	lsl.w	r3, r9, r3
 800b526:	4313      	orrs	r3, r2
 800b528:	9304      	str	r3, [sp, #16]
 800b52a:	46a2      	mov	sl, r4
 800b52c:	e7d2      	b.n	800b4d4 <_svfiprintf_r+0x9c>
 800b52e:	9b03      	ldr	r3, [sp, #12]
 800b530:	1d19      	adds	r1, r3, #4
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	9103      	str	r1, [sp, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	bfbb      	ittet	lt
 800b53a:	425b      	neglt	r3, r3
 800b53c:	f042 0202 	orrlt.w	r2, r2, #2
 800b540:	9307      	strge	r3, [sp, #28]
 800b542:	9307      	strlt	r3, [sp, #28]
 800b544:	bfb8      	it	lt
 800b546:	9204      	strlt	r2, [sp, #16]
 800b548:	7823      	ldrb	r3, [r4, #0]
 800b54a:	2b2e      	cmp	r3, #46	; 0x2e
 800b54c:	d10c      	bne.n	800b568 <_svfiprintf_r+0x130>
 800b54e:	7863      	ldrb	r3, [r4, #1]
 800b550:	2b2a      	cmp	r3, #42	; 0x2a
 800b552:	d134      	bne.n	800b5be <_svfiprintf_r+0x186>
 800b554:	9b03      	ldr	r3, [sp, #12]
 800b556:	1d1a      	adds	r2, r3, #4
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	9203      	str	r2, [sp, #12]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	bfb8      	it	lt
 800b560:	f04f 33ff 	movlt.w	r3, #4294967295
 800b564:	3402      	adds	r4, #2
 800b566:	9305      	str	r3, [sp, #20]
 800b568:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b630 <_svfiprintf_r+0x1f8>
 800b56c:	7821      	ldrb	r1, [r4, #0]
 800b56e:	2203      	movs	r2, #3
 800b570:	4650      	mov	r0, sl
 800b572:	f7f4 fe2d 	bl	80001d0 <memchr>
 800b576:	b138      	cbz	r0, 800b588 <_svfiprintf_r+0x150>
 800b578:	9b04      	ldr	r3, [sp, #16]
 800b57a:	eba0 000a 	sub.w	r0, r0, sl
 800b57e:	2240      	movs	r2, #64	; 0x40
 800b580:	4082      	lsls	r2, r0
 800b582:	4313      	orrs	r3, r2
 800b584:	3401      	adds	r4, #1
 800b586:	9304      	str	r3, [sp, #16]
 800b588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b58c:	4825      	ldr	r0, [pc, #148]	; (800b624 <_svfiprintf_r+0x1ec>)
 800b58e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b592:	2206      	movs	r2, #6
 800b594:	f7f4 fe1c 	bl	80001d0 <memchr>
 800b598:	2800      	cmp	r0, #0
 800b59a:	d038      	beq.n	800b60e <_svfiprintf_r+0x1d6>
 800b59c:	4b22      	ldr	r3, [pc, #136]	; (800b628 <_svfiprintf_r+0x1f0>)
 800b59e:	bb1b      	cbnz	r3, 800b5e8 <_svfiprintf_r+0x1b0>
 800b5a0:	9b03      	ldr	r3, [sp, #12]
 800b5a2:	3307      	adds	r3, #7
 800b5a4:	f023 0307 	bic.w	r3, r3, #7
 800b5a8:	3308      	adds	r3, #8
 800b5aa:	9303      	str	r3, [sp, #12]
 800b5ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ae:	4433      	add	r3, r6
 800b5b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b5b2:	e768      	b.n	800b486 <_svfiprintf_r+0x4e>
 800b5b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5b8:	460c      	mov	r4, r1
 800b5ba:	2001      	movs	r0, #1
 800b5bc:	e7a6      	b.n	800b50c <_svfiprintf_r+0xd4>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	3401      	adds	r4, #1
 800b5c2:	9305      	str	r3, [sp, #20]
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	f04f 0c0a 	mov.w	ip, #10
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5d0:	3a30      	subs	r2, #48	; 0x30
 800b5d2:	2a09      	cmp	r2, #9
 800b5d4:	d903      	bls.n	800b5de <_svfiprintf_r+0x1a6>
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d0c6      	beq.n	800b568 <_svfiprintf_r+0x130>
 800b5da:	9105      	str	r1, [sp, #20]
 800b5dc:	e7c4      	b.n	800b568 <_svfiprintf_r+0x130>
 800b5de:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e7f0      	b.n	800b5ca <_svfiprintf_r+0x192>
 800b5e8:	ab03      	add	r3, sp, #12
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	462a      	mov	r2, r5
 800b5ee:	4b0f      	ldr	r3, [pc, #60]	; (800b62c <_svfiprintf_r+0x1f4>)
 800b5f0:	a904      	add	r1, sp, #16
 800b5f2:	4638      	mov	r0, r7
 800b5f4:	f7fd fe9c 	bl	8009330 <_printf_float>
 800b5f8:	1c42      	adds	r2, r0, #1
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	d1d6      	bne.n	800b5ac <_svfiprintf_r+0x174>
 800b5fe:	89ab      	ldrh	r3, [r5, #12]
 800b600:	065b      	lsls	r3, r3, #25
 800b602:	f53f af2d 	bmi.w	800b460 <_svfiprintf_r+0x28>
 800b606:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b608:	b01d      	add	sp, #116	; 0x74
 800b60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b60e:	ab03      	add	r3, sp, #12
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	462a      	mov	r2, r5
 800b614:	4b05      	ldr	r3, [pc, #20]	; (800b62c <_svfiprintf_r+0x1f4>)
 800b616:	a904      	add	r1, sp, #16
 800b618:	4638      	mov	r0, r7
 800b61a:	f7fe f92d 	bl	8009878 <_printf_i>
 800b61e:	e7eb      	b.n	800b5f8 <_svfiprintf_r+0x1c0>
 800b620:	0800c5e4 	.word	0x0800c5e4
 800b624:	0800c5ee 	.word	0x0800c5ee
 800b628:	08009331 	.word	0x08009331
 800b62c:	0800b385 	.word	0x0800b385
 800b630:	0800c5ea 	.word	0x0800c5ea

0800b634 <__sflush_r>:
 800b634:	898a      	ldrh	r2, [r1, #12]
 800b636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b63a:	4605      	mov	r5, r0
 800b63c:	0710      	lsls	r0, r2, #28
 800b63e:	460c      	mov	r4, r1
 800b640:	d458      	bmi.n	800b6f4 <__sflush_r+0xc0>
 800b642:	684b      	ldr	r3, [r1, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	dc05      	bgt.n	800b654 <__sflush_r+0x20>
 800b648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	dc02      	bgt.n	800b654 <__sflush_r+0x20>
 800b64e:	2000      	movs	r0, #0
 800b650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b656:	2e00      	cmp	r6, #0
 800b658:	d0f9      	beq.n	800b64e <__sflush_r+0x1a>
 800b65a:	2300      	movs	r3, #0
 800b65c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b660:	682f      	ldr	r7, [r5, #0]
 800b662:	6a21      	ldr	r1, [r4, #32]
 800b664:	602b      	str	r3, [r5, #0]
 800b666:	d032      	beq.n	800b6ce <__sflush_r+0x9a>
 800b668:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b66a:	89a3      	ldrh	r3, [r4, #12]
 800b66c:	075a      	lsls	r2, r3, #29
 800b66e:	d505      	bpl.n	800b67c <__sflush_r+0x48>
 800b670:	6863      	ldr	r3, [r4, #4]
 800b672:	1ac0      	subs	r0, r0, r3
 800b674:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b676:	b10b      	cbz	r3, 800b67c <__sflush_r+0x48>
 800b678:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b67a:	1ac0      	subs	r0, r0, r3
 800b67c:	2300      	movs	r3, #0
 800b67e:	4602      	mov	r2, r0
 800b680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b682:	6a21      	ldr	r1, [r4, #32]
 800b684:	4628      	mov	r0, r5
 800b686:	47b0      	blx	r6
 800b688:	1c43      	adds	r3, r0, #1
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	d106      	bne.n	800b69c <__sflush_r+0x68>
 800b68e:	6829      	ldr	r1, [r5, #0]
 800b690:	291d      	cmp	r1, #29
 800b692:	d82b      	bhi.n	800b6ec <__sflush_r+0xb8>
 800b694:	4a29      	ldr	r2, [pc, #164]	; (800b73c <__sflush_r+0x108>)
 800b696:	410a      	asrs	r2, r1
 800b698:	07d6      	lsls	r6, r2, #31
 800b69a:	d427      	bmi.n	800b6ec <__sflush_r+0xb8>
 800b69c:	2200      	movs	r2, #0
 800b69e:	6062      	str	r2, [r4, #4]
 800b6a0:	04d9      	lsls	r1, r3, #19
 800b6a2:	6922      	ldr	r2, [r4, #16]
 800b6a4:	6022      	str	r2, [r4, #0]
 800b6a6:	d504      	bpl.n	800b6b2 <__sflush_r+0x7e>
 800b6a8:	1c42      	adds	r2, r0, #1
 800b6aa:	d101      	bne.n	800b6b0 <__sflush_r+0x7c>
 800b6ac:	682b      	ldr	r3, [r5, #0]
 800b6ae:	b903      	cbnz	r3, 800b6b2 <__sflush_r+0x7e>
 800b6b0:	6560      	str	r0, [r4, #84]	; 0x54
 800b6b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6b4:	602f      	str	r7, [r5, #0]
 800b6b6:	2900      	cmp	r1, #0
 800b6b8:	d0c9      	beq.n	800b64e <__sflush_r+0x1a>
 800b6ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6be:	4299      	cmp	r1, r3
 800b6c0:	d002      	beq.n	800b6c8 <__sflush_r+0x94>
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	f7ff fa96 	bl	800abf4 <_free_r>
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	6360      	str	r0, [r4, #52]	; 0x34
 800b6cc:	e7c0      	b.n	800b650 <__sflush_r+0x1c>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	47b0      	blx	r6
 800b6d4:	1c41      	adds	r1, r0, #1
 800b6d6:	d1c8      	bne.n	800b66a <__sflush_r+0x36>
 800b6d8:	682b      	ldr	r3, [r5, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d0c5      	beq.n	800b66a <__sflush_r+0x36>
 800b6de:	2b1d      	cmp	r3, #29
 800b6e0:	d001      	beq.n	800b6e6 <__sflush_r+0xb2>
 800b6e2:	2b16      	cmp	r3, #22
 800b6e4:	d101      	bne.n	800b6ea <__sflush_r+0xb6>
 800b6e6:	602f      	str	r7, [r5, #0]
 800b6e8:	e7b1      	b.n	800b64e <__sflush_r+0x1a>
 800b6ea:	89a3      	ldrh	r3, [r4, #12]
 800b6ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6f0:	81a3      	strh	r3, [r4, #12]
 800b6f2:	e7ad      	b.n	800b650 <__sflush_r+0x1c>
 800b6f4:	690f      	ldr	r7, [r1, #16]
 800b6f6:	2f00      	cmp	r7, #0
 800b6f8:	d0a9      	beq.n	800b64e <__sflush_r+0x1a>
 800b6fa:	0793      	lsls	r3, r2, #30
 800b6fc:	680e      	ldr	r6, [r1, #0]
 800b6fe:	bf08      	it	eq
 800b700:	694b      	ldreq	r3, [r1, #20]
 800b702:	600f      	str	r7, [r1, #0]
 800b704:	bf18      	it	ne
 800b706:	2300      	movne	r3, #0
 800b708:	eba6 0807 	sub.w	r8, r6, r7
 800b70c:	608b      	str	r3, [r1, #8]
 800b70e:	f1b8 0f00 	cmp.w	r8, #0
 800b712:	dd9c      	ble.n	800b64e <__sflush_r+0x1a>
 800b714:	6a21      	ldr	r1, [r4, #32]
 800b716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b718:	4643      	mov	r3, r8
 800b71a:	463a      	mov	r2, r7
 800b71c:	4628      	mov	r0, r5
 800b71e:	47b0      	blx	r6
 800b720:	2800      	cmp	r0, #0
 800b722:	dc06      	bgt.n	800b732 <__sflush_r+0xfe>
 800b724:	89a3      	ldrh	r3, [r4, #12]
 800b726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b72a:	81a3      	strh	r3, [r4, #12]
 800b72c:	f04f 30ff 	mov.w	r0, #4294967295
 800b730:	e78e      	b.n	800b650 <__sflush_r+0x1c>
 800b732:	4407      	add	r7, r0
 800b734:	eba8 0800 	sub.w	r8, r8, r0
 800b738:	e7e9      	b.n	800b70e <__sflush_r+0xda>
 800b73a:	bf00      	nop
 800b73c:	dfbffffe 	.word	0xdfbffffe

0800b740 <_fflush_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	690b      	ldr	r3, [r1, #16]
 800b744:	4605      	mov	r5, r0
 800b746:	460c      	mov	r4, r1
 800b748:	b913      	cbnz	r3, 800b750 <_fflush_r+0x10>
 800b74a:	2500      	movs	r5, #0
 800b74c:	4628      	mov	r0, r5
 800b74e:	bd38      	pop	{r3, r4, r5, pc}
 800b750:	b118      	cbz	r0, 800b75a <_fflush_r+0x1a>
 800b752:	6a03      	ldr	r3, [r0, #32]
 800b754:	b90b      	cbnz	r3, 800b75a <_fflush_r+0x1a>
 800b756:	f7fe fa2b 	bl	8009bb0 <__sinit>
 800b75a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d0f3      	beq.n	800b74a <_fflush_r+0xa>
 800b762:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b764:	07d0      	lsls	r0, r2, #31
 800b766:	d404      	bmi.n	800b772 <_fflush_r+0x32>
 800b768:	0599      	lsls	r1, r3, #22
 800b76a:	d402      	bmi.n	800b772 <_fflush_r+0x32>
 800b76c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b76e:	f7fe fbb7 	bl	8009ee0 <__retarget_lock_acquire_recursive>
 800b772:	4628      	mov	r0, r5
 800b774:	4621      	mov	r1, r4
 800b776:	f7ff ff5d 	bl	800b634 <__sflush_r>
 800b77a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b77c:	07da      	lsls	r2, r3, #31
 800b77e:	4605      	mov	r5, r0
 800b780:	d4e4      	bmi.n	800b74c <_fflush_r+0xc>
 800b782:	89a3      	ldrh	r3, [r4, #12]
 800b784:	059b      	lsls	r3, r3, #22
 800b786:	d4e1      	bmi.n	800b74c <_fflush_r+0xc>
 800b788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b78a:	f7fe fbaa 	bl	8009ee2 <__retarget_lock_release_recursive>
 800b78e:	e7dd      	b.n	800b74c <_fflush_r+0xc>

0800b790 <__assert_func>:
 800b790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b792:	4614      	mov	r4, r2
 800b794:	461a      	mov	r2, r3
 800b796:	4b09      	ldr	r3, [pc, #36]	; (800b7bc <__assert_func+0x2c>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4605      	mov	r5, r0
 800b79c:	68d8      	ldr	r0, [r3, #12]
 800b79e:	b14c      	cbz	r4, 800b7b4 <__assert_func+0x24>
 800b7a0:	4b07      	ldr	r3, [pc, #28]	; (800b7c0 <__assert_func+0x30>)
 800b7a2:	9100      	str	r1, [sp, #0]
 800b7a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7a8:	4906      	ldr	r1, [pc, #24]	; (800b7c4 <__assert_func+0x34>)
 800b7aa:	462b      	mov	r3, r5
 800b7ac:	f000 f872 	bl	800b894 <fiprintf>
 800b7b0:	f7fd fc5a 	bl	8009068 <abort>
 800b7b4:	4b04      	ldr	r3, [pc, #16]	; (800b7c8 <__assert_func+0x38>)
 800b7b6:	461c      	mov	r4, r3
 800b7b8:	e7f3      	b.n	800b7a2 <__assert_func+0x12>
 800b7ba:	bf00      	nop
 800b7bc:	20000158 	.word	0x20000158
 800b7c0:	0800c5ff 	.word	0x0800c5ff
 800b7c4:	0800c60c 	.word	0x0800c60c
 800b7c8:	0800c63a 	.word	0x0800c63a

0800b7cc <_calloc_r>:
 800b7cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7ce:	fba1 2402 	umull	r2, r4, r1, r2
 800b7d2:	b94c      	cbnz	r4, 800b7e8 <_calloc_r+0x1c>
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	9201      	str	r2, [sp, #4]
 800b7d8:	f7fd fc7e 	bl	80090d8 <_malloc_r>
 800b7dc:	9a01      	ldr	r2, [sp, #4]
 800b7de:	4605      	mov	r5, r0
 800b7e0:	b930      	cbnz	r0, 800b7f0 <_calloc_r+0x24>
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	b003      	add	sp, #12
 800b7e6:	bd30      	pop	{r4, r5, pc}
 800b7e8:	220c      	movs	r2, #12
 800b7ea:	6002      	str	r2, [r0, #0]
 800b7ec:	2500      	movs	r5, #0
 800b7ee:	e7f8      	b.n	800b7e2 <_calloc_r+0x16>
 800b7f0:	4621      	mov	r1, r4
 800b7f2:	f7fe faa4 	bl	8009d3e <memset>
 800b7f6:	e7f4      	b.n	800b7e2 <_calloc_r+0x16>

0800b7f8 <__ascii_mbtowc>:
 800b7f8:	b082      	sub	sp, #8
 800b7fa:	b901      	cbnz	r1, 800b7fe <__ascii_mbtowc+0x6>
 800b7fc:	a901      	add	r1, sp, #4
 800b7fe:	b142      	cbz	r2, 800b812 <__ascii_mbtowc+0x1a>
 800b800:	b14b      	cbz	r3, 800b816 <__ascii_mbtowc+0x1e>
 800b802:	7813      	ldrb	r3, [r2, #0]
 800b804:	600b      	str	r3, [r1, #0]
 800b806:	7812      	ldrb	r2, [r2, #0]
 800b808:	1e10      	subs	r0, r2, #0
 800b80a:	bf18      	it	ne
 800b80c:	2001      	movne	r0, #1
 800b80e:	b002      	add	sp, #8
 800b810:	4770      	bx	lr
 800b812:	4610      	mov	r0, r2
 800b814:	e7fb      	b.n	800b80e <__ascii_mbtowc+0x16>
 800b816:	f06f 0001 	mvn.w	r0, #1
 800b81a:	e7f8      	b.n	800b80e <__ascii_mbtowc+0x16>

0800b81c <_realloc_r>:
 800b81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b820:	4680      	mov	r8, r0
 800b822:	4614      	mov	r4, r2
 800b824:	460e      	mov	r6, r1
 800b826:	b921      	cbnz	r1, 800b832 <_realloc_r+0x16>
 800b828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b82c:	4611      	mov	r1, r2
 800b82e:	f7fd bc53 	b.w	80090d8 <_malloc_r>
 800b832:	b92a      	cbnz	r2, 800b840 <_realloc_r+0x24>
 800b834:	f7ff f9de 	bl	800abf4 <_free_r>
 800b838:	4625      	mov	r5, r4
 800b83a:	4628      	mov	r0, r5
 800b83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b840:	f000 f83a 	bl	800b8b8 <_malloc_usable_size_r>
 800b844:	4284      	cmp	r4, r0
 800b846:	4607      	mov	r7, r0
 800b848:	d802      	bhi.n	800b850 <_realloc_r+0x34>
 800b84a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b84e:	d812      	bhi.n	800b876 <_realloc_r+0x5a>
 800b850:	4621      	mov	r1, r4
 800b852:	4640      	mov	r0, r8
 800b854:	f7fd fc40 	bl	80090d8 <_malloc_r>
 800b858:	4605      	mov	r5, r0
 800b85a:	2800      	cmp	r0, #0
 800b85c:	d0ed      	beq.n	800b83a <_realloc_r+0x1e>
 800b85e:	42bc      	cmp	r4, r7
 800b860:	4622      	mov	r2, r4
 800b862:	4631      	mov	r1, r6
 800b864:	bf28      	it	cs
 800b866:	463a      	movcs	r2, r7
 800b868:	f7fe fb3c 	bl	8009ee4 <memcpy>
 800b86c:	4631      	mov	r1, r6
 800b86e:	4640      	mov	r0, r8
 800b870:	f7ff f9c0 	bl	800abf4 <_free_r>
 800b874:	e7e1      	b.n	800b83a <_realloc_r+0x1e>
 800b876:	4635      	mov	r5, r6
 800b878:	e7df      	b.n	800b83a <_realloc_r+0x1e>

0800b87a <__ascii_wctomb>:
 800b87a:	b149      	cbz	r1, 800b890 <__ascii_wctomb+0x16>
 800b87c:	2aff      	cmp	r2, #255	; 0xff
 800b87e:	bf85      	ittet	hi
 800b880:	238a      	movhi	r3, #138	; 0x8a
 800b882:	6003      	strhi	r3, [r0, #0]
 800b884:	700a      	strbls	r2, [r1, #0]
 800b886:	f04f 30ff 	movhi.w	r0, #4294967295
 800b88a:	bf98      	it	ls
 800b88c:	2001      	movls	r0, #1
 800b88e:	4770      	bx	lr
 800b890:	4608      	mov	r0, r1
 800b892:	4770      	bx	lr

0800b894 <fiprintf>:
 800b894:	b40e      	push	{r1, r2, r3}
 800b896:	b503      	push	{r0, r1, lr}
 800b898:	4601      	mov	r1, r0
 800b89a:	ab03      	add	r3, sp, #12
 800b89c:	4805      	ldr	r0, [pc, #20]	; (800b8b4 <fiprintf+0x20>)
 800b89e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8a2:	6800      	ldr	r0, [r0, #0]
 800b8a4:	9301      	str	r3, [sp, #4]
 800b8a6:	f000 f839 	bl	800b91c <_vfiprintf_r>
 800b8aa:	b002      	add	sp, #8
 800b8ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8b0:	b003      	add	sp, #12
 800b8b2:	4770      	bx	lr
 800b8b4:	20000158 	.word	0x20000158

0800b8b8 <_malloc_usable_size_r>:
 800b8b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8bc:	1f18      	subs	r0, r3, #4
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	bfbc      	itt	lt
 800b8c2:	580b      	ldrlt	r3, [r1, r0]
 800b8c4:	18c0      	addlt	r0, r0, r3
 800b8c6:	4770      	bx	lr

0800b8c8 <__sfputc_r>:
 800b8c8:	6893      	ldr	r3, [r2, #8]
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	b410      	push	{r4}
 800b8d0:	6093      	str	r3, [r2, #8]
 800b8d2:	da08      	bge.n	800b8e6 <__sfputc_r+0x1e>
 800b8d4:	6994      	ldr	r4, [r2, #24]
 800b8d6:	42a3      	cmp	r3, r4
 800b8d8:	db01      	blt.n	800b8de <__sfputc_r+0x16>
 800b8da:	290a      	cmp	r1, #10
 800b8dc:	d103      	bne.n	800b8e6 <__sfputc_r+0x1e>
 800b8de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8e2:	f000 b935 	b.w	800bb50 <__swbuf_r>
 800b8e6:	6813      	ldr	r3, [r2, #0]
 800b8e8:	1c58      	adds	r0, r3, #1
 800b8ea:	6010      	str	r0, [r2, #0]
 800b8ec:	7019      	strb	r1, [r3, #0]
 800b8ee:	4608      	mov	r0, r1
 800b8f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <__sfputs_r>:
 800b8f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f8:	4606      	mov	r6, r0
 800b8fa:	460f      	mov	r7, r1
 800b8fc:	4614      	mov	r4, r2
 800b8fe:	18d5      	adds	r5, r2, r3
 800b900:	42ac      	cmp	r4, r5
 800b902:	d101      	bne.n	800b908 <__sfputs_r+0x12>
 800b904:	2000      	movs	r0, #0
 800b906:	e007      	b.n	800b918 <__sfputs_r+0x22>
 800b908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b90c:	463a      	mov	r2, r7
 800b90e:	4630      	mov	r0, r6
 800b910:	f7ff ffda 	bl	800b8c8 <__sfputc_r>
 800b914:	1c43      	adds	r3, r0, #1
 800b916:	d1f3      	bne.n	800b900 <__sfputs_r+0xa>
 800b918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b91c <_vfiprintf_r>:
 800b91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b920:	460d      	mov	r5, r1
 800b922:	b09d      	sub	sp, #116	; 0x74
 800b924:	4614      	mov	r4, r2
 800b926:	4698      	mov	r8, r3
 800b928:	4606      	mov	r6, r0
 800b92a:	b118      	cbz	r0, 800b934 <_vfiprintf_r+0x18>
 800b92c:	6a03      	ldr	r3, [r0, #32]
 800b92e:	b90b      	cbnz	r3, 800b934 <_vfiprintf_r+0x18>
 800b930:	f7fe f93e 	bl	8009bb0 <__sinit>
 800b934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b936:	07d9      	lsls	r1, r3, #31
 800b938:	d405      	bmi.n	800b946 <_vfiprintf_r+0x2a>
 800b93a:	89ab      	ldrh	r3, [r5, #12]
 800b93c:	059a      	lsls	r2, r3, #22
 800b93e:	d402      	bmi.n	800b946 <_vfiprintf_r+0x2a>
 800b940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b942:	f7fe facd 	bl	8009ee0 <__retarget_lock_acquire_recursive>
 800b946:	89ab      	ldrh	r3, [r5, #12]
 800b948:	071b      	lsls	r3, r3, #28
 800b94a:	d501      	bpl.n	800b950 <_vfiprintf_r+0x34>
 800b94c:	692b      	ldr	r3, [r5, #16]
 800b94e:	b99b      	cbnz	r3, 800b978 <_vfiprintf_r+0x5c>
 800b950:	4629      	mov	r1, r5
 800b952:	4630      	mov	r0, r6
 800b954:	f000 f93a 	bl	800bbcc <__swsetup_r>
 800b958:	b170      	cbz	r0, 800b978 <_vfiprintf_r+0x5c>
 800b95a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b95c:	07dc      	lsls	r4, r3, #31
 800b95e:	d504      	bpl.n	800b96a <_vfiprintf_r+0x4e>
 800b960:	f04f 30ff 	mov.w	r0, #4294967295
 800b964:	b01d      	add	sp, #116	; 0x74
 800b966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b96a:	89ab      	ldrh	r3, [r5, #12]
 800b96c:	0598      	lsls	r0, r3, #22
 800b96e:	d4f7      	bmi.n	800b960 <_vfiprintf_r+0x44>
 800b970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b972:	f7fe fab6 	bl	8009ee2 <__retarget_lock_release_recursive>
 800b976:	e7f3      	b.n	800b960 <_vfiprintf_r+0x44>
 800b978:	2300      	movs	r3, #0
 800b97a:	9309      	str	r3, [sp, #36]	; 0x24
 800b97c:	2320      	movs	r3, #32
 800b97e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b982:	f8cd 800c 	str.w	r8, [sp, #12]
 800b986:	2330      	movs	r3, #48	; 0x30
 800b988:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bb3c <_vfiprintf_r+0x220>
 800b98c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b990:	f04f 0901 	mov.w	r9, #1
 800b994:	4623      	mov	r3, r4
 800b996:	469a      	mov	sl, r3
 800b998:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b99c:	b10a      	cbz	r2, 800b9a2 <_vfiprintf_r+0x86>
 800b99e:	2a25      	cmp	r2, #37	; 0x25
 800b9a0:	d1f9      	bne.n	800b996 <_vfiprintf_r+0x7a>
 800b9a2:	ebba 0b04 	subs.w	fp, sl, r4
 800b9a6:	d00b      	beq.n	800b9c0 <_vfiprintf_r+0xa4>
 800b9a8:	465b      	mov	r3, fp
 800b9aa:	4622      	mov	r2, r4
 800b9ac:	4629      	mov	r1, r5
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	f7ff ffa1 	bl	800b8f6 <__sfputs_r>
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	f000 80a9 	beq.w	800bb0c <_vfiprintf_r+0x1f0>
 800b9ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9bc:	445a      	add	r2, fp
 800b9be:	9209      	str	r2, [sp, #36]	; 0x24
 800b9c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f000 80a1 	beq.w	800bb0c <_vfiprintf_r+0x1f0>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9d4:	f10a 0a01 	add.w	sl, sl, #1
 800b9d8:	9304      	str	r3, [sp, #16]
 800b9da:	9307      	str	r3, [sp, #28]
 800b9dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9e0:	931a      	str	r3, [sp, #104]	; 0x68
 800b9e2:	4654      	mov	r4, sl
 800b9e4:	2205      	movs	r2, #5
 800b9e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9ea:	4854      	ldr	r0, [pc, #336]	; (800bb3c <_vfiprintf_r+0x220>)
 800b9ec:	f7f4 fbf0 	bl	80001d0 <memchr>
 800b9f0:	9a04      	ldr	r2, [sp, #16]
 800b9f2:	b9d8      	cbnz	r0, 800ba2c <_vfiprintf_r+0x110>
 800b9f4:	06d1      	lsls	r1, r2, #27
 800b9f6:	bf44      	itt	mi
 800b9f8:	2320      	movmi	r3, #32
 800b9fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9fe:	0713      	lsls	r3, r2, #28
 800ba00:	bf44      	itt	mi
 800ba02:	232b      	movmi	r3, #43	; 0x2b
 800ba04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba08:	f89a 3000 	ldrb.w	r3, [sl]
 800ba0c:	2b2a      	cmp	r3, #42	; 0x2a
 800ba0e:	d015      	beq.n	800ba3c <_vfiprintf_r+0x120>
 800ba10:	9a07      	ldr	r2, [sp, #28]
 800ba12:	4654      	mov	r4, sl
 800ba14:	2000      	movs	r0, #0
 800ba16:	f04f 0c0a 	mov.w	ip, #10
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba20:	3b30      	subs	r3, #48	; 0x30
 800ba22:	2b09      	cmp	r3, #9
 800ba24:	d94d      	bls.n	800bac2 <_vfiprintf_r+0x1a6>
 800ba26:	b1b0      	cbz	r0, 800ba56 <_vfiprintf_r+0x13a>
 800ba28:	9207      	str	r2, [sp, #28]
 800ba2a:	e014      	b.n	800ba56 <_vfiprintf_r+0x13a>
 800ba2c:	eba0 0308 	sub.w	r3, r0, r8
 800ba30:	fa09 f303 	lsl.w	r3, r9, r3
 800ba34:	4313      	orrs	r3, r2
 800ba36:	9304      	str	r3, [sp, #16]
 800ba38:	46a2      	mov	sl, r4
 800ba3a:	e7d2      	b.n	800b9e2 <_vfiprintf_r+0xc6>
 800ba3c:	9b03      	ldr	r3, [sp, #12]
 800ba3e:	1d19      	adds	r1, r3, #4
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	9103      	str	r1, [sp, #12]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	bfbb      	ittet	lt
 800ba48:	425b      	neglt	r3, r3
 800ba4a:	f042 0202 	orrlt.w	r2, r2, #2
 800ba4e:	9307      	strge	r3, [sp, #28]
 800ba50:	9307      	strlt	r3, [sp, #28]
 800ba52:	bfb8      	it	lt
 800ba54:	9204      	strlt	r2, [sp, #16]
 800ba56:	7823      	ldrb	r3, [r4, #0]
 800ba58:	2b2e      	cmp	r3, #46	; 0x2e
 800ba5a:	d10c      	bne.n	800ba76 <_vfiprintf_r+0x15a>
 800ba5c:	7863      	ldrb	r3, [r4, #1]
 800ba5e:	2b2a      	cmp	r3, #42	; 0x2a
 800ba60:	d134      	bne.n	800bacc <_vfiprintf_r+0x1b0>
 800ba62:	9b03      	ldr	r3, [sp, #12]
 800ba64:	1d1a      	adds	r2, r3, #4
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	9203      	str	r2, [sp, #12]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	bfb8      	it	lt
 800ba6e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba72:	3402      	adds	r4, #2
 800ba74:	9305      	str	r3, [sp, #20]
 800ba76:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bb4c <_vfiprintf_r+0x230>
 800ba7a:	7821      	ldrb	r1, [r4, #0]
 800ba7c:	2203      	movs	r2, #3
 800ba7e:	4650      	mov	r0, sl
 800ba80:	f7f4 fba6 	bl	80001d0 <memchr>
 800ba84:	b138      	cbz	r0, 800ba96 <_vfiprintf_r+0x17a>
 800ba86:	9b04      	ldr	r3, [sp, #16]
 800ba88:	eba0 000a 	sub.w	r0, r0, sl
 800ba8c:	2240      	movs	r2, #64	; 0x40
 800ba8e:	4082      	lsls	r2, r0
 800ba90:	4313      	orrs	r3, r2
 800ba92:	3401      	adds	r4, #1
 800ba94:	9304      	str	r3, [sp, #16]
 800ba96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba9a:	4829      	ldr	r0, [pc, #164]	; (800bb40 <_vfiprintf_r+0x224>)
 800ba9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baa0:	2206      	movs	r2, #6
 800baa2:	f7f4 fb95 	bl	80001d0 <memchr>
 800baa6:	2800      	cmp	r0, #0
 800baa8:	d03f      	beq.n	800bb2a <_vfiprintf_r+0x20e>
 800baaa:	4b26      	ldr	r3, [pc, #152]	; (800bb44 <_vfiprintf_r+0x228>)
 800baac:	bb1b      	cbnz	r3, 800baf6 <_vfiprintf_r+0x1da>
 800baae:	9b03      	ldr	r3, [sp, #12]
 800bab0:	3307      	adds	r3, #7
 800bab2:	f023 0307 	bic.w	r3, r3, #7
 800bab6:	3308      	adds	r3, #8
 800bab8:	9303      	str	r3, [sp, #12]
 800baba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800babc:	443b      	add	r3, r7
 800babe:	9309      	str	r3, [sp, #36]	; 0x24
 800bac0:	e768      	b.n	800b994 <_vfiprintf_r+0x78>
 800bac2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bac6:	460c      	mov	r4, r1
 800bac8:	2001      	movs	r0, #1
 800baca:	e7a6      	b.n	800ba1a <_vfiprintf_r+0xfe>
 800bacc:	2300      	movs	r3, #0
 800bace:	3401      	adds	r4, #1
 800bad0:	9305      	str	r3, [sp, #20]
 800bad2:	4619      	mov	r1, r3
 800bad4:	f04f 0c0a 	mov.w	ip, #10
 800bad8:	4620      	mov	r0, r4
 800bada:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bade:	3a30      	subs	r2, #48	; 0x30
 800bae0:	2a09      	cmp	r2, #9
 800bae2:	d903      	bls.n	800baec <_vfiprintf_r+0x1d0>
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d0c6      	beq.n	800ba76 <_vfiprintf_r+0x15a>
 800bae8:	9105      	str	r1, [sp, #20]
 800baea:	e7c4      	b.n	800ba76 <_vfiprintf_r+0x15a>
 800baec:	fb0c 2101 	mla	r1, ip, r1, r2
 800baf0:	4604      	mov	r4, r0
 800baf2:	2301      	movs	r3, #1
 800baf4:	e7f0      	b.n	800bad8 <_vfiprintf_r+0x1bc>
 800baf6:	ab03      	add	r3, sp, #12
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	462a      	mov	r2, r5
 800bafc:	4b12      	ldr	r3, [pc, #72]	; (800bb48 <_vfiprintf_r+0x22c>)
 800bafe:	a904      	add	r1, sp, #16
 800bb00:	4630      	mov	r0, r6
 800bb02:	f7fd fc15 	bl	8009330 <_printf_float>
 800bb06:	4607      	mov	r7, r0
 800bb08:	1c78      	adds	r0, r7, #1
 800bb0a:	d1d6      	bne.n	800baba <_vfiprintf_r+0x19e>
 800bb0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb0e:	07d9      	lsls	r1, r3, #31
 800bb10:	d405      	bmi.n	800bb1e <_vfiprintf_r+0x202>
 800bb12:	89ab      	ldrh	r3, [r5, #12]
 800bb14:	059a      	lsls	r2, r3, #22
 800bb16:	d402      	bmi.n	800bb1e <_vfiprintf_r+0x202>
 800bb18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb1a:	f7fe f9e2 	bl	8009ee2 <__retarget_lock_release_recursive>
 800bb1e:	89ab      	ldrh	r3, [r5, #12]
 800bb20:	065b      	lsls	r3, r3, #25
 800bb22:	f53f af1d 	bmi.w	800b960 <_vfiprintf_r+0x44>
 800bb26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb28:	e71c      	b.n	800b964 <_vfiprintf_r+0x48>
 800bb2a:	ab03      	add	r3, sp, #12
 800bb2c:	9300      	str	r3, [sp, #0]
 800bb2e:	462a      	mov	r2, r5
 800bb30:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <_vfiprintf_r+0x22c>)
 800bb32:	a904      	add	r1, sp, #16
 800bb34:	4630      	mov	r0, r6
 800bb36:	f7fd fe9f 	bl	8009878 <_printf_i>
 800bb3a:	e7e4      	b.n	800bb06 <_vfiprintf_r+0x1ea>
 800bb3c:	0800c5e4 	.word	0x0800c5e4
 800bb40:	0800c5ee 	.word	0x0800c5ee
 800bb44:	08009331 	.word	0x08009331
 800bb48:	0800b8f7 	.word	0x0800b8f7
 800bb4c:	0800c5ea 	.word	0x0800c5ea

0800bb50 <__swbuf_r>:
 800bb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb52:	460e      	mov	r6, r1
 800bb54:	4614      	mov	r4, r2
 800bb56:	4605      	mov	r5, r0
 800bb58:	b118      	cbz	r0, 800bb62 <__swbuf_r+0x12>
 800bb5a:	6a03      	ldr	r3, [r0, #32]
 800bb5c:	b90b      	cbnz	r3, 800bb62 <__swbuf_r+0x12>
 800bb5e:	f7fe f827 	bl	8009bb0 <__sinit>
 800bb62:	69a3      	ldr	r3, [r4, #24]
 800bb64:	60a3      	str	r3, [r4, #8]
 800bb66:	89a3      	ldrh	r3, [r4, #12]
 800bb68:	071a      	lsls	r2, r3, #28
 800bb6a:	d525      	bpl.n	800bbb8 <__swbuf_r+0x68>
 800bb6c:	6923      	ldr	r3, [r4, #16]
 800bb6e:	b31b      	cbz	r3, 800bbb8 <__swbuf_r+0x68>
 800bb70:	6823      	ldr	r3, [r4, #0]
 800bb72:	6922      	ldr	r2, [r4, #16]
 800bb74:	1a98      	subs	r0, r3, r2
 800bb76:	6963      	ldr	r3, [r4, #20]
 800bb78:	b2f6      	uxtb	r6, r6
 800bb7a:	4283      	cmp	r3, r0
 800bb7c:	4637      	mov	r7, r6
 800bb7e:	dc04      	bgt.n	800bb8a <__swbuf_r+0x3a>
 800bb80:	4621      	mov	r1, r4
 800bb82:	4628      	mov	r0, r5
 800bb84:	f7ff fddc 	bl	800b740 <_fflush_r>
 800bb88:	b9e0      	cbnz	r0, 800bbc4 <__swbuf_r+0x74>
 800bb8a:	68a3      	ldr	r3, [r4, #8]
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	60a3      	str	r3, [r4, #8]
 800bb90:	6823      	ldr	r3, [r4, #0]
 800bb92:	1c5a      	adds	r2, r3, #1
 800bb94:	6022      	str	r2, [r4, #0]
 800bb96:	701e      	strb	r6, [r3, #0]
 800bb98:	6962      	ldr	r2, [r4, #20]
 800bb9a:	1c43      	adds	r3, r0, #1
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d004      	beq.n	800bbaa <__swbuf_r+0x5a>
 800bba0:	89a3      	ldrh	r3, [r4, #12]
 800bba2:	07db      	lsls	r3, r3, #31
 800bba4:	d506      	bpl.n	800bbb4 <__swbuf_r+0x64>
 800bba6:	2e0a      	cmp	r6, #10
 800bba8:	d104      	bne.n	800bbb4 <__swbuf_r+0x64>
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4628      	mov	r0, r5
 800bbae:	f7ff fdc7 	bl	800b740 <_fflush_r>
 800bbb2:	b938      	cbnz	r0, 800bbc4 <__swbuf_r+0x74>
 800bbb4:	4638      	mov	r0, r7
 800bbb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbb8:	4621      	mov	r1, r4
 800bbba:	4628      	mov	r0, r5
 800bbbc:	f000 f806 	bl	800bbcc <__swsetup_r>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	d0d5      	beq.n	800bb70 <__swbuf_r+0x20>
 800bbc4:	f04f 37ff 	mov.w	r7, #4294967295
 800bbc8:	e7f4      	b.n	800bbb4 <__swbuf_r+0x64>
	...

0800bbcc <__swsetup_r>:
 800bbcc:	b538      	push	{r3, r4, r5, lr}
 800bbce:	4b2a      	ldr	r3, [pc, #168]	; (800bc78 <__swsetup_r+0xac>)
 800bbd0:	4605      	mov	r5, r0
 800bbd2:	6818      	ldr	r0, [r3, #0]
 800bbd4:	460c      	mov	r4, r1
 800bbd6:	b118      	cbz	r0, 800bbe0 <__swsetup_r+0x14>
 800bbd8:	6a03      	ldr	r3, [r0, #32]
 800bbda:	b90b      	cbnz	r3, 800bbe0 <__swsetup_r+0x14>
 800bbdc:	f7fd ffe8 	bl	8009bb0 <__sinit>
 800bbe0:	89a3      	ldrh	r3, [r4, #12]
 800bbe2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbe6:	0718      	lsls	r0, r3, #28
 800bbe8:	d422      	bmi.n	800bc30 <__swsetup_r+0x64>
 800bbea:	06d9      	lsls	r1, r3, #27
 800bbec:	d407      	bmi.n	800bbfe <__swsetup_r+0x32>
 800bbee:	2309      	movs	r3, #9
 800bbf0:	602b      	str	r3, [r5, #0]
 800bbf2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbf6:	81a3      	strh	r3, [r4, #12]
 800bbf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbfc:	e034      	b.n	800bc68 <__swsetup_r+0x9c>
 800bbfe:	0758      	lsls	r0, r3, #29
 800bc00:	d512      	bpl.n	800bc28 <__swsetup_r+0x5c>
 800bc02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc04:	b141      	cbz	r1, 800bc18 <__swsetup_r+0x4c>
 800bc06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc0a:	4299      	cmp	r1, r3
 800bc0c:	d002      	beq.n	800bc14 <__swsetup_r+0x48>
 800bc0e:	4628      	mov	r0, r5
 800bc10:	f7fe fff0 	bl	800abf4 <_free_r>
 800bc14:	2300      	movs	r3, #0
 800bc16:	6363      	str	r3, [r4, #52]	; 0x34
 800bc18:	89a3      	ldrh	r3, [r4, #12]
 800bc1a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc1e:	81a3      	strh	r3, [r4, #12]
 800bc20:	2300      	movs	r3, #0
 800bc22:	6063      	str	r3, [r4, #4]
 800bc24:	6923      	ldr	r3, [r4, #16]
 800bc26:	6023      	str	r3, [r4, #0]
 800bc28:	89a3      	ldrh	r3, [r4, #12]
 800bc2a:	f043 0308 	orr.w	r3, r3, #8
 800bc2e:	81a3      	strh	r3, [r4, #12]
 800bc30:	6923      	ldr	r3, [r4, #16]
 800bc32:	b94b      	cbnz	r3, 800bc48 <__swsetup_r+0x7c>
 800bc34:	89a3      	ldrh	r3, [r4, #12]
 800bc36:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc3e:	d003      	beq.n	800bc48 <__swsetup_r+0x7c>
 800bc40:	4621      	mov	r1, r4
 800bc42:	4628      	mov	r0, r5
 800bc44:	f000 f840 	bl	800bcc8 <__smakebuf_r>
 800bc48:	89a0      	ldrh	r0, [r4, #12]
 800bc4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc4e:	f010 0301 	ands.w	r3, r0, #1
 800bc52:	d00a      	beq.n	800bc6a <__swsetup_r+0x9e>
 800bc54:	2300      	movs	r3, #0
 800bc56:	60a3      	str	r3, [r4, #8]
 800bc58:	6963      	ldr	r3, [r4, #20]
 800bc5a:	425b      	negs	r3, r3
 800bc5c:	61a3      	str	r3, [r4, #24]
 800bc5e:	6923      	ldr	r3, [r4, #16]
 800bc60:	b943      	cbnz	r3, 800bc74 <__swsetup_r+0xa8>
 800bc62:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc66:	d1c4      	bne.n	800bbf2 <__swsetup_r+0x26>
 800bc68:	bd38      	pop	{r3, r4, r5, pc}
 800bc6a:	0781      	lsls	r1, r0, #30
 800bc6c:	bf58      	it	pl
 800bc6e:	6963      	ldrpl	r3, [r4, #20]
 800bc70:	60a3      	str	r3, [r4, #8]
 800bc72:	e7f4      	b.n	800bc5e <__swsetup_r+0x92>
 800bc74:	2000      	movs	r0, #0
 800bc76:	e7f7      	b.n	800bc68 <__swsetup_r+0x9c>
 800bc78:	20000158 	.word	0x20000158

0800bc7c <__swhatbuf_r>:
 800bc7c:	b570      	push	{r4, r5, r6, lr}
 800bc7e:	460c      	mov	r4, r1
 800bc80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc84:	2900      	cmp	r1, #0
 800bc86:	b096      	sub	sp, #88	; 0x58
 800bc88:	4615      	mov	r5, r2
 800bc8a:	461e      	mov	r6, r3
 800bc8c:	da0d      	bge.n	800bcaa <__swhatbuf_r+0x2e>
 800bc8e:	89a3      	ldrh	r3, [r4, #12]
 800bc90:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bc94:	f04f 0100 	mov.w	r1, #0
 800bc98:	bf0c      	ite	eq
 800bc9a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bc9e:	2340      	movne	r3, #64	; 0x40
 800bca0:	2000      	movs	r0, #0
 800bca2:	6031      	str	r1, [r6, #0]
 800bca4:	602b      	str	r3, [r5, #0]
 800bca6:	b016      	add	sp, #88	; 0x58
 800bca8:	bd70      	pop	{r4, r5, r6, pc}
 800bcaa:	466a      	mov	r2, sp
 800bcac:	f000 f848 	bl	800bd40 <_fstat_r>
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	dbec      	blt.n	800bc8e <__swhatbuf_r+0x12>
 800bcb4:	9901      	ldr	r1, [sp, #4]
 800bcb6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bcba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bcbe:	4259      	negs	r1, r3
 800bcc0:	4159      	adcs	r1, r3
 800bcc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcc6:	e7eb      	b.n	800bca0 <__swhatbuf_r+0x24>

0800bcc8 <__smakebuf_r>:
 800bcc8:	898b      	ldrh	r3, [r1, #12]
 800bcca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bccc:	079d      	lsls	r5, r3, #30
 800bcce:	4606      	mov	r6, r0
 800bcd0:	460c      	mov	r4, r1
 800bcd2:	d507      	bpl.n	800bce4 <__smakebuf_r+0x1c>
 800bcd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bcd8:	6023      	str	r3, [r4, #0]
 800bcda:	6123      	str	r3, [r4, #16]
 800bcdc:	2301      	movs	r3, #1
 800bcde:	6163      	str	r3, [r4, #20]
 800bce0:	b002      	add	sp, #8
 800bce2:	bd70      	pop	{r4, r5, r6, pc}
 800bce4:	ab01      	add	r3, sp, #4
 800bce6:	466a      	mov	r2, sp
 800bce8:	f7ff ffc8 	bl	800bc7c <__swhatbuf_r>
 800bcec:	9900      	ldr	r1, [sp, #0]
 800bcee:	4605      	mov	r5, r0
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	f7fd f9f1 	bl	80090d8 <_malloc_r>
 800bcf6:	b948      	cbnz	r0, 800bd0c <__smakebuf_r+0x44>
 800bcf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcfc:	059a      	lsls	r2, r3, #22
 800bcfe:	d4ef      	bmi.n	800bce0 <__smakebuf_r+0x18>
 800bd00:	f023 0303 	bic.w	r3, r3, #3
 800bd04:	f043 0302 	orr.w	r3, r3, #2
 800bd08:	81a3      	strh	r3, [r4, #12]
 800bd0a:	e7e3      	b.n	800bcd4 <__smakebuf_r+0xc>
 800bd0c:	89a3      	ldrh	r3, [r4, #12]
 800bd0e:	6020      	str	r0, [r4, #0]
 800bd10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd14:	81a3      	strh	r3, [r4, #12]
 800bd16:	9b00      	ldr	r3, [sp, #0]
 800bd18:	6163      	str	r3, [r4, #20]
 800bd1a:	9b01      	ldr	r3, [sp, #4]
 800bd1c:	6120      	str	r0, [r4, #16]
 800bd1e:	b15b      	cbz	r3, 800bd38 <__smakebuf_r+0x70>
 800bd20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd24:	4630      	mov	r0, r6
 800bd26:	f000 f81d 	bl	800bd64 <_isatty_r>
 800bd2a:	b128      	cbz	r0, 800bd38 <__smakebuf_r+0x70>
 800bd2c:	89a3      	ldrh	r3, [r4, #12]
 800bd2e:	f023 0303 	bic.w	r3, r3, #3
 800bd32:	f043 0301 	orr.w	r3, r3, #1
 800bd36:	81a3      	strh	r3, [r4, #12]
 800bd38:	89a3      	ldrh	r3, [r4, #12]
 800bd3a:	431d      	orrs	r5, r3
 800bd3c:	81a5      	strh	r5, [r4, #12]
 800bd3e:	e7cf      	b.n	800bce0 <__smakebuf_r+0x18>

0800bd40 <_fstat_r>:
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	4d07      	ldr	r5, [pc, #28]	; (800bd60 <_fstat_r+0x20>)
 800bd44:	2300      	movs	r3, #0
 800bd46:	4604      	mov	r4, r0
 800bd48:	4608      	mov	r0, r1
 800bd4a:	4611      	mov	r1, r2
 800bd4c:	602b      	str	r3, [r5, #0]
 800bd4e:	f7f6 f97a 	bl	8002046 <_fstat>
 800bd52:	1c43      	adds	r3, r0, #1
 800bd54:	d102      	bne.n	800bd5c <_fstat_r+0x1c>
 800bd56:	682b      	ldr	r3, [r5, #0]
 800bd58:	b103      	cbz	r3, 800bd5c <_fstat_r+0x1c>
 800bd5a:	6023      	str	r3, [r4, #0]
 800bd5c:	bd38      	pop	{r3, r4, r5, pc}
 800bd5e:	bf00      	nop
 800bd60:	20001a48 	.word	0x20001a48

0800bd64 <_isatty_r>:
 800bd64:	b538      	push	{r3, r4, r5, lr}
 800bd66:	4d06      	ldr	r5, [pc, #24]	; (800bd80 <_isatty_r+0x1c>)
 800bd68:	2300      	movs	r3, #0
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	4608      	mov	r0, r1
 800bd6e:	602b      	str	r3, [r5, #0]
 800bd70:	f7f6 f979 	bl	8002066 <_isatty>
 800bd74:	1c43      	adds	r3, r0, #1
 800bd76:	d102      	bne.n	800bd7e <_isatty_r+0x1a>
 800bd78:	682b      	ldr	r3, [r5, #0]
 800bd7a:	b103      	cbz	r3, 800bd7e <_isatty_r+0x1a>
 800bd7c:	6023      	str	r3, [r4, #0]
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
 800bd80:	20001a48 	.word	0x20001a48

0800bd84 <_init>:
 800bd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd86:	bf00      	nop
 800bd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd8a:	bc08      	pop	{r3}
 800bd8c:	469e      	mov	lr, r3
 800bd8e:	4770      	bx	lr

0800bd90 <_fini>:
 800bd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd92:	bf00      	nop
 800bd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd96:	bc08      	pop	{r3}
 800bd98:	469e      	mov	lr, r3
 800bd9a:	4770      	bx	lr
