
MicromouseFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000303c  0800a690  0800a690  0001a690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6cc  0800d6cc  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800d6cc  0800d6cc  0001d6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d6d4  0800d6d4  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6d4  0800d6d4  0001d6d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d6d8  0800d6d8  0001d6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800d6dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020200  2**0
                  CONTENTS
 10 .bss          00000778  20000200  20000200  00020200  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000978  20000978  00020200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015c86  00000000  00000000  00020273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036f6  00000000  00000000  00035ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012a8  00000000  00000000  000395f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e5f  00000000  00000000  0003a898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027a2d  00000000  00000000  0003b6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a93c  00000000  00000000  00063124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d51f2  00000000  00000000  0007da60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005df4  00000000  00000000  00152c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00158a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a674 	.word	0x0800a674

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800a674 	.word	0x0800a674

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	; 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	3a01      	subs	r2, #1
 8000d02:	bf28      	it	cs
 8000d04:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d08:	d2ed      	bcs.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_uldivmod>:
 8000e64:	b953      	cbnz	r3, 8000e7c <__aeabi_uldivmod+0x18>
 8000e66:	b94a      	cbnz	r2, 8000e7c <__aeabi_uldivmod+0x18>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	bf08      	it	eq
 8000e6c:	2800      	cmpeq	r0, #0
 8000e6e:	bf1c      	itt	ne
 8000e70:	f04f 31ff 	movne.w	r1, #4294967295
 8000e74:	f04f 30ff 	movne.w	r0, #4294967295
 8000e78:	f000 b970 	b.w	800115c <__aeabi_idiv0>
 8000e7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e84:	f000 f806 	bl	8000e94 <__udivmoddi4>
 8000e88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e90:	b004      	add	sp, #16
 8000e92:	4770      	bx	lr

08000e94 <__udivmoddi4>:
 8000e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e98:	9e08      	ldr	r6, [sp, #32]
 8000e9a:	460d      	mov	r5, r1
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	460f      	mov	r7, r1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d14a      	bne.n	8000f3a <__udivmoddi4+0xa6>
 8000ea4:	428a      	cmp	r2, r1
 8000ea6:	4694      	mov	ip, r2
 8000ea8:	d965      	bls.n	8000f76 <__udivmoddi4+0xe2>
 8000eaa:	fab2 f382 	clz	r3, r2
 8000eae:	b143      	cbz	r3, 8000ec2 <__udivmoddi4+0x2e>
 8000eb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb4:	f1c3 0220 	rsb	r2, r3, #32
 8000eb8:	409f      	lsls	r7, r3
 8000eba:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebe:	4317      	orrs	r7, r2
 8000ec0:	409c      	lsls	r4, r3
 8000ec2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ec6:	fa1f f58c 	uxth.w	r5, ip
 8000eca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ece:	0c22      	lsrs	r2, r4, #16
 8000ed0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ed4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ed8:	fb01 f005 	mul.w	r0, r1, r5
 8000edc:	4290      	cmp	r0, r2
 8000ede:	d90a      	bls.n	8000ef6 <__udivmoddi4+0x62>
 8000ee0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ee4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ee8:	f080 811c 	bcs.w	8001124 <__udivmoddi4+0x290>
 8000eec:	4290      	cmp	r0, r2
 8000eee:	f240 8119 	bls.w	8001124 <__udivmoddi4+0x290>
 8000ef2:	3902      	subs	r1, #2
 8000ef4:	4462      	add	r2, ip
 8000ef6:	1a12      	subs	r2, r2, r0
 8000ef8:	b2a4      	uxth	r4, r4
 8000efa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000efe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f06:	fb00 f505 	mul.w	r5, r0, r5
 8000f0a:	42a5      	cmp	r5, r4
 8000f0c:	d90a      	bls.n	8000f24 <__udivmoddi4+0x90>
 8000f0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000f12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f16:	f080 8107 	bcs.w	8001128 <__udivmoddi4+0x294>
 8000f1a:	42a5      	cmp	r5, r4
 8000f1c:	f240 8104 	bls.w	8001128 <__udivmoddi4+0x294>
 8000f20:	4464      	add	r4, ip
 8000f22:	3802      	subs	r0, #2
 8000f24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f28:	1b64      	subs	r4, r4, r5
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	b11e      	cbz	r6, 8000f36 <__udivmoddi4+0xa2>
 8000f2e:	40dc      	lsrs	r4, r3
 8000f30:	2300      	movs	r3, #0
 8000f32:	e9c6 4300 	strd	r4, r3, [r6]
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0xbc>
 8000f3e:	2e00      	cmp	r6, #0
 8000f40:	f000 80ed 	beq.w	800111e <__udivmoddi4+0x28a>
 8000f44:	2100      	movs	r1, #0
 8000f46:	e9c6 0500 	strd	r0, r5, [r6]
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f50:	fab3 f183 	clz	r1, r3
 8000f54:	2900      	cmp	r1, #0
 8000f56:	d149      	bne.n	8000fec <__udivmoddi4+0x158>
 8000f58:	42ab      	cmp	r3, r5
 8000f5a:	d302      	bcc.n	8000f62 <__udivmoddi4+0xce>
 8000f5c:	4282      	cmp	r2, r0
 8000f5e:	f200 80f8 	bhi.w	8001152 <__udivmoddi4+0x2be>
 8000f62:	1a84      	subs	r4, r0, r2
 8000f64:	eb65 0203 	sbc.w	r2, r5, r3
 8000f68:	2001      	movs	r0, #1
 8000f6a:	4617      	mov	r7, r2
 8000f6c:	2e00      	cmp	r6, #0
 8000f6e:	d0e2      	beq.n	8000f36 <__udivmoddi4+0xa2>
 8000f70:	e9c6 4700 	strd	r4, r7, [r6]
 8000f74:	e7df      	b.n	8000f36 <__udivmoddi4+0xa2>
 8000f76:	b902      	cbnz	r2, 8000f7a <__udivmoddi4+0xe6>
 8000f78:	deff      	udf	#255	; 0xff
 8000f7a:	fab2 f382 	clz	r3, r2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f040 8090 	bne.w	80010a4 <__udivmoddi4+0x210>
 8000f84:	1a8a      	subs	r2, r1, r2
 8000f86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8a:	fa1f fe8c 	uxth.w	lr, ip
 8000f8e:	2101      	movs	r1, #1
 8000f90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f94:	fb07 2015 	mls	r0, r7, r5, r2
 8000f98:	0c22      	lsrs	r2, r4, #16
 8000f9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f9e:	fb0e f005 	mul.w	r0, lr, r5
 8000fa2:	4290      	cmp	r0, r2
 8000fa4:	d908      	bls.n	8000fb8 <__udivmoddi4+0x124>
 8000fa6:	eb1c 0202 	adds.w	r2, ip, r2
 8000faa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fae:	d202      	bcs.n	8000fb6 <__udivmoddi4+0x122>
 8000fb0:	4290      	cmp	r0, r2
 8000fb2:	f200 80cb 	bhi.w	800114c <__udivmoddi4+0x2b8>
 8000fb6:	4645      	mov	r5, r8
 8000fb8:	1a12      	subs	r2, r2, r0
 8000fba:	b2a4      	uxth	r4, r4
 8000fbc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000fc0:	fb07 2210 	mls	r2, r7, r0, r2
 8000fc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000fcc:	45a6      	cmp	lr, r4
 8000fce:	d908      	bls.n	8000fe2 <__udivmoddi4+0x14e>
 8000fd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000fd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fd8:	d202      	bcs.n	8000fe0 <__udivmoddi4+0x14c>
 8000fda:	45a6      	cmp	lr, r4
 8000fdc:	f200 80bb 	bhi.w	8001156 <__udivmoddi4+0x2c2>
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	eba4 040e 	sub.w	r4, r4, lr
 8000fe6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000fea:	e79f      	b.n	8000f2c <__udivmoddi4+0x98>
 8000fec:	f1c1 0720 	rsb	r7, r1, #32
 8000ff0:	408b      	lsls	r3, r1
 8000ff2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ff6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ffa:	fa05 f401 	lsl.w	r4, r5, r1
 8000ffe:	fa20 f307 	lsr.w	r3, r0, r7
 8001002:	40fd      	lsrs	r5, r7
 8001004:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001008:	4323      	orrs	r3, r4
 800100a:	fbb5 f8f9 	udiv	r8, r5, r9
 800100e:	fa1f fe8c 	uxth.w	lr, ip
 8001012:	fb09 5518 	mls	r5, r9, r8, r5
 8001016:	0c1c      	lsrs	r4, r3, #16
 8001018:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800101c:	fb08 f50e 	mul.w	r5, r8, lr
 8001020:	42a5      	cmp	r5, r4
 8001022:	fa02 f201 	lsl.w	r2, r2, r1
 8001026:	fa00 f001 	lsl.w	r0, r0, r1
 800102a:	d90b      	bls.n	8001044 <__udivmoddi4+0x1b0>
 800102c:	eb1c 0404 	adds.w	r4, ip, r4
 8001030:	f108 3aff 	add.w	sl, r8, #4294967295
 8001034:	f080 8088 	bcs.w	8001148 <__udivmoddi4+0x2b4>
 8001038:	42a5      	cmp	r5, r4
 800103a:	f240 8085 	bls.w	8001148 <__udivmoddi4+0x2b4>
 800103e:	f1a8 0802 	sub.w	r8, r8, #2
 8001042:	4464      	add	r4, ip
 8001044:	1b64      	subs	r4, r4, r5
 8001046:	b29d      	uxth	r5, r3
 8001048:	fbb4 f3f9 	udiv	r3, r4, r9
 800104c:	fb09 4413 	mls	r4, r9, r3, r4
 8001050:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001054:	fb03 fe0e 	mul.w	lr, r3, lr
 8001058:	45a6      	cmp	lr, r4
 800105a:	d908      	bls.n	800106e <__udivmoddi4+0x1da>
 800105c:	eb1c 0404 	adds.w	r4, ip, r4
 8001060:	f103 35ff 	add.w	r5, r3, #4294967295
 8001064:	d26c      	bcs.n	8001140 <__udivmoddi4+0x2ac>
 8001066:	45a6      	cmp	lr, r4
 8001068:	d96a      	bls.n	8001140 <__udivmoddi4+0x2ac>
 800106a:	3b02      	subs	r3, #2
 800106c:	4464      	add	r4, ip
 800106e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001072:	fba3 9502 	umull	r9, r5, r3, r2
 8001076:	eba4 040e 	sub.w	r4, r4, lr
 800107a:	42ac      	cmp	r4, r5
 800107c:	46c8      	mov	r8, r9
 800107e:	46ae      	mov	lr, r5
 8001080:	d356      	bcc.n	8001130 <__udivmoddi4+0x29c>
 8001082:	d053      	beq.n	800112c <__udivmoddi4+0x298>
 8001084:	b156      	cbz	r6, 800109c <__udivmoddi4+0x208>
 8001086:	ebb0 0208 	subs.w	r2, r0, r8
 800108a:	eb64 040e 	sbc.w	r4, r4, lr
 800108e:	fa04 f707 	lsl.w	r7, r4, r7
 8001092:	40ca      	lsrs	r2, r1
 8001094:	40cc      	lsrs	r4, r1
 8001096:	4317      	orrs	r7, r2
 8001098:	e9c6 7400 	strd	r7, r4, [r6]
 800109c:	4618      	mov	r0, r3
 800109e:	2100      	movs	r1, #0
 80010a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a4:	f1c3 0120 	rsb	r1, r3, #32
 80010a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80010ac:	fa20 f201 	lsr.w	r2, r0, r1
 80010b0:	fa25 f101 	lsr.w	r1, r5, r1
 80010b4:	409d      	lsls	r5, r3
 80010b6:	432a      	orrs	r2, r5
 80010b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010bc:	fa1f fe8c 	uxth.w	lr, ip
 80010c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80010c4:	fb07 1510 	mls	r5, r7, r0, r1
 80010c8:	0c11      	lsrs	r1, r2, #16
 80010ca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80010ce:	fb00 f50e 	mul.w	r5, r0, lr
 80010d2:	428d      	cmp	r5, r1
 80010d4:	fa04 f403 	lsl.w	r4, r4, r3
 80010d8:	d908      	bls.n	80010ec <__udivmoddi4+0x258>
 80010da:	eb1c 0101 	adds.w	r1, ip, r1
 80010de:	f100 38ff 	add.w	r8, r0, #4294967295
 80010e2:	d22f      	bcs.n	8001144 <__udivmoddi4+0x2b0>
 80010e4:	428d      	cmp	r5, r1
 80010e6:	d92d      	bls.n	8001144 <__udivmoddi4+0x2b0>
 80010e8:	3802      	subs	r0, #2
 80010ea:	4461      	add	r1, ip
 80010ec:	1b49      	subs	r1, r1, r5
 80010ee:	b292      	uxth	r2, r2
 80010f0:	fbb1 f5f7 	udiv	r5, r1, r7
 80010f4:	fb07 1115 	mls	r1, r7, r5, r1
 80010f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010fc:	fb05 f10e 	mul.w	r1, r5, lr
 8001100:	4291      	cmp	r1, r2
 8001102:	d908      	bls.n	8001116 <__udivmoddi4+0x282>
 8001104:	eb1c 0202 	adds.w	r2, ip, r2
 8001108:	f105 38ff 	add.w	r8, r5, #4294967295
 800110c:	d216      	bcs.n	800113c <__udivmoddi4+0x2a8>
 800110e:	4291      	cmp	r1, r2
 8001110:	d914      	bls.n	800113c <__udivmoddi4+0x2a8>
 8001112:	3d02      	subs	r5, #2
 8001114:	4462      	add	r2, ip
 8001116:	1a52      	subs	r2, r2, r1
 8001118:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800111c:	e738      	b.n	8000f90 <__udivmoddi4+0xfc>
 800111e:	4631      	mov	r1, r6
 8001120:	4630      	mov	r0, r6
 8001122:	e708      	b.n	8000f36 <__udivmoddi4+0xa2>
 8001124:	4639      	mov	r1, r7
 8001126:	e6e6      	b.n	8000ef6 <__udivmoddi4+0x62>
 8001128:	4610      	mov	r0, r2
 800112a:	e6fb      	b.n	8000f24 <__udivmoddi4+0x90>
 800112c:	4548      	cmp	r0, r9
 800112e:	d2a9      	bcs.n	8001084 <__udivmoddi4+0x1f0>
 8001130:	ebb9 0802 	subs.w	r8, r9, r2
 8001134:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001138:	3b01      	subs	r3, #1
 800113a:	e7a3      	b.n	8001084 <__udivmoddi4+0x1f0>
 800113c:	4645      	mov	r5, r8
 800113e:	e7ea      	b.n	8001116 <__udivmoddi4+0x282>
 8001140:	462b      	mov	r3, r5
 8001142:	e794      	b.n	800106e <__udivmoddi4+0x1da>
 8001144:	4640      	mov	r0, r8
 8001146:	e7d1      	b.n	80010ec <__udivmoddi4+0x258>
 8001148:	46d0      	mov	r8, sl
 800114a:	e77b      	b.n	8001044 <__udivmoddi4+0x1b0>
 800114c:	3d02      	subs	r5, #2
 800114e:	4462      	add	r2, ip
 8001150:	e732      	b.n	8000fb8 <__udivmoddi4+0x124>
 8001152:	4608      	mov	r0, r1
 8001154:	e70a      	b.n	8000f6c <__udivmoddi4+0xd8>
 8001156:	4464      	add	r4, ip
 8001158:	3802      	subs	r0, #2
 800115a:	e742      	b.n	8000fe2 <__udivmoddi4+0x14e>

0800115c <__aeabi_idiv0>:
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop

08001160 <main>:
static void MX_TIM9_Init(void);           // BUZZER SOUND GENERATION
static void MX_TIM13_Init(void);          // INTERRUPT GYRO UPDATE
static void MX_TIM14_Init(void);          // INTERRUPT ADC UPDATE: IR

int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  HAL_Init();
 8001164:	f001 fbf6 	bl	8002954 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001168:	f000 f828 	bl	80011bc <SystemClock_Config>

  ITM_Port32(31) = 1;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <main+0x58>)
 800116e:	2201      	movs	r2, #1
 8001170:	601a      	str	r2, [r3, #0]


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001172:	f000 fbb7 	bl	80018e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001176:	f000 fb95 	bl	80018a4 <MX_DMA_Init>
  MX_SPI1_Init();
 800117a:	f000 f8c1 	bl	8001300 <MX_SPI1_Init>
  MX_TIM4_Init();
 800117e:	f000 f9d1 	bl	8001524 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001182:	f000 f885 	bl	8001290 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001186:	f000 f8f1 	bl	800136c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800118a:	f000 fb61 	bl	8001850 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800118e:	f000 f925 	bl	80013dc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001192:	f000 f973 	bl	800147c <MX_TIM2_Init>
  MX_TIM5_Init();
 8001196:	f000 fa5d 	bl	8001654 <MX_TIM5_Init>
  MX_TIM9_Init();
 800119a:	f000 faaf 	bl	80016fc <MX_TIM9_Init>
  MX_TIM13_Init();
 800119e:	f000 fb0f 	bl	80017c0 <MX_TIM13_Init>
  MX_TIM14_Init();
 80011a2:	f000 fb31 	bl	8001808 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  

  ITM_Port32(31) = 2;
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <main+0x58>)
 80011a8:	2202      	movs	r2, #2
 80011aa:	601a      	str	r2, [r3, #0]

  // TRANSFERRING THE CONTROL TO OUR LOOP
  cppmain();
 80011ac:	f006 fb08 	bl	80077c0 <cppmain>

  while (1)
  {
	  return 0;
 80011b0:	2300      	movs	r3, #0
  }
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000007c 	.word	0xe000007c

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b094      	sub	sp, #80	; 0x50
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 0320 	add.w	r3, r7, #32
 80011c6:	2230      	movs	r2, #48	; 0x30
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f007 fa2d 	bl	800862a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage*/
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	4b28      	ldr	r3, [pc, #160]	; (8001288 <SystemClock_Config+0xcc>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	4a27      	ldr	r2, [pc, #156]	; (8001288 <SystemClock_Config+0xcc>)
 80011ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ee:	6413      	str	r3, [r2, #64]	; 0x40
 80011f0:	4b25      	ldr	r3, [pc, #148]	; (8001288 <SystemClock_Config+0xcc>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <SystemClock_Config+0xd0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a21      	ldr	r2, [pc, #132]	; (800128c <SystemClock_Config+0xd0>)
 8001206:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b1f      	ldr	r3, [pc, #124]	; (800128c <SystemClock_Config+0xd0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure.  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001218:	2301      	movs	r3, #1
 800121a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800121c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001222:	2302      	movs	r3, #2
 8001224:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001226:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800122a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800122c:	2308      	movs	r3, #8
 800122e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001230:	2332      	movs	r3, #50	; 0x32
 8001232:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001234:	2302      	movs	r3, #2
 8001236:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001238:	2304      	movs	r3, #4
 800123a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	f107 0320 	add.w	r3, r7, #32
 8001240:	4618      	mov	r0, r3
 8001242:	f002 fdcf 	bl	8003de4 <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800124c:	f000 fc22 	bl	8001a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001254:	2302      	movs	r3, #2
 8001256:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001260:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2101      	movs	r1, #1
 800126c:	4618      	mov	r0, r3
 800126e:	f003 f831 	bl	80042d4 <HAL_RCC_ClockConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001278:	f000 fc0c 	bl	8001a94 <Error_Handler>
  }

  /** Enables the Clock Security System*/
  HAL_RCC_EnableCSS();
 800127c:	f003 f910 	bl	80044a0 <HAL_RCC_EnableCSS>
}
 8001280:	bf00      	nop
 8001282:	3750      	adds	r7, #80	; 0x50
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40023800 	.word	0x40023800
 800128c:	40007000 	.word	0x40007000

08001290 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) */
  hadc1.Instance = ADC1;
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <MX_ADC1_Init+0x64>)
 8001296:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <MX_ADC1_Init+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_ADC1_Init+0x64>)
 800129c:	2200      	movs	r2, #0
 800129e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_ADC1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MX_ADC1_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_ADC1_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <MX_ADC1_Init+0x64>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_ADC1_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_ADC1_Init+0x64>)
 80012c2:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <MX_ADC1_Init+0x6c>)
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_ADC1_Init+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_ADC1_Init+0x64>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_ADC1_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_ADC1_Init+0x64>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_ADC1_Init+0x64>)
 80012e2:	f001 fbcd 	bl	8002a80 <HAL_ADC_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 80012ec:	f000 fbd2 	bl	8001a94 <Error_Handler>
  }
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000021c 	.word	0x2000021c
 80012f8:	40012000 	.word	0x40012000
 80012fc:	0f000001 	.word	0x0f000001

08001300 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_SPI1_Init+0x64>)
 8001306:	4a18      	ldr	r2, [pc, #96]	; (8001368 <MX_SPI1_Init+0x68>)
 8001308:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <MX_SPI1_Init+0x64>)
 800130c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001310:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_SPI1_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_SPI1_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_SPI1_Init+0x64>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_SPI1_Init+0x64>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_SPI1_Init+0x64>)
 800132c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001330:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_SPI1_Init+0x64>)
 8001334:	2218      	movs	r2, #24
 8001336:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <MX_SPI1_Init+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_SPI1_Init+0x64>)
 8001340:	2200      	movs	r2, #0
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <MX_SPI1_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_SPI1_Init+0x64>)
 800134c:	220a      	movs	r2, #10
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_SPI1_Init+0x64>)
 8001352:	f003 fa04 	bl	800475e <HAL_SPI_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800135c:	f000 fb9a 	bl	8001a94 <Error_Handler>
  }
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200002c4 	.word	0x200002c4
 8001368:	40013000 	.word	0x40013000

0800136c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_SPI2_Init+0x68>)
 8001372:	4a19      	ldr	r2, [pc, #100]	; (80013d8 <MX_SPI2_Init+0x6c>)
 8001374:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_SPI2_Init+0x68>)
 8001378:	f44f 7282 	mov.w	r2, #260	; 0x104
 800137c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <MX_SPI2_Init+0x68>)
 8001380:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001384:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_SPI2_Init+0x68>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_SPI2_Init+0x68>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <MX_SPI2_Init+0x68>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_SPI2_Init+0x68>)
 800139a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800139e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_SPI2_Init+0x68>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_SPI2_Init+0x68>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_SPI2_Init+0x68>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_SPI2_Init+0x68>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_SPI2_Init+0x68>)
 80013ba:	220a      	movs	r2, #10
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_SPI2_Init+0x68>)
 80013c0:	f003 f9cd 	bl	800475e <HAL_SPI_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80013ca:	f000 fb63 	bl	8001a94 <Error_Handler>
  }
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000031c 	.word	0x2000031c
 80013d8:	40003800 	.word	0x40003800

080013dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f0:	463b      	mov	r3, r7
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80013f8:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <MX_TIM1_Init+0x98>)
 80013fa:	4a1f      	ldr	r2, [pc, #124]	; (8001478 <MX_TIM1_Init+0x9c>)
 80013fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 80013fe:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <MX_TIM1_Init+0x98>)
 8001400:	2231      	movs	r2, #49	; 0x31
 8001402:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <MX_TIM1_Init+0x98>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MX_TIM1_Init+0x98>)
 800140c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001410:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <MX_TIM1_Init+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <MX_TIM1_Init+0x98>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <MX_TIM1_Init+0x98>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001424:	4813      	ldr	r0, [pc, #76]	; (8001474 <MX_TIM1_Init+0x98>)
 8001426:	f003 ff43 	bl	80052b0 <HAL_TIM_Base_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM1_Init+0x58>
    Error_Handler();
 8001430:	f000 fb30 	bl	8001a94 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001438:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	4619      	mov	r1, r3
 8001440:	480c      	ldr	r0, [pc, #48]	; (8001474 <MX_TIM1_Init+0x98>)
 8001442:	f004 fc7d 	bl	8005d40 <HAL_TIM_ConfigClockSource>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM1_Init+0x74>
    Error_Handler();
 800144c:	f000 fb22 	bl	8001a94 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001458:	463b      	mov	r3, r7
 800145a:	4619      	mov	r1, r3
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_TIM1_Init+0x98>)
 800145e:	f005 f86f 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM1_Init+0x90>
    Error_Handler();
 8001468:	f000 fb14 	bl	8001a94 <Error_Handler>
}
 800146c:	bf00      	nop
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000374 	.word	0x20000374
 8001478:	40010000 	.word	0x40010000

0800147c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	; 0x30
 8001480:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	2224      	movs	r2, #36	; 0x24
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f007 f8cd 	bl	800862a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <MX_TIM2_Init+0xa4>)
 800149a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800149e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <MX_TIM2_Init+0xa4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a6:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <MX_TIM2_Init+0xa4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <MX_TIM2_Init+0xa4>)
 80014ae:	f04f 32ff 	mov.w	r2, #4294967295
 80014b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_TIM2_Init+0xa4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <MX_TIM2_Init+0xa4>)
 80014bc:	2280      	movs	r2, #128	; 0x80
 80014be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014c8:	2301      	movs	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014d8:	2301      	movs	r3, #1
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4619      	mov	r1, r3
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <MX_TIM2_Init+0xa4>)
 80014ec:	f004 f92a 	bl	8005744 <HAL_TIM_Encoder_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM2_Init+0x7e>
    Error_Handler();
 80014f6:	f000 facd 	bl	8001a94 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	4619      	mov	r1, r3
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <MX_TIM2_Init+0xa4>)
 8001508:	f005 f81a 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM2_Init+0x9a>
    Error_Handler();
 8001512:	f000 fabf 	bl	8001a94 <Error_Handler>
}
 8001516:	bf00      	nop
 8001518:	3730      	adds	r7, #48	; 0x30
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200003bc 	.word	0x200003bc

08001524 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08e      	sub	sp, #56	; 0x38
 8001528:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001538:	f107 0320 	add.w	r3, r7, #32
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
 8001550:	615a      	str	r2, [r3, #20]
 8001552:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001554:	4b3d      	ldr	r3, [pc, #244]	; (800164c <MX_TIM4_Init+0x128>)
 8001556:	4a3e      	ldr	r2, [pc, #248]	; (8001650 <MX_TIM4_Init+0x12c>)
 8001558:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800155a:	4b3c      	ldr	r3, [pc, #240]	; (800164c <MX_TIM4_Init+0x128>)
 800155c:	2200      	movs	r2, #0
 800155e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001560:	4b3a      	ldr	r3, [pc, #232]	; (800164c <MX_TIM4_Init+0x128>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4095;
 8001566:	4b39      	ldr	r3, [pc, #228]	; (800164c <MX_TIM4_Init+0x128>)
 8001568:	f640 72ff 	movw	r2, #4095	; 0xfff
 800156c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156e:	4b37      	ldr	r3, [pc, #220]	; (800164c <MX_TIM4_Init+0x128>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001574:	4b35      	ldr	r3, [pc, #212]	; (800164c <MX_TIM4_Init+0x128>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800157a:	4834      	ldr	r0, [pc, #208]	; (800164c <MX_TIM4_Init+0x128>)
 800157c:	f003 fe98 	bl	80052b0 <HAL_TIM_Base_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM4_Init+0x66>
    Error_Handler();
 8001586:	f000 fa85 	bl	8001a94 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001590:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001594:	4619      	mov	r1, r3
 8001596:	482d      	ldr	r0, [pc, #180]	; (800164c <MX_TIM4_Init+0x128>)
 8001598:	f004 fbd2 	bl	8005d40 <HAL_TIM_ConfigClockSource>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM4_Init+0x82>
    Error_Handler();
 80015a2:	f000 fa77 	bl	8001a94 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015a6:	4829      	ldr	r0, [pc, #164]	; (800164c <MX_TIM4_Init+0x128>)
 80015a8:	f003 ffaa 	bl	8005500 <HAL_TIM_PWM_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM4_Init+0x92>
    Error_Handler();
 80015b2:	f000 fa6f 	bl	8001a94 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	4619      	mov	r1, r3
 80015c4:	4821      	ldr	r0, [pc, #132]	; (800164c <MX_TIM4_Init+0x128>)
 80015c6:	f004 ffbb 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM4_Init+0xb0>
    Error_Handler();
 80015d0:	f000 fa60 	bl	8001a94 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d4:	2360      	movs	r3, #96	; 0x60
 80015d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	4619      	mov	r1, r3
 80015ea:	4818      	ldr	r0, [pc, #96]	; (800164c <MX_TIM4_Init+0x128>)
 80015ec:	f004 fae6 	bl	8005bbc <HAL_TIM_PWM_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM4_Init+0xd6>
    Error_Handler();
 80015f6:	f000 fa4d 	bl	8001a94 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2204      	movs	r2, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	4812      	ldr	r0, [pc, #72]	; (800164c <MX_TIM4_Init+0x128>)
 8001602:	f004 fadb 	bl	8005bbc <HAL_TIM_PWM_ConfigChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM4_Init+0xec>
    Error_Handler();
 800160c:	f000 fa42 	bl	8001a94 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2208      	movs	r2, #8
 8001614:	4619      	mov	r1, r3
 8001616:	480d      	ldr	r0, [pc, #52]	; (800164c <MX_TIM4_Init+0x128>)
 8001618:	f004 fad0 	bl	8005bbc <HAL_TIM_PWM_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM4_Init+0x102>
    Error_Handler();
 8001622:	f000 fa37 	bl	8001a94 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	220c      	movs	r2, #12
 800162a:	4619      	mov	r1, r3
 800162c:	4807      	ldr	r0, [pc, #28]	; (800164c <MX_TIM4_Init+0x128>)
 800162e:	f004 fac5 	bl	8005bbc <HAL_TIM_PWM_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM4_Init+0x118>
    Error_Handler();
 8001638:	f000 fa2c 	bl	8001a94 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 800163c:	4803      	ldr	r0, [pc, #12]	; (800164c <MX_TIM4_Init+0x128>)
 800163e:	f000 fcbd 	bl	8001fbc <HAL_TIM_MspPostInit>
}
 8001642:	bf00      	nop
 8001644:	3738      	adds	r7, #56	; 0x38
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000404 	.word	0x20000404
 8001650:	40000800 	.word	0x40000800

08001654 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	; 0x30
 8001658:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	2224      	movs	r2, #36	; 0x24
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f006 ffe1 	bl	800862a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
  htim5.Instance = TIM5;
 8001670:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <MX_TIM5_Init+0xa0>)
 8001672:	4a21      	ldr	r2, [pc, #132]	; (80016f8 <MX_TIM5_Init+0xa4>)
 8001674:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001676:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <MX_TIM5_Init+0xa0>)
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167c:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <MX_TIM5_Init+0xa0>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <MX_TIM5_Init+0xa0>)
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_TIM5_Init+0xa0>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <MX_TIM5_Init+0xa0>)
 8001692:	2280      	movs	r2, #128	; 0x80
 8001694:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8001696:	2302      	movs	r3, #2
 8001698:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800169e:	2301      	movs	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016ae:	2301      	movs	r3, #1
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	4619      	mov	r1, r3
 80016c0:	480c      	ldr	r0, [pc, #48]	; (80016f4 <MX_TIM5_Init+0xa0>)
 80016c2:	f004 f83f 	bl	8005744 <HAL_TIM_Encoder_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM5_Init+0x7c>
    Error_Handler();
 80016cc:	f000 f9e2 	bl	8001a94 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_TIM5_Init+0xa0>)
 80016de:	f004 ff2f 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM5_Init+0x98>
    Error_Handler();
 80016e8:	f000 f9d4 	bl	8001a94 <Error_Handler>
}
 80016ec:	bf00      	nop
 80016ee:	3730      	adds	r7, #48	; 0x30
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	2000044c 	.word	0x2000044c
 80016f8:	40000c00 	.word	0x40000c00

080016fc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001702:	f107 0320 	add.w	r3, r7, #32
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	615a      	str	r2, [r3, #20]
 8001720:	619a      	str	r2, [r3, #24]
  htim9.Instance = TIM9;
 8001722:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <MX_TIM9_Init+0xbc>)
 8001724:	4a25      	ldr	r2, [pc, #148]	; (80017bc <MX_TIM9_Init+0xc0>)
 8001726:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99; // 50 000 000 --> 500 000
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <MX_TIM9_Init+0xbc>)
 800172a:	2263      	movs	r2, #99	; 0x63
 800172c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <MX_TIM9_Init+0xbc>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;  // 500 000 --> 500
 8001734:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <MX_TIM9_Init+0xbc>)
 8001736:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800173a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173c:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <MX_TIM9_Init+0xbc>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001742:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <MX_TIM9_Init+0xbc>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001748:	481b      	ldr	r0, [pc, #108]	; (80017b8 <MX_TIM9_Init+0xbc>)
 800174a:	f003 fdb1 	bl	80052b0 <HAL_TIM_Base_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM9_Init+0x5c>
    Error_Handler();
 8001754:	f000 f99e 	bl	8001a94 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800175e:	f107 0320 	add.w	r3, r7, #32
 8001762:	4619      	mov	r1, r3
 8001764:	4814      	ldr	r0, [pc, #80]	; (80017b8 <MX_TIM9_Init+0xbc>)
 8001766:	f004 faeb 	bl	8005d40 <HAL_TIM_ConfigClockSource>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM9_Init+0x78>
    Error_Handler();
 8001770:	f000 f990 	bl	8001a94 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001774:	4810      	ldr	r0, [pc, #64]	; (80017b8 <MX_TIM9_Init+0xbc>)
 8001776:	f003 fec3 	bl	8005500 <HAL_TIM_PWM_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM9_Init+0x88>
    Error_Handler();
 8001780:	f000 f988 	bl	8001a94 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001784:	2360      	movs	r3, #96	; 0x60
 8001786:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	2200      	movs	r2, #0
 8001798:	4619      	mov	r1, r3
 800179a:	4807      	ldr	r0, [pc, #28]	; (80017b8 <MX_TIM9_Init+0xbc>)
 800179c:	f004 fa0e 	bl	8005bbc <HAL_TIM_PWM_ConfigChannel>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM9_Init+0xae>
    Error_Handler();
 80017a6:	f000 f975 	bl	8001a94 <Error_Handler>
  HAL_TIM_MspPostInit(&htim9);
 80017aa:	4803      	ldr	r0, [pc, #12]	; (80017b8 <MX_TIM9_Init+0xbc>)
 80017ac:	f000 fc06 	bl	8001fbc <HAL_TIM_MspPostInit>
}
 80017b0:	bf00      	nop
 80017b2:	3730      	adds	r7, #48	; 0x30
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000494 	.word	0x20000494
 80017bc:	40014000 	.word	0x40014000

080017c0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  htim13.Instance = TIM13;
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_TIM13_Init+0x40>)
 80017c6:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <MX_TIM13_Init+0x44>)
 80017c8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <MX_TIM13_Init+0x40>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_TIM13_Init+0x40>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 50000;
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <MX_TIM13_Init+0x40>)
 80017d8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80017dc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_TIM13_Init+0x40>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_TIM13_Init+0x40>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_TIM13_Init+0x40>)
 80017ec:	f003 fd60 	bl	80052b0 <HAL_TIM_Base_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM13_Init+0x3a>
    Error_Handler();
 80017f6:	f000 f94d 	bl	8001a94 <Error_Handler>
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200004dc 	.word	0x200004dc
 8001804:	40001c00 	.word	0x40001c00

08001808 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  htim14.Instance = TIM14;
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_TIM14_Init+0x40>)
 800180e:	4a0f      	ldr	r2, [pc, #60]	; (800184c <MX_TIM14_Init+0x44>)
 8001810:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1;
 8001812:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <MX_TIM14_Init+0x40>)
 8001814:	2201      	movs	r2, #1
 8001816:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <MX_TIM14_Init+0x40>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50000;
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <MX_TIM14_Init+0x40>)
 8001820:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001824:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <MX_TIM14_Init+0x40>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_TIM14_Init+0x40>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_TIM14_Init+0x40>)
 8001834:	f003 fd3c 	bl	80052b0 <HAL_TIM_Base_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800183e:	f000 f929 	bl	8001a94 <Error_Handler>
  }
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000524 	.word	0x20000524
 800184c:	40002000 	.word	0x40002000

08001850 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_USART1_UART_Init+0x4c>)
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <MX_USART1_UART_Init+0x50>)
 8001858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <MX_USART1_UART_Init+0x4c>)
 800185c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_USART1_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_USART1_UART_Init+0x4c>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <MX_USART1_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_USART1_UART_Init+0x4c>)
 8001876:	220c      	movs	r2, #12
 8001878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <MX_USART1_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_USART1_UART_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_USART1_UART_Init+0x4c>)
 8001888:	f004 feea 	bl	8006660 <HAL_UART_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001892:	f000 f8ff 	bl	8001a94 <Error_Handler>
  }
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000056c 	.word	0x2000056c
 80018a0:	40011000 	.word	0x40011000

080018a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_DMA_Init+0x3c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <MX_DMA_Init+0x3c>)
 80018b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_DMA_Init+0x3c>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2038      	movs	r0, #56	; 0x38
 80018cc:	f001 fdb3 	bl	8003436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018d0:	2038      	movs	r0, #56	; 0x38
 80018d2:	f001 fdcc 	bl	800346e <HAL_NVIC_EnableIRQ>

}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800

080018e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b60      	ldr	r3, [pc, #384]	; (8001a80 <MX_GPIO_Init+0x19c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a5f      	ldr	r2, [pc, #380]	; (8001a80 <MX_GPIO_Init+0x19c>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b5d      	ldr	r3, [pc, #372]	; (8001a80 <MX_GPIO_Init+0x19c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b59      	ldr	r3, [pc, #356]	; (8001a80 <MX_GPIO_Init+0x19c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a58      	ldr	r2, [pc, #352]	; (8001a80 <MX_GPIO_Init+0x19c>)
 8001920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <MX_GPIO_Init+0x19c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	4b52      	ldr	r3, [pc, #328]	; (8001a80 <MX_GPIO_Init+0x19c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a51      	ldr	r2, [pc, #324]	; (8001a80 <MX_GPIO_Init+0x19c>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b4f      	ldr	r3, [pc, #316]	; (8001a80 <MX_GPIO_Init+0x19c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	4b4b      	ldr	r3, [pc, #300]	; (8001a80 <MX_GPIO_Init+0x19c>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a4a      	ldr	r2, [pc, #296]	; (8001a80 <MX_GPIO_Init+0x19c>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b48      	ldr	r3, [pc, #288]	; (8001a80 <MX_GPIO_Init+0x19c>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	4b44      	ldr	r3, [pc, #272]	; (8001a80 <MX_GPIO_Init+0x19c>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a43      	ldr	r2, [pc, #268]	; (8001a80 <MX_GPIO_Init+0x19c>)
 8001974:	f043 0308 	orr.w	r3, r3, #8
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b41      	ldr	r3, [pc, #260]	; (8001a80 <MX_GPIO_Init+0x19c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED10_Pin|RF_EMITTER_Pin|D_C_Pin|DIAGONAL_EMITTER_Pin
 8001986:	2200      	movs	r2, #0
 8001988:	f641 51e7 	movw	r1, #7655	; 0x1de7
 800198c:	483d      	ldr	r0, [pc, #244]	; (8001a84 <MX_GPIO_Init+0x1a0>)
 800198e:	f002 fa0f 	bl	8003db0 <HAL_GPIO_WritePin>
                          |CE_Pin|LF_EMITTER_Pin|CS_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED11_Pin|LED9_Pin|LED8_Pin, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	f641 0110 	movw	r1, #6160	; 0x1810
 8001998:	483b      	ldr	r0, [pc, #236]	; (8001a88 <MX_GPIO_Init+0x1a4>)
 800199a:	f002 fa09 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED7_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80019a4:	4839      	ldr	r0, [pc, #228]	; (8001a8c <MX_GPIO_Init+0x1a8>)
 80019a6:	f002 fa03 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2104      	movs	r1, #4
 80019ae:	4838      	ldr	r0, [pc, #224]	; (8001a90 <MX_GPIO_Init+0x1ac>)
 80019b0:	f002 f9fe 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TB1_Pin */
  GPIO_InitStruct.Pin = TB1_Pin;
 80019b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TB1_GPIO_Port, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	482e      	ldr	r0, [pc, #184]	; (8001a84 <MX_GPIO_Init+0x1a0>)
 80019ca:	f002 f855 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED10_Pin RF_EMITTER_Pin D_C_Pin DIAGONAL_EMITTER_Pin
                           CE_Pin LF_EMITTER_Pin CS_Pin LED3_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED10_Pin|RF_EMITTER_Pin|D_C_Pin|DIAGONAL_EMITTER_Pin
 80019ce:	f641 53e7 	movw	r3, #7655	; 0x1de7
 80019d2:	617b      	str	r3, [r7, #20]
                          |CE_Pin|LF_EMITTER_Pin|CS_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	4827      	ldr	r0, [pc, #156]	; (8001a84 <MX_GPIO_Init+0x1a0>)
 80019e8:	f002 f846 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin;
 80019ec:	2308      	movs	r3, #8
 80019ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRDY_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	4823      	ldr	r0, [pc, #140]	; (8001a8c <MX_GPIO_Init+0x1a8>)
 8001a00:	f002 f83a 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 INT_Pin MISO_Pin BOOT0_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|INT_Pin|MISO_Pin|BOOT0_Pin;
 8001a04:	f244 4324 	movw	r3, #17444	; 0x4424
 8001a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	481b      	ldr	r0, [pc, #108]	; (8001a88 <MX_GPIO_Init+0x1a4>)
 8001a1a:	f002 f82d 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED11_Pin LED9_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED11_Pin|LED9_Pin|LED8_Pin;
 8001a1e:	f641 0310 	movw	r3, #6160	; 0x1810
 8001a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	4814      	ldr	r0, [pc, #80]	; (8001a88 <MX_GPIO_Init+0x1a4>)
 8001a38:	f002 f81e 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED7_Pin|LED1_Pin|LED2_Pin;
 8001a3c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	480d      	ldr	r0, [pc, #52]	; (8001a8c <MX_GPIO_Init+0x1a8>)
 8001a56:	f002 f80f 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4807      	ldr	r0, [pc, #28]	; (8001a90 <MX_GPIO_Init+0x1ac>)
 8001a72:	f002 f801 	bl	8003a78 <HAL_GPIO_Init>
}
 8001a76:	bf00      	nop
 8001a78:	3728      	adds	r7, #40	; 0x28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020800 	.word	0x40020800
 8001a88:	40020400 	.word	0x40020400
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020c00 	.word	0x40020c00

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
  __disable_irq();
  while (1);
 8001a9c:	e7fe      	b.n	8001a9c <Error_Handler+0x8>
	...

08001aa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_MspInit+0x4c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	4a0f      	ldr	r2, [pc, #60]	; (8001aec <HAL_MspInit+0x4c>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_MspInit+0x4c>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_MspInit+0x4c>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a08      	ldr	r2, [pc, #32]	; (8001aec <HAL_MspInit+0x4c>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_MspInit+0x4c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08c      	sub	sp, #48	; 0x30
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a49      	ldr	r2, [pc, #292]	; (8001c34 <HAL_ADC_MspInit+0x144>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	f040 808b 	bne.w	8001c2a <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <HAL_ADC_MspInit+0x148>)
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1c:	4a46      	ldr	r2, [pc, #280]	; (8001c38 <HAL_ADC_MspInit+0x148>)
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b22:	6453      	str	r3, [r2, #68]	; 0x44
 8001b24:	4b44      	ldr	r3, [pc, #272]	; (8001c38 <HAL_ADC_MspInit+0x148>)
 8001b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	4b40      	ldr	r3, [pc, #256]	; (8001c38 <HAL_ADC_MspInit+0x148>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	4a3f      	ldr	r2, [pc, #252]	; (8001c38 <HAL_ADC_MspInit+0x148>)
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b40:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <HAL_ADC_MspInit+0x148>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	4b39      	ldr	r3, [pc, #228]	; (8001c38 <HAL_ADC_MspInit+0x148>)
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	4a38      	ldr	r2, [pc, #224]	; (8001c38 <HAL_ADC_MspInit+0x148>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5c:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <HAL_ADC_MspInit+0x148>)
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <HAL_ADC_MspInit+0x148>)
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	4a31      	ldr	r2, [pc, #196]	; (8001c38 <HAL_ADC_MspInit+0x148>)
 8001b72:	f043 0302 	orr.w	r3, r3, #2
 8001b76:	6313      	str	r3, [r2, #48]	; 0x30
 8001b78:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <HAL_ADC_MspInit+0x148>)
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VOL_METER_Pin|R_RECEIVER_Pin;
 8001b84:	2318      	movs	r3, #24
 8001b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	4619      	mov	r1, r3
 8001b96:	4829      	ldr	r0, [pc, #164]	; (8001c3c <HAL_ADC_MspInit+0x14c>)
 8001b98:	f001 ff6e 	bl	8003a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_RECEIVER_Pin;
 8001b9c:	2310      	movs	r3, #16
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RF_RECEIVER_GPIO_Port, &GPIO_InitStruct);
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	4619      	mov	r1, r3
 8001bae:	4824      	ldr	r0, [pc, #144]	; (8001c40 <HAL_ADC_MspInit+0x150>)
 8001bb0:	f001 ff62 	bl	8003a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L_RECEIVER_Pin|LF_RECEIVER_Pin;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	481f      	ldr	r0, [pc, #124]	; (8001c44 <HAL_ADC_MspInit+0x154>)
 8001bc8:	f001 ff56 	bl	8003a78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_ADC_MspInit+0x158>)
 8001bce:	4a1f      	ldr	r2, [pc, #124]	; (8001c4c <HAL_ADC_MspInit+0x15c>)
 8001bd0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <HAL_ADC_MspInit+0x158>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_ADC_MspInit+0x158>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bde:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <HAL_ADC_MspInit+0x158>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_ADC_MspInit+0x158>)
 8001be6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bec:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <HAL_ADC_MspInit+0x158>)
 8001bee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bf2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_ADC_MspInit+0x158>)
 8001bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bfa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_ADC_MspInit+0x158>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_ADC_MspInit+0x158>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_ADC_MspInit+0x158>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c0e:	480e      	ldr	r0, [pc, #56]	; (8001c48 <HAL_ADC_MspInit+0x158>)
 8001c10:	f001 fc48 	bl	80034a4 <HAL_DMA_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8001c1a:	f7ff ff3b 	bl	8001a94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <HAL_ADC_MspInit+0x158>)
 8001c22:	639a      	str	r2, [r3, #56]	; 0x38
 8001c24:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <HAL_ADC_MspInit+0x158>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3730      	adds	r7, #48	; 0x30
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40012000 	.word	0x40012000
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020400 	.word	0x40020400
 8001c48:	20000264 	.word	0x20000264
 8001c4c:	40026410 	.word	0x40026410

08001c50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	; 0x30
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a32      	ldr	r2, [pc, #200]	; (8001d38 <HAL_SPI_MspInit+0xe8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d12c      	bne.n	8001ccc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <HAL_SPI_MspInit+0xec>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	4a30      	ldr	r2, [pc, #192]	; (8001d3c <HAL_SPI_MspInit+0xec>)
 8001c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c80:	6453      	str	r3, [r2, #68]	; 0x44
 8001c82:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_SPI_MspInit+0xec>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c8a:	61bb      	str	r3, [r7, #24]
 8001c8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <HAL_SPI_MspInit+0xec>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a29      	ldr	r2, [pc, #164]	; (8001d3c <HAL_SPI_MspInit+0xec>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_SPI_MspInit+0xec>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDI_Pin;
 8001caa:	23e0      	movs	r3, #224	; 0xe0
 8001cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cba:	2305      	movs	r3, #5
 8001cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f107 031c 	add.w	r3, r7, #28
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	481e      	ldr	r0, [pc, #120]	; (8001d40 <HAL_SPI_MspInit+0xf0>)
 8001cc6:	f001 fed7 	bl	8003a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001cca:	e031      	b.n	8001d30 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <HAL_SPI_MspInit+0xf4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d12c      	bne.n	8001d30 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_SPI_MspInit+0xec>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	4a17      	ldr	r2, [pc, #92]	; (8001d3c <HAL_SPI_MspInit+0xec>)
 8001ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_SPI_MspInit+0xec>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_SPI_MspInit+0xec>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a10      	ldr	r2, [pc, #64]	; (8001d3c <HAL_SPI_MspInit+0xec>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_SPI_MspInit+0xec>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CLK_Pin|DATA_IN_Pin;
 8001d0e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d20:	2305      	movs	r3, #5
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d24:	f107 031c 	add.w	r3, r7, #28
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4807      	ldr	r0, [pc, #28]	; (8001d48 <HAL_SPI_MspInit+0xf8>)
 8001d2c:	f001 fea4 	bl	8003a78 <HAL_GPIO_Init>
}
 8001d30:	bf00      	nop
 8001d32:	3730      	adds	r7, #48	; 0x30
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40013000 	.word	0x40013000
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40003800 	.word	0x40003800
 8001d48:	40020400 	.word	0x40020400

08001d4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a44      	ldr	r2, [pc, #272]	; (8001e6c <HAL_TIM_Base_MspInit+0x120>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d10e      	bne.n	8001d7c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	4a42      	ldr	r2, [pc, #264]	; (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6e:	4b40      	ldr	r3, [pc, #256]	; (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	61fb      	str	r3, [r7, #28]
 8001d78:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001d7a:	e072      	b.n	8001e62 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM4)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a3c      	ldr	r2, [pc, #240]	; (8001e74 <HAL_TIM_Base_MspInit+0x128>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d10e      	bne.n	8001da4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
 8001d8a:	4b39      	ldr	r3, [pc, #228]	; (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	4a38      	ldr	r2, [pc, #224]	; (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	6413      	str	r3, [r2, #64]	; 0x40
 8001d96:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	61bb      	str	r3, [r7, #24]
 8001da0:	69bb      	ldr	r3, [r7, #24]
}
 8001da2:	e05e      	b.n	8001e62 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM6)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a33      	ldr	r2, [pc, #204]	; (8001e78 <HAL_TIM_Base_MspInit+0x12c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d10e      	bne.n	8001dcc <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	4b2f      	ldr	r3, [pc, #188]	; (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a2e      	ldr	r2, [pc, #184]	; (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001db8:	f043 0310 	orr.w	r3, r3, #16
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	697b      	ldr	r3, [r7, #20]
}
 8001dca:	e04a      	b.n	8001e62 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM9)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a2a      	ldr	r2, [pc, #168]	; (8001e7c <HAL_TIM_Base_MspInit+0x130>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d10e      	bne.n	8001df4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a24      	ldr	r2, [pc, #144]	; (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
}
 8001df2:	e036      	b.n	8001e62 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM13)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a21      	ldr	r2, [pc, #132]	; (8001e80 <HAL_TIM_Base_MspInit+0x134>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d116      	bne.n	8001e2c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a1a      	ldr	r2, [pc, #104]	; (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	202c      	movs	r0, #44	; 0x2c
 8001e20:	f001 fb09 	bl	8003436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001e24:	202c      	movs	r0, #44	; 0x2c
 8001e26:	f001 fb22 	bl	800346e <HAL_NVIC_EnableIRQ>
}
 8001e2a:	e01a      	b.n	8001e62 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM14)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a14      	ldr	r2, [pc, #80]	; (8001e84 <HAL_TIM_Base_MspInit+0x138>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d115      	bne.n	8001e62 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	202d      	movs	r0, #45	; 0x2d
 8001e58:	f001 faed 	bl	8003436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001e5c:	202d      	movs	r0, #45	; 0x2d
 8001e5e:	f001 fb06 	bl	800346e <HAL_NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3720      	adds	r7, #32
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40010000 	.word	0x40010000
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40000800 	.word	0x40000800
 8001e78:	40001000 	.word	0x40001000
 8001e7c:	40014000 	.word	0x40014000
 8001e80:	40001c00 	.word	0x40001c00
 8001e84:	40002000 	.word	0x40002000

08001e88 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08c      	sub	sp, #48	; 0x30
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea8:	d14b      	bne.n	8001f42 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
 8001eae:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <HAL_TIM_Encoder_MspInit+0x124>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a3e      	ldr	r2, [pc, #248]	; (8001fac <HAL_TIM_Encoder_MspInit+0x124>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b3c      	ldr	r3, [pc, #240]	; (8001fac <HAL_TIM_Encoder_MspInit+0x124>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	61bb      	str	r3, [r7, #24]
 8001ec4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	4b38      	ldr	r3, [pc, #224]	; (8001fac <HAL_TIM_Encoder_MspInit+0x124>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a37      	ldr	r2, [pc, #220]	; (8001fac <HAL_TIM_Encoder_MspInit+0x124>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b35      	ldr	r3, [pc, #212]	; (8001fac <HAL_TIM_Encoder_MspInit+0x124>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	4b31      	ldr	r3, [pc, #196]	; (8001fac <HAL_TIM_Encoder_MspInit+0x124>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a30      	ldr	r2, [pc, #192]	; (8001fac <HAL_TIM_Encoder_MspInit+0x124>)
 8001eec:	f043 0302 	orr.w	r3, r3, #2
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b2e      	ldr	r3, [pc, #184]	; (8001fac <HAL_TIM_Encoder_MspInit+0x124>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f10:	2301      	movs	r3, #1
 8001f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	f107 031c 	add.w	r3, r7, #28
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4825      	ldr	r0, [pc, #148]	; (8001fb0 <HAL_TIM_Encoder_MspInit+0x128>)
 8001f1c:	f001 fdac 	bl	8003a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f20:	2308      	movs	r3, #8
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f30:	2301      	movs	r3, #1
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	4619      	mov	r1, r3
 8001f3a:	481e      	ldr	r0, [pc, #120]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001f3c:	f001 fd9c 	bl	8003a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001f40:	e030      	b.n	8001fa4 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM5)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a1c      	ldr	r2, [pc, #112]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0x130>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d12b      	bne.n	8001fa4 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <HAL_TIM_Encoder_MspInit+0x124>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	4a15      	ldr	r2, [pc, #84]	; (8001fac <HAL_TIM_Encoder_MspInit+0x124>)
 8001f56:	f043 0308 	orr.w	r3, r3, #8
 8001f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <HAL_TIM_Encoder_MspInit+0x124>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <HAL_TIM_Encoder_MspInit+0x124>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <HAL_TIM_Encoder_MspInit+0x124>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6313      	str	r3, [r2, #48]	; 0x30
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_TIM_Encoder_MspInit+0x124>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f84:	2303      	movs	r3, #3
 8001f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f94:	2302      	movs	r3, #2
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <HAL_TIM_Encoder_MspInit+0x128>)
 8001fa0:	f001 fd6a 	bl	8003a78 <HAL_GPIO_Init>
}
 8001fa4:	bf00      	nop
 8001fa6:	3730      	adds	r7, #48	; 0x30
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020000 	.word	0x40020000
 8001fb4:	40020400 	.word	0x40020400
 8001fb8:	40000c00 	.word	0x40000c00

08001fbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a24      	ldr	r2, [pc, #144]	; (800206c <HAL_TIM_MspPostInit+0xb0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d11f      	bne.n	800201e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	4b23      	ldr	r3, [pc, #140]	; (8002070 <HAL_TIM_MspPostInit+0xb4>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a22      	ldr	r2, [pc, #136]	; (8002070 <HAL_TIM_MspPostInit+0xb4>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b20      	ldr	r3, [pc, #128]	; (8002070 <HAL_TIM_MspPostInit+0xb4>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = LPWMA_Pin|LPWMB_Pin|RPWMA_Pin|RPWMB_Pin;
 8001ffa:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800200c:	2302      	movs	r3, #2
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	4619      	mov	r1, r3
 8002016:	4817      	ldr	r0, [pc, #92]	; (8002074 <HAL_TIM_MspPostInit+0xb8>)
 8002018:	f001 fd2e 	bl	8003a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800201c:	e022      	b.n	8002064 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a15      	ldr	r2, [pc, #84]	; (8002078 <HAL_TIM_MspPostInit+0xbc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d11d      	bne.n	8002064 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_TIM_MspPostInit+0xb4>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	4a0f      	ldr	r2, [pc, #60]	; (8002070 <HAL_TIM_MspPostInit+0xb4>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6313      	str	r3, [r2, #48]	; 0x30
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_TIM_MspPostInit+0xb4>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002044:	2304      	movs	r3, #4
 8002046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002054:	2303      	movs	r3, #3
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4619      	mov	r1, r3
 800205e:	4807      	ldr	r0, [pc, #28]	; (800207c <HAL_TIM_MspPostInit+0xc0>)
 8002060:	f001 fd0a 	bl	8003a78 <HAL_GPIO_Init>
}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	; 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40000800 	.word	0x40000800
 8002070:	40023800 	.word	0x40023800
 8002074:	40020400 	.word	0x40020400
 8002078:	40014000 	.word	0x40014000
 800207c:	40020000 	.word	0x40020000

08002080 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a19      	ldr	r2, [pc, #100]	; (8002104 <HAL_UART_MspInit+0x84>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d12c      	bne.n	80020fc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_UART_MspInit+0x88>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	4a17      	ldr	r2, [pc, #92]	; (8002108 <HAL_UART_MspInit+0x88>)
 80020ac:	f043 0310 	orr.w	r3, r3, #16
 80020b0:	6453      	str	r3, [r2, #68]	; 0x44
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_UART_MspInit+0x88>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_UART_MspInit+0x88>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a10      	ldr	r2, [pc, #64]	; (8002108 <HAL_UART_MspInit+0x88>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_UART_MspInit+0x88>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80020da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e8:	2303      	movs	r3, #3
 80020ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020ec:	2307      	movs	r3, #7
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	4619      	mov	r1, r3
 80020f6:	4805      	ldr	r0, [pc, #20]	; (800210c <HAL_UART_MspInit+0x8c>)
 80020f8:	f001 fcbe 	bl	8003a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020fc:	bf00      	nop
 80020fe:	3728      	adds	r7, #40	; 0x28
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40011000 	.word	0x40011000
 8002108:	40023800 	.word	0x40023800
 800210c:	40020000 	.word	0x40020000

08002110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002114:	f002 fb08 	bl	8004728 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002118:	e7fe      	b.n	8002118 <NMI_Handler+0x8>

0800211a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800211e:	e7fe      	b.n	800211e <HardFault_Handler+0x4>

08002120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002124:	e7fe      	b.n	8002124 <MemManage_Handler+0x4>

08002126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800212a:	e7fe      	b.n	800212a <BusFault_Handler+0x4>

0800212c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <UsageFault_Handler+0x4>

08002132 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002160:	f000 fc4a 	bl	80029f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}

08002168 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800216e:	f003 fc1d 	bl	80059ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200004dc 	.word	0x200004dc

0800217c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002182:	f003 fc13 	bl	80059ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000524 	.word	0x20000524

08002190 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <DMA2_Stream0_IRQHandler+0x10>)
 8002196:	f001 fa33 	bl	8003600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000264 	.word	0x20000264

080021a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return 1;
 80021a8:	2301      	movs	r3, #1
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_kill>:

int _kill(int pid, int sig)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021be:	f006 fadb 	bl	8008778 <__errno>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2216      	movs	r2, #22
 80021c6:	601a      	str	r2, [r3, #0]
  return -1;
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <_exit>:

void _exit (int status)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021dc:	f04f 31ff 	mov.w	r1, #4294967295
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ffe7 	bl	80021b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021e6:	e7fe      	b.n	80021e6 <_exit+0x12>

080021e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	e00a      	b.n	8002210 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021fa:	f3af 8000 	nop.w
 80021fe:	4601      	mov	r1, r0
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	60ba      	str	r2, [r7, #8]
 8002206:	b2ca      	uxtb	r2, r1
 8002208:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	3301      	adds	r3, #1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	dbf0      	blt.n	80021fa <_read+0x12>
  }

  return len;
 8002218:	687b      	ldr	r3, [r7, #4]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	e009      	b.n	8002248 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	60ba      	str	r2, [r7, #8]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3301      	adds	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	dbf1      	blt.n	8002234 <_write+0x12>
  }
  return len;
 8002250:	687b      	ldr	r3, [r7, #4]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <_close>:

int _close(int file)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002282:	605a      	str	r2, [r3, #4]
  return 0;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <_isatty>:

int _isatty(int file)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022cc:	4a14      	ldr	r2, [pc, #80]	; (8002320 <_sbrk+0x5c>)
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <_sbrk+0x60>)
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <_sbrk+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d102      	bne.n	80022e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <_sbrk+0x64>)
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <_sbrk+0x68>)
 80022e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <_sbrk+0x64>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d207      	bcs.n	8002304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f4:	f006 fa40 	bl	8008778 <__errno>
 80022f8:	4603      	mov	r3, r0
 80022fa:	220c      	movs	r2, #12
 80022fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	e009      	b.n	8002318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <_sbrk+0x64>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <_sbrk+0x64>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	4a05      	ldr	r2, [pc, #20]	; (8002328 <_sbrk+0x64>)
 8002314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002316:	68fb      	ldr	r3, [r7, #12]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20020000 	.word	0x20020000
 8002324:	00000400 	.word	0x00000400
 8002328:	200005b0 	.word	0x200005b0
 800232c:	20000978 	.word	0x20000978

08002330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <SystemInit+0x20>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	4a05      	ldr	r2, [pc, #20]	; (8002350 <SystemInit+0x20>)
 800233c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800238c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002358:	480d      	ldr	r0, [pc, #52]	; (8002390 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800235a:	490e      	ldr	r1, [pc, #56]	; (8002394 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800235c:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800235e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002360:	e002      	b.n	8002368 <LoopCopyDataInit>

08002362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002366:	3304      	adds	r3, #4

08002368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800236a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800236c:	d3f9      	bcc.n	8002362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800236e:	4a0b      	ldr	r2, [pc, #44]	; (800239c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002370:	4c0b      	ldr	r4, [pc, #44]	; (80023a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002374:	e001      	b.n	800237a <LoopFillZerobss>

08002376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002378:	3204      	adds	r2, #4

0800237a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800237a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800237c:	d3fb      	bcc.n	8002376 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800237e:	f7ff ffd7 	bl	8002330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002382:	f006 f9ff 	bl	8008784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002386:	f7fe feeb 	bl	8001160 <main>
  bx  lr    
 800238a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800238c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002394:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002398:	0800d6dc 	.word	0x0800d6dc
  ldr r2, =_sbss
 800239c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80023a0:	20000978 	.word	0x20000978

080023a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023a4:	e7fe      	b.n	80023a4 <ADC_IRQHandler>

080023a6 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 80023a6:	b580      	push	{r7, lr}
 80023a8:	af00      	add	r7, sp, #0
//
//    // Reset the OLED
//    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
//    HAL_Delay(10);
//    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
    HAL_Delay(10);
 80023aa:	200a      	movs	r0, #10
 80023ac:	f000 fb44 	bl	8002a38 <HAL_Delay>
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80023be:	2200      	movs	r2, #0
 80023c0:	2140      	movs	r1, #64	; 0x40
 80023c2:	480c      	ldr	r0, [pc, #48]	; (80023f4 <ssd1306_WriteCommand+0x40>)
 80023c4:	f001 fcf4 	bl	8003db0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 80023c8:	2200      	movs	r2, #0
 80023ca:	2104      	movs	r1, #4
 80023cc:	4809      	ldr	r0, [pc, #36]	; (80023f4 <ssd1306_WriteCommand+0x40>)
 80023ce:	f001 fcef 	bl	8003db0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 80023d2:	1df9      	adds	r1, r7, #7
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295
 80023d8:	2201      	movs	r2, #1
 80023da:	4807      	ldr	r0, [pc, #28]	; (80023f8 <ssd1306_WriteCommand+0x44>)
 80023dc:	f002 fa48 	bl	8004870 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80023e0:	2201      	movs	r2, #1
 80023e2:	2140      	movs	r1, #64	; 0x40
 80023e4:	4803      	ldr	r0, [pc, #12]	; (80023f4 <ssd1306_WriteCommand+0x40>)
 80023e6:	f001 fce3 	bl	8003db0 <HAL_GPIO_WritePin>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40020800 	.word	0x40020800
 80023f8:	2000031c 	.word	0x2000031c

080023fc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002406:	2200      	movs	r2, #0
 8002408:	2140      	movs	r1, #64	; 0x40
 800240a:	480c      	ldr	r0, [pc, #48]	; (800243c <ssd1306_WriteData+0x40>)
 800240c:	f001 fcd0 	bl	8003db0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8002410:	2201      	movs	r2, #1
 8002412:	2104      	movs	r1, #4
 8002414:	4809      	ldr	r0, [pc, #36]	; (800243c <ssd1306_WriteData+0x40>)
 8002416:	f001 fccb 	bl	8003db0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	b29a      	uxth	r2, r3
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4806      	ldr	r0, [pc, #24]	; (8002440 <ssd1306_WriteData+0x44>)
 8002426:	f002 fa23 	bl	8004870 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800242a:	2201      	movs	r2, #1
 800242c:	2140      	movs	r1, #64	; 0x40
 800242e:	4803      	ldr	r0, [pc, #12]	; (800243c <ssd1306_WriteData+0x40>)
 8002430:	f001 fcbe 	bl	8003db0 <HAL_GPIO_WritePin>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40020800 	.word	0x40020800
 8002440:	2000031c 	.word	0x2000031c

08002444 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002448:	f7ff ffad 	bl	80023a6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800244c:	2064      	movs	r0, #100	; 0x64
 800244e:	f000 faf3 	bl	8002a38 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002452:	2000      	movs	r0, #0
 8002454:	f000 fa60 	bl	8002918 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002458:	2020      	movs	r0, #32
 800245a:	f7ff ffab 	bl	80023b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800245e:	2000      	movs	r0, #0
 8002460:	f7ff ffa8 	bl	80023b4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002464:	20b0      	movs	r0, #176	; 0xb0
 8002466:	f7ff ffa5 	bl	80023b4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800246a:	20c8      	movs	r0, #200	; 0xc8
 800246c:	f7ff ffa2 	bl	80023b4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002470:	2000      	movs	r0, #0
 8002472:	f7ff ff9f 	bl	80023b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002476:	2010      	movs	r0, #16
 8002478:	f7ff ff9c 	bl	80023b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800247c:	2040      	movs	r0, #64	; 0x40
 800247e:	f7ff ff99 	bl	80023b4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002482:	20ff      	movs	r0, #255	; 0xff
 8002484:	f000 fa35 	bl	80028f2 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002488:	20a1      	movs	r0, #161	; 0xa1
 800248a:	f7ff ff93 	bl	80023b4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800248e:	20a6      	movs	r0, #166	; 0xa6
 8002490:	f7ff ff90 	bl	80023b4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002494:	20a8      	movs	r0, #168	; 0xa8
 8002496:	f7ff ff8d 	bl	80023b4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800249a:	201f      	movs	r0, #31
 800249c:	f7ff ff8a 	bl	80023b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80024a0:	20a4      	movs	r0, #164	; 0xa4
 80024a2:	f7ff ff87 	bl	80023b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80024a6:	20d3      	movs	r0, #211	; 0xd3
 80024a8:	f7ff ff84 	bl	80023b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80024ac:	2000      	movs	r0, #0
 80024ae:	f7ff ff81 	bl	80023b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80024b2:	20d5      	movs	r0, #213	; 0xd5
 80024b4:	f7ff ff7e 	bl	80023b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80024b8:	20f0      	movs	r0, #240	; 0xf0
 80024ba:	f7ff ff7b 	bl	80023b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80024be:	20d9      	movs	r0, #217	; 0xd9
 80024c0:	f7ff ff78 	bl	80023b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80024c4:	2022      	movs	r0, #34	; 0x22
 80024c6:	f7ff ff75 	bl	80023b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80024ca:	20da      	movs	r0, #218	; 0xda
 80024cc:	f7ff ff72 	bl	80023b4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80024d0:	2002      	movs	r0, #2
 80024d2:	f7ff ff6f 	bl	80023b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80024d6:	20db      	movs	r0, #219	; 0xdb
 80024d8:	f7ff ff6c 	bl	80023b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80024dc:	2020      	movs	r0, #32
 80024de:	f7ff ff69 	bl	80023b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80024e2:	208d      	movs	r0, #141	; 0x8d
 80024e4:	f7ff ff66 	bl	80023b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80024e8:	2014      	movs	r0, #20
 80024ea:	f7ff ff63 	bl	80023b4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80024ee:	2001      	movs	r0, #1
 80024f0:	f000 fa12 	bl	8002918 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80024f4:	2000      	movs	r0, #0
 80024f6:	f000 f80f 	bl	8002518 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80024fa:	f000 f831 	bl	8002560 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <ssd1306_Init+0xd0>)
 8002500:	2200      	movs	r2, #0
 8002502:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <ssd1306_Init+0xd0>)
 8002506:	2200      	movs	r2, #0
 8002508:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800250a:	4b02      	ldr	r3, [pc, #8]	; (8002514 <ssd1306_Init+0xd0>)
 800250c:	2201      	movs	r2, #1
 800250e:	711a      	strb	r2, [r3, #4]
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	200007b4 	.word	0x200007b4

08002518 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	e00d      	b.n	8002544 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <ssd1306_Fill+0x1a>
 800252e:	2100      	movs	r1, #0
 8002530:	e000      	b.n	8002534 <ssd1306_Fill+0x1c>
 8002532:	21ff      	movs	r1, #255	; 0xff
 8002534:	4a09      	ldr	r2, [pc, #36]	; (800255c <ssd1306_Fill+0x44>)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4413      	add	r3, r2
 800253a:	460a      	mov	r2, r1
 800253c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3301      	adds	r3, #1
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800254a:	d3ed      	bcc.n	8002528 <ssd1306_Fill+0x10>
    }
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	200005b4 	.word	0x200005b4

08002560 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002566:	2300      	movs	r3, #0
 8002568:	71fb      	strb	r3, [r7, #7]
 800256a:	e016      	b.n	800259a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	3b50      	subs	r3, #80	; 0x50
 8002570:	b2db      	uxtb	r3, r3
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ff1e 	bl	80023b4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002578:	2000      	movs	r0, #0
 800257a:	f7ff ff1b 	bl	80023b4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800257e:	2010      	movs	r0, #16
 8002580:	f7ff ff18 	bl	80023b4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	01db      	lsls	r3, r3, #7
 8002588:	4a08      	ldr	r2, [pc, #32]	; (80025ac <ssd1306_UpdateScreen+0x4c>)
 800258a:	4413      	add	r3, r2
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ff34 	bl	80023fc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	3301      	adds	r3, #1
 8002598:	71fb      	strb	r3, [r7, #7]
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d9e5      	bls.n	800256c <ssd1306_UpdateScreen+0xc>
    }
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200005b4 	.word	0x200005b4

080025b0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
 80025ba:	460b      	mov	r3, r1
 80025bc:	71bb      	strb	r3, [r7, #6]
 80025be:	4613      	mov	r3, r2
 80025c0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db3d      	blt.n	8002646 <ssd1306_DrawPixel+0x96>
 80025ca:	79bb      	ldrb	r3, [r7, #6]
 80025cc:	2b1f      	cmp	r3, #31
 80025ce:	d83a      	bhi.n	8002646 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 80025d0:	797b      	ldrb	r3, [r7, #5]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d11a      	bne.n	800260c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80025d6:	79fa      	ldrb	r2, [r7, #7]
 80025d8:	79bb      	ldrb	r3, [r7, #6]
 80025da:	08db      	lsrs	r3, r3, #3
 80025dc:	b2d8      	uxtb	r0, r3
 80025de:	4603      	mov	r3, r0
 80025e0:	01db      	lsls	r3, r3, #7
 80025e2:	4413      	add	r3, r2
 80025e4:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <ssd1306_DrawPixel+0xa4>)
 80025e6:	5cd3      	ldrb	r3, [r2, r3]
 80025e8:	b25a      	sxtb	r2, r3
 80025ea:	79bb      	ldrb	r3, [r7, #6]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	2101      	movs	r1, #1
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	b25b      	sxtb	r3, r3
 80025f8:	4313      	orrs	r3, r2
 80025fa:	b259      	sxtb	r1, r3
 80025fc:	79fa      	ldrb	r2, [r7, #7]
 80025fe:	4603      	mov	r3, r0
 8002600:	01db      	lsls	r3, r3, #7
 8002602:	4413      	add	r3, r2
 8002604:	b2c9      	uxtb	r1, r1
 8002606:	4a13      	ldr	r2, [pc, #76]	; (8002654 <ssd1306_DrawPixel+0xa4>)
 8002608:	54d1      	strb	r1, [r2, r3]
 800260a:	e01d      	b.n	8002648 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800260c:	79fa      	ldrb	r2, [r7, #7]
 800260e:	79bb      	ldrb	r3, [r7, #6]
 8002610:	08db      	lsrs	r3, r3, #3
 8002612:	b2d8      	uxtb	r0, r3
 8002614:	4603      	mov	r3, r0
 8002616:	01db      	lsls	r3, r3, #7
 8002618:	4413      	add	r3, r2
 800261a:	4a0e      	ldr	r2, [pc, #56]	; (8002654 <ssd1306_DrawPixel+0xa4>)
 800261c:	5cd3      	ldrb	r3, [r2, r3]
 800261e:	b25a      	sxtb	r2, r3
 8002620:	79bb      	ldrb	r3, [r7, #6]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	2101      	movs	r1, #1
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	b25b      	sxtb	r3, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	b25b      	sxtb	r3, r3
 8002632:	4013      	ands	r3, r2
 8002634:	b259      	sxtb	r1, r3
 8002636:	79fa      	ldrb	r2, [r7, #7]
 8002638:	4603      	mov	r3, r0
 800263a:	01db      	lsls	r3, r3, #7
 800263c:	4413      	add	r3, r2
 800263e:	b2c9      	uxtb	r1, r1
 8002640:	4a04      	ldr	r2, [pc, #16]	; (8002654 <ssd1306_DrawPixel+0xa4>)
 8002642:	54d1      	strb	r1, [r2, r3]
 8002644:	e000      	b.n	8002648 <ssd1306_DrawPixel+0x98>
        return;
 8002646:	bf00      	nop
    }
}
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	200005b4 	.word	0x200005b4

08002658 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b089      	sub	sp, #36	; 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	4604      	mov	r4, r0
 8002660:	1d38      	adds	r0, r7, #4
 8002662:	e880 0006 	stmia.w	r0, {r1, r2}
 8002666:	461a      	mov	r2, r3
 8002668:	4623      	mov	r3, r4
 800266a:	73fb      	strb	r3, [r7, #15]
 800266c:	4613      	mov	r3, r2
 800266e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	2b1f      	cmp	r3, #31
 8002674:	d902      	bls.n	800267c <ssd1306_WriteChar+0x24>
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b7e      	cmp	r3, #126	; 0x7e
 800267a:	d901      	bls.n	8002680 <ssd1306_WriteChar+0x28>
        return 0;
 800267c:	2300      	movs	r3, #0
 800267e:	e06d      	b.n	800275c <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002680:	4b38      	ldr	r3, [pc, #224]	; (8002764 <ssd1306_WriteChar+0x10c>)
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	793b      	ldrb	r3, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	2b80      	cmp	r3, #128	; 0x80
 800268c:	dc06      	bgt.n	800269c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800268e:	4b35      	ldr	r3, [pc, #212]	; (8002764 <ssd1306_WriteChar+0x10c>)
 8002690:	885b      	ldrh	r3, [r3, #2]
 8002692:	461a      	mov	r2, r3
 8002694:	797b      	ldrb	r3, [r7, #5]
 8002696:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002698:	2b20      	cmp	r3, #32
 800269a:	dd01      	ble.n	80026a0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800269c:	2300      	movs	r3, #0
 800269e:	e05d      	b.n	800275c <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	e04c      	b.n	8002740 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	3b20      	subs	r3, #32
 80026ac:	7979      	ldrb	r1, [r7, #5]
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	4619      	mov	r1, r3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	440b      	add	r3, r1
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80026c0:	2300      	movs	r3, #0
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	e034      	b.n	8002730 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d012      	beq.n	80026fc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80026d6:	4b23      	ldr	r3, [pc, #140]	; (8002764 <ssd1306_WriteChar+0x10c>)
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	b2d8      	uxtb	r0, r3
 80026e4:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <ssd1306_WriteChar+0x10c>)
 80026e6:	885b      	ldrh	r3, [r3, #2]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	7bba      	ldrb	r2, [r7, #14]
 80026f4:	4619      	mov	r1, r3
 80026f6:	f7ff ff5b 	bl	80025b0 <ssd1306_DrawPixel>
 80026fa:	e016      	b.n	800272a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <ssd1306_WriteChar+0x10c>)
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b2da      	uxtb	r2, r3
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	4413      	add	r3, r2
 8002708:	b2d8      	uxtb	r0, r3
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <ssd1306_WriteChar+0x10c>)
 800270c:	885b      	ldrh	r3, [r3, #2]
 800270e:	b2da      	uxtb	r2, r3
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	4413      	add	r3, r2
 8002716:	b2d9      	uxtb	r1, r3
 8002718:	7bbb      	ldrb	r3, [r7, #14]
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	f7ff ff43 	bl	80025b0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	3301      	adds	r3, #1
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	793b      	ldrb	r3, [r7, #4]
 8002732:	461a      	mov	r2, r3
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	4293      	cmp	r3, r2
 8002738:	d3c5      	bcc.n	80026c6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3301      	adds	r3, #1
 800273e:	61fb      	str	r3, [r7, #28]
 8002740:	797b      	ldrb	r3, [r7, #5]
 8002742:	461a      	mov	r2, r3
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	4293      	cmp	r3, r2
 8002748:	d3ad      	bcc.n	80026a6 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <ssd1306_WriteChar+0x10c>)
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	793b      	ldrb	r3, [r7, #4]
 8002750:	b29b      	uxth	r3, r3
 8002752:	4413      	add	r3, r2
 8002754:	b29a      	uxth	r2, r3
 8002756:	4b03      	ldr	r3, [pc, #12]	; (8002764 <ssd1306_WriteChar+0x10c>)
 8002758:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800275a:	7bfb      	ldrb	r3, [r7, #15]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3724      	adds	r7, #36	; 0x24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd90      	pop	{r4, r7, pc}
 8002764:	200007b4 	.word	0x200007b4

08002768 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	1d38      	adds	r0, r7, #4
 8002772:	e880 0006 	stmia.w	r0, {r1, r2}
 8002776:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002778:	e012      	b.n	80027a0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	7818      	ldrb	r0, [r3, #0]
 800277e:	78fb      	ldrb	r3, [r7, #3]
 8002780:	1d3a      	adds	r2, r7, #4
 8002782:	ca06      	ldmia	r2, {r1, r2}
 8002784:	f7ff ff68 	bl	8002658 <ssd1306_WriteChar>
 8002788:	4603      	mov	r3, r0
 800278a:	461a      	mov	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d002      	beq.n	800279a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	e008      	b.n	80027ac <ssd1306_WriteString+0x44>
        }
        str++;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3301      	adds	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1e8      	bne.n	800277a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	781b      	ldrb	r3, [r3, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	460a      	mov	r2, r1
 80027be:	71fb      	strb	r3, [r7, #7]
 80027c0:	4613      	mov	r3, r2
 80027c2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <ssd1306_SetCursor+0x2c>)
 80027ca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80027cc:	79bb      	ldrb	r3, [r7, #6]
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <ssd1306_SetCursor+0x2c>)
 80027d2:	805a      	strh	r2, [r3, #2]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	200007b4 	.word	0x200007b4

080027e4 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4604      	mov	r4, r0
 80027ec:	4608      	mov	r0, r1
 80027ee:	4611      	mov	r1, r2
 80027f0:	461a      	mov	r2, r3
 80027f2:	4623      	mov	r3, r4
 80027f4:	71fb      	strb	r3, [r7, #7]
 80027f6:	4603      	mov	r3, r0
 80027f8:	71bb      	strb	r3, [r7, #6]
 80027fa:	460b      	mov	r3, r1
 80027fc:	717b      	strb	r3, [r7, #5]
 80027fe:	4613      	mov	r3, r2
 8002800:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8002802:	797b      	ldrb	r3, [r7, #5]
 8002804:	425b      	negs	r3, r3
 8002806:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 800280c:	797b      	ldrb	r3, [r7, #5]
 800280e:	f1c3 0301 	rsb	r3, r3, #1
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	2b00      	cmp	r3, #0
 800281c:	db65      	blt.n	80028ea <ssd1306_DrawCircle+0x106>
 800281e:	79bb      	ldrb	r3, [r7, #6]
 8002820:	2b1f      	cmp	r3, #31
 8002822:	d862      	bhi.n	80028ea <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	79fa      	ldrb	r2, [r7, #7]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	b2d8      	uxtb	r0, r3
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	79bb      	ldrb	r3, [r7, #6]
 8002834:	4413      	add	r3, r2
 8002836:	b2db      	uxtb	r3, r3
 8002838:	793a      	ldrb	r2, [r7, #4]
 800283a:	4619      	mov	r1, r3
 800283c:	f7ff feb8 	bl	80025b0 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	4413      	add	r3, r2
 8002848:	b2d8      	uxtb	r0, r3
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	79bb      	ldrb	r3, [r7, #6]
 8002850:	4413      	add	r3, r2
 8002852:	b2db      	uxtb	r3, r3
 8002854:	793a      	ldrb	r2, [r7, #4]
 8002856:	4619      	mov	r1, r3
 8002858:	f7ff feaa 	bl	80025b0 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	4413      	add	r3, r2
 8002864:	b2d8      	uxtb	r0, r3
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	79ba      	ldrb	r2, [r7, #6]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	793a      	ldrb	r2, [r7, #4]
 8002872:	4619      	mov	r1, r3
 8002874:	f7ff fe9c 	bl	80025b0 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	79fa      	ldrb	r2, [r7, #7]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	b2d8      	uxtb	r0, r3
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	79ba      	ldrb	r2, [r7, #6]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	793a      	ldrb	r2, [r7, #4]
 800288e:	4619      	mov	r1, r3
 8002890:	f7ff fe8e 	bl	80025b0 <ssd1306_DrawPixel>
        e2 = err;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	429a      	cmp	r2, r3
 800289e:	dc13      	bgt.n	80028c8 <ssd1306_DrawCircle+0xe4>
            y++;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	3301      	adds	r3, #1
 80028a4:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	3301      	adds	r3, #1
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4413      	add	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	425b      	negs	r3, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d105      	bne.n	80028c8 <ssd1306_DrawCircle+0xe4>
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	dc01      	bgt.n	80028c8 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	dd08      	ble.n	80028e2 <ssd1306_DrawCircle+0xfe>
            x++;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	3301      	adds	r3, #1
 80028d4:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	3301      	adds	r3, #1
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	dd9d      	ble.n	8002824 <ssd1306_DrawCircle+0x40>

    return;
 80028e8:	e000      	b.n	80028ec <ssd1306_DrawCircle+0x108>
        return;
 80028ea:	bf00      	nop
}
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd90      	pop	{r4, r7, pc}

080028f2 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b084      	sub	sp, #16
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	4603      	mov	r3, r0
 80028fa:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80028fc:	2381      	movs	r3, #129	; 0x81
 80028fe:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fd56 	bl	80023b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fd52 	bl	80023b4 <ssd1306_WriteCommand>
}
 8002910:	bf00      	nop
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002928:	23af      	movs	r3, #175	; 0xaf
 800292a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <ssd1306_SetDisplayOn+0x38>)
 800292e:	2201      	movs	r2, #1
 8002930:	715a      	strb	r2, [r3, #5]
 8002932:	e004      	b.n	800293e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002934:	23ae      	movs	r3, #174	; 0xae
 8002936:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <ssd1306_SetDisplayOn+0x38>)
 800293a:	2200      	movs	r2, #0
 800293c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fd37 	bl	80023b4 <ssd1306_WriteCommand>
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200007b4 	.word	0x200007b4

08002954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002958:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_Init+0x40>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0d      	ldr	r2, [pc, #52]	; (8002994 <HAL_Init+0x40>)
 800295e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002962:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_Init+0x40>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <HAL_Init+0x40>)
 800296a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800296e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_Init+0x40>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a07      	ldr	r2, [pc, #28]	; (8002994 <HAL_Init+0x40>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297c:	2003      	movs	r0, #3
 800297e:	f000 fd4f 	bl	8003420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002982:	200f      	movs	r0, #15
 8002984:	f000 f808 	bl	8002998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002988:	f7ff f88a 	bl	8001aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023c00 	.word	0x40023c00

08002998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_InitTick+0x54>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_InitTick+0x58>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fd67 	bl	800348a <HAL_SYSTICK_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00e      	b.n	80029e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b0f      	cmp	r3, #15
 80029ca:	d80a      	bhi.n	80029e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029cc:	2200      	movs	r2, #0
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f000 fd2f 	bl	8003436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d8:	4a06      	ldr	r2, [pc, #24]	; (80029f4 <HAL_InitTick+0x5c>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000000 	.word	0x20000000
 80029f0:	20000028 	.word	0x20000028
 80029f4:	20000024 	.word	0x20000024

080029f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_IncTick+0x20>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_IncTick+0x24>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	4a04      	ldr	r2, [pc, #16]	; (8002a1c <HAL_IncTick+0x24>)
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000028 	.word	0x20000028
 8002a1c:	200007bc 	.word	0x200007bc

08002a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return uwTick;
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <HAL_GetTick+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	200007bc 	.word	0x200007bc

08002a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a40:	f7ff ffee 	bl	8002a20 <HAL_GetTick>
 8002a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d005      	beq.n	8002a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_Delay+0x44>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a5e:	bf00      	nop
 8002a60:	f7ff ffde 	bl	8002a20 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d8f7      	bhi.n	8002a60 <HAL_Delay+0x28>
  {
  }
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000028 	.word	0x20000028

08002a80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e033      	b.n	8002afe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff f826 	bl	8001af0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d118      	bne.n	8002af0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ac6:	f023 0302 	bic.w	r3, r3, #2
 8002aca:	f043 0202 	orr.w	r2, r3, #2
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fad8 	bl	8003088 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f023 0303 	bic.w	r3, r3, #3
 8002ae6:	f043 0201 	orr.w	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
 8002aee:	e001      	b.n	8002af4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_Start+0x1a>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e0b2      	b.n	8002c88 <HAL_ADC_Start+0x180>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d018      	beq.n	8002b6a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b48:	4b52      	ldr	r3, [pc, #328]	; (8002c94 <HAL_ADC_Start+0x18c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a52      	ldr	r2, [pc, #328]	; (8002c98 <HAL_ADC_Start+0x190>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	0c9a      	lsrs	r2, r3, #18
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b5c:	e002      	b.n	8002b64 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f9      	bne.n	8002b5e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d17a      	bne.n	8002c6e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b80:	f023 0301 	bic.w	r3, r3, #1
 8002b84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ba2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb6:	d106      	bne.n	8002bc6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	f023 0206 	bic.w	r2, r3, #6
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	645a      	str	r2, [r3, #68]	; 0x44
 8002bc4:	e002      	b.n	8002bcc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bd4:	4b31      	ldr	r3, [pc, #196]	; (8002c9c <HAL_ADC_Start+0x194>)
 8002bd6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002be0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d12a      	bne.n	8002c44 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a2b      	ldr	r2, [pc, #172]	; (8002ca0 <HAL_ADC_Start+0x198>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d015      	beq.n	8002c24 <HAL_ADC_Start+0x11c>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a29      	ldr	r2, [pc, #164]	; (8002ca4 <HAL_ADC_Start+0x19c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d105      	bne.n	8002c0e <HAL_ADC_Start+0x106>
 8002c02:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <HAL_ADC_Start+0x194>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a25      	ldr	r2, [pc, #148]	; (8002ca8 <HAL_ADC_Start+0x1a0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d136      	bne.n	8002c86 <HAL_ADC_Start+0x17e>
 8002c18:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <HAL_ADC_Start+0x194>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d130      	bne.n	8002c86 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d129      	bne.n	8002c86 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	e020      	b.n	8002c86 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a15      	ldr	r2, [pc, #84]	; (8002ca0 <HAL_ADC_Start+0x198>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d11b      	bne.n	8002c86 <HAL_ADC_Start+0x17e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d114      	bne.n	8002c86 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	e00b      	b.n	8002c86 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f043 0210 	orr.w	r2, r3, #16
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	f043 0201 	orr.w	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	20000000 	.word	0x20000000
 8002c98:	431bde83 	.word	0x431bde83
 8002c9c:	40012300 	.word	0x40012300
 8002ca0:	40012000 	.word	0x40012000
 8002ca4:	40012100 	.word	0x40012100
 8002ca8:	40012200 	.word	0x40012200

08002cac <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_Stop+0x16>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e021      	b.n	8002d06 <HAL_ADC_Stop+0x5a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d109      	bne.n	8002cfc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	f043 0201 	orr.w	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2e:	d113      	bne.n	8002d58 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d3e:	d10b      	bne.n	8002d58 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	f043 0220 	orr.w	r2, r3, #32
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e063      	b.n	8002e20 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002d58:	f7ff fe62 	bl	8002a20 <HAL_GetTick>
 8002d5c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d5e:	e021      	b.n	8002da4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d66:	d01d      	beq.n	8002da4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d007      	beq.n	8002d7e <HAL_ADC_PollForConversion+0x6c>
 8002d6e:	f7ff fe57 	bl	8002a20 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d212      	bcs.n	8002da4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d00b      	beq.n	8002da4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	f043 0204 	orr.w	r2, r3, #4
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e03d      	b.n	8002e20 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d1d6      	bne.n	8002d60 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f06f 0212 	mvn.w	r2, #18
 8002dba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d123      	bne.n	8002e1e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d11f      	bne.n	8002e1e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d006      	beq.n	8002dfa <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d111      	bne.n	8002e1e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d105      	bne.n	8002e1e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x1c>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e105      	b.n	800306c <HAL_ADC_ConfigChannel+0x228>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b09      	cmp	r3, #9
 8002e6e:	d925      	bls.n	8002ebc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68d9      	ldr	r1, [r3, #12]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4613      	mov	r3, r2
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4413      	add	r3, r2
 8002e84:	3b1e      	subs	r3, #30
 8002e86:	2207      	movs	r2, #7
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43da      	mvns	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	400a      	ands	r2, r1
 8002e94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68d9      	ldr	r1, [r3, #12]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4403      	add	r3, r0
 8002eae:	3b1e      	subs	r3, #30
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	e022      	b.n	8002f02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6919      	ldr	r1, [r3, #16]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4613      	mov	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4413      	add	r3, r2
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	400a      	ands	r2, r1
 8002ede:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6919      	ldr	r1, [r3, #16]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4403      	add	r3, r0
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d824      	bhi.n	8002f54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	3b05      	subs	r3, #5
 8002f1c:	221f      	movs	r2, #31
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	400a      	ands	r2, r1
 8002f2a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	3b05      	subs	r3, #5
 8002f46:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	635a      	str	r2, [r3, #52]	; 0x34
 8002f52:	e04c      	b.n	8002fee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b0c      	cmp	r3, #12
 8002f5a:	d824      	bhi.n	8002fa6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3b23      	subs	r3, #35	; 0x23
 8002f6e:	221f      	movs	r2, #31
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43da      	mvns	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	3b23      	subs	r3, #35	; 0x23
 8002f98:	fa00 f203 	lsl.w	r2, r0, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
 8002fa4:	e023      	b.n	8002fee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3b41      	subs	r3, #65	; 0x41
 8002fb8:	221f      	movs	r2, #31
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	400a      	ands	r2, r1
 8002fc6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	3b41      	subs	r3, #65	; 0x41
 8002fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fee:	4b22      	ldr	r3, [pc, #136]	; (8003078 <HAL_ADC_ConfigChannel+0x234>)
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a21      	ldr	r2, [pc, #132]	; (800307c <HAL_ADC_ConfigChannel+0x238>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d109      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x1cc>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b12      	cmp	r3, #18
 8003002:	d105      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a19      	ldr	r2, [pc, #100]	; (800307c <HAL_ADC_ConfigChannel+0x238>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d123      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x21e>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b10      	cmp	r3, #16
 8003020:	d003      	beq.n	800302a <HAL_ADC_ConfigChannel+0x1e6>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b11      	cmp	r3, #17
 8003028:	d11b      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b10      	cmp	r3, #16
 800303c:	d111      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <HAL_ADC_ConfigChannel+0x23c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a10      	ldr	r2, [pc, #64]	; (8003084 <HAL_ADC_ConfigChannel+0x240>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	0c9a      	lsrs	r2, r3, #18
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003054:	e002      	b.n	800305c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	3b01      	subs	r3, #1
 800305a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f9      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	40012300 	.word	0x40012300
 800307c:	40012000 	.word	0x40012000
 8003080:	20000000 	.word	0x20000000
 8003084:	431bde83 	.word	0x431bde83

08003088 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003090:	4b79      	ldr	r3, [pc, #484]	; (8003278 <ADC_Init+0x1f0>)
 8003092:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	021a      	lsls	r2, r3, #8
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003102:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6899      	ldr	r1, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	4a58      	ldr	r2, [pc, #352]	; (800327c <ADC_Init+0x1f4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d022      	beq.n	8003166 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800312e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6899      	ldr	r1, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003150:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6899      	ldr	r1, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	e00f      	b.n	8003186 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003174:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003184:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0202 	bic.w	r2, r2, #2
 8003194:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6899      	ldr	r1, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	7e1b      	ldrb	r3, [r3, #24]
 80031a0:	005a      	lsls	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d01b      	beq.n	80031ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6859      	ldr	r1, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	3b01      	subs	r3, #1
 80031e0:	035a      	lsls	r2, r3, #13
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	e007      	b.n	80031fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800320a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	3b01      	subs	r3, #1
 8003218:	051a      	lsls	r2, r3, #20
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003230:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6899      	ldr	r1, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800323e:	025a      	lsls	r2, r3, #9
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003256:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6899      	ldr	r1, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	029a      	lsls	r2, r3, #10
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	609a      	str	r2, [r3, #8]
}
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40012300 	.word	0x40012300
 800327c:	0f000001 	.word	0x0f000001

08003280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800329c:	4013      	ands	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032b2:	4a04      	ldr	r2, [pc, #16]	; (80032c4 <__NVIC_SetPriorityGrouping+0x44>)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	60d3      	str	r3, [r2, #12]
}
 80032b8:	bf00      	nop
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032cc:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <__NVIC_GetPriorityGrouping+0x18>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	0a1b      	lsrs	r3, r3, #8
 80032d2:	f003 0307 	and.w	r3, r3, #7
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	db0b      	blt.n	800330e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	f003 021f 	and.w	r2, r3, #31
 80032fc:	4907      	ldr	r1, [pc, #28]	; (800331c <__NVIC_EnableIRQ+0x38>)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	2001      	movs	r0, #1
 8003306:	fa00 f202 	lsl.w	r2, r0, r2
 800330a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	e000e100 	.word	0xe000e100

08003320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	6039      	str	r1, [r7, #0]
 800332a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800332c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003330:	2b00      	cmp	r3, #0
 8003332:	db0a      	blt.n	800334a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	490c      	ldr	r1, [pc, #48]	; (800336c <__NVIC_SetPriority+0x4c>)
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	0112      	lsls	r2, r2, #4
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	440b      	add	r3, r1
 8003344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003348:	e00a      	b.n	8003360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4908      	ldr	r1, [pc, #32]	; (8003370 <__NVIC_SetPriority+0x50>)
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	3b04      	subs	r3, #4
 8003358:	0112      	lsls	r2, r2, #4
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	440b      	add	r3, r1
 800335e:	761a      	strb	r2, [r3, #24]
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000e100 	.word	0xe000e100
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003374:	b480      	push	{r7}
 8003376:	b089      	sub	sp, #36	; 0x24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f1c3 0307 	rsb	r3, r3, #7
 800338e:	2b04      	cmp	r3, #4
 8003390:	bf28      	it	cs
 8003392:	2304      	movcs	r3, #4
 8003394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3304      	adds	r3, #4
 800339a:	2b06      	cmp	r3, #6
 800339c:	d902      	bls.n	80033a4 <NVIC_EncodePriority+0x30>
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	3b03      	subs	r3, #3
 80033a2:	e000      	b.n	80033a6 <NVIC_EncodePriority+0x32>
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a8:	f04f 32ff 	mov.w	r2, #4294967295
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43da      	mvns	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	401a      	ands	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033bc:	f04f 31ff 	mov.w	r1, #4294967295
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	fa01 f303 	lsl.w	r3, r1, r3
 80033c6:	43d9      	mvns	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033cc:	4313      	orrs	r3, r2
         );
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3724      	adds	r7, #36	; 0x24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033ec:	d301      	bcc.n	80033f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ee:	2301      	movs	r3, #1
 80033f0:	e00f      	b.n	8003412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033f2:	4a0a      	ldr	r2, [pc, #40]	; (800341c <SysTick_Config+0x40>)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033fa:	210f      	movs	r1, #15
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	f7ff ff8e 	bl	8003320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <SysTick_Config+0x40>)
 8003406:	2200      	movs	r2, #0
 8003408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800340a:	4b04      	ldr	r3, [pc, #16]	; (800341c <SysTick_Config+0x40>)
 800340c:	2207      	movs	r2, #7
 800340e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	e000e010 	.word	0xe000e010

08003420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ff29 	bl	8003280 <__NVIC_SetPriorityGrouping>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003436:	b580      	push	{r7, lr}
 8003438:	b086      	sub	sp, #24
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003448:	f7ff ff3e 	bl	80032c8 <__NVIC_GetPriorityGrouping>
 800344c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	6978      	ldr	r0, [r7, #20]
 8003454:	f7ff ff8e 	bl	8003374 <NVIC_EncodePriority>
 8003458:	4602      	mov	r2, r0
 800345a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff ff5d 	bl	8003320 <__NVIC_SetPriority>
}
 8003466:	bf00      	nop
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	4603      	mov	r3, r0
 8003476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ff31 	bl	80032e4 <__NVIC_EnableIRQ>
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff ffa2 	bl	80033dc <SysTick_Config>
 8003498:	4603      	mov	r3, r0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034b0:	f7ff fab6 	bl	8002a20 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e099      	b.n	80035f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e0:	e00f      	b.n	8003502 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034e2:	f7ff fa9d 	bl	8002a20 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b05      	cmp	r3, #5
 80034ee:	d908      	bls.n	8003502 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2203      	movs	r2, #3
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e078      	b.n	80035f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e8      	bne.n	80034e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4b38      	ldr	r3, [pc, #224]	; (80035fc <HAL_DMA_Init+0x158>)
 800351c:	4013      	ands	r3, r2
 800351e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800352e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003546:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	2b04      	cmp	r3, #4
 800355a:	d107      	bne.n	800356c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	4313      	orrs	r3, r2
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f023 0307 	bic.w	r3, r3, #7
 8003582:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	2b04      	cmp	r3, #4
 8003594:	d117      	bne.n	80035c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	4313      	orrs	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00e      	beq.n	80035c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f9e9 	bl	8003980 <DMA_CheckFifoParam>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2240      	movs	r2, #64	; 0x40
 80035b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035c2:	2301      	movs	r3, #1
 80035c4:	e016      	b.n	80035f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f9a0 	bl	8003914 <DMA_CalcBaseAndBitshift>
 80035d4:	4603      	mov	r3, r0
 80035d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035dc:	223f      	movs	r2, #63	; 0x3f
 80035de:	409a      	lsls	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	f010803f 	.word	0xf010803f

08003600 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800360c:	4b8e      	ldr	r3, [pc, #568]	; (8003848 <HAL_DMA_IRQHandler+0x248>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a8e      	ldr	r2, [pc, #568]	; (800384c <HAL_DMA_IRQHandler+0x24c>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	0a9b      	lsrs	r3, r3, #10
 8003618:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362a:	2208      	movs	r2, #8
 800362c:	409a      	lsls	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4013      	ands	r3, r2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d01a      	beq.n	800366c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d013      	beq.n	800366c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0204 	bic.w	r2, r2, #4
 8003652:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003658:	2208      	movs	r2, #8
 800365a:	409a      	lsls	r2, r3
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	f043 0201 	orr.w	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003670:	2201      	movs	r2, #1
 8003672:	409a      	lsls	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4013      	ands	r3, r2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d012      	beq.n	80036a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00b      	beq.n	80036a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	2201      	movs	r2, #1
 8003690:	409a      	lsls	r2, r3
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369a:	f043 0202 	orr.w	r2, r3, #2
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a6:	2204      	movs	r2, #4
 80036a8:	409a      	lsls	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d012      	beq.n	80036d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00b      	beq.n	80036d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c4:	2204      	movs	r2, #4
 80036c6:	409a      	lsls	r2, r3
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d0:	f043 0204 	orr.w	r2, r3, #4
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036dc:	2210      	movs	r2, #16
 80036de:	409a      	lsls	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d043      	beq.n	8003770 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d03c      	beq.n	8003770 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fa:	2210      	movs	r2, #16
 80036fc:	409a      	lsls	r2, r3
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d018      	beq.n	8003742 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d108      	bne.n	8003730 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d024      	beq.n	8003770 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	4798      	blx	r3
 800372e:	e01f      	b.n	8003770 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01b      	beq.n	8003770 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	4798      	blx	r3
 8003740:	e016      	b.n	8003770 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d107      	bne.n	8003760 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0208 	bic.w	r2, r2, #8
 800375e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003774:	2220      	movs	r2, #32
 8003776:	409a      	lsls	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 808f 	beq.w	80038a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8087 	beq.w	80038a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003796:	2220      	movs	r2, #32
 8003798:	409a      	lsls	r2, r3
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b05      	cmp	r3, #5
 80037a8:	d136      	bne.n	8003818 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0216 	bic.w	r2, r2, #22
 80037b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d103      	bne.n	80037da <HAL_DMA_IRQHandler+0x1da>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d007      	beq.n	80037ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0208 	bic.w	r2, r2, #8
 80037e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ee:	223f      	movs	r2, #63	; 0x3f
 80037f0:	409a      	lsls	r2, r3
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380a:	2b00      	cmp	r3, #0
 800380c:	d07e      	beq.n	800390c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	4798      	blx	r3
        }
        return;
 8003816:	e079      	b.n	800390c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d01d      	beq.n	8003862 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10d      	bne.n	8003850 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	2b00      	cmp	r3, #0
 800383a:	d031      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	4798      	blx	r3
 8003844:	e02c      	b.n	80038a0 <HAL_DMA_IRQHandler+0x2a0>
 8003846:	bf00      	nop
 8003848:	20000000 	.word	0x20000000
 800384c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d023      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4798      	blx	r3
 8003860:	e01e      	b.n	80038a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10f      	bne.n	8003890 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0210 	bic.w	r2, r2, #16
 800387e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d032      	beq.n	800390e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d022      	beq.n	80038fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2205      	movs	r2, #5
 80038b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0201 	bic.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	3301      	adds	r3, #1
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d307      	bcc.n	80038e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f2      	bne.n	80038cc <HAL_DMA_IRQHandler+0x2cc>
 80038e6:	e000      	b.n	80038ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
 800390a:	e000      	b.n	800390e <HAL_DMA_IRQHandler+0x30e>
        return;
 800390c:	bf00      	nop
    }
  }
}
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	3b10      	subs	r3, #16
 8003924:	4a14      	ldr	r2, [pc, #80]	; (8003978 <DMA_CalcBaseAndBitshift+0x64>)
 8003926:	fba2 2303 	umull	r2, r3, r2, r3
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800392e:	4a13      	ldr	r2, [pc, #76]	; (800397c <DMA_CalcBaseAndBitshift+0x68>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4413      	add	r3, r2
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b03      	cmp	r3, #3
 8003940:	d909      	bls.n	8003956 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800394a:	f023 0303 	bic.w	r3, r3, #3
 800394e:	1d1a      	adds	r2, r3, #4
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	659a      	str	r2, [r3, #88]	; 0x58
 8003954:	e007      	b.n	8003966 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800395e:	f023 0303 	bic.w	r3, r3, #3
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	aaaaaaab 	.word	0xaaaaaaab
 800397c:	0800d354 	.word	0x0800d354

08003980 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d11f      	bne.n	80039da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d856      	bhi.n	8003a4e <DMA_CheckFifoParam+0xce>
 80039a0:	a201      	add	r2, pc, #4	; (adr r2, 80039a8 <DMA_CheckFifoParam+0x28>)
 80039a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a6:	bf00      	nop
 80039a8:	080039b9 	.word	0x080039b9
 80039ac:	080039cb 	.word	0x080039cb
 80039b0:	080039b9 	.word	0x080039b9
 80039b4:	08003a4f 	.word	0x08003a4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d046      	beq.n	8003a52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c8:	e043      	b.n	8003a52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039d2:	d140      	bne.n	8003a56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d8:	e03d      	b.n	8003a56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e2:	d121      	bne.n	8003a28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d837      	bhi.n	8003a5a <DMA_CheckFifoParam+0xda>
 80039ea:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <DMA_CheckFifoParam+0x70>)
 80039ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f0:	08003a01 	.word	0x08003a01
 80039f4:	08003a07 	.word	0x08003a07
 80039f8:	08003a01 	.word	0x08003a01
 80039fc:	08003a19 	.word	0x08003a19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
      break;
 8003a04:	e030      	b.n	8003a68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d025      	beq.n	8003a5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a16:	e022      	b.n	8003a5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a20:	d11f      	bne.n	8003a62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a26:	e01c      	b.n	8003a62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d903      	bls.n	8003a36 <DMA_CheckFifoParam+0xb6>
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d003      	beq.n	8003a3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a34:	e018      	b.n	8003a68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	73fb      	strb	r3, [r7, #15]
      break;
 8003a3a:	e015      	b.n	8003a68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00e      	beq.n	8003a66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a4c:	e00b      	b.n	8003a66 <DMA_CheckFifoParam+0xe6>
      break;
 8003a4e:	bf00      	nop
 8003a50:	e00a      	b.n	8003a68 <DMA_CheckFifoParam+0xe8>
      break;
 8003a52:	bf00      	nop
 8003a54:	e008      	b.n	8003a68 <DMA_CheckFifoParam+0xe8>
      break;
 8003a56:	bf00      	nop
 8003a58:	e006      	b.n	8003a68 <DMA_CheckFifoParam+0xe8>
      break;
 8003a5a:	bf00      	nop
 8003a5c:	e004      	b.n	8003a68 <DMA_CheckFifoParam+0xe8>
      break;
 8003a5e:	bf00      	nop
 8003a60:	e002      	b.n	8003a68 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a62:	bf00      	nop
 8003a64:	e000      	b.n	8003a68 <DMA_CheckFifoParam+0xe8>
      break;
 8003a66:	bf00      	nop
    }
  } 
  
  return status; 
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop

08003a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b089      	sub	sp, #36	; 0x24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
 8003a92:	e16b      	b.n	8003d6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a94:	2201      	movs	r2, #1
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	f040 815a 	bne.w	8003d66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d005      	beq.n	8003aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d130      	bne.n	8003b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43db      	mvns	r3, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b00:	2201      	movs	r2, #1
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 0201 	and.w	r2, r3, #1
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d017      	beq.n	8003b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	2203      	movs	r2, #3
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d123      	bne.n	8003bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	08da      	lsrs	r2, r3, #3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3208      	adds	r2, #8
 8003b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	220f      	movs	r2, #15
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	08da      	lsrs	r2, r3, #3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3208      	adds	r2, #8
 8003bb6:	69b9      	ldr	r1, [r7, #24]
 8003bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 0203 	and.w	r2, r3, #3
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 80b4 	beq.w	8003d66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	4b60      	ldr	r3, [pc, #384]	; (8003d84 <HAL_GPIO_Init+0x30c>)
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	4a5f      	ldr	r2, [pc, #380]	; (8003d84 <HAL_GPIO_Init+0x30c>)
 8003c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c0e:	4b5d      	ldr	r3, [pc, #372]	; (8003d84 <HAL_GPIO_Init+0x30c>)
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c1a:	4a5b      	ldr	r2, [pc, #364]	; (8003d88 <HAL_GPIO_Init+0x310>)
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	089b      	lsrs	r3, r3, #2
 8003c20:	3302      	adds	r3, #2
 8003c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	220f      	movs	r2, #15
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a52      	ldr	r2, [pc, #328]	; (8003d8c <HAL_GPIO_Init+0x314>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d02b      	beq.n	8003c9e <HAL_GPIO_Init+0x226>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a51      	ldr	r2, [pc, #324]	; (8003d90 <HAL_GPIO_Init+0x318>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d025      	beq.n	8003c9a <HAL_GPIO_Init+0x222>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a50      	ldr	r2, [pc, #320]	; (8003d94 <HAL_GPIO_Init+0x31c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d01f      	beq.n	8003c96 <HAL_GPIO_Init+0x21e>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a4f      	ldr	r2, [pc, #316]	; (8003d98 <HAL_GPIO_Init+0x320>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d019      	beq.n	8003c92 <HAL_GPIO_Init+0x21a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a4e      	ldr	r2, [pc, #312]	; (8003d9c <HAL_GPIO_Init+0x324>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d013      	beq.n	8003c8e <HAL_GPIO_Init+0x216>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a4d      	ldr	r2, [pc, #308]	; (8003da0 <HAL_GPIO_Init+0x328>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00d      	beq.n	8003c8a <HAL_GPIO_Init+0x212>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a4c      	ldr	r2, [pc, #304]	; (8003da4 <HAL_GPIO_Init+0x32c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d007      	beq.n	8003c86 <HAL_GPIO_Init+0x20e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a4b      	ldr	r2, [pc, #300]	; (8003da8 <HAL_GPIO_Init+0x330>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d101      	bne.n	8003c82 <HAL_GPIO_Init+0x20a>
 8003c7e:	2307      	movs	r3, #7
 8003c80:	e00e      	b.n	8003ca0 <HAL_GPIO_Init+0x228>
 8003c82:	2308      	movs	r3, #8
 8003c84:	e00c      	b.n	8003ca0 <HAL_GPIO_Init+0x228>
 8003c86:	2306      	movs	r3, #6
 8003c88:	e00a      	b.n	8003ca0 <HAL_GPIO_Init+0x228>
 8003c8a:	2305      	movs	r3, #5
 8003c8c:	e008      	b.n	8003ca0 <HAL_GPIO_Init+0x228>
 8003c8e:	2304      	movs	r3, #4
 8003c90:	e006      	b.n	8003ca0 <HAL_GPIO_Init+0x228>
 8003c92:	2303      	movs	r3, #3
 8003c94:	e004      	b.n	8003ca0 <HAL_GPIO_Init+0x228>
 8003c96:	2302      	movs	r3, #2
 8003c98:	e002      	b.n	8003ca0 <HAL_GPIO_Init+0x228>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <HAL_GPIO_Init+0x228>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	f002 0203 	and.w	r2, r2, #3
 8003ca6:	0092      	lsls	r2, r2, #2
 8003ca8:	4093      	lsls	r3, r2
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cb0:	4935      	ldr	r1, [pc, #212]	; (8003d88 <HAL_GPIO_Init+0x310>)
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	089b      	lsrs	r3, r3, #2
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cbe:	4b3b      	ldr	r3, [pc, #236]	; (8003dac <HAL_GPIO_Init+0x334>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ce2:	4a32      	ldr	r2, [pc, #200]	; (8003dac <HAL_GPIO_Init+0x334>)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ce8:	4b30      	ldr	r3, [pc, #192]	; (8003dac <HAL_GPIO_Init+0x334>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d0c:	4a27      	ldr	r2, [pc, #156]	; (8003dac <HAL_GPIO_Init+0x334>)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d12:	4b26      	ldr	r3, [pc, #152]	; (8003dac <HAL_GPIO_Init+0x334>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d36:	4a1d      	ldr	r2, [pc, #116]	; (8003dac <HAL_GPIO_Init+0x334>)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d3c:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <HAL_GPIO_Init+0x334>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d60:	4a12      	ldr	r2, [pc, #72]	; (8003dac <HAL_GPIO_Init+0x334>)
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	61fb      	str	r3, [r7, #28]
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	2b0f      	cmp	r3, #15
 8003d70:	f67f ae90 	bls.w	8003a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop
 8003d78:	3724      	adds	r7, #36	; 0x24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40023800 	.word	0x40023800
 8003d88:	40013800 	.word	0x40013800
 8003d8c:	40020000 	.word	0x40020000
 8003d90:	40020400 	.word	0x40020400
 8003d94:	40020800 	.word	0x40020800
 8003d98:	40020c00 	.word	0x40020c00
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	40021400 	.word	0x40021400
 8003da4:	40021800 	.word	0x40021800
 8003da8:	40021c00 	.word	0x40021c00
 8003dac:	40013c00 	.word	0x40013c00

08003db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	807b      	strh	r3, [r7, #2]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dc0:	787b      	ldrb	r3, [r7, #1]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dc6:	887a      	ldrh	r2, [r7, #2]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dcc:	e003      	b.n	8003dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dce:	887b      	ldrh	r3, [r7, #2]
 8003dd0:	041a      	lsls	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	619a      	str	r2, [r3, #24]
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e267      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d075      	beq.n	8003eee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e02:	4b88      	ldr	r3, [pc, #544]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d00c      	beq.n	8003e28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e0e:	4b85      	ldr	r3, [pc, #532]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d112      	bne.n	8003e40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e1a:	4b82      	ldr	r3, [pc, #520]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e26:	d10b      	bne.n	8003e40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e28:	4b7e      	ldr	r3, [pc, #504]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d05b      	beq.n	8003eec <HAL_RCC_OscConfig+0x108>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d157      	bne.n	8003eec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e242      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e48:	d106      	bne.n	8003e58 <HAL_RCC_OscConfig+0x74>
 8003e4a:	4b76      	ldr	r3, [pc, #472]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a75      	ldr	r2, [pc, #468]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e01d      	b.n	8003e94 <HAL_RCC_OscConfig+0xb0>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCC_OscConfig+0x98>
 8003e62:	4b70      	ldr	r3, [pc, #448]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a6f      	ldr	r2, [pc, #444]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	4b6d      	ldr	r3, [pc, #436]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a6c      	ldr	r2, [pc, #432]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e00b      	b.n	8003e94 <HAL_RCC_OscConfig+0xb0>
 8003e7c:	4b69      	ldr	r3, [pc, #420]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a68      	ldr	r2, [pc, #416]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	4b66      	ldr	r3, [pc, #408]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a65      	ldr	r2, [pc, #404]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d013      	beq.n	8003ec4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7fe fdc0 	bl	8002a20 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea4:	f7fe fdbc 	bl	8002a20 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b64      	cmp	r3, #100	; 0x64
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e207      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb6:	4b5b      	ldr	r3, [pc, #364]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0xc0>
 8003ec2:	e014      	b.n	8003eee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fe fdac 	bl	8002a20 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ecc:	f7fe fda8 	bl	8002a20 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b64      	cmp	r3, #100	; 0x64
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e1f3      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ede:	4b51      	ldr	r3, [pc, #324]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0xe8>
 8003eea:	e000      	b.n	8003eee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d063      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003efa:	4b4a      	ldr	r3, [pc, #296]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 030c 	and.w	r3, r3, #12
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00b      	beq.n	8003f1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f06:	4b47      	ldr	r3, [pc, #284]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d11c      	bne.n	8003f4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f12:	4b44      	ldr	r3, [pc, #272]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d116      	bne.n	8003f4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1e:	4b41      	ldr	r3, [pc, #260]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_RCC_OscConfig+0x152>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d001      	beq.n	8003f36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e1c7      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f36:	4b3b      	ldr	r3, [pc, #236]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4937      	ldr	r1, [pc, #220]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f4a:	e03a      	b.n	8003fc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d020      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f54:	4b34      	ldr	r3, [pc, #208]	; (8004028 <HAL_RCC_OscConfig+0x244>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5a:	f7fe fd61 	bl	8002a20 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f62:	f7fe fd5d 	bl	8002a20 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e1a8      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f74:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f80:	4b28      	ldr	r3, [pc, #160]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	4925      	ldr	r1, [pc, #148]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	600b      	str	r3, [r1, #0]
 8003f94:	e015      	b.n	8003fc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_RCC_OscConfig+0x244>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fe fd40 	bl	8002a20 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa4:	f7fe fd3c 	bl	8002a20 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e187      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb6:	4b1b      	ldr	r3, [pc, #108]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d036      	beq.n	800403c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d016      	beq.n	8004004 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd6:	4b15      	ldr	r3, [pc, #84]	; (800402c <HAL_RCC_OscConfig+0x248>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fdc:	f7fe fd20 	bl	8002a20 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe4:	f7fe fd1c 	bl	8002a20 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e167      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x200>
 8004002:	e01b      	b.n	800403c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004004:	4b09      	ldr	r3, [pc, #36]	; (800402c <HAL_RCC_OscConfig+0x248>)
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800400a:	f7fe fd09 	bl	8002a20 <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004010:	e00e      	b.n	8004030 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004012:	f7fe fd05 	bl	8002a20 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d907      	bls.n	8004030 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e150      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
 8004024:	40023800 	.word	0x40023800
 8004028:	42470000 	.word	0x42470000
 800402c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004030:	4b88      	ldr	r3, [pc, #544]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1ea      	bne.n	8004012 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 8097 	beq.w	8004178 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404a:	2300      	movs	r3, #0
 800404c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800404e:	4b81      	ldr	r3, [pc, #516]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10f      	bne.n	800407a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405a:	2300      	movs	r3, #0
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	4b7d      	ldr	r3, [pc, #500]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	4a7c      	ldr	r2, [pc, #496]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004068:	6413      	str	r3, [r2, #64]	; 0x40
 800406a:	4b7a      	ldr	r3, [pc, #488]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004072:	60bb      	str	r3, [r7, #8]
 8004074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004076:	2301      	movs	r3, #1
 8004078:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407a:	4b77      	ldr	r3, [pc, #476]	; (8004258 <HAL_RCC_OscConfig+0x474>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	2b00      	cmp	r3, #0
 8004084:	d118      	bne.n	80040b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004086:	4b74      	ldr	r3, [pc, #464]	; (8004258 <HAL_RCC_OscConfig+0x474>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a73      	ldr	r2, [pc, #460]	; (8004258 <HAL_RCC_OscConfig+0x474>)
 800408c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004092:	f7fe fcc5 	bl	8002a20 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409a:	f7fe fcc1 	bl	8002a20 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e10c      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ac:	4b6a      	ldr	r3, [pc, #424]	; (8004258 <HAL_RCC_OscConfig+0x474>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d106      	bne.n	80040ce <HAL_RCC_OscConfig+0x2ea>
 80040c0:	4b64      	ldr	r3, [pc, #400]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	4a63      	ldr	r2, [pc, #396]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	6713      	str	r3, [r2, #112]	; 0x70
 80040cc:	e01c      	b.n	8004108 <HAL_RCC_OscConfig+0x324>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b05      	cmp	r3, #5
 80040d4:	d10c      	bne.n	80040f0 <HAL_RCC_OscConfig+0x30c>
 80040d6:	4b5f      	ldr	r3, [pc, #380]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	4a5e      	ldr	r2, [pc, #376]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040dc:	f043 0304 	orr.w	r3, r3, #4
 80040e0:	6713      	str	r3, [r2, #112]	; 0x70
 80040e2:	4b5c      	ldr	r3, [pc, #368]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	4a5b      	ldr	r2, [pc, #364]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	6713      	str	r3, [r2, #112]	; 0x70
 80040ee:	e00b      	b.n	8004108 <HAL_RCC_OscConfig+0x324>
 80040f0:	4b58      	ldr	r3, [pc, #352]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	4a57      	ldr	r2, [pc, #348]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040f6:	f023 0301 	bic.w	r3, r3, #1
 80040fa:	6713      	str	r3, [r2, #112]	; 0x70
 80040fc:	4b55      	ldr	r3, [pc, #340]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	4a54      	ldr	r2, [pc, #336]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004102:	f023 0304 	bic.w	r3, r3, #4
 8004106:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d015      	beq.n	800413c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004110:	f7fe fc86 	bl	8002a20 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004116:	e00a      	b.n	800412e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004118:	f7fe fc82 	bl	8002a20 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	; 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e0cb      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412e:	4b49      	ldr	r3, [pc, #292]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0ee      	beq.n	8004118 <HAL_RCC_OscConfig+0x334>
 800413a:	e014      	b.n	8004166 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413c:	f7fe fc70 	bl	8002a20 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004142:	e00a      	b.n	800415a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004144:	f7fe fc6c 	bl	8002a20 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004152:	4293      	cmp	r3, r2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e0b5      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415a:	4b3e      	ldr	r3, [pc, #248]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 800415c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1ee      	bne.n	8004144 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004166:	7dfb      	ldrb	r3, [r7, #23]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d105      	bne.n	8004178 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800416c:	4b39      	ldr	r3, [pc, #228]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	4a38      	ldr	r2, [pc, #224]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004176:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80a1 	beq.w	80042c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004182:	4b34      	ldr	r3, [pc, #208]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	2b08      	cmp	r3, #8
 800418c:	d05c      	beq.n	8004248 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d141      	bne.n	800421a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004196:	4b31      	ldr	r3, [pc, #196]	; (800425c <HAL_RCC_OscConfig+0x478>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419c:	f7fe fc40 	bl	8002a20 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fe fc3c 	bl	8002a20 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e087      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b6:	4b27      	ldr	r3, [pc, #156]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69da      	ldr	r2, [r3, #28]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	019b      	lsls	r3, r3, #6
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	085b      	lsrs	r3, r3, #1
 80041da:	3b01      	subs	r3, #1
 80041dc:	041b      	lsls	r3, r3, #16
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	061b      	lsls	r3, r3, #24
 80041e6:	491b      	ldr	r1, [pc, #108]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ec:	4b1b      	ldr	r3, [pc, #108]	; (800425c <HAL_RCC_OscConfig+0x478>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f2:	f7fe fc15 	bl	8002a20 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fa:	f7fe fc11 	bl	8002a20 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e05c      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420c:	4b11      	ldr	r3, [pc, #68]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x416>
 8004218:	e054      	b.n	80042c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421a:	4b10      	ldr	r3, [pc, #64]	; (800425c <HAL_RCC_OscConfig+0x478>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004220:	f7fe fbfe 	bl	8002a20 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004228:	f7fe fbfa 	bl	8002a20 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e045      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <HAL_RCC_OscConfig+0x470>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x444>
 8004246:	e03d      	b.n	80042c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d107      	bne.n	8004260 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e038      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
 8004254:	40023800 	.word	0x40023800
 8004258:	40007000 	.word	0x40007000
 800425c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004260:	4b1b      	ldr	r3, [pc, #108]	; (80042d0 <HAL_RCC_OscConfig+0x4ec>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d028      	beq.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004278:	429a      	cmp	r2, r3
 800427a:	d121      	bne.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004286:	429a      	cmp	r2, r3
 8004288:	d11a      	bne.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004290:	4013      	ands	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004296:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004298:	4293      	cmp	r3, r2
 800429a:	d111      	bne.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	3b01      	subs	r3, #1
 80042aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d107      	bne.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042bc:	429a      	cmp	r2, r3
 80042be:	d001      	beq.n	80042c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40023800 	.word	0x40023800

080042d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0cc      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042e8:	4b68      	ldr	r3, [pc, #416]	; (800448c <HAL_RCC_ClockConfig+0x1b8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d90c      	bls.n	8004310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f6:	4b65      	ldr	r3, [pc, #404]	; (800448c <HAL_RCC_ClockConfig+0x1b8>)
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fe:	4b63      	ldr	r3, [pc, #396]	; (800448c <HAL_RCC_ClockConfig+0x1b8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0b8      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d020      	beq.n	800435e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004328:	4b59      	ldr	r3, [pc, #356]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	4a58      	ldr	r2, [pc, #352]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004332:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004340:	4b53      	ldr	r3, [pc, #332]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4a52      	ldr	r2, [pc, #328]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800434a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800434c:	4b50      	ldr	r3, [pc, #320]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	494d      	ldr	r1, [pc, #308]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d044      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d107      	bne.n	8004382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004372:	4b47      	ldr	r3, [pc, #284]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d119      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e07f      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d003      	beq.n	8004392 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800438e:	2b03      	cmp	r3, #3
 8004390:	d107      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004392:	4b3f      	ldr	r3, [pc, #252]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d109      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e06f      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a2:	4b3b      	ldr	r3, [pc, #236]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e067      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043b2:	4b37      	ldr	r3, [pc, #220]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f023 0203 	bic.w	r2, r3, #3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	4934      	ldr	r1, [pc, #208]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c4:	f7fe fb2c 	bl	8002a20 <HAL_GetTick>
 80043c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ca:	e00a      	b.n	80043e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043cc:	f7fe fb28 	bl	8002a20 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043da:	4293      	cmp	r3, r2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e04f      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e2:	4b2b      	ldr	r3, [pc, #172]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 020c 	and.w	r2, r3, #12
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d1eb      	bne.n	80043cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043f4:	4b25      	ldr	r3, [pc, #148]	; (800448c <HAL_RCC_ClockConfig+0x1b8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d20c      	bcs.n	800441c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004402:	4b22      	ldr	r3, [pc, #136]	; (800448c <HAL_RCC_ClockConfig+0x1b8>)
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800440a:	4b20      	ldr	r3, [pc, #128]	; (800448c <HAL_RCC_ClockConfig+0x1b8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d001      	beq.n	800441c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e032      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004428:	4b19      	ldr	r3, [pc, #100]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4916      	ldr	r1, [pc, #88]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	4313      	orrs	r3, r2
 8004438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	490e      	ldr	r1, [pc, #56]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	4313      	orrs	r3, r2
 8004458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800445a:	f000 f82d 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 800445e:	4602      	mov	r2, r0
 8004460:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	490a      	ldr	r1, [pc, #40]	; (8004494 <HAL_RCC_ClockConfig+0x1c0>)
 800446c:	5ccb      	ldrb	r3, [r1, r3]
 800446e:	fa22 f303 	lsr.w	r3, r2, r3
 8004472:	4a09      	ldr	r2, [pc, #36]	; (8004498 <HAL_RCC_ClockConfig+0x1c4>)
 8004474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004476:	4b09      	ldr	r3, [pc, #36]	; (800449c <HAL_RCC_ClockConfig+0x1c8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe fa8c 	bl	8002998 <HAL_InitTick>

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40023c00 	.word	0x40023c00
 8004490:	40023800 	.word	0x40023800
 8004494:	0800a6b4 	.word	0x0800a6b4
 8004498:	20000000 	.word	0x20000000
 800449c:	20000024 	.word	0x20000024

080044a0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80044a4:	4b03      	ldr	r3, [pc, #12]	; (80044b4 <HAL_RCC_EnableCSS+0x14>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
}
 80044aa:	bf00      	nop
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	4247004c 	.word	0x4247004c

080044b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044bc:	b094      	sub	sp, #80	; 0x50
 80044be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	647b      	str	r3, [r7, #68]	; 0x44
 80044c4:	2300      	movs	r3, #0
 80044c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c8:	2300      	movs	r3, #0
 80044ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044d0:	4b79      	ldr	r3, [pc, #484]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 030c 	and.w	r3, r3, #12
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d00d      	beq.n	80044f8 <HAL_RCC_GetSysClockFreq+0x40>
 80044dc:	2b08      	cmp	r3, #8
 80044de:	f200 80e1 	bhi.w	80046a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_RCC_GetSysClockFreq+0x34>
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d003      	beq.n	80044f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ea:	e0db      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044ec:	4b73      	ldr	r3, [pc, #460]	; (80046bc <HAL_RCC_GetSysClockFreq+0x204>)
 80044ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80044f0:	e0db      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044f2:	4b72      	ldr	r3, [pc, #456]	; (80046bc <HAL_RCC_GetSysClockFreq+0x204>)
 80044f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044f6:	e0d8      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044f8:	4b6f      	ldr	r3, [pc, #444]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004500:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004502:	4b6d      	ldr	r3, [pc, #436]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d063      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800450e:	4b6a      	ldr	r3, [pc, #424]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	099b      	lsrs	r3, r3, #6
 8004514:	2200      	movs	r2, #0
 8004516:	63bb      	str	r3, [r7, #56]	; 0x38
 8004518:	63fa      	str	r2, [r7, #60]	; 0x3c
 800451a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004520:	633b      	str	r3, [r7, #48]	; 0x30
 8004522:	2300      	movs	r3, #0
 8004524:	637b      	str	r3, [r7, #52]	; 0x34
 8004526:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800452a:	4622      	mov	r2, r4
 800452c:	462b      	mov	r3, r5
 800452e:	f04f 0000 	mov.w	r0, #0
 8004532:	f04f 0100 	mov.w	r1, #0
 8004536:	0159      	lsls	r1, r3, #5
 8004538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800453c:	0150      	lsls	r0, r2, #5
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4621      	mov	r1, r4
 8004544:	1a51      	subs	r1, r2, r1
 8004546:	6139      	str	r1, [r7, #16]
 8004548:	4629      	mov	r1, r5
 800454a:	eb63 0301 	sbc.w	r3, r3, r1
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800455c:	4659      	mov	r1, fp
 800455e:	018b      	lsls	r3, r1, #6
 8004560:	4651      	mov	r1, sl
 8004562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004566:	4651      	mov	r1, sl
 8004568:	018a      	lsls	r2, r1, #6
 800456a:	4651      	mov	r1, sl
 800456c:	ebb2 0801 	subs.w	r8, r2, r1
 8004570:	4659      	mov	r1, fp
 8004572:	eb63 0901 	sbc.w	r9, r3, r1
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004582:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004586:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800458a:	4690      	mov	r8, r2
 800458c:	4699      	mov	r9, r3
 800458e:	4623      	mov	r3, r4
 8004590:	eb18 0303 	adds.w	r3, r8, r3
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	462b      	mov	r3, r5
 8004598:	eb49 0303 	adc.w	r3, r9, r3
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045aa:	4629      	mov	r1, r5
 80045ac:	028b      	lsls	r3, r1, #10
 80045ae:	4621      	mov	r1, r4
 80045b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045b4:	4621      	mov	r1, r4
 80045b6:	028a      	lsls	r2, r1, #10
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045be:	2200      	movs	r2, #0
 80045c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045c8:	f7fc fc4c 	bl	8000e64 <__aeabi_uldivmod>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4613      	mov	r3, r2
 80045d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045d4:	e058      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d6:	4b38      	ldr	r3, [pc, #224]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	099b      	lsrs	r3, r3, #6
 80045dc:	2200      	movs	r2, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	4611      	mov	r1, r2
 80045e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045e6:	623b      	str	r3, [r7, #32]
 80045e8:	2300      	movs	r3, #0
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24
 80045ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045f0:	4642      	mov	r2, r8
 80045f2:	464b      	mov	r3, r9
 80045f4:	f04f 0000 	mov.w	r0, #0
 80045f8:	f04f 0100 	mov.w	r1, #0
 80045fc:	0159      	lsls	r1, r3, #5
 80045fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004602:	0150      	lsls	r0, r2, #5
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4641      	mov	r1, r8
 800460a:	ebb2 0a01 	subs.w	sl, r2, r1
 800460e:	4649      	mov	r1, r9
 8004610:	eb63 0b01 	sbc.w	fp, r3, r1
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004620:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004624:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004628:	ebb2 040a 	subs.w	r4, r2, sl
 800462c:	eb63 050b 	sbc.w	r5, r3, fp
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	00eb      	lsls	r3, r5, #3
 800463a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800463e:	00e2      	lsls	r2, r4, #3
 8004640:	4614      	mov	r4, r2
 8004642:	461d      	mov	r5, r3
 8004644:	4643      	mov	r3, r8
 8004646:	18e3      	adds	r3, r4, r3
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	464b      	mov	r3, r9
 800464c:	eb45 0303 	adc.w	r3, r5, r3
 8004650:	607b      	str	r3, [r7, #4]
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800465e:	4629      	mov	r1, r5
 8004660:	028b      	lsls	r3, r1, #10
 8004662:	4621      	mov	r1, r4
 8004664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004668:	4621      	mov	r1, r4
 800466a:	028a      	lsls	r2, r1, #10
 800466c:	4610      	mov	r0, r2
 800466e:	4619      	mov	r1, r3
 8004670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004672:	2200      	movs	r2, #0
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	61fa      	str	r2, [r7, #28]
 8004678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800467c:	f7fc fbf2 	bl	8000e64 <__aeabi_uldivmod>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4613      	mov	r3, r2
 8004686:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	3301      	adds	r3, #1
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800469a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469c:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046a2:	e002      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_RCC_GetSysClockFreq+0x204>)
 80046a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3750      	adds	r7, #80	; 0x50
 80046b0:	46bd      	mov	sp, r7
 80046b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800
 80046bc:	00f42400 	.word	0x00f42400

080046c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046c4:	4b03      	ldr	r3, [pc, #12]	; (80046d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046c6:	681b      	ldr	r3, [r3, #0]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20000000 	.word	0x20000000

080046d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046dc:	f7ff fff0 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 80046e0:	4602      	mov	r2, r0
 80046e2:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	0a9b      	lsrs	r3, r3, #10
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	4903      	ldr	r1, [pc, #12]	; (80046fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ee:	5ccb      	ldrb	r3, [r1, r3]
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40023800 	.word	0x40023800
 80046fc:	0800a6c4 	.word	0x0800a6c4

08004700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004704:	f7ff ffdc 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 8004708:	4602      	mov	r2, r0
 800470a:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	0b5b      	lsrs	r3, r3, #13
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	4903      	ldr	r1, [pc, #12]	; (8004724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004716:	5ccb      	ldrb	r3, [r1, r3]
 8004718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800471c:	4618      	mov	r0, r3
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40023800 	.word	0x40023800
 8004724:	0800a6c4 	.word	0x0800a6c4

08004728 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800472c:	4b06      	ldr	r3, [pc, #24]	; (8004748 <HAL_RCC_NMI_IRQHandler+0x20>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004734:	2b80      	cmp	r3, #128	; 0x80
 8004736:	d104      	bne.n	8004742 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004738:	f000 f80a 	bl	8004750 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800473c:	4b03      	ldr	r3, [pc, #12]	; (800474c <HAL_RCC_NMI_IRQHandler+0x24>)
 800473e:	2280      	movs	r2, #128	; 0x80
 8004740:	701a      	strb	r2, [r3, #0]
  }
}
 8004742:	bf00      	nop
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40023800 	.word	0x40023800
 800474c:	4002380e 	.word	0x4002380e

08004750 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e07b      	b.n	8004868 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	2b00      	cmp	r3, #0
 8004776:	d108      	bne.n	800478a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004780:	d009      	beq.n	8004796 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	61da      	str	r2, [r3, #28]
 8004788:	e005      	b.n	8004796 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d106      	bne.n	80047b6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7fd fa4d 	bl	8001c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2202      	movs	r2, #2
 80047ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047cc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481a:	ea42 0103 	orr.w	r1, r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	0c1b      	lsrs	r3, r3, #16
 8004834:	f003 0104 	and.w	r1, r3, #4
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	f003 0210 	and.w	r2, r3, #16
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69da      	ldr	r2, [r3, #28]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004856:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_SPI_Transmit+0x22>
 800488e:	2302      	movs	r3, #2
 8004890:	e126      	b.n	8004ae0 <HAL_SPI_Transmit+0x270>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800489a:	f7fe f8c1 	bl	8002a20 <HAL_GetTick>
 800489e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048a0:	88fb      	ldrh	r3, [r7, #6]
 80048a2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d002      	beq.n	80048b6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048b0:	2302      	movs	r3, #2
 80048b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048b4:	e10b      	b.n	8004ace <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <HAL_SPI_Transmit+0x52>
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048c6:	e102      	b.n	8004ace <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2203      	movs	r2, #3
 80048cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	88fa      	ldrh	r2, [r7, #6]
 80048e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	88fa      	ldrh	r2, [r7, #6]
 80048e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490e:	d10f      	bne.n	8004930 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800491e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800492e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493a:	2b40      	cmp	r3, #64	; 0x40
 800493c:	d007      	beq.n	800494e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800494c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004956:	d14b      	bne.n	80049f0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_SPI_Transmit+0xf6>
 8004960:	8afb      	ldrh	r3, [r7, #22]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d13e      	bne.n	80049e4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	881a      	ldrh	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	1c9a      	adds	r2, r3, #2
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004980:	b29b      	uxth	r3, r3
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800498a:	e02b      	b.n	80049e4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b02      	cmp	r3, #2
 8004998:	d112      	bne.n	80049c0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	881a      	ldrh	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	1c9a      	adds	r2, r3, #2
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80049be:	e011      	b.n	80049e4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049c0:	f7fe f82e 	bl	8002a20 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d803      	bhi.n	80049d8 <HAL_SPI_Transmit+0x168>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d6:	d102      	bne.n	80049de <HAL_SPI_Transmit+0x16e>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049e2:	e074      	b.n	8004ace <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1ce      	bne.n	800498c <HAL_SPI_Transmit+0x11c>
 80049ee:	e04c      	b.n	8004a8a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_SPI_Transmit+0x18e>
 80049f8:	8afb      	ldrh	r3, [r7, #22]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d140      	bne.n	8004a80 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	330c      	adds	r3, #12
 8004a08:	7812      	ldrb	r2, [r2, #0]
 8004a0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a24:	e02c      	b.n	8004a80 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d113      	bne.n	8004a5c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	7812      	ldrb	r2, [r2, #0]
 8004a40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a5a:	e011      	b.n	8004a80 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a5c:	f7fd ffe0 	bl	8002a20 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d803      	bhi.n	8004a74 <HAL_SPI_Transmit+0x204>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a72:	d102      	bne.n	8004a7a <HAL_SPI_Transmit+0x20a>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d102      	bne.n	8004a80 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a7e:	e026      	b.n	8004ace <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1cd      	bne.n	8004a26 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	6839      	ldr	r1, [r7, #0]
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 fbcc 	bl	800522c <SPI_EndRxTxTransaction>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	613b      	str	r3, [r7, #16]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	613b      	str	r3, [r7, #16]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	77fb      	strb	r3, [r7, #31]
 8004aca:	e000      	b.n	8004ace <HAL_SPI_Transmit+0x25e>
  }

error:
 8004acc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ade:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3720      	adds	r7, #32
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b04:	d112      	bne.n	8004b2c <HAL_SPI_Receive+0x44>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10e      	bne.n	8004b2c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2204      	movs	r2, #4
 8004b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b16:	88fa      	ldrh	r2, [r7, #6]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f8f1 	bl	8004d0a <HAL_SPI_TransmitReceive>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	e0ea      	b.n	8004d02 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_SPI_Receive+0x52>
 8004b36:	2302      	movs	r3, #2
 8004b38:	e0e3      	b.n	8004d02 <HAL_SPI_Receive+0x21a>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b42:	f7fd ff6d 	bl	8002a20 <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d002      	beq.n	8004b5a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b54:	2302      	movs	r3, #2
 8004b56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b58:	e0ca      	b.n	8004cf0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HAL_SPI_Receive+0x7e>
 8004b60:	88fb      	ldrh	r3, [r7, #6]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b6a:	e0c1      	b.n	8004cf0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2204      	movs	r2, #4
 8004b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	88fa      	ldrh	r2, [r7, #6]
 8004b84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	88fa      	ldrh	r2, [r7, #6]
 8004b8a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb2:	d10f      	bne.n	8004bd4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bd2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	d007      	beq.n	8004bf2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bf0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d162      	bne.n	8004cc0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004bfa:	e02e      	b.n	8004c5a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d115      	bne.n	8004c36 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f103 020c 	add.w	r2, r3, #12
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	7812      	ldrb	r2, [r2, #0]
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c34:	e011      	b.n	8004c5a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c36:	f7fd fef3 	bl	8002a20 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d803      	bhi.n	8004c4e <HAL_SPI_Receive+0x166>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d102      	bne.n	8004c54 <HAL_SPI_Receive+0x16c>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c58:	e04a      	b.n	8004cf0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1cb      	bne.n	8004bfc <HAL_SPI_Receive+0x114>
 8004c64:	e031      	b.n	8004cca <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d113      	bne.n	8004c9c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	b292      	uxth	r2, r2
 8004c80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	1c9a      	adds	r2, r3, #2
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c9a:	e011      	b.n	8004cc0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c9c:	f7fd fec0 	bl	8002a20 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d803      	bhi.n	8004cb4 <HAL_SPI_Receive+0x1cc>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb2:	d102      	bne.n	8004cba <HAL_SPI_Receive+0x1d2>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d102      	bne.n	8004cc0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cbe:	e017      	b.n	8004cf0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1cd      	bne.n	8004c66 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	6839      	ldr	r1, [r7, #0]
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 fa46 	bl	8005160 <SPI_EndRxTransaction>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	75fb      	strb	r3, [r7, #23]
 8004cec:	e000      	b.n	8004cf0 <HAL_SPI_Receive+0x208>
  }

error :
 8004cee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b08c      	sub	sp, #48	; 0x30
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_SPI_TransmitReceive+0x26>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e18a      	b.n	8005046 <HAL_SPI_TransmitReceive+0x33c>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d38:	f7fd fe72 	bl	8002a20 <HAL_GetTick>
 8004d3c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d4e:	887b      	ldrh	r3, [r7, #2]
 8004d50:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d00f      	beq.n	8004d7a <HAL_SPI_TransmitReceive+0x70>
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d60:	d107      	bne.n	8004d72 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d103      	bne.n	8004d72 <HAL_SPI_TransmitReceive+0x68>
 8004d6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d003      	beq.n	8004d7a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d72:	2302      	movs	r3, #2
 8004d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d78:	e15b      	b.n	8005032 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <HAL_SPI_TransmitReceive+0x82>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_SPI_TransmitReceive+0x82>
 8004d86:	887b      	ldrh	r3, [r7, #2]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d103      	bne.n	8004d94 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d92:	e14e      	b.n	8005032 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d003      	beq.n	8004da8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2205      	movs	r2, #5
 8004da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	887a      	ldrh	r2, [r7, #2]
 8004db8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	887a      	ldrh	r2, [r7, #2]
 8004dbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	887a      	ldrh	r2, [r7, #2]
 8004dca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	887a      	ldrh	r2, [r7, #2]
 8004dd0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d007      	beq.n	8004dfc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e04:	d178      	bne.n	8004ef8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <HAL_SPI_TransmitReceive+0x10a>
 8004e0e:	8b7b      	ldrh	r3, [r7, #26]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d166      	bne.n	8004ee2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	881a      	ldrh	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	1c9a      	adds	r2, r3, #2
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e38:	e053      	b.n	8004ee2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d11b      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x176>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d016      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x176>
 8004e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d113      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	881a      	ldrh	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e68:	1c9a      	adds	r2, r3, #2
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d119      	bne.n	8004ec2 <HAL_SPI_TransmitReceive+0x1b8>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d014      	beq.n	8004ec2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea2:	b292      	uxth	r2, r2
 8004ea4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eaa:	1c9a      	adds	r2, r3, #2
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ec2:	f7fd fdad 	bl	8002a20 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d807      	bhi.n	8004ee2 <HAL_SPI_TransmitReceive+0x1d8>
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d003      	beq.n	8004ee2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ee0:	e0a7      	b.n	8005032 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1a6      	bne.n	8004e3a <HAL_SPI_TransmitReceive+0x130>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1a1      	bne.n	8004e3a <HAL_SPI_TransmitReceive+0x130>
 8004ef6:	e07c      	b.n	8004ff2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <HAL_SPI_TransmitReceive+0x1fc>
 8004f00:	8b7b      	ldrh	r3, [r7, #26]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d16b      	bne.n	8004fde <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	330c      	adds	r3, #12
 8004f10:	7812      	ldrb	r2, [r2, #0]
 8004f12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f2c:	e057      	b.n	8004fde <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d11c      	bne.n	8004f76 <HAL_SPI_TransmitReceive+0x26c>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d017      	beq.n	8004f76 <HAL_SPI_TransmitReceive+0x26c>
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d114      	bne.n	8004f76 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	330c      	adds	r3, #12
 8004f56:	7812      	ldrb	r2, [r2, #0]
 8004f58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d119      	bne.n	8004fb8 <HAL_SPI_TransmitReceive+0x2ae>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d014      	beq.n	8004fb8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fb8:	f7fd fd32 	bl	8002a20 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d803      	bhi.n	8004fd0 <HAL_SPI_TransmitReceive+0x2c6>
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fce:	d102      	bne.n	8004fd6 <HAL_SPI_TransmitReceive+0x2cc>
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d103      	bne.n	8004fde <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004fdc:	e029      	b.n	8005032 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1a2      	bne.n	8004f2e <HAL_SPI_TransmitReceive+0x224>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d19d      	bne.n	8004f2e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 f918 	bl	800522c <SPI_EndRxTxTransaction>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d006      	beq.n	8005010 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2220      	movs	r2, #32
 800500c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800500e:	e010      	b.n	8005032 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	e000      	b.n	8005032 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005030:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005042:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005046:	4618      	mov	r0, r3
 8005048:	3730      	adds	r7, #48	; 0x30
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	4613      	mov	r3, r2
 800505e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005060:	f7fd fcde 	bl	8002a20 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	4413      	add	r3, r2
 800506e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005070:	f7fd fcd6 	bl	8002a20 <HAL_GetTick>
 8005074:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005076:	4b39      	ldr	r3, [pc, #228]	; (800515c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	015b      	lsls	r3, r3, #5
 800507c:	0d1b      	lsrs	r3, r3, #20
 800507e:	69fa      	ldr	r2, [r7, #28]
 8005080:	fb02 f303 	mul.w	r3, r2, r3
 8005084:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005086:	e054      	b.n	8005132 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508e:	d050      	beq.n	8005132 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005090:	f7fd fcc6 	bl	8002a20 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	429a      	cmp	r2, r3
 800509e:	d902      	bls.n	80050a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d13d      	bne.n	8005122 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050be:	d111      	bne.n	80050e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c8:	d004      	beq.n	80050d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d2:	d107      	bne.n	80050e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ec:	d10f      	bne.n	800510e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800510c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e017      	b.n	8005152 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	3b01      	subs	r3, #1
 8005130:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4013      	ands	r3, r2
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	429a      	cmp	r2, r3
 8005140:	bf0c      	ite	eq
 8005142:	2301      	moveq	r3, #1
 8005144:	2300      	movne	r3, #0
 8005146:	b2db      	uxtb	r3, r3
 8005148:	461a      	mov	r2, r3
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	429a      	cmp	r2, r3
 800514e:	d19b      	bne.n	8005088 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3720      	adds	r7, #32
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000000 	.word	0x20000000

08005160 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005174:	d111      	bne.n	800519a <SPI_EndRxTransaction+0x3a>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800517e:	d004      	beq.n	800518a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005188:	d107      	bne.n	800519a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005198:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051a2:	d12a      	bne.n	80051fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ac:	d012      	beq.n	80051d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2200      	movs	r2, #0
 80051b6:	2180      	movs	r1, #128	; 0x80
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f7ff ff49 	bl	8005050 <SPI_WaitFlagStateUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d02d      	beq.n	8005220 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c8:	f043 0220 	orr.w	r2, r3, #32
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e026      	b.n	8005222 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2200      	movs	r2, #0
 80051dc:	2101      	movs	r1, #1
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff ff36 	bl	8005050 <SPI_WaitFlagStateUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d01a      	beq.n	8005220 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ee:	f043 0220 	orr.w	r2, r3, #32
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e013      	b.n	8005222 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2200      	movs	r2, #0
 8005202:	2101      	movs	r1, #1
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f7ff ff23 	bl	8005050 <SPI_WaitFlagStateUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d007      	beq.n	8005220 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005214:	f043 0220 	orr.w	r2, r3, #32
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e000      	b.n	8005222 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005238:	4b1b      	ldr	r3, [pc, #108]	; (80052a8 <SPI_EndRxTxTransaction+0x7c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1b      	ldr	r2, [pc, #108]	; (80052ac <SPI_EndRxTxTransaction+0x80>)
 800523e:	fba2 2303 	umull	r2, r3, r2, r3
 8005242:	0d5b      	lsrs	r3, r3, #21
 8005244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005248:	fb02 f303 	mul.w	r3, r2, r3
 800524c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005256:	d112      	bne.n	800527e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2200      	movs	r2, #0
 8005260:	2180      	movs	r1, #128	; 0x80
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f7ff fef4 	bl	8005050 <SPI_WaitFlagStateUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d016      	beq.n	800529c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005272:	f043 0220 	orr.w	r2, r3, #32
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e00f      	b.n	800529e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	3b01      	subs	r3, #1
 8005288:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005294:	2b80      	cmp	r3, #128	; 0x80
 8005296:	d0f2      	beq.n	800527e <SPI_EndRxTxTransaction+0x52>
 8005298:	e000      	b.n	800529c <SPI_EndRxTxTransaction+0x70>
        break;
 800529a:	bf00      	nop
  }

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	20000000 	.word	0x20000000
 80052ac:	165e9f81 	.word	0x165e9f81

080052b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e041      	b.n	8005346 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fc fd38 	bl	8001d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3304      	adds	r3, #4
 80052ec:	4619      	mov	r1, r3
 80052ee:	4610      	mov	r0, r2
 80052f0:	f000 fe16 	bl	8005f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b01      	cmp	r3, #1
 8005362:	d001      	beq.n	8005368 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e046      	b.n	80053f6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a23      	ldr	r2, [pc, #140]	; (8005404 <HAL_TIM_Base_Start+0xb4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d022      	beq.n	80053c0 <HAL_TIM_Base_Start+0x70>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005382:	d01d      	beq.n	80053c0 <HAL_TIM_Base_Start+0x70>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1f      	ldr	r2, [pc, #124]	; (8005408 <HAL_TIM_Base_Start+0xb8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d018      	beq.n	80053c0 <HAL_TIM_Base_Start+0x70>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a1e      	ldr	r2, [pc, #120]	; (800540c <HAL_TIM_Base_Start+0xbc>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d013      	beq.n	80053c0 <HAL_TIM_Base_Start+0x70>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1c      	ldr	r2, [pc, #112]	; (8005410 <HAL_TIM_Base_Start+0xc0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00e      	beq.n	80053c0 <HAL_TIM_Base_Start+0x70>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <HAL_TIM_Base_Start+0xc4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d009      	beq.n	80053c0 <HAL_TIM_Base_Start+0x70>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a19      	ldr	r2, [pc, #100]	; (8005418 <HAL_TIM_Base_Start+0xc8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d004      	beq.n	80053c0 <HAL_TIM_Base_Start+0x70>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a18      	ldr	r2, [pc, #96]	; (800541c <HAL_TIM_Base_Start+0xcc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d111      	bne.n	80053e4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b06      	cmp	r3, #6
 80053d0:	d010      	beq.n	80053f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f042 0201 	orr.w	r2, r2, #1
 80053e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e2:	e007      	b.n	80053f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0201 	orr.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40010000 	.word	0x40010000
 8005408:	40000400 	.word	0x40000400
 800540c:	40000800 	.word	0x40000800
 8005410:	40000c00 	.word	0x40000c00
 8005414:	40010400 	.word	0x40010400
 8005418:	40014000 	.word	0x40014000
 800541c:	40001800 	.word	0x40001800

08005420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d001      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e04e      	b.n	80054d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a23      	ldr	r2, [pc, #140]	; (80054e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d022      	beq.n	80054a0 <HAL_TIM_Base_Start_IT+0x80>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005462:	d01d      	beq.n	80054a0 <HAL_TIM_Base_Start_IT+0x80>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1f      	ldr	r2, [pc, #124]	; (80054e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d018      	beq.n	80054a0 <HAL_TIM_Base_Start_IT+0x80>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1e      	ldr	r2, [pc, #120]	; (80054ec <HAL_TIM_Base_Start_IT+0xcc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d013      	beq.n	80054a0 <HAL_TIM_Base_Start_IT+0x80>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a1c      	ldr	r2, [pc, #112]	; (80054f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d00e      	beq.n	80054a0 <HAL_TIM_Base_Start_IT+0x80>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a1b      	ldr	r2, [pc, #108]	; (80054f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d009      	beq.n	80054a0 <HAL_TIM_Base_Start_IT+0x80>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a19      	ldr	r2, [pc, #100]	; (80054f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d004      	beq.n	80054a0 <HAL_TIM_Base_Start_IT+0x80>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a18      	ldr	r2, [pc, #96]	; (80054fc <HAL_TIM_Base_Start_IT+0xdc>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d111      	bne.n	80054c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b06      	cmp	r3, #6
 80054b0:	d010      	beq.n	80054d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f042 0201 	orr.w	r2, r2, #1
 80054c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c2:	e007      	b.n	80054d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	40010000 	.word	0x40010000
 80054e8:	40000400 	.word	0x40000400
 80054ec:	40000800 	.word	0x40000800
 80054f0:	40000c00 	.word	0x40000c00
 80054f4:	40010400 	.word	0x40010400
 80054f8:	40014000 	.word	0x40014000
 80054fc:	40001800 	.word	0x40001800

08005500 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e041      	b.n	8005596 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f839 	bl	800559e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3304      	adds	r3, #4
 800553c:	4619      	mov	r1, r3
 800553e:	4610      	mov	r0, r2
 8005540:	f000 fcee 	bl	8005f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
	...

080055b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d109      	bne.n	80055d8 <HAL_TIM_PWM_Start+0x24>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	bf14      	ite	ne
 80055d0:	2301      	movne	r3, #1
 80055d2:	2300      	moveq	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	e022      	b.n	800561e <HAL_TIM_PWM_Start+0x6a>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d109      	bne.n	80055f2 <HAL_TIM_PWM_Start+0x3e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	bf14      	ite	ne
 80055ea:	2301      	movne	r3, #1
 80055ec:	2300      	moveq	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	e015      	b.n	800561e <HAL_TIM_PWM_Start+0x6a>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d109      	bne.n	800560c <HAL_TIM_PWM_Start+0x58>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b01      	cmp	r3, #1
 8005602:	bf14      	ite	ne
 8005604:	2301      	movne	r3, #1
 8005606:	2300      	moveq	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	e008      	b.n	800561e <HAL_TIM_PWM_Start+0x6a>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	bf14      	ite	ne
 8005618:	2301      	movne	r3, #1
 800561a:	2300      	moveq	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e07c      	b.n	8005720 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d104      	bne.n	8005636 <HAL_TIM_PWM_Start+0x82>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005634:	e013      	b.n	800565e <HAL_TIM_PWM_Start+0xaa>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b04      	cmp	r3, #4
 800563a:	d104      	bne.n	8005646 <HAL_TIM_PWM_Start+0x92>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005644:	e00b      	b.n	800565e <HAL_TIM_PWM_Start+0xaa>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b08      	cmp	r3, #8
 800564a:	d104      	bne.n	8005656 <HAL_TIM_PWM_Start+0xa2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005654:	e003      	b.n	800565e <HAL_TIM_PWM_Start+0xaa>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2201      	movs	r2, #1
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f000 ff44 	bl	80064f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a2d      	ldr	r2, [pc, #180]	; (8005728 <HAL_TIM_PWM_Start+0x174>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d004      	beq.n	8005680 <HAL_TIM_PWM_Start+0xcc>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a2c      	ldr	r2, [pc, #176]	; (800572c <HAL_TIM_PWM_Start+0x178>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d101      	bne.n	8005684 <HAL_TIM_PWM_Start+0xd0>
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <HAL_TIM_PWM_Start+0xd2>
 8005684:	2300      	movs	r3, #0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d007      	beq.n	800569a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005698:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a22      	ldr	r2, [pc, #136]	; (8005728 <HAL_TIM_PWM_Start+0x174>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d022      	beq.n	80056ea <HAL_TIM_PWM_Start+0x136>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ac:	d01d      	beq.n	80056ea <HAL_TIM_PWM_Start+0x136>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1f      	ldr	r2, [pc, #124]	; (8005730 <HAL_TIM_PWM_Start+0x17c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d018      	beq.n	80056ea <HAL_TIM_PWM_Start+0x136>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1d      	ldr	r2, [pc, #116]	; (8005734 <HAL_TIM_PWM_Start+0x180>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <HAL_TIM_PWM_Start+0x136>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1c      	ldr	r2, [pc, #112]	; (8005738 <HAL_TIM_PWM_Start+0x184>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00e      	beq.n	80056ea <HAL_TIM_PWM_Start+0x136>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a16      	ldr	r2, [pc, #88]	; (800572c <HAL_TIM_PWM_Start+0x178>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d009      	beq.n	80056ea <HAL_TIM_PWM_Start+0x136>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a18      	ldr	r2, [pc, #96]	; (800573c <HAL_TIM_PWM_Start+0x188>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d004      	beq.n	80056ea <HAL_TIM_PWM_Start+0x136>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a16      	ldr	r2, [pc, #88]	; (8005740 <HAL_TIM_PWM_Start+0x18c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d111      	bne.n	800570e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b06      	cmp	r3, #6
 80056fa:	d010      	beq.n	800571e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570c:	e007      	b.n	800571e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0201 	orr.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40010000 	.word	0x40010000
 800572c:	40010400 	.word	0x40010400
 8005730:	40000400 	.word	0x40000400
 8005734:	40000800 	.word	0x40000800
 8005738:	40000c00 	.word	0x40000c00
 800573c:	40014000 	.word	0x40014000
 8005740:	40001800 	.word	0x40001800

08005744 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e097      	b.n	8005888 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d106      	bne.n	8005772 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7fc fb8b 	bl	8001e88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2202      	movs	r2, #2
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6812      	ldr	r2, [r2, #0]
 8005784:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005788:	f023 0307 	bic.w	r3, r3, #7
 800578c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	3304      	adds	r3, #4
 8005796:	4619      	mov	r1, r3
 8005798:	4610      	mov	r0, r2
 800579a:	f000 fbc1 	bl	8005f20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057c6:	f023 0303 	bic.w	r3, r3, #3
 80057ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	021b      	lsls	r3, r3, #8
 80057d6:	4313      	orrs	r3, r2
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80057e4:	f023 030c 	bic.w	r3, r3, #12
 80057e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	021b      	lsls	r3, r3, #8
 8005800:	4313      	orrs	r3, r2
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	011a      	lsls	r2, r3, #4
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	031b      	lsls	r3, r3, #12
 8005814:	4313      	orrs	r3, r2
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005822:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800582a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	4313      	orrs	r3, r2
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80058b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d110      	bne.n	80058e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d102      	bne.n	80058cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80058c6:	7b7b      	ldrb	r3, [r7, #13]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d001      	beq.n	80058d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e069      	b.n	80059a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058e0:	e031      	b.n	8005946 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d110      	bne.n	800590a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058e8:	7bbb      	ldrb	r3, [r7, #14]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d102      	bne.n	80058f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058ee:	7b3b      	ldrb	r3, [r7, #12]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d001      	beq.n	80058f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e055      	b.n	80059a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005908:	e01d      	b.n	8005946 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d108      	bne.n	8005922 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005910:	7bbb      	ldrb	r3, [r7, #14]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d105      	bne.n	8005922 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005916:	7b7b      	ldrb	r3, [r7, #13]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d102      	bne.n	8005922 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800591c:	7b3b      	ldrb	r3, [r7, #12]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d001      	beq.n	8005926 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e03e      	b.n	80059a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2202      	movs	r2, #2
 800592a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2202      	movs	r2, #2
 8005932:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2202      	movs	r2, #2
 8005942:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_TIM_Encoder_Start+0xc4>
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b04      	cmp	r3, #4
 8005950:	d008      	beq.n	8005964 <HAL_TIM_Encoder_Start+0xd4>
 8005952:	e00f      	b.n	8005974 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2201      	movs	r2, #1
 800595a:	2100      	movs	r1, #0
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fdc9 	bl	80064f4 <TIM_CCxChannelCmd>
      break;
 8005962:	e016      	b.n	8005992 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2201      	movs	r2, #1
 800596a:	2104      	movs	r1, #4
 800596c:	4618      	mov	r0, r3
 800596e:	f000 fdc1 	bl	80064f4 <TIM_CCxChannelCmd>
      break;
 8005972:	e00e      	b.n	8005992 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2201      	movs	r2, #1
 800597a:	2100      	movs	r1, #0
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fdb9 	bl	80064f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2201      	movs	r2, #1
 8005988:	2104      	movs	r1, #4
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fdb2 	bl	80064f4 <TIM_CCxChannelCmd>
      break;
 8005990:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 0201 	orr.w	r2, r2, #1
 80059a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d122      	bne.n	8005a08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d11b      	bne.n	8005a08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f06f 0202 	mvn.w	r2, #2
 80059d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fa77 	bl	8005ee2 <HAL_TIM_IC_CaptureCallback>
 80059f4:	e005      	b.n	8005a02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fa69 	bl	8005ece <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fa7a 	bl	8005ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d122      	bne.n	8005a5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d11b      	bne.n	8005a5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0204 	mvn.w	r2, #4
 8005a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2202      	movs	r2, #2
 8005a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fa4d 	bl	8005ee2 <HAL_TIM_IC_CaptureCallback>
 8005a48:	e005      	b.n	8005a56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fa3f 	bl	8005ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fa50 	bl	8005ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b08      	cmp	r3, #8
 8005a68:	d122      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d11b      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0208 	mvn.w	r2, #8
 8005a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2204      	movs	r2, #4
 8005a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fa23 	bl	8005ee2 <HAL_TIM_IC_CaptureCallback>
 8005a9c:	e005      	b.n	8005aaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fa15 	bl	8005ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fa26 	bl	8005ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f003 0310 	and.w	r3, r3, #16
 8005aba:	2b10      	cmp	r3, #16
 8005abc:	d122      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f003 0310 	and.w	r3, r3, #16
 8005ac8:	2b10      	cmp	r3, #16
 8005aca:	d11b      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f06f 0210 	mvn.w	r2, #16
 8005ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2208      	movs	r2, #8
 8005ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f9f9 	bl	8005ee2 <HAL_TIM_IC_CaptureCallback>
 8005af0:	e005      	b.n	8005afe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f9eb 	bl	8005ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f9fc 	bl	8005ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d10e      	bne.n	8005b30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d107      	bne.n	8005b30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f06f 0201 	mvn.w	r2, #1
 8005b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f001 fdec 	bl	8007708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3a:	2b80      	cmp	r3, #128	; 0x80
 8005b3c:	d10e      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b48:	2b80      	cmp	r3, #128	; 0x80
 8005b4a:	d107      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fd78 	bl	800664c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b66:	2b40      	cmp	r3, #64	; 0x40
 8005b68:	d10e      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b74:	2b40      	cmp	r3, #64	; 0x40
 8005b76:	d107      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f9c1 	bl	8005f0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f003 0320 	and.w	r3, r3, #32
 8005b92:	2b20      	cmp	r3, #32
 8005b94:	d10e      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f003 0320 	and.w	r3, r3, #32
 8005ba0:	2b20      	cmp	r3, #32
 8005ba2:	d107      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0220 	mvn.w	r2, #32
 8005bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fd42 	bl	8006638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bb4:	bf00      	nop
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e0ae      	b.n	8005d38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b0c      	cmp	r3, #12
 8005be6:	f200 809f 	bhi.w	8005d28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bea:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf0:	08005c25 	.word	0x08005c25
 8005bf4:	08005d29 	.word	0x08005d29
 8005bf8:	08005d29 	.word	0x08005d29
 8005bfc:	08005d29 	.word	0x08005d29
 8005c00:	08005c65 	.word	0x08005c65
 8005c04:	08005d29 	.word	0x08005d29
 8005c08:	08005d29 	.word	0x08005d29
 8005c0c:	08005d29 	.word	0x08005d29
 8005c10:	08005ca7 	.word	0x08005ca7
 8005c14:	08005d29 	.word	0x08005d29
 8005c18:	08005d29 	.word	0x08005d29
 8005c1c:	08005d29 	.word	0x08005d29
 8005c20:	08005ce7 	.word	0x08005ce7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68b9      	ldr	r1, [r7, #8]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fa18 	bl	8006060 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699a      	ldr	r2, [r3, #24]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0208 	orr.w	r2, r2, #8
 8005c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0204 	bic.w	r2, r2, #4
 8005c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6999      	ldr	r1, [r3, #24]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	691a      	ldr	r2, [r3, #16]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	619a      	str	r2, [r3, #24]
      break;
 8005c62:	e064      	b.n	8005d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68b9      	ldr	r1, [r7, #8]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fa68 	bl	8006140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699a      	ldr	r2, [r3, #24]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699a      	ldr	r2, [r3, #24]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6999      	ldr	r1, [r3, #24]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	021a      	lsls	r2, r3, #8
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	619a      	str	r2, [r3, #24]
      break;
 8005ca4:	e043      	b.n	8005d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fabd 	bl	800622c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 0208 	orr.w	r2, r2, #8
 8005cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69da      	ldr	r2, [r3, #28]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0204 	bic.w	r2, r2, #4
 8005cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69d9      	ldr	r1, [r3, #28]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	61da      	str	r2, [r3, #28]
      break;
 8005ce4:	e023      	b.n	8005d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fb11 	bl	8006314 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	69da      	ldr	r2, [r3, #28]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69da      	ldr	r2, [r3, #28]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69d9      	ldr	r1, [r3, #28]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	021a      	lsls	r2, r3, #8
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	61da      	str	r2, [r3, #28]
      break;
 8005d26:	e002      	b.n	8005d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_TIM_ConfigClockSource+0x1c>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e0b4      	b.n	8005ec6 <HAL_TIM_ConfigClockSource+0x186>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d94:	d03e      	beq.n	8005e14 <HAL_TIM_ConfigClockSource+0xd4>
 8005d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d9a:	f200 8087 	bhi.w	8005eac <HAL_TIM_ConfigClockSource+0x16c>
 8005d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da2:	f000 8086 	beq.w	8005eb2 <HAL_TIM_ConfigClockSource+0x172>
 8005da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005daa:	d87f      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x16c>
 8005dac:	2b70      	cmp	r3, #112	; 0x70
 8005dae:	d01a      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0xa6>
 8005db0:	2b70      	cmp	r3, #112	; 0x70
 8005db2:	d87b      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x16c>
 8005db4:	2b60      	cmp	r3, #96	; 0x60
 8005db6:	d050      	beq.n	8005e5a <HAL_TIM_ConfigClockSource+0x11a>
 8005db8:	2b60      	cmp	r3, #96	; 0x60
 8005dba:	d877      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x16c>
 8005dbc:	2b50      	cmp	r3, #80	; 0x50
 8005dbe:	d03c      	beq.n	8005e3a <HAL_TIM_ConfigClockSource+0xfa>
 8005dc0:	2b50      	cmp	r3, #80	; 0x50
 8005dc2:	d873      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x16c>
 8005dc4:	2b40      	cmp	r3, #64	; 0x40
 8005dc6:	d058      	beq.n	8005e7a <HAL_TIM_ConfigClockSource+0x13a>
 8005dc8:	2b40      	cmp	r3, #64	; 0x40
 8005dca:	d86f      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x16c>
 8005dcc:	2b30      	cmp	r3, #48	; 0x30
 8005dce:	d064      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x15a>
 8005dd0:	2b30      	cmp	r3, #48	; 0x30
 8005dd2:	d86b      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x16c>
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d060      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x15a>
 8005dd8:	2b20      	cmp	r3, #32
 8005dda:	d867      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x16c>
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d05c      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x15a>
 8005de0:	2b10      	cmp	r3, #16
 8005de2:	d05a      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x15a>
 8005de4:	e062      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6899      	ldr	r1, [r3, #8]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f000 fb5d 	bl	80064b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	609a      	str	r2, [r3, #8]
      break;
 8005e12:	e04f      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6818      	ldr	r0, [r3, #0]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	6899      	ldr	r1, [r3, #8]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f000 fb46 	bl	80064b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e36:	609a      	str	r2, [r3, #8]
      break;
 8005e38:	e03c      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6818      	ldr	r0, [r3, #0]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	6859      	ldr	r1, [r3, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	461a      	mov	r2, r3
 8005e48:	f000 faba 	bl	80063c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2150      	movs	r1, #80	; 0x50
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 fb13 	bl	800647e <TIM_ITRx_SetConfig>
      break;
 8005e58:	e02c      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6818      	ldr	r0, [r3, #0]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	6859      	ldr	r1, [r3, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	461a      	mov	r2, r3
 8005e68:	f000 fad9 	bl	800641e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2160      	movs	r1, #96	; 0x60
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fb03 	bl	800647e <TIM_ITRx_SetConfig>
      break;
 8005e78:	e01c      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	6859      	ldr	r1, [r3, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	461a      	mov	r2, r3
 8005e88:	f000 fa9a 	bl	80063c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2140      	movs	r1, #64	; 0x40
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 faf3 	bl	800647e <TIM_ITRx_SetConfig>
      break;
 8005e98:	e00c      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	f000 faea 	bl	800647e <TIM_ITRx_SetConfig>
      break;
 8005eaa:	e003      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb0:	e000      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005eb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
	...

08005f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a40      	ldr	r2, [pc, #256]	; (8006034 <TIM_Base_SetConfig+0x114>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d013      	beq.n	8005f60 <TIM_Base_SetConfig+0x40>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3e:	d00f      	beq.n	8005f60 <TIM_Base_SetConfig+0x40>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a3d      	ldr	r2, [pc, #244]	; (8006038 <TIM_Base_SetConfig+0x118>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00b      	beq.n	8005f60 <TIM_Base_SetConfig+0x40>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a3c      	ldr	r2, [pc, #240]	; (800603c <TIM_Base_SetConfig+0x11c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d007      	beq.n	8005f60 <TIM_Base_SetConfig+0x40>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a3b      	ldr	r2, [pc, #236]	; (8006040 <TIM_Base_SetConfig+0x120>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d003      	beq.n	8005f60 <TIM_Base_SetConfig+0x40>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a3a      	ldr	r2, [pc, #232]	; (8006044 <TIM_Base_SetConfig+0x124>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d108      	bne.n	8005f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a2f      	ldr	r2, [pc, #188]	; (8006034 <TIM_Base_SetConfig+0x114>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d02b      	beq.n	8005fd2 <TIM_Base_SetConfig+0xb2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f80:	d027      	beq.n	8005fd2 <TIM_Base_SetConfig+0xb2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a2c      	ldr	r2, [pc, #176]	; (8006038 <TIM_Base_SetConfig+0x118>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d023      	beq.n	8005fd2 <TIM_Base_SetConfig+0xb2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a2b      	ldr	r2, [pc, #172]	; (800603c <TIM_Base_SetConfig+0x11c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d01f      	beq.n	8005fd2 <TIM_Base_SetConfig+0xb2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a2a      	ldr	r2, [pc, #168]	; (8006040 <TIM_Base_SetConfig+0x120>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d01b      	beq.n	8005fd2 <TIM_Base_SetConfig+0xb2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a29      	ldr	r2, [pc, #164]	; (8006044 <TIM_Base_SetConfig+0x124>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d017      	beq.n	8005fd2 <TIM_Base_SetConfig+0xb2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a28      	ldr	r2, [pc, #160]	; (8006048 <TIM_Base_SetConfig+0x128>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d013      	beq.n	8005fd2 <TIM_Base_SetConfig+0xb2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a27      	ldr	r2, [pc, #156]	; (800604c <TIM_Base_SetConfig+0x12c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00f      	beq.n	8005fd2 <TIM_Base_SetConfig+0xb2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a26      	ldr	r2, [pc, #152]	; (8006050 <TIM_Base_SetConfig+0x130>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d00b      	beq.n	8005fd2 <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a25      	ldr	r2, [pc, #148]	; (8006054 <TIM_Base_SetConfig+0x134>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d007      	beq.n	8005fd2 <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a24      	ldr	r2, [pc, #144]	; (8006058 <TIM_Base_SetConfig+0x138>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d003      	beq.n	8005fd2 <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a23      	ldr	r2, [pc, #140]	; (800605c <TIM_Base_SetConfig+0x13c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d108      	bne.n	8005fe4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a0a      	ldr	r2, [pc, #40]	; (8006034 <TIM_Base_SetConfig+0x114>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d003      	beq.n	8006018 <TIM_Base_SetConfig+0xf8>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a0c      	ldr	r2, [pc, #48]	; (8006044 <TIM_Base_SetConfig+0x124>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d103      	bne.n	8006020 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	615a      	str	r2, [r3, #20]
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40010000 	.word	0x40010000
 8006038:	40000400 	.word	0x40000400
 800603c:	40000800 	.word	0x40000800
 8006040:	40000c00 	.word	0x40000c00
 8006044:	40010400 	.word	0x40010400
 8006048:	40014000 	.word	0x40014000
 800604c:	40014400 	.word	0x40014400
 8006050:	40014800 	.word	0x40014800
 8006054:	40001800 	.word	0x40001800
 8006058:	40001c00 	.word	0x40001c00
 800605c:	40002000 	.word	0x40002000

08006060 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	f023 0201 	bic.w	r2, r3, #1
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 0303 	bic.w	r3, r3, #3
 8006096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f023 0302 	bic.w	r3, r3, #2
 80060a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a20      	ldr	r2, [pc, #128]	; (8006138 <TIM_OC1_SetConfig+0xd8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d003      	beq.n	80060c4 <TIM_OC1_SetConfig+0x64>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a1f      	ldr	r2, [pc, #124]	; (800613c <TIM_OC1_SetConfig+0xdc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d10c      	bne.n	80060de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f023 0308 	bic.w	r3, r3, #8
 80060ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f023 0304 	bic.w	r3, r3, #4
 80060dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a15      	ldr	r2, [pc, #84]	; (8006138 <TIM_OC1_SetConfig+0xd8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d003      	beq.n	80060ee <TIM_OC1_SetConfig+0x8e>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a14      	ldr	r2, [pc, #80]	; (800613c <TIM_OC1_SetConfig+0xdc>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d111      	bne.n	8006112 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	4313      	orrs	r3, r2
 8006106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	621a      	str	r2, [r3, #32]
}
 800612c:	bf00      	nop
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	40010000 	.word	0x40010000
 800613c:	40010400 	.word	0x40010400

08006140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f023 0210 	bic.w	r2, r3, #16
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800616e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	021b      	lsls	r3, r3, #8
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f023 0320 	bic.w	r3, r3, #32
 800618a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	4313      	orrs	r3, r2
 8006196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a22      	ldr	r2, [pc, #136]	; (8006224 <TIM_OC2_SetConfig+0xe4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d003      	beq.n	80061a8 <TIM_OC2_SetConfig+0x68>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a21      	ldr	r2, [pc, #132]	; (8006228 <TIM_OC2_SetConfig+0xe8>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d10d      	bne.n	80061c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a17      	ldr	r2, [pc, #92]	; (8006224 <TIM_OC2_SetConfig+0xe4>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d003      	beq.n	80061d4 <TIM_OC2_SetConfig+0x94>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a16      	ldr	r2, [pc, #88]	; (8006228 <TIM_OC2_SetConfig+0xe8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d113      	bne.n	80061fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	621a      	str	r2, [r3, #32]
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40010000 	.word	0x40010000
 8006228:	40010400 	.word	0x40010400

0800622c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0303 	bic.w	r3, r3, #3
 8006262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	021b      	lsls	r3, r3, #8
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a21      	ldr	r2, [pc, #132]	; (800630c <TIM_OC3_SetConfig+0xe0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d003      	beq.n	8006292 <TIM_OC3_SetConfig+0x66>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a20      	ldr	r2, [pc, #128]	; (8006310 <TIM_OC3_SetConfig+0xe4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d10d      	bne.n	80062ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	021b      	lsls	r3, r3, #8
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a16      	ldr	r2, [pc, #88]	; (800630c <TIM_OC3_SetConfig+0xe0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d003      	beq.n	80062be <TIM_OC3_SetConfig+0x92>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a15      	ldr	r2, [pc, #84]	; (8006310 <TIM_OC3_SetConfig+0xe4>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d113      	bne.n	80062e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	011b      	lsls	r3, r3, #4
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	621a      	str	r2, [r3, #32]
}
 8006300:	bf00      	nop
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	40010000 	.word	0x40010000
 8006310:	40010400 	.word	0x40010400

08006314 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800634a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	021b      	lsls	r3, r3, #8
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	4313      	orrs	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800635e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	031b      	lsls	r3, r3, #12
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a12      	ldr	r2, [pc, #72]	; (80063b8 <TIM_OC4_SetConfig+0xa4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d003      	beq.n	800637c <TIM_OC4_SetConfig+0x68>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a11      	ldr	r2, [pc, #68]	; (80063bc <TIM_OC4_SetConfig+0xa8>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d109      	bne.n	8006390 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	019b      	lsls	r3, r3, #6
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40010000 	.word	0x40010000
 80063bc:	40010400 	.word	0x40010400

080063c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	f023 0201 	bic.w	r2, r3, #1
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f023 030a 	bic.w	r3, r3, #10
 80063fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	4313      	orrs	r3, r2
 8006404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	621a      	str	r2, [r3, #32]
}
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800641e:	b480      	push	{r7}
 8006420:	b087      	sub	sp, #28
 8006422:	af00      	add	r7, sp, #0
 8006424:	60f8      	str	r0, [r7, #12]
 8006426:	60b9      	str	r1, [r7, #8]
 8006428:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f023 0210 	bic.w	r2, r3, #16
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006448:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	031b      	lsls	r3, r3, #12
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	4313      	orrs	r3, r2
 8006452:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800645a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	4313      	orrs	r3, r2
 8006464:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800647e:	b480      	push	{r7}
 8006480:	b085      	sub	sp, #20
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006494:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	f043 0307 	orr.w	r3, r3, #7
 80064a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	609a      	str	r2, [r3, #8]
}
 80064a8:	bf00      	nop
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	021a      	lsls	r2, r3, #8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4313      	orrs	r3, r2
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	609a      	str	r2, [r3, #8]
}
 80064e8:	bf00      	nop
 80064ea:	371c      	adds	r7, #28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f003 031f 	and.w	r3, r3, #31
 8006506:	2201      	movs	r2, #1
 8006508:	fa02 f303 	lsl.w	r3, r2, r3
 800650c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6a1a      	ldr	r2, [r3, #32]
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	43db      	mvns	r3, r3
 8006516:	401a      	ands	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a1a      	ldr	r2, [r3, #32]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f003 031f 	and.w	r3, r3, #31
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	fa01 f303 	lsl.w	r3, r1, r3
 800652c:	431a      	orrs	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	621a      	str	r2, [r3, #32]
}
 8006532:	bf00      	nop
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
	...

08006540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006554:	2302      	movs	r3, #2
 8006556:	e05a      	b.n	800660e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a21      	ldr	r2, [pc, #132]	; (800661c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d022      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a4:	d01d      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a1d      	ldr	r2, [pc, #116]	; (8006620 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d018      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a1b      	ldr	r2, [pc, #108]	; (8006624 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d013      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1a      	ldr	r2, [pc, #104]	; (8006628 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d00e      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a18      	ldr	r2, [pc, #96]	; (800662c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d009      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a17      	ldr	r2, [pc, #92]	; (8006630 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d004      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a15      	ldr	r2, [pc, #84]	; (8006634 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d10c      	bne.n	80065fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40010000 	.word	0x40010000
 8006620:	40000400 	.word	0x40000400
 8006624:	40000800 	.word	0x40000800
 8006628:	40000c00 	.word	0x40000c00
 800662c:	40010400 	.word	0x40010400
 8006630:	40014000 	.word	0x40014000
 8006634:	40001800 	.word	0x40001800

08006638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e03f      	b.n	80066f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d106      	bne.n	800668c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7fb fcfa 	bl	8002080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2224      	movs	r2, #36	; 0x24
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f829 	bl	80066fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	695a      	ldr	r2, [r3, #20]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006700:	b0c0      	sub	sp, #256	; 0x100
 8006702:	af00      	add	r7, sp, #0
 8006704:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006718:	68d9      	ldr	r1, [r3, #12]
 800671a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	ea40 0301 	orr.w	r3, r0, r1
 8006724:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	431a      	orrs	r2, r3
 8006734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	431a      	orrs	r2, r3
 800673c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	4313      	orrs	r3, r2
 8006744:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006754:	f021 010c 	bic.w	r1, r1, #12
 8006758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006762:	430b      	orrs	r3, r1
 8006764:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006776:	6999      	ldr	r1, [r3, #24]
 8006778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	ea40 0301 	orr.w	r3, r0, r1
 8006782:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	4b8f      	ldr	r3, [pc, #572]	; (80069c8 <UART_SetConfig+0x2cc>)
 800678c:	429a      	cmp	r2, r3
 800678e:	d005      	beq.n	800679c <UART_SetConfig+0xa0>
 8006790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	4b8d      	ldr	r3, [pc, #564]	; (80069cc <UART_SetConfig+0x2d0>)
 8006798:	429a      	cmp	r2, r3
 800679a:	d104      	bne.n	80067a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800679c:	f7fd ffb0 	bl	8004700 <HAL_RCC_GetPCLK2Freq>
 80067a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80067a4:	e003      	b.n	80067ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067a6:	f7fd ff97 	bl	80046d8 <HAL_RCC_GetPCLK1Freq>
 80067aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067b8:	f040 810c 	bne.w	80069d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067c0:	2200      	movs	r2, #0
 80067c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80067ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80067ce:	4622      	mov	r2, r4
 80067d0:	462b      	mov	r3, r5
 80067d2:	1891      	adds	r1, r2, r2
 80067d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80067d6:	415b      	adcs	r3, r3
 80067d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80067de:	4621      	mov	r1, r4
 80067e0:	eb12 0801 	adds.w	r8, r2, r1
 80067e4:	4629      	mov	r1, r5
 80067e6:	eb43 0901 	adc.w	r9, r3, r1
 80067ea:	f04f 0200 	mov.w	r2, #0
 80067ee:	f04f 0300 	mov.w	r3, #0
 80067f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067fe:	4690      	mov	r8, r2
 8006800:	4699      	mov	r9, r3
 8006802:	4623      	mov	r3, r4
 8006804:	eb18 0303 	adds.w	r3, r8, r3
 8006808:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800680c:	462b      	mov	r3, r5
 800680e:	eb49 0303 	adc.w	r3, r9, r3
 8006812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006822:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006826:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800682a:	460b      	mov	r3, r1
 800682c:	18db      	adds	r3, r3, r3
 800682e:	653b      	str	r3, [r7, #80]	; 0x50
 8006830:	4613      	mov	r3, r2
 8006832:	eb42 0303 	adc.w	r3, r2, r3
 8006836:	657b      	str	r3, [r7, #84]	; 0x54
 8006838:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800683c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006840:	f7fa fb10 	bl	8000e64 <__aeabi_uldivmod>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4b61      	ldr	r3, [pc, #388]	; (80069d0 <UART_SetConfig+0x2d4>)
 800684a:	fba3 2302 	umull	r2, r3, r3, r2
 800684e:	095b      	lsrs	r3, r3, #5
 8006850:	011c      	lsls	r4, r3, #4
 8006852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006856:	2200      	movs	r2, #0
 8006858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800685c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006860:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006864:	4642      	mov	r2, r8
 8006866:	464b      	mov	r3, r9
 8006868:	1891      	adds	r1, r2, r2
 800686a:	64b9      	str	r1, [r7, #72]	; 0x48
 800686c:	415b      	adcs	r3, r3
 800686e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006870:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006874:	4641      	mov	r1, r8
 8006876:	eb12 0a01 	adds.w	sl, r2, r1
 800687a:	4649      	mov	r1, r9
 800687c:	eb43 0b01 	adc.w	fp, r3, r1
 8006880:	f04f 0200 	mov.w	r2, #0
 8006884:	f04f 0300 	mov.w	r3, #0
 8006888:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800688c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006890:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006894:	4692      	mov	sl, r2
 8006896:	469b      	mov	fp, r3
 8006898:	4643      	mov	r3, r8
 800689a:	eb1a 0303 	adds.w	r3, sl, r3
 800689e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068a2:	464b      	mov	r3, r9
 80068a4:	eb4b 0303 	adc.w	r3, fp, r3
 80068a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80068bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80068c0:	460b      	mov	r3, r1
 80068c2:	18db      	adds	r3, r3, r3
 80068c4:	643b      	str	r3, [r7, #64]	; 0x40
 80068c6:	4613      	mov	r3, r2
 80068c8:	eb42 0303 	adc.w	r3, r2, r3
 80068cc:	647b      	str	r3, [r7, #68]	; 0x44
 80068ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80068d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80068d6:	f7fa fac5 	bl	8000e64 <__aeabi_uldivmod>
 80068da:	4602      	mov	r2, r0
 80068dc:	460b      	mov	r3, r1
 80068de:	4611      	mov	r1, r2
 80068e0:	4b3b      	ldr	r3, [pc, #236]	; (80069d0 <UART_SetConfig+0x2d4>)
 80068e2:	fba3 2301 	umull	r2, r3, r3, r1
 80068e6:	095b      	lsrs	r3, r3, #5
 80068e8:	2264      	movs	r2, #100	; 0x64
 80068ea:	fb02 f303 	mul.w	r3, r2, r3
 80068ee:	1acb      	subs	r3, r1, r3
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80068f6:	4b36      	ldr	r3, [pc, #216]	; (80069d0 <UART_SetConfig+0x2d4>)
 80068f8:	fba3 2302 	umull	r2, r3, r3, r2
 80068fc:	095b      	lsrs	r3, r3, #5
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006904:	441c      	add	r4, r3
 8006906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800690a:	2200      	movs	r2, #0
 800690c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006910:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006914:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006918:	4642      	mov	r2, r8
 800691a:	464b      	mov	r3, r9
 800691c:	1891      	adds	r1, r2, r2
 800691e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006920:	415b      	adcs	r3, r3
 8006922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006924:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006928:	4641      	mov	r1, r8
 800692a:	1851      	adds	r1, r2, r1
 800692c:	6339      	str	r1, [r7, #48]	; 0x30
 800692e:	4649      	mov	r1, r9
 8006930:	414b      	adcs	r3, r1
 8006932:	637b      	str	r3, [r7, #52]	; 0x34
 8006934:	f04f 0200 	mov.w	r2, #0
 8006938:	f04f 0300 	mov.w	r3, #0
 800693c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006940:	4659      	mov	r1, fp
 8006942:	00cb      	lsls	r3, r1, #3
 8006944:	4651      	mov	r1, sl
 8006946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800694a:	4651      	mov	r1, sl
 800694c:	00ca      	lsls	r2, r1, #3
 800694e:	4610      	mov	r0, r2
 8006950:	4619      	mov	r1, r3
 8006952:	4603      	mov	r3, r0
 8006954:	4642      	mov	r2, r8
 8006956:	189b      	adds	r3, r3, r2
 8006958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800695c:	464b      	mov	r3, r9
 800695e:	460a      	mov	r2, r1
 8006960:	eb42 0303 	adc.w	r3, r2, r3
 8006964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006974:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006978:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800697c:	460b      	mov	r3, r1
 800697e:	18db      	adds	r3, r3, r3
 8006980:	62bb      	str	r3, [r7, #40]	; 0x28
 8006982:	4613      	mov	r3, r2
 8006984:	eb42 0303 	adc.w	r3, r2, r3
 8006988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800698a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800698e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006992:	f7fa fa67 	bl	8000e64 <__aeabi_uldivmod>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4b0d      	ldr	r3, [pc, #52]	; (80069d0 <UART_SetConfig+0x2d4>)
 800699c:	fba3 1302 	umull	r1, r3, r3, r2
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	2164      	movs	r1, #100	; 0x64
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	3332      	adds	r3, #50	; 0x32
 80069ae:	4a08      	ldr	r2, [pc, #32]	; (80069d0 <UART_SetConfig+0x2d4>)
 80069b0:	fba2 2303 	umull	r2, r3, r2, r3
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	f003 0207 	and.w	r2, r3, #7
 80069ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4422      	add	r2, r4
 80069c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069c4:	e106      	b.n	8006bd4 <UART_SetConfig+0x4d8>
 80069c6:	bf00      	nop
 80069c8:	40011000 	.word	0x40011000
 80069cc:	40011400 	.word	0x40011400
 80069d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069d8:	2200      	movs	r2, #0
 80069da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80069de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80069e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80069e6:	4642      	mov	r2, r8
 80069e8:	464b      	mov	r3, r9
 80069ea:	1891      	adds	r1, r2, r2
 80069ec:	6239      	str	r1, [r7, #32]
 80069ee:	415b      	adcs	r3, r3
 80069f0:	627b      	str	r3, [r7, #36]	; 0x24
 80069f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069f6:	4641      	mov	r1, r8
 80069f8:	1854      	adds	r4, r2, r1
 80069fa:	4649      	mov	r1, r9
 80069fc:	eb43 0501 	adc.w	r5, r3, r1
 8006a00:	f04f 0200 	mov.w	r2, #0
 8006a04:	f04f 0300 	mov.w	r3, #0
 8006a08:	00eb      	lsls	r3, r5, #3
 8006a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a0e:	00e2      	lsls	r2, r4, #3
 8006a10:	4614      	mov	r4, r2
 8006a12:	461d      	mov	r5, r3
 8006a14:	4643      	mov	r3, r8
 8006a16:	18e3      	adds	r3, r4, r3
 8006a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a1c:	464b      	mov	r3, r9
 8006a1e:	eb45 0303 	adc.w	r3, r5, r3
 8006a22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a36:	f04f 0200 	mov.w	r2, #0
 8006a3a:	f04f 0300 	mov.w	r3, #0
 8006a3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a42:	4629      	mov	r1, r5
 8006a44:	008b      	lsls	r3, r1, #2
 8006a46:	4621      	mov	r1, r4
 8006a48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	008a      	lsls	r2, r1, #2
 8006a50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a54:	f7fa fa06 	bl	8000e64 <__aeabi_uldivmod>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4b60      	ldr	r3, [pc, #384]	; (8006be0 <UART_SetConfig+0x4e4>)
 8006a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a62:	095b      	lsrs	r3, r3, #5
 8006a64:	011c      	lsls	r4, r3, #4
 8006a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a78:	4642      	mov	r2, r8
 8006a7a:	464b      	mov	r3, r9
 8006a7c:	1891      	adds	r1, r2, r2
 8006a7e:	61b9      	str	r1, [r7, #24]
 8006a80:	415b      	adcs	r3, r3
 8006a82:	61fb      	str	r3, [r7, #28]
 8006a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a88:	4641      	mov	r1, r8
 8006a8a:	1851      	adds	r1, r2, r1
 8006a8c:	6139      	str	r1, [r7, #16]
 8006a8e:	4649      	mov	r1, r9
 8006a90:	414b      	adcs	r3, r1
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	f04f 0200 	mov.w	r2, #0
 8006a98:	f04f 0300 	mov.w	r3, #0
 8006a9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006aa0:	4659      	mov	r1, fp
 8006aa2:	00cb      	lsls	r3, r1, #3
 8006aa4:	4651      	mov	r1, sl
 8006aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006aaa:	4651      	mov	r1, sl
 8006aac:	00ca      	lsls	r2, r1, #3
 8006aae:	4610      	mov	r0, r2
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	4642      	mov	r2, r8
 8006ab6:	189b      	adds	r3, r3, r2
 8006ab8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006abc:	464b      	mov	r3, r9
 8006abe:	460a      	mov	r2, r1
 8006ac0:	eb42 0303 	adc.w	r3, r2, r3
 8006ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ad2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ad4:	f04f 0200 	mov.w	r2, #0
 8006ad8:	f04f 0300 	mov.w	r3, #0
 8006adc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ae0:	4649      	mov	r1, r9
 8006ae2:	008b      	lsls	r3, r1, #2
 8006ae4:	4641      	mov	r1, r8
 8006ae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aea:	4641      	mov	r1, r8
 8006aec:	008a      	lsls	r2, r1, #2
 8006aee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006af2:	f7fa f9b7 	bl	8000e64 <__aeabi_uldivmod>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4611      	mov	r1, r2
 8006afc:	4b38      	ldr	r3, [pc, #224]	; (8006be0 <UART_SetConfig+0x4e4>)
 8006afe:	fba3 2301 	umull	r2, r3, r3, r1
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	2264      	movs	r2, #100	; 0x64
 8006b06:	fb02 f303 	mul.w	r3, r2, r3
 8006b0a:	1acb      	subs	r3, r1, r3
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	3332      	adds	r3, #50	; 0x32
 8006b10:	4a33      	ldr	r2, [pc, #204]	; (8006be0 <UART_SetConfig+0x4e4>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	095b      	lsrs	r3, r3, #5
 8006b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b1c:	441c      	add	r4, r3
 8006b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b22:	2200      	movs	r2, #0
 8006b24:	673b      	str	r3, [r7, #112]	; 0x70
 8006b26:	677a      	str	r2, [r7, #116]	; 0x74
 8006b28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006b2c:	4642      	mov	r2, r8
 8006b2e:	464b      	mov	r3, r9
 8006b30:	1891      	adds	r1, r2, r2
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	415b      	adcs	r3, r3
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b3c:	4641      	mov	r1, r8
 8006b3e:	1851      	adds	r1, r2, r1
 8006b40:	6039      	str	r1, [r7, #0]
 8006b42:	4649      	mov	r1, r9
 8006b44:	414b      	adcs	r3, r1
 8006b46:	607b      	str	r3, [r7, #4]
 8006b48:	f04f 0200 	mov.w	r2, #0
 8006b4c:	f04f 0300 	mov.w	r3, #0
 8006b50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b54:	4659      	mov	r1, fp
 8006b56:	00cb      	lsls	r3, r1, #3
 8006b58:	4651      	mov	r1, sl
 8006b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b5e:	4651      	mov	r1, sl
 8006b60:	00ca      	lsls	r2, r1, #3
 8006b62:	4610      	mov	r0, r2
 8006b64:	4619      	mov	r1, r3
 8006b66:	4603      	mov	r3, r0
 8006b68:	4642      	mov	r2, r8
 8006b6a:	189b      	adds	r3, r3, r2
 8006b6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b6e:	464b      	mov	r3, r9
 8006b70:	460a      	mov	r2, r1
 8006b72:	eb42 0303 	adc.w	r3, r2, r3
 8006b76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	663b      	str	r3, [r7, #96]	; 0x60
 8006b82:	667a      	str	r2, [r7, #100]	; 0x64
 8006b84:	f04f 0200 	mov.w	r2, #0
 8006b88:	f04f 0300 	mov.w	r3, #0
 8006b8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b90:	4649      	mov	r1, r9
 8006b92:	008b      	lsls	r3, r1, #2
 8006b94:	4641      	mov	r1, r8
 8006b96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b9a:	4641      	mov	r1, r8
 8006b9c:	008a      	lsls	r2, r1, #2
 8006b9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ba2:	f7fa f95f 	bl	8000e64 <__aeabi_uldivmod>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4b0d      	ldr	r3, [pc, #52]	; (8006be0 <UART_SetConfig+0x4e4>)
 8006bac:	fba3 1302 	umull	r1, r3, r3, r2
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	2164      	movs	r1, #100	; 0x64
 8006bb4:	fb01 f303 	mul.w	r3, r1, r3
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	011b      	lsls	r3, r3, #4
 8006bbc:	3332      	adds	r3, #50	; 0x32
 8006bbe:	4a08      	ldr	r2, [pc, #32]	; (8006be0 <UART_SetConfig+0x4e4>)
 8006bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc4:	095b      	lsrs	r3, r3, #5
 8006bc6:	f003 020f 	and.w	r2, r3, #15
 8006bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4422      	add	r2, r4
 8006bd2:	609a      	str	r2, [r3, #8]
}
 8006bd4:	bf00      	nop
 8006bd6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006be0:	51eb851f 	.word	0x51eb851f

08006be4 <L3GD20_Update>:
	}
	LED9_OFF;LED10_OFF;LED11_OFF;
}

int L3GD20_Update(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	af00      	add	r7, sp, #0
	LED8_ON;
 8006be8:	2201      	movs	r2, #1
 8006bea:	2110      	movs	r1, #16
 8006bec:	4859      	ldr	r0, [pc, #356]	; (8006d54 <L3GD20_Update+0x170>)
 8006bee:	f7fd f8df 	bl	8003db0 <HAL_GPIO_WritePin>

	Noise_Z = (Noise_Z>GYRO_NOISE_THRESHOLD)? GYRO_NOISE_THRESHOLD:Noise_Z;
 8006bf2:	4b59      	ldr	r3, [pc, #356]	; (8006d58 <L3GD20_Update+0x174>)
 8006bf4:	edd3 7a00 	vldr	s15, [r3]
 8006bf8:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8006d5c <L3GD20_Update+0x178>
 8006bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c04:	dd01      	ble.n	8006c0a <L3GD20_Update+0x26>
 8006c06:	4b56      	ldr	r3, [pc, #344]	; (8006d60 <L3GD20_Update+0x17c>)
 8006c08:	e001      	b.n	8006c0e <L3GD20_Update+0x2a>
 8006c0a:	4b53      	ldr	r3, [pc, #332]	; (8006d58 <L3GD20_Update+0x174>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a52      	ldr	r2, [pc, #328]	; (8006d58 <L3GD20_Update+0x174>)
 8006c10:	6013      	str	r3, [r2, #0]
	Raw_z = 0;
 8006c12:	4b54      	ldr	r3, [pc, #336]	; (8006d64 <L3GD20_Update+0x180>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	801a      	strh	r2, [r3, #0]

	if (dataReadyFlag == L3GD20_DATA_READY)
 8006c18:	4b53      	ldr	r3, [pc, #332]	; (8006d68 <L3GD20_Update+0x184>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d139      	bne.n	8006c94 <L3GD20_Update+0xb0>
	{

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006c20:	2200      	movs	r2, #0
 8006c22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c26:	4851      	ldr	r0, [pc, #324]	; (8006d6c <L3GD20_Update+0x188>)
 8006c28:	f7fd f8c2 	bl	8003db0 <HAL_GPIO_WritePin>
		spiTxBuf[0] = 0x2c | 0x80;
 8006c2c:	4b50      	ldr	r3, [pc, #320]	; (8006d70 <L3GD20_Update+0x18c>)
 8006c2e:	22ac      	movs	r2, #172	; 0xac
 8006c30:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8006c32:	2332      	movs	r3, #50	; 0x32
 8006c34:	2201      	movs	r2, #1
 8006c36:	494e      	ldr	r1, [pc, #312]	; (8006d70 <L3GD20_Update+0x18c>)
 8006c38:	484e      	ldr	r0, [pc, #312]	; (8006d74 <L3GD20_Update+0x190>)
 8006c3a:	f7fd fe19 	bl	8004870 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &spiRxBuf[5], 1, 50);
 8006c3e:	2332      	movs	r3, #50	; 0x32
 8006c40:	2201      	movs	r2, #1
 8006c42:	494d      	ldr	r1, [pc, #308]	; (8006d78 <L3GD20_Update+0x194>)
 8006c44:	484b      	ldr	r0, [pc, #300]	; (8006d74 <L3GD20_Update+0x190>)
 8006c46:	f7fd ff4f 	bl	8004ae8 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c50:	4846      	ldr	r0, [pc, #280]	; (8006d6c <L3GD20_Update+0x188>)
 8006c52:	f7fd f8ad 	bl	8003db0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006c56:	2200      	movs	r2, #0
 8006c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c5c:	4843      	ldr	r0, [pc, #268]	; (8006d6c <L3GD20_Update+0x188>)
 8006c5e:	f7fd f8a7 	bl	8003db0 <HAL_GPIO_WritePin>
		spiTxBuf[0] = 0x2d | 0x80;
 8006c62:	4b43      	ldr	r3, [pc, #268]	; (8006d70 <L3GD20_Update+0x18c>)
 8006c64:	22ad      	movs	r2, #173	; 0xad
 8006c66:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8006c68:	2332      	movs	r3, #50	; 0x32
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	4940      	ldr	r1, [pc, #256]	; (8006d70 <L3GD20_Update+0x18c>)
 8006c6e:	4841      	ldr	r0, [pc, #260]	; (8006d74 <L3GD20_Update+0x190>)
 8006c70:	f7fd fdfe 	bl	8004870 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &spiRxBuf[6], 1, 50);
 8006c74:	2332      	movs	r3, #50	; 0x32
 8006c76:	2201      	movs	r2, #1
 8006c78:	4940      	ldr	r1, [pc, #256]	; (8006d7c <L3GD20_Update+0x198>)
 8006c7a:	483e      	ldr	r0, [pc, #248]	; (8006d74 <L3GD20_Update+0x190>)
 8006c7c:	f7fd ff34 	bl	8004ae8 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006c80:	2201      	movs	r2, #1
 8006c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c86:	4839      	ldr	r0, [pc, #228]	; (8006d6c <L3GD20_Update+0x188>)
 8006c88:	f7fd f892 	bl	8003db0 <HAL_GPIO_WritePin>

		dataReadyFlag = L3GD20_DATA_NOT_READY;
 8006c8c:	4b36      	ldr	r3, [pc, #216]	; (8006d68 <L3GD20_Update+0x184>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	e057      	b.n	8006d44 <L3GD20_Update+0x160>
	}
	else
	{

		Raw_z = (spiRxBuf[6] << 8) | spiRxBuf[5];
 8006c94:	4b3a      	ldr	r3, [pc, #232]	; (8006d80 <L3GD20_Update+0x19c>)
 8006c96:	799b      	ldrb	r3, [r3, #6]
 8006c98:	021b      	lsls	r3, r3, #8
 8006c9a:	b21a      	sxth	r2, r3
 8006c9c:	4b38      	ldr	r3, [pc, #224]	; (8006d80 <L3GD20_Update+0x19c>)
 8006c9e:	795b      	ldrb	r3, [r3, #5]
 8006ca0:	b21b      	sxth	r3, r3
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	b21a      	sxth	r2, r3
 8006ca6:	4b2f      	ldr	r3, [pc, #188]	; (8006d64 <L3GD20_Update+0x180>)
 8006ca8:	801a      	strh	r2, [r3, #0]
		angleRate_z = (float)(Raw_z - (offset_z)) * GYRO_SENSITIVITY;
 8006caa:	4b2e      	ldr	r3, [pc, #184]	; (8006d64 <L3GD20_Update+0x180>)
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	b21b      	sxth	r3, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	4b34      	ldr	r3, [pc, #208]	; (8006d84 <L3GD20_Update+0x1a0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	ee07 3a90 	vmov	s15, r3
 8006cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cc0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8006d88 <L3GD20_Update+0x1a4>
 8006cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cc8:	4b30      	ldr	r3, [pc, #192]	; (8006d8c <L3GD20_Update+0x1a8>)
 8006cca:	edc3 7a00 	vstr	s15, [r3]

		timeDifference = 0.001;
 8006cce:	4b30      	ldr	r3, [pc, #192]	; (8006d90 <L3GD20_Update+0x1ac>)
 8006cd0:	4a30      	ldr	r2, [pc, #192]	; (8006d94 <L3GD20_Update+0x1b0>)
 8006cd2:	601a      	str	r2, [r3, #0]

		if ((angleRate_z > Noise_Z) || (angleRate_z < -Noise_Z))
 8006cd4:	4b2d      	ldr	r3, [pc, #180]	; (8006d8c <L3GD20_Update+0x1a8>)
 8006cd6:	ed93 7a00 	vldr	s14, [r3]
 8006cda:	4b1f      	ldr	r3, [pc, #124]	; (8006d58 <L3GD20_Update+0x174>)
 8006cdc:	edd3 7a00 	vldr	s15, [r3]
 8006ce0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce8:	dc0c      	bgt.n	8006d04 <L3GD20_Update+0x120>
 8006cea:	4b1b      	ldr	r3, [pc, #108]	; (8006d58 <L3GD20_Update+0x174>)
 8006cec:	edd3 7a00 	vldr	s15, [r3]
 8006cf0:	eeb1 7a67 	vneg.f32	s14, s15
 8006cf4:	4b25      	ldr	r3, [pc, #148]	; (8006d8c <L3GD20_Update+0x1a8>)
 8006cf6:	edd3 7a00 	vldr	s15, [r3]
 8006cfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d02:	dd1c      	ble.n	8006d3e <L3GD20_Update+0x15a>
		{ 
			Angle_Z += ((angleRate_z + LastAngleRate_Z) * timeDifference) / (2.0f);
 8006d04:	4b21      	ldr	r3, [pc, #132]	; (8006d8c <L3GD20_Update+0x1a8>)
 8006d06:	ed93 7a00 	vldr	s14, [r3]
 8006d0a:	4b23      	ldr	r3, [pc, #140]	; (8006d98 <L3GD20_Update+0x1b4>)
 8006d0c:	edd3 7a00 	vldr	s15, [r3]
 8006d10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d14:	4b1e      	ldr	r3, [pc, #120]	; (8006d90 <L3GD20_Update+0x1ac>)
 8006d16:	edd3 7a00 	vldr	s15, [r3]
 8006d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006d22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006d26:	4b1d      	ldr	r3, [pc, #116]	; (8006d9c <L3GD20_Update+0x1b8>)
 8006d28:	edd3 7a00 	vldr	s15, [r3]
 8006d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d30:	4b1a      	ldr	r3, [pc, #104]	; (8006d9c <L3GD20_Update+0x1b8>)
 8006d32:	edc3 7a00 	vstr	s15, [r3]
			LastAngleRate_Z = angleRate_z;
 8006d36:	4b15      	ldr	r3, [pc, #84]	; (8006d8c <L3GD20_Update+0x1a8>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a17      	ldr	r2, [pc, #92]	; (8006d98 <L3GD20_Update+0x1b4>)
 8006d3c:	6013      	str	r3, [r2, #0]
		}
		else;
		dataReadyFlag = L3GD20_DATA_READY;
 8006d3e:	4b0a      	ldr	r3, [pc, #40]	; (8006d68 <L3GD20_Update+0x184>)
 8006d40:	2201      	movs	r2, #1
 8006d42:	701a      	strb	r2, [r3, #0]
	}
	LED8_OFF;
 8006d44:	2200      	movs	r2, #0
 8006d46:	2110      	movs	r1, #16
 8006d48:	4802      	ldr	r0, [pc, #8]	; (8006d54 <L3GD20_Update+0x170>)
 8006d4a:	f7fd f831 	bl	8003db0 <HAL_GPIO_WritePin>
	return 0;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	40020400 	.word	0x40020400
 8006d58:	200007c8 	.word	0x200007c8
 8006d5c:	3f733333 	.word	0x3f733333
 8006d60:	3f733333 	.word	0x3f733333
 8006d64:	200007e4 	.word	0x200007e4
 8006d68:	20000029 	.word	0x20000029
 8006d6c:	40020800 	.word	0x40020800
 8006d70:	200007d4 	.word	0x200007d4
 8006d74:	200002c4 	.word	0x200002c4
 8006d78:	200007dd 	.word	0x200007dd
 8006d7c:	200007de 	.word	0x200007de
 8006d80:	200007d8 	.word	0x200007d8
 8006d84:	200007c4 	.word	0x200007c4
 8006d88:	3e159b3d 	.word	0x3e159b3d
 8006d8c:	200007c0 	.word	0x200007c0
 8006d90:	200007e0 	.word	0x200007e0
 8006d94:	3a83126f 	.word	0x3a83126f
 8006d98:	200007d0 	.word	0x200007d0
 8006d9c:	200007cc 	.word	0x200007cc

08006da0 <PID_Controller>:
static float PID_correction = 0, I = 0, last_error = 0; // STORE INTEGRAL ERROR
PID_State pid_state = IDLE;


int PID_Controller(void)
{
 8006da0:	b5b0      	push	{r4, r5, r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
	float error;
	switch (pid_state)
 8006da6:	4c36      	ldr	r4, [pc, #216]	; (8006e80 <PID_Controller+0xe0>)
 8006da8:	7824      	ldrb	r4, [r4, #0]
 8006daa:	2c00      	cmp	r4, #0
 8006dac:	d002      	beq.n	8006db4 <PID_Controller+0x14>
 8006dae:	2c01      	cmp	r4, #1
 8006db0:	d013      	beq.n	8006dda <PID_Controller+0x3a>
 8006db2:	e060      	b.n	8006e76 <PID_Controller+0xd6>
	{
	case (IDLE):
		I = 0, last_error = 0;
 8006db4:	4b33      	ldr	r3, [pc, #204]	; (8006e84 <PID_Controller+0xe4>)
 8006db6:	f04f 0200 	mov.w	r2, #0
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	4b32      	ldr	r3, [pc, #200]	; (8006e88 <PID_Controller+0xe8>)
 8006dbe:	f04f 0200 	mov.w	r2, #0
 8006dc2:	601a      	str	r2, [r3, #0]
		STOP_ROBOT;
 8006dc4:	4b31      	ldr	r3, [pc, #196]	; (8006e8c <PID_Controller+0xec>)
 8006dc6:	f04f 0200 	mov.w	r2, #0
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	4b30      	ldr	r3, [pc, #192]	; (8006e90 <PID_Controller+0xf0>)
 8006dce:	f04f 0200 	mov.w	r2, #0
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	f000 fb7a 	bl	80074cc <setWheels>
		break;
 8006dd8:	e04d      	b.n	8006e76 <PID_Controller+0xd6>
	case (MOVE_STRAIGHT):
		error = l_position, error -= r_position;
 8006dda:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8006dde:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8006de0:	ee07 4a90 	vmov	s15, r4
 8006de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de8:	edc7 7a01 	vstr	s15, [r7, #4]
 8006dec:	4c29      	ldr	r4, [pc, #164]	; (8006e94 <PID_Controller+0xf4>)
 8006dee:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8006df0:	2500      	movs	r5, #0
 8006df2:	4622      	mov	r2, r4
 8006df4:	462b      	mov	r3, r5
 8006df6:	2400      	movs	r4, #0
 8006df8:	f1d2 30ff 	rsbs	r0, r2, #4294967295
 8006dfc:	eb64 0103 	sbc.w	r1, r4, r3
 8006e00:	f7f9 fff2 	bl	8000de8 <__aeabi_l2f>
 8006e04:	ee07 0a10 	vmov	s14, r0
 8006e08:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e10:	edc7 7a01 	vstr	s15, [r7, #4]
		I = I + error;
 8006e14:	4b1b      	ldr	r3, [pc, #108]	; (8006e84 <PID_Controller+0xe4>)
 8006e16:	ed93 7a00 	vldr	s14, [r3]
 8006e1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e22:	4b18      	ldr	r3, [pc, #96]	; (8006e84 <PID_Controller+0xe4>)
 8006e24:	edc3 7a00 	vstr	s15, [r3]
		PID_correction = (error * STKp + I * STKi + (error - last_error) * STKd) / PID_RED_FACTOR;
 8006e28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e34:	4b13      	ldr	r3, [pc, #76]	; (8006e84 <PID_Controller+0xe4>)
 8006e36:	edd3 7a00 	vldr	s15, [r3]
 8006e3a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8006e98 <PID_Controller+0xf8>
 8006e3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006e42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006e46:	4b10      	ldr	r3, [pc, #64]	; (8006e88 <PID_Controller+0xe8>)
 8006e48:	edd3 7a00 	vldr	s15, [r3]
 8006e4c:	edd7 6a01 	vldr	s13, [r7, #4]
 8006e50:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006e54:	eddf 6a11 	vldr	s13, [pc, #68]	; 8006e9c <PID_Controller+0xfc>
 8006e58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006e5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006e60:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8006ea0 <PID_Controller+0x100>
 8006e64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e68:	4b0e      	ldr	r3, [pc, #56]	; (8006ea4 <PID_Controller+0x104>)
 8006e6a:	edc3 7a00 	vstr	s15, [r3]
		last_error = error;
 8006e6e:	4a06      	ldr	r2, [pc, #24]	; (8006e88 <PID_Controller+0xe8>)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6013      	str	r3, [r2, #0]
		break;
 8006e74:	bf00      	nop
	}
	return 0;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8006e80:	200007fc 	.word	0x200007fc
 8006e84:	200007f4 	.word	0x200007f4
 8006e88:	200007f8 	.word	0x200007f8
 8006e8c:	20000800 	.word	0x20000800
 8006e90:	20000804 	.word	0x20000804
 8006e94:	40000c00 	.word	0x40000c00
 8006e98:	3dcccccd 	.word	0x3dcccccd
 8006e9c:	3f4ccccd 	.word	0x3f4ccccd
 8006ea0:	42480000 	.word	0x42480000
 8006ea4:	200007f0 	.word	0x200007f0

08006ea8 <moveStraight>:

bool moveStraight(float dist_cm)
{
 8006ea8:	b5b0      	push	{r4, r5, r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	ed87 0a01 	vstr	s0, [r7, #4]
	if (start_l == 0)
 8006eb2:	4b53      	ldr	r3, [pc, #332]	; (8007000 <moveStraight+0x158>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d104      	bne.n	8006ec4 <moveStraight+0x1c>
		start_l = l_position;
 8006eba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	4a4f      	ldr	r2, [pc, #316]	; (8007000 <moveStraight+0x158>)
 8006ec2:	6013      	str	r3, [r2, #0]
	if (start_r == 0)
 8006ec4:	4b4f      	ldr	r3, [pc, #316]	; (8007004 <moveStraight+0x15c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d104      	bne.n	8006ed6 <moveStraight+0x2e>
		start_r = r_position;
 8006ecc:	4b4e      	ldr	r3, [pc, #312]	; (8007008 <moveStraight+0x160>)
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	43db      	mvns	r3, r3
 8006ed2:	4a4c      	ldr	r2, [pc, #304]	; (8007004 <moveStraight+0x15c>)
 8006ed4:	6013      	str	r3, [r2, #0]

	if (abs(l_position - start_l) >= dist_cm * LINEAR_SENSITIVITY && abs(r_position - start_r) >= dist_cm * LINEAR_SENSITIVITY)
 8006ed6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006edc:	4b48      	ldr	r3, [pc, #288]	; (8007000 <moveStraight+0x158>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	bfb8      	it	lt
 8006ee6:	425b      	neglt	r3, r3
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7f9 fb1b 	bl	8000524 <__aeabi_i2d>
 8006eee:	4604      	mov	r4, r0
 8006ef0:	460d      	mov	r5, r1
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7f9 fb28 	bl	8000548 <__aeabi_f2d>
 8006ef8:	a33f      	add	r3, pc, #252	; (adr r3, 8006ff8 <moveStraight+0x150>)
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	f7f9 fb7b 	bl	80005f8 <__aeabi_dmul>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	4620      	mov	r0, r4
 8006f08:	4629      	mov	r1, r5
 8006f0a:	f7f9 fdfb 	bl	8000b04 <__aeabi_dcmpge>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d02b      	beq.n	8006f6c <moveStraight+0xc4>
 8006f14:	4b3c      	ldr	r3, [pc, #240]	; (8007008 <moveStraight+0x160>)
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	43da      	mvns	r2, r3
 8006f1a:	4b3a      	ldr	r3, [pc, #232]	; (8007004 <moveStraight+0x15c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	bfb8      	it	lt
 8006f24:	425b      	neglt	r3, r3
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7f9 fafc 	bl	8000524 <__aeabi_i2d>
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	460d      	mov	r5, r1
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7f9 fb09 	bl	8000548 <__aeabi_f2d>
 8006f36:	a330      	add	r3, pc, #192	; (adr r3, 8006ff8 <moveStraight+0x150>)
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	f7f9 fb5c 	bl	80005f8 <__aeabi_dmul>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	4620      	mov	r0, r4
 8006f46:	4629      	mov	r1, r5
 8006f48:	f7f9 fddc 	bl	8000b04 <__aeabi_dcmpge>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00c      	beq.n	8006f6c <moveStraight+0xc4>
	{
		start_l = 0, start_r = 0;
 8006f52:	4b2b      	ldr	r3, [pc, #172]	; (8007000 <moveStraight+0x158>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	4b2a      	ldr	r3, [pc, #168]	; (8007004 <moveStraight+0x15c>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]
		pid_state = IDLE;
 8006f5e:	4b2b      	ldr	r3, [pc, #172]	; (800700c <moveStraight+0x164>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	701a      	strb	r2, [r3, #0]
		PID_Controller();
 8006f64:	f7ff ff1c 	bl	8006da0 <PID_Controller>
		return true;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e03f      	b.n	8006fec <moveStraight+0x144>
	}
	pid_state = MOVE_STRAIGHT;
 8006f6c:	4b27      	ldr	r3, [pc, #156]	; (800700c <moveStraight+0x164>)
 8006f6e:	2201      	movs	r2, #1
 8006f70:	701a      	strb	r2, [r3, #0]
	PID_Controller();
 8006f72:	f7ff ff15 	bl	8006da0 <PID_Controller>
	l_speed = (dist_cm > 0) ? base_l_speed - PID_correction : -base_l_speed - PID_correction, r_speed = (dist_cm > 0) ? base_r_speed + PID_correction : -base_r_speed + PID_correction;
 8006f76:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f82:	dd08      	ble.n	8006f96 <moveStraight+0xee>
 8006f84:	4b22      	ldr	r3, [pc, #136]	; (8007010 <moveStraight+0x168>)
 8006f86:	ed93 7a00 	vldr	s14, [r3]
 8006f8a:	4b22      	ldr	r3, [pc, #136]	; (8007014 <moveStraight+0x16c>)
 8006f8c:	edd3 7a00 	vldr	s15, [r3]
 8006f90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f94:	e009      	b.n	8006faa <moveStraight+0x102>
 8006f96:	4b1e      	ldr	r3, [pc, #120]	; (8007010 <moveStraight+0x168>)
 8006f98:	edd3 7a00 	vldr	s15, [r3]
 8006f9c:	eeb1 7a67 	vneg.f32	s14, s15
 8006fa0:	4b1c      	ldr	r3, [pc, #112]	; (8007014 <moveStraight+0x16c>)
 8006fa2:	edd3 7a00 	vldr	s15, [r3]
 8006fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006faa:	4b1b      	ldr	r3, [pc, #108]	; (8007018 <moveStraight+0x170>)
 8006fac:	edc3 7a00 	vstr	s15, [r3]
 8006fb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8006fb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fbc:	dd08      	ble.n	8006fd0 <moveStraight+0x128>
 8006fbe:	4b17      	ldr	r3, [pc, #92]	; (800701c <moveStraight+0x174>)
 8006fc0:	ed93 7a00 	vldr	s14, [r3]
 8006fc4:	4b13      	ldr	r3, [pc, #76]	; (8007014 <moveStraight+0x16c>)
 8006fc6:	edd3 7a00 	vldr	s15, [r3]
 8006fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fce:	e007      	b.n	8006fe0 <moveStraight+0x138>
 8006fd0:	4b10      	ldr	r3, [pc, #64]	; (8007014 <moveStraight+0x16c>)
 8006fd2:	ed93 7a00 	vldr	s14, [r3]
 8006fd6:	4b11      	ldr	r3, [pc, #68]	; (800701c <moveStraight+0x174>)
 8006fd8:	edd3 7a00 	vldr	s15, [r3]
 8006fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fe0:	4b0f      	ldr	r3, [pc, #60]	; (8007020 <moveStraight+0x178>)
 8006fe2:	edc3 7a00 	vstr	s15, [r3]
	setWheels();
 8006fe6:	f000 fa71 	bl	80074cc <setWheels>
	return false;
 8006fea:	2300      	movs	r3, #0
 8006fec:	4618      	mov	r0, r3
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8006ff4:	f3af 8000 	nop.w
 8006ff8:	47ae147b 	.word	0x47ae147b
 8006ffc:	40287ae1 	.word	0x40287ae1
 8007000:	200007e8 	.word	0x200007e8
 8007004:	200007ec 	.word	0x200007ec
 8007008:	40000c00 	.word	0x40000c00
 800700c:	200007fc 	.word	0x200007fc
 8007010:	2000002c 	.word	0x2000002c
 8007014:	200007f0 	.word	0x200007f0
 8007018:	20000800 	.word	0x20000800
 800701c:	20000030 	.word	0x20000030
 8007020:	20000804 	.word	0x20000804

08007024 <readADC>:
#include "adc.h"



uint16_t readADC(adc_channels channel, uint8_t timeout)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	460a      	mov	r2, r1
 800702e:	71fb      	strb	r3, [r7, #7]
 8007030:	4613      	mov	r3, r2
 8007032:	71bb      	strb	r3, [r7, #6]
    ADC_ChannelConfTypeDef sConfig = {0};
 8007034:	f107 030c 	add.w	r3, r7, #12
 8007038:	2200      	movs	r2, #0
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	605a      	str	r2, [r3, #4]
 800703e:	609a      	str	r2, [r3, #8]
 8007040:	60da      	str	r2, [r3, #12]
    uint16_t adc_val = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	83fb      	strh	r3, [r7, #30]
    switch (channel)
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	2b04      	cmp	r3, #4
 800704a:	d81c      	bhi.n	8007086 <readADC+0x62>
 800704c:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <readADC+0x30>)
 800704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007052:	bf00      	nop
 8007054:	08007075 	.word	0x08007075
 8007058:	08007069 	.word	0x08007069
 800705c:	08007081 	.word	0x08007081
 8007060:	0800706f 	.word	0x0800706f
 8007064:	0800707b 	.word	0x0800707b
    {
        case RF_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_4;
 8007068:	2304      	movs	r3, #4
 800706a:	60fb      	str	r3, [r7, #12]
            break;
 800706c:	e00b      	b.n	8007086 <readADC+0x62>

        case DL_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_8;
 800706e:	2308      	movs	r3, #8
 8007070:	60fb      	str	r3, [r7, #12]
            break;
 8007072:	e008      	b.n	8007086 <readADC+0x62>

        case LF_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_9;
 8007074:	2309      	movs	r3, #9
 8007076:	60fb      	str	r3, [r7, #12]
            break;
 8007078:	e005      	b.n	8007086 <readADC+0x62>

        case BAT_VOL:
        	sConfig.Channel = ADC_CHANNEL_13;
 800707a:	230d      	movs	r3, #13
 800707c:	60fb      	str	r3, [r7, #12]
            break;
 800707e:	e002      	b.n	8007086 <readADC+0x62>
        
        case DR_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_14;
 8007080:	230e      	movs	r3, #14
 8007082:	60fb      	str	r3, [r7, #12]
            break;
 8007084:	bf00      	nop
    }


    sConfig.Rank = 1;
 8007086:	2301      	movs	r3, #1
 8007088:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800708a:	2304      	movs	r3, #4
 800708c:	617b      	str	r3, [r7, #20]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800708e:	f107 030c 	add.w	r3, r7, #12
 8007092:	4619      	mov	r1, r3
 8007094:	480e      	ldr	r0, [pc, #56]	; (80070d0 <readADC+0xac>)
 8007096:	f7fb fed5 	bl	8002e44 <HAL_ADC_ConfigChannel>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <readADC+0x80>
    {
      Error_Handler();
 80070a0:	f7fa fcf8 	bl	8001a94 <Error_Handler>
    }

    HAL_ADC_Start(&hadc1);
 80070a4:	480a      	ldr	r0, [pc, #40]	; (80070d0 <readADC+0xac>)
 80070a6:	f7fb fd2f 	bl	8002b08 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1,timeout);
 80070aa:	79bb      	ldrb	r3, [r7, #6]
 80070ac:	4619      	mov	r1, r3
 80070ae:	4808      	ldr	r0, [pc, #32]	; (80070d0 <readADC+0xac>)
 80070b0:	f7fb fe2f 	bl	8002d12 <HAL_ADC_PollForConversion>
    adc_val = HAL_ADC_GetValue(&hadc1);
 80070b4:	4806      	ldr	r0, [pc, #24]	; (80070d0 <readADC+0xac>)
 80070b6:	f7fb feb7 	bl	8002e28 <HAL_ADC_GetValue>
 80070ba:	4603      	mov	r3, r0
 80070bc:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(&hadc1);
 80070be:	4804      	ldr	r0, [pc, #16]	; (80070d0 <readADC+0xac>)
 80070c0:	f7fb fdf4 	bl	8002cac <HAL_ADC_Stop>

    return adc_val;
 80070c4:	8bfb      	ldrh	r3, [r7, #30]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3720      	adds	r7, #32
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	2000021c 	.word	0x2000021c

080070d4 <displayInit>:
#include "display.h"

DISP_State disp_state;

void displayInit(void){
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80070d8:	f7fb f9b4 	bl	8002444 <ssd1306_Init>
	disp_state = INIT;
 80070dc:	4b03      	ldr	r3, [pc, #12]	; (80070ec <displayInit+0x18>)
 80070de:	2200      	movs	r2, #0
 80070e0:	701a      	strb	r2, [r3, #0]
	displayUpdate();
 80070e2:	f000 f88d 	bl	8007200 <displayUpdate>
}
 80070e6:	bf00      	nop
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	200007fd 	.word	0x200007fd

080070f0 <clearScreen>:

void clearScreen()
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80070f4:	2000      	movs	r0, #0
 80070f6:	f7fb fa0f 	bl	8002518 <ssd1306_Fill>
}
 80070fa:	bf00      	nop
 80070fc:	bd80      	pop	{r7, pc}
	...

08007100 <writeString>:

void writeString(char *str, FONT_Size font_size)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
	switch (font_size)
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	2b03      	cmp	r3, #3
 8007110:	d826      	bhi.n	8007160 <writeString+0x60>
 8007112:	a201      	add	r2, pc, #4	; (adr r2, 8007118 <writeString+0x18>)
 8007114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007118:	08007129 	.word	0x08007129
 800711c:	08007137 	.word	0x08007137
 8007120:	08007145 	.word	0x08007145
 8007124:	08007153 	.word	0x08007153
	{
	case SMALL:
		ssd1306_WriteString(str, Font_6x8, White);
 8007128:	4a0f      	ldr	r2, [pc, #60]	; (8007168 <writeString+0x68>)
 800712a:	2301      	movs	r3, #1
 800712c:	ca06      	ldmia	r2, {r1, r2}
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7fb fb1a 	bl	8002768 <ssd1306_WriteString>
		break;
 8007134:	e014      	b.n	8007160 <writeString+0x60>
	case MEDIUM:
		ssd1306_WriteString(str, Font_7x10, White);
 8007136:	4a0d      	ldr	r2, [pc, #52]	; (800716c <writeString+0x6c>)
 8007138:	2301      	movs	r3, #1
 800713a:	ca06      	ldmia	r2, {r1, r2}
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7fb fb13 	bl	8002768 <ssd1306_WriteString>
		break;
 8007142:	e00d      	b.n	8007160 <writeString+0x60>
	case LARGE:
		ssd1306_WriteString(str, Font_11x18, White);
 8007144:	4a0a      	ldr	r2, [pc, #40]	; (8007170 <writeString+0x70>)
 8007146:	2301      	movs	r3, #1
 8007148:	ca06      	ldmia	r2, {r1, r2}
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7fb fb0c 	bl	8002768 <ssd1306_WriteString>
		break;
 8007150:	e006      	b.n	8007160 <writeString+0x60>
	case HUGE:
		ssd1306_WriteString(str, Font_16x24, White);
 8007152:	4a08      	ldr	r2, [pc, #32]	; (8007174 <writeString+0x74>)
 8007154:	2301      	movs	r3, #1
 8007156:	ca06      	ldmia	r2, {r1, r2}
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7fb fb05 	bl	8002768 <ssd1306_WriteString>
		break;
 800715e:	bf00      	nop
	}
}
 8007160:	bf00      	nop
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	20000004 	.word	0x20000004
 800716c:	2000000c 	.word	0x2000000c
 8007170:	20000014 	.word	0x20000014
 8007174:	2000001c 	.word	0x2000001c

08007178 <putString>:

void putString(char *str, int x, int y, FONT_Size font_size)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
 8007184:	70fb      	strb	r3, [r7, #3]
	ssd1306_SetCursor(x, y);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	b2db      	uxtb	r3, r3
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	b2d2      	uxtb	r2, r2
 800718e:	4611      	mov	r1, r2
 8007190:	4618      	mov	r0, r3
 8007192:	f7fb fb0f 	bl	80027b4 <ssd1306_SetCursor>
	writeString(str, font_size);
 8007196:	78fb      	ldrb	r3, [r7, #3]
 8007198:	4619      	mov	r1, r3
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f7ff ffb0 	bl	8007100 <writeString>
}
 80071a0:	bf00      	nop
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <putFloat>:
	ssd1306_SetCursor(x, y);
	writeString(buff, font_size);
}

void putFloat(float FLOAT, int x, int y, FONT_Size font_size)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b096      	sub	sp, #88	; 0x58
 80071ac:	af02      	add	r7, sp, #8
 80071ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80071b2:	60b8      	str	r0, [r7, #8]
 80071b4:	6079      	str	r1, [r7, #4]
 80071b6:	4613      	mov	r3, r2
 80071b8:	70fb      	strb	r3, [r7, #3]
	char buff[64];
	snprintf(buff, sizeof(buff), "%.2f", FLOAT); // Change %.2f to adjust precision
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f7f9 f9c4 	bl	8000548 <__aeabi_f2d>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	f107 0010 	add.w	r0, r7, #16
 80071c8:	e9cd 2300 	strd	r2, r3, [sp]
 80071cc:	4a0b      	ldr	r2, [pc, #44]	; (80071fc <putFloat+0x54>)
 80071ce:	2140      	movs	r1, #64	; 0x40
 80071d0:	f001 f99a 	bl	8008508 <sniprintf>
	ssd1306_SetCursor(x, y);
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	b2d2      	uxtb	r2, r2
 80071dc:	4611      	mov	r1, r2
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fb fae8 	bl	80027b4 <ssd1306_SetCursor>
	writeString(buff, font_size);
 80071e4:	78fa      	ldrb	r2, [r7, #3]
 80071e6:	f107 0310 	add.w	r3, r7, #16
 80071ea:	4611      	mov	r1, r2
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff ff87 	bl	8007100 <writeString>
}
 80071f2:	bf00      	nop
 80071f4:	3750      	adds	r7, #80	; 0x50
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	0800a694 	.word	0x0800a694

08007200 <displayUpdate>:

void displayUpdate(void)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
	clearScreen();
 8007206:	f7ff ff73 	bl	80070f0 <clearScreen>
	switch (disp_state)
 800720a:	4b23      	ldr	r3, [pc, #140]	; (8007298 <displayUpdate+0x98>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b05      	cmp	r3, #5
 8007210:	d83b      	bhi.n	800728a <displayUpdate+0x8a>
 8007212:	a201      	add	r2, pc, #4	; (adr r2, 8007218 <displayUpdate+0x18>)
 8007214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007218:	08007231 	.word	0x08007231
 800721c:	0800725b 	.word	0x0800725b
 8007220:	0800728b 	.word	0x0800728b
 8007224:	0800728b 	.word	0x0800728b
 8007228:	0800727d 	.word	0x0800727d
 800722c:	0800728b 	.word	0x0800728b
	{
	// INITIALIZATION BLOCK: AUDI CAR EXPECTED
	case (INIT):
		for (int delta = 0; delta < 5; delta++)
 8007230:	2300      	movs	r3, #0
 8007232:	607b      	str	r3, [r7, #4]
 8007234:	e00d      	b.n	8007252 <displayUpdate+0x52>
			ssd1306_DrawCircle(16 * delta + 35, 15, 10, White);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	b2db      	uxtb	r3, r3
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	b2db      	uxtb	r3, r3
 800723e:	3323      	adds	r3, #35	; 0x23
 8007240:	b2d8      	uxtb	r0, r3
 8007242:	2301      	movs	r3, #1
 8007244:	220a      	movs	r2, #10
 8007246:	210f      	movs	r1, #15
 8007248:	f7fb facc 	bl	80027e4 <ssd1306_DrawCircle>
		for (int delta = 0; delta < 5; delta++)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3301      	adds	r3, #1
 8007250:	607b      	str	r3, [r7, #4]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b04      	cmp	r3, #4
 8007256:	ddee      	ble.n	8007236 <displayUpdate+0x36>
		break;
 8007258:	e017      	b.n	800728a <displayUpdate+0x8a>
	// DEFAULT SCREEN --> BATTERY PERCENTAGE, STATE OF THE ROBOT
	case (DEFAULT):

		// DISPLAYING BATTERY VOLTAGE
		
		putString("BAT:",74,2,SMALL);
 800725a:	2300      	movs	r3, #0
 800725c:	2202      	movs	r2, #2
 800725e:	214a      	movs	r1, #74	; 0x4a
 8007260:	480e      	ldr	r0, [pc, #56]	; (800729c <displayUpdate+0x9c>)
 8007262:	f7ff ff89 	bl	8007178 <putString>
		putFloat(voltage,104 , 2, SMALL);
 8007266:	4b0e      	ldr	r3, [pc, #56]	; (80072a0 <displayUpdate+0xa0>)
 8007268:	edd3 7a00 	vldr	s15, [r3]
 800726c:	2200      	movs	r2, #0
 800726e:	2102      	movs	r1, #2
 8007270:	2068      	movs	r0, #104	; 0x68
 8007272:	eeb0 0a67 	vmov.f32	s0, s15
 8007276:	f7ff ff97 	bl	80071a8 <putFloat>
		break;
 800727a:	e006      	b.n	800728a <displayUpdate+0x8a>
	case (GYRO_CALIB):
		break;
	case (SENSOR_READ):
		break;
	case (LOW_BAT):
		putString("BAT LOW...!!!",2,7,LARGE);
 800727c:	2302      	movs	r3, #2
 800727e:	2207      	movs	r2, #7
 8007280:	2102      	movs	r1, #2
 8007282:	4808      	ldr	r0, [pc, #32]	; (80072a4 <displayUpdate+0xa4>)
 8007284:	f7ff ff78 	bl	8007178 <putString>
		break;
 8007288:	bf00      	nop
	case (SUCESS_MSG):
		break;
	}
	ssd1306_UpdateScreen();
 800728a:	f7fb f969 	bl	8002560 <ssd1306_UpdateScreen>
 800728e:	bf00      	nop
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	200007fd 	.word	0x200007fd
 800729c:	0800a69c 	.word	0x0800a69c
 80072a0:	2000080c 	.word	0x2000080c
 80072a4:	0800a6a4 	.word	0x0800a6a4

080072a8 <encoderInit>:
#include "encoder.h"


// FUCTION: INTIALIZATION OF ENCODER RELATED HARDWARE
void encoderInit(void){
 80072a8:	b580      	push	{r7, lr}
 80072aa:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);   // LEFT ENCODER
 80072ac:	213c      	movs	r1, #60	; 0x3c
 80072ae:	4805      	ldr	r0, [pc, #20]	; (80072c4 <encoderInit+0x1c>)
 80072b0:	f7fe faee 	bl	8005890 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);   // RIGHT ENCODER
 80072b4:	213c      	movs	r1, #60	; 0x3c
 80072b6:	4804      	ldr	r0, [pc, #16]	; (80072c8 <encoderInit+0x20>)
 80072b8:	f7fe faea 	bl	8005890 <HAL_TIM_Encoder_Start>
	resetEncoder();
 80072bc:	f000 f806 	bl	80072cc <resetEncoder>
}
 80072c0:	bf00      	nop
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	200003bc 	.word	0x200003bc
 80072c8:	2000044c 	.word	0x2000044c

080072cc <resetEncoder>:

void resetEncoder(void){
 80072cc:	b480      	push	{r7}
 80072ce:	af00      	add	r7, sp, #0
	TIM2->CNT = _ENCODER_START + 1;
 80072d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80072d4:	4a04      	ldr	r2, [pc, #16]	; (80072e8 <resetEncoder+0x1c>)
 80072d6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM5->CNT = u32_max-_ENCODER_START;
 80072d8:	4b04      	ldr	r3, [pc, #16]	; (80072ec <resetEncoder+0x20>)
 80072da:	4a05      	ldr	r2, [pc, #20]	; (80072f0 <resetEncoder+0x24>)
 80072dc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80072de:	bf00      	nop
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	00068db9 	.word	0x00068db9
 80072ec:	40000c00 	.word	0x40000c00
 80072f0:	fff97246 	.word	0xfff97246

080072f4 <motorInit>:
uint16_t u12_max = 4095;
float l_speed, r_speed;
float base_l_speed = .4, base_r_speed = .4;

void motorInit(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
	// Start PWM for TIM4 channels (you may need to adjust this based on your application)
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // LPWMA
 80072f8:	2100      	movs	r1, #0
 80072fa:	480d      	ldr	r0, [pc, #52]	; (8007330 <motorInit+0x3c>)
 80072fc:	f7fe f95a 	bl	80055b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // LPWMB
 8007300:	2104      	movs	r1, #4
 8007302:	480b      	ldr	r0, [pc, #44]	; (8007330 <motorInit+0x3c>)
 8007304:	f7fe f956 	bl	80055b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // RPWMA
 8007308:	2108      	movs	r1, #8
 800730a:	4809      	ldr	r0, [pc, #36]	; (8007330 <motorInit+0x3c>)
 800730c:	f7fe f952 	bl	80055b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // RPWMB
 8007310:	210c      	movs	r1, #12
 8007312:	4807      	ldr	r0, [pc, #28]	; (8007330 <motorInit+0x3c>)
 8007314:	f7fe f94e 	bl	80055b4 <HAL_TIM_PWM_Start>
	STOP_ROBOT;
 8007318:	4b06      	ldr	r3, [pc, #24]	; (8007334 <motorInit+0x40>)
 800731a:	f04f 0200 	mov.w	r2, #0
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	4b05      	ldr	r3, [pc, #20]	; (8007338 <motorInit+0x44>)
 8007322:	f04f 0200 	mov.w	r2, #0
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	f000 f8d0 	bl	80074cc <setWheels>
}
 800732c:	bf00      	nop
 800732e:	bd80      	pop	{r7, pc}
 8007330:	20000404 	.word	0x20000404
 8007334:	20000800 	.word	0x20000800
 8007338:	20000804 	.word	0x20000804

0800733c <setLeftWheel>:

void setLeftWheel(float l_speed)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t l_pwma, l_pwmb;

	if (abs(l_speed) > SPEED_THRESHOLD)
 8007346:	edd7 7a01 	vldr	s15, [r7, #4]
 800734a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800734e:	ee17 3a90 	vmov	r3, s15
 8007352:	2b00      	cmp	r3, #0
 8007354:	bfb8      	it	lt
 8007356:	425b      	neglt	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	dd0c      	ble.n	8007376 <setLeftWheel+0x3a>
		l_speed = (l_speed > 0) ? SPEED_THRESHOLD : -SPEED_THRESHOLD;
 800735c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007360:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007368:	dd02      	ble.n	8007370 <setLeftWheel+0x34>
 800736a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800736e:	e001      	b.n	8007374 <setLeftWheel+0x38>
 8007370:	f04f 433f 	mov.w	r3, #3204448256	; 0xbf000000
 8007374:	607b      	str	r3, [r7, #4]

	l_pwma = (l_speed < 0) ? (-l_speed) * u12_max : 0;
 8007376:	edd7 7a01 	vldr	s15, [r7, #4]
 800737a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800737e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007382:	d511      	bpl.n	80073a8 <setLeftWheel+0x6c>
 8007384:	edd7 7a01 	vldr	s15, [r7, #4]
 8007388:	eeb1 7a67 	vneg.f32	s14, s15
 800738c:	4b1b      	ldr	r3, [pc, #108]	; (80073fc <setLeftWheel+0xc0>)
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	ee07 3a90 	vmov	s15, r3
 8007394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073a0:	ee17 3a90 	vmov	r3, s15
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	e000      	b.n	80073aa <setLeftWheel+0x6e>
 80073a8:	2300      	movs	r3, #0
 80073aa:	81fb      	strh	r3, [r7, #14]
	l_pwmb = (l_speed >= 0) ? l_speed * u12_max : 0;
 80073ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80073b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b8:	db0f      	blt.n	80073da <setLeftWheel+0x9e>
 80073ba:	4b10      	ldr	r3, [pc, #64]	; (80073fc <setLeftWheel+0xc0>)
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80073ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073d2:	ee17 3a90 	vmov	r3, s15
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	e000      	b.n	80073dc <setLeftWheel+0xa0>
 80073da:	2300      	movs	r3, #0
 80073dc:	81bb      	strh	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, l_pwma); // LPWMA
 80073de:	4b08      	ldr	r3, [pc, #32]	; (8007400 <setLeftWheel+0xc4>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	89fa      	ldrh	r2, [r7, #14]
 80073e4:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, l_pwmb); // LPWMB
 80073e6:	4b06      	ldr	r3, [pc, #24]	; (8007400 <setLeftWheel+0xc4>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	89ba      	ldrh	r2, [r7, #12]
 80073ec:	635a      	str	r2, [r3, #52]	; 0x34
}
 80073ee:	bf00      	nop
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	2000002a 	.word	0x2000002a
 8007400:	20000404 	.word	0x20000404

08007404 <setRightWheel>:

void setRightWheel(float r_speed)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t r_pwma, r_pwmb;

	if (abs(r_speed) > SPEED_THRESHOLD)
 800740e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007412:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007416:	ee17 3a90 	vmov	r3, s15
 800741a:	2b00      	cmp	r3, #0
 800741c:	bfb8      	it	lt
 800741e:	425b      	neglt	r3, r3
 8007420:	2b00      	cmp	r3, #0
 8007422:	dd0c      	ble.n	800743e <setRightWheel+0x3a>
		r_speed = (r_speed > 0) ? SPEED_THRESHOLD : -SPEED_THRESHOLD;
 8007424:	edd7 7a01 	vldr	s15, [r7, #4]
 8007428:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800742c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007430:	dd02      	ble.n	8007438 <setRightWheel+0x34>
 8007432:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8007436:	e001      	b.n	800743c <setRightWheel+0x38>
 8007438:	f04f 433f 	mov.w	r3, #3204448256	; 0xbf000000
 800743c:	607b      	str	r3, [r7, #4]
	r_pwma = (r_speed < 0) ? (-r_speed) * u12_max : 0;
 800743e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007442:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800744a:	d511      	bpl.n	8007470 <setRightWheel+0x6c>
 800744c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007450:	eeb1 7a67 	vneg.f32	s14, s15
 8007454:	4b1b      	ldr	r3, [pc, #108]	; (80074c4 <setRightWheel+0xc0>)
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	ee07 3a90 	vmov	s15, r3
 800745c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007468:	ee17 3a90 	vmov	r3, s15
 800746c:	b29b      	uxth	r3, r3
 800746e:	e000      	b.n	8007472 <setRightWheel+0x6e>
 8007470:	2300      	movs	r3, #0
 8007472:	81fb      	strh	r3, [r7, #14]
	r_pwmb = (r_speed >= 0) ? r_speed * u12_max : 0;
 8007474:	edd7 7a01 	vldr	s15, [r7, #4]
 8007478:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800747c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007480:	db0f      	blt.n	80074a2 <setRightWheel+0x9e>
 8007482:	4b10      	ldr	r3, [pc, #64]	; (80074c4 <setRightWheel+0xc0>)
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	ee07 3a90 	vmov	s15, r3
 800748a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800748e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800749a:	ee17 3a90 	vmov	r3, s15
 800749e:	b29b      	uxth	r3, r3
 80074a0:	e000      	b.n	80074a4 <setRightWheel+0xa0>
 80074a2:	2300      	movs	r3, #0
 80074a4:	81bb      	strh	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, r_pwma); // RPWMA
 80074a6:	4b08      	ldr	r3, [pc, #32]	; (80074c8 <setRightWheel+0xc4>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	89fa      	ldrh	r2, [r7, #14]
 80074ac:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, r_pwmb); // RPWMB
 80074ae:	4b06      	ldr	r3, [pc, #24]	; (80074c8 <setRightWheel+0xc4>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	89ba      	ldrh	r2, [r7, #12]
 80074b4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80074b6:	bf00      	nop
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	2000002a 	.word	0x2000002a
 80074c8:	20000404 	.word	0x20000404

080074cc <setWheels>:

int setWheels()
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
	setLeftWheel(l_speed);
 80074d0:	4b08      	ldr	r3, [pc, #32]	; (80074f4 <setWheels+0x28>)
 80074d2:	edd3 7a00 	vldr	s15, [r3]
 80074d6:	eeb0 0a67 	vmov.f32	s0, s15
 80074da:	f7ff ff2f 	bl	800733c <setLeftWheel>
	setRightWheel(r_speed);
 80074de:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <setWheels+0x2c>)
 80074e0:	edd3 7a00 	vldr	s15, [r3]
 80074e4:	eeb0 0a67 	vmov.f32	s0, s15
 80074e8:	f7ff ff8c 	bl	8007404 <setRightWheel>
	return 0;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20000800 	.word	0x20000800
 80074f8:	20000804 	.word	0x20000804

080074fc <readSensor>:
bool R = false;
bool F = false;

/*read IR sensors*/
void readSensor(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
	LED7_ON;
 8007500:	2201      	movs	r2, #1
 8007502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007506:	4877      	ldr	r0, [pc, #476]	; (80076e4 <readSensor+0x1e8>)
 8007508:	f7fc fc52 	bl	8003db0 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COUNTER(&htim1,0);
 800750c:	4b76      	ldr	r3, [pc, #472]	; (80076e8 <readSensor+0x1ec>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2200      	movs	r2, #0
 8007512:	625a      	str	r2, [r3, #36]	; 0x24
	//read DC value	
	LFSensor = read_LF_Sensor;	
 8007514:	2101      	movs	r1, #1
 8007516:	2000      	movs	r0, #0
 8007518:	f7ff fd84 	bl	8007024 <readADC>
 800751c:	4603      	mov	r3, r0
 800751e:	461a      	mov	r2, r3
 8007520:	4b72      	ldr	r3, [pc, #456]	; (80076ec <readSensor+0x1f0>)
 8007522:	601a      	str	r2, [r3, #0]
	RFSensor = read_RF_Sensor;	
 8007524:	2101      	movs	r1, #1
 8007526:	2001      	movs	r0, #1
 8007528:	f7ff fd7c 	bl	8007024 <readADC>
 800752c:	4603      	mov	r3, r0
 800752e:	461a      	mov	r2, r3
 8007530:	4b6f      	ldr	r3, [pc, #444]	; (80076f0 <readSensor+0x1f4>)
 8007532:	601a      	str	r2, [r3, #0]
	DLSensor = read_DL_Sensor;
 8007534:	2101      	movs	r1, #1
 8007536:	2003      	movs	r0, #3
 8007538:	f7ff fd74 	bl	8007024 <readADC>
 800753c:	4603      	mov	r3, r0
 800753e:	461a      	mov	r2, r3
 8007540:	4b6c      	ldr	r3, [pc, #432]	; (80076f4 <readSensor+0x1f8>)
 8007542:	601a      	str	r2, [r3, #0]
	DRSensor = read_DR_Sensor;	
 8007544:	2101      	movs	r1, #1
 8007546:	2002      	movs	r0, #2
 8007548:	f7ff fd6c 	bl	8007024 <readADC>
 800754c:	4603      	mov	r3, r0
 800754e:	461a      	mov	r2, r3
 8007550:	4b69      	ldr	r3, [pc, #420]	; (80076f8 <readSensor+0x1fc>)
 8007552:	601a      	str	r2, [r3, #0]
	
	
    //left front sensor
	LF_EM_ON;
 8007554:	2201      	movs	r2, #1
 8007556:	2180      	movs	r1, #128	; 0x80
 8007558:	4868      	ldr	r0, [pc, #416]	; (80076fc <readSensor+0x200>)
 800755a:	f7fc fc29 	bl	8003db0 <HAL_GPIO_WritePin>
	LFSensor = read_LF_Sensor - LFSensor;
 800755e:	2101      	movs	r1, #1
 8007560:	2000      	movs	r0, #0
 8007562:	f7ff fd5f 	bl	8007024 <readADC>
 8007566:	4603      	mov	r3, r0
 8007568:	461a      	mov	r2, r3
 800756a:	4b60      	ldr	r3, [pc, #384]	; (80076ec <readSensor+0x1f0>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	4a5e      	ldr	r2, [pc, #376]	; (80076ec <readSensor+0x1f0>)
 8007572:	6013      	str	r3, [r2, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<60);
 8007574:	bf00      	nop
 8007576:	4b5c      	ldr	r3, [pc, #368]	; (80076e8 <readSensor+0x1ec>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	2b3b      	cmp	r3, #59	; 0x3b
 800757e:	d9fa      	bls.n	8007576 <readSensor+0x7a>
	LF_EM_OFF;
 8007580:	2200      	movs	r2, #0
 8007582:	2180      	movs	r1, #128	; 0x80
 8007584:	485d      	ldr	r0, [pc, #372]	; (80076fc <readSensor+0x200>)
 8007586:	f7fc fc13 	bl	8003db0 <HAL_GPIO_WritePin>
	if(LFSensor < 0)//error check
 800758a:	4b58      	ldr	r3, [pc, #352]	; (80076ec <readSensor+0x1f0>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	da02      	bge.n	8007598 <readSensor+0x9c>
		LFSensor = 0;
 8007592:	4b56      	ldr	r3, [pc, #344]	; (80076ec <readSensor+0x1f0>)
 8007594:	2200      	movs	r2, #0
 8007596:	601a      	str	r2, [r3, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<140);
 8007598:	bf00      	nop
 800759a:	4b53      	ldr	r3, [pc, #332]	; (80076e8 <readSensor+0x1ec>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	2b8b      	cmp	r3, #139	; 0x8b
 80075a2:	d9fa      	bls.n	800759a <readSensor+0x9e>

	//right front sensor
	RF_EM_ON;
 80075a4:	2201      	movs	r2, #1
 80075a6:	2102      	movs	r1, #2
 80075a8:	4854      	ldr	r0, [pc, #336]	; (80076fc <readSensor+0x200>)
 80075aa:	f7fc fc01 	bl	8003db0 <HAL_GPIO_WritePin>
	RFSensor = read_RF_Sensor - RFSensor;
 80075ae:	2101      	movs	r1, #1
 80075b0:	2001      	movs	r0, #1
 80075b2:	f7ff fd37 	bl	8007024 <readADC>
 80075b6:	4603      	mov	r3, r0
 80075b8:	461a      	mov	r2, r3
 80075ba:	4b4d      	ldr	r3, [pc, #308]	; (80076f0 <readSensor+0x1f4>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	4a4b      	ldr	r2, [pc, #300]	; (80076f0 <readSensor+0x1f4>)
 80075c2:	6013      	str	r3, [r2, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<200);
 80075c4:	bf00      	nop
 80075c6:	4b48      	ldr	r3, [pc, #288]	; (80076e8 <readSensor+0x1ec>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	2bc7      	cmp	r3, #199	; 0xc7
 80075ce:	d9fa      	bls.n	80075c6 <readSensor+0xca>
	RF_EM_OFF;
 80075d0:	2200      	movs	r2, #0
 80075d2:	2102      	movs	r1, #2
 80075d4:	4849      	ldr	r0, [pc, #292]	; (80076fc <readSensor+0x200>)
 80075d6:	f7fc fbeb 	bl	8003db0 <HAL_GPIO_WritePin>
	if(RFSensor < 0)
 80075da:	4b45      	ldr	r3, [pc, #276]	; (80076f0 <readSensor+0x1f4>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	da02      	bge.n	80075e8 <readSensor+0xec>
		RFSensor = 0;
 80075e2:	4b43      	ldr	r3, [pc, #268]	; (80076f0 <readSensor+0x1f4>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	601a      	str	r2, [r3, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<280);
 80075e8:	bf00      	nop
 80075ea:	4b3f      	ldr	r3, [pc, #252]	; (80076e8 <readSensor+0x1ec>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80075f4:	d3f9      	bcc.n	80075ea <readSensor+0xee>

    //diagonal sensors
	SIDE_EM_ON;
 80075f6:	2201      	movs	r2, #1
 80075f8:	2120      	movs	r1, #32
 80075fa:	4840      	ldr	r0, [pc, #256]	; (80076fc <readSensor+0x200>)
 80075fc:	f7fc fbd8 	bl	8003db0 <HAL_GPIO_WritePin>
	while(__HAL_TIM_GET_COUNTER(&htim1)<340);
 8007600:	bf00      	nop
 8007602:	4b39      	ldr	r3, [pc, #228]	; (80076e8 <readSensor+0x1ec>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800760c:	d3f9      	bcc.n	8007602 <readSensor+0x106>
	DLSensor = read_DL_Sensor - DLSensor;
 800760e:	2101      	movs	r1, #1
 8007610:	2003      	movs	r0, #3
 8007612:	f7ff fd07 	bl	8007024 <readADC>
 8007616:	4603      	mov	r3, r0
 8007618:	461a      	mov	r2, r3
 800761a:	4b36      	ldr	r3, [pc, #216]	; (80076f4 <readSensor+0x1f8>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	4a34      	ldr	r2, [pc, #208]	; (80076f4 <readSensor+0x1f8>)
 8007622:	6013      	str	r3, [r2, #0]
	DRSensor = read_DR_Sensor - DRSensor;
 8007624:	2101      	movs	r1, #1
 8007626:	2002      	movs	r0, #2
 8007628:	f7ff fcfc 	bl	8007024 <readADC>
 800762c:	4603      	mov	r3, r0
 800762e:	461a      	mov	r2, r3
 8007630:	4b31      	ldr	r3, [pc, #196]	; (80076f8 <readSensor+0x1fc>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	4a30      	ldr	r2, [pc, #192]	; (80076f8 <readSensor+0x1fc>)
 8007638:	6013      	str	r3, [r2, #0]
    SIDE_EM_OFF;
 800763a:	2200      	movs	r2, #0
 800763c:	2120      	movs	r1, #32
 800763e:	482f      	ldr	r0, [pc, #188]	; (80076fc <readSensor+0x200>)
 8007640:	f7fc fbb6 	bl	8003db0 <HAL_GPIO_WritePin>
	if(DLSensor < 0)
 8007644:	4b2b      	ldr	r3, [pc, #172]	; (80076f4 <readSensor+0x1f8>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	da02      	bge.n	8007652 <readSensor+0x156>
		DLSensor = 0;
 800764c:	4b29      	ldr	r3, [pc, #164]	; (80076f4 <readSensor+0x1f8>)
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]
	if(DRSensor < 0)
 8007652:	4b29      	ldr	r3, [pc, #164]	; (80076f8 <readSensor+0x1fc>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	da02      	bge.n	8007660 <readSensor+0x164>
		DRSensor = 0;
 800765a:	4b27      	ldr	r3, [pc, #156]	; (80076f8 <readSensor+0x1fc>)
 800765c:	2200      	movs	r2, #0
 800765e:	601a      	str	r2, [r3, #0]
	// while(__HAL_TIM_GET_COUNTER(&htim1)<500);
	
	readVolMeter();
 8007660:	f000 f86a 	bl	8007738 <readVolMeter>
	
	LFSensor = LFSensor*reflectionRate/1000;
 8007664:	4b21      	ldr	r3, [pc, #132]	; (80076ec <readSensor+0x1f0>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a25      	ldr	r2, [pc, #148]	; (8007700 <readSensor+0x204>)
 800766a:	6812      	ldr	r2, [r2, #0]
 800766c:	fb02 f303 	mul.w	r3, r2, r3
 8007670:	4a24      	ldr	r2, [pc, #144]	; (8007704 <readSensor+0x208>)
 8007672:	fb82 1203 	smull	r1, r2, r2, r3
 8007676:	1192      	asrs	r2, r2, #6
 8007678:	17db      	asrs	r3, r3, #31
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	4a1b      	ldr	r2, [pc, #108]	; (80076ec <readSensor+0x1f0>)
 800767e:	6013      	str	r3, [r2, #0]
	RFSensor = RFSensor*reflectionRate/1000;
 8007680:	4b1b      	ldr	r3, [pc, #108]	; (80076f0 <readSensor+0x1f4>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a1e      	ldr	r2, [pc, #120]	; (8007700 <readSensor+0x204>)
 8007686:	6812      	ldr	r2, [r2, #0]
 8007688:	fb02 f303 	mul.w	r3, r2, r3
 800768c:	4a1d      	ldr	r2, [pc, #116]	; (8007704 <readSensor+0x208>)
 800768e:	fb82 1203 	smull	r1, r2, r2, r3
 8007692:	1192      	asrs	r2, r2, #6
 8007694:	17db      	asrs	r3, r3, #31
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	4a15      	ldr	r2, [pc, #84]	; (80076f0 <readSensor+0x1f4>)
 800769a:	6013      	str	r3, [r2, #0]
	DLSensor = DLSensor*reflectionRate/1000;
 800769c:	4b15      	ldr	r3, [pc, #84]	; (80076f4 <readSensor+0x1f8>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a17      	ldr	r2, [pc, #92]	; (8007700 <readSensor+0x204>)
 80076a2:	6812      	ldr	r2, [r2, #0]
 80076a4:	fb02 f303 	mul.w	r3, r2, r3
 80076a8:	4a16      	ldr	r2, [pc, #88]	; (8007704 <readSensor+0x208>)
 80076aa:	fb82 1203 	smull	r1, r2, r2, r3
 80076ae:	1192      	asrs	r2, r2, #6
 80076b0:	17db      	asrs	r3, r3, #31
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	4a0f      	ldr	r2, [pc, #60]	; (80076f4 <readSensor+0x1f8>)
 80076b6:	6013      	str	r3, [r2, #0]
	DRSensor = DRSensor*reflectionRate/1000;
 80076b8:	4b0f      	ldr	r3, [pc, #60]	; (80076f8 <readSensor+0x1fc>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a10      	ldr	r2, [pc, #64]	; (8007700 <readSensor+0x204>)
 80076be:	6812      	ldr	r2, [r2, #0]
 80076c0:	fb02 f303 	mul.w	r3, r2, r3
 80076c4:	4a0f      	ldr	r2, [pc, #60]	; (8007704 <readSensor+0x208>)
 80076c6:	fb82 1203 	smull	r1, r2, r2, r3
 80076ca:	1192      	asrs	r2, r2, #6
 80076cc:	17db      	asrs	r3, r3, #31
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	4a09      	ldr	r2, [pc, #36]	; (80076f8 <readSensor+0x1fc>)
 80076d2:	6013      	str	r3, [r2, #0]
	
	LED7_OFF;
 80076d4:	2200      	movs	r2, #0
 80076d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80076da:	4802      	ldr	r0, [pc, #8]	; (80076e4 <readSensor+0x1e8>)
 80076dc:	f7fc fb68 	bl	8003db0 <HAL_GPIO_WritePin>
}
 80076e0:	bf00      	nop
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	40020000 	.word	0x40020000
 80076e8:	20000374 	.word	0x20000374
 80076ec:	20000810 	.word	0x20000810
 80076f0:	20000814 	.word	0x20000814
 80076f4:	20000818 	.word	0x20000818
 80076f8:	2000081c 	.word	0x2000081c
 80076fc:	40020800 	.word	0x40020800
 8007700:	20000034 	.word	0x20000034
 8007704:	10624dd3 	.word	0x10624dd3

08007708 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  if (htim == &htim14 )
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a07      	ldr	r2, [pc, #28]	; (8007730 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d101      	bne.n	800771c <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    readSensor();
 8007718:	f7ff fef0 	bl	80074fc <readSensor>
  }
  if (htim == &htim13)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a05      	ldr	r2, [pc, #20]	; (8007734 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d101      	bne.n	8007728 <HAL_TIM_PeriodElapsedCallback+0x20>
  {
	L3GD20_Update();
 8007724:	f7ff fa5e 	bl	8006be4 <L3GD20_Update>
  }
}
 8007728:	bf00      	nop
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	20000524 	.word	0x20000524
 8007734:	200004dc 	.word	0x200004dc

08007738 <readVolMeter>:



/*read voltage meter*/
void readVolMeter(void)
{          //3240 = 7.85V
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
	volMeter = read_Vol_Meter;//raw value
 800773c:	2101      	movs	r1, #1
 800773e:	2004      	movs	r0, #4
 8007740:	f7ff fc70 	bl	8007024 <readADC>
 8007744:	4603      	mov	r3, r0
 8007746:	461a      	mov	r2, r3
 8007748:	4b1b      	ldr	r3, [pc, #108]	; (80077b8 <readVolMeter+0x80>)
 800774a:	601a      	str	r2, [r3, #0]
	voltage = (volMeter*ADC_REF_VOL/4095)* 2.8;//actual voltage value  ex) 8.2V = 8200
 800774c:	4b1a      	ldr	r3, [pc, #104]	; (80077b8 <readVolMeter+0x80>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4618      	mov	r0, r3
 8007752:	f7f8 fee7 	bl	8000524 <__aeabi_i2d>
 8007756:	a312      	add	r3, pc, #72	; (adr r3, 80077a0 <readVolMeter+0x68>)
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	f7f8 ff4c 	bl	80005f8 <__aeabi_dmul>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4610      	mov	r0, r2
 8007766:	4619      	mov	r1, r3
 8007768:	a30f      	add	r3, pc, #60	; (adr r3, 80077a8 <readVolMeter+0x70>)
 800776a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776e:	f7f9 f86d 	bl	800084c <__aeabi_ddiv>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	4610      	mov	r0, r2
 8007778:	4619      	mov	r1, r3
 800777a:	a30d      	add	r3, pc, #52	; (adr r3, 80077b0 <readVolMeter+0x78>)
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	f7f8 ff3a 	bl	80005f8 <__aeabi_dmul>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4610      	mov	r0, r2
 800778a:	4619      	mov	r1, r3
 800778c:	f7f9 fa0c 	bl	8000ba8 <__aeabi_d2f>
 8007790:	4603      	mov	r3, r0
 8007792:	4a0a      	ldr	r2, [pc, #40]	; (80077bc <readVolMeter+0x84>)
 8007794:	6013      	str	r3, [r2, #0]
}
 8007796:	bf00      	nop
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	f3af 8000 	nop.w
 80077a0:	bc6a7efa 	.word	0xbc6a7efa
 80077a4:	400a9374 	.word	0x400a9374
 80077a8:	00000000 	.word	0x00000000
 80077ac:	40affe00 	.word	0x40affe00
 80077b0:	66666666 	.word	0x66666666
 80077b4:	40066666 	.word	0x40066666
 80077b8:	20000808 	.word	0x20000808
 80077bc:	2000080c 	.word	0x2000080c

080077c0 <cppmain>:
bool buttonPress = false;

int mouseState = 0;

int cppmain(void)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	af00      	add	r7, sp, #0
	initialization_block();
 80077c4:	f000 f82c 	bl	8007820 <initialization_block>
	disp_state = DEFAULT;
 80077c8:	4b0f      	ldr	r3, [pc, #60]	; (8007808 <cppmain+0x48>)
 80077ca:	2201      	movs	r2, #1
 80077cc:	701a      	strb	r2, [r3, #0]
	while (1)
	{
		i++;
 80077ce:	4b0f      	ldr	r3, [pc, #60]	; (800780c <cppmain+0x4c>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3301      	adds	r3, #1
 80077d4:	4a0d      	ldr	r2, [pc, #52]	; (800780c <cppmain+0x4c>)
 80077d6:	6013      	str	r3, [r2, #0]
		l_pos = l_position,r_pos = r_position;
 80077d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80077dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077de:	4a0c      	ldr	r2, [pc, #48]	; (8007810 <cppmain+0x50>)
 80077e0:	6013      	str	r3, [r2, #0]
 80077e2:	4b0c      	ldr	r3, [pc, #48]	; (8007814 <cppmain+0x54>)
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	43db      	mvns	r3, r3
 80077e8:	4a0b      	ldr	r2, [pc, #44]	; (8007818 <cppmain+0x58>)
 80077ea:	6013      	str	r3, [r2, #0]
		if (moveStraight(200))
 80077ec:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800781c <cppmain+0x5c>
 80077f0:	f7ff fb5a 	bl	8006ea8 <moveStraight>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <cppmain+0x42>
			HAL_Delay(2000);
 80077fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80077fe:	f7fb f91b 	bl	8002a38 <HAL_Delay>

			// return 0;
		displayUpdate();
 8007802:	f7ff fcfd 	bl	8007200 <displayUpdate>
		i++;
 8007806:	e7e2      	b.n	80077ce <cppmain+0xe>
 8007808:	200007fd 	.word	0x200007fd
 800780c:	20000820 	.word	0x20000820
 8007810:	20000828 	.word	0x20000828
 8007814:	40000c00 	.word	0x40000c00
 8007818:	20000824 	.word	0x20000824
 800781c:	43480000 	.word	0x43480000

08007820 <initialization_block>:
	}
}

int initialization_block(void)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	af00      	add	r7, sp, #0
	ALL_LED_ON;
 8007824:	2201      	movs	r2, #1
 8007826:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800782a:	4848      	ldr	r0, [pc, #288]	; (800794c <initialization_block+0x12c>)
 800782c:	f7fc fac0 	bl	8003db0 <HAL_GPIO_WritePin>
 8007830:	2201      	movs	r2, #1
 8007832:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007836:	4845      	ldr	r0, [pc, #276]	; (800794c <initialization_block+0x12c>)
 8007838:	f7fc faba 	bl	8003db0 <HAL_GPIO_WritePin>
 800783c:	2201      	movs	r2, #1
 800783e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007842:	4843      	ldr	r0, [pc, #268]	; (8007950 <initialization_block+0x130>)
 8007844:	f7fc fab4 	bl	8003db0 <HAL_GPIO_WritePin>
 8007848:	2201      	movs	r2, #1
 800784a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800784e:	4840      	ldr	r0, [pc, #256]	; (8007950 <initialization_block+0x130>)
 8007850:	f7fc faae 	bl	8003db0 <HAL_GPIO_WritePin>
 8007854:	2201      	movs	r2, #1
 8007856:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800785a:	483d      	ldr	r0, [pc, #244]	; (8007950 <initialization_block+0x130>)
 800785c:	f7fc faa8 	bl	8003db0 <HAL_GPIO_WritePin>
 8007860:	2201      	movs	r2, #1
 8007862:	2104      	movs	r1, #4
 8007864:	483b      	ldr	r0, [pc, #236]	; (8007954 <initialization_block+0x134>)
 8007866:	f7fc faa3 	bl	8003db0 <HAL_GPIO_WritePin>
 800786a:	2201      	movs	r2, #1
 800786c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007870:	4836      	ldr	r0, [pc, #216]	; (800794c <initialization_block+0x12c>)
 8007872:	f7fc fa9d 	bl	8003db0 <HAL_GPIO_WritePin>
 8007876:	2201      	movs	r2, #1
 8007878:	2110      	movs	r1, #16
 800787a:	4837      	ldr	r0, [pc, #220]	; (8007958 <initialization_block+0x138>)
 800787c:	f7fc fa98 	bl	8003db0 <HAL_GPIO_WritePin>
 8007880:	2201      	movs	r2, #1
 8007882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007886:	4834      	ldr	r0, [pc, #208]	; (8007958 <initialization_block+0x138>)
 8007888:	f7fc fa92 	bl	8003db0 <HAL_GPIO_WritePin>
 800788c:	2201      	movs	r2, #1
 800788e:	2101      	movs	r1, #1
 8007890:	482f      	ldr	r0, [pc, #188]	; (8007950 <initialization_block+0x130>)
 8007892:	f7fc fa8d 	bl	8003db0 <HAL_GPIO_WritePin>
 8007896:	2201      	movs	r2, #1
 8007898:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800789c:	482e      	ldr	r0, [pc, #184]	; (8007958 <initialization_block+0x138>)
 800789e:	f7fc fa87 	bl	8003db0 <HAL_GPIO_WritePin>
	motorInit();
 80078a2:	f7ff fd27 	bl	80072f4 <motorInit>
	encoderInit();
 80078a6:	f7ff fcff 	bl	80072a8 <encoderInit>
	displayInit();
 80078aa:	f7ff fc13 	bl	80070d4 <displayInit>
//	buzzerInit();
	PID_Controller();
 80078ae:	f7ff fa77 	bl	8006da0 <PID_Controller>

	TIM1_START;
 80078b2:	482a      	ldr	r0, [pc, #168]	; (800795c <initialization_block+0x13c>)
 80078b4:	f7fd fd4c 	bl	8005350 <HAL_TIM_Base_Start>
	TIM14_IT_START;
 80078b8:	4829      	ldr	r0, [pc, #164]	; (8007960 <initialization_block+0x140>)
 80078ba:	f7fd fdb1 	bl	8005420 <HAL_TIM_Base_Start_IT>
	HAL_Delay(500);
 80078be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80078c2:	f7fb f8b9 	bl	8002a38 <HAL_Delay>

	ALL_LED_OFF;
 80078c6:	2200      	movs	r2, #0
 80078c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80078cc:	481f      	ldr	r0, [pc, #124]	; (800794c <initialization_block+0x12c>)
 80078ce:	f7fc fa6f 	bl	8003db0 <HAL_GPIO_WritePin>
 80078d2:	2200      	movs	r2, #0
 80078d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80078d8:	481c      	ldr	r0, [pc, #112]	; (800794c <initialization_block+0x12c>)
 80078da:	f7fc fa69 	bl	8003db0 <HAL_GPIO_WritePin>
 80078de:	2200      	movs	r2, #0
 80078e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80078e4:	481a      	ldr	r0, [pc, #104]	; (8007950 <initialization_block+0x130>)
 80078e6:	f7fc fa63 	bl	8003db0 <HAL_GPIO_WritePin>
 80078ea:	2200      	movs	r2, #0
 80078ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80078f0:	4817      	ldr	r0, [pc, #92]	; (8007950 <initialization_block+0x130>)
 80078f2:	f7fc fa5d 	bl	8003db0 <HAL_GPIO_WritePin>
 80078f6:	2200      	movs	r2, #0
 80078f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80078fc:	4814      	ldr	r0, [pc, #80]	; (8007950 <initialization_block+0x130>)
 80078fe:	f7fc fa57 	bl	8003db0 <HAL_GPIO_WritePin>
 8007902:	2200      	movs	r2, #0
 8007904:	2104      	movs	r1, #4
 8007906:	4813      	ldr	r0, [pc, #76]	; (8007954 <initialization_block+0x134>)
 8007908:	f7fc fa52 	bl	8003db0 <HAL_GPIO_WritePin>
 800790c:	2200      	movs	r2, #0
 800790e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007912:	480e      	ldr	r0, [pc, #56]	; (800794c <initialization_block+0x12c>)
 8007914:	f7fc fa4c 	bl	8003db0 <HAL_GPIO_WritePin>
 8007918:	2200      	movs	r2, #0
 800791a:	2110      	movs	r1, #16
 800791c:	480e      	ldr	r0, [pc, #56]	; (8007958 <initialization_block+0x138>)
 800791e:	f7fc fa47 	bl	8003db0 <HAL_GPIO_WritePin>
 8007922:	2200      	movs	r2, #0
 8007924:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007928:	480b      	ldr	r0, [pc, #44]	; (8007958 <initialization_block+0x138>)
 800792a:	f7fc fa41 	bl	8003db0 <HAL_GPIO_WritePin>
 800792e:	2200      	movs	r2, #0
 8007930:	2101      	movs	r1, #1
 8007932:	4807      	ldr	r0, [pc, #28]	; (8007950 <initialization_block+0x130>)
 8007934:	f7fc fa3c 	bl	8003db0 <HAL_GPIO_WritePin>
 8007938:	2200      	movs	r2, #0
 800793a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800793e:	4806      	ldr	r0, [pc, #24]	; (8007958 <initialization_block+0x138>)
 8007940:	f7fc fa36 	bl	8003db0 <HAL_GPIO_WritePin>
	return 0;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	40020000 	.word	0x40020000
 8007950:	40020800 	.word	0x40020800
 8007954:	40020c00 	.word	0x40020c00
 8007958:	40020400 	.word	0x40020400
 800795c:	20000374 	.word	0x20000374
 8007960:	20000524 	.word	0x20000524

08007964 <abort>:
 8007964:	b508      	push	{r3, lr}
 8007966:	2006      	movs	r0, #6
 8007968:	f000 fe90 	bl	800868c <raise>
 800796c:	2001      	movs	r0, #1
 800796e:	f7fa fc31 	bl	80021d4 <_exit>
	...

08007974 <malloc>:
 8007974:	4b02      	ldr	r3, [pc, #8]	; (8007980 <malloc+0xc>)
 8007976:	4601      	mov	r1, r0
 8007978:	6818      	ldr	r0, [r3, #0]
 800797a:	f000 b823 	b.w	80079c4 <_malloc_r>
 800797e:	bf00      	nop
 8007980:	20000090 	.word	0x20000090

08007984 <sbrk_aligned>:
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	4e0e      	ldr	r6, [pc, #56]	; (80079c0 <sbrk_aligned+0x3c>)
 8007988:	460c      	mov	r4, r1
 800798a:	6831      	ldr	r1, [r6, #0]
 800798c:	4605      	mov	r5, r0
 800798e:	b911      	cbnz	r1, 8007996 <sbrk_aligned+0x12>
 8007990:	f000 fed0 	bl	8008734 <_sbrk_r>
 8007994:	6030      	str	r0, [r6, #0]
 8007996:	4621      	mov	r1, r4
 8007998:	4628      	mov	r0, r5
 800799a:	f000 fecb 	bl	8008734 <_sbrk_r>
 800799e:	1c43      	adds	r3, r0, #1
 80079a0:	d00a      	beq.n	80079b8 <sbrk_aligned+0x34>
 80079a2:	1cc4      	adds	r4, r0, #3
 80079a4:	f024 0403 	bic.w	r4, r4, #3
 80079a8:	42a0      	cmp	r0, r4
 80079aa:	d007      	beq.n	80079bc <sbrk_aligned+0x38>
 80079ac:	1a21      	subs	r1, r4, r0
 80079ae:	4628      	mov	r0, r5
 80079b0:	f000 fec0 	bl	8008734 <_sbrk_r>
 80079b4:	3001      	adds	r0, #1
 80079b6:	d101      	bne.n	80079bc <sbrk_aligned+0x38>
 80079b8:	f04f 34ff 	mov.w	r4, #4294967295
 80079bc:	4620      	mov	r0, r4
 80079be:	bd70      	pop	{r4, r5, r6, pc}
 80079c0:	20000830 	.word	0x20000830

080079c4 <_malloc_r>:
 80079c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079c8:	1ccd      	adds	r5, r1, #3
 80079ca:	f025 0503 	bic.w	r5, r5, #3
 80079ce:	3508      	adds	r5, #8
 80079d0:	2d0c      	cmp	r5, #12
 80079d2:	bf38      	it	cc
 80079d4:	250c      	movcc	r5, #12
 80079d6:	2d00      	cmp	r5, #0
 80079d8:	4607      	mov	r7, r0
 80079da:	db01      	blt.n	80079e0 <_malloc_r+0x1c>
 80079dc:	42a9      	cmp	r1, r5
 80079de:	d905      	bls.n	80079ec <_malloc_r+0x28>
 80079e0:	230c      	movs	r3, #12
 80079e2:	603b      	str	r3, [r7, #0]
 80079e4:	2600      	movs	r6, #0
 80079e6:	4630      	mov	r0, r6
 80079e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ac0 <_malloc_r+0xfc>
 80079f0:	f000 f868 	bl	8007ac4 <__malloc_lock>
 80079f4:	f8d8 3000 	ldr.w	r3, [r8]
 80079f8:	461c      	mov	r4, r3
 80079fa:	bb5c      	cbnz	r4, 8007a54 <_malloc_r+0x90>
 80079fc:	4629      	mov	r1, r5
 80079fe:	4638      	mov	r0, r7
 8007a00:	f7ff ffc0 	bl	8007984 <sbrk_aligned>
 8007a04:	1c43      	adds	r3, r0, #1
 8007a06:	4604      	mov	r4, r0
 8007a08:	d155      	bne.n	8007ab6 <_malloc_r+0xf2>
 8007a0a:	f8d8 4000 	ldr.w	r4, [r8]
 8007a0e:	4626      	mov	r6, r4
 8007a10:	2e00      	cmp	r6, #0
 8007a12:	d145      	bne.n	8007aa0 <_malloc_r+0xdc>
 8007a14:	2c00      	cmp	r4, #0
 8007a16:	d048      	beq.n	8007aaa <_malloc_r+0xe6>
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	eb04 0903 	add.w	r9, r4, r3
 8007a22:	f000 fe87 	bl	8008734 <_sbrk_r>
 8007a26:	4581      	cmp	r9, r0
 8007a28:	d13f      	bne.n	8007aaa <_malloc_r+0xe6>
 8007a2a:	6821      	ldr	r1, [r4, #0]
 8007a2c:	1a6d      	subs	r5, r5, r1
 8007a2e:	4629      	mov	r1, r5
 8007a30:	4638      	mov	r0, r7
 8007a32:	f7ff ffa7 	bl	8007984 <sbrk_aligned>
 8007a36:	3001      	adds	r0, #1
 8007a38:	d037      	beq.n	8007aaa <_malloc_r+0xe6>
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	442b      	add	r3, r5
 8007a3e:	6023      	str	r3, [r4, #0]
 8007a40:	f8d8 3000 	ldr.w	r3, [r8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d038      	beq.n	8007aba <_malloc_r+0xf6>
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	42a2      	cmp	r2, r4
 8007a4c:	d12b      	bne.n	8007aa6 <_malloc_r+0xe2>
 8007a4e:	2200      	movs	r2, #0
 8007a50:	605a      	str	r2, [r3, #4]
 8007a52:	e00f      	b.n	8007a74 <_malloc_r+0xb0>
 8007a54:	6822      	ldr	r2, [r4, #0]
 8007a56:	1b52      	subs	r2, r2, r5
 8007a58:	d41f      	bmi.n	8007a9a <_malloc_r+0xd6>
 8007a5a:	2a0b      	cmp	r2, #11
 8007a5c:	d917      	bls.n	8007a8e <_malloc_r+0xca>
 8007a5e:	1961      	adds	r1, r4, r5
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	6025      	str	r5, [r4, #0]
 8007a64:	bf18      	it	ne
 8007a66:	6059      	strne	r1, [r3, #4]
 8007a68:	6863      	ldr	r3, [r4, #4]
 8007a6a:	bf08      	it	eq
 8007a6c:	f8c8 1000 	streq.w	r1, [r8]
 8007a70:	5162      	str	r2, [r4, r5]
 8007a72:	604b      	str	r3, [r1, #4]
 8007a74:	4638      	mov	r0, r7
 8007a76:	f104 060b 	add.w	r6, r4, #11
 8007a7a:	f000 f829 	bl	8007ad0 <__malloc_unlock>
 8007a7e:	f026 0607 	bic.w	r6, r6, #7
 8007a82:	1d23      	adds	r3, r4, #4
 8007a84:	1af2      	subs	r2, r6, r3
 8007a86:	d0ae      	beq.n	80079e6 <_malloc_r+0x22>
 8007a88:	1b9b      	subs	r3, r3, r6
 8007a8a:	50a3      	str	r3, [r4, r2]
 8007a8c:	e7ab      	b.n	80079e6 <_malloc_r+0x22>
 8007a8e:	42a3      	cmp	r3, r4
 8007a90:	6862      	ldr	r2, [r4, #4]
 8007a92:	d1dd      	bne.n	8007a50 <_malloc_r+0x8c>
 8007a94:	f8c8 2000 	str.w	r2, [r8]
 8007a98:	e7ec      	b.n	8007a74 <_malloc_r+0xb0>
 8007a9a:	4623      	mov	r3, r4
 8007a9c:	6864      	ldr	r4, [r4, #4]
 8007a9e:	e7ac      	b.n	80079fa <_malloc_r+0x36>
 8007aa0:	4634      	mov	r4, r6
 8007aa2:	6876      	ldr	r6, [r6, #4]
 8007aa4:	e7b4      	b.n	8007a10 <_malloc_r+0x4c>
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	e7cc      	b.n	8007a44 <_malloc_r+0x80>
 8007aaa:	230c      	movs	r3, #12
 8007aac:	603b      	str	r3, [r7, #0]
 8007aae:	4638      	mov	r0, r7
 8007ab0:	f000 f80e 	bl	8007ad0 <__malloc_unlock>
 8007ab4:	e797      	b.n	80079e6 <_malloc_r+0x22>
 8007ab6:	6025      	str	r5, [r4, #0]
 8007ab8:	e7dc      	b.n	8007a74 <_malloc_r+0xb0>
 8007aba:	605b      	str	r3, [r3, #4]
 8007abc:	deff      	udf	#255	; 0xff
 8007abe:	bf00      	nop
 8007ac0:	2000082c 	.word	0x2000082c

08007ac4 <__malloc_lock>:
 8007ac4:	4801      	ldr	r0, [pc, #4]	; (8007acc <__malloc_lock+0x8>)
 8007ac6:	f000 be81 	b.w	80087cc <__retarget_lock_acquire_recursive>
 8007aca:	bf00      	nop
 8007acc:	20000974 	.word	0x20000974

08007ad0 <__malloc_unlock>:
 8007ad0:	4801      	ldr	r0, [pc, #4]	; (8007ad8 <__malloc_unlock+0x8>)
 8007ad2:	f000 be7c 	b.w	80087ce <__retarget_lock_release_recursive>
 8007ad6:	bf00      	nop
 8007ad8:	20000974 	.word	0x20000974

08007adc <__cvt>:
 8007adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae0:	ec55 4b10 	vmov	r4, r5, d0
 8007ae4:	2d00      	cmp	r5, #0
 8007ae6:	460e      	mov	r6, r1
 8007ae8:	4619      	mov	r1, r3
 8007aea:	462b      	mov	r3, r5
 8007aec:	bfbb      	ittet	lt
 8007aee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007af2:	461d      	movlt	r5, r3
 8007af4:	2300      	movge	r3, #0
 8007af6:	232d      	movlt	r3, #45	; 0x2d
 8007af8:	700b      	strb	r3, [r1, #0]
 8007afa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007afc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b00:	4691      	mov	r9, r2
 8007b02:	f023 0820 	bic.w	r8, r3, #32
 8007b06:	bfbc      	itt	lt
 8007b08:	4622      	movlt	r2, r4
 8007b0a:	4614      	movlt	r4, r2
 8007b0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b10:	d005      	beq.n	8007b1e <__cvt+0x42>
 8007b12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b16:	d100      	bne.n	8007b1a <__cvt+0x3e>
 8007b18:	3601      	adds	r6, #1
 8007b1a:	2102      	movs	r1, #2
 8007b1c:	e000      	b.n	8007b20 <__cvt+0x44>
 8007b1e:	2103      	movs	r1, #3
 8007b20:	ab03      	add	r3, sp, #12
 8007b22:	9301      	str	r3, [sp, #4]
 8007b24:	ab02      	add	r3, sp, #8
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	ec45 4b10 	vmov	d0, r4, r5
 8007b2c:	4653      	mov	r3, sl
 8007b2e:	4632      	mov	r2, r6
 8007b30:	f000 fee6 	bl	8008900 <_dtoa_r>
 8007b34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b38:	4607      	mov	r7, r0
 8007b3a:	d102      	bne.n	8007b42 <__cvt+0x66>
 8007b3c:	f019 0f01 	tst.w	r9, #1
 8007b40:	d022      	beq.n	8007b88 <__cvt+0xac>
 8007b42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b46:	eb07 0906 	add.w	r9, r7, r6
 8007b4a:	d110      	bne.n	8007b6e <__cvt+0x92>
 8007b4c:	783b      	ldrb	r3, [r7, #0]
 8007b4e:	2b30      	cmp	r3, #48	; 0x30
 8007b50:	d10a      	bne.n	8007b68 <__cvt+0x8c>
 8007b52:	2200      	movs	r2, #0
 8007b54:	2300      	movs	r3, #0
 8007b56:	4620      	mov	r0, r4
 8007b58:	4629      	mov	r1, r5
 8007b5a:	f7f8 ffb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b5e:	b918      	cbnz	r0, 8007b68 <__cvt+0x8c>
 8007b60:	f1c6 0601 	rsb	r6, r6, #1
 8007b64:	f8ca 6000 	str.w	r6, [sl]
 8007b68:	f8da 3000 	ldr.w	r3, [sl]
 8007b6c:	4499      	add	r9, r3
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2300      	movs	r3, #0
 8007b72:	4620      	mov	r0, r4
 8007b74:	4629      	mov	r1, r5
 8007b76:	f7f8 ffa7 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b7a:	b108      	cbz	r0, 8007b80 <__cvt+0xa4>
 8007b7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b80:	2230      	movs	r2, #48	; 0x30
 8007b82:	9b03      	ldr	r3, [sp, #12]
 8007b84:	454b      	cmp	r3, r9
 8007b86:	d307      	bcc.n	8007b98 <__cvt+0xbc>
 8007b88:	9b03      	ldr	r3, [sp, #12]
 8007b8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b8c:	1bdb      	subs	r3, r3, r7
 8007b8e:	4638      	mov	r0, r7
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	b004      	add	sp, #16
 8007b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b98:	1c59      	adds	r1, r3, #1
 8007b9a:	9103      	str	r1, [sp, #12]
 8007b9c:	701a      	strb	r2, [r3, #0]
 8007b9e:	e7f0      	b.n	8007b82 <__cvt+0xa6>

08007ba0 <__exponent>:
 8007ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	bfb8      	it	lt
 8007ba8:	4249      	neglt	r1, r1
 8007baa:	f803 2b02 	strb.w	r2, [r3], #2
 8007bae:	bfb4      	ite	lt
 8007bb0:	222d      	movlt	r2, #45	; 0x2d
 8007bb2:	222b      	movge	r2, #43	; 0x2b
 8007bb4:	2909      	cmp	r1, #9
 8007bb6:	7042      	strb	r2, [r0, #1]
 8007bb8:	dd2a      	ble.n	8007c10 <__exponent+0x70>
 8007bba:	f10d 0207 	add.w	r2, sp, #7
 8007bbe:	4617      	mov	r7, r2
 8007bc0:	260a      	movs	r6, #10
 8007bc2:	4694      	mov	ip, r2
 8007bc4:	fb91 f5f6 	sdiv	r5, r1, r6
 8007bc8:	fb06 1415 	mls	r4, r6, r5, r1
 8007bcc:	3430      	adds	r4, #48	; 0x30
 8007bce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	2c63      	cmp	r4, #99	; 0x63
 8007bd6:	f102 32ff 	add.w	r2, r2, #4294967295
 8007bda:	4629      	mov	r1, r5
 8007bdc:	dcf1      	bgt.n	8007bc2 <__exponent+0x22>
 8007bde:	3130      	adds	r1, #48	; 0x30
 8007be0:	f1ac 0402 	sub.w	r4, ip, #2
 8007be4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007be8:	1c41      	adds	r1, r0, #1
 8007bea:	4622      	mov	r2, r4
 8007bec:	42ba      	cmp	r2, r7
 8007bee:	d30a      	bcc.n	8007c06 <__exponent+0x66>
 8007bf0:	f10d 0209 	add.w	r2, sp, #9
 8007bf4:	eba2 020c 	sub.w	r2, r2, ip
 8007bf8:	42bc      	cmp	r4, r7
 8007bfa:	bf88      	it	hi
 8007bfc:	2200      	movhi	r2, #0
 8007bfe:	4413      	add	r3, r2
 8007c00:	1a18      	subs	r0, r3, r0
 8007c02:	b003      	add	sp, #12
 8007c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c06:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007c0a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007c0e:	e7ed      	b.n	8007bec <__exponent+0x4c>
 8007c10:	2330      	movs	r3, #48	; 0x30
 8007c12:	3130      	adds	r1, #48	; 0x30
 8007c14:	7083      	strb	r3, [r0, #2]
 8007c16:	70c1      	strb	r1, [r0, #3]
 8007c18:	1d03      	adds	r3, r0, #4
 8007c1a:	e7f1      	b.n	8007c00 <__exponent+0x60>

08007c1c <_printf_float>:
 8007c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c20:	ed2d 8b02 	vpush	{d8}
 8007c24:	b08d      	sub	sp, #52	; 0x34
 8007c26:	460c      	mov	r4, r1
 8007c28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c2c:	4616      	mov	r6, r2
 8007c2e:	461f      	mov	r7, r3
 8007c30:	4605      	mov	r5, r0
 8007c32:	f000 fd33 	bl	800869c <_localeconv_r>
 8007c36:	f8d0 a000 	ldr.w	sl, [r0]
 8007c3a:	4650      	mov	r0, sl
 8007c3c:	f7f8 fb18 	bl	8000270 <strlen>
 8007c40:	2300      	movs	r3, #0
 8007c42:	930a      	str	r3, [sp, #40]	; 0x28
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	9305      	str	r3, [sp, #20]
 8007c48:	f8d8 3000 	ldr.w	r3, [r8]
 8007c4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c50:	3307      	adds	r3, #7
 8007c52:	f023 0307 	bic.w	r3, r3, #7
 8007c56:	f103 0208 	add.w	r2, r3, #8
 8007c5a:	f8c8 2000 	str.w	r2, [r8]
 8007c5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c66:	9307      	str	r3, [sp, #28]
 8007c68:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c6c:	ee08 0a10 	vmov	s16, r0
 8007c70:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007c74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c78:	4b9e      	ldr	r3, [pc, #632]	; (8007ef4 <_printf_float+0x2d8>)
 8007c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c7e:	f7f8 ff55 	bl	8000b2c <__aeabi_dcmpun>
 8007c82:	bb88      	cbnz	r0, 8007ce8 <_printf_float+0xcc>
 8007c84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c88:	4b9a      	ldr	r3, [pc, #616]	; (8007ef4 <_printf_float+0x2d8>)
 8007c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c8e:	f7f8 ff2f 	bl	8000af0 <__aeabi_dcmple>
 8007c92:	bb48      	cbnz	r0, 8007ce8 <_printf_float+0xcc>
 8007c94:	2200      	movs	r2, #0
 8007c96:	2300      	movs	r3, #0
 8007c98:	4640      	mov	r0, r8
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	f7f8 ff1e 	bl	8000adc <__aeabi_dcmplt>
 8007ca0:	b110      	cbz	r0, 8007ca8 <_printf_float+0x8c>
 8007ca2:	232d      	movs	r3, #45	; 0x2d
 8007ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ca8:	4a93      	ldr	r2, [pc, #588]	; (8007ef8 <_printf_float+0x2dc>)
 8007caa:	4b94      	ldr	r3, [pc, #592]	; (8007efc <_printf_float+0x2e0>)
 8007cac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007cb0:	bf94      	ite	ls
 8007cb2:	4690      	movls	r8, r2
 8007cb4:	4698      	movhi	r8, r3
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	6123      	str	r3, [r4, #16]
 8007cba:	9b05      	ldr	r3, [sp, #20]
 8007cbc:	f023 0304 	bic.w	r3, r3, #4
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	f04f 0900 	mov.w	r9, #0
 8007cc6:	9700      	str	r7, [sp, #0]
 8007cc8:	4633      	mov	r3, r6
 8007cca:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ccc:	4621      	mov	r1, r4
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f000 f9da 	bl	8008088 <_printf_common>
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	f040 8090 	bne.w	8007dfa <_printf_float+0x1de>
 8007cda:	f04f 30ff 	mov.w	r0, #4294967295
 8007cde:	b00d      	add	sp, #52	; 0x34
 8007ce0:	ecbd 8b02 	vpop	{d8}
 8007ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce8:	4642      	mov	r2, r8
 8007cea:	464b      	mov	r3, r9
 8007cec:	4640      	mov	r0, r8
 8007cee:	4649      	mov	r1, r9
 8007cf0:	f7f8 ff1c 	bl	8000b2c <__aeabi_dcmpun>
 8007cf4:	b140      	cbz	r0, 8007d08 <_printf_float+0xec>
 8007cf6:	464b      	mov	r3, r9
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	bfbc      	itt	lt
 8007cfc:	232d      	movlt	r3, #45	; 0x2d
 8007cfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d02:	4a7f      	ldr	r2, [pc, #508]	; (8007f00 <_printf_float+0x2e4>)
 8007d04:	4b7f      	ldr	r3, [pc, #508]	; (8007f04 <_printf_float+0x2e8>)
 8007d06:	e7d1      	b.n	8007cac <_printf_float+0x90>
 8007d08:	6863      	ldr	r3, [r4, #4]
 8007d0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d0e:	9206      	str	r2, [sp, #24]
 8007d10:	1c5a      	adds	r2, r3, #1
 8007d12:	d13f      	bne.n	8007d94 <_printf_float+0x178>
 8007d14:	2306      	movs	r3, #6
 8007d16:	6063      	str	r3, [r4, #4]
 8007d18:	9b05      	ldr	r3, [sp, #20]
 8007d1a:	6861      	ldr	r1, [r4, #4]
 8007d1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d20:	2300      	movs	r3, #0
 8007d22:	9303      	str	r3, [sp, #12]
 8007d24:	ab0a      	add	r3, sp, #40	; 0x28
 8007d26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d2a:	ab09      	add	r3, sp, #36	; 0x24
 8007d2c:	ec49 8b10 	vmov	d0, r8, r9
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	6022      	str	r2, [r4, #0]
 8007d34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d38:	4628      	mov	r0, r5
 8007d3a:	f7ff fecf 	bl	8007adc <__cvt>
 8007d3e:	9b06      	ldr	r3, [sp, #24]
 8007d40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d42:	2b47      	cmp	r3, #71	; 0x47
 8007d44:	4680      	mov	r8, r0
 8007d46:	d108      	bne.n	8007d5a <_printf_float+0x13e>
 8007d48:	1cc8      	adds	r0, r1, #3
 8007d4a:	db02      	blt.n	8007d52 <_printf_float+0x136>
 8007d4c:	6863      	ldr	r3, [r4, #4]
 8007d4e:	4299      	cmp	r1, r3
 8007d50:	dd41      	ble.n	8007dd6 <_printf_float+0x1ba>
 8007d52:	f1ab 0302 	sub.w	r3, fp, #2
 8007d56:	fa5f fb83 	uxtb.w	fp, r3
 8007d5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d5e:	d820      	bhi.n	8007da2 <_printf_float+0x186>
 8007d60:	3901      	subs	r1, #1
 8007d62:	465a      	mov	r2, fp
 8007d64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d68:	9109      	str	r1, [sp, #36]	; 0x24
 8007d6a:	f7ff ff19 	bl	8007ba0 <__exponent>
 8007d6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d70:	1813      	adds	r3, r2, r0
 8007d72:	2a01      	cmp	r2, #1
 8007d74:	4681      	mov	r9, r0
 8007d76:	6123      	str	r3, [r4, #16]
 8007d78:	dc02      	bgt.n	8007d80 <_printf_float+0x164>
 8007d7a:	6822      	ldr	r2, [r4, #0]
 8007d7c:	07d2      	lsls	r2, r2, #31
 8007d7e:	d501      	bpl.n	8007d84 <_printf_float+0x168>
 8007d80:	3301      	adds	r3, #1
 8007d82:	6123      	str	r3, [r4, #16]
 8007d84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d09c      	beq.n	8007cc6 <_printf_float+0xaa>
 8007d8c:	232d      	movs	r3, #45	; 0x2d
 8007d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d92:	e798      	b.n	8007cc6 <_printf_float+0xaa>
 8007d94:	9a06      	ldr	r2, [sp, #24]
 8007d96:	2a47      	cmp	r2, #71	; 0x47
 8007d98:	d1be      	bne.n	8007d18 <_printf_float+0xfc>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1bc      	bne.n	8007d18 <_printf_float+0xfc>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e7b9      	b.n	8007d16 <_printf_float+0xfa>
 8007da2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007da6:	d118      	bne.n	8007dda <_printf_float+0x1be>
 8007da8:	2900      	cmp	r1, #0
 8007daa:	6863      	ldr	r3, [r4, #4]
 8007dac:	dd0b      	ble.n	8007dc6 <_printf_float+0x1aa>
 8007dae:	6121      	str	r1, [r4, #16]
 8007db0:	b913      	cbnz	r3, 8007db8 <_printf_float+0x19c>
 8007db2:	6822      	ldr	r2, [r4, #0]
 8007db4:	07d0      	lsls	r0, r2, #31
 8007db6:	d502      	bpl.n	8007dbe <_printf_float+0x1a2>
 8007db8:	3301      	adds	r3, #1
 8007dba:	440b      	add	r3, r1
 8007dbc:	6123      	str	r3, [r4, #16]
 8007dbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8007dc0:	f04f 0900 	mov.w	r9, #0
 8007dc4:	e7de      	b.n	8007d84 <_printf_float+0x168>
 8007dc6:	b913      	cbnz	r3, 8007dce <_printf_float+0x1b2>
 8007dc8:	6822      	ldr	r2, [r4, #0]
 8007dca:	07d2      	lsls	r2, r2, #31
 8007dcc:	d501      	bpl.n	8007dd2 <_printf_float+0x1b6>
 8007dce:	3302      	adds	r3, #2
 8007dd0:	e7f4      	b.n	8007dbc <_printf_float+0x1a0>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e7f2      	b.n	8007dbc <_printf_float+0x1a0>
 8007dd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ddc:	4299      	cmp	r1, r3
 8007dde:	db05      	blt.n	8007dec <_printf_float+0x1d0>
 8007de0:	6823      	ldr	r3, [r4, #0]
 8007de2:	6121      	str	r1, [r4, #16]
 8007de4:	07d8      	lsls	r0, r3, #31
 8007de6:	d5ea      	bpl.n	8007dbe <_printf_float+0x1a2>
 8007de8:	1c4b      	adds	r3, r1, #1
 8007dea:	e7e7      	b.n	8007dbc <_printf_float+0x1a0>
 8007dec:	2900      	cmp	r1, #0
 8007dee:	bfd4      	ite	le
 8007df0:	f1c1 0202 	rsble	r2, r1, #2
 8007df4:	2201      	movgt	r2, #1
 8007df6:	4413      	add	r3, r2
 8007df8:	e7e0      	b.n	8007dbc <_printf_float+0x1a0>
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	055a      	lsls	r2, r3, #21
 8007dfe:	d407      	bmi.n	8007e10 <_printf_float+0x1f4>
 8007e00:	6923      	ldr	r3, [r4, #16]
 8007e02:	4642      	mov	r2, r8
 8007e04:	4631      	mov	r1, r6
 8007e06:	4628      	mov	r0, r5
 8007e08:	47b8      	blx	r7
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d12c      	bne.n	8007e68 <_printf_float+0x24c>
 8007e0e:	e764      	b.n	8007cda <_printf_float+0xbe>
 8007e10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e14:	f240 80e0 	bls.w	8007fd8 <_printf_float+0x3bc>
 8007e18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	2300      	movs	r3, #0
 8007e20:	f7f8 fe52 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d034      	beq.n	8007e92 <_printf_float+0x276>
 8007e28:	4a37      	ldr	r2, [pc, #220]	; (8007f08 <_printf_float+0x2ec>)
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	4631      	mov	r1, r6
 8007e2e:	4628      	mov	r0, r5
 8007e30:	47b8      	blx	r7
 8007e32:	3001      	adds	r0, #1
 8007e34:	f43f af51 	beq.w	8007cda <_printf_float+0xbe>
 8007e38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	db02      	blt.n	8007e46 <_printf_float+0x22a>
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	07d8      	lsls	r0, r3, #31
 8007e44:	d510      	bpl.n	8007e68 <_printf_float+0x24c>
 8007e46:	ee18 3a10 	vmov	r3, s16
 8007e4a:	4652      	mov	r2, sl
 8007e4c:	4631      	mov	r1, r6
 8007e4e:	4628      	mov	r0, r5
 8007e50:	47b8      	blx	r7
 8007e52:	3001      	adds	r0, #1
 8007e54:	f43f af41 	beq.w	8007cda <_printf_float+0xbe>
 8007e58:	f04f 0800 	mov.w	r8, #0
 8007e5c:	f104 091a 	add.w	r9, r4, #26
 8007e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e62:	3b01      	subs	r3, #1
 8007e64:	4543      	cmp	r3, r8
 8007e66:	dc09      	bgt.n	8007e7c <_printf_float+0x260>
 8007e68:	6823      	ldr	r3, [r4, #0]
 8007e6a:	079b      	lsls	r3, r3, #30
 8007e6c:	f100 8107 	bmi.w	800807e <_printf_float+0x462>
 8007e70:	68e0      	ldr	r0, [r4, #12]
 8007e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e74:	4298      	cmp	r0, r3
 8007e76:	bfb8      	it	lt
 8007e78:	4618      	movlt	r0, r3
 8007e7a:	e730      	b.n	8007cde <_printf_float+0xc2>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	464a      	mov	r2, r9
 8007e80:	4631      	mov	r1, r6
 8007e82:	4628      	mov	r0, r5
 8007e84:	47b8      	blx	r7
 8007e86:	3001      	adds	r0, #1
 8007e88:	f43f af27 	beq.w	8007cda <_printf_float+0xbe>
 8007e8c:	f108 0801 	add.w	r8, r8, #1
 8007e90:	e7e6      	b.n	8007e60 <_printf_float+0x244>
 8007e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	dc39      	bgt.n	8007f0c <_printf_float+0x2f0>
 8007e98:	4a1b      	ldr	r2, [pc, #108]	; (8007f08 <_printf_float+0x2ec>)
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	4631      	mov	r1, r6
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	47b8      	blx	r7
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	f43f af19 	beq.w	8007cda <_printf_float+0xbe>
 8007ea8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007eac:	4313      	orrs	r3, r2
 8007eae:	d102      	bne.n	8007eb6 <_printf_float+0x29a>
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	07d9      	lsls	r1, r3, #31
 8007eb4:	d5d8      	bpl.n	8007e68 <_printf_float+0x24c>
 8007eb6:	ee18 3a10 	vmov	r3, s16
 8007eba:	4652      	mov	r2, sl
 8007ebc:	4631      	mov	r1, r6
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	47b8      	blx	r7
 8007ec2:	3001      	adds	r0, #1
 8007ec4:	f43f af09 	beq.w	8007cda <_printf_float+0xbe>
 8007ec8:	f04f 0900 	mov.w	r9, #0
 8007ecc:	f104 0a1a 	add.w	sl, r4, #26
 8007ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed2:	425b      	negs	r3, r3
 8007ed4:	454b      	cmp	r3, r9
 8007ed6:	dc01      	bgt.n	8007edc <_printf_float+0x2c0>
 8007ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eda:	e792      	b.n	8007e02 <_printf_float+0x1e6>
 8007edc:	2301      	movs	r3, #1
 8007ede:	4652      	mov	r2, sl
 8007ee0:	4631      	mov	r1, r6
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	47b8      	blx	r7
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	f43f aef7 	beq.w	8007cda <_printf_float+0xbe>
 8007eec:	f109 0901 	add.w	r9, r9, #1
 8007ef0:	e7ee      	b.n	8007ed0 <_printf_float+0x2b4>
 8007ef2:	bf00      	nop
 8007ef4:	7fefffff 	.word	0x7fefffff
 8007ef8:	0800d35c 	.word	0x0800d35c
 8007efc:	0800d360 	.word	0x0800d360
 8007f00:	0800d364 	.word	0x0800d364
 8007f04:	0800d368 	.word	0x0800d368
 8007f08:	0800d36c 	.word	0x0800d36c
 8007f0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f10:	429a      	cmp	r2, r3
 8007f12:	bfa8      	it	ge
 8007f14:	461a      	movge	r2, r3
 8007f16:	2a00      	cmp	r2, #0
 8007f18:	4691      	mov	r9, r2
 8007f1a:	dc37      	bgt.n	8007f8c <_printf_float+0x370>
 8007f1c:	f04f 0b00 	mov.w	fp, #0
 8007f20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f24:	f104 021a 	add.w	r2, r4, #26
 8007f28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f2a:	9305      	str	r3, [sp, #20]
 8007f2c:	eba3 0309 	sub.w	r3, r3, r9
 8007f30:	455b      	cmp	r3, fp
 8007f32:	dc33      	bgt.n	8007f9c <_printf_float+0x380>
 8007f34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	db3b      	blt.n	8007fb4 <_printf_float+0x398>
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	07da      	lsls	r2, r3, #31
 8007f40:	d438      	bmi.n	8007fb4 <_printf_float+0x398>
 8007f42:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f46:	eba2 0903 	sub.w	r9, r2, r3
 8007f4a:	9b05      	ldr	r3, [sp, #20]
 8007f4c:	1ad2      	subs	r2, r2, r3
 8007f4e:	4591      	cmp	r9, r2
 8007f50:	bfa8      	it	ge
 8007f52:	4691      	movge	r9, r2
 8007f54:	f1b9 0f00 	cmp.w	r9, #0
 8007f58:	dc35      	bgt.n	8007fc6 <_printf_float+0x3aa>
 8007f5a:	f04f 0800 	mov.w	r8, #0
 8007f5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f62:	f104 0a1a 	add.w	sl, r4, #26
 8007f66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f6a:	1a9b      	subs	r3, r3, r2
 8007f6c:	eba3 0309 	sub.w	r3, r3, r9
 8007f70:	4543      	cmp	r3, r8
 8007f72:	f77f af79 	ble.w	8007e68 <_printf_float+0x24c>
 8007f76:	2301      	movs	r3, #1
 8007f78:	4652      	mov	r2, sl
 8007f7a:	4631      	mov	r1, r6
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	47b8      	blx	r7
 8007f80:	3001      	adds	r0, #1
 8007f82:	f43f aeaa 	beq.w	8007cda <_printf_float+0xbe>
 8007f86:	f108 0801 	add.w	r8, r8, #1
 8007f8a:	e7ec      	b.n	8007f66 <_printf_float+0x34a>
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	4631      	mov	r1, r6
 8007f90:	4642      	mov	r2, r8
 8007f92:	4628      	mov	r0, r5
 8007f94:	47b8      	blx	r7
 8007f96:	3001      	adds	r0, #1
 8007f98:	d1c0      	bne.n	8007f1c <_printf_float+0x300>
 8007f9a:	e69e      	b.n	8007cda <_printf_float+0xbe>
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	9205      	str	r2, [sp, #20]
 8007fa4:	47b8      	blx	r7
 8007fa6:	3001      	adds	r0, #1
 8007fa8:	f43f ae97 	beq.w	8007cda <_printf_float+0xbe>
 8007fac:	9a05      	ldr	r2, [sp, #20]
 8007fae:	f10b 0b01 	add.w	fp, fp, #1
 8007fb2:	e7b9      	b.n	8007f28 <_printf_float+0x30c>
 8007fb4:	ee18 3a10 	vmov	r3, s16
 8007fb8:	4652      	mov	r2, sl
 8007fba:	4631      	mov	r1, r6
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	47b8      	blx	r7
 8007fc0:	3001      	adds	r0, #1
 8007fc2:	d1be      	bne.n	8007f42 <_printf_float+0x326>
 8007fc4:	e689      	b.n	8007cda <_printf_float+0xbe>
 8007fc6:	9a05      	ldr	r2, [sp, #20]
 8007fc8:	464b      	mov	r3, r9
 8007fca:	4442      	add	r2, r8
 8007fcc:	4631      	mov	r1, r6
 8007fce:	4628      	mov	r0, r5
 8007fd0:	47b8      	blx	r7
 8007fd2:	3001      	adds	r0, #1
 8007fd4:	d1c1      	bne.n	8007f5a <_printf_float+0x33e>
 8007fd6:	e680      	b.n	8007cda <_printf_float+0xbe>
 8007fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fda:	2a01      	cmp	r2, #1
 8007fdc:	dc01      	bgt.n	8007fe2 <_printf_float+0x3c6>
 8007fde:	07db      	lsls	r3, r3, #31
 8007fe0:	d53a      	bpl.n	8008058 <_printf_float+0x43c>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	4642      	mov	r2, r8
 8007fe6:	4631      	mov	r1, r6
 8007fe8:	4628      	mov	r0, r5
 8007fea:	47b8      	blx	r7
 8007fec:	3001      	adds	r0, #1
 8007fee:	f43f ae74 	beq.w	8007cda <_printf_float+0xbe>
 8007ff2:	ee18 3a10 	vmov	r3, s16
 8007ff6:	4652      	mov	r2, sl
 8007ff8:	4631      	mov	r1, r6
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	47b8      	blx	r7
 8007ffe:	3001      	adds	r0, #1
 8008000:	f43f ae6b 	beq.w	8007cda <_printf_float+0xbe>
 8008004:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008008:	2200      	movs	r2, #0
 800800a:	2300      	movs	r3, #0
 800800c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008010:	f7f8 fd5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008014:	b9d8      	cbnz	r0, 800804e <_printf_float+0x432>
 8008016:	f10a 33ff 	add.w	r3, sl, #4294967295
 800801a:	f108 0201 	add.w	r2, r8, #1
 800801e:	4631      	mov	r1, r6
 8008020:	4628      	mov	r0, r5
 8008022:	47b8      	blx	r7
 8008024:	3001      	adds	r0, #1
 8008026:	d10e      	bne.n	8008046 <_printf_float+0x42a>
 8008028:	e657      	b.n	8007cda <_printf_float+0xbe>
 800802a:	2301      	movs	r3, #1
 800802c:	4652      	mov	r2, sl
 800802e:	4631      	mov	r1, r6
 8008030:	4628      	mov	r0, r5
 8008032:	47b8      	blx	r7
 8008034:	3001      	adds	r0, #1
 8008036:	f43f ae50 	beq.w	8007cda <_printf_float+0xbe>
 800803a:	f108 0801 	add.w	r8, r8, #1
 800803e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008040:	3b01      	subs	r3, #1
 8008042:	4543      	cmp	r3, r8
 8008044:	dcf1      	bgt.n	800802a <_printf_float+0x40e>
 8008046:	464b      	mov	r3, r9
 8008048:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800804c:	e6da      	b.n	8007e04 <_printf_float+0x1e8>
 800804e:	f04f 0800 	mov.w	r8, #0
 8008052:	f104 0a1a 	add.w	sl, r4, #26
 8008056:	e7f2      	b.n	800803e <_printf_float+0x422>
 8008058:	2301      	movs	r3, #1
 800805a:	4642      	mov	r2, r8
 800805c:	e7df      	b.n	800801e <_printf_float+0x402>
 800805e:	2301      	movs	r3, #1
 8008060:	464a      	mov	r2, r9
 8008062:	4631      	mov	r1, r6
 8008064:	4628      	mov	r0, r5
 8008066:	47b8      	blx	r7
 8008068:	3001      	adds	r0, #1
 800806a:	f43f ae36 	beq.w	8007cda <_printf_float+0xbe>
 800806e:	f108 0801 	add.w	r8, r8, #1
 8008072:	68e3      	ldr	r3, [r4, #12]
 8008074:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008076:	1a5b      	subs	r3, r3, r1
 8008078:	4543      	cmp	r3, r8
 800807a:	dcf0      	bgt.n	800805e <_printf_float+0x442>
 800807c:	e6f8      	b.n	8007e70 <_printf_float+0x254>
 800807e:	f04f 0800 	mov.w	r8, #0
 8008082:	f104 0919 	add.w	r9, r4, #25
 8008086:	e7f4      	b.n	8008072 <_printf_float+0x456>

08008088 <_printf_common>:
 8008088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800808c:	4616      	mov	r6, r2
 800808e:	4699      	mov	r9, r3
 8008090:	688a      	ldr	r2, [r1, #8]
 8008092:	690b      	ldr	r3, [r1, #16]
 8008094:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008098:	4293      	cmp	r3, r2
 800809a:	bfb8      	it	lt
 800809c:	4613      	movlt	r3, r2
 800809e:	6033      	str	r3, [r6, #0]
 80080a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080a4:	4607      	mov	r7, r0
 80080a6:	460c      	mov	r4, r1
 80080a8:	b10a      	cbz	r2, 80080ae <_printf_common+0x26>
 80080aa:	3301      	adds	r3, #1
 80080ac:	6033      	str	r3, [r6, #0]
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	0699      	lsls	r1, r3, #26
 80080b2:	bf42      	ittt	mi
 80080b4:	6833      	ldrmi	r3, [r6, #0]
 80080b6:	3302      	addmi	r3, #2
 80080b8:	6033      	strmi	r3, [r6, #0]
 80080ba:	6825      	ldr	r5, [r4, #0]
 80080bc:	f015 0506 	ands.w	r5, r5, #6
 80080c0:	d106      	bne.n	80080d0 <_printf_common+0x48>
 80080c2:	f104 0a19 	add.w	sl, r4, #25
 80080c6:	68e3      	ldr	r3, [r4, #12]
 80080c8:	6832      	ldr	r2, [r6, #0]
 80080ca:	1a9b      	subs	r3, r3, r2
 80080cc:	42ab      	cmp	r3, r5
 80080ce:	dc26      	bgt.n	800811e <_printf_common+0x96>
 80080d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080d4:	1e13      	subs	r3, r2, #0
 80080d6:	6822      	ldr	r2, [r4, #0]
 80080d8:	bf18      	it	ne
 80080da:	2301      	movne	r3, #1
 80080dc:	0692      	lsls	r2, r2, #26
 80080de:	d42b      	bmi.n	8008138 <_printf_common+0xb0>
 80080e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080e4:	4649      	mov	r1, r9
 80080e6:	4638      	mov	r0, r7
 80080e8:	47c0      	blx	r8
 80080ea:	3001      	adds	r0, #1
 80080ec:	d01e      	beq.n	800812c <_printf_common+0xa4>
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	6922      	ldr	r2, [r4, #16]
 80080f2:	f003 0306 	and.w	r3, r3, #6
 80080f6:	2b04      	cmp	r3, #4
 80080f8:	bf02      	ittt	eq
 80080fa:	68e5      	ldreq	r5, [r4, #12]
 80080fc:	6833      	ldreq	r3, [r6, #0]
 80080fe:	1aed      	subeq	r5, r5, r3
 8008100:	68a3      	ldr	r3, [r4, #8]
 8008102:	bf0c      	ite	eq
 8008104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008108:	2500      	movne	r5, #0
 800810a:	4293      	cmp	r3, r2
 800810c:	bfc4      	itt	gt
 800810e:	1a9b      	subgt	r3, r3, r2
 8008110:	18ed      	addgt	r5, r5, r3
 8008112:	2600      	movs	r6, #0
 8008114:	341a      	adds	r4, #26
 8008116:	42b5      	cmp	r5, r6
 8008118:	d11a      	bne.n	8008150 <_printf_common+0xc8>
 800811a:	2000      	movs	r0, #0
 800811c:	e008      	b.n	8008130 <_printf_common+0xa8>
 800811e:	2301      	movs	r3, #1
 8008120:	4652      	mov	r2, sl
 8008122:	4649      	mov	r1, r9
 8008124:	4638      	mov	r0, r7
 8008126:	47c0      	blx	r8
 8008128:	3001      	adds	r0, #1
 800812a:	d103      	bne.n	8008134 <_printf_common+0xac>
 800812c:	f04f 30ff 	mov.w	r0, #4294967295
 8008130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008134:	3501      	adds	r5, #1
 8008136:	e7c6      	b.n	80080c6 <_printf_common+0x3e>
 8008138:	18e1      	adds	r1, r4, r3
 800813a:	1c5a      	adds	r2, r3, #1
 800813c:	2030      	movs	r0, #48	; 0x30
 800813e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008142:	4422      	add	r2, r4
 8008144:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008148:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800814c:	3302      	adds	r3, #2
 800814e:	e7c7      	b.n	80080e0 <_printf_common+0x58>
 8008150:	2301      	movs	r3, #1
 8008152:	4622      	mov	r2, r4
 8008154:	4649      	mov	r1, r9
 8008156:	4638      	mov	r0, r7
 8008158:	47c0      	blx	r8
 800815a:	3001      	adds	r0, #1
 800815c:	d0e6      	beq.n	800812c <_printf_common+0xa4>
 800815e:	3601      	adds	r6, #1
 8008160:	e7d9      	b.n	8008116 <_printf_common+0x8e>
	...

08008164 <_printf_i>:
 8008164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008168:	7e0f      	ldrb	r7, [r1, #24]
 800816a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800816c:	2f78      	cmp	r7, #120	; 0x78
 800816e:	4691      	mov	r9, r2
 8008170:	4680      	mov	r8, r0
 8008172:	460c      	mov	r4, r1
 8008174:	469a      	mov	sl, r3
 8008176:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800817a:	d807      	bhi.n	800818c <_printf_i+0x28>
 800817c:	2f62      	cmp	r7, #98	; 0x62
 800817e:	d80a      	bhi.n	8008196 <_printf_i+0x32>
 8008180:	2f00      	cmp	r7, #0
 8008182:	f000 80d4 	beq.w	800832e <_printf_i+0x1ca>
 8008186:	2f58      	cmp	r7, #88	; 0x58
 8008188:	f000 80c0 	beq.w	800830c <_printf_i+0x1a8>
 800818c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008190:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008194:	e03a      	b.n	800820c <_printf_i+0xa8>
 8008196:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800819a:	2b15      	cmp	r3, #21
 800819c:	d8f6      	bhi.n	800818c <_printf_i+0x28>
 800819e:	a101      	add	r1, pc, #4	; (adr r1, 80081a4 <_printf_i+0x40>)
 80081a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081a4:	080081fd 	.word	0x080081fd
 80081a8:	08008211 	.word	0x08008211
 80081ac:	0800818d 	.word	0x0800818d
 80081b0:	0800818d 	.word	0x0800818d
 80081b4:	0800818d 	.word	0x0800818d
 80081b8:	0800818d 	.word	0x0800818d
 80081bc:	08008211 	.word	0x08008211
 80081c0:	0800818d 	.word	0x0800818d
 80081c4:	0800818d 	.word	0x0800818d
 80081c8:	0800818d 	.word	0x0800818d
 80081cc:	0800818d 	.word	0x0800818d
 80081d0:	08008315 	.word	0x08008315
 80081d4:	0800823d 	.word	0x0800823d
 80081d8:	080082cf 	.word	0x080082cf
 80081dc:	0800818d 	.word	0x0800818d
 80081e0:	0800818d 	.word	0x0800818d
 80081e4:	08008337 	.word	0x08008337
 80081e8:	0800818d 	.word	0x0800818d
 80081ec:	0800823d 	.word	0x0800823d
 80081f0:	0800818d 	.word	0x0800818d
 80081f4:	0800818d 	.word	0x0800818d
 80081f8:	080082d7 	.word	0x080082d7
 80081fc:	682b      	ldr	r3, [r5, #0]
 80081fe:	1d1a      	adds	r2, r3, #4
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	602a      	str	r2, [r5, #0]
 8008204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800820c:	2301      	movs	r3, #1
 800820e:	e09f      	b.n	8008350 <_printf_i+0x1ec>
 8008210:	6820      	ldr	r0, [r4, #0]
 8008212:	682b      	ldr	r3, [r5, #0]
 8008214:	0607      	lsls	r7, r0, #24
 8008216:	f103 0104 	add.w	r1, r3, #4
 800821a:	6029      	str	r1, [r5, #0]
 800821c:	d501      	bpl.n	8008222 <_printf_i+0xbe>
 800821e:	681e      	ldr	r6, [r3, #0]
 8008220:	e003      	b.n	800822a <_printf_i+0xc6>
 8008222:	0646      	lsls	r6, r0, #25
 8008224:	d5fb      	bpl.n	800821e <_printf_i+0xba>
 8008226:	f9b3 6000 	ldrsh.w	r6, [r3]
 800822a:	2e00      	cmp	r6, #0
 800822c:	da03      	bge.n	8008236 <_printf_i+0xd2>
 800822e:	232d      	movs	r3, #45	; 0x2d
 8008230:	4276      	negs	r6, r6
 8008232:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008236:	485a      	ldr	r0, [pc, #360]	; (80083a0 <_printf_i+0x23c>)
 8008238:	230a      	movs	r3, #10
 800823a:	e012      	b.n	8008262 <_printf_i+0xfe>
 800823c:	682b      	ldr	r3, [r5, #0]
 800823e:	6820      	ldr	r0, [r4, #0]
 8008240:	1d19      	adds	r1, r3, #4
 8008242:	6029      	str	r1, [r5, #0]
 8008244:	0605      	lsls	r5, r0, #24
 8008246:	d501      	bpl.n	800824c <_printf_i+0xe8>
 8008248:	681e      	ldr	r6, [r3, #0]
 800824a:	e002      	b.n	8008252 <_printf_i+0xee>
 800824c:	0641      	lsls	r1, r0, #25
 800824e:	d5fb      	bpl.n	8008248 <_printf_i+0xe4>
 8008250:	881e      	ldrh	r6, [r3, #0]
 8008252:	4853      	ldr	r0, [pc, #332]	; (80083a0 <_printf_i+0x23c>)
 8008254:	2f6f      	cmp	r7, #111	; 0x6f
 8008256:	bf0c      	ite	eq
 8008258:	2308      	moveq	r3, #8
 800825a:	230a      	movne	r3, #10
 800825c:	2100      	movs	r1, #0
 800825e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008262:	6865      	ldr	r5, [r4, #4]
 8008264:	60a5      	str	r5, [r4, #8]
 8008266:	2d00      	cmp	r5, #0
 8008268:	bfa2      	ittt	ge
 800826a:	6821      	ldrge	r1, [r4, #0]
 800826c:	f021 0104 	bicge.w	r1, r1, #4
 8008270:	6021      	strge	r1, [r4, #0]
 8008272:	b90e      	cbnz	r6, 8008278 <_printf_i+0x114>
 8008274:	2d00      	cmp	r5, #0
 8008276:	d04b      	beq.n	8008310 <_printf_i+0x1ac>
 8008278:	4615      	mov	r5, r2
 800827a:	fbb6 f1f3 	udiv	r1, r6, r3
 800827e:	fb03 6711 	mls	r7, r3, r1, r6
 8008282:	5dc7      	ldrb	r7, [r0, r7]
 8008284:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008288:	4637      	mov	r7, r6
 800828a:	42bb      	cmp	r3, r7
 800828c:	460e      	mov	r6, r1
 800828e:	d9f4      	bls.n	800827a <_printf_i+0x116>
 8008290:	2b08      	cmp	r3, #8
 8008292:	d10b      	bne.n	80082ac <_printf_i+0x148>
 8008294:	6823      	ldr	r3, [r4, #0]
 8008296:	07de      	lsls	r6, r3, #31
 8008298:	d508      	bpl.n	80082ac <_printf_i+0x148>
 800829a:	6923      	ldr	r3, [r4, #16]
 800829c:	6861      	ldr	r1, [r4, #4]
 800829e:	4299      	cmp	r1, r3
 80082a0:	bfde      	ittt	le
 80082a2:	2330      	movle	r3, #48	; 0x30
 80082a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082ac:	1b52      	subs	r2, r2, r5
 80082ae:	6122      	str	r2, [r4, #16]
 80082b0:	f8cd a000 	str.w	sl, [sp]
 80082b4:	464b      	mov	r3, r9
 80082b6:	aa03      	add	r2, sp, #12
 80082b8:	4621      	mov	r1, r4
 80082ba:	4640      	mov	r0, r8
 80082bc:	f7ff fee4 	bl	8008088 <_printf_common>
 80082c0:	3001      	adds	r0, #1
 80082c2:	d14a      	bne.n	800835a <_printf_i+0x1f6>
 80082c4:	f04f 30ff 	mov.w	r0, #4294967295
 80082c8:	b004      	add	sp, #16
 80082ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	f043 0320 	orr.w	r3, r3, #32
 80082d4:	6023      	str	r3, [r4, #0]
 80082d6:	4833      	ldr	r0, [pc, #204]	; (80083a4 <_printf_i+0x240>)
 80082d8:	2778      	movs	r7, #120	; 0x78
 80082da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	6829      	ldr	r1, [r5, #0]
 80082e2:	061f      	lsls	r7, r3, #24
 80082e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80082e8:	d402      	bmi.n	80082f0 <_printf_i+0x18c>
 80082ea:	065f      	lsls	r7, r3, #25
 80082ec:	bf48      	it	mi
 80082ee:	b2b6      	uxthmi	r6, r6
 80082f0:	07df      	lsls	r7, r3, #31
 80082f2:	bf48      	it	mi
 80082f4:	f043 0320 	orrmi.w	r3, r3, #32
 80082f8:	6029      	str	r1, [r5, #0]
 80082fa:	bf48      	it	mi
 80082fc:	6023      	strmi	r3, [r4, #0]
 80082fe:	b91e      	cbnz	r6, 8008308 <_printf_i+0x1a4>
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	f023 0320 	bic.w	r3, r3, #32
 8008306:	6023      	str	r3, [r4, #0]
 8008308:	2310      	movs	r3, #16
 800830a:	e7a7      	b.n	800825c <_printf_i+0xf8>
 800830c:	4824      	ldr	r0, [pc, #144]	; (80083a0 <_printf_i+0x23c>)
 800830e:	e7e4      	b.n	80082da <_printf_i+0x176>
 8008310:	4615      	mov	r5, r2
 8008312:	e7bd      	b.n	8008290 <_printf_i+0x12c>
 8008314:	682b      	ldr	r3, [r5, #0]
 8008316:	6826      	ldr	r6, [r4, #0]
 8008318:	6961      	ldr	r1, [r4, #20]
 800831a:	1d18      	adds	r0, r3, #4
 800831c:	6028      	str	r0, [r5, #0]
 800831e:	0635      	lsls	r5, r6, #24
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	d501      	bpl.n	8008328 <_printf_i+0x1c4>
 8008324:	6019      	str	r1, [r3, #0]
 8008326:	e002      	b.n	800832e <_printf_i+0x1ca>
 8008328:	0670      	lsls	r0, r6, #25
 800832a:	d5fb      	bpl.n	8008324 <_printf_i+0x1c0>
 800832c:	8019      	strh	r1, [r3, #0]
 800832e:	2300      	movs	r3, #0
 8008330:	6123      	str	r3, [r4, #16]
 8008332:	4615      	mov	r5, r2
 8008334:	e7bc      	b.n	80082b0 <_printf_i+0x14c>
 8008336:	682b      	ldr	r3, [r5, #0]
 8008338:	1d1a      	adds	r2, r3, #4
 800833a:	602a      	str	r2, [r5, #0]
 800833c:	681d      	ldr	r5, [r3, #0]
 800833e:	6862      	ldr	r2, [r4, #4]
 8008340:	2100      	movs	r1, #0
 8008342:	4628      	mov	r0, r5
 8008344:	f7f7 ff44 	bl	80001d0 <memchr>
 8008348:	b108      	cbz	r0, 800834e <_printf_i+0x1ea>
 800834a:	1b40      	subs	r0, r0, r5
 800834c:	6060      	str	r0, [r4, #4]
 800834e:	6863      	ldr	r3, [r4, #4]
 8008350:	6123      	str	r3, [r4, #16]
 8008352:	2300      	movs	r3, #0
 8008354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008358:	e7aa      	b.n	80082b0 <_printf_i+0x14c>
 800835a:	6923      	ldr	r3, [r4, #16]
 800835c:	462a      	mov	r2, r5
 800835e:	4649      	mov	r1, r9
 8008360:	4640      	mov	r0, r8
 8008362:	47d0      	blx	sl
 8008364:	3001      	adds	r0, #1
 8008366:	d0ad      	beq.n	80082c4 <_printf_i+0x160>
 8008368:	6823      	ldr	r3, [r4, #0]
 800836a:	079b      	lsls	r3, r3, #30
 800836c:	d413      	bmi.n	8008396 <_printf_i+0x232>
 800836e:	68e0      	ldr	r0, [r4, #12]
 8008370:	9b03      	ldr	r3, [sp, #12]
 8008372:	4298      	cmp	r0, r3
 8008374:	bfb8      	it	lt
 8008376:	4618      	movlt	r0, r3
 8008378:	e7a6      	b.n	80082c8 <_printf_i+0x164>
 800837a:	2301      	movs	r3, #1
 800837c:	4632      	mov	r2, r6
 800837e:	4649      	mov	r1, r9
 8008380:	4640      	mov	r0, r8
 8008382:	47d0      	blx	sl
 8008384:	3001      	adds	r0, #1
 8008386:	d09d      	beq.n	80082c4 <_printf_i+0x160>
 8008388:	3501      	adds	r5, #1
 800838a:	68e3      	ldr	r3, [r4, #12]
 800838c:	9903      	ldr	r1, [sp, #12]
 800838e:	1a5b      	subs	r3, r3, r1
 8008390:	42ab      	cmp	r3, r5
 8008392:	dcf2      	bgt.n	800837a <_printf_i+0x216>
 8008394:	e7eb      	b.n	800836e <_printf_i+0x20a>
 8008396:	2500      	movs	r5, #0
 8008398:	f104 0619 	add.w	r6, r4, #25
 800839c:	e7f5      	b.n	800838a <_printf_i+0x226>
 800839e:	bf00      	nop
 80083a0:	0800d36e 	.word	0x0800d36e
 80083a4:	0800d37f 	.word	0x0800d37f

080083a8 <std>:
 80083a8:	2300      	movs	r3, #0
 80083aa:	b510      	push	{r4, lr}
 80083ac:	4604      	mov	r4, r0
 80083ae:	e9c0 3300 	strd	r3, r3, [r0]
 80083b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083b6:	6083      	str	r3, [r0, #8]
 80083b8:	8181      	strh	r1, [r0, #12]
 80083ba:	6643      	str	r3, [r0, #100]	; 0x64
 80083bc:	81c2      	strh	r2, [r0, #14]
 80083be:	6183      	str	r3, [r0, #24]
 80083c0:	4619      	mov	r1, r3
 80083c2:	2208      	movs	r2, #8
 80083c4:	305c      	adds	r0, #92	; 0x5c
 80083c6:	f000 f930 	bl	800862a <memset>
 80083ca:	4b05      	ldr	r3, [pc, #20]	; (80083e0 <std+0x38>)
 80083cc:	6263      	str	r3, [r4, #36]	; 0x24
 80083ce:	4b05      	ldr	r3, [pc, #20]	; (80083e4 <std+0x3c>)
 80083d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80083d2:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <std+0x40>)
 80083d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083d6:	4b05      	ldr	r3, [pc, #20]	; (80083ec <std+0x44>)
 80083d8:	6224      	str	r4, [r4, #32]
 80083da:	6323      	str	r3, [r4, #48]	; 0x30
 80083dc:	bd10      	pop	{r4, pc}
 80083de:	bf00      	nop
 80083e0:	08008571 	.word	0x08008571
 80083e4:	08008593 	.word	0x08008593
 80083e8:	080085cb 	.word	0x080085cb
 80083ec:	080085ef 	.word	0x080085ef

080083f0 <stdio_exit_handler>:
 80083f0:	4a02      	ldr	r2, [pc, #8]	; (80083fc <stdio_exit_handler+0xc>)
 80083f2:	4903      	ldr	r1, [pc, #12]	; (8008400 <stdio_exit_handler+0x10>)
 80083f4:	4803      	ldr	r0, [pc, #12]	; (8008404 <stdio_exit_handler+0x14>)
 80083f6:	f000 b869 	b.w	80084cc <_fwalk_sglue>
 80083fa:	bf00      	nop
 80083fc:	20000038 	.word	0x20000038
 8008400:	0800a031 	.word	0x0800a031
 8008404:	20000044 	.word	0x20000044

08008408 <cleanup_stdio>:
 8008408:	6841      	ldr	r1, [r0, #4]
 800840a:	4b0c      	ldr	r3, [pc, #48]	; (800843c <cleanup_stdio+0x34>)
 800840c:	4299      	cmp	r1, r3
 800840e:	b510      	push	{r4, lr}
 8008410:	4604      	mov	r4, r0
 8008412:	d001      	beq.n	8008418 <cleanup_stdio+0x10>
 8008414:	f001 fe0c 	bl	800a030 <_fflush_r>
 8008418:	68a1      	ldr	r1, [r4, #8]
 800841a:	4b09      	ldr	r3, [pc, #36]	; (8008440 <cleanup_stdio+0x38>)
 800841c:	4299      	cmp	r1, r3
 800841e:	d002      	beq.n	8008426 <cleanup_stdio+0x1e>
 8008420:	4620      	mov	r0, r4
 8008422:	f001 fe05 	bl	800a030 <_fflush_r>
 8008426:	68e1      	ldr	r1, [r4, #12]
 8008428:	4b06      	ldr	r3, [pc, #24]	; (8008444 <cleanup_stdio+0x3c>)
 800842a:	4299      	cmp	r1, r3
 800842c:	d004      	beq.n	8008438 <cleanup_stdio+0x30>
 800842e:	4620      	mov	r0, r4
 8008430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008434:	f001 bdfc 	b.w	800a030 <_fflush_r>
 8008438:	bd10      	pop	{r4, pc}
 800843a:	bf00      	nop
 800843c:	20000834 	.word	0x20000834
 8008440:	2000089c 	.word	0x2000089c
 8008444:	20000904 	.word	0x20000904

08008448 <global_stdio_init.part.0>:
 8008448:	b510      	push	{r4, lr}
 800844a:	4b0b      	ldr	r3, [pc, #44]	; (8008478 <global_stdio_init.part.0+0x30>)
 800844c:	4c0b      	ldr	r4, [pc, #44]	; (800847c <global_stdio_init.part.0+0x34>)
 800844e:	4a0c      	ldr	r2, [pc, #48]	; (8008480 <global_stdio_init.part.0+0x38>)
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	4620      	mov	r0, r4
 8008454:	2200      	movs	r2, #0
 8008456:	2104      	movs	r1, #4
 8008458:	f7ff ffa6 	bl	80083a8 <std>
 800845c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008460:	2201      	movs	r2, #1
 8008462:	2109      	movs	r1, #9
 8008464:	f7ff ffa0 	bl	80083a8 <std>
 8008468:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800846c:	2202      	movs	r2, #2
 800846e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008472:	2112      	movs	r1, #18
 8008474:	f7ff bf98 	b.w	80083a8 <std>
 8008478:	2000096c 	.word	0x2000096c
 800847c:	20000834 	.word	0x20000834
 8008480:	080083f1 	.word	0x080083f1

08008484 <__sfp_lock_acquire>:
 8008484:	4801      	ldr	r0, [pc, #4]	; (800848c <__sfp_lock_acquire+0x8>)
 8008486:	f000 b9a1 	b.w	80087cc <__retarget_lock_acquire_recursive>
 800848a:	bf00      	nop
 800848c:	20000975 	.word	0x20000975

08008490 <__sfp_lock_release>:
 8008490:	4801      	ldr	r0, [pc, #4]	; (8008498 <__sfp_lock_release+0x8>)
 8008492:	f000 b99c 	b.w	80087ce <__retarget_lock_release_recursive>
 8008496:	bf00      	nop
 8008498:	20000975 	.word	0x20000975

0800849c <__sinit>:
 800849c:	b510      	push	{r4, lr}
 800849e:	4604      	mov	r4, r0
 80084a0:	f7ff fff0 	bl	8008484 <__sfp_lock_acquire>
 80084a4:	6a23      	ldr	r3, [r4, #32]
 80084a6:	b11b      	cbz	r3, 80084b0 <__sinit+0x14>
 80084a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ac:	f7ff bff0 	b.w	8008490 <__sfp_lock_release>
 80084b0:	4b04      	ldr	r3, [pc, #16]	; (80084c4 <__sinit+0x28>)
 80084b2:	6223      	str	r3, [r4, #32]
 80084b4:	4b04      	ldr	r3, [pc, #16]	; (80084c8 <__sinit+0x2c>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1f5      	bne.n	80084a8 <__sinit+0xc>
 80084bc:	f7ff ffc4 	bl	8008448 <global_stdio_init.part.0>
 80084c0:	e7f2      	b.n	80084a8 <__sinit+0xc>
 80084c2:	bf00      	nop
 80084c4:	08008409 	.word	0x08008409
 80084c8:	2000096c 	.word	0x2000096c

080084cc <_fwalk_sglue>:
 80084cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084d0:	4607      	mov	r7, r0
 80084d2:	4688      	mov	r8, r1
 80084d4:	4614      	mov	r4, r2
 80084d6:	2600      	movs	r6, #0
 80084d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084dc:	f1b9 0901 	subs.w	r9, r9, #1
 80084e0:	d505      	bpl.n	80084ee <_fwalk_sglue+0x22>
 80084e2:	6824      	ldr	r4, [r4, #0]
 80084e4:	2c00      	cmp	r4, #0
 80084e6:	d1f7      	bne.n	80084d8 <_fwalk_sglue+0xc>
 80084e8:	4630      	mov	r0, r6
 80084ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ee:	89ab      	ldrh	r3, [r5, #12]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d907      	bls.n	8008504 <_fwalk_sglue+0x38>
 80084f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084f8:	3301      	adds	r3, #1
 80084fa:	d003      	beq.n	8008504 <_fwalk_sglue+0x38>
 80084fc:	4629      	mov	r1, r5
 80084fe:	4638      	mov	r0, r7
 8008500:	47c0      	blx	r8
 8008502:	4306      	orrs	r6, r0
 8008504:	3568      	adds	r5, #104	; 0x68
 8008506:	e7e9      	b.n	80084dc <_fwalk_sglue+0x10>

08008508 <sniprintf>:
 8008508:	b40c      	push	{r2, r3}
 800850a:	b530      	push	{r4, r5, lr}
 800850c:	4b17      	ldr	r3, [pc, #92]	; (800856c <sniprintf+0x64>)
 800850e:	1e0c      	subs	r4, r1, #0
 8008510:	681d      	ldr	r5, [r3, #0]
 8008512:	b09d      	sub	sp, #116	; 0x74
 8008514:	da08      	bge.n	8008528 <sniprintf+0x20>
 8008516:	238b      	movs	r3, #139	; 0x8b
 8008518:	602b      	str	r3, [r5, #0]
 800851a:	f04f 30ff 	mov.w	r0, #4294967295
 800851e:	b01d      	add	sp, #116	; 0x74
 8008520:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008524:	b002      	add	sp, #8
 8008526:	4770      	bx	lr
 8008528:	f44f 7302 	mov.w	r3, #520	; 0x208
 800852c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008530:	bf14      	ite	ne
 8008532:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008536:	4623      	moveq	r3, r4
 8008538:	9304      	str	r3, [sp, #16]
 800853a:	9307      	str	r3, [sp, #28]
 800853c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008540:	9002      	str	r0, [sp, #8]
 8008542:	9006      	str	r0, [sp, #24]
 8008544:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008548:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800854a:	ab21      	add	r3, sp, #132	; 0x84
 800854c:	a902      	add	r1, sp, #8
 800854e:	4628      	mov	r0, r5
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	f001 fbe9 	bl	8009d28 <_svfiprintf_r>
 8008556:	1c43      	adds	r3, r0, #1
 8008558:	bfbc      	itt	lt
 800855a:	238b      	movlt	r3, #139	; 0x8b
 800855c:	602b      	strlt	r3, [r5, #0]
 800855e:	2c00      	cmp	r4, #0
 8008560:	d0dd      	beq.n	800851e <sniprintf+0x16>
 8008562:	9b02      	ldr	r3, [sp, #8]
 8008564:	2200      	movs	r2, #0
 8008566:	701a      	strb	r2, [r3, #0]
 8008568:	e7d9      	b.n	800851e <sniprintf+0x16>
 800856a:	bf00      	nop
 800856c:	20000090 	.word	0x20000090

08008570 <__sread>:
 8008570:	b510      	push	{r4, lr}
 8008572:	460c      	mov	r4, r1
 8008574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008578:	f000 f8b6 	bl	80086e8 <_read_r>
 800857c:	2800      	cmp	r0, #0
 800857e:	bfab      	itete	ge
 8008580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008582:	89a3      	ldrhlt	r3, [r4, #12]
 8008584:	181b      	addge	r3, r3, r0
 8008586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800858a:	bfac      	ite	ge
 800858c:	6563      	strge	r3, [r4, #84]	; 0x54
 800858e:	81a3      	strhlt	r3, [r4, #12]
 8008590:	bd10      	pop	{r4, pc}

08008592 <__swrite>:
 8008592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008596:	461f      	mov	r7, r3
 8008598:	898b      	ldrh	r3, [r1, #12]
 800859a:	05db      	lsls	r3, r3, #23
 800859c:	4605      	mov	r5, r0
 800859e:	460c      	mov	r4, r1
 80085a0:	4616      	mov	r6, r2
 80085a2:	d505      	bpl.n	80085b0 <__swrite+0x1e>
 80085a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a8:	2302      	movs	r3, #2
 80085aa:	2200      	movs	r2, #0
 80085ac:	f000 f88a 	bl	80086c4 <_lseek_r>
 80085b0:	89a3      	ldrh	r3, [r4, #12]
 80085b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085ba:	81a3      	strh	r3, [r4, #12]
 80085bc:	4632      	mov	r2, r6
 80085be:	463b      	mov	r3, r7
 80085c0:	4628      	mov	r0, r5
 80085c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085c6:	f000 b8c5 	b.w	8008754 <_write_r>

080085ca <__sseek>:
 80085ca:	b510      	push	{r4, lr}
 80085cc:	460c      	mov	r4, r1
 80085ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d2:	f000 f877 	bl	80086c4 <_lseek_r>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	89a3      	ldrh	r3, [r4, #12]
 80085da:	bf15      	itete	ne
 80085dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80085de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085e6:	81a3      	strheq	r3, [r4, #12]
 80085e8:	bf18      	it	ne
 80085ea:	81a3      	strhne	r3, [r4, #12]
 80085ec:	bd10      	pop	{r4, pc}

080085ee <__sclose>:
 80085ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f2:	f000 b857 	b.w	80086a4 <_close_r>

080085f6 <memmove>:
 80085f6:	4288      	cmp	r0, r1
 80085f8:	b510      	push	{r4, lr}
 80085fa:	eb01 0402 	add.w	r4, r1, r2
 80085fe:	d902      	bls.n	8008606 <memmove+0x10>
 8008600:	4284      	cmp	r4, r0
 8008602:	4623      	mov	r3, r4
 8008604:	d807      	bhi.n	8008616 <memmove+0x20>
 8008606:	1e43      	subs	r3, r0, #1
 8008608:	42a1      	cmp	r1, r4
 800860a:	d008      	beq.n	800861e <memmove+0x28>
 800860c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008610:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008614:	e7f8      	b.n	8008608 <memmove+0x12>
 8008616:	4402      	add	r2, r0
 8008618:	4601      	mov	r1, r0
 800861a:	428a      	cmp	r2, r1
 800861c:	d100      	bne.n	8008620 <memmove+0x2a>
 800861e:	bd10      	pop	{r4, pc}
 8008620:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008624:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008628:	e7f7      	b.n	800861a <memmove+0x24>

0800862a <memset>:
 800862a:	4402      	add	r2, r0
 800862c:	4603      	mov	r3, r0
 800862e:	4293      	cmp	r3, r2
 8008630:	d100      	bne.n	8008634 <memset+0xa>
 8008632:	4770      	bx	lr
 8008634:	f803 1b01 	strb.w	r1, [r3], #1
 8008638:	e7f9      	b.n	800862e <memset+0x4>

0800863a <_raise_r>:
 800863a:	291f      	cmp	r1, #31
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	4604      	mov	r4, r0
 8008640:	460d      	mov	r5, r1
 8008642:	d904      	bls.n	800864e <_raise_r+0x14>
 8008644:	2316      	movs	r3, #22
 8008646:	6003      	str	r3, [r0, #0]
 8008648:	f04f 30ff 	mov.w	r0, #4294967295
 800864c:	bd38      	pop	{r3, r4, r5, pc}
 800864e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008650:	b112      	cbz	r2, 8008658 <_raise_r+0x1e>
 8008652:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008656:	b94b      	cbnz	r3, 800866c <_raise_r+0x32>
 8008658:	4620      	mov	r0, r4
 800865a:	f000 f869 	bl	8008730 <_getpid_r>
 800865e:	462a      	mov	r2, r5
 8008660:	4601      	mov	r1, r0
 8008662:	4620      	mov	r0, r4
 8008664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008668:	f000 b850 	b.w	800870c <_kill_r>
 800866c:	2b01      	cmp	r3, #1
 800866e:	d00a      	beq.n	8008686 <_raise_r+0x4c>
 8008670:	1c59      	adds	r1, r3, #1
 8008672:	d103      	bne.n	800867c <_raise_r+0x42>
 8008674:	2316      	movs	r3, #22
 8008676:	6003      	str	r3, [r0, #0]
 8008678:	2001      	movs	r0, #1
 800867a:	e7e7      	b.n	800864c <_raise_r+0x12>
 800867c:	2400      	movs	r4, #0
 800867e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008682:	4628      	mov	r0, r5
 8008684:	4798      	blx	r3
 8008686:	2000      	movs	r0, #0
 8008688:	e7e0      	b.n	800864c <_raise_r+0x12>
	...

0800868c <raise>:
 800868c:	4b02      	ldr	r3, [pc, #8]	; (8008698 <raise+0xc>)
 800868e:	4601      	mov	r1, r0
 8008690:	6818      	ldr	r0, [r3, #0]
 8008692:	f7ff bfd2 	b.w	800863a <_raise_r>
 8008696:	bf00      	nop
 8008698:	20000090 	.word	0x20000090

0800869c <_localeconv_r>:
 800869c:	4800      	ldr	r0, [pc, #0]	; (80086a0 <_localeconv_r+0x4>)
 800869e:	4770      	bx	lr
 80086a0:	20000184 	.word	0x20000184

080086a4 <_close_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	4d06      	ldr	r5, [pc, #24]	; (80086c0 <_close_r+0x1c>)
 80086a8:	2300      	movs	r3, #0
 80086aa:	4604      	mov	r4, r0
 80086ac:	4608      	mov	r0, r1
 80086ae:	602b      	str	r3, [r5, #0]
 80086b0:	f7f9 fdd3 	bl	800225a <_close>
 80086b4:	1c43      	adds	r3, r0, #1
 80086b6:	d102      	bne.n	80086be <_close_r+0x1a>
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	b103      	cbz	r3, 80086be <_close_r+0x1a>
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	bd38      	pop	{r3, r4, r5, pc}
 80086c0:	20000970 	.word	0x20000970

080086c4 <_lseek_r>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	4d07      	ldr	r5, [pc, #28]	; (80086e4 <_lseek_r+0x20>)
 80086c8:	4604      	mov	r4, r0
 80086ca:	4608      	mov	r0, r1
 80086cc:	4611      	mov	r1, r2
 80086ce:	2200      	movs	r2, #0
 80086d0:	602a      	str	r2, [r5, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	f7f9 fde8 	bl	80022a8 <_lseek>
 80086d8:	1c43      	adds	r3, r0, #1
 80086da:	d102      	bne.n	80086e2 <_lseek_r+0x1e>
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	b103      	cbz	r3, 80086e2 <_lseek_r+0x1e>
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
 80086e4:	20000970 	.word	0x20000970

080086e8 <_read_r>:
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	4d07      	ldr	r5, [pc, #28]	; (8008708 <_read_r+0x20>)
 80086ec:	4604      	mov	r4, r0
 80086ee:	4608      	mov	r0, r1
 80086f0:	4611      	mov	r1, r2
 80086f2:	2200      	movs	r2, #0
 80086f4:	602a      	str	r2, [r5, #0]
 80086f6:	461a      	mov	r2, r3
 80086f8:	f7f9 fd76 	bl	80021e8 <_read>
 80086fc:	1c43      	adds	r3, r0, #1
 80086fe:	d102      	bne.n	8008706 <_read_r+0x1e>
 8008700:	682b      	ldr	r3, [r5, #0]
 8008702:	b103      	cbz	r3, 8008706 <_read_r+0x1e>
 8008704:	6023      	str	r3, [r4, #0]
 8008706:	bd38      	pop	{r3, r4, r5, pc}
 8008708:	20000970 	.word	0x20000970

0800870c <_kill_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4d07      	ldr	r5, [pc, #28]	; (800872c <_kill_r+0x20>)
 8008710:	2300      	movs	r3, #0
 8008712:	4604      	mov	r4, r0
 8008714:	4608      	mov	r0, r1
 8008716:	4611      	mov	r1, r2
 8008718:	602b      	str	r3, [r5, #0]
 800871a:	f7f9 fd4b 	bl	80021b4 <_kill>
 800871e:	1c43      	adds	r3, r0, #1
 8008720:	d102      	bne.n	8008728 <_kill_r+0x1c>
 8008722:	682b      	ldr	r3, [r5, #0]
 8008724:	b103      	cbz	r3, 8008728 <_kill_r+0x1c>
 8008726:	6023      	str	r3, [r4, #0]
 8008728:	bd38      	pop	{r3, r4, r5, pc}
 800872a:	bf00      	nop
 800872c:	20000970 	.word	0x20000970

08008730 <_getpid_r>:
 8008730:	f7f9 bd38 	b.w	80021a4 <_getpid>

08008734 <_sbrk_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4d06      	ldr	r5, [pc, #24]	; (8008750 <_sbrk_r+0x1c>)
 8008738:	2300      	movs	r3, #0
 800873a:	4604      	mov	r4, r0
 800873c:	4608      	mov	r0, r1
 800873e:	602b      	str	r3, [r5, #0]
 8008740:	f7f9 fdc0 	bl	80022c4 <_sbrk>
 8008744:	1c43      	adds	r3, r0, #1
 8008746:	d102      	bne.n	800874e <_sbrk_r+0x1a>
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	b103      	cbz	r3, 800874e <_sbrk_r+0x1a>
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	20000970 	.word	0x20000970

08008754 <_write_r>:
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	4d07      	ldr	r5, [pc, #28]	; (8008774 <_write_r+0x20>)
 8008758:	4604      	mov	r4, r0
 800875a:	4608      	mov	r0, r1
 800875c:	4611      	mov	r1, r2
 800875e:	2200      	movs	r2, #0
 8008760:	602a      	str	r2, [r5, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	f7f9 fd5d 	bl	8002222 <_write>
 8008768:	1c43      	adds	r3, r0, #1
 800876a:	d102      	bne.n	8008772 <_write_r+0x1e>
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	b103      	cbz	r3, 8008772 <_write_r+0x1e>
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	bd38      	pop	{r3, r4, r5, pc}
 8008774:	20000970 	.word	0x20000970

08008778 <__errno>:
 8008778:	4b01      	ldr	r3, [pc, #4]	; (8008780 <__errno+0x8>)
 800877a:	6818      	ldr	r0, [r3, #0]
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	20000090 	.word	0x20000090

08008784 <__libc_init_array>:
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	4d0d      	ldr	r5, [pc, #52]	; (80087bc <__libc_init_array+0x38>)
 8008788:	4c0d      	ldr	r4, [pc, #52]	; (80087c0 <__libc_init_array+0x3c>)
 800878a:	1b64      	subs	r4, r4, r5
 800878c:	10a4      	asrs	r4, r4, #2
 800878e:	2600      	movs	r6, #0
 8008790:	42a6      	cmp	r6, r4
 8008792:	d109      	bne.n	80087a8 <__libc_init_array+0x24>
 8008794:	4d0b      	ldr	r5, [pc, #44]	; (80087c4 <__libc_init_array+0x40>)
 8008796:	4c0c      	ldr	r4, [pc, #48]	; (80087c8 <__libc_init_array+0x44>)
 8008798:	f001 ff6c 	bl	800a674 <_init>
 800879c:	1b64      	subs	r4, r4, r5
 800879e:	10a4      	asrs	r4, r4, #2
 80087a0:	2600      	movs	r6, #0
 80087a2:	42a6      	cmp	r6, r4
 80087a4:	d105      	bne.n	80087b2 <__libc_init_array+0x2e>
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ac:	4798      	blx	r3
 80087ae:	3601      	adds	r6, #1
 80087b0:	e7ee      	b.n	8008790 <__libc_init_array+0xc>
 80087b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087b6:	4798      	blx	r3
 80087b8:	3601      	adds	r6, #1
 80087ba:	e7f2      	b.n	80087a2 <__libc_init_array+0x1e>
 80087bc:	0800d6d4 	.word	0x0800d6d4
 80087c0:	0800d6d4 	.word	0x0800d6d4
 80087c4:	0800d6d4 	.word	0x0800d6d4
 80087c8:	0800d6d8 	.word	0x0800d6d8

080087cc <__retarget_lock_acquire_recursive>:
 80087cc:	4770      	bx	lr

080087ce <__retarget_lock_release_recursive>:
 80087ce:	4770      	bx	lr

080087d0 <memcpy>:
 80087d0:	440a      	add	r2, r1
 80087d2:	4291      	cmp	r1, r2
 80087d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80087d8:	d100      	bne.n	80087dc <memcpy+0xc>
 80087da:	4770      	bx	lr
 80087dc:	b510      	push	{r4, lr}
 80087de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087e6:	4291      	cmp	r1, r2
 80087e8:	d1f9      	bne.n	80087de <memcpy+0xe>
 80087ea:	bd10      	pop	{r4, pc}

080087ec <quorem>:
 80087ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f0:	6903      	ldr	r3, [r0, #16]
 80087f2:	690c      	ldr	r4, [r1, #16]
 80087f4:	42a3      	cmp	r3, r4
 80087f6:	4607      	mov	r7, r0
 80087f8:	db7e      	blt.n	80088f8 <quorem+0x10c>
 80087fa:	3c01      	subs	r4, #1
 80087fc:	f101 0814 	add.w	r8, r1, #20
 8008800:	f100 0514 	add.w	r5, r0, #20
 8008804:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008808:	9301      	str	r3, [sp, #4]
 800880a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800880e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008812:	3301      	adds	r3, #1
 8008814:	429a      	cmp	r2, r3
 8008816:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800881a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800881e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008822:	d331      	bcc.n	8008888 <quorem+0x9c>
 8008824:	f04f 0e00 	mov.w	lr, #0
 8008828:	4640      	mov	r0, r8
 800882a:	46ac      	mov	ip, r5
 800882c:	46f2      	mov	sl, lr
 800882e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008832:	b293      	uxth	r3, r2
 8008834:	fb06 e303 	mla	r3, r6, r3, lr
 8008838:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800883c:	0c1a      	lsrs	r2, r3, #16
 800883e:	b29b      	uxth	r3, r3
 8008840:	ebaa 0303 	sub.w	r3, sl, r3
 8008844:	f8dc a000 	ldr.w	sl, [ip]
 8008848:	fa13 f38a 	uxtah	r3, r3, sl
 800884c:	fb06 220e 	mla	r2, r6, lr, r2
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	9b00      	ldr	r3, [sp, #0]
 8008854:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008858:	b292      	uxth	r2, r2
 800885a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800885e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008862:	f8bd 3000 	ldrh.w	r3, [sp]
 8008866:	4581      	cmp	r9, r0
 8008868:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800886c:	f84c 3b04 	str.w	r3, [ip], #4
 8008870:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008874:	d2db      	bcs.n	800882e <quorem+0x42>
 8008876:	f855 300b 	ldr.w	r3, [r5, fp]
 800887a:	b92b      	cbnz	r3, 8008888 <quorem+0x9c>
 800887c:	9b01      	ldr	r3, [sp, #4]
 800887e:	3b04      	subs	r3, #4
 8008880:	429d      	cmp	r5, r3
 8008882:	461a      	mov	r2, r3
 8008884:	d32c      	bcc.n	80088e0 <quorem+0xf4>
 8008886:	613c      	str	r4, [r7, #16]
 8008888:	4638      	mov	r0, r7
 800888a:	f001 f8f3 	bl	8009a74 <__mcmp>
 800888e:	2800      	cmp	r0, #0
 8008890:	db22      	blt.n	80088d8 <quorem+0xec>
 8008892:	3601      	adds	r6, #1
 8008894:	4629      	mov	r1, r5
 8008896:	2000      	movs	r0, #0
 8008898:	f858 2b04 	ldr.w	r2, [r8], #4
 800889c:	f8d1 c000 	ldr.w	ip, [r1]
 80088a0:	b293      	uxth	r3, r2
 80088a2:	1ac3      	subs	r3, r0, r3
 80088a4:	0c12      	lsrs	r2, r2, #16
 80088a6:	fa13 f38c 	uxtah	r3, r3, ip
 80088aa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80088ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088b8:	45c1      	cmp	r9, r8
 80088ba:	f841 3b04 	str.w	r3, [r1], #4
 80088be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80088c2:	d2e9      	bcs.n	8008898 <quorem+0xac>
 80088c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088cc:	b922      	cbnz	r2, 80088d8 <quorem+0xec>
 80088ce:	3b04      	subs	r3, #4
 80088d0:	429d      	cmp	r5, r3
 80088d2:	461a      	mov	r2, r3
 80088d4:	d30a      	bcc.n	80088ec <quorem+0x100>
 80088d6:	613c      	str	r4, [r7, #16]
 80088d8:	4630      	mov	r0, r6
 80088da:	b003      	add	sp, #12
 80088dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e0:	6812      	ldr	r2, [r2, #0]
 80088e2:	3b04      	subs	r3, #4
 80088e4:	2a00      	cmp	r2, #0
 80088e6:	d1ce      	bne.n	8008886 <quorem+0x9a>
 80088e8:	3c01      	subs	r4, #1
 80088ea:	e7c9      	b.n	8008880 <quorem+0x94>
 80088ec:	6812      	ldr	r2, [r2, #0]
 80088ee:	3b04      	subs	r3, #4
 80088f0:	2a00      	cmp	r2, #0
 80088f2:	d1f0      	bne.n	80088d6 <quorem+0xea>
 80088f4:	3c01      	subs	r4, #1
 80088f6:	e7eb      	b.n	80088d0 <quorem+0xe4>
 80088f8:	2000      	movs	r0, #0
 80088fa:	e7ee      	b.n	80088da <quorem+0xee>
 80088fc:	0000      	movs	r0, r0
	...

08008900 <_dtoa_r>:
 8008900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008904:	ed2d 8b04 	vpush	{d8-d9}
 8008908:	69c5      	ldr	r5, [r0, #28]
 800890a:	b093      	sub	sp, #76	; 0x4c
 800890c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008910:	ec57 6b10 	vmov	r6, r7, d0
 8008914:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008918:	9107      	str	r1, [sp, #28]
 800891a:	4604      	mov	r4, r0
 800891c:	920a      	str	r2, [sp, #40]	; 0x28
 800891e:	930d      	str	r3, [sp, #52]	; 0x34
 8008920:	b975      	cbnz	r5, 8008940 <_dtoa_r+0x40>
 8008922:	2010      	movs	r0, #16
 8008924:	f7ff f826 	bl	8007974 <malloc>
 8008928:	4602      	mov	r2, r0
 800892a:	61e0      	str	r0, [r4, #28]
 800892c:	b920      	cbnz	r0, 8008938 <_dtoa_r+0x38>
 800892e:	4bae      	ldr	r3, [pc, #696]	; (8008be8 <_dtoa_r+0x2e8>)
 8008930:	21ef      	movs	r1, #239	; 0xef
 8008932:	48ae      	ldr	r0, [pc, #696]	; (8008bec <_dtoa_r+0x2ec>)
 8008934:	f001 fba4 	bl	800a080 <__assert_func>
 8008938:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800893c:	6005      	str	r5, [r0, #0]
 800893e:	60c5      	str	r5, [r0, #12]
 8008940:	69e3      	ldr	r3, [r4, #28]
 8008942:	6819      	ldr	r1, [r3, #0]
 8008944:	b151      	cbz	r1, 800895c <_dtoa_r+0x5c>
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	604a      	str	r2, [r1, #4]
 800894a:	2301      	movs	r3, #1
 800894c:	4093      	lsls	r3, r2
 800894e:	608b      	str	r3, [r1, #8]
 8008950:	4620      	mov	r0, r4
 8008952:	f000 fe53 	bl	80095fc <_Bfree>
 8008956:	69e3      	ldr	r3, [r4, #28]
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]
 800895c:	1e3b      	subs	r3, r7, #0
 800895e:	bfbb      	ittet	lt
 8008960:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008964:	9303      	strlt	r3, [sp, #12]
 8008966:	2300      	movge	r3, #0
 8008968:	2201      	movlt	r2, #1
 800896a:	bfac      	ite	ge
 800896c:	f8c8 3000 	strge.w	r3, [r8]
 8008970:	f8c8 2000 	strlt.w	r2, [r8]
 8008974:	4b9e      	ldr	r3, [pc, #632]	; (8008bf0 <_dtoa_r+0x2f0>)
 8008976:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800897a:	ea33 0308 	bics.w	r3, r3, r8
 800897e:	d11b      	bne.n	80089b8 <_dtoa_r+0xb8>
 8008980:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008982:	f242 730f 	movw	r3, #9999	; 0x270f
 8008986:	6013      	str	r3, [r2, #0]
 8008988:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800898c:	4333      	orrs	r3, r6
 800898e:	f000 8593 	beq.w	80094b8 <_dtoa_r+0xbb8>
 8008992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008994:	b963      	cbnz	r3, 80089b0 <_dtoa_r+0xb0>
 8008996:	4b97      	ldr	r3, [pc, #604]	; (8008bf4 <_dtoa_r+0x2f4>)
 8008998:	e027      	b.n	80089ea <_dtoa_r+0xea>
 800899a:	4b97      	ldr	r3, [pc, #604]	; (8008bf8 <_dtoa_r+0x2f8>)
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	3308      	adds	r3, #8
 80089a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089a2:	6013      	str	r3, [r2, #0]
 80089a4:	9800      	ldr	r0, [sp, #0]
 80089a6:	b013      	add	sp, #76	; 0x4c
 80089a8:	ecbd 8b04 	vpop	{d8-d9}
 80089ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b0:	4b90      	ldr	r3, [pc, #576]	; (8008bf4 <_dtoa_r+0x2f4>)
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	3303      	adds	r3, #3
 80089b6:	e7f3      	b.n	80089a0 <_dtoa_r+0xa0>
 80089b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089bc:	2200      	movs	r2, #0
 80089be:	ec51 0b17 	vmov	r0, r1, d7
 80089c2:	eeb0 8a47 	vmov.f32	s16, s14
 80089c6:	eef0 8a67 	vmov.f32	s17, s15
 80089ca:	2300      	movs	r3, #0
 80089cc:	f7f8 f87c 	bl	8000ac8 <__aeabi_dcmpeq>
 80089d0:	4681      	mov	r9, r0
 80089d2:	b160      	cbz	r0, 80089ee <_dtoa_r+0xee>
 80089d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089d6:	2301      	movs	r3, #1
 80089d8:	6013      	str	r3, [r2, #0]
 80089da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f000 8568 	beq.w	80094b2 <_dtoa_r+0xbb2>
 80089e2:	4b86      	ldr	r3, [pc, #536]	; (8008bfc <_dtoa_r+0x2fc>)
 80089e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	e7da      	b.n	80089a4 <_dtoa_r+0xa4>
 80089ee:	aa10      	add	r2, sp, #64	; 0x40
 80089f0:	a911      	add	r1, sp, #68	; 0x44
 80089f2:	4620      	mov	r0, r4
 80089f4:	eeb0 0a48 	vmov.f32	s0, s16
 80089f8:	eef0 0a68 	vmov.f32	s1, s17
 80089fc:	f001 f8e0 	bl	8009bc0 <__d2b>
 8008a00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008a04:	4682      	mov	sl, r0
 8008a06:	2d00      	cmp	r5, #0
 8008a08:	d07f      	beq.n	8008b0a <_dtoa_r+0x20a>
 8008a0a:	ee18 3a90 	vmov	r3, s17
 8008a0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008a16:	ec51 0b18 	vmov	r0, r1, d8
 8008a1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008a1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a22:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008a26:	4619      	mov	r1, r3
 8008a28:	2200      	movs	r2, #0
 8008a2a:	4b75      	ldr	r3, [pc, #468]	; (8008c00 <_dtoa_r+0x300>)
 8008a2c:	f7f7 fc2c 	bl	8000288 <__aeabi_dsub>
 8008a30:	a367      	add	r3, pc, #412	; (adr r3, 8008bd0 <_dtoa_r+0x2d0>)
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	f7f7 fddf 	bl	80005f8 <__aeabi_dmul>
 8008a3a:	a367      	add	r3, pc, #412	; (adr r3, 8008bd8 <_dtoa_r+0x2d8>)
 8008a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a40:	f7f7 fc24 	bl	800028c <__adddf3>
 8008a44:	4606      	mov	r6, r0
 8008a46:	4628      	mov	r0, r5
 8008a48:	460f      	mov	r7, r1
 8008a4a:	f7f7 fd6b 	bl	8000524 <__aeabi_i2d>
 8008a4e:	a364      	add	r3, pc, #400	; (adr r3, 8008be0 <_dtoa_r+0x2e0>)
 8008a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a54:	f7f7 fdd0 	bl	80005f8 <__aeabi_dmul>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	4639      	mov	r1, r7
 8008a60:	f7f7 fc14 	bl	800028c <__adddf3>
 8008a64:	4606      	mov	r6, r0
 8008a66:	460f      	mov	r7, r1
 8008a68:	f7f8 f876 	bl	8000b58 <__aeabi_d2iz>
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	4683      	mov	fp, r0
 8008a70:	2300      	movs	r3, #0
 8008a72:	4630      	mov	r0, r6
 8008a74:	4639      	mov	r1, r7
 8008a76:	f7f8 f831 	bl	8000adc <__aeabi_dcmplt>
 8008a7a:	b148      	cbz	r0, 8008a90 <_dtoa_r+0x190>
 8008a7c:	4658      	mov	r0, fp
 8008a7e:	f7f7 fd51 	bl	8000524 <__aeabi_i2d>
 8008a82:	4632      	mov	r2, r6
 8008a84:	463b      	mov	r3, r7
 8008a86:	f7f8 f81f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a8a:	b908      	cbnz	r0, 8008a90 <_dtoa_r+0x190>
 8008a8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a90:	f1bb 0f16 	cmp.w	fp, #22
 8008a94:	d857      	bhi.n	8008b46 <_dtoa_r+0x246>
 8008a96:	4b5b      	ldr	r3, [pc, #364]	; (8008c04 <_dtoa_r+0x304>)
 8008a98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	ec51 0b18 	vmov	r0, r1, d8
 8008aa4:	f7f8 f81a 	bl	8000adc <__aeabi_dcmplt>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d04e      	beq.n	8008b4a <_dtoa_r+0x24a>
 8008aac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	930c      	str	r3, [sp, #48]	; 0x30
 8008ab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ab6:	1b5b      	subs	r3, r3, r5
 8008ab8:	1e5a      	subs	r2, r3, #1
 8008aba:	bf45      	ittet	mi
 8008abc:	f1c3 0301 	rsbmi	r3, r3, #1
 8008ac0:	9305      	strmi	r3, [sp, #20]
 8008ac2:	2300      	movpl	r3, #0
 8008ac4:	2300      	movmi	r3, #0
 8008ac6:	9206      	str	r2, [sp, #24]
 8008ac8:	bf54      	ite	pl
 8008aca:	9305      	strpl	r3, [sp, #20]
 8008acc:	9306      	strmi	r3, [sp, #24]
 8008ace:	f1bb 0f00 	cmp.w	fp, #0
 8008ad2:	db3c      	blt.n	8008b4e <_dtoa_r+0x24e>
 8008ad4:	9b06      	ldr	r3, [sp, #24]
 8008ad6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008ada:	445b      	add	r3, fp
 8008adc:	9306      	str	r3, [sp, #24]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	9308      	str	r3, [sp, #32]
 8008ae2:	9b07      	ldr	r3, [sp, #28]
 8008ae4:	2b09      	cmp	r3, #9
 8008ae6:	d868      	bhi.n	8008bba <_dtoa_r+0x2ba>
 8008ae8:	2b05      	cmp	r3, #5
 8008aea:	bfc4      	itt	gt
 8008aec:	3b04      	subgt	r3, #4
 8008aee:	9307      	strgt	r3, [sp, #28]
 8008af0:	9b07      	ldr	r3, [sp, #28]
 8008af2:	f1a3 0302 	sub.w	r3, r3, #2
 8008af6:	bfcc      	ite	gt
 8008af8:	2500      	movgt	r5, #0
 8008afa:	2501      	movle	r5, #1
 8008afc:	2b03      	cmp	r3, #3
 8008afe:	f200 8085 	bhi.w	8008c0c <_dtoa_r+0x30c>
 8008b02:	e8df f003 	tbb	[pc, r3]
 8008b06:	3b2e      	.short	0x3b2e
 8008b08:	5839      	.short	0x5839
 8008b0a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008b0e:	441d      	add	r5, r3
 8008b10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b14:	2b20      	cmp	r3, #32
 8008b16:	bfc1      	itttt	gt
 8008b18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008b20:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008b24:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008b28:	bfd6      	itet	le
 8008b2a:	f1c3 0320 	rsble	r3, r3, #32
 8008b2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008b32:	fa06 f003 	lslle.w	r0, r6, r3
 8008b36:	f7f7 fce5 	bl	8000504 <__aeabi_ui2d>
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008b40:	3d01      	subs	r5, #1
 8008b42:	920e      	str	r2, [sp, #56]	; 0x38
 8008b44:	e76f      	b.n	8008a26 <_dtoa_r+0x126>
 8008b46:	2301      	movs	r3, #1
 8008b48:	e7b3      	b.n	8008ab2 <_dtoa_r+0x1b2>
 8008b4a:	900c      	str	r0, [sp, #48]	; 0x30
 8008b4c:	e7b2      	b.n	8008ab4 <_dtoa_r+0x1b4>
 8008b4e:	9b05      	ldr	r3, [sp, #20]
 8008b50:	eba3 030b 	sub.w	r3, r3, fp
 8008b54:	9305      	str	r3, [sp, #20]
 8008b56:	f1cb 0300 	rsb	r3, fp, #0
 8008b5a:	9308      	str	r3, [sp, #32]
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b60:	e7bf      	b.n	8008ae2 <_dtoa_r+0x1e2>
 8008b62:	2300      	movs	r3, #0
 8008b64:	9309      	str	r3, [sp, #36]	; 0x24
 8008b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	dc52      	bgt.n	8008c12 <_dtoa_r+0x312>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	9301      	str	r3, [sp, #4]
 8008b70:	9304      	str	r3, [sp, #16]
 8008b72:	461a      	mov	r2, r3
 8008b74:	920a      	str	r2, [sp, #40]	; 0x28
 8008b76:	e00b      	b.n	8008b90 <_dtoa_r+0x290>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e7f3      	b.n	8008b64 <_dtoa_r+0x264>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b82:	445b      	add	r3, fp
 8008b84:	9301      	str	r3, [sp, #4]
 8008b86:	3301      	adds	r3, #1
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	9304      	str	r3, [sp, #16]
 8008b8c:	bfb8      	it	lt
 8008b8e:	2301      	movlt	r3, #1
 8008b90:	69e0      	ldr	r0, [r4, #28]
 8008b92:	2100      	movs	r1, #0
 8008b94:	2204      	movs	r2, #4
 8008b96:	f102 0614 	add.w	r6, r2, #20
 8008b9a:	429e      	cmp	r6, r3
 8008b9c:	d93d      	bls.n	8008c1a <_dtoa_r+0x31a>
 8008b9e:	6041      	str	r1, [r0, #4]
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fceb 	bl	800957c <_Balloc>
 8008ba6:	9000      	str	r0, [sp, #0]
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	d139      	bne.n	8008c20 <_dtoa_r+0x320>
 8008bac:	4b16      	ldr	r3, [pc, #88]	; (8008c08 <_dtoa_r+0x308>)
 8008bae:	4602      	mov	r2, r0
 8008bb0:	f240 11af 	movw	r1, #431	; 0x1af
 8008bb4:	e6bd      	b.n	8008932 <_dtoa_r+0x32>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e7e1      	b.n	8008b7e <_dtoa_r+0x27e>
 8008bba:	2501      	movs	r5, #1
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9307      	str	r3, [sp, #28]
 8008bc0:	9509      	str	r5, [sp, #36]	; 0x24
 8008bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc6:	9301      	str	r3, [sp, #4]
 8008bc8:	9304      	str	r3, [sp, #16]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	2312      	movs	r3, #18
 8008bce:	e7d1      	b.n	8008b74 <_dtoa_r+0x274>
 8008bd0:	636f4361 	.word	0x636f4361
 8008bd4:	3fd287a7 	.word	0x3fd287a7
 8008bd8:	8b60c8b3 	.word	0x8b60c8b3
 8008bdc:	3fc68a28 	.word	0x3fc68a28
 8008be0:	509f79fb 	.word	0x509f79fb
 8008be4:	3fd34413 	.word	0x3fd34413
 8008be8:	0800d39d 	.word	0x0800d39d
 8008bec:	0800d3b4 	.word	0x0800d3b4
 8008bf0:	7ff00000 	.word	0x7ff00000
 8008bf4:	0800d399 	.word	0x0800d399
 8008bf8:	0800d390 	.word	0x0800d390
 8008bfc:	0800d36d 	.word	0x0800d36d
 8008c00:	3ff80000 	.word	0x3ff80000
 8008c04:	0800d4a0 	.word	0x0800d4a0
 8008c08:	0800d40c 	.word	0x0800d40c
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c10:	e7d7      	b.n	8008bc2 <_dtoa_r+0x2c2>
 8008c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	9304      	str	r3, [sp, #16]
 8008c18:	e7ba      	b.n	8008b90 <_dtoa_r+0x290>
 8008c1a:	3101      	adds	r1, #1
 8008c1c:	0052      	lsls	r2, r2, #1
 8008c1e:	e7ba      	b.n	8008b96 <_dtoa_r+0x296>
 8008c20:	69e3      	ldr	r3, [r4, #28]
 8008c22:	9a00      	ldr	r2, [sp, #0]
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	9b04      	ldr	r3, [sp, #16]
 8008c28:	2b0e      	cmp	r3, #14
 8008c2a:	f200 80a8 	bhi.w	8008d7e <_dtoa_r+0x47e>
 8008c2e:	2d00      	cmp	r5, #0
 8008c30:	f000 80a5 	beq.w	8008d7e <_dtoa_r+0x47e>
 8008c34:	f1bb 0f00 	cmp.w	fp, #0
 8008c38:	dd38      	ble.n	8008cac <_dtoa_r+0x3ac>
 8008c3a:	4bc0      	ldr	r3, [pc, #768]	; (8008f3c <_dtoa_r+0x63c>)
 8008c3c:	f00b 020f 	and.w	r2, fp, #15
 8008c40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008c48:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008c4c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008c50:	d019      	beq.n	8008c86 <_dtoa_r+0x386>
 8008c52:	4bbb      	ldr	r3, [pc, #748]	; (8008f40 <_dtoa_r+0x640>)
 8008c54:	ec51 0b18 	vmov	r0, r1, d8
 8008c58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c5c:	f7f7 fdf6 	bl	800084c <__aeabi_ddiv>
 8008c60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c64:	f008 080f 	and.w	r8, r8, #15
 8008c68:	2503      	movs	r5, #3
 8008c6a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008f40 <_dtoa_r+0x640>
 8008c6e:	f1b8 0f00 	cmp.w	r8, #0
 8008c72:	d10a      	bne.n	8008c8a <_dtoa_r+0x38a>
 8008c74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c78:	4632      	mov	r2, r6
 8008c7a:	463b      	mov	r3, r7
 8008c7c:	f7f7 fde6 	bl	800084c <__aeabi_ddiv>
 8008c80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c84:	e02b      	b.n	8008cde <_dtoa_r+0x3de>
 8008c86:	2502      	movs	r5, #2
 8008c88:	e7ef      	b.n	8008c6a <_dtoa_r+0x36a>
 8008c8a:	f018 0f01 	tst.w	r8, #1
 8008c8e:	d008      	beq.n	8008ca2 <_dtoa_r+0x3a2>
 8008c90:	4630      	mov	r0, r6
 8008c92:	4639      	mov	r1, r7
 8008c94:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008c98:	f7f7 fcae 	bl	80005f8 <__aeabi_dmul>
 8008c9c:	3501      	adds	r5, #1
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	460f      	mov	r7, r1
 8008ca2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008ca6:	f109 0908 	add.w	r9, r9, #8
 8008caa:	e7e0      	b.n	8008c6e <_dtoa_r+0x36e>
 8008cac:	f000 809f 	beq.w	8008dee <_dtoa_r+0x4ee>
 8008cb0:	f1cb 0600 	rsb	r6, fp, #0
 8008cb4:	4ba1      	ldr	r3, [pc, #644]	; (8008f3c <_dtoa_r+0x63c>)
 8008cb6:	4fa2      	ldr	r7, [pc, #648]	; (8008f40 <_dtoa_r+0x640>)
 8008cb8:	f006 020f 	and.w	r2, r6, #15
 8008cbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc4:	ec51 0b18 	vmov	r0, r1, d8
 8008cc8:	f7f7 fc96 	bl	80005f8 <__aeabi_dmul>
 8008ccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cd0:	1136      	asrs	r6, r6, #4
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	2502      	movs	r5, #2
 8008cd6:	2e00      	cmp	r6, #0
 8008cd8:	d17e      	bne.n	8008dd8 <_dtoa_r+0x4d8>
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1d0      	bne.n	8008c80 <_dtoa_r+0x380>
 8008cde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ce0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f000 8084 	beq.w	8008df2 <_dtoa_r+0x4f2>
 8008cea:	4b96      	ldr	r3, [pc, #600]	; (8008f44 <_dtoa_r+0x644>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	4640      	mov	r0, r8
 8008cf0:	4649      	mov	r1, r9
 8008cf2:	f7f7 fef3 	bl	8000adc <__aeabi_dcmplt>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d07b      	beq.n	8008df2 <_dtoa_r+0x4f2>
 8008cfa:	9b04      	ldr	r3, [sp, #16]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d078      	beq.n	8008df2 <_dtoa_r+0x4f2>
 8008d00:	9b01      	ldr	r3, [sp, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	dd39      	ble.n	8008d7a <_dtoa_r+0x47a>
 8008d06:	4b90      	ldr	r3, [pc, #576]	; (8008f48 <_dtoa_r+0x648>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	4640      	mov	r0, r8
 8008d0c:	4649      	mov	r1, r9
 8008d0e:	f7f7 fc73 	bl	80005f8 <__aeabi_dmul>
 8008d12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d16:	9e01      	ldr	r6, [sp, #4]
 8008d18:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008d1c:	3501      	adds	r5, #1
 8008d1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008d22:	4628      	mov	r0, r5
 8008d24:	f7f7 fbfe 	bl	8000524 <__aeabi_i2d>
 8008d28:	4642      	mov	r2, r8
 8008d2a:	464b      	mov	r3, r9
 8008d2c:	f7f7 fc64 	bl	80005f8 <__aeabi_dmul>
 8008d30:	4b86      	ldr	r3, [pc, #536]	; (8008f4c <_dtoa_r+0x64c>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	f7f7 faaa 	bl	800028c <__adddf3>
 8008d38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d40:	9303      	str	r3, [sp, #12]
 8008d42:	2e00      	cmp	r6, #0
 8008d44:	d158      	bne.n	8008df8 <_dtoa_r+0x4f8>
 8008d46:	4b82      	ldr	r3, [pc, #520]	; (8008f50 <_dtoa_r+0x650>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	f7f7 fa9b 	bl	8000288 <__aeabi_dsub>
 8008d52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d56:	4680      	mov	r8, r0
 8008d58:	4689      	mov	r9, r1
 8008d5a:	f7f7 fedd 	bl	8000b18 <__aeabi_dcmpgt>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	f040 8296 	bne.w	8009290 <_dtoa_r+0x990>
 8008d64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008d68:	4640      	mov	r0, r8
 8008d6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d6e:	4649      	mov	r1, r9
 8008d70:	f7f7 feb4 	bl	8000adc <__aeabi_dcmplt>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	f040 8289 	bne.w	800928c <_dtoa_r+0x98c>
 8008d7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008d7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f2c0 814e 	blt.w	8009022 <_dtoa_r+0x722>
 8008d86:	f1bb 0f0e 	cmp.w	fp, #14
 8008d8a:	f300 814a 	bgt.w	8009022 <_dtoa_r+0x722>
 8008d8e:	4b6b      	ldr	r3, [pc, #428]	; (8008f3c <_dtoa_r+0x63c>)
 8008d90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f280 80dc 	bge.w	8008f58 <_dtoa_r+0x658>
 8008da0:	9b04      	ldr	r3, [sp, #16]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f300 80d8 	bgt.w	8008f58 <_dtoa_r+0x658>
 8008da8:	f040 826f 	bne.w	800928a <_dtoa_r+0x98a>
 8008dac:	4b68      	ldr	r3, [pc, #416]	; (8008f50 <_dtoa_r+0x650>)
 8008dae:	2200      	movs	r2, #0
 8008db0:	4640      	mov	r0, r8
 8008db2:	4649      	mov	r1, r9
 8008db4:	f7f7 fc20 	bl	80005f8 <__aeabi_dmul>
 8008db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dbc:	f7f7 fea2 	bl	8000b04 <__aeabi_dcmpge>
 8008dc0:	9e04      	ldr	r6, [sp, #16]
 8008dc2:	4637      	mov	r7, r6
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	f040 8245 	bne.w	8009254 <_dtoa_r+0x954>
 8008dca:	9d00      	ldr	r5, [sp, #0]
 8008dcc:	2331      	movs	r3, #49	; 0x31
 8008dce:	f805 3b01 	strb.w	r3, [r5], #1
 8008dd2:	f10b 0b01 	add.w	fp, fp, #1
 8008dd6:	e241      	b.n	800925c <_dtoa_r+0x95c>
 8008dd8:	07f2      	lsls	r2, r6, #31
 8008dda:	d505      	bpl.n	8008de8 <_dtoa_r+0x4e8>
 8008ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008de0:	f7f7 fc0a 	bl	80005f8 <__aeabi_dmul>
 8008de4:	3501      	adds	r5, #1
 8008de6:	2301      	movs	r3, #1
 8008de8:	1076      	asrs	r6, r6, #1
 8008dea:	3708      	adds	r7, #8
 8008dec:	e773      	b.n	8008cd6 <_dtoa_r+0x3d6>
 8008dee:	2502      	movs	r5, #2
 8008df0:	e775      	b.n	8008cde <_dtoa_r+0x3de>
 8008df2:	9e04      	ldr	r6, [sp, #16]
 8008df4:	465f      	mov	r7, fp
 8008df6:	e792      	b.n	8008d1e <_dtoa_r+0x41e>
 8008df8:	9900      	ldr	r1, [sp, #0]
 8008dfa:	4b50      	ldr	r3, [pc, #320]	; (8008f3c <_dtoa_r+0x63c>)
 8008dfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e00:	4431      	add	r1, r6
 8008e02:	9102      	str	r1, [sp, #8]
 8008e04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e06:	eeb0 9a47 	vmov.f32	s18, s14
 8008e0a:	eef0 9a67 	vmov.f32	s19, s15
 8008e0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e16:	2900      	cmp	r1, #0
 8008e18:	d044      	beq.n	8008ea4 <_dtoa_r+0x5a4>
 8008e1a:	494e      	ldr	r1, [pc, #312]	; (8008f54 <_dtoa_r+0x654>)
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	f7f7 fd15 	bl	800084c <__aeabi_ddiv>
 8008e22:	ec53 2b19 	vmov	r2, r3, d9
 8008e26:	f7f7 fa2f 	bl	8000288 <__aeabi_dsub>
 8008e2a:	9d00      	ldr	r5, [sp, #0]
 8008e2c:	ec41 0b19 	vmov	d9, r0, r1
 8008e30:	4649      	mov	r1, r9
 8008e32:	4640      	mov	r0, r8
 8008e34:	f7f7 fe90 	bl	8000b58 <__aeabi_d2iz>
 8008e38:	4606      	mov	r6, r0
 8008e3a:	f7f7 fb73 	bl	8000524 <__aeabi_i2d>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	4640      	mov	r0, r8
 8008e44:	4649      	mov	r1, r9
 8008e46:	f7f7 fa1f 	bl	8000288 <__aeabi_dsub>
 8008e4a:	3630      	adds	r6, #48	; 0x30
 8008e4c:	f805 6b01 	strb.w	r6, [r5], #1
 8008e50:	ec53 2b19 	vmov	r2, r3, d9
 8008e54:	4680      	mov	r8, r0
 8008e56:	4689      	mov	r9, r1
 8008e58:	f7f7 fe40 	bl	8000adc <__aeabi_dcmplt>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d164      	bne.n	8008f2a <_dtoa_r+0x62a>
 8008e60:	4642      	mov	r2, r8
 8008e62:	464b      	mov	r3, r9
 8008e64:	4937      	ldr	r1, [pc, #220]	; (8008f44 <_dtoa_r+0x644>)
 8008e66:	2000      	movs	r0, #0
 8008e68:	f7f7 fa0e 	bl	8000288 <__aeabi_dsub>
 8008e6c:	ec53 2b19 	vmov	r2, r3, d9
 8008e70:	f7f7 fe34 	bl	8000adc <__aeabi_dcmplt>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	f040 80b6 	bne.w	8008fe6 <_dtoa_r+0x6e6>
 8008e7a:	9b02      	ldr	r3, [sp, #8]
 8008e7c:	429d      	cmp	r5, r3
 8008e7e:	f43f af7c 	beq.w	8008d7a <_dtoa_r+0x47a>
 8008e82:	4b31      	ldr	r3, [pc, #196]	; (8008f48 <_dtoa_r+0x648>)
 8008e84:	ec51 0b19 	vmov	r0, r1, d9
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f7f7 fbb5 	bl	80005f8 <__aeabi_dmul>
 8008e8e:	4b2e      	ldr	r3, [pc, #184]	; (8008f48 <_dtoa_r+0x648>)
 8008e90:	ec41 0b19 	vmov	d9, r0, r1
 8008e94:	2200      	movs	r2, #0
 8008e96:	4640      	mov	r0, r8
 8008e98:	4649      	mov	r1, r9
 8008e9a:	f7f7 fbad 	bl	80005f8 <__aeabi_dmul>
 8008e9e:	4680      	mov	r8, r0
 8008ea0:	4689      	mov	r9, r1
 8008ea2:	e7c5      	b.n	8008e30 <_dtoa_r+0x530>
 8008ea4:	ec51 0b17 	vmov	r0, r1, d7
 8008ea8:	f7f7 fba6 	bl	80005f8 <__aeabi_dmul>
 8008eac:	9b02      	ldr	r3, [sp, #8]
 8008eae:	9d00      	ldr	r5, [sp, #0]
 8008eb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008eb2:	ec41 0b19 	vmov	d9, r0, r1
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	4640      	mov	r0, r8
 8008eba:	f7f7 fe4d 	bl	8000b58 <__aeabi_d2iz>
 8008ebe:	4606      	mov	r6, r0
 8008ec0:	f7f7 fb30 	bl	8000524 <__aeabi_i2d>
 8008ec4:	3630      	adds	r6, #48	; 0x30
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4640      	mov	r0, r8
 8008ecc:	4649      	mov	r1, r9
 8008ece:	f7f7 f9db 	bl	8000288 <__aeabi_dsub>
 8008ed2:	f805 6b01 	strb.w	r6, [r5], #1
 8008ed6:	9b02      	ldr	r3, [sp, #8]
 8008ed8:	429d      	cmp	r5, r3
 8008eda:	4680      	mov	r8, r0
 8008edc:	4689      	mov	r9, r1
 8008ede:	f04f 0200 	mov.w	r2, #0
 8008ee2:	d124      	bne.n	8008f2e <_dtoa_r+0x62e>
 8008ee4:	4b1b      	ldr	r3, [pc, #108]	; (8008f54 <_dtoa_r+0x654>)
 8008ee6:	ec51 0b19 	vmov	r0, r1, d9
 8008eea:	f7f7 f9cf 	bl	800028c <__adddf3>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	4649      	mov	r1, r9
 8008ef6:	f7f7 fe0f 	bl	8000b18 <__aeabi_dcmpgt>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d173      	bne.n	8008fe6 <_dtoa_r+0x6e6>
 8008efe:	ec53 2b19 	vmov	r2, r3, d9
 8008f02:	4914      	ldr	r1, [pc, #80]	; (8008f54 <_dtoa_r+0x654>)
 8008f04:	2000      	movs	r0, #0
 8008f06:	f7f7 f9bf 	bl	8000288 <__aeabi_dsub>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	4640      	mov	r0, r8
 8008f10:	4649      	mov	r1, r9
 8008f12:	f7f7 fde3 	bl	8000adc <__aeabi_dcmplt>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	f43f af2f 	beq.w	8008d7a <_dtoa_r+0x47a>
 8008f1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008f1e:	1e6b      	subs	r3, r5, #1
 8008f20:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f26:	2b30      	cmp	r3, #48	; 0x30
 8008f28:	d0f8      	beq.n	8008f1c <_dtoa_r+0x61c>
 8008f2a:	46bb      	mov	fp, r7
 8008f2c:	e04a      	b.n	8008fc4 <_dtoa_r+0x6c4>
 8008f2e:	4b06      	ldr	r3, [pc, #24]	; (8008f48 <_dtoa_r+0x648>)
 8008f30:	f7f7 fb62 	bl	80005f8 <__aeabi_dmul>
 8008f34:	4680      	mov	r8, r0
 8008f36:	4689      	mov	r9, r1
 8008f38:	e7bd      	b.n	8008eb6 <_dtoa_r+0x5b6>
 8008f3a:	bf00      	nop
 8008f3c:	0800d4a0 	.word	0x0800d4a0
 8008f40:	0800d478 	.word	0x0800d478
 8008f44:	3ff00000 	.word	0x3ff00000
 8008f48:	40240000 	.word	0x40240000
 8008f4c:	401c0000 	.word	0x401c0000
 8008f50:	40140000 	.word	0x40140000
 8008f54:	3fe00000 	.word	0x3fe00000
 8008f58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f5c:	9d00      	ldr	r5, [sp, #0]
 8008f5e:	4642      	mov	r2, r8
 8008f60:	464b      	mov	r3, r9
 8008f62:	4630      	mov	r0, r6
 8008f64:	4639      	mov	r1, r7
 8008f66:	f7f7 fc71 	bl	800084c <__aeabi_ddiv>
 8008f6a:	f7f7 fdf5 	bl	8000b58 <__aeabi_d2iz>
 8008f6e:	9001      	str	r0, [sp, #4]
 8008f70:	f7f7 fad8 	bl	8000524 <__aeabi_i2d>
 8008f74:	4642      	mov	r2, r8
 8008f76:	464b      	mov	r3, r9
 8008f78:	f7f7 fb3e 	bl	80005f8 <__aeabi_dmul>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	4630      	mov	r0, r6
 8008f82:	4639      	mov	r1, r7
 8008f84:	f7f7 f980 	bl	8000288 <__aeabi_dsub>
 8008f88:	9e01      	ldr	r6, [sp, #4]
 8008f8a:	9f04      	ldr	r7, [sp, #16]
 8008f8c:	3630      	adds	r6, #48	; 0x30
 8008f8e:	f805 6b01 	strb.w	r6, [r5], #1
 8008f92:	9e00      	ldr	r6, [sp, #0]
 8008f94:	1bae      	subs	r6, r5, r6
 8008f96:	42b7      	cmp	r7, r6
 8008f98:	4602      	mov	r2, r0
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	d134      	bne.n	8009008 <_dtoa_r+0x708>
 8008f9e:	f7f7 f975 	bl	800028c <__adddf3>
 8008fa2:	4642      	mov	r2, r8
 8008fa4:	464b      	mov	r3, r9
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	460f      	mov	r7, r1
 8008faa:	f7f7 fdb5 	bl	8000b18 <__aeabi_dcmpgt>
 8008fae:	b9c8      	cbnz	r0, 8008fe4 <_dtoa_r+0x6e4>
 8008fb0:	4642      	mov	r2, r8
 8008fb2:	464b      	mov	r3, r9
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	4639      	mov	r1, r7
 8008fb8:	f7f7 fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fbc:	b110      	cbz	r0, 8008fc4 <_dtoa_r+0x6c4>
 8008fbe:	9b01      	ldr	r3, [sp, #4]
 8008fc0:	07db      	lsls	r3, r3, #31
 8008fc2:	d40f      	bmi.n	8008fe4 <_dtoa_r+0x6e4>
 8008fc4:	4651      	mov	r1, sl
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f000 fb18 	bl	80095fc <_Bfree>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fd0:	702b      	strb	r3, [r5, #0]
 8008fd2:	f10b 0301 	add.w	r3, fp, #1
 8008fd6:	6013      	str	r3, [r2, #0]
 8008fd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f43f ace2 	beq.w	80089a4 <_dtoa_r+0xa4>
 8008fe0:	601d      	str	r5, [r3, #0]
 8008fe2:	e4df      	b.n	80089a4 <_dtoa_r+0xa4>
 8008fe4:	465f      	mov	r7, fp
 8008fe6:	462b      	mov	r3, r5
 8008fe8:	461d      	mov	r5, r3
 8008fea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fee:	2a39      	cmp	r2, #57	; 0x39
 8008ff0:	d106      	bne.n	8009000 <_dtoa_r+0x700>
 8008ff2:	9a00      	ldr	r2, [sp, #0]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d1f7      	bne.n	8008fe8 <_dtoa_r+0x6e8>
 8008ff8:	9900      	ldr	r1, [sp, #0]
 8008ffa:	2230      	movs	r2, #48	; 0x30
 8008ffc:	3701      	adds	r7, #1
 8008ffe:	700a      	strb	r2, [r1, #0]
 8009000:	781a      	ldrb	r2, [r3, #0]
 8009002:	3201      	adds	r2, #1
 8009004:	701a      	strb	r2, [r3, #0]
 8009006:	e790      	b.n	8008f2a <_dtoa_r+0x62a>
 8009008:	4ba3      	ldr	r3, [pc, #652]	; (8009298 <_dtoa_r+0x998>)
 800900a:	2200      	movs	r2, #0
 800900c:	f7f7 faf4 	bl	80005f8 <__aeabi_dmul>
 8009010:	2200      	movs	r2, #0
 8009012:	2300      	movs	r3, #0
 8009014:	4606      	mov	r6, r0
 8009016:	460f      	mov	r7, r1
 8009018:	f7f7 fd56 	bl	8000ac8 <__aeabi_dcmpeq>
 800901c:	2800      	cmp	r0, #0
 800901e:	d09e      	beq.n	8008f5e <_dtoa_r+0x65e>
 8009020:	e7d0      	b.n	8008fc4 <_dtoa_r+0x6c4>
 8009022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009024:	2a00      	cmp	r2, #0
 8009026:	f000 80ca 	beq.w	80091be <_dtoa_r+0x8be>
 800902a:	9a07      	ldr	r2, [sp, #28]
 800902c:	2a01      	cmp	r2, #1
 800902e:	f300 80ad 	bgt.w	800918c <_dtoa_r+0x88c>
 8009032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009034:	2a00      	cmp	r2, #0
 8009036:	f000 80a5 	beq.w	8009184 <_dtoa_r+0x884>
 800903a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800903e:	9e08      	ldr	r6, [sp, #32]
 8009040:	9d05      	ldr	r5, [sp, #20]
 8009042:	9a05      	ldr	r2, [sp, #20]
 8009044:	441a      	add	r2, r3
 8009046:	9205      	str	r2, [sp, #20]
 8009048:	9a06      	ldr	r2, [sp, #24]
 800904a:	2101      	movs	r1, #1
 800904c:	441a      	add	r2, r3
 800904e:	4620      	mov	r0, r4
 8009050:	9206      	str	r2, [sp, #24]
 8009052:	f000 fb89 	bl	8009768 <__i2b>
 8009056:	4607      	mov	r7, r0
 8009058:	b165      	cbz	r5, 8009074 <_dtoa_r+0x774>
 800905a:	9b06      	ldr	r3, [sp, #24]
 800905c:	2b00      	cmp	r3, #0
 800905e:	dd09      	ble.n	8009074 <_dtoa_r+0x774>
 8009060:	42ab      	cmp	r3, r5
 8009062:	9a05      	ldr	r2, [sp, #20]
 8009064:	bfa8      	it	ge
 8009066:	462b      	movge	r3, r5
 8009068:	1ad2      	subs	r2, r2, r3
 800906a:	9205      	str	r2, [sp, #20]
 800906c:	9a06      	ldr	r2, [sp, #24]
 800906e:	1aed      	subs	r5, r5, r3
 8009070:	1ad3      	subs	r3, r2, r3
 8009072:	9306      	str	r3, [sp, #24]
 8009074:	9b08      	ldr	r3, [sp, #32]
 8009076:	b1f3      	cbz	r3, 80090b6 <_dtoa_r+0x7b6>
 8009078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800907a:	2b00      	cmp	r3, #0
 800907c:	f000 80a3 	beq.w	80091c6 <_dtoa_r+0x8c6>
 8009080:	2e00      	cmp	r6, #0
 8009082:	dd10      	ble.n	80090a6 <_dtoa_r+0x7a6>
 8009084:	4639      	mov	r1, r7
 8009086:	4632      	mov	r2, r6
 8009088:	4620      	mov	r0, r4
 800908a:	f000 fc2d 	bl	80098e8 <__pow5mult>
 800908e:	4652      	mov	r2, sl
 8009090:	4601      	mov	r1, r0
 8009092:	4607      	mov	r7, r0
 8009094:	4620      	mov	r0, r4
 8009096:	f000 fb7d 	bl	8009794 <__multiply>
 800909a:	4651      	mov	r1, sl
 800909c:	4680      	mov	r8, r0
 800909e:	4620      	mov	r0, r4
 80090a0:	f000 faac 	bl	80095fc <_Bfree>
 80090a4:	46c2      	mov	sl, r8
 80090a6:	9b08      	ldr	r3, [sp, #32]
 80090a8:	1b9a      	subs	r2, r3, r6
 80090aa:	d004      	beq.n	80090b6 <_dtoa_r+0x7b6>
 80090ac:	4651      	mov	r1, sl
 80090ae:	4620      	mov	r0, r4
 80090b0:	f000 fc1a 	bl	80098e8 <__pow5mult>
 80090b4:	4682      	mov	sl, r0
 80090b6:	2101      	movs	r1, #1
 80090b8:	4620      	mov	r0, r4
 80090ba:	f000 fb55 	bl	8009768 <__i2b>
 80090be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	4606      	mov	r6, r0
 80090c4:	f340 8081 	ble.w	80091ca <_dtoa_r+0x8ca>
 80090c8:	461a      	mov	r2, r3
 80090ca:	4601      	mov	r1, r0
 80090cc:	4620      	mov	r0, r4
 80090ce:	f000 fc0b 	bl	80098e8 <__pow5mult>
 80090d2:	9b07      	ldr	r3, [sp, #28]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	4606      	mov	r6, r0
 80090d8:	dd7a      	ble.n	80091d0 <_dtoa_r+0x8d0>
 80090da:	f04f 0800 	mov.w	r8, #0
 80090de:	6933      	ldr	r3, [r6, #16]
 80090e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80090e4:	6918      	ldr	r0, [r3, #16]
 80090e6:	f000 faf1 	bl	80096cc <__hi0bits>
 80090ea:	f1c0 0020 	rsb	r0, r0, #32
 80090ee:	9b06      	ldr	r3, [sp, #24]
 80090f0:	4418      	add	r0, r3
 80090f2:	f010 001f 	ands.w	r0, r0, #31
 80090f6:	f000 8094 	beq.w	8009222 <_dtoa_r+0x922>
 80090fa:	f1c0 0320 	rsb	r3, r0, #32
 80090fe:	2b04      	cmp	r3, #4
 8009100:	f340 8085 	ble.w	800920e <_dtoa_r+0x90e>
 8009104:	9b05      	ldr	r3, [sp, #20]
 8009106:	f1c0 001c 	rsb	r0, r0, #28
 800910a:	4403      	add	r3, r0
 800910c:	9305      	str	r3, [sp, #20]
 800910e:	9b06      	ldr	r3, [sp, #24]
 8009110:	4403      	add	r3, r0
 8009112:	4405      	add	r5, r0
 8009114:	9306      	str	r3, [sp, #24]
 8009116:	9b05      	ldr	r3, [sp, #20]
 8009118:	2b00      	cmp	r3, #0
 800911a:	dd05      	ble.n	8009128 <_dtoa_r+0x828>
 800911c:	4651      	mov	r1, sl
 800911e:	461a      	mov	r2, r3
 8009120:	4620      	mov	r0, r4
 8009122:	f000 fc3b 	bl	800999c <__lshift>
 8009126:	4682      	mov	sl, r0
 8009128:	9b06      	ldr	r3, [sp, #24]
 800912a:	2b00      	cmp	r3, #0
 800912c:	dd05      	ble.n	800913a <_dtoa_r+0x83a>
 800912e:	4631      	mov	r1, r6
 8009130:	461a      	mov	r2, r3
 8009132:	4620      	mov	r0, r4
 8009134:	f000 fc32 	bl	800999c <__lshift>
 8009138:	4606      	mov	r6, r0
 800913a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800913c:	2b00      	cmp	r3, #0
 800913e:	d072      	beq.n	8009226 <_dtoa_r+0x926>
 8009140:	4631      	mov	r1, r6
 8009142:	4650      	mov	r0, sl
 8009144:	f000 fc96 	bl	8009a74 <__mcmp>
 8009148:	2800      	cmp	r0, #0
 800914a:	da6c      	bge.n	8009226 <_dtoa_r+0x926>
 800914c:	2300      	movs	r3, #0
 800914e:	4651      	mov	r1, sl
 8009150:	220a      	movs	r2, #10
 8009152:	4620      	mov	r0, r4
 8009154:	f000 fa74 	bl	8009640 <__multadd>
 8009158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800915a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800915e:	4682      	mov	sl, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	f000 81b0 	beq.w	80094c6 <_dtoa_r+0xbc6>
 8009166:	2300      	movs	r3, #0
 8009168:	4639      	mov	r1, r7
 800916a:	220a      	movs	r2, #10
 800916c:	4620      	mov	r0, r4
 800916e:	f000 fa67 	bl	8009640 <__multadd>
 8009172:	9b01      	ldr	r3, [sp, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	4607      	mov	r7, r0
 8009178:	f300 8096 	bgt.w	80092a8 <_dtoa_r+0x9a8>
 800917c:	9b07      	ldr	r3, [sp, #28]
 800917e:	2b02      	cmp	r3, #2
 8009180:	dc59      	bgt.n	8009236 <_dtoa_r+0x936>
 8009182:	e091      	b.n	80092a8 <_dtoa_r+0x9a8>
 8009184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009186:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800918a:	e758      	b.n	800903e <_dtoa_r+0x73e>
 800918c:	9b04      	ldr	r3, [sp, #16]
 800918e:	1e5e      	subs	r6, r3, #1
 8009190:	9b08      	ldr	r3, [sp, #32]
 8009192:	42b3      	cmp	r3, r6
 8009194:	bfbf      	itttt	lt
 8009196:	9b08      	ldrlt	r3, [sp, #32]
 8009198:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800919a:	9608      	strlt	r6, [sp, #32]
 800919c:	1af3      	sublt	r3, r6, r3
 800919e:	bfb4      	ite	lt
 80091a0:	18d2      	addlt	r2, r2, r3
 80091a2:	1b9e      	subge	r6, r3, r6
 80091a4:	9b04      	ldr	r3, [sp, #16]
 80091a6:	bfbc      	itt	lt
 80091a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80091aa:	2600      	movlt	r6, #0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	bfb7      	itett	lt
 80091b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80091b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80091b8:	1a9d      	sublt	r5, r3, r2
 80091ba:	2300      	movlt	r3, #0
 80091bc:	e741      	b.n	8009042 <_dtoa_r+0x742>
 80091be:	9e08      	ldr	r6, [sp, #32]
 80091c0:	9d05      	ldr	r5, [sp, #20]
 80091c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80091c4:	e748      	b.n	8009058 <_dtoa_r+0x758>
 80091c6:	9a08      	ldr	r2, [sp, #32]
 80091c8:	e770      	b.n	80090ac <_dtoa_r+0x7ac>
 80091ca:	9b07      	ldr	r3, [sp, #28]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	dc19      	bgt.n	8009204 <_dtoa_r+0x904>
 80091d0:	9b02      	ldr	r3, [sp, #8]
 80091d2:	b9bb      	cbnz	r3, 8009204 <_dtoa_r+0x904>
 80091d4:	9b03      	ldr	r3, [sp, #12]
 80091d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091da:	b99b      	cbnz	r3, 8009204 <_dtoa_r+0x904>
 80091dc:	9b03      	ldr	r3, [sp, #12]
 80091de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091e2:	0d1b      	lsrs	r3, r3, #20
 80091e4:	051b      	lsls	r3, r3, #20
 80091e6:	b183      	cbz	r3, 800920a <_dtoa_r+0x90a>
 80091e8:	9b05      	ldr	r3, [sp, #20]
 80091ea:	3301      	adds	r3, #1
 80091ec:	9305      	str	r3, [sp, #20]
 80091ee:	9b06      	ldr	r3, [sp, #24]
 80091f0:	3301      	adds	r3, #1
 80091f2:	9306      	str	r3, [sp, #24]
 80091f4:	f04f 0801 	mov.w	r8, #1
 80091f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f47f af6f 	bne.w	80090de <_dtoa_r+0x7de>
 8009200:	2001      	movs	r0, #1
 8009202:	e774      	b.n	80090ee <_dtoa_r+0x7ee>
 8009204:	f04f 0800 	mov.w	r8, #0
 8009208:	e7f6      	b.n	80091f8 <_dtoa_r+0x8f8>
 800920a:	4698      	mov	r8, r3
 800920c:	e7f4      	b.n	80091f8 <_dtoa_r+0x8f8>
 800920e:	d082      	beq.n	8009116 <_dtoa_r+0x816>
 8009210:	9a05      	ldr	r2, [sp, #20]
 8009212:	331c      	adds	r3, #28
 8009214:	441a      	add	r2, r3
 8009216:	9205      	str	r2, [sp, #20]
 8009218:	9a06      	ldr	r2, [sp, #24]
 800921a:	441a      	add	r2, r3
 800921c:	441d      	add	r5, r3
 800921e:	9206      	str	r2, [sp, #24]
 8009220:	e779      	b.n	8009116 <_dtoa_r+0x816>
 8009222:	4603      	mov	r3, r0
 8009224:	e7f4      	b.n	8009210 <_dtoa_r+0x910>
 8009226:	9b04      	ldr	r3, [sp, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	dc37      	bgt.n	800929c <_dtoa_r+0x99c>
 800922c:	9b07      	ldr	r3, [sp, #28]
 800922e:	2b02      	cmp	r3, #2
 8009230:	dd34      	ble.n	800929c <_dtoa_r+0x99c>
 8009232:	9b04      	ldr	r3, [sp, #16]
 8009234:	9301      	str	r3, [sp, #4]
 8009236:	9b01      	ldr	r3, [sp, #4]
 8009238:	b963      	cbnz	r3, 8009254 <_dtoa_r+0x954>
 800923a:	4631      	mov	r1, r6
 800923c:	2205      	movs	r2, #5
 800923e:	4620      	mov	r0, r4
 8009240:	f000 f9fe 	bl	8009640 <__multadd>
 8009244:	4601      	mov	r1, r0
 8009246:	4606      	mov	r6, r0
 8009248:	4650      	mov	r0, sl
 800924a:	f000 fc13 	bl	8009a74 <__mcmp>
 800924e:	2800      	cmp	r0, #0
 8009250:	f73f adbb 	bgt.w	8008dca <_dtoa_r+0x4ca>
 8009254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009256:	9d00      	ldr	r5, [sp, #0]
 8009258:	ea6f 0b03 	mvn.w	fp, r3
 800925c:	f04f 0800 	mov.w	r8, #0
 8009260:	4631      	mov	r1, r6
 8009262:	4620      	mov	r0, r4
 8009264:	f000 f9ca 	bl	80095fc <_Bfree>
 8009268:	2f00      	cmp	r7, #0
 800926a:	f43f aeab 	beq.w	8008fc4 <_dtoa_r+0x6c4>
 800926e:	f1b8 0f00 	cmp.w	r8, #0
 8009272:	d005      	beq.n	8009280 <_dtoa_r+0x980>
 8009274:	45b8      	cmp	r8, r7
 8009276:	d003      	beq.n	8009280 <_dtoa_r+0x980>
 8009278:	4641      	mov	r1, r8
 800927a:	4620      	mov	r0, r4
 800927c:	f000 f9be 	bl	80095fc <_Bfree>
 8009280:	4639      	mov	r1, r7
 8009282:	4620      	mov	r0, r4
 8009284:	f000 f9ba 	bl	80095fc <_Bfree>
 8009288:	e69c      	b.n	8008fc4 <_dtoa_r+0x6c4>
 800928a:	2600      	movs	r6, #0
 800928c:	4637      	mov	r7, r6
 800928e:	e7e1      	b.n	8009254 <_dtoa_r+0x954>
 8009290:	46bb      	mov	fp, r7
 8009292:	4637      	mov	r7, r6
 8009294:	e599      	b.n	8008dca <_dtoa_r+0x4ca>
 8009296:	bf00      	nop
 8009298:	40240000 	.word	0x40240000
 800929c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f000 80c8 	beq.w	8009434 <_dtoa_r+0xb34>
 80092a4:	9b04      	ldr	r3, [sp, #16]
 80092a6:	9301      	str	r3, [sp, #4]
 80092a8:	2d00      	cmp	r5, #0
 80092aa:	dd05      	ble.n	80092b8 <_dtoa_r+0x9b8>
 80092ac:	4639      	mov	r1, r7
 80092ae:	462a      	mov	r2, r5
 80092b0:	4620      	mov	r0, r4
 80092b2:	f000 fb73 	bl	800999c <__lshift>
 80092b6:	4607      	mov	r7, r0
 80092b8:	f1b8 0f00 	cmp.w	r8, #0
 80092bc:	d05b      	beq.n	8009376 <_dtoa_r+0xa76>
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	4620      	mov	r0, r4
 80092c2:	f000 f95b 	bl	800957c <_Balloc>
 80092c6:	4605      	mov	r5, r0
 80092c8:	b928      	cbnz	r0, 80092d6 <_dtoa_r+0x9d6>
 80092ca:	4b83      	ldr	r3, [pc, #524]	; (80094d8 <_dtoa_r+0xbd8>)
 80092cc:	4602      	mov	r2, r0
 80092ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80092d2:	f7ff bb2e 	b.w	8008932 <_dtoa_r+0x32>
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	3202      	adds	r2, #2
 80092da:	0092      	lsls	r2, r2, #2
 80092dc:	f107 010c 	add.w	r1, r7, #12
 80092e0:	300c      	adds	r0, #12
 80092e2:	f7ff fa75 	bl	80087d0 <memcpy>
 80092e6:	2201      	movs	r2, #1
 80092e8:	4629      	mov	r1, r5
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 fb56 	bl	800999c <__lshift>
 80092f0:	9b00      	ldr	r3, [sp, #0]
 80092f2:	3301      	adds	r3, #1
 80092f4:	9304      	str	r3, [sp, #16]
 80092f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092fa:	4413      	add	r3, r2
 80092fc:	9308      	str	r3, [sp, #32]
 80092fe:	9b02      	ldr	r3, [sp, #8]
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	46b8      	mov	r8, r7
 8009306:	9306      	str	r3, [sp, #24]
 8009308:	4607      	mov	r7, r0
 800930a:	9b04      	ldr	r3, [sp, #16]
 800930c:	4631      	mov	r1, r6
 800930e:	3b01      	subs	r3, #1
 8009310:	4650      	mov	r0, sl
 8009312:	9301      	str	r3, [sp, #4]
 8009314:	f7ff fa6a 	bl	80087ec <quorem>
 8009318:	4641      	mov	r1, r8
 800931a:	9002      	str	r0, [sp, #8]
 800931c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009320:	4650      	mov	r0, sl
 8009322:	f000 fba7 	bl	8009a74 <__mcmp>
 8009326:	463a      	mov	r2, r7
 8009328:	9005      	str	r0, [sp, #20]
 800932a:	4631      	mov	r1, r6
 800932c:	4620      	mov	r0, r4
 800932e:	f000 fbbd 	bl	8009aac <__mdiff>
 8009332:	68c2      	ldr	r2, [r0, #12]
 8009334:	4605      	mov	r5, r0
 8009336:	bb02      	cbnz	r2, 800937a <_dtoa_r+0xa7a>
 8009338:	4601      	mov	r1, r0
 800933a:	4650      	mov	r0, sl
 800933c:	f000 fb9a 	bl	8009a74 <__mcmp>
 8009340:	4602      	mov	r2, r0
 8009342:	4629      	mov	r1, r5
 8009344:	4620      	mov	r0, r4
 8009346:	9209      	str	r2, [sp, #36]	; 0x24
 8009348:	f000 f958 	bl	80095fc <_Bfree>
 800934c:	9b07      	ldr	r3, [sp, #28]
 800934e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009350:	9d04      	ldr	r5, [sp, #16]
 8009352:	ea43 0102 	orr.w	r1, r3, r2
 8009356:	9b06      	ldr	r3, [sp, #24]
 8009358:	4319      	orrs	r1, r3
 800935a:	d110      	bne.n	800937e <_dtoa_r+0xa7e>
 800935c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009360:	d029      	beq.n	80093b6 <_dtoa_r+0xab6>
 8009362:	9b05      	ldr	r3, [sp, #20]
 8009364:	2b00      	cmp	r3, #0
 8009366:	dd02      	ble.n	800936e <_dtoa_r+0xa6e>
 8009368:	9b02      	ldr	r3, [sp, #8]
 800936a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800936e:	9b01      	ldr	r3, [sp, #4]
 8009370:	f883 9000 	strb.w	r9, [r3]
 8009374:	e774      	b.n	8009260 <_dtoa_r+0x960>
 8009376:	4638      	mov	r0, r7
 8009378:	e7ba      	b.n	80092f0 <_dtoa_r+0x9f0>
 800937a:	2201      	movs	r2, #1
 800937c:	e7e1      	b.n	8009342 <_dtoa_r+0xa42>
 800937e:	9b05      	ldr	r3, [sp, #20]
 8009380:	2b00      	cmp	r3, #0
 8009382:	db04      	blt.n	800938e <_dtoa_r+0xa8e>
 8009384:	9907      	ldr	r1, [sp, #28]
 8009386:	430b      	orrs	r3, r1
 8009388:	9906      	ldr	r1, [sp, #24]
 800938a:	430b      	orrs	r3, r1
 800938c:	d120      	bne.n	80093d0 <_dtoa_r+0xad0>
 800938e:	2a00      	cmp	r2, #0
 8009390:	dded      	ble.n	800936e <_dtoa_r+0xa6e>
 8009392:	4651      	mov	r1, sl
 8009394:	2201      	movs	r2, #1
 8009396:	4620      	mov	r0, r4
 8009398:	f000 fb00 	bl	800999c <__lshift>
 800939c:	4631      	mov	r1, r6
 800939e:	4682      	mov	sl, r0
 80093a0:	f000 fb68 	bl	8009a74 <__mcmp>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	dc03      	bgt.n	80093b0 <_dtoa_r+0xab0>
 80093a8:	d1e1      	bne.n	800936e <_dtoa_r+0xa6e>
 80093aa:	f019 0f01 	tst.w	r9, #1
 80093ae:	d0de      	beq.n	800936e <_dtoa_r+0xa6e>
 80093b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80093b4:	d1d8      	bne.n	8009368 <_dtoa_r+0xa68>
 80093b6:	9a01      	ldr	r2, [sp, #4]
 80093b8:	2339      	movs	r3, #57	; 0x39
 80093ba:	7013      	strb	r3, [r2, #0]
 80093bc:	462b      	mov	r3, r5
 80093be:	461d      	mov	r5, r3
 80093c0:	3b01      	subs	r3, #1
 80093c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80093c6:	2a39      	cmp	r2, #57	; 0x39
 80093c8:	d06c      	beq.n	80094a4 <_dtoa_r+0xba4>
 80093ca:	3201      	adds	r2, #1
 80093cc:	701a      	strb	r2, [r3, #0]
 80093ce:	e747      	b.n	8009260 <_dtoa_r+0x960>
 80093d0:	2a00      	cmp	r2, #0
 80093d2:	dd07      	ble.n	80093e4 <_dtoa_r+0xae4>
 80093d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80093d8:	d0ed      	beq.n	80093b6 <_dtoa_r+0xab6>
 80093da:	9a01      	ldr	r2, [sp, #4]
 80093dc:	f109 0301 	add.w	r3, r9, #1
 80093e0:	7013      	strb	r3, [r2, #0]
 80093e2:	e73d      	b.n	8009260 <_dtoa_r+0x960>
 80093e4:	9b04      	ldr	r3, [sp, #16]
 80093e6:	9a08      	ldr	r2, [sp, #32]
 80093e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d043      	beq.n	8009478 <_dtoa_r+0xb78>
 80093f0:	4651      	mov	r1, sl
 80093f2:	2300      	movs	r3, #0
 80093f4:	220a      	movs	r2, #10
 80093f6:	4620      	mov	r0, r4
 80093f8:	f000 f922 	bl	8009640 <__multadd>
 80093fc:	45b8      	cmp	r8, r7
 80093fe:	4682      	mov	sl, r0
 8009400:	f04f 0300 	mov.w	r3, #0
 8009404:	f04f 020a 	mov.w	r2, #10
 8009408:	4641      	mov	r1, r8
 800940a:	4620      	mov	r0, r4
 800940c:	d107      	bne.n	800941e <_dtoa_r+0xb1e>
 800940e:	f000 f917 	bl	8009640 <__multadd>
 8009412:	4680      	mov	r8, r0
 8009414:	4607      	mov	r7, r0
 8009416:	9b04      	ldr	r3, [sp, #16]
 8009418:	3301      	adds	r3, #1
 800941a:	9304      	str	r3, [sp, #16]
 800941c:	e775      	b.n	800930a <_dtoa_r+0xa0a>
 800941e:	f000 f90f 	bl	8009640 <__multadd>
 8009422:	4639      	mov	r1, r7
 8009424:	4680      	mov	r8, r0
 8009426:	2300      	movs	r3, #0
 8009428:	220a      	movs	r2, #10
 800942a:	4620      	mov	r0, r4
 800942c:	f000 f908 	bl	8009640 <__multadd>
 8009430:	4607      	mov	r7, r0
 8009432:	e7f0      	b.n	8009416 <_dtoa_r+0xb16>
 8009434:	9b04      	ldr	r3, [sp, #16]
 8009436:	9301      	str	r3, [sp, #4]
 8009438:	9d00      	ldr	r5, [sp, #0]
 800943a:	4631      	mov	r1, r6
 800943c:	4650      	mov	r0, sl
 800943e:	f7ff f9d5 	bl	80087ec <quorem>
 8009442:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009446:	9b00      	ldr	r3, [sp, #0]
 8009448:	f805 9b01 	strb.w	r9, [r5], #1
 800944c:	1aea      	subs	r2, r5, r3
 800944e:	9b01      	ldr	r3, [sp, #4]
 8009450:	4293      	cmp	r3, r2
 8009452:	dd07      	ble.n	8009464 <_dtoa_r+0xb64>
 8009454:	4651      	mov	r1, sl
 8009456:	2300      	movs	r3, #0
 8009458:	220a      	movs	r2, #10
 800945a:	4620      	mov	r0, r4
 800945c:	f000 f8f0 	bl	8009640 <__multadd>
 8009460:	4682      	mov	sl, r0
 8009462:	e7ea      	b.n	800943a <_dtoa_r+0xb3a>
 8009464:	9b01      	ldr	r3, [sp, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	bfc8      	it	gt
 800946a:	461d      	movgt	r5, r3
 800946c:	9b00      	ldr	r3, [sp, #0]
 800946e:	bfd8      	it	le
 8009470:	2501      	movle	r5, #1
 8009472:	441d      	add	r5, r3
 8009474:	f04f 0800 	mov.w	r8, #0
 8009478:	4651      	mov	r1, sl
 800947a:	2201      	movs	r2, #1
 800947c:	4620      	mov	r0, r4
 800947e:	f000 fa8d 	bl	800999c <__lshift>
 8009482:	4631      	mov	r1, r6
 8009484:	4682      	mov	sl, r0
 8009486:	f000 faf5 	bl	8009a74 <__mcmp>
 800948a:	2800      	cmp	r0, #0
 800948c:	dc96      	bgt.n	80093bc <_dtoa_r+0xabc>
 800948e:	d102      	bne.n	8009496 <_dtoa_r+0xb96>
 8009490:	f019 0f01 	tst.w	r9, #1
 8009494:	d192      	bne.n	80093bc <_dtoa_r+0xabc>
 8009496:	462b      	mov	r3, r5
 8009498:	461d      	mov	r5, r3
 800949a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800949e:	2a30      	cmp	r2, #48	; 0x30
 80094a0:	d0fa      	beq.n	8009498 <_dtoa_r+0xb98>
 80094a2:	e6dd      	b.n	8009260 <_dtoa_r+0x960>
 80094a4:	9a00      	ldr	r2, [sp, #0]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d189      	bne.n	80093be <_dtoa_r+0xabe>
 80094aa:	f10b 0b01 	add.w	fp, fp, #1
 80094ae:	2331      	movs	r3, #49	; 0x31
 80094b0:	e796      	b.n	80093e0 <_dtoa_r+0xae0>
 80094b2:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <_dtoa_r+0xbdc>)
 80094b4:	f7ff ba99 	b.w	80089ea <_dtoa_r+0xea>
 80094b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f47f aa6d 	bne.w	800899a <_dtoa_r+0x9a>
 80094c0:	4b07      	ldr	r3, [pc, #28]	; (80094e0 <_dtoa_r+0xbe0>)
 80094c2:	f7ff ba92 	b.w	80089ea <_dtoa_r+0xea>
 80094c6:	9b01      	ldr	r3, [sp, #4]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	dcb5      	bgt.n	8009438 <_dtoa_r+0xb38>
 80094cc:	9b07      	ldr	r3, [sp, #28]
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	f73f aeb1 	bgt.w	8009236 <_dtoa_r+0x936>
 80094d4:	e7b0      	b.n	8009438 <_dtoa_r+0xb38>
 80094d6:	bf00      	nop
 80094d8:	0800d40c 	.word	0x0800d40c
 80094dc:	0800d36c 	.word	0x0800d36c
 80094e0:	0800d390 	.word	0x0800d390

080094e4 <_free_r>:
 80094e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094e6:	2900      	cmp	r1, #0
 80094e8:	d044      	beq.n	8009574 <_free_r+0x90>
 80094ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094ee:	9001      	str	r0, [sp, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f1a1 0404 	sub.w	r4, r1, #4
 80094f6:	bfb8      	it	lt
 80094f8:	18e4      	addlt	r4, r4, r3
 80094fa:	f7fe fae3 	bl	8007ac4 <__malloc_lock>
 80094fe:	4a1e      	ldr	r2, [pc, #120]	; (8009578 <_free_r+0x94>)
 8009500:	9801      	ldr	r0, [sp, #4]
 8009502:	6813      	ldr	r3, [r2, #0]
 8009504:	b933      	cbnz	r3, 8009514 <_free_r+0x30>
 8009506:	6063      	str	r3, [r4, #4]
 8009508:	6014      	str	r4, [r2, #0]
 800950a:	b003      	add	sp, #12
 800950c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009510:	f7fe bade 	b.w	8007ad0 <__malloc_unlock>
 8009514:	42a3      	cmp	r3, r4
 8009516:	d908      	bls.n	800952a <_free_r+0x46>
 8009518:	6825      	ldr	r5, [r4, #0]
 800951a:	1961      	adds	r1, r4, r5
 800951c:	428b      	cmp	r3, r1
 800951e:	bf01      	itttt	eq
 8009520:	6819      	ldreq	r1, [r3, #0]
 8009522:	685b      	ldreq	r3, [r3, #4]
 8009524:	1949      	addeq	r1, r1, r5
 8009526:	6021      	streq	r1, [r4, #0]
 8009528:	e7ed      	b.n	8009506 <_free_r+0x22>
 800952a:	461a      	mov	r2, r3
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	b10b      	cbz	r3, 8009534 <_free_r+0x50>
 8009530:	42a3      	cmp	r3, r4
 8009532:	d9fa      	bls.n	800952a <_free_r+0x46>
 8009534:	6811      	ldr	r1, [r2, #0]
 8009536:	1855      	adds	r5, r2, r1
 8009538:	42a5      	cmp	r5, r4
 800953a:	d10b      	bne.n	8009554 <_free_r+0x70>
 800953c:	6824      	ldr	r4, [r4, #0]
 800953e:	4421      	add	r1, r4
 8009540:	1854      	adds	r4, r2, r1
 8009542:	42a3      	cmp	r3, r4
 8009544:	6011      	str	r1, [r2, #0]
 8009546:	d1e0      	bne.n	800950a <_free_r+0x26>
 8009548:	681c      	ldr	r4, [r3, #0]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	6053      	str	r3, [r2, #4]
 800954e:	440c      	add	r4, r1
 8009550:	6014      	str	r4, [r2, #0]
 8009552:	e7da      	b.n	800950a <_free_r+0x26>
 8009554:	d902      	bls.n	800955c <_free_r+0x78>
 8009556:	230c      	movs	r3, #12
 8009558:	6003      	str	r3, [r0, #0]
 800955a:	e7d6      	b.n	800950a <_free_r+0x26>
 800955c:	6825      	ldr	r5, [r4, #0]
 800955e:	1961      	adds	r1, r4, r5
 8009560:	428b      	cmp	r3, r1
 8009562:	bf04      	itt	eq
 8009564:	6819      	ldreq	r1, [r3, #0]
 8009566:	685b      	ldreq	r3, [r3, #4]
 8009568:	6063      	str	r3, [r4, #4]
 800956a:	bf04      	itt	eq
 800956c:	1949      	addeq	r1, r1, r5
 800956e:	6021      	streq	r1, [r4, #0]
 8009570:	6054      	str	r4, [r2, #4]
 8009572:	e7ca      	b.n	800950a <_free_r+0x26>
 8009574:	b003      	add	sp, #12
 8009576:	bd30      	pop	{r4, r5, pc}
 8009578:	2000082c 	.word	0x2000082c

0800957c <_Balloc>:
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	69c6      	ldr	r6, [r0, #28]
 8009580:	4604      	mov	r4, r0
 8009582:	460d      	mov	r5, r1
 8009584:	b976      	cbnz	r6, 80095a4 <_Balloc+0x28>
 8009586:	2010      	movs	r0, #16
 8009588:	f7fe f9f4 	bl	8007974 <malloc>
 800958c:	4602      	mov	r2, r0
 800958e:	61e0      	str	r0, [r4, #28]
 8009590:	b920      	cbnz	r0, 800959c <_Balloc+0x20>
 8009592:	4b18      	ldr	r3, [pc, #96]	; (80095f4 <_Balloc+0x78>)
 8009594:	4818      	ldr	r0, [pc, #96]	; (80095f8 <_Balloc+0x7c>)
 8009596:	216b      	movs	r1, #107	; 0x6b
 8009598:	f000 fd72 	bl	800a080 <__assert_func>
 800959c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095a0:	6006      	str	r6, [r0, #0]
 80095a2:	60c6      	str	r6, [r0, #12]
 80095a4:	69e6      	ldr	r6, [r4, #28]
 80095a6:	68f3      	ldr	r3, [r6, #12]
 80095a8:	b183      	cbz	r3, 80095cc <_Balloc+0x50>
 80095aa:	69e3      	ldr	r3, [r4, #28]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095b2:	b9b8      	cbnz	r0, 80095e4 <_Balloc+0x68>
 80095b4:	2101      	movs	r1, #1
 80095b6:	fa01 f605 	lsl.w	r6, r1, r5
 80095ba:	1d72      	adds	r2, r6, #5
 80095bc:	0092      	lsls	r2, r2, #2
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 fd7c 	bl	800a0bc <_calloc_r>
 80095c4:	b160      	cbz	r0, 80095e0 <_Balloc+0x64>
 80095c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095ca:	e00e      	b.n	80095ea <_Balloc+0x6e>
 80095cc:	2221      	movs	r2, #33	; 0x21
 80095ce:	2104      	movs	r1, #4
 80095d0:	4620      	mov	r0, r4
 80095d2:	f000 fd73 	bl	800a0bc <_calloc_r>
 80095d6:	69e3      	ldr	r3, [r4, #28]
 80095d8:	60f0      	str	r0, [r6, #12]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1e4      	bne.n	80095aa <_Balloc+0x2e>
 80095e0:	2000      	movs	r0, #0
 80095e2:	bd70      	pop	{r4, r5, r6, pc}
 80095e4:	6802      	ldr	r2, [r0, #0]
 80095e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80095ea:	2300      	movs	r3, #0
 80095ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80095f0:	e7f7      	b.n	80095e2 <_Balloc+0x66>
 80095f2:	bf00      	nop
 80095f4:	0800d39d 	.word	0x0800d39d
 80095f8:	0800d41d 	.word	0x0800d41d

080095fc <_Bfree>:
 80095fc:	b570      	push	{r4, r5, r6, lr}
 80095fe:	69c6      	ldr	r6, [r0, #28]
 8009600:	4605      	mov	r5, r0
 8009602:	460c      	mov	r4, r1
 8009604:	b976      	cbnz	r6, 8009624 <_Bfree+0x28>
 8009606:	2010      	movs	r0, #16
 8009608:	f7fe f9b4 	bl	8007974 <malloc>
 800960c:	4602      	mov	r2, r0
 800960e:	61e8      	str	r0, [r5, #28]
 8009610:	b920      	cbnz	r0, 800961c <_Bfree+0x20>
 8009612:	4b09      	ldr	r3, [pc, #36]	; (8009638 <_Bfree+0x3c>)
 8009614:	4809      	ldr	r0, [pc, #36]	; (800963c <_Bfree+0x40>)
 8009616:	218f      	movs	r1, #143	; 0x8f
 8009618:	f000 fd32 	bl	800a080 <__assert_func>
 800961c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009620:	6006      	str	r6, [r0, #0]
 8009622:	60c6      	str	r6, [r0, #12]
 8009624:	b13c      	cbz	r4, 8009636 <_Bfree+0x3a>
 8009626:	69eb      	ldr	r3, [r5, #28]
 8009628:	6862      	ldr	r2, [r4, #4]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009630:	6021      	str	r1, [r4, #0]
 8009632:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009636:	bd70      	pop	{r4, r5, r6, pc}
 8009638:	0800d39d 	.word	0x0800d39d
 800963c:	0800d41d 	.word	0x0800d41d

08009640 <__multadd>:
 8009640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009644:	690d      	ldr	r5, [r1, #16]
 8009646:	4607      	mov	r7, r0
 8009648:	460c      	mov	r4, r1
 800964a:	461e      	mov	r6, r3
 800964c:	f101 0c14 	add.w	ip, r1, #20
 8009650:	2000      	movs	r0, #0
 8009652:	f8dc 3000 	ldr.w	r3, [ip]
 8009656:	b299      	uxth	r1, r3
 8009658:	fb02 6101 	mla	r1, r2, r1, r6
 800965c:	0c1e      	lsrs	r6, r3, #16
 800965e:	0c0b      	lsrs	r3, r1, #16
 8009660:	fb02 3306 	mla	r3, r2, r6, r3
 8009664:	b289      	uxth	r1, r1
 8009666:	3001      	adds	r0, #1
 8009668:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800966c:	4285      	cmp	r5, r0
 800966e:	f84c 1b04 	str.w	r1, [ip], #4
 8009672:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009676:	dcec      	bgt.n	8009652 <__multadd+0x12>
 8009678:	b30e      	cbz	r6, 80096be <__multadd+0x7e>
 800967a:	68a3      	ldr	r3, [r4, #8]
 800967c:	42ab      	cmp	r3, r5
 800967e:	dc19      	bgt.n	80096b4 <__multadd+0x74>
 8009680:	6861      	ldr	r1, [r4, #4]
 8009682:	4638      	mov	r0, r7
 8009684:	3101      	adds	r1, #1
 8009686:	f7ff ff79 	bl	800957c <_Balloc>
 800968a:	4680      	mov	r8, r0
 800968c:	b928      	cbnz	r0, 800969a <__multadd+0x5a>
 800968e:	4602      	mov	r2, r0
 8009690:	4b0c      	ldr	r3, [pc, #48]	; (80096c4 <__multadd+0x84>)
 8009692:	480d      	ldr	r0, [pc, #52]	; (80096c8 <__multadd+0x88>)
 8009694:	21ba      	movs	r1, #186	; 0xba
 8009696:	f000 fcf3 	bl	800a080 <__assert_func>
 800969a:	6922      	ldr	r2, [r4, #16]
 800969c:	3202      	adds	r2, #2
 800969e:	f104 010c 	add.w	r1, r4, #12
 80096a2:	0092      	lsls	r2, r2, #2
 80096a4:	300c      	adds	r0, #12
 80096a6:	f7ff f893 	bl	80087d0 <memcpy>
 80096aa:	4621      	mov	r1, r4
 80096ac:	4638      	mov	r0, r7
 80096ae:	f7ff ffa5 	bl	80095fc <_Bfree>
 80096b2:	4644      	mov	r4, r8
 80096b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096b8:	3501      	adds	r5, #1
 80096ba:	615e      	str	r6, [r3, #20]
 80096bc:	6125      	str	r5, [r4, #16]
 80096be:	4620      	mov	r0, r4
 80096c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096c4:	0800d40c 	.word	0x0800d40c
 80096c8:	0800d41d 	.word	0x0800d41d

080096cc <__hi0bits>:
 80096cc:	0c03      	lsrs	r3, r0, #16
 80096ce:	041b      	lsls	r3, r3, #16
 80096d0:	b9d3      	cbnz	r3, 8009708 <__hi0bits+0x3c>
 80096d2:	0400      	lsls	r0, r0, #16
 80096d4:	2310      	movs	r3, #16
 80096d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80096da:	bf04      	itt	eq
 80096dc:	0200      	lsleq	r0, r0, #8
 80096de:	3308      	addeq	r3, #8
 80096e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80096e4:	bf04      	itt	eq
 80096e6:	0100      	lsleq	r0, r0, #4
 80096e8:	3304      	addeq	r3, #4
 80096ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80096ee:	bf04      	itt	eq
 80096f0:	0080      	lsleq	r0, r0, #2
 80096f2:	3302      	addeq	r3, #2
 80096f4:	2800      	cmp	r0, #0
 80096f6:	db05      	blt.n	8009704 <__hi0bits+0x38>
 80096f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80096fc:	f103 0301 	add.w	r3, r3, #1
 8009700:	bf08      	it	eq
 8009702:	2320      	moveq	r3, #32
 8009704:	4618      	mov	r0, r3
 8009706:	4770      	bx	lr
 8009708:	2300      	movs	r3, #0
 800970a:	e7e4      	b.n	80096d6 <__hi0bits+0xa>

0800970c <__lo0bits>:
 800970c:	6803      	ldr	r3, [r0, #0]
 800970e:	f013 0207 	ands.w	r2, r3, #7
 8009712:	d00c      	beq.n	800972e <__lo0bits+0x22>
 8009714:	07d9      	lsls	r1, r3, #31
 8009716:	d422      	bmi.n	800975e <__lo0bits+0x52>
 8009718:	079a      	lsls	r2, r3, #30
 800971a:	bf49      	itett	mi
 800971c:	085b      	lsrmi	r3, r3, #1
 800971e:	089b      	lsrpl	r3, r3, #2
 8009720:	6003      	strmi	r3, [r0, #0]
 8009722:	2201      	movmi	r2, #1
 8009724:	bf5c      	itt	pl
 8009726:	6003      	strpl	r3, [r0, #0]
 8009728:	2202      	movpl	r2, #2
 800972a:	4610      	mov	r0, r2
 800972c:	4770      	bx	lr
 800972e:	b299      	uxth	r1, r3
 8009730:	b909      	cbnz	r1, 8009736 <__lo0bits+0x2a>
 8009732:	0c1b      	lsrs	r3, r3, #16
 8009734:	2210      	movs	r2, #16
 8009736:	b2d9      	uxtb	r1, r3
 8009738:	b909      	cbnz	r1, 800973e <__lo0bits+0x32>
 800973a:	3208      	adds	r2, #8
 800973c:	0a1b      	lsrs	r3, r3, #8
 800973e:	0719      	lsls	r1, r3, #28
 8009740:	bf04      	itt	eq
 8009742:	091b      	lsreq	r3, r3, #4
 8009744:	3204      	addeq	r2, #4
 8009746:	0799      	lsls	r1, r3, #30
 8009748:	bf04      	itt	eq
 800974a:	089b      	lsreq	r3, r3, #2
 800974c:	3202      	addeq	r2, #2
 800974e:	07d9      	lsls	r1, r3, #31
 8009750:	d403      	bmi.n	800975a <__lo0bits+0x4e>
 8009752:	085b      	lsrs	r3, r3, #1
 8009754:	f102 0201 	add.w	r2, r2, #1
 8009758:	d003      	beq.n	8009762 <__lo0bits+0x56>
 800975a:	6003      	str	r3, [r0, #0]
 800975c:	e7e5      	b.n	800972a <__lo0bits+0x1e>
 800975e:	2200      	movs	r2, #0
 8009760:	e7e3      	b.n	800972a <__lo0bits+0x1e>
 8009762:	2220      	movs	r2, #32
 8009764:	e7e1      	b.n	800972a <__lo0bits+0x1e>
	...

08009768 <__i2b>:
 8009768:	b510      	push	{r4, lr}
 800976a:	460c      	mov	r4, r1
 800976c:	2101      	movs	r1, #1
 800976e:	f7ff ff05 	bl	800957c <_Balloc>
 8009772:	4602      	mov	r2, r0
 8009774:	b928      	cbnz	r0, 8009782 <__i2b+0x1a>
 8009776:	4b05      	ldr	r3, [pc, #20]	; (800978c <__i2b+0x24>)
 8009778:	4805      	ldr	r0, [pc, #20]	; (8009790 <__i2b+0x28>)
 800977a:	f240 1145 	movw	r1, #325	; 0x145
 800977e:	f000 fc7f 	bl	800a080 <__assert_func>
 8009782:	2301      	movs	r3, #1
 8009784:	6144      	str	r4, [r0, #20]
 8009786:	6103      	str	r3, [r0, #16]
 8009788:	bd10      	pop	{r4, pc}
 800978a:	bf00      	nop
 800978c:	0800d40c 	.word	0x0800d40c
 8009790:	0800d41d 	.word	0x0800d41d

08009794 <__multiply>:
 8009794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009798:	4691      	mov	r9, r2
 800979a:	690a      	ldr	r2, [r1, #16]
 800979c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	bfb8      	it	lt
 80097a4:	460b      	movlt	r3, r1
 80097a6:	460c      	mov	r4, r1
 80097a8:	bfbc      	itt	lt
 80097aa:	464c      	movlt	r4, r9
 80097ac:	4699      	movlt	r9, r3
 80097ae:	6927      	ldr	r7, [r4, #16]
 80097b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80097b4:	68a3      	ldr	r3, [r4, #8]
 80097b6:	6861      	ldr	r1, [r4, #4]
 80097b8:	eb07 060a 	add.w	r6, r7, sl
 80097bc:	42b3      	cmp	r3, r6
 80097be:	b085      	sub	sp, #20
 80097c0:	bfb8      	it	lt
 80097c2:	3101      	addlt	r1, #1
 80097c4:	f7ff feda 	bl	800957c <_Balloc>
 80097c8:	b930      	cbnz	r0, 80097d8 <__multiply+0x44>
 80097ca:	4602      	mov	r2, r0
 80097cc:	4b44      	ldr	r3, [pc, #272]	; (80098e0 <__multiply+0x14c>)
 80097ce:	4845      	ldr	r0, [pc, #276]	; (80098e4 <__multiply+0x150>)
 80097d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80097d4:	f000 fc54 	bl	800a080 <__assert_func>
 80097d8:	f100 0514 	add.w	r5, r0, #20
 80097dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80097e0:	462b      	mov	r3, r5
 80097e2:	2200      	movs	r2, #0
 80097e4:	4543      	cmp	r3, r8
 80097e6:	d321      	bcc.n	800982c <__multiply+0x98>
 80097e8:	f104 0314 	add.w	r3, r4, #20
 80097ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80097f0:	f109 0314 	add.w	r3, r9, #20
 80097f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80097f8:	9202      	str	r2, [sp, #8]
 80097fa:	1b3a      	subs	r2, r7, r4
 80097fc:	3a15      	subs	r2, #21
 80097fe:	f022 0203 	bic.w	r2, r2, #3
 8009802:	3204      	adds	r2, #4
 8009804:	f104 0115 	add.w	r1, r4, #21
 8009808:	428f      	cmp	r7, r1
 800980a:	bf38      	it	cc
 800980c:	2204      	movcc	r2, #4
 800980e:	9201      	str	r2, [sp, #4]
 8009810:	9a02      	ldr	r2, [sp, #8]
 8009812:	9303      	str	r3, [sp, #12]
 8009814:	429a      	cmp	r2, r3
 8009816:	d80c      	bhi.n	8009832 <__multiply+0x9e>
 8009818:	2e00      	cmp	r6, #0
 800981a:	dd03      	ble.n	8009824 <__multiply+0x90>
 800981c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009820:	2b00      	cmp	r3, #0
 8009822:	d05b      	beq.n	80098dc <__multiply+0x148>
 8009824:	6106      	str	r6, [r0, #16]
 8009826:	b005      	add	sp, #20
 8009828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982c:	f843 2b04 	str.w	r2, [r3], #4
 8009830:	e7d8      	b.n	80097e4 <__multiply+0x50>
 8009832:	f8b3 a000 	ldrh.w	sl, [r3]
 8009836:	f1ba 0f00 	cmp.w	sl, #0
 800983a:	d024      	beq.n	8009886 <__multiply+0xf2>
 800983c:	f104 0e14 	add.w	lr, r4, #20
 8009840:	46a9      	mov	r9, r5
 8009842:	f04f 0c00 	mov.w	ip, #0
 8009846:	f85e 2b04 	ldr.w	r2, [lr], #4
 800984a:	f8d9 1000 	ldr.w	r1, [r9]
 800984e:	fa1f fb82 	uxth.w	fp, r2
 8009852:	b289      	uxth	r1, r1
 8009854:	fb0a 110b 	mla	r1, sl, fp, r1
 8009858:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800985c:	f8d9 2000 	ldr.w	r2, [r9]
 8009860:	4461      	add	r1, ip
 8009862:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009866:	fb0a c20b 	mla	r2, sl, fp, ip
 800986a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800986e:	b289      	uxth	r1, r1
 8009870:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009874:	4577      	cmp	r7, lr
 8009876:	f849 1b04 	str.w	r1, [r9], #4
 800987a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800987e:	d8e2      	bhi.n	8009846 <__multiply+0xb2>
 8009880:	9a01      	ldr	r2, [sp, #4]
 8009882:	f845 c002 	str.w	ip, [r5, r2]
 8009886:	9a03      	ldr	r2, [sp, #12]
 8009888:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800988c:	3304      	adds	r3, #4
 800988e:	f1b9 0f00 	cmp.w	r9, #0
 8009892:	d021      	beq.n	80098d8 <__multiply+0x144>
 8009894:	6829      	ldr	r1, [r5, #0]
 8009896:	f104 0c14 	add.w	ip, r4, #20
 800989a:	46ae      	mov	lr, r5
 800989c:	f04f 0a00 	mov.w	sl, #0
 80098a0:	f8bc b000 	ldrh.w	fp, [ip]
 80098a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80098a8:	fb09 220b 	mla	r2, r9, fp, r2
 80098ac:	4452      	add	r2, sl
 80098ae:	b289      	uxth	r1, r1
 80098b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80098b4:	f84e 1b04 	str.w	r1, [lr], #4
 80098b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80098bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80098c0:	f8be 1000 	ldrh.w	r1, [lr]
 80098c4:	fb09 110a 	mla	r1, r9, sl, r1
 80098c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80098cc:	4567      	cmp	r7, ip
 80098ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80098d2:	d8e5      	bhi.n	80098a0 <__multiply+0x10c>
 80098d4:	9a01      	ldr	r2, [sp, #4]
 80098d6:	50a9      	str	r1, [r5, r2]
 80098d8:	3504      	adds	r5, #4
 80098da:	e799      	b.n	8009810 <__multiply+0x7c>
 80098dc:	3e01      	subs	r6, #1
 80098de:	e79b      	b.n	8009818 <__multiply+0x84>
 80098e0:	0800d40c 	.word	0x0800d40c
 80098e4:	0800d41d 	.word	0x0800d41d

080098e8 <__pow5mult>:
 80098e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098ec:	4615      	mov	r5, r2
 80098ee:	f012 0203 	ands.w	r2, r2, #3
 80098f2:	4606      	mov	r6, r0
 80098f4:	460f      	mov	r7, r1
 80098f6:	d007      	beq.n	8009908 <__pow5mult+0x20>
 80098f8:	4c25      	ldr	r4, [pc, #148]	; (8009990 <__pow5mult+0xa8>)
 80098fa:	3a01      	subs	r2, #1
 80098fc:	2300      	movs	r3, #0
 80098fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009902:	f7ff fe9d 	bl	8009640 <__multadd>
 8009906:	4607      	mov	r7, r0
 8009908:	10ad      	asrs	r5, r5, #2
 800990a:	d03d      	beq.n	8009988 <__pow5mult+0xa0>
 800990c:	69f4      	ldr	r4, [r6, #28]
 800990e:	b97c      	cbnz	r4, 8009930 <__pow5mult+0x48>
 8009910:	2010      	movs	r0, #16
 8009912:	f7fe f82f 	bl	8007974 <malloc>
 8009916:	4602      	mov	r2, r0
 8009918:	61f0      	str	r0, [r6, #28]
 800991a:	b928      	cbnz	r0, 8009928 <__pow5mult+0x40>
 800991c:	4b1d      	ldr	r3, [pc, #116]	; (8009994 <__pow5mult+0xac>)
 800991e:	481e      	ldr	r0, [pc, #120]	; (8009998 <__pow5mult+0xb0>)
 8009920:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009924:	f000 fbac 	bl	800a080 <__assert_func>
 8009928:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800992c:	6004      	str	r4, [r0, #0]
 800992e:	60c4      	str	r4, [r0, #12]
 8009930:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009934:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009938:	b94c      	cbnz	r4, 800994e <__pow5mult+0x66>
 800993a:	f240 2171 	movw	r1, #625	; 0x271
 800993e:	4630      	mov	r0, r6
 8009940:	f7ff ff12 	bl	8009768 <__i2b>
 8009944:	2300      	movs	r3, #0
 8009946:	f8c8 0008 	str.w	r0, [r8, #8]
 800994a:	4604      	mov	r4, r0
 800994c:	6003      	str	r3, [r0, #0]
 800994e:	f04f 0900 	mov.w	r9, #0
 8009952:	07eb      	lsls	r3, r5, #31
 8009954:	d50a      	bpl.n	800996c <__pow5mult+0x84>
 8009956:	4639      	mov	r1, r7
 8009958:	4622      	mov	r2, r4
 800995a:	4630      	mov	r0, r6
 800995c:	f7ff ff1a 	bl	8009794 <__multiply>
 8009960:	4639      	mov	r1, r7
 8009962:	4680      	mov	r8, r0
 8009964:	4630      	mov	r0, r6
 8009966:	f7ff fe49 	bl	80095fc <_Bfree>
 800996a:	4647      	mov	r7, r8
 800996c:	106d      	asrs	r5, r5, #1
 800996e:	d00b      	beq.n	8009988 <__pow5mult+0xa0>
 8009970:	6820      	ldr	r0, [r4, #0]
 8009972:	b938      	cbnz	r0, 8009984 <__pow5mult+0x9c>
 8009974:	4622      	mov	r2, r4
 8009976:	4621      	mov	r1, r4
 8009978:	4630      	mov	r0, r6
 800997a:	f7ff ff0b 	bl	8009794 <__multiply>
 800997e:	6020      	str	r0, [r4, #0]
 8009980:	f8c0 9000 	str.w	r9, [r0]
 8009984:	4604      	mov	r4, r0
 8009986:	e7e4      	b.n	8009952 <__pow5mult+0x6a>
 8009988:	4638      	mov	r0, r7
 800998a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800998e:	bf00      	nop
 8009990:	0800d568 	.word	0x0800d568
 8009994:	0800d39d 	.word	0x0800d39d
 8009998:	0800d41d 	.word	0x0800d41d

0800999c <__lshift>:
 800999c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099a0:	460c      	mov	r4, r1
 80099a2:	6849      	ldr	r1, [r1, #4]
 80099a4:	6923      	ldr	r3, [r4, #16]
 80099a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099aa:	68a3      	ldr	r3, [r4, #8]
 80099ac:	4607      	mov	r7, r0
 80099ae:	4691      	mov	r9, r2
 80099b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099b4:	f108 0601 	add.w	r6, r8, #1
 80099b8:	42b3      	cmp	r3, r6
 80099ba:	db0b      	blt.n	80099d4 <__lshift+0x38>
 80099bc:	4638      	mov	r0, r7
 80099be:	f7ff fddd 	bl	800957c <_Balloc>
 80099c2:	4605      	mov	r5, r0
 80099c4:	b948      	cbnz	r0, 80099da <__lshift+0x3e>
 80099c6:	4602      	mov	r2, r0
 80099c8:	4b28      	ldr	r3, [pc, #160]	; (8009a6c <__lshift+0xd0>)
 80099ca:	4829      	ldr	r0, [pc, #164]	; (8009a70 <__lshift+0xd4>)
 80099cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80099d0:	f000 fb56 	bl	800a080 <__assert_func>
 80099d4:	3101      	adds	r1, #1
 80099d6:	005b      	lsls	r3, r3, #1
 80099d8:	e7ee      	b.n	80099b8 <__lshift+0x1c>
 80099da:	2300      	movs	r3, #0
 80099dc:	f100 0114 	add.w	r1, r0, #20
 80099e0:	f100 0210 	add.w	r2, r0, #16
 80099e4:	4618      	mov	r0, r3
 80099e6:	4553      	cmp	r3, sl
 80099e8:	db33      	blt.n	8009a52 <__lshift+0xb6>
 80099ea:	6920      	ldr	r0, [r4, #16]
 80099ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80099f0:	f104 0314 	add.w	r3, r4, #20
 80099f4:	f019 091f 	ands.w	r9, r9, #31
 80099f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a00:	d02b      	beq.n	8009a5a <__lshift+0xbe>
 8009a02:	f1c9 0e20 	rsb	lr, r9, #32
 8009a06:	468a      	mov	sl, r1
 8009a08:	2200      	movs	r2, #0
 8009a0a:	6818      	ldr	r0, [r3, #0]
 8009a0c:	fa00 f009 	lsl.w	r0, r0, r9
 8009a10:	4310      	orrs	r0, r2
 8009a12:	f84a 0b04 	str.w	r0, [sl], #4
 8009a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a1a:	459c      	cmp	ip, r3
 8009a1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a20:	d8f3      	bhi.n	8009a0a <__lshift+0x6e>
 8009a22:	ebac 0304 	sub.w	r3, ip, r4
 8009a26:	3b15      	subs	r3, #21
 8009a28:	f023 0303 	bic.w	r3, r3, #3
 8009a2c:	3304      	adds	r3, #4
 8009a2e:	f104 0015 	add.w	r0, r4, #21
 8009a32:	4584      	cmp	ip, r0
 8009a34:	bf38      	it	cc
 8009a36:	2304      	movcc	r3, #4
 8009a38:	50ca      	str	r2, [r1, r3]
 8009a3a:	b10a      	cbz	r2, 8009a40 <__lshift+0xa4>
 8009a3c:	f108 0602 	add.w	r6, r8, #2
 8009a40:	3e01      	subs	r6, #1
 8009a42:	4638      	mov	r0, r7
 8009a44:	612e      	str	r6, [r5, #16]
 8009a46:	4621      	mov	r1, r4
 8009a48:	f7ff fdd8 	bl	80095fc <_Bfree>
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a52:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a56:	3301      	adds	r3, #1
 8009a58:	e7c5      	b.n	80099e6 <__lshift+0x4a>
 8009a5a:	3904      	subs	r1, #4
 8009a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a60:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a64:	459c      	cmp	ip, r3
 8009a66:	d8f9      	bhi.n	8009a5c <__lshift+0xc0>
 8009a68:	e7ea      	b.n	8009a40 <__lshift+0xa4>
 8009a6a:	bf00      	nop
 8009a6c:	0800d40c 	.word	0x0800d40c
 8009a70:	0800d41d 	.word	0x0800d41d

08009a74 <__mcmp>:
 8009a74:	b530      	push	{r4, r5, lr}
 8009a76:	6902      	ldr	r2, [r0, #16]
 8009a78:	690c      	ldr	r4, [r1, #16]
 8009a7a:	1b12      	subs	r2, r2, r4
 8009a7c:	d10e      	bne.n	8009a9c <__mcmp+0x28>
 8009a7e:	f100 0314 	add.w	r3, r0, #20
 8009a82:	3114      	adds	r1, #20
 8009a84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009a88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009a8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009a90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009a94:	42a5      	cmp	r5, r4
 8009a96:	d003      	beq.n	8009aa0 <__mcmp+0x2c>
 8009a98:	d305      	bcc.n	8009aa6 <__mcmp+0x32>
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	bd30      	pop	{r4, r5, pc}
 8009aa0:	4283      	cmp	r3, r0
 8009aa2:	d3f3      	bcc.n	8009a8c <__mcmp+0x18>
 8009aa4:	e7fa      	b.n	8009a9c <__mcmp+0x28>
 8009aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aaa:	e7f7      	b.n	8009a9c <__mcmp+0x28>

08009aac <__mdiff>:
 8009aac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab0:	460c      	mov	r4, r1
 8009ab2:	4606      	mov	r6, r0
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	4690      	mov	r8, r2
 8009aba:	f7ff ffdb 	bl	8009a74 <__mcmp>
 8009abe:	1e05      	subs	r5, r0, #0
 8009ac0:	d110      	bne.n	8009ae4 <__mdiff+0x38>
 8009ac2:	4629      	mov	r1, r5
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	f7ff fd59 	bl	800957c <_Balloc>
 8009aca:	b930      	cbnz	r0, 8009ada <__mdiff+0x2e>
 8009acc:	4b3a      	ldr	r3, [pc, #232]	; (8009bb8 <__mdiff+0x10c>)
 8009ace:	4602      	mov	r2, r0
 8009ad0:	f240 2137 	movw	r1, #567	; 0x237
 8009ad4:	4839      	ldr	r0, [pc, #228]	; (8009bbc <__mdiff+0x110>)
 8009ad6:	f000 fad3 	bl	800a080 <__assert_func>
 8009ada:	2301      	movs	r3, #1
 8009adc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae4:	bfa4      	itt	ge
 8009ae6:	4643      	movge	r3, r8
 8009ae8:	46a0      	movge	r8, r4
 8009aea:	4630      	mov	r0, r6
 8009aec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009af0:	bfa6      	itte	ge
 8009af2:	461c      	movge	r4, r3
 8009af4:	2500      	movge	r5, #0
 8009af6:	2501      	movlt	r5, #1
 8009af8:	f7ff fd40 	bl	800957c <_Balloc>
 8009afc:	b920      	cbnz	r0, 8009b08 <__mdiff+0x5c>
 8009afe:	4b2e      	ldr	r3, [pc, #184]	; (8009bb8 <__mdiff+0x10c>)
 8009b00:	4602      	mov	r2, r0
 8009b02:	f240 2145 	movw	r1, #581	; 0x245
 8009b06:	e7e5      	b.n	8009ad4 <__mdiff+0x28>
 8009b08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009b0c:	6926      	ldr	r6, [r4, #16]
 8009b0e:	60c5      	str	r5, [r0, #12]
 8009b10:	f104 0914 	add.w	r9, r4, #20
 8009b14:	f108 0514 	add.w	r5, r8, #20
 8009b18:	f100 0e14 	add.w	lr, r0, #20
 8009b1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009b20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b24:	f108 0210 	add.w	r2, r8, #16
 8009b28:	46f2      	mov	sl, lr
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009b34:	fa11 f88b 	uxtah	r8, r1, fp
 8009b38:	b299      	uxth	r1, r3
 8009b3a:	0c1b      	lsrs	r3, r3, #16
 8009b3c:	eba8 0801 	sub.w	r8, r8, r1
 8009b40:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b44:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009b48:	fa1f f888 	uxth.w	r8, r8
 8009b4c:	1419      	asrs	r1, r3, #16
 8009b4e:	454e      	cmp	r6, r9
 8009b50:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009b54:	f84a 3b04 	str.w	r3, [sl], #4
 8009b58:	d8e8      	bhi.n	8009b2c <__mdiff+0x80>
 8009b5a:	1b33      	subs	r3, r6, r4
 8009b5c:	3b15      	subs	r3, #21
 8009b5e:	f023 0303 	bic.w	r3, r3, #3
 8009b62:	3304      	adds	r3, #4
 8009b64:	3415      	adds	r4, #21
 8009b66:	42a6      	cmp	r6, r4
 8009b68:	bf38      	it	cc
 8009b6a:	2304      	movcc	r3, #4
 8009b6c:	441d      	add	r5, r3
 8009b6e:	4473      	add	r3, lr
 8009b70:	469e      	mov	lr, r3
 8009b72:	462e      	mov	r6, r5
 8009b74:	4566      	cmp	r6, ip
 8009b76:	d30e      	bcc.n	8009b96 <__mdiff+0xea>
 8009b78:	f10c 0203 	add.w	r2, ip, #3
 8009b7c:	1b52      	subs	r2, r2, r5
 8009b7e:	f022 0203 	bic.w	r2, r2, #3
 8009b82:	3d03      	subs	r5, #3
 8009b84:	45ac      	cmp	ip, r5
 8009b86:	bf38      	it	cc
 8009b88:	2200      	movcc	r2, #0
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009b90:	b17a      	cbz	r2, 8009bb2 <__mdiff+0x106>
 8009b92:	6107      	str	r7, [r0, #16]
 8009b94:	e7a4      	b.n	8009ae0 <__mdiff+0x34>
 8009b96:	f856 8b04 	ldr.w	r8, [r6], #4
 8009b9a:	fa11 f288 	uxtah	r2, r1, r8
 8009b9e:	1414      	asrs	r4, r2, #16
 8009ba0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ba4:	b292      	uxth	r2, r2
 8009ba6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009baa:	f84e 2b04 	str.w	r2, [lr], #4
 8009bae:	1421      	asrs	r1, r4, #16
 8009bb0:	e7e0      	b.n	8009b74 <__mdiff+0xc8>
 8009bb2:	3f01      	subs	r7, #1
 8009bb4:	e7ea      	b.n	8009b8c <__mdiff+0xe0>
 8009bb6:	bf00      	nop
 8009bb8:	0800d40c 	.word	0x0800d40c
 8009bbc:	0800d41d 	.word	0x0800d41d

08009bc0 <__d2b>:
 8009bc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bc4:	460f      	mov	r7, r1
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	ec59 8b10 	vmov	r8, r9, d0
 8009bcc:	4616      	mov	r6, r2
 8009bce:	f7ff fcd5 	bl	800957c <_Balloc>
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	b930      	cbnz	r0, 8009be4 <__d2b+0x24>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	4b24      	ldr	r3, [pc, #144]	; (8009c6c <__d2b+0xac>)
 8009bda:	4825      	ldr	r0, [pc, #148]	; (8009c70 <__d2b+0xb0>)
 8009bdc:	f240 310f 	movw	r1, #783	; 0x30f
 8009be0:	f000 fa4e 	bl	800a080 <__assert_func>
 8009be4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009be8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bec:	bb2d      	cbnz	r5, 8009c3a <__d2b+0x7a>
 8009bee:	9301      	str	r3, [sp, #4]
 8009bf0:	f1b8 0300 	subs.w	r3, r8, #0
 8009bf4:	d026      	beq.n	8009c44 <__d2b+0x84>
 8009bf6:	4668      	mov	r0, sp
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	f7ff fd87 	bl	800970c <__lo0bits>
 8009bfe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c02:	b1e8      	cbz	r0, 8009c40 <__d2b+0x80>
 8009c04:	f1c0 0320 	rsb	r3, r0, #32
 8009c08:	fa02 f303 	lsl.w	r3, r2, r3
 8009c0c:	430b      	orrs	r3, r1
 8009c0e:	40c2      	lsrs	r2, r0
 8009c10:	6163      	str	r3, [r4, #20]
 8009c12:	9201      	str	r2, [sp, #4]
 8009c14:	9b01      	ldr	r3, [sp, #4]
 8009c16:	61a3      	str	r3, [r4, #24]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	bf14      	ite	ne
 8009c1c:	2202      	movne	r2, #2
 8009c1e:	2201      	moveq	r2, #1
 8009c20:	6122      	str	r2, [r4, #16]
 8009c22:	b1bd      	cbz	r5, 8009c54 <__d2b+0x94>
 8009c24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c28:	4405      	add	r5, r0
 8009c2a:	603d      	str	r5, [r7, #0]
 8009c2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c30:	6030      	str	r0, [r6, #0]
 8009c32:	4620      	mov	r0, r4
 8009c34:	b003      	add	sp, #12
 8009c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c3e:	e7d6      	b.n	8009bee <__d2b+0x2e>
 8009c40:	6161      	str	r1, [r4, #20]
 8009c42:	e7e7      	b.n	8009c14 <__d2b+0x54>
 8009c44:	a801      	add	r0, sp, #4
 8009c46:	f7ff fd61 	bl	800970c <__lo0bits>
 8009c4a:	9b01      	ldr	r3, [sp, #4]
 8009c4c:	6163      	str	r3, [r4, #20]
 8009c4e:	3020      	adds	r0, #32
 8009c50:	2201      	movs	r2, #1
 8009c52:	e7e5      	b.n	8009c20 <__d2b+0x60>
 8009c54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c5c:	6038      	str	r0, [r7, #0]
 8009c5e:	6918      	ldr	r0, [r3, #16]
 8009c60:	f7ff fd34 	bl	80096cc <__hi0bits>
 8009c64:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c68:	e7e2      	b.n	8009c30 <__d2b+0x70>
 8009c6a:	bf00      	nop
 8009c6c:	0800d40c 	.word	0x0800d40c
 8009c70:	0800d41d 	.word	0x0800d41d

08009c74 <__ssputs_r>:
 8009c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c78:	688e      	ldr	r6, [r1, #8]
 8009c7a:	461f      	mov	r7, r3
 8009c7c:	42be      	cmp	r6, r7
 8009c7e:	680b      	ldr	r3, [r1, #0]
 8009c80:	4682      	mov	sl, r0
 8009c82:	460c      	mov	r4, r1
 8009c84:	4690      	mov	r8, r2
 8009c86:	d82c      	bhi.n	8009ce2 <__ssputs_r+0x6e>
 8009c88:	898a      	ldrh	r2, [r1, #12]
 8009c8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c8e:	d026      	beq.n	8009cde <__ssputs_r+0x6a>
 8009c90:	6965      	ldr	r5, [r4, #20]
 8009c92:	6909      	ldr	r1, [r1, #16]
 8009c94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c98:	eba3 0901 	sub.w	r9, r3, r1
 8009c9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ca0:	1c7b      	adds	r3, r7, #1
 8009ca2:	444b      	add	r3, r9
 8009ca4:	106d      	asrs	r5, r5, #1
 8009ca6:	429d      	cmp	r5, r3
 8009ca8:	bf38      	it	cc
 8009caa:	461d      	movcc	r5, r3
 8009cac:	0553      	lsls	r3, r2, #21
 8009cae:	d527      	bpl.n	8009d00 <__ssputs_r+0x8c>
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	f7fd fe87 	bl	80079c4 <_malloc_r>
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	b360      	cbz	r0, 8009d14 <__ssputs_r+0xa0>
 8009cba:	6921      	ldr	r1, [r4, #16]
 8009cbc:	464a      	mov	r2, r9
 8009cbe:	f7fe fd87 	bl	80087d0 <memcpy>
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ccc:	81a3      	strh	r3, [r4, #12]
 8009cce:	6126      	str	r6, [r4, #16]
 8009cd0:	6165      	str	r5, [r4, #20]
 8009cd2:	444e      	add	r6, r9
 8009cd4:	eba5 0509 	sub.w	r5, r5, r9
 8009cd8:	6026      	str	r6, [r4, #0]
 8009cda:	60a5      	str	r5, [r4, #8]
 8009cdc:	463e      	mov	r6, r7
 8009cde:	42be      	cmp	r6, r7
 8009ce0:	d900      	bls.n	8009ce4 <__ssputs_r+0x70>
 8009ce2:	463e      	mov	r6, r7
 8009ce4:	6820      	ldr	r0, [r4, #0]
 8009ce6:	4632      	mov	r2, r6
 8009ce8:	4641      	mov	r1, r8
 8009cea:	f7fe fc84 	bl	80085f6 <memmove>
 8009cee:	68a3      	ldr	r3, [r4, #8]
 8009cf0:	1b9b      	subs	r3, r3, r6
 8009cf2:	60a3      	str	r3, [r4, #8]
 8009cf4:	6823      	ldr	r3, [r4, #0]
 8009cf6:	4433      	add	r3, r6
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d00:	462a      	mov	r2, r5
 8009d02:	f000 fa03 	bl	800a10c <_realloc_r>
 8009d06:	4606      	mov	r6, r0
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d1e0      	bne.n	8009cce <__ssputs_r+0x5a>
 8009d0c:	6921      	ldr	r1, [r4, #16]
 8009d0e:	4650      	mov	r0, sl
 8009d10:	f7ff fbe8 	bl	80094e4 <_free_r>
 8009d14:	230c      	movs	r3, #12
 8009d16:	f8ca 3000 	str.w	r3, [sl]
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d20:	81a3      	strh	r3, [r4, #12]
 8009d22:	f04f 30ff 	mov.w	r0, #4294967295
 8009d26:	e7e9      	b.n	8009cfc <__ssputs_r+0x88>

08009d28 <_svfiprintf_r>:
 8009d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	4698      	mov	r8, r3
 8009d2e:	898b      	ldrh	r3, [r1, #12]
 8009d30:	061b      	lsls	r3, r3, #24
 8009d32:	b09d      	sub	sp, #116	; 0x74
 8009d34:	4607      	mov	r7, r0
 8009d36:	460d      	mov	r5, r1
 8009d38:	4614      	mov	r4, r2
 8009d3a:	d50e      	bpl.n	8009d5a <_svfiprintf_r+0x32>
 8009d3c:	690b      	ldr	r3, [r1, #16]
 8009d3e:	b963      	cbnz	r3, 8009d5a <_svfiprintf_r+0x32>
 8009d40:	2140      	movs	r1, #64	; 0x40
 8009d42:	f7fd fe3f 	bl	80079c4 <_malloc_r>
 8009d46:	6028      	str	r0, [r5, #0]
 8009d48:	6128      	str	r0, [r5, #16]
 8009d4a:	b920      	cbnz	r0, 8009d56 <_svfiprintf_r+0x2e>
 8009d4c:	230c      	movs	r3, #12
 8009d4e:	603b      	str	r3, [r7, #0]
 8009d50:	f04f 30ff 	mov.w	r0, #4294967295
 8009d54:	e0d0      	b.n	8009ef8 <_svfiprintf_r+0x1d0>
 8009d56:	2340      	movs	r3, #64	; 0x40
 8009d58:	616b      	str	r3, [r5, #20]
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d5e:	2320      	movs	r3, #32
 8009d60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d64:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d68:	2330      	movs	r3, #48	; 0x30
 8009d6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009f10 <_svfiprintf_r+0x1e8>
 8009d6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d72:	f04f 0901 	mov.w	r9, #1
 8009d76:	4623      	mov	r3, r4
 8009d78:	469a      	mov	sl, r3
 8009d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d7e:	b10a      	cbz	r2, 8009d84 <_svfiprintf_r+0x5c>
 8009d80:	2a25      	cmp	r2, #37	; 0x25
 8009d82:	d1f9      	bne.n	8009d78 <_svfiprintf_r+0x50>
 8009d84:	ebba 0b04 	subs.w	fp, sl, r4
 8009d88:	d00b      	beq.n	8009da2 <_svfiprintf_r+0x7a>
 8009d8a:	465b      	mov	r3, fp
 8009d8c:	4622      	mov	r2, r4
 8009d8e:	4629      	mov	r1, r5
 8009d90:	4638      	mov	r0, r7
 8009d92:	f7ff ff6f 	bl	8009c74 <__ssputs_r>
 8009d96:	3001      	adds	r0, #1
 8009d98:	f000 80a9 	beq.w	8009eee <_svfiprintf_r+0x1c6>
 8009d9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d9e:	445a      	add	r2, fp
 8009da0:	9209      	str	r2, [sp, #36]	; 0x24
 8009da2:	f89a 3000 	ldrb.w	r3, [sl]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 80a1 	beq.w	8009eee <_svfiprintf_r+0x1c6>
 8009dac:	2300      	movs	r3, #0
 8009dae:	f04f 32ff 	mov.w	r2, #4294967295
 8009db2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009db6:	f10a 0a01 	add.w	sl, sl, #1
 8009dba:	9304      	str	r3, [sp, #16]
 8009dbc:	9307      	str	r3, [sp, #28]
 8009dbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dc2:	931a      	str	r3, [sp, #104]	; 0x68
 8009dc4:	4654      	mov	r4, sl
 8009dc6:	2205      	movs	r2, #5
 8009dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dcc:	4850      	ldr	r0, [pc, #320]	; (8009f10 <_svfiprintf_r+0x1e8>)
 8009dce:	f7f6 f9ff 	bl	80001d0 <memchr>
 8009dd2:	9a04      	ldr	r2, [sp, #16]
 8009dd4:	b9d8      	cbnz	r0, 8009e0e <_svfiprintf_r+0xe6>
 8009dd6:	06d0      	lsls	r0, r2, #27
 8009dd8:	bf44      	itt	mi
 8009dda:	2320      	movmi	r3, #32
 8009ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009de0:	0711      	lsls	r1, r2, #28
 8009de2:	bf44      	itt	mi
 8009de4:	232b      	movmi	r3, #43	; 0x2b
 8009de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dea:	f89a 3000 	ldrb.w	r3, [sl]
 8009dee:	2b2a      	cmp	r3, #42	; 0x2a
 8009df0:	d015      	beq.n	8009e1e <_svfiprintf_r+0xf6>
 8009df2:	9a07      	ldr	r2, [sp, #28]
 8009df4:	4654      	mov	r4, sl
 8009df6:	2000      	movs	r0, #0
 8009df8:	f04f 0c0a 	mov.w	ip, #10
 8009dfc:	4621      	mov	r1, r4
 8009dfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e02:	3b30      	subs	r3, #48	; 0x30
 8009e04:	2b09      	cmp	r3, #9
 8009e06:	d94d      	bls.n	8009ea4 <_svfiprintf_r+0x17c>
 8009e08:	b1b0      	cbz	r0, 8009e38 <_svfiprintf_r+0x110>
 8009e0a:	9207      	str	r2, [sp, #28]
 8009e0c:	e014      	b.n	8009e38 <_svfiprintf_r+0x110>
 8009e0e:	eba0 0308 	sub.w	r3, r0, r8
 8009e12:	fa09 f303 	lsl.w	r3, r9, r3
 8009e16:	4313      	orrs	r3, r2
 8009e18:	9304      	str	r3, [sp, #16]
 8009e1a:	46a2      	mov	sl, r4
 8009e1c:	e7d2      	b.n	8009dc4 <_svfiprintf_r+0x9c>
 8009e1e:	9b03      	ldr	r3, [sp, #12]
 8009e20:	1d19      	adds	r1, r3, #4
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	9103      	str	r1, [sp, #12]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	bfbb      	ittet	lt
 8009e2a:	425b      	neglt	r3, r3
 8009e2c:	f042 0202 	orrlt.w	r2, r2, #2
 8009e30:	9307      	strge	r3, [sp, #28]
 8009e32:	9307      	strlt	r3, [sp, #28]
 8009e34:	bfb8      	it	lt
 8009e36:	9204      	strlt	r2, [sp, #16]
 8009e38:	7823      	ldrb	r3, [r4, #0]
 8009e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8009e3c:	d10c      	bne.n	8009e58 <_svfiprintf_r+0x130>
 8009e3e:	7863      	ldrb	r3, [r4, #1]
 8009e40:	2b2a      	cmp	r3, #42	; 0x2a
 8009e42:	d134      	bne.n	8009eae <_svfiprintf_r+0x186>
 8009e44:	9b03      	ldr	r3, [sp, #12]
 8009e46:	1d1a      	adds	r2, r3, #4
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	9203      	str	r2, [sp, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	bfb8      	it	lt
 8009e50:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e54:	3402      	adds	r4, #2
 8009e56:	9305      	str	r3, [sp, #20]
 8009e58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009f20 <_svfiprintf_r+0x1f8>
 8009e5c:	7821      	ldrb	r1, [r4, #0]
 8009e5e:	2203      	movs	r2, #3
 8009e60:	4650      	mov	r0, sl
 8009e62:	f7f6 f9b5 	bl	80001d0 <memchr>
 8009e66:	b138      	cbz	r0, 8009e78 <_svfiprintf_r+0x150>
 8009e68:	9b04      	ldr	r3, [sp, #16]
 8009e6a:	eba0 000a 	sub.w	r0, r0, sl
 8009e6e:	2240      	movs	r2, #64	; 0x40
 8009e70:	4082      	lsls	r2, r0
 8009e72:	4313      	orrs	r3, r2
 8009e74:	3401      	adds	r4, #1
 8009e76:	9304      	str	r3, [sp, #16]
 8009e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e7c:	4825      	ldr	r0, [pc, #148]	; (8009f14 <_svfiprintf_r+0x1ec>)
 8009e7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e82:	2206      	movs	r2, #6
 8009e84:	f7f6 f9a4 	bl	80001d0 <memchr>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d038      	beq.n	8009efe <_svfiprintf_r+0x1d6>
 8009e8c:	4b22      	ldr	r3, [pc, #136]	; (8009f18 <_svfiprintf_r+0x1f0>)
 8009e8e:	bb1b      	cbnz	r3, 8009ed8 <_svfiprintf_r+0x1b0>
 8009e90:	9b03      	ldr	r3, [sp, #12]
 8009e92:	3307      	adds	r3, #7
 8009e94:	f023 0307 	bic.w	r3, r3, #7
 8009e98:	3308      	adds	r3, #8
 8009e9a:	9303      	str	r3, [sp, #12]
 8009e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e9e:	4433      	add	r3, r6
 8009ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ea2:	e768      	b.n	8009d76 <_svfiprintf_r+0x4e>
 8009ea4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ea8:	460c      	mov	r4, r1
 8009eaa:	2001      	movs	r0, #1
 8009eac:	e7a6      	b.n	8009dfc <_svfiprintf_r+0xd4>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	3401      	adds	r4, #1
 8009eb2:	9305      	str	r3, [sp, #20]
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	f04f 0c0a 	mov.w	ip, #10
 8009eba:	4620      	mov	r0, r4
 8009ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ec0:	3a30      	subs	r2, #48	; 0x30
 8009ec2:	2a09      	cmp	r2, #9
 8009ec4:	d903      	bls.n	8009ece <_svfiprintf_r+0x1a6>
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d0c6      	beq.n	8009e58 <_svfiprintf_r+0x130>
 8009eca:	9105      	str	r1, [sp, #20]
 8009ecc:	e7c4      	b.n	8009e58 <_svfiprintf_r+0x130>
 8009ece:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e7f0      	b.n	8009eba <_svfiprintf_r+0x192>
 8009ed8:	ab03      	add	r3, sp, #12
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	462a      	mov	r2, r5
 8009ede:	4b0f      	ldr	r3, [pc, #60]	; (8009f1c <_svfiprintf_r+0x1f4>)
 8009ee0:	a904      	add	r1, sp, #16
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	f7fd fe9a 	bl	8007c1c <_printf_float>
 8009ee8:	1c42      	adds	r2, r0, #1
 8009eea:	4606      	mov	r6, r0
 8009eec:	d1d6      	bne.n	8009e9c <_svfiprintf_r+0x174>
 8009eee:	89ab      	ldrh	r3, [r5, #12]
 8009ef0:	065b      	lsls	r3, r3, #25
 8009ef2:	f53f af2d 	bmi.w	8009d50 <_svfiprintf_r+0x28>
 8009ef6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ef8:	b01d      	add	sp, #116	; 0x74
 8009efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009efe:	ab03      	add	r3, sp, #12
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	462a      	mov	r2, r5
 8009f04:	4b05      	ldr	r3, [pc, #20]	; (8009f1c <_svfiprintf_r+0x1f4>)
 8009f06:	a904      	add	r1, sp, #16
 8009f08:	4638      	mov	r0, r7
 8009f0a:	f7fe f92b 	bl	8008164 <_printf_i>
 8009f0e:	e7eb      	b.n	8009ee8 <_svfiprintf_r+0x1c0>
 8009f10:	0800d574 	.word	0x0800d574
 8009f14:	0800d57e 	.word	0x0800d57e
 8009f18:	08007c1d 	.word	0x08007c1d
 8009f1c:	08009c75 	.word	0x08009c75
 8009f20:	0800d57a 	.word	0x0800d57a

08009f24 <__sflush_r>:
 8009f24:	898a      	ldrh	r2, [r1, #12]
 8009f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2a:	4605      	mov	r5, r0
 8009f2c:	0710      	lsls	r0, r2, #28
 8009f2e:	460c      	mov	r4, r1
 8009f30:	d458      	bmi.n	8009fe4 <__sflush_r+0xc0>
 8009f32:	684b      	ldr	r3, [r1, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	dc05      	bgt.n	8009f44 <__sflush_r+0x20>
 8009f38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	dc02      	bgt.n	8009f44 <__sflush_r+0x20>
 8009f3e:	2000      	movs	r0, #0
 8009f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f46:	2e00      	cmp	r6, #0
 8009f48:	d0f9      	beq.n	8009f3e <__sflush_r+0x1a>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f50:	682f      	ldr	r7, [r5, #0]
 8009f52:	6a21      	ldr	r1, [r4, #32]
 8009f54:	602b      	str	r3, [r5, #0]
 8009f56:	d032      	beq.n	8009fbe <__sflush_r+0x9a>
 8009f58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f5a:	89a3      	ldrh	r3, [r4, #12]
 8009f5c:	075a      	lsls	r2, r3, #29
 8009f5e:	d505      	bpl.n	8009f6c <__sflush_r+0x48>
 8009f60:	6863      	ldr	r3, [r4, #4]
 8009f62:	1ac0      	subs	r0, r0, r3
 8009f64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f66:	b10b      	cbz	r3, 8009f6c <__sflush_r+0x48>
 8009f68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f6a:	1ac0      	subs	r0, r0, r3
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	4602      	mov	r2, r0
 8009f70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f72:	6a21      	ldr	r1, [r4, #32]
 8009f74:	4628      	mov	r0, r5
 8009f76:	47b0      	blx	r6
 8009f78:	1c43      	adds	r3, r0, #1
 8009f7a:	89a3      	ldrh	r3, [r4, #12]
 8009f7c:	d106      	bne.n	8009f8c <__sflush_r+0x68>
 8009f7e:	6829      	ldr	r1, [r5, #0]
 8009f80:	291d      	cmp	r1, #29
 8009f82:	d82b      	bhi.n	8009fdc <__sflush_r+0xb8>
 8009f84:	4a29      	ldr	r2, [pc, #164]	; (800a02c <__sflush_r+0x108>)
 8009f86:	410a      	asrs	r2, r1
 8009f88:	07d6      	lsls	r6, r2, #31
 8009f8a:	d427      	bmi.n	8009fdc <__sflush_r+0xb8>
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	6062      	str	r2, [r4, #4]
 8009f90:	04d9      	lsls	r1, r3, #19
 8009f92:	6922      	ldr	r2, [r4, #16]
 8009f94:	6022      	str	r2, [r4, #0]
 8009f96:	d504      	bpl.n	8009fa2 <__sflush_r+0x7e>
 8009f98:	1c42      	adds	r2, r0, #1
 8009f9a:	d101      	bne.n	8009fa0 <__sflush_r+0x7c>
 8009f9c:	682b      	ldr	r3, [r5, #0]
 8009f9e:	b903      	cbnz	r3, 8009fa2 <__sflush_r+0x7e>
 8009fa0:	6560      	str	r0, [r4, #84]	; 0x54
 8009fa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fa4:	602f      	str	r7, [r5, #0]
 8009fa6:	2900      	cmp	r1, #0
 8009fa8:	d0c9      	beq.n	8009f3e <__sflush_r+0x1a>
 8009faa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fae:	4299      	cmp	r1, r3
 8009fb0:	d002      	beq.n	8009fb8 <__sflush_r+0x94>
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	f7ff fa96 	bl	80094e4 <_free_r>
 8009fb8:	2000      	movs	r0, #0
 8009fba:	6360      	str	r0, [r4, #52]	; 0x34
 8009fbc:	e7c0      	b.n	8009f40 <__sflush_r+0x1c>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	47b0      	blx	r6
 8009fc4:	1c41      	adds	r1, r0, #1
 8009fc6:	d1c8      	bne.n	8009f5a <__sflush_r+0x36>
 8009fc8:	682b      	ldr	r3, [r5, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d0c5      	beq.n	8009f5a <__sflush_r+0x36>
 8009fce:	2b1d      	cmp	r3, #29
 8009fd0:	d001      	beq.n	8009fd6 <__sflush_r+0xb2>
 8009fd2:	2b16      	cmp	r3, #22
 8009fd4:	d101      	bne.n	8009fda <__sflush_r+0xb6>
 8009fd6:	602f      	str	r7, [r5, #0]
 8009fd8:	e7b1      	b.n	8009f3e <__sflush_r+0x1a>
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fe0:	81a3      	strh	r3, [r4, #12]
 8009fe2:	e7ad      	b.n	8009f40 <__sflush_r+0x1c>
 8009fe4:	690f      	ldr	r7, [r1, #16]
 8009fe6:	2f00      	cmp	r7, #0
 8009fe8:	d0a9      	beq.n	8009f3e <__sflush_r+0x1a>
 8009fea:	0793      	lsls	r3, r2, #30
 8009fec:	680e      	ldr	r6, [r1, #0]
 8009fee:	bf08      	it	eq
 8009ff0:	694b      	ldreq	r3, [r1, #20]
 8009ff2:	600f      	str	r7, [r1, #0]
 8009ff4:	bf18      	it	ne
 8009ff6:	2300      	movne	r3, #0
 8009ff8:	eba6 0807 	sub.w	r8, r6, r7
 8009ffc:	608b      	str	r3, [r1, #8]
 8009ffe:	f1b8 0f00 	cmp.w	r8, #0
 800a002:	dd9c      	ble.n	8009f3e <__sflush_r+0x1a>
 800a004:	6a21      	ldr	r1, [r4, #32]
 800a006:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a008:	4643      	mov	r3, r8
 800a00a:	463a      	mov	r2, r7
 800a00c:	4628      	mov	r0, r5
 800a00e:	47b0      	blx	r6
 800a010:	2800      	cmp	r0, #0
 800a012:	dc06      	bgt.n	800a022 <__sflush_r+0xfe>
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a01a:	81a3      	strh	r3, [r4, #12]
 800a01c:	f04f 30ff 	mov.w	r0, #4294967295
 800a020:	e78e      	b.n	8009f40 <__sflush_r+0x1c>
 800a022:	4407      	add	r7, r0
 800a024:	eba8 0800 	sub.w	r8, r8, r0
 800a028:	e7e9      	b.n	8009ffe <__sflush_r+0xda>
 800a02a:	bf00      	nop
 800a02c:	dfbffffe 	.word	0xdfbffffe

0800a030 <_fflush_r>:
 800a030:	b538      	push	{r3, r4, r5, lr}
 800a032:	690b      	ldr	r3, [r1, #16]
 800a034:	4605      	mov	r5, r0
 800a036:	460c      	mov	r4, r1
 800a038:	b913      	cbnz	r3, 800a040 <_fflush_r+0x10>
 800a03a:	2500      	movs	r5, #0
 800a03c:	4628      	mov	r0, r5
 800a03e:	bd38      	pop	{r3, r4, r5, pc}
 800a040:	b118      	cbz	r0, 800a04a <_fflush_r+0x1a>
 800a042:	6a03      	ldr	r3, [r0, #32]
 800a044:	b90b      	cbnz	r3, 800a04a <_fflush_r+0x1a>
 800a046:	f7fe fa29 	bl	800849c <__sinit>
 800a04a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d0f3      	beq.n	800a03a <_fflush_r+0xa>
 800a052:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a054:	07d0      	lsls	r0, r2, #31
 800a056:	d404      	bmi.n	800a062 <_fflush_r+0x32>
 800a058:	0599      	lsls	r1, r3, #22
 800a05a:	d402      	bmi.n	800a062 <_fflush_r+0x32>
 800a05c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a05e:	f7fe fbb5 	bl	80087cc <__retarget_lock_acquire_recursive>
 800a062:	4628      	mov	r0, r5
 800a064:	4621      	mov	r1, r4
 800a066:	f7ff ff5d 	bl	8009f24 <__sflush_r>
 800a06a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a06c:	07da      	lsls	r2, r3, #31
 800a06e:	4605      	mov	r5, r0
 800a070:	d4e4      	bmi.n	800a03c <_fflush_r+0xc>
 800a072:	89a3      	ldrh	r3, [r4, #12]
 800a074:	059b      	lsls	r3, r3, #22
 800a076:	d4e1      	bmi.n	800a03c <_fflush_r+0xc>
 800a078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a07a:	f7fe fba8 	bl	80087ce <__retarget_lock_release_recursive>
 800a07e:	e7dd      	b.n	800a03c <_fflush_r+0xc>

0800a080 <__assert_func>:
 800a080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a082:	4614      	mov	r4, r2
 800a084:	461a      	mov	r2, r3
 800a086:	4b09      	ldr	r3, [pc, #36]	; (800a0ac <__assert_func+0x2c>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4605      	mov	r5, r0
 800a08c:	68d8      	ldr	r0, [r3, #12]
 800a08e:	b14c      	cbz	r4, 800a0a4 <__assert_func+0x24>
 800a090:	4b07      	ldr	r3, [pc, #28]	; (800a0b0 <__assert_func+0x30>)
 800a092:	9100      	str	r1, [sp, #0]
 800a094:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a098:	4906      	ldr	r1, [pc, #24]	; (800a0b4 <__assert_func+0x34>)
 800a09a:	462b      	mov	r3, r5
 800a09c:	f000 f872 	bl	800a184 <fiprintf>
 800a0a0:	f7fd fc60 	bl	8007964 <abort>
 800a0a4:	4b04      	ldr	r3, [pc, #16]	; (800a0b8 <__assert_func+0x38>)
 800a0a6:	461c      	mov	r4, r3
 800a0a8:	e7f3      	b.n	800a092 <__assert_func+0x12>
 800a0aa:	bf00      	nop
 800a0ac:	20000090 	.word	0x20000090
 800a0b0:	0800d58f 	.word	0x0800d58f
 800a0b4:	0800d59c 	.word	0x0800d59c
 800a0b8:	0800d5ca 	.word	0x0800d5ca

0800a0bc <_calloc_r>:
 800a0bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0be:	fba1 2402 	umull	r2, r4, r1, r2
 800a0c2:	b94c      	cbnz	r4, 800a0d8 <_calloc_r+0x1c>
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	9201      	str	r2, [sp, #4]
 800a0c8:	f7fd fc7c 	bl	80079c4 <_malloc_r>
 800a0cc:	9a01      	ldr	r2, [sp, #4]
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	b930      	cbnz	r0, 800a0e0 <_calloc_r+0x24>
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	b003      	add	sp, #12
 800a0d6:	bd30      	pop	{r4, r5, pc}
 800a0d8:	220c      	movs	r2, #12
 800a0da:	6002      	str	r2, [r0, #0]
 800a0dc:	2500      	movs	r5, #0
 800a0de:	e7f8      	b.n	800a0d2 <_calloc_r+0x16>
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	f7fe faa2 	bl	800862a <memset>
 800a0e6:	e7f4      	b.n	800a0d2 <_calloc_r+0x16>

0800a0e8 <__ascii_mbtowc>:
 800a0e8:	b082      	sub	sp, #8
 800a0ea:	b901      	cbnz	r1, 800a0ee <__ascii_mbtowc+0x6>
 800a0ec:	a901      	add	r1, sp, #4
 800a0ee:	b142      	cbz	r2, 800a102 <__ascii_mbtowc+0x1a>
 800a0f0:	b14b      	cbz	r3, 800a106 <__ascii_mbtowc+0x1e>
 800a0f2:	7813      	ldrb	r3, [r2, #0]
 800a0f4:	600b      	str	r3, [r1, #0]
 800a0f6:	7812      	ldrb	r2, [r2, #0]
 800a0f8:	1e10      	subs	r0, r2, #0
 800a0fa:	bf18      	it	ne
 800a0fc:	2001      	movne	r0, #1
 800a0fe:	b002      	add	sp, #8
 800a100:	4770      	bx	lr
 800a102:	4610      	mov	r0, r2
 800a104:	e7fb      	b.n	800a0fe <__ascii_mbtowc+0x16>
 800a106:	f06f 0001 	mvn.w	r0, #1
 800a10a:	e7f8      	b.n	800a0fe <__ascii_mbtowc+0x16>

0800a10c <_realloc_r>:
 800a10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a110:	4680      	mov	r8, r0
 800a112:	4614      	mov	r4, r2
 800a114:	460e      	mov	r6, r1
 800a116:	b921      	cbnz	r1, 800a122 <_realloc_r+0x16>
 800a118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a11c:	4611      	mov	r1, r2
 800a11e:	f7fd bc51 	b.w	80079c4 <_malloc_r>
 800a122:	b92a      	cbnz	r2, 800a130 <_realloc_r+0x24>
 800a124:	f7ff f9de 	bl	80094e4 <_free_r>
 800a128:	4625      	mov	r5, r4
 800a12a:	4628      	mov	r0, r5
 800a12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a130:	f000 f83a 	bl	800a1a8 <_malloc_usable_size_r>
 800a134:	4284      	cmp	r4, r0
 800a136:	4607      	mov	r7, r0
 800a138:	d802      	bhi.n	800a140 <_realloc_r+0x34>
 800a13a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a13e:	d812      	bhi.n	800a166 <_realloc_r+0x5a>
 800a140:	4621      	mov	r1, r4
 800a142:	4640      	mov	r0, r8
 800a144:	f7fd fc3e 	bl	80079c4 <_malloc_r>
 800a148:	4605      	mov	r5, r0
 800a14a:	2800      	cmp	r0, #0
 800a14c:	d0ed      	beq.n	800a12a <_realloc_r+0x1e>
 800a14e:	42bc      	cmp	r4, r7
 800a150:	4622      	mov	r2, r4
 800a152:	4631      	mov	r1, r6
 800a154:	bf28      	it	cs
 800a156:	463a      	movcs	r2, r7
 800a158:	f7fe fb3a 	bl	80087d0 <memcpy>
 800a15c:	4631      	mov	r1, r6
 800a15e:	4640      	mov	r0, r8
 800a160:	f7ff f9c0 	bl	80094e4 <_free_r>
 800a164:	e7e1      	b.n	800a12a <_realloc_r+0x1e>
 800a166:	4635      	mov	r5, r6
 800a168:	e7df      	b.n	800a12a <_realloc_r+0x1e>

0800a16a <__ascii_wctomb>:
 800a16a:	b149      	cbz	r1, 800a180 <__ascii_wctomb+0x16>
 800a16c:	2aff      	cmp	r2, #255	; 0xff
 800a16e:	bf85      	ittet	hi
 800a170:	238a      	movhi	r3, #138	; 0x8a
 800a172:	6003      	strhi	r3, [r0, #0]
 800a174:	700a      	strbls	r2, [r1, #0]
 800a176:	f04f 30ff 	movhi.w	r0, #4294967295
 800a17a:	bf98      	it	ls
 800a17c:	2001      	movls	r0, #1
 800a17e:	4770      	bx	lr
 800a180:	4608      	mov	r0, r1
 800a182:	4770      	bx	lr

0800a184 <fiprintf>:
 800a184:	b40e      	push	{r1, r2, r3}
 800a186:	b503      	push	{r0, r1, lr}
 800a188:	4601      	mov	r1, r0
 800a18a:	ab03      	add	r3, sp, #12
 800a18c:	4805      	ldr	r0, [pc, #20]	; (800a1a4 <fiprintf+0x20>)
 800a18e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a192:	6800      	ldr	r0, [r0, #0]
 800a194:	9301      	str	r3, [sp, #4]
 800a196:	f000 f839 	bl	800a20c <_vfiprintf_r>
 800a19a:	b002      	add	sp, #8
 800a19c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1a0:	b003      	add	sp, #12
 800a1a2:	4770      	bx	lr
 800a1a4:	20000090 	.word	0x20000090

0800a1a8 <_malloc_usable_size_r>:
 800a1a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ac:	1f18      	subs	r0, r3, #4
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	bfbc      	itt	lt
 800a1b2:	580b      	ldrlt	r3, [r1, r0]
 800a1b4:	18c0      	addlt	r0, r0, r3
 800a1b6:	4770      	bx	lr

0800a1b8 <__sfputc_r>:
 800a1b8:	6893      	ldr	r3, [r2, #8]
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	b410      	push	{r4}
 800a1c0:	6093      	str	r3, [r2, #8]
 800a1c2:	da08      	bge.n	800a1d6 <__sfputc_r+0x1e>
 800a1c4:	6994      	ldr	r4, [r2, #24]
 800a1c6:	42a3      	cmp	r3, r4
 800a1c8:	db01      	blt.n	800a1ce <__sfputc_r+0x16>
 800a1ca:	290a      	cmp	r1, #10
 800a1cc:	d103      	bne.n	800a1d6 <__sfputc_r+0x1e>
 800a1ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1d2:	f000 b935 	b.w	800a440 <__swbuf_r>
 800a1d6:	6813      	ldr	r3, [r2, #0]
 800a1d8:	1c58      	adds	r0, r3, #1
 800a1da:	6010      	str	r0, [r2, #0]
 800a1dc:	7019      	strb	r1, [r3, #0]
 800a1de:	4608      	mov	r0, r1
 800a1e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <__sfputs_r>:
 800a1e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e8:	4606      	mov	r6, r0
 800a1ea:	460f      	mov	r7, r1
 800a1ec:	4614      	mov	r4, r2
 800a1ee:	18d5      	adds	r5, r2, r3
 800a1f0:	42ac      	cmp	r4, r5
 800a1f2:	d101      	bne.n	800a1f8 <__sfputs_r+0x12>
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	e007      	b.n	800a208 <__sfputs_r+0x22>
 800a1f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1fc:	463a      	mov	r2, r7
 800a1fe:	4630      	mov	r0, r6
 800a200:	f7ff ffda 	bl	800a1b8 <__sfputc_r>
 800a204:	1c43      	adds	r3, r0, #1
 800a206:	d1f3      	bne.n	800a1f0 <__sfputs_r+0xa>
 800a208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a20c <_vfiprintf_r>:
 800a20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a210:	460d      	mov	r5, r1
 800a212:	b09d      	sub	sp, #116	; 0x74
 800a214:	4614      	mov	r4, r2
 800a216:	4698      	mov	r8, r3
 800a218:	4606      	mov	r6, r0
 800a21a:	b118      	cbz	r0, 800a224 <_vfiprintf_r+0x18>
 800a21c:	6a03      	ldr	r3, [r0, #32]
 800a21e:	b90b      	cbnz	r3, 800a224 <_vfiprintf_r+0x18>
 800a220:	f7fe f93c 	bl	800849c <__sinit>
 800a224:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a226:	07d9      	lsls	r1, r3, #31
 800a228:	d405      	bmi.n	800a236 <_vfiprintf_r+0x2a>
 800a22a:	89ab      	ldrh	r3, [r5, #12]
 800a22c:	059a      	lsls	r2, r3, #22
 800a22e:	d402      	bmi.n	800a236 <_vfiprintf_r+0x2a>
 800a230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a232:	f7fe facb 	bl	80087cc <__retarget_lock_acquire_recursive>
 800a236:	89ab      	ldrh	r3, [r5, #12]
 800a238:	071b      	lsls	r3, r3, #28
 800a23a:	d501      	bpl.n	800a240 <_vfiprintf_r+0x34>
 800a23c:	692b      	ldr	r3, [r5, #16]
 800a23e:	b99b      	cbnz	r3, 800a268 <_vfiprintf_r+0x5c>
 800a240:	4629      	mov	r1, r5
 800a242:	4630      	mov	r0, r6
 800a244:	f000 f93a 	bl	800a4bc <__swsetup_r>
 800a248:	b170      	cbz	r0, 800a268 <_vfiprintf_r+0x5c>
 800a24a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a24c:	07dc      	lsls	r4, r3, #31
 800a24e:	d504      	bpl.n	800a25a <_vfiprintf_r+0x4e>
 800a250:	f04f 30ff 	mov.w	r0, #4294967295
 800a254:	b01d      	add	sp, #116	; 0x74
 800a256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25a:	89ab      	ldrh	r3, [r5, #12]
 800a25c:	0598      	lsls	r0, r3, #22
 800a25e:	d4f7      	bmi.n	800a250 <_vfiprintf_r+0x44>
 800a260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a262:	f7fe fab4 	bl	80087ce <__retarget_lock_release_recursive>
 800a266:	e7f3      	b.n	800a250 <_vfiprintf_r+0x44>
 800a268:	2300      	movs	r3, #0
 800a26a:	9309      	str	r3, [sp, #36]	; 0x24
 800a26c:	2320      	movs	r3, #32
 800a26e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a272:	f8cd 800c 	str.w	r8, [sp, #12]
 800a276:	2330      	movs	r3, #48	; 0x30
 800a278:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a42c <_vfiprintf_r+0x220>
 800a27c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a280:	f04f 0901 	mov.w	r9, #1
 800a284:	4623      	mov	r3, r4
 800a286:	469a      	mov	sl, r3
 800a288:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a28c:	b10a      	cbz	r2, 800a292 <_vfiprintf_r+0x86>
 800a28e:	2a25      	cmp	r2, #37	; 0x25
 800a290:	d1f9      	bne.n	800a286 <_vfiprintf_r+0x7a>
 800a292:	ebba 0b04 	subs.w	fp, sl, r4
 800a296:	d00b      	beq.n	800a2b0 <_vfiprintf_r+0xa4>
 800a298:	465b      	mov	r3, fp
 800a29a:	4622      	mov	r2, r4
 800a29c:	4629      	mov	r1, r5
 800a29e:	4630      	mov	r0, r6
 800a2a0:	f7ff ffa1 	bl	800a1e6 <__sfputs_r>
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	f000 80a9 	beq.w	800a3fc <_vfiprintf_r+0x1f0>
 800a2aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2ac:	445a      	add	r2, fp
 800a2ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a2b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f000 80a1 	beq.w	800a3fc <_vfiprintf_r+0x1f0>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2c4:	f10a 0a01 	add.w	sl, sl, #1
 800a2c8:	9304      	str	r3, [sp, #16]
 800a2ca:	9307      	str	r3, [sp, #28]
 800a2cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2d0:	931a      	str	r3, [sp, #104]	; 0x68
 800a2d2:	4654      	mov	r4, sl
 800a2d4:	2205      	movs	r2, #5
 800a2d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2da:	4854      	ldr	r0, [pc, #336]	; (800a42c <_vfiprintf_r+0x220>)
 800a2dc:	f7f5 ff78 	bl	80001d0 <memchr>
 800a2e0:	9a04      	ldr	r2, [sp, #16]
 800a2e2:	b9d8      	cbnz	r0, 800a31c <_vfiprintf_r+0x110>
 800a2e4:	06d1      	lsls	r1, r2, #27
 800a2e6:	bf44      	itt	mi
 800a2e8:	2320      	movmi	r3, #32
 800a2ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2ee:	0713      	lsls	r3, r2, #28
 800a2f0:	bf44      	itt	mi
 800a2f2:	232b      	movmi	r3, #43	; 0x2b
 800a2f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a2fe:	d015      	beq.n	800a32c <_vfiprintf_r+0x120>
 800a300:	9a07      	ldr	r2, [sp, #28]
 800a302:	4654      	mov	r4, sl
 800a304:	2000      	movs	r0, #0
 800a306:	f04f 0c0a 	mov.w	ip, #10
 800a30a:	4621      	mov	r1, r4
 800a30c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a310:	3b30      	subs	r3, #48	; 0x30
 800a312:	2b09      	cmp	r3, #9
 800a314:	d94d      	bls.n	800a3b2 <_vfiprintf_r+0x1a6>
 800a316:	b1b0      	cbz	r0, 800a346 <_vfiprintf_r+0x13a>
 800a318:	9207      	str	r2, [sp, #28]
 800a31a:	e014      	b.n	800a346 <_vfiprintf_r+0x13a>
 800a31c:	eba0 0308 	sub.w	r3, r0, r8
 800a320:	fa09 f303 	lsl.w	r3, r9, r3
 800a324:	4313      	orrs	r3, r2
 800a326:	9304      	str	r3, [sp, #16]
 800a328:	46a2      	mov	sl, r4
 800a32a:	e7d2      	b.n	800a2d2 <_vfiprintf_r+0xc6>
 800a32c:	9b03      	ldr	r3, [sp, #12]
 800a32e:	1d19      	adds	r1, r3, #4
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	9103      	str	r1, [sp, #12]
 800a334:	2b00      	cmp	r3, #0
 800a336:	bfbb      	ittet	lt
 800a338:	425b      	neglt	r3, r3
 800a33a:	f042 0202 	orrlt.w	r2, r2, #2
 800a33e:	9307      	strge	r3, [sp, #28]
 800a340:	9307      	strlt	r3, [sp, #28]
 800a342:	bfb8      	it	lt
 800a344:	9204      	strlt	r2, [sp, #16]
 800a346:	7823      	ldrb	r3, [r4, #0]
 800a348:	2b2e      	cmp	r3, #46	; 0x2e
 800a34a:	d10c      	bne.n	800a366 <_vfiprintf_r+0x15a>
 800a34c:	7863      	ldrb	r3, [r4, #1]
 800a34e:	2b2a      	cmp	r3, #42	; 0x2a
 800a350:	d134      	bne.n	800a3bc <_vfiprintf_r+0x1b0>
 800a352:	9b03      	ldr	r3, [sp, #12]
 800a354:	1d1a      	adds	r2, r3, #4
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	9203      	str	r2, [sp, #12]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	bfb8      	it	lt
 800a35e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a362:	3402      	adds	r4, #2
 800a364:	9305      	str	r3, [sp, #20]
 800a366:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a43c <_vfiprintf_r+0x230>
 800a36a:	7821      	ldrb	r1, [r4, #0]
 800a36c:	2203      	movs	r2, #3
 800a36e:	4650      	mov	r0, sl
 800a370:	f7f5 ff2e 	bl	80001d0 <memchr>
 800a374:	b138      	cbz	r0, 800a386 <_vfiprintf_r+0x17a>
 800a376:	9b04      	ldr	r3, [sp, #16]
 800a378:	eba0 000a 	sub.w	r0, r0, sl
 800a37c:	2240      	movs	r2, #64	; 0x40
 800a37e:	4082      	lsls	r2, r0
 800a380:	4313      	orrs	r3, r2
 800a382:	3401      	adds	r4, #1
 800a384:	9304      	str	r3, [sp, #16]
 800a386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a38a:	4829      	ldr	r0, [pc, #164]	; (800a430 <_vfiprintf_r+0x224>)
 800a38c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a390:	2206      	movs	r2, #6
 800a392:	f7f5 ff1d 	bl	80001d0 <memchr>
 800a396:	2800      	cmp	r0, #0
 800a398:	d03f      	beq.n	800a41a <_vfiprintf_r+0x20e>
 800a39a:	4b26      	ldr	r3, [pc, #152]	; (800a434 <_vfiprintf_r+0x228>)
 800a39c:	bb1b      	cbnz	r3, 800a3e6 <_vfiprintf_r+0x1da>
 800a39e:	9b03      	ldr	r3, [sp, #12]
 800a3a0:	3307      	adds	r3, #7
 800a3a2:	f023 0307 	bic.w	r3, r3, #7
 800a3a6:	3308      	adds	r3, #8
 800a3a8:	9303      	str	r3, [sp, #12]
 800a3aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ac:	443b      	add	r3, r7
 800a3ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a3b0:	e768      	b.n	800a284 <_vfiprintf_r+0x78>
 800a3b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3b6:	460c      	mov	r4, r1
 800a3b8:	2001      	movs	r0, #1
 800a3ba:	e7a6      	b.n	800a30a <_vfiprintf_r+0xfe>
 800a3bc:	2300      	movs	r3, #0
 800a3be:	3401      	adds	r4, #1
 800a3c0:	9305      	str	r3, [sp, #20]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	f04f 0c0a 	mov.w	ip, #10
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3ce:	3a30      	subs	r2, #48	; 0x30
 800a3d0:	2a09      	cmp	r2, #9
 800a3d2:	d903      	bls.n	800a3dc <_vfiprintf_r+0x1d0>
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d0c6      	beq.n	800a366 <_vfiprintf_r+0x15a>
 800a3d8:	9105      	str	r1, [sp, #20]
 800a3da:	e7c4      	b.n	800a366 <_vfiprintf_r+0x15a>
 800a3dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3e0:	4604      	mov	r4, r0
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e7f0      	b.n	800a3c8 <_vfiprintf_r+0x1bc>
 800a3e6:	ab03      	add	r3, sp, #12
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	462a      	mov	r2, r5
 800a3ec:	4b12      	ldr	r3, [pc, #72]	; (800a438 <_vfiprintf_r+0x22c>)
 800a3ee:	a904      	add	r1, sp, #16
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	f7fd fc13 	bl	8007c1c <_printf_float>
 800a3f6:	4607      	mov	r7, r0
 800a3f8:	1c78      	adds	r0, r7, #1
 800a3fa:	d1d6      	bne.n	800a3aa <_vfiprintf_r+0x19e>
 800a3fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3fe:	07d9      	lsls	r1, r3, #31
 800a400:	d405      	bmi.n	800a40e <_vfiprintf_r+0x202>
 800a402:	89ab      	ldrh	r3, [r5, #12]
 800a404:	059a      	lsls	r2, r3, #22
 800a406:	d402      	bmi.n	800a40e <_vfiprintf_r+0x202>
 800a408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a40a:	f7fe f9e0 	bl	80087ce <__retarget_lock_release_recursive>
 800a40e:	89ab      	ldrh	r3, [r5, #12]
 800a410:	065b      	lsls	r3, r3, #25
 800a412:	f53f af1d 	bmi.w	800a250 <_vfiprintf_r+0x44>
 800a416:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a418:	e71c      	b.n	800a254 <_vfiprintf_r+0x48>
 800a41a:	ab03      	add	r3, sp, #12
 800a41c:	9300      	str	r3, [sp, #0]
 800a41e:	462a      	mov	r2, r5
 800a420:	4b05      	ldr	r3, [pc, #20]	; (800a438 <_vfiprintf_r+0x22c>)
 800a422:	a904      	add	r1, sp, #16
 800a424:	4630      	mov	r0, r6
 800a426:	f7fd fe9d 	bl	8008164 <_printf_i>
 800a42a:	e7e4      	b.n	800a3f6 <_vfiprintf_r+0x1ea>
 800a42c:	0800d574 	.word	0x0800d574
 800a430:	0800d57e 	.word	0x0800d57e
 800a434:	08007c1d 	.word	0x08007c1d
 800a438:	0800a1e7 	.word	0x0800a1e7
 800a43c:	0800d57a 	.word	0x0800d57a

0800a440 <__swbuf_r>:
 800a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a442:	460e      	mov	r6, r1
 800a444:	4614      	mov	r4, r2
 800a446:	4605      	mov	r5, r0
 800a448:	b118      	cbz	r0, 800a452 <__swbuf_r+0x12>
 800a44a:	6a03      	ldr	r3, [r0, #32]
 800a44c:	b90b      	cbnz	r3, 800a452 <__swbuf_r+0x12>
 800a44e:	f7fe f825 	bl	800849c <__sinit>
 800a452:	69a3      	ldr	r3, [r4, #24]
 800a454:	60a3      	str	r3, [r4, #8]
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	071a      	lsls	r2, r3, #28
 800a45a:	d525      	bpl.n	800a4a8 <__swbuf_r+0x68>
 800a45c:	6923      	ldr	r3, [r4, #16]
 800a45e:	b31b      	cbz	r3, 800a4a8 <__swbuf_r+0x68>
 800a460:	6823      	ldr	r3, [r4, #0]
 800a462:	6922      	ldr	r2, [r4, #16]
 800a464:	1a98      	subs	r0, r3, r2
 800a466:	6963      	ldr	r3, [r4, #20]
 800a468:	b2f6      	uxtb	r6, r6
 800a46a:	4283      	cmp	r3, r0
 800a46c:	4637      	mov	r7, r6
 800a46e:	dc04      	bgt.n	800a47a <__swbuf_r+0x3a>
 800a470:	4621      	mov	r1, r4
 800a472:	4628      	mov	r0, r5
 800a474:	f7ff fddc 	bl	800a030 <_fflush_r>
 800a478:	b9e0      	cbnz	r0, 800a4b4 <__swbuf_r+0x74>
 800a47a:	68a3      	ldr	r3, [r4, #8]
 800a47c:	3b01      	subs	r3, #1
 800a47e:	60a3      	str	r3, [r4, #8]
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	6022      	str	r2, [r4, #0]
 800a486:	701e      	strb	r6, [r3, #0]
 800a488:	6962      	ldr	r2, [r4, #20]
 800a48a:	1c43      	adds	r3, r0, #1
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d004      	beq.n	800a49a <__swbuf_r+0x5a>
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	07db      	lsls	r3, r3, #31
 800a494:	d506      	bpl.n	800a4a4 <__swbuf_r+0x64>
 800a496:	2e0a      	cmp	r6, #10
 800a498:	d104      	bne.n	800a4a4 <__swbuf_r+0x64>
 800a49a:	4621      	mov	r1, r4
 800a49c:	4628      	mov	r0, r5
 800a49e:	f7ff fdc7 	bl	800a030 <_fflush_r>
 800a4a2:	b938      	cbnz	r0, 800a4b4 <__swbuf_r+0x74>
 800a4a4:	4638      	mov	r0, r7
 800a4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	f000 f806 	bl	800a4bc <__swsetup_r>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	d0d5      	beq.n	800a460 <__swbuf_r+0x20>
 800a4b4:	f04f 37ff 	mov.w	r7, #4294967295
 800a4b8:	e7f4      	b.n	800a4a4 <__swbuf_r+0x64>
	...

0800a4bc <__swsetup_r>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	4b2a      	ldr	r3, [pc, #168]	; (800a568 <__swsetup_r+0xac>)
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	6818      	ldr	r0, [r3, #0]
 800a4c4:	460c      	mov	r4, r1
 800a4c6:	b118      	cbz	r0, 800a4d0 <__swsetup_r+0x14>
 800a4c8:	6a03      	ldr	r3, [r0, #32]
 800a4ca:	b90b      	cbnz	r3, 800a4d0 <__swsetup_r+0x14>
 800a4cc:	f7fd ffe6 	bl	800849c <__sinit>
 800a4d0:	89a3      	ldrh	r3, [r4, #12]
 800a4d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4d6:	0718      	lsls	r0, r3, #28
 800a4d8:	d422      	bmi.n	800a520 <__swsetup_r+0x64>
 800a4da:	06d9      	lsls	r1, r3, #27
 800a4dc:	d407      	bmi.n	800a4ee <__swsetup_r+0x32>
 800a4de:	2309      	movs	r3, #9
 800a4e0:	602b      	str	r3, [r5, #0]
 800a4e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4e6:	81a3      	strh	r3, [r4, #12]
 800a4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ec:	e034      	b.n	800a558 <__swsetup_r+0x9c>
 800a4ee:	0758      	lsls	r0, r3, #29
 800a4f0:	d512      	bpl.n	800a518 <__swsetup_r+0x5c>
 800a4f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4f4:	b141      	cbz	r1, 800a508 <__swsetup_r+0x4c>
 800a4f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4fa:	4299      	cmp	r1, r3
 800a4fc:	d002      	beq.n	800a504 <__swsetup_r+0x48>
 800a4fe:	4628      	mov	r0, r5
 800a500:	f7fe fff0 	bl	80094e4 <_free_r>
 800a504:	2300      	movs	r3, #0
 800a506:	6363      	str	r3, [r4, #52]	; 0x34
 800a508:	89a3      	ldrh	r3, [r4, #12]
 800a50a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a50e:	81a3      	strh	r3, [r4, #12]
 800a510:	2300      	movs	r3, #0
 800a512:	6063      	str	r3, [r4, #4]
 800a514:	6923      	ldr	r3, [r4, #16]
 800a516:	6023      	str	r3, [r4, #0]
 800a518:	89a3      	ldrh	r3, [r4, #12]
 800a51a:	f043 0308 	orr.w	r3, r3, #8
 800a51e:	81a3      	strh	r3, [r4, #12]
 800a520:	6923      	ldr	r3, [r4, #16]
 800a522:	b94b      	cbnz	r3, 800a538 <__swsetup_r+0x7c>
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a52a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a52e:	d003      	beq.n	800a538 <__swsetup_r+0x7c>
 800a530:	4621      	mov	r1, r4
 800a532:	4628      	mov	r0, r5
 800a534:	f000 f840 	bl	800a5b8 <__smakebuf_r>
 800a538:	89a0      	ldrh	r0, [r4, #12]
 800a53a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a53e:	f010 0301 	ands.w	r3, r0, #1
 800a542:	d00a      	beq.n	800a55a <__swsetup_r+0x9e>
 800a544:	2300      	movs	r3, #0
 800a546:	60a3      	str	r3, [r4, #8]
 800a548:	6963      	ldr	r3, [r4, #20]
 800a54a:	425b      	negs	r3, r3
 800a54c:	61a3      	str	r3, [r4, #24]
 800a54e:	6923      	ldr	r3, [r4, #16]
 800a550:	b943      	cbnz	r3, 800a564 <__swsetup_r+0xa8>
 800a552:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a556:	d1c4      	bne.n	800a4e2 <__swsetup_r+0x26>
 800a558:	bd38      	pop	{r3, r4, r5, pc}
 800a55a:	0781      	lsls	r1, r0, #30
 800a55c:	bf58      	it	pl
 800a55e:	6963      	ldrpl	r3, [r4, #20]
 800a560:	60a3      	str	r3, [r4, #8]
 800a562:	e7f4      	b.n	800a54e <__swsetup_r+0x92>
 800a564:	2000      	movs	r0, #0
 800a566:	e7f7      	b.n	800a558 <__swsetup_r+0x9c>
 800a568:	20000090 	.word	0x20000090

0800a56c <__swhatbuf_r>:
 800a56c:	b570      	push	{r4, r5, r6, lr}
 800a56e:	460c      	mov	r4, r1
 800a570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a574:	2900      	cmp	r1, #0
 800a576:	b096      	sub	sp, #88	; 0x58
 800a578:	4615      	mov	r5, r2
 800a57a:	461e      	mov	r6, r3
 800a57c:	da0d      	bge.n	800a59a <__swhatbuf_r+0x2e>
 800a57e:	89a3      	ldrh	r3, [r4, #12]
 800a580:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a584:	f04f 0100 	mov.w	r1, #0
 800a588:	bf0c      	ite	eq
 800a58a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a58e:	2340      	movne	r3, #64	; 0x40
 800a590:	2000      	movs	r0, #0
 800a592:	6031      	str	r1, [r6, #0]
 800a594:	602b      	str	r3, [r5, #0]
 800a596:	b016      	add	sp, #88	; 0x58
 800a598:	bd70      	pop	{r4, r5, r6, pc}
 800a59a:	466a      	mov	r2, sp
 800a59c:	f000 f848 	bl	800a630 <_fstat_r>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	dbec      	blt.n	800a57e <__swhatbuf_r+0x12>
 800a5a4:	9901      	ldr	r1, [sp, #4]
 800a5a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a5aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a5ae:	4259      	negs	r1, r3
 800a5b0:	4159      	adcs	r1, r3
 800a5b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5b6:	e7eb      	b.n	800a590 <__swhatbuf_r+0x24>

0800a5b8 <__smakebuf_r>:
 800a5b8:	898b      	ldrh	r3, [r1, #12]
 800a5ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5bc:	079d      	lsls	r5, r3, #30
 800a5be:	4606      	mov	r6, r0
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	d507      	bpl.n	800a5d4 <__smakebuf_r+0x1c>
 800a5c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5c8:	6023      	str	r3, [r4, #0]
 800a5ca:	6123      	str	r3, [r4, #16]
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	6163      	str	r3, [r4, #20]
 800a5d0:	b002      	add	sp, #8
 800a5d2:	bd70      	pop	{r4, r5, r6, pc}
 800a5d4:	ab01      	add	r3, sp, #4
 800a5d6:	466a      	mov	r2, sp
 800a5d8:	f7ff ffc8 	bl	800a56c <__swhatbuf_r>
 800a5dc:	9900      	ldr	r1, [sp, #0]
 800a5de:	4605      	mov	r5, r0
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f7fd f9ef 	bl	80079c4 <_malloc_r>
 800a5e6:	b948      	cbnz	r0, 800a5fc <__smakebuf_r+0x44>
 800a5e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5ec:	059a      	lsls	r2, r3, #22
 800a5ee:	d4ef      	bmi.n	800a5d0 <__smakebuf_r+0x18>
 800a5f0:	f023 0303 	bic.w	r3, r3, #3
 800a5f4:	f043 0302 	orr.w	r3, r3, #2
 800a5f8:	81a3      	strh	r3, [r4, #12]
 800a5fa:	e7e3      	b.n	800a5c4 <__smakebuf_r+0xc>
 800a5fc:	89a3      	ldrh	r3, [r4, #12]
 800a5fe:	6020      	str	r0, [r4, #0]
 800a600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a604:	81a3      	strh	r3, [r4, #12]
 800a606:	9b00      	ldr	r3, [sp, #0]
 800a608:	6163      	str	r3, [r4, #20]
 800a60a:	9b01      	ldr	r3, [sp, #4]
 800a60c:	6120      	str	r0, [r4, #16]
 800a60e:	b15b      	cbz	r3, 800a628 <__smakebuf_r+0x70>
 800a610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a614:	4630      	mov	r0, r6
 800a616:	f000 f81d 	bl	800a654 <_isatty_r>
 800a61a:	b128      	cbz	r0, 800a628 <__smakebuf_r+0x70>
 800a61c:	89a3      	ldrh	r3, [r4, #12]
 800a61e:	f023 0303 	bic.w	r3, r3, #3
 800a622:	f043 0301 	orr.w	r3, r3, #1
 800a626:	81a3      	strh	r3, [r4, #12]
 800a628:	89a3      	ldrh	r3, [r4, #12]
 800a62a:	431d      	orrs	r5, r3
 800a62c:	81a5      	strh	r5, [r4, #12]
 800a62e:	e7cf      	b.n	800a5d0 <__smakebuf_r+0x18>

0800a630 <_fstat_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4d07      	ldr	r5, [pc, #28]	; (800a650 <_fstat_r+0x20>)
 800a634:	2300      	movs	r3, #0
 800a636:	4604      	mov	r4, r0
 800a638:	4608      	mov	r0, r1
 800a63a:	4611      	mov	r1, r2
 800a63c:	602b      	str	r3, [r5, #0]
 800a63e:	f7f7 fe18 	bl	8002272 <_fstat>
 800a642:	1c43      	adds	r3, r0, #1
 800a644:	d102      	bne.n	800a64c <_fstat_r+0x1c>
 800a646:	682b      	ldr	r3, [r5, #0]
 800a648:	b103      	cbz	r3, 800a64c <_fstat_r+0x1c>
 800a64a:	6023      	str	r3, [r4, #0]
 800a64c:	bd38      	pop	{r3, r4, r5, pc}
 800a64e:	bf00      	nop
 800a650:	20000970 	.word	0x20000970

0800a654 <_isatty_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	4d06      	ldr	r5, [pc, #24]	; (800a670 <_isatty_r+0x1c>)
 800a658:	2300      	movs	r3, #0
 800a65a:	4604      	mov	r4, r0
 800a65c:	4608      	mov	r0, r1
 800a65e:	602b      	str	r3, [r5, #0]
 800a660:	f7f7 fe17 	bl	8002292 <_isatty>
 800a664:	1c43      	adds	r3, r0, #1
 800a666:	d102      	bne.n	800a66e <_isatty_r+0x1a>
 800a668:	682b      	ldr	r3, [r5, #0]
 800a66a:	b103      	cbz	r3, 800a66e <_isatty_r+0x1a>
 800a66c:	6023      	str	r3, [r4, #0]
 800a66e:	bd38      	pop	{r3, r4, r5, pc}
 800a670:	20000970 	.word	0x20000970

0800a674 <_init>:
 800a674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a676:	bf00      	nop
 800a678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a67a:	bc08      	pop	{r3}
 800a67c:	469e      	mov	lr, r3
 800a67e:	4770      	bx	lr

0800a680 <_fini>:
 800a680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a682:	bf00      	nop
 800a684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a686:	bc08      	pop	{r3}
 800a688:	469e      	mov	lr, r3
 800a68a:	4770      	bx	lr
