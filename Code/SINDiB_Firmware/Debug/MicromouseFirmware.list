
MicromouseFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009008  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000071c  08009198  08009198  00019198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098b4  080098b4  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  080098b4  080098b4  000198b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098bc  080098bc  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098bc  080098bc  000198bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098c0  080098c0  000198c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080098c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020200  2**0
                  CONTENTS
 10 .bss          00000544  20000200  20000200  00020200  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000744  20000744  00020200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013584  00000000  00000000  00020273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ed8  00000000  00000000  000337f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001110  00000000  00000000  000366d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d32  00000000  00000000  000377e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026759  00000000  00000000  00038512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000173b3  00000000  00000000  0005ec6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d43d5  00000000  00000000  0007601e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005630  00000000  00000000  0014a3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0014fa24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009180 	.word	0x08009180

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08009180 	.word	0x08009180

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <main>:
static void MX_TIM9_Init(void);           // BUZZER SOUND GENERATION
static void MX_TIM13_Init(void);          // INTERRUPT GYRO UPDATE
static void MX_TIM14_Init(void);          // INTERRUPT ADC UPDATE: IR

int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  HAL_Init();
 8000ea8:	f001 f920 	bl	80020ec <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000eac:	f000 f828 	bl	8000f00 <SystemClock_Config>

  ITM_Port32(31) = 1;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <main+0x58>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 fbb7 	bl	8001628 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eba:	f000 fb95 	bl	80015e8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000ebe:	f000 f8c1 	bl	8001044 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000ec2:	f000 f9d1 	bl	8001268 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000ec6:	f000 f885 	bl	8000fd4 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000eca:	f000 f8f1 	bl	80010b0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000ece:	f000 fb61 	bl	8001594 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000ed2:	f000 f925 	bl	8001120 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ed6:	f000 f973 	bl	80011c0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000eda:	f000 fa5d 	bl	8001398 <MX_TIM5_Init>
  MX_TIM9_Init();
 8000ede:	f000 faaf 	bl	8001440 <MX_TIM9_Init>
  MX_TIM13_Init();
 8000ee2:	f000 fb0f 	bl	8001504 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000ee6:	f000 fb31 	bl	800154c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  ITM_Port32(31) = 2;
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <main+0x58>)
 8000eec:	2202      	movs	r2, #2
 8000eee:	601a      	str	r2, [r3, #0]

  // TRANSFERRING THE CONTROL TO OUR LOOP
  cppmain();
 8000ef0:	f005 fbfe 	bl	80066f0 <cppmain>

  while (1)
  {
	  return -1;
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	e000007c 	.word	0xe000007c

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b094      	sub	sp, #80	; 0x50
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 0320 	add.w	r3, r7, #32
 8000f0a:	2230      	movs	r2, #48	; 0x30
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f006 fa9f 	bl	8007452 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f32:	6413      	str	r3, [r2, #64]	; 0x40
 8000f34:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure.  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f66:	2302      	movs	r3, #2
 8000f68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f70:	2308      	movs	r3, #8
 8000f72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000f74:	2332      	movs	r3, #50	; 0x32
 8000f76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f80:	f107 0320 	add.w	r3, r7, #32
 8000f84:	4618      	mov	r0, r3
 8000f86:	f002 fb13 	bl	80035b0 <HAL_RCC_OscConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f90:	f000 fc22 	bl	80017d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f94:	230f      	movs	r3, #15
 8000f96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f002 fd75 	bl	8003aa0 <HAL_RCC_ClockConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fbc:	f000 fc0c 	bl	80017d8 <Error_Handler>
  }

  /** Enables the Clock Security System*/
  HAL_RCC_EnableCSS();
 8000fc0:	f002 fe54 	bl	8003c6c <HAL_RCC_EnableCSS>
}
 8000fc4:	bf00      	nop
 8000fc6:	3750      	adds	r7, #80	; 0x50
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) */
  hadc1.Instance = ADC1;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <MX_ADC1_Init+0x64>)
 8000fda:	4a18      	ldr	r2, [pc, #96]	; (800103c <MX_ADC1_Init+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_ADC1_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_ADC1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_ADC1_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_ADC1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <MX_ADC1_Init+0x64>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_ADC1_Init+0x64>)
 8001000:	2200      	movs	r2, #0
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_ADC1_Init+0x64>)
 8001006:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <MX_ADC1_Init+0x6c>)
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_ADC1_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_ADC1_Init+0x64>)
 8001012:	2201      	movs	r2, #1
 8001014:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_ADC1_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_ADC1_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_ADC1_Init+0x64>)
 8001026:	f001 f8f7 	bl	8002218 <HAL_ADC_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8001030:	f000 fbd2 	bl	80017d8 <Error_Handler>
  }
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000021c 	.word	0x2000021c
 800103c:	40012000 	.word	0x40012000
 8001040:	0f000001 	.word	0x0f000001

08001044 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_SPI1_Init+0x64>)
 800104a:	4a18      	ldr	r2, [pc, #96]	; (80010ac <MX_SPI1_Init+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001050:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001054:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_SPI1_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_SPI1_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001074:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001078:	2218      	movs	r2, #24
 800107a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <MX_SPI1_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <MX_SPI1_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001090:	220a      	movs	r2, #10
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001096:	f002 ff48 	bl	8003f2a <HAL_SPI_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010a0:	f000 fb9a 	bl	80017d8 <Error_Handler>
  }
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200002c4 	.word	0x200002c4
 80010ac:	40013000 	.word	0x40013000

080010b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <MX_SPI2_Init+0x68>)
 80010b6:	4a19      	ldr	r2, [pc, #100]	; (800111c <MX_SPI2_Init+0x6c>)
 80010b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <MX_SPI2_Init+0x68>)
 80010bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_SPI2_Init+0x68>)
 80010c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010c8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_SPI2_Init+0x68>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_SPI2_Init+0x68>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <MX_SPI2_Init+0x68>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_SPI2_Init+0x68>)
 80010de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_SPI2_Init+0x68>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <MX_SPI2_Init+0x68>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_SPI2_Init+0x68>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <MX_SPI2_Init+0x68>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_SPI2_Init+0x68>)
 80010fe:	220a      	movs	r2, #10
 8001100:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_SPI2_Init+0x68>)
 8001104:	f002 ff11 	bl	8003f2a <HAL_SPI_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800110e:	f000 fb63 	bl	80017d8 <Error_Handler>
  }
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000031c 	.word	0x2000031c
 800111c:	40003800 	.word	0x40003800

08001120 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	463b      	mov	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_TIM1_Init+0x98>)
 800113e:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <MX_TIM1_Init+0x9c>)
 8001140:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_TIM1_Init+0x98>)
 8001144:	2231      	movs	r2, #49	; 0x31
 8001146:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_TIM1_Init+0x98>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_TIM1_Init+0x98>)
 8001150:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001154:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_TIM1_Init+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <MX_TIM1_Init+0x98>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_TIM1_Init+0x98>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001168:	4813      	ldr	r0, [pc, #76]	; (80011b8 <MX_TIM1_Init+0x98>)
 800116a:	f003 fc87 	bl	8004a7c <HAL_TIM_Base_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM1_Init+0x58>
    Error_Handler();
 8001174:	f000 fb30 	bl	80017d8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	4619      	mov	r1, r3
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <MX_TIM1_Init+0x98>)
 8001186:	f004 f859 	bl	800523c <HAL_TIM_ConfigClockSource>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM1_Init+0x74>
    Error_Handler();
 8001190:	f000 fb22 	bl	80017d8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001194:	2300      	movs	r3, #0
 8001196:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_TIM1_Init+0x98>)
 80011a2:	f004 fc4b 	bl	8005a3c <HAL_TIMEx_MasterConfigSynchronization>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM1_Init+0x90>
    Error_Handler();
 80011ac:	f000 fb14 	bl	80017d8 <Error_Handler>
}
 80011b0:	bf00      	nop
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000374 	.word	0x20000374
 80011bc:	40010000 	.word	0x40010000

080011c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2224      	movs	r2, #36	; 0x24
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f006 f93f 	bl	8007452 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_TIM2_Init+0xa4>)
 80011de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_TIM2_Init+0xa4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <MX_TIM2_Init+0xa4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_TIM2_Init+0xa4>)
 80011f2:	f04f 32ff 	mov.w	r2, #4294967295
 80011f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_TIM2_Init+0xa4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_TIM2_Init+0xa4>)
 8001200:	2280      	movs	r2, #128	; 0x80
 8001202:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001204:	2301      	movs	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800120c:	2301      	movs	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800121c:	2301      	movs	r3, #1
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	4619      	mov	r1, r3
 800122e:	480d      	ldr	r0, [pc, #52]	; (8001264 <MX_TIM2_Init+0xa4>)
 8001230:	f003 fd94 	bl	8004d5c <HAL_TIM_Encoder_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM2_Init+0x7e>
    Error_Handler();
 800123a:	f000 facd 	bl	80017d8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	4619      	mov	r1, r3
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <MX_TIM2_Init+0xa4>)
 800124c:	f004 fbf6 	bl	8005a3c <HAL_TIMEx_MasterConfigSynchronization>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM2_Init+0x9a>
    Error_Handler();
 8001256:	f000 fabf 	bl	80017d8 <Error_Handler>
}
 800125a:	bf00      	nop
 800125c:	3730      	adds	r7, #48	; 0x30
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200003bc 	.word	0x200003bc

08001268 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08e      	sub	sp, #56	; 0x38
 800126c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	f107 0320 	add.w	r3, r7, #32
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
 8001294:	615a      	str	r2, [r3, #20]
 8001296:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001298:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <MX_TIM4_Init+0x128>)
 800129a:	4a3e      	ldr	r2, [pc, #248]	; (8001394 <MX_TIM4_Init+0x12c>)
 800129c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800129e:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <MX_TIM4_Init+0x128>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b3a      	ldr	r3, [pc, #232]	; (8001390 <MX_TIM4_Init+0x128>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4095;
 80012aa:	4b39      	ldr	r3, [pc, #228]	; (8001390 <MX_TIM4_Init+0x128>)
 80012ac:	f640 72ff 	movw	r2, #4095	; 0xfff
 80012b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b2:	4b37      	ldr	r3, [pc, #220]	; (8001390 <MX_TIM4_Init+0x128>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	4b35      	ldr	r3, [pc, #212]	; (8001390 <MX_TIM4_Init+0x128>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012be:	4834      	ldr	r0, [pc, #208]	; (8001390 <MX_TIM4_Init+0x128>)
 80012c0:	f003 fbdc 	bl	8004a7c <HAL_TIM_Base_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM4_Init+0x66>
    Error_Handler();
 80012ca:	f000 fa85 	bl	80017d8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d8:	4619      	mov	r1, r3
 80012da:	482d      	ldr	r0, [pc, #180]	; (8001390 <MX_TIM4_Init+0x128>)
 80012dc:	f003 ffae 	bl	800523c <HAL_TIM_ConfigClockSource>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM4_Init+0x82>
    Error_Handler();
 80012e6:	f000 fa77 	bl	80017d8 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012ea:	4829      	ldr	r0, [pc, #164]	; (8001390 <MX_TIM4_Init+0x128>)
 80012ec:	f003 fc15 	bl	8004b1a <HAL_TIM_PWM_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM4_Init+0x92>
    Error_Handler();
 80012f6:	f000 fa6f 	bl	80017d8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001302:	f107 0320 	add.w	r3, r7, #32
 8001306:	4619      	mov	r1, r3
 8001308:	4821      	ldr	r0, [pc, #132]	; (8001390 <MX_TIM4_Init+0x128>)
 800130a:	f004 fb97 	bl	8005a3c <HAL_TIMEx_MasterConfigSynchronization>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM4_Init+0xb0>
    Error_Handler();
 8001314:	f000 fa60 	bl	80017d8 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001318:	2360      	movs	r3, #96	; 0x60
 800131a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	2200      	movs	r2, #0
 800132c:	4619      	mov	r1, r3
 800132e:	4818      	ldr	r0, [pc, #96]	; (8001390 <MX_TIM4_Init+0x128>)
 8001330:	f003 fec2 	bl	80050b8 <HAL_TIM_PWM_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM4_Init+0xd6>
    Error_Handler();
 800133a:	f000 fa4d 	bl	80017d8 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2204      	movs	r2, #4
 8001342:	4619      	mov	r1, r3
 8001344:	4812      	ldr	r0, [pc, #72]	; (8001390 <MX_TIM4_Init+0x128>)
 8001346:	f003 feb7 	bl	80050b8 <HAL_TIM_PWM_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM4_Init+0xec>
    Error_Handler();
 8001350:	f000 fa42 	bl	80017d8 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2208      	movs	r2, #8
 8001358:	4619      	mov	r1, r3
 800135a:	480d      	ldr	r0, [pc, #52]	; (8001390 <MX_TIM4_Init+0x128>)
 800135c:	f003 feac 	bl	80050b8 <HAL_TIM_PWM_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM4_Init+0x102>
    Error_Handler();
 8001366:	f000 fa37 	bl	80017d8 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	220c      	movs	r2, #12
 800136e:	4619      	mov	r1, r3
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <MX_TIM4_Init+0x128>)
 8001372:	f003 fea1 	bl	80050b8 <HAL_TIM_PWM_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM4_Init+0x118>
    Error_Handler();
 800137c:	f000 fa2c 	bl	80017d8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <MX_TIM4_Init+0x128>)
 8001382:	f000 fcbd 	bl	8001d00 <HAL_TIM_MspPostInit>
}
 8001386:	bf00      	nop
 8001388:	3738      	adds	r7, #56	; 0x38
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000404 	.word	0x20000404
 8001394:	40000800 	.word	0x40000800

08001398 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	2224      	movs	r2, #36	; 0x24
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f006 f853 	bl	8007452 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
  htim5.Instance = TIM5;
 80013b4:	4b20      	ldr	r3, [pc, #128]	; (8001438 <MX_TIM5_Init+0xa0>)
 80013b6:	4a21      	ldr	r2, [pc, #132]	; (800143c <MX_TIM5_Init+0xa4>)
 80013b8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <MX_TIM5_Init+0xa0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <MX_TIM5_Init+0xa0>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <MX_TIM5_Init+0xa0>)
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <MX_TIM5_Init+0xa0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <MX_TIM5_Init+0xa0>)
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80013da:	2302      	movs	r3, #2
 80013dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013e2:	2301      	movs	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013f2:	2301      	movs	r3, #1
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	4619      	mov	r1, r3
 8001404:	480c      	ldr	r0, [pc, #48]	; (8001438 <MX_TIM5_Init+0xa0>)
 8001406:	f003 fca9 	bl	8004d5c <HAL_TIM_Encoder_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM5_Init+0x7c>
    Error_Handler();
 8001410:	f000 f9e2 	bl	80017d8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_TIM5_Init+0xa0>)
 8001422:	f004 fb0b 	bl	8005a3c <HAL_TIMEx_MasterConfigSynchronization>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM5_Init+0x98>
    Error_Handler();
 800142c:	f000 f9d4 	bl	80017d8 <Error_Handler>
}
 8001430:	bf00      	nop
 8001432:	3730      	adds	r7, #48	; 0x30
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2000044c 	.word	0x2000044c
 800143c:	40000c00 	.word	0x40000c00

08001440 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	; 0x30
 8001444:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001446:	f107 0320 	add.w	r3, r7, #32
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
 8001462:	615a      	str	r2, [r3, #20]
 8001464:	619a      	str	r2, [r3, #24]
  htim9.Instance = TIM9;
 8001466:	4b25      	ldr	r3, [pc, #148]	; (80014fc <MX_TIM9_Init+0xbc>)
 8001468:	4a25      	ldr	r2, [pc, #148]	; (8001500 <MX_TIM9_Init+0xc0>)
 800146a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99; // 50 000 000 --> 500 000
 800146c:	4b23      	ldr	r3, [pc, #140]	; (80014fc <MX_TIM9_Init+0xbc>)
 800146e:	2263      	movs	r2, #99	; 0x63
 8001470:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	4b22      	ldr	r3, [pc, #136]	; (80014fc <MX_TIM9_Init+0xbc>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;  // 500 000 --> 500
 8001478:	4b20      	ldr	r3, [pc, #128]	; (80014fc <MX_TIM9_Init+0xbc>)
 800147a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800147e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <MX_TIM9_Init+0xbc>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <MX_TIM9_Init+0xbc>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800148c:	481b      	ldr	r0, [pc, #108]	; (80014fc <MX_TIM9_Init+0xbc>)
 800148e:	f003 faf5 	bl	8004a7c <HAL_TIM_Base_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM9_Init+0x5c>
    Error_Handler();
 8001498:	f000 f99e 	bl	80017d8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80014a2:	f107 0320 	add.w	r3, r7, #32
 80014a6:	4619      	mov	r1, r3
 80014a8:	4814      	ldr	r0, [pc, #80]	; (80014fc <MX_TIM9_Init+0xbc>)
 80014aa:	f003 fec7 	bl	800523c <HAL_TIM_ConfigClockSource>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM9_Init+0x78>
    Error_Handler();
 80014b4:	f000 f990 	bl	80017d8 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80014b8:	4810      	ldr	r0, [pc, #64]	; (80014fc <MX_TIM9_Init+0xbc>)
 80014ba:	f003 fb2e 	bl	8004b1a <HAL_TIM_PWM_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM9_Init+0x88>
    Error_Handler();
 80014c4:	f000 f988 	bl	80017d8 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c8:	2360      	movs	r3, #96	; 0x60
 80014ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2200      	movs	r2, #0
 80014dc:	4619      	mov	r1, r3
 80014de:	4807      	ldr	r0, [pc, #28]	; (80014fc <MX_TIM9_Init+0xbc>)
 80014e0:	f003 fdea 	bl	80050b8 <HAL_TIM_PWM_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM9_Init+0xae>
    Error_Handler();
 80014ea:	f000 f975 	bl	80017d8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim9);
 80014ee:	4803      	ldr	r0, [pc, #12]	; (80014fc <MX_TIM9_Init+0xbc>)
 80014f0:	f000 fc06 	bl	8001d00 <HAL_TIM_MspPostInit>
}
 80014f4:	bf00      	nop
 80014f6:	3730      	adds	r7, #48	; 0x30
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000494 	.word	0x20000494
 8001500:	40014000 	.word	0x40014000

08001504 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  htim13.Instance = TIM13;
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_TIM13_Init+0x40>)
 800150a:	4a0f      	ldr	r2, [pc, #60]	; (8001548 <MX_TIM13_Init+0x44>)
 800150c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <MX_TIM13_Init+0x40>)
 8001510:	2200      	movs	r2, #0
 8001512:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_TIM13_Init+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 50000;
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <MX_TIM13_Init+0x40>)
 800151c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001520:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <MX_TIM13_Init+0x40>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_TIM13_Init+0x40>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_TIM13_Init+0x40>)
 8001530:	f003 faa4 	bl	8004a7c <HAL_TIM_Base_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM13_Init+0x3a>
    Error_Handler();
 800153a:	f000 f94d 	bl	80017d8 <Error_Handler>
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200004dc 	.word	0x200004dc
 8001548:	40001c00 	.word	0x40001c00

0800154c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  htim14.Instance = TIM14;
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_TIM14_Init+0x40>)
 8001552:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <MX_TIM14_Init+0x44>)
 8001554:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1;
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <MX_TIM14_Init+0x40>)
 8001558:	2201      	movs	r2, #1
 800155a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_TIM14_Init+0x40>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50000;
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <MX_TIM14_Init+0x40>)
 8001564:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001568:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_TIM14_Init+0x40>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_TIM14_Init+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_TIM14_Init+0x40>)
 8001578:	f003 fa80 	bl	8004a7c <HAL_TIM_Base_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001582:	f000 f929 	bl	80017d8 <Error_Handler>
  }
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000524 	.word	0x20000524
 8001590:	40002000 	.word	0x40002000

08001594 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_USART1_UART_Init+0x4c>)
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <MX_USART1_UART_Init+0x50>)
 800159c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MX_USART1_UART_Init+0x4c>)
 80015a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_USART1_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_USART1_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_USART1_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_USART1_UART_Init+0x4c>)
 80015ba:	220c      	movs	r2, #12
 80015bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_USART1_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_USART1_UART_Init+0x4c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_USART1_UART_Init+0x4c>)
 80015cc:	f004 fac6 	bl	8005b5c <HAL_UART_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015d6:	f000 f8ff 	bl	80017d8 <Error_Handler>
  }
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000056c 	.word	0x2000056c
 80015e4:	40011000 	.word	0x40011000

080015e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_DMA_Init+0x3c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <MX_DMA_Init+0x3c>)
 80015f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_DMA_Init+0x3c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2038      	movs	r0, #56	; 0x38
 8001610:	f001 fadd 	bl	8002bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001614:	2038      	movs	r0, #56	; 0x38
 8001616:	f001 faf6 	bl	8002c06 <HAL_NVIC_EnableIRQ>

}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800

08001628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	4b60      	ldr	r3, [pc, #384]	; (80017c4 <MX_GPIO_Init+0x19c>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a5f      	ldr	r2, [pc, #380]	; (80017c4 <MX_GPIO_Init+0x19c>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b5d      	ldr	r3, [pc, #372]	; (80017c4 <MX_GPIO_Init+0x19c>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <MX_GPIO_Init+0x19c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a58      	ldr	r2, [pc, #352]	; (80017c4 <MX_GPIO_Init+0x19c>)
 8001664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b56      	ldr	r3, [pc, #344]	; (80017c4 <MX_GPIO_Init+0x19c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	4b52      	ldr	r3, [pc, #328]	; (80017c4 <MX_GPIO_Init+0x19c>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a51      	ldr	r2, [pc, #324]	; (80017c4 <MX_GPIO_Init+0x19c>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b4f      	ldr	r3, [pc, #316]	; (80017c4 <MX_GPIO_Init+0x19c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <MX_GPIO_Init+0x19c>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a4a      	ldr	r2, [pc, #296]	; (80017c4 <MX_GPIO_Init+0x19c>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b48      	ldr	r3, [pc, #288]	; (80017c4 <MX_GPIO_Init+0x19c>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	603b      	str	r3, [r7, #0]
 80016b2:	4b44      	ldr	r3, [pc, #272]	; (80017c4 <MX_GPIO_Init+0x19c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a43      	ldr	r2, [pc, #268]	; (80017c4 <MX_GPIO_Init+0x19c>)
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <MX_GPIO_Init+0x19c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED10_Pin|RF_EMITTER_Pin|D_C_Pin|DIAGONAL_EMITTER_Pin
 80016ca:	2200      	movs	r2, #0
 80016cc:	f641 51e7 	movw	r1, #7655	; 0x1de7
 80016d0:	483d      	ldr	r0, [pc, #244]	; (80017c8 <MX_GPIO_Init+0x1a0>)
 80016d2:	f001 ff39 	bl	8003548 <HAL_GPIO_WritePin>
                          |CE_Pin|LF_EMITTER_Pin|CS_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED11_Pin|LED9_Pin|LED8_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f641 0110 	movw	r1, #6160	; 0x1810
 80016dc:	483b      	ldr	r0, [pc, #236]	; (80017cc <MX_GPIO_Init+0x1a4>)
 80016de:	f001 ff33 	bl	8003548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED7_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80016e8:	4839      	ldr	r0, [pc, #228]	; (80017d0 <MX_GPIO_Init+0x1a8>)
 80016ea:	f001 ff2d 	bl	8003548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2104      	movs	r1, #4
 80016f2:	4838      	ldr	r0, [pc, #224]	; (80017d4 <MX_GPIO_Init+0x1ac>)
 80016f4:	f001 ff28 	bl	8003548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TB1_Pin */
  GPIO_InitStruct.Pin = TB1_Pin;
 80016f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TB1_GPIO_Port, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	482e      	ldr	r0, [pc, #184]	; (80017c8 <MX_GPIO_Init+0x1a0>)
 800170e:	f001 fd7f 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED10_Pin RF_EMITTER_Pin D_C_Pin DIAGONAL_EMITTER_Pin
                           CE_Pin LF_EMITTER_Pin CS_Pin LED3_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED10_Pin|RF_EMITTER_Pin|D_C_Pin|DIAGONAL_EMITTER_Pin
 8001712:	f641 53e7 	movw	r3, #7655	; 0x1de7
 8001716:	617b      	str	r3, [r7, #20]
                          |CE_Pin|LF_EMITTER_Pin|CS_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	4827      	ldr	r0, [pc, #156]	; (80017c8 <MX_GPIO_Init+0x1a0>)
 800172c:	f001 fd70 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin;
 8001730:	2308      	movs	r3, #8
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRDY_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4823      	ldr	r0, [pc, #140]	; (80017d0 <MX_GPIO_Init+0x1a8>)
 8001744:	f001 fd64 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 INT_Pin MISO_Pin BOOT0_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|INT_Pin|MISO_Pin|BOOT0_Pin;
 8001748:	f244 4324 	movw	r3, #17444	; 0x4424
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	481b      	ldr	r0, [pc, #108]	; (80017cc <MX_GPIO_Init+0x1a4>)
 800175e:	f001 fd57 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED11_Pin LED9_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED11_Pin|LED9_Pin|LED8_Pin;
 8001762:	f641 0310 	movw	r3, #6160	; 0x1810
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	4814      	ldr	r0, [pc, #80]	; (80017cc <MX_GPIO_Init+0x1a4>)
 800177c:	f001 fd48 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED7_Pin|LED1_Pin|LED2_Pin;
 8001780:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	2301      	movs	r3, #1
 8001788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	480d      	ldr	r0, [pc, #52]	; (80017d0 <MX_GPIO_Init+0x1a8>)
 800179a:	f001 fd39 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 800179e:	2304      	movs	r3, #4
 80017a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	4807      	ldr	r0, [pc, #28]	; (80017d4 <MX_GPIO_Init+0x1ac>)
 80017b6:	f001 fd2b 	bl	8003210 <HAL_GPIO_Init>
}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	; 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020400 	.word	0x40020400
 80017d0:	40020000 	.word	0x40020000
 80017d4:	40020c00 	.word	0x40020c00

080017d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017dc:	b672      	cpsid	i
}
 80017de:	bf00      	nop
  __disable_irq();
  while (1);
 80017e0:	e7fe      	b.n	80017e0 <Error_Handler+0x8>
	...

080017e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_MspInit+0x4c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a0f      	ldr	r2, [pc, #60]	; (8001830 <HAL_MspInit+0x4c>)
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_MspInit+0x4c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_MspInit+0x4c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_MspInit+0x4c>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_MspInit+0x4c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	; 0x30
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a49      	ldr	r2, [pc, #292]	; (8001978 <HAL_ADC_MspInit+0x144>)
 8001852:	4293      	cmp	r3, r2
 8001854:	f040 808b 	bne.w	800196e <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_ADC_MspInit+0x148>)
 800185e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001860:	4a46      	ldr	r2, [pc, #280]	; (800197c <HAL_ADC_MspInit+0x148>)
 8001862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001866:	6453      	str	r3, [r2, #68]	; 0x44
 8001868:	4b44      	ldr	r3, [pc, #272]	; (800197c <HAL_ADC_MspInit+0x148>)
 800186a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	4b40      	ldr	r3, [pc, #256]	; (800197c <HAL_ADC_MspInit+0x148>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	4a3f      	ldr	r2, [pc, #252]	; (800197c <HAL_ADC_MspInit+0x148>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	6313      	str	r3, [r2, #48]	; 0x30
 8001884:	4b3d      	ldr	r3, [pc, #244]	; (800197c <HAL_ADC_MspInit+0x148>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001890:	2300      	movs	r3, #0
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	4b39      	ldr	r3, [pc, #228]	; (800197c <HAL_ADC_MspInit+0x148>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	4a38      	ldr	r2, [pc, #224]	; (800197c <HAL_ADC_MspInit+0x148>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6313      	str	r3, [r2, #48]	; 0x30
 80018a0:	4b36      	ldr	r3, [pc, #216]	; (800197c <HAL_ADC_MspInit+0x148>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	4b32      	ldr	r3, [pc, #200]	; (800197c <HAL_ADC_MspInit+0x148>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	4a31      	ldr	r2, [pc, #196]	; (800197c <HAL_ADC_MspInit+0x148>)
 80018b6:	f043 0302 	orr.w	r3, r3, #2
 80018ba:	6313      	str	r3, [r2, #48]	; 0x30
 80018bc:	4b2f      	ldr	r3, [pc, #188]	; (800197c <HAL_ADC_MspInit+0x148>)
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VOL_METER_Pin|R_RECEIVER_Pin;
 80018c8:	2318      	movs	r3, #24
 80018ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018cc:	2303      	movs	r3, #3
 80018ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	4619      	mov	r1, r3
 80018da:	4829      	ldr	r0, [pc, #164]	; (8001980 <HAL_ADC_MspInit+0x14c>)
 80018dc:	f001 fc98 	bl	8003210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_RECEIVER_Pin;
 80018e0:	2310      	movs	r3, #16
 80018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e4:	2303      	movs	r3, #3
 80018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RF_RECEIVER_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	4824      	ldr	r0, [pc, #144]	; (8001984 <HAL_ADC_MspInit+0x150>)
 80018f4:	f001 fc8c 	bl	8003210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L_RECEIVER_Pin|LF_RECEIVER_Pin;
 80018f8:	2303      	movs	r3, #3
 80018fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fc:	2303      	movs	r3, #3
 80018fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	4619      	mov	r1, r3
 800190a:	481f      	ldr	r0, [pc, #124]	; (8001988 <HAL_ADC_MspInit+0x154>)
 800190c:	f001 fc80 	bl	8003210 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001910:	4b1e      	ldr	r3, [pc, #120]	; (800198c <HAL_ADC_MspInit+0x158>)
 8001912:	4a1f      	ldr	r2, [pc, #124]	; (8001990 <HAL_ADC_MspInit+0x15c>)
 8001914:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <HAL_ADC_MspInit+0x158>)
 8001918:	2200      	movs	r2, #0
 800191a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_ADC_MspInit+0x158>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001922:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_ADC_MspInit+0x158>)
 8001924:	2200      	movs	r2, #0
 8001926:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_ADC_MspInit+0x158>)
 800192a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800192e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001930:	4b16      	ldr	r3, [pc, #88]	; (800198c <HAL_ADC_MspInit+0x158>)
 8001932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001936:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <HAL_ADC_MspInit+0x158>)
 800193a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800193e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_ADC_MspInit+0x158>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <HAL_ADC_MspInit+0x158>)
 8001948:	2200      	movs	r2, #0
 800194a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <HAL_ADC_MspInit+0x158>)
 800194e:	2200      	movs	r2, #0
 8001950:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001952:	480e      	ldr	r0, [pc, #56]	; (800198c <HAL_ADC_MspInit+0x158>)
 8001954:	f001 f972 	bl	8002c3c <HAL_DMA_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 800195e:	f7ff ff3b 	bl	80017d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a09      	ldr	r2, [pc, #36]	; (800198c <HAL_ADC_MspInit+0x158>)
 8001966:	639a      	str	r2, [r3, #56]	; 0x38
 8001968:	4a08      	ldr	r2, [pc, #32]	; (800198c <HAL_ADC_MspInit+0x158>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800196e:	bf00      	nop
 8001970:	3730      	adds	r7, #48	; 0x30
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40012000 	.word	0x40012000
 800197c:	40023800 	.word	0x40023800
 8001980:	40020800 	.word	0x40020800
 8001984:	40020000 	.word	0x40020000
 8001988:	40020400 	.word	0x40020400
 800198c:	20000264 	.word	0x20000264
 8001990:	40026410 	.word	0x40026410

08001994 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	; 0x30
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a32      	ldr	r2, [pc, #200]	; (8001a7c <HAL_SPI_MspInit+0xe8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d12c      	bne.n	8001a10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
 80019ba:	4b31      	ldr	r3, [pc, #196]	; (8001a80 <HAL_SPI_MspInit+0xec>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	4a30      	ldr	r2, [pc, #192]	; (8001a80 <HAL_SPI_MspInit+0xec>)
 80019c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	4b2e      	ldr	r3, [pc, #184]	; (8001a80 <HAL_SPI_MspInit+0xec>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <HAL_SPI_MspInit+0xec>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a29      	ldr	r2, [pc, #164]	; (8001a80 <HAL_SPI_MspInit+0xec>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <HAL_SPI_MspInit+0xec>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDI_Pin;
 80019ee:	23e0      	movs	r3, #224	; 0xe0
 80019f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019fe:	2305      	movs	r3, #5
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	4619      	mov	r1, r3
 8001a08:	481e      	ldr	r0, [pc, #120]	; (8001a84 <HAL_SPI_MspInit+0xf0>)
 8001a0a:	f001 fc01 	bl	8003210 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a0e:	e031      	b.n	8001a74 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a1c      	ldr	r2, [pc, #112]	; (8001a88 <HAL_SPI_MspInit+0xf4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d12c      	bne.n	8001a74 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_SPI_MspInit+0xec>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <HAL_SPI_MspInit+0xec>)
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_SPI_MspInit+0xec>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_SPI_MspInit+0xec>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <HAL_SPI_MspInit+0xec>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_SPI_MspInit+0xec>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CLK_Pin|DATA_IN_Pin;
 8001a52:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a64:	2305      	movs	r3, #5
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a68:	f107 031c 	add.w	r3, r7, #28
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4807      	ldr	r0, [pc, #28]	; (8001a8c <HAL_SPI_MspInit+0xf8>)
 8001a70:	f001 fbce 	bl	8003210 <HAL_GPIO_Init>
}
 8001a74:	bf00      	nop
 8001a76:	3730      	adds	r7, #48	; 0x30
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40013000 	.word	0x40013000
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000
 8001a88:	40003800 	.word	0x40003800
 8001a8c:	40020400 	.word	0x40020400

08001a90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a44      	ldr	r2, [pc, #272]	; (8001bb0 <HAL_TIM_Base_MspInit+0x120>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d10e      	bne.n	8001ac0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	4b43      	ldr	r3, [pc, #268]	; (8001bb4 <HAL_TIM_Base_MspInit+0x124>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	4a42      	ldr	r2, [pc, #264]	; (8001bb4 <HAL_TIM_Base_MspInit+0x124>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab2:	4b40      	ldr	r3, [pc, #256]	; (8001bb4 <HAL_TIM_Base_MspInit+0x124>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	61fb      	str	r3, [r7, #28]
 8001abc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001abe:	e072      	b.n	8001ba6 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM4)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a3c      	ldr	r2, [pc, #240]	; (8001bb8 <HAL_TIM_Base_MspInit+0x128>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <HAL_TIM_Base_MspInit+0x124>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	4a38      	ldr	r2, [pc, #224]	; (8001bb4 <HAL_TIM_Base_MspInit+0x124>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ada:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <HAL_TIM_Base_MspInit+0x124>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	69bb      	ldr	r3, [r7, #24]
}
 8001ae6:	e05e      	b.n	8001ba6 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM6)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a33      	ldr	r2, [pc, #204]	; (8001bbc <HAL_TIM_Base_MspInit+0x12c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d10e      	bne.n	8001b10 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <HAL_TIM_Base_MspInit+0x124>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a2e      	ldr	r2, [pc, #184]	; (8001bb4 <HAL_TIM_Base_MspInit+0x124>)
 8001afc:	f043 0310 	orr.w	r3, r3, #16
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b2c      	ldr	r3, [pc, #176]	; (8001bb4 <HAL_TIM_Base_MspInit+0x124>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697b      	ldr	r3, [r7, #20]
}
 8001b0e:	e04a      	b.n	8001ba6 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM9)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a2a      	ldr	r2, [pc, #168]	; (8001bc0 <HAL_TIM_Base_MspInit+0x130>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d10e      	bne.n	8001b38 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_TIM_Base_MspInit+0x124>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a24      	ldr	r2, [pc, #144]	; (8001bb4 <HAL_TIM_Base_MspInit+0x124>)
 8001b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <HAL_TIM_Base_MspInit+0x124>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
}
 8001b36:	e036      	b.n	8001ba6 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM13)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a21      	ldr	r2, [pc, #132]	; (8001bc4 <HAL_TIM_Base_MspInit+0x134>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d116      	bne.n	8001b70 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_TIM_Base_MspInit+0x124>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a1a      	ldr	r2, [pc, #104]	; (8001bb4 <HAL_TIM_Base_MspInit+0x124>)
 8001b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_TIM_Base_MspInit+0x124>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2100      	movs	r1, #0
 8001b62:	202c      	movs	r0, #44	; 0x2c
 8001b64:	f001 f833 	bl	8002bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001b68:	202c      	movs	r0, #44	; 0x2c
 8001b6a:	f001 f84c 	bl	8002c06 <HAL_NVIC_EnableIRQ>
}
 8001b6e:	e01a      	b.n	8001ba6 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM14)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <HAL_TIM_Base_MspInit+0x138>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d115      	bne.n	8001ba6 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <HAL_TIM_Base_MspInit+0x124>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	4a0c      	ldr	r2, [pc, #48]	; (8001bb4 <HAL_TIM_Base_MspInit+0x124>)
 8001b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b88:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_TIM_Base_MspInit+0x124>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2100      	movs	r1, #0
 8001b9a:	202d      	movs	r0, #45	; 0x2d
 8001b9c:	f001 f817 	bl	8002bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001ba0:	202d      	movs	r0, #45	; 0x2d
 8001ba2:	f001 f830 	bl	8002c06 <HAL_NVIC_EnableIRQ>
}
 8001ba6:	bf00      	nop
 8001ba8:	3720      	adds	r7, #32
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40010000 	.word	0x40010000
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40000800 	.word	0x40000800
 8001bbc:	40001000 	.word	0x40001000
 8001bc0:	40014000 	.word	0x40014000
 8001bc4:	40001c00 	.word	0x40001c00
 8001bc8:	40002000 	.word	0x40002000

08001bcc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08c      	sub	sp, #48	; 0x30
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 031c 	add.w	r3, r7, #28
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bec:	d14b      	bne.n	8001c86 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	4b3f      	ldr	r3, [pc, #252]	; (8001cf0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a3e      	ldr	r2, [pc, #248]	; (8001cf0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b3c      	ldr	r3, [pc, #240]	; (8001cf0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	61bb      	str	r3, [r7, #24]
 8001c08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a37      	ldr	r2, [pc, #220]	; (8001cf0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b35      	ldr	r3, [pc, #212]	; (8001cf0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a30      	ldr	r2, [pc, #192]	; (8001cf0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c54:	2301      	movs	r3, #1
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4825      	ldr	r0, [pc, #148]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0x128>)
 8001c60:	f001 fad6 	bl	8003210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c64:	2308      	movs	r3, #8
 8001c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c74:	2301      	movs	r3, #1
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	481e      	ldr	r0, [pc, #120]	; (8001cf8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001c80:	f001 fac6 	bl	8003210 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001c84:	e030      	b.n	8001ce8 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM5)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <HAL_TIM_Encoder_MspInit+0x130>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d12b      	bne.n	8001ce8 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	4a15      	ldr	r2, [pc, #84]	; (8001cf0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001c9a:	f043 0308 	orr.w	r3, r3, #8
 8001c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cac:	2300      	movs	r3, #0
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	4a0e      	ldr	r2, [pc, #56]	; (8001cf0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4804      	ldr	r0, [pc, #16]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0x128>)
 8001ce4:	f001 fa94 	bl	8003210 <HAL_GPIO_Init>
}
 8001ce8:	bf00      	nop
 8001cea:	3730      	adds	r7, #48	; 0x30
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	40000c00 	.word	0x40000c00

08001d00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a24      	ldr	r2, [pc, #144]	; (8001db0 <HAL_TIM_MspPostInit+0xb0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d11f      	bne.n	8001d62 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <HAL_TIM_MspPostInit+0xb4>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a22      	ldr	r2, [pc, #136]	; (8001db4 <HAL_TIM_MspPostInit+0xb4>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <HAL_TIM_MspPostInit+0xb4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = LPWMA_Pin|LPWMB_Pin|RPWMA_Pin|RPWMB_Pin;
 8001d3e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d50:	2302      	movs	r3, #2
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4817      	ldr	r0, [pc, #92]	; (8001db8 <HAL_TIM_MspPostInit+0xb8>)
 8001d5c:	f001 fa58 	bl	8003210 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001d60:	e022      	b.n	8001da8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a15      	ldr	r2, [pc, #84]	; (8001dbc <HAL_TIM_MspPostInit+0xbc>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d11d      	bne.n	8001da8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <HAL_TIM_MspPostInit+0xb4>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	4a0f      	ldr	r2, [pc, #60]	; (8001db4 <HAL_TIM_MspPostInit+0xb4>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_TIM_MspPostInit+0xb4>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d88:	2304      	movs	r3, #4
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	4807      	ldr	r0, [pc, #28]	; (8001dc0 <HAL_TIM_MspPostInit+0xc0>)
 8001da4:	f001 fa34 	bl	8003210 <HAL_GPIO_Init>
}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40000800 	.word	0x40000800
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	40014000 	.word	0x40014000
 8001dc0:	40020000 	.word	0x40020000

08001dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <HAL_UART_MspInit+0x84>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d12c      	bne.n	8001e40 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_UART_MspInit+0x88>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <HAL_UART_MspInit+0x88>)
 8001df0:	f043 0310 	orr.w	r3, r3, #16
 8001df4:	6453      	str	r3, [r2, #68]	; 0x44
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_UART_MspInit+0x88>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_UART_MspInit+0x88>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_UART_MspInit+0x88>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_UART_MspInit+0x88>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001e1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e30:	2307      	movs	r3, #7
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4805      	ldr	r0, [pc, #20]	; (8001e50 <HAL_UART_MspInit+0x8c>)
 8001e3c:	f001 f9e8 	bl	8003210 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e40:	bf00      	nop
 8001e42:	3728      	adds	r7, #40	; 0x28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40011000 	.word	0x40011000
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020000 	.word	0x40020000

08001e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001e58:	f002 f84c 	bl	8003ef4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <NMI_Handler+0x8>

08001e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <HardFault_Handler+0x4>

08001e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <MemManage_Handler+0x4>

08001e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <BusFault_Handler+0x4>

08001e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <UsageFault_Handler+0x4>

08001e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea4:	f000 f974 	bl	8002190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001eb0:	4802      	ldr	r0, [pc, #8]	; (8001ebc <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001eb2:	f002 fff9 	bl	8004ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200004dc 	.word	0x200004dc

08001ec0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001ec4:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001ec6:	f002 ffef 	bl	8004ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000524 	.word	0x20000524

08001ed4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <DMA2_Stream0_IRQHandler+0x10>)
 8001eda:	f000 ff5d 	bl	8002d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000264 	.word	0x20000264

08001ee8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return 1;
 8001eec:	2301      	movs	r3, #1
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <_kill>:

int _kill(int pid, int sig)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f02:	f005 fb4d 	bl	80075a0 <__errno>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2216      	movs	r2, #22
 8001f0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_exit>:

void _exit (int status)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f20:	f04f 31ff 	mov.w	r1, #4294967295
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ffe7 	bl	8001ef8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f2a:	e7fe      	b.n	8001f2a <_exit+0x12>

08001f2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	e00a      	b.n	8001f54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f3e:	f3af 8000 	nop.w
 8001f42:	4601      	mov	r1, r0
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	60ba      	str	r2, [r7, #8]
 8001f4a:	b2ca      	uxtb	r2, r1
 8001f4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3301      	adds	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dbf0      	blt.n	8001f3e <_read+0x12>
  }

  return len;
 8001f5c:	687b      	ldr	r3, [r7, #4]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	e009      	b.n	8001f8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	60ba      	str	r2, [r7, #8]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dbf1      	blt.n	8001f78 <_write+0x12>
  }
  return len;
 8001f94:	687b      	ldr	r3, [r7, #4]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <_close>:

int _close(int file)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fc6:	605a      	str	r2, [r3, #4]
  return 0;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <_isatty>:

int _isatty(int file)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002010:	4a14      	ldr	r2, [pc, #80]	; (8002064 <_sbrk+0x5c>)
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <_sbrk+0x60>)
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <_sbrk+0x64>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <_sbrk+0x64>)
 8002026:	4a12      	ldr	r2, [pc, #72]	; (8002070 <_sbrk+0x68>)
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	429a      	cmp	r2, r3
 8002036:	d207      	bcs.n	8002048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002038:	f005 fab2 	bl	80075a0 <__errno>
 800203c:	4603      	mov	r3, r0
 800203e:	220c      	movs	r2, #12
 8002040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	e009      	b.n	800205c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <_sbrk+0x64>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	4a05      	ldr	r2, [pc, #20]	; (800206c <_sbrk+0x64>)
 8002058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800205a:	68fb      	ldr	r3, [r7, #12]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20020000 	.word	0x20020000
 8002068:	00000400 	.word	0x00000400
 800206c:	200005b0 	.word	0x200005b0
 8002070:	20000748 	.word	0x20000748

08002074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <SystemInit+0x20>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <SystemInit+0x20>)
 8002080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800209c:	480d      	ldr	r0, [pc, #52]	; (80020d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800209e:	490e      	ldr	r1, [pc, #56]	; (80020d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020a0:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a4:	e002      	b.n	80020ac <LoopCopyDataInit>

080020a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020aa:	3304      	adds	r3, #4

080020ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b0:	d3f9      	bcc.n	80020a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020b2:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020b4:	4c0b      	ldr	r4, [pc, #44]	; (80020e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b8:	e001      	b.n	80020be <LoopFillZerobss>

080020ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020bc:	3204      	adds	r2, #4

080020be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c0:	d3fb      	bcc.n	80020ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020c2:	f7ff ffd7 	bl	8002074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020c6:	f005 fa71 	bl	80075ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ca:	f7fe feeb 	bl	8000ea4 <main>
  bx  lr    
 80020ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d8:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80020dc:	080098c4 	.word	0x080098c4
  ldr r2, =_sbss
 80020e0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80020e4:	20000744 	.word	0x20000744

080020e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020e8:	e7fe      	b.n	80020e8 <ADC_IRQHandler>
	...

080020ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020f0:	4b0e      	ldr	r3, [pc, #56]	; (800212c <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0d      	ldr	r2, [pc, #52]	; (800212c <HAL_Init+0x40>)
 80020f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_Init+0x40>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0a      	ldr	r2, [pc, #40]	; (800212c <HAL_Init+0x40>)
 8002102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_Init+0x40>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a07      	ldr	r2, [pc, #28]	; (800212c <HAL_Init+0x40>)
 800210e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002114:	2003      	movs	r0, #3
 8002116:	f000 fd4f 	bl	8002bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800211a:	200f      	movs	r0, #15
 800211c:	f000 f808 	bl	8002130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002120:	f7ff fb60 	bl	80017e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023c00 	.word	0x40023c00

08002130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_InitTick+0x54>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_InitTick+0x58>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002146:	fbb3 f3f1 	udiv	r3, r3, r1
 800214a:	fbb2 f3f3 	udiv	r3, r2, r3
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fd67 	bl	8002c22 <HAL_SYSTICK_Config>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e00e      	b.n	800217c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b0f      	cmp	r3, #15
 8002162:	d80a      	bhi.n	800217a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002164:	2200      	movs	r2, #0
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f000 fd2f 	bl	8002bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <HAL_InitTick+0x5c>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e000      	b.n	800217c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000000 	.word	0x20000000
 8002188:	20000008 	.word	0x20000008
 800218c:	20000004 	.word	0x20000004

08002190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_IncTick+0x20>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_IncTick+0x24>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <HAL_IncTick+0x24>)
 80021a2:	6013      	str	r3, [r2, #0]
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000008 	.word	0x20000008
 80021b4:	200005b4 	.word	0x200005b4

080021b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return uwTick;
 80021bc:	4b03      	ldr	r3, [pc, #12]	; (80021cc <HAL_GetTick+0x14>)
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	200005b4 	.word	0x200005b4

080021d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff ffee 	bl	80021b8 <HAL_GetTick>
 80021dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d005      	beq.n	80021f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_Delay+0x44>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021f6:	bf00      	nop
 80021f8:	f7ff ffde 	bl	80021b8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	429a      	cmp	r2, r3
 8002206:	d8f7      	bhi.n	80021f8 <HAL_Delay+0x28>
  {
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000008 	.word	0x20000008

08002218 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e033      	b.n	8002296 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff fafc 	bl	8001834 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b00      	cmp	r3, #0
 8002254:	d118      	bne.n	8002288 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800225e:	f023 0302 	bic.w	r3, r3, #2
 8002262:	f043 0202 	orr.w	r2, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fad8 	bl	8002820 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f023 0303 	bic.w	r3, r3, #3
 800227e:	f043 0201 	orr.w	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
 8002286:	e001      	b.n	800228c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_Start+0x1a>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e0b2      	b.n	8002420 <HAL_ADC_Start+0x180>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d018      	beq.n	8002302 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022e0:	4b52      	ldr	r3, [pc, #328]	; (800242c <HAL_ADC_Start+0x18c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a52      	ldr	r2, [pc, #328]	; (8002430 <HAL_ADC_Start+0x190>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	0c9a      	lsrs	r2, r3, #18
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80022f4:	e002      	b.n	80022fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f9      	bne.n	80022f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d17a      	bne.n	8002406 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800233a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234e:	d106      	bne.n	800235e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002354:	f023 0206 	bic.w	r2, r3, #6
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	645a      	str	r2, [r3, #68]	; 0x44
 800235c:	e002      	b.n	8002364 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800236c:	4b31      	ldr	r3, [pc, #196]	; (8002434 <HAL_ADC_Start+0x194>)
 800236e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002378:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	2b00      	cmp	r3, #0
 8002384:	d12a      	bne.n	80023dc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a2b      	ldr	r2, [pc, #172]	; (8002438 <HAL_ADC_Start+0x198>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d015      	beq.n	80023bc <HAL_ADC_Start+0x11c>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a29      	ldr	r2, [pc, #164]	; (800243c <HAL_ADC_Start+0x19c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d105      	bne.n	80023a6 <HAL_ADC_Start+0x106>
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <HAL_ADC_Start+0x194>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 031f 	and.w	r3, r3, #31
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a25      	ldr	r2, [pc, #148]	; (8002440 <HAL_ADC_Start+0x1a0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d136      	bne.n	800241e <HAL_ADC_Start+0x17e>
 80023b0:	4b20      	ldr	r3, [pc, #128]	; (8002434 <HAL_ADC_Start+0x194>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d130      	bne.n	800241e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d129      	bne.n	800241e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	e020      	b.n	800241e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a15      	ldr	r2, [pc, #84]	; (8002438 <HAL_ADC_Start+0x198>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d11b      	bne.n	800241e <HAL_ADC_Start+0x17e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d114      	bne.n	800241e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	e00b      	b.n	800241e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f043 0210 	orr.w	r2, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	f043 0201 	orr.w	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	20000000 	.word	0x20000000
 8002430:	431bde83 	.word	0x431bde83
 8002434:	40012300 	.word	0x40012300
 8002438:	40012000 	.word	0x40012000
 800243c:	40012100 	.word	0x40012100
 8002440:	40012200 	.word	0x40012200

08002444 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_ADC_Stop+0x16>
 8002456:	2302      	movs	r3, #2
 8002458:	e021      	b.n	800249e <HAL_ADC_Stop+0x5a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0201 	bic.w	r2, r2, #1
 8002470:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d109      	bne.n	8002494 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c6:	d113      	bne.n	80024f0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d6:	d10b      	bne.n	80024f0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f043 0220 	orr.w	r2, r3, #32
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e063      	b.n	80025b8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80024f0:	f7ff fe62 	bl	80021b8 <HAL_GetTick>
 80024f4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024f6:	e021      	b.n	800253c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fe:	d01d      	beq.n	800253c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d007      	beq.n	8002516 <HAL_ADC_PollForConversion+0x6c>
 8002506:	f7ff fe57 	bl	80021b8 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d212      	bcs.n	800253c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b02      	cmp	r3, #2
 8002522:	d00b      	beq.n	800253c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	f043 0204 	orr.w	r2, r3, #4
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e03d      	b.n	80025b8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b02      	cmp	r3, #2
 8002548:	d1d6      	bne.n	80024f8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f06f 0212 	mvn.w	r2, #18
 8002552:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d123      	bne.n	80025b6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002572:	2b00      	cmp	r3, #0
 8002574:	d11f      	bne.n	80025b6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800258e:	2b00      	cmp	r3, #0
 8002590:	d111      	bne.n	80025b6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d105      	bne.n	80025b6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f043 0201 	orr.w	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x1c>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e105      	b.n	8002804 <HAL_ADC_ConfigChannel+0x228>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b09      	cmp	r3, #9
 8002606:	d925      	bls.n	8002654 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68d9      	ldr	r1, [r3, #12]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	3b1e      	subs	r3, #30
 800261e:	2207      	movs	r2, #7
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43da      	mvns	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	400a      	ands	r2, r1
 800262c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68d9      	ldr	r1, [r3, #12]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	4618      	mov	r0, r3
 8002640:	4603      	mov	r3, r0
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4403      	add	r3, r0
 8002646:	3b1e      	subs	r3, #30
 8002648:	409a      	lsls	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	e022      	b.n	800269a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6919      	ldr	r1, [r3, #16]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	2207      	movs	r2, #7
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43da      	mvns	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	400a      	ands	r2, r1
 8002676:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6919      	ldr	r1, [r3, #16]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4618      	mov	r0, r3
 800268a:	4603      	mov	r3, r0
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4403      	add	r3, r0
 8002690:	409a      	lsls	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b06      	cmp	r3, #6
 80026a0:	d824      	bhi.n	80026ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	3b05      	subs	r3, #5
 80026b4:	221f      	movs	r2, #31
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43da      	mvns	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	400a      	ands	r2, r1
 80026c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	4618      	mov	r0, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	3b05      	subs	r3, #5
 80026de:	fa00 f203 	lsl.w	r2, r0, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	635a      	str	r2, [r3, #52]	; 0x34
 80026ea:	e04c      	b.n	8002786 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	d824      	bhi.n	800273e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	3b23      	subs	r3, #35	; 0x23
 8002706:	221f      	movs	r2, #31
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43da      	mvns	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	400a      	ands	r2, r1
 8002714:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	b29b      	uxth	r3, r3
 8002722:	4618      	mov	r0, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	3b23      	subs	r3, #35	; 0x23
 8002730:	fa00 f203 	lsl.w	r2, r0, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
 800273c:	e023      	b.n	8002786 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	3b41      	subs	r3, #65	; 0x41
 8002750:	221f      	movs	r2, #31
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43da      	mvns	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	400a      	ands	r2, r1
 800275e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	4618      	mov	r0, r3
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	3b41      	subs	r3, #65	; 0x41
 800277a:	fa00 f203 	lsl.w	r2, r0, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002786:	4b22      	ldr	r3, [pc, #136]	; (8002810 <HAL_ADC_ConfigChannel+0x234>)
 8002788:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a21      	ldr	r2, [pc, #132]	; (8002814 <HAL_ADC_ConfigChannel+0x238>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d109      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x1cc>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b12      	cmp	r3, #18
 800279a:	d105      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a19      	ldr	r2, [pc, #100]	; (8002814 <HAL_ADC_ConfigChannel+0x238>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d123      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x21e>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b10      	cmp	r3, #16
 80027b8:	d003      	beq.n	80027c2 <HAL_ADC_ConfigChannel+0x1e6>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b11      	cmp	r3, #17
 80027c0:	d11b      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b10      	cmp	r3, #16
 80027d4:	d111      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <HAL_ADC_ConfigChannel+0x23c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a10      	ldr	r2, [pc, #64]	; (800281c <HAL_ADC_ConfigChannel+0x240>)
 80027dc:	fba2 2303 	umull	r2, r3, r2, r3
 80027e0:	0c9a      	lsrs	r2, r3, #18
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027ec:	e002      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f9      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	40012300 	.word	0x40012300
 8002814:	40012000 	.word	0x40012000
 8002818:	20000000 	.word	0x20000000
 800281c:	431bde83 	.word	0x431bde83

08002820 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002828:	4b79      	ldr	r3, [pc, #484]	; (8002a10 <ADC_Init+0x1f0>)
 800282a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	431a      	orrs	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002854:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6859      	ldr	r1, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	021a      	lsls	r2, r3, #8
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002878:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800289a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6899      	ldr	r1, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	4a58      	ldr	r2, [pc, #352]	; (8002a14 <ADC_Init+0x1f4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d022      	beq.n	80028fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6899      	ldr	r1, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6899      	ldr	r1, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	e00f      	b.n	800291e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800290c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800291c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0202 	bic.w	r2, r2, #2
 800292c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6899      	ldr	r1, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	7e1b      	ldrb	r3, [r3, #24]
 8002938:	005a      	lsls	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01b      	beq.n	8002984 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800295a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800296a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6859      	ldr	r1, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	3b01      	subs	r3, #1
 8002978:	035a      	lsls	r2, r3, #13
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	e007      	b.n	8002994 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002992:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	051a      	lsls	r2, r3, #20
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6899      	ldr	r1, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029d6:	025a      	lsls	r2, r3, #9
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6899      	ldr	r1, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	029a      	lsls	r2, r3, #10
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	609a      	str	r2, [r3, #8]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	40012300 	.word	0x40012300
 8002a14:	0f000001 	.word	0x0f000001

08002a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <__NVIC_SetPriorityGrouping+0x44>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a34:	4013      	ands	r3, r2
 8002a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a4a:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <__NVIC_SetPriorityGrouping+0x44>)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	60d3      	str	r3, [r2, #12]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a64:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <__NVIC_GetPriorityGrouping+0x18>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	0a1b      	lsrs	r3, r3, #8
 8002a6a:	f003 0307 	and.w	r3, r3, #7
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	db0b      	blt.n	8002aa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	f003 021f 	and.w	r2, r3, #31
 8002a94:	4907      	ldr	r1, [pc, #28]	; (8002ab4 <__NVIC_EnableIRQ+0x38>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	e000e100 	.word	0xe000e100

08002ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	db0a      	blt.n	8002ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	490c      	ldr	r1, [pc, #48]	; (8002b04 <__NVIC_SetPriority+0x4c>)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	0112      	lsls	r2, r2, #4
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	440b      	add	r3, r1
 8002adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae0:	e00a      	b.n	8002af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4908      	ldr	r1, [pc, #32]	; (8002b08 <__NVIC_SetPriority+0x50>)
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	3b04      	subs	r3, #4
 8002af0:	0112      	lsls	r2, r2, #4
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	440b      	add	r3, r1
 8002af6:	761a      	strb	r2, [r3, #24]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000e100 	.word	0xe000e100
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f1c3 0307 	rsb	r3, r3, #7
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	bf28      	it	cs
 8002b2a:	2304      	movcs	r3, #4
 8002b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2b06      	cmp	r3, #6
 8002b34:	d902      	bls.n	8002b3c <NVIC_EncodePriority+0x30>
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3b03      	subs	r3, #3
 8002b3a:	e000      	b.n	8002b3e <NVIC_EncodePriority+0x32>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	f04f 32ff 	mov.w	r2, #4294967295
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	401a      	ands	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b54:	f04f 31ff 	mov.w	r1, #4294967295
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	43d9      	mvns	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	4313      	orrs	r3, r2
         );
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3724      	adds	r7, #36	; 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b84:	d301      	bcc.n	8002b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00f      	b.n	8002baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <SysTick_Config+0x40>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b92:	210f      	movs	r1, #15
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	f7ff ff8e 	bl	8002ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <SysTick_Config+0x40>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ba2:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <SysTick_Config+0x40>)
 8002ba4:	2207      	movs	r2, #7
 8002ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	e000e010 	.word	0xe000e010

08002bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff ff29 	bl	8002a18 <__NVIC_SetPriorityGrouping>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b086      	sub	sp, #24
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002be0:	f7ff ff3e 	bl	8002a60 <__NVIC_GetPriorityGrouping>
 8002be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	6978      	ldr	r0, [r7, #20]
 8002bec:	f7ff ff8e 	bl	8002b0c <NVIC_EncodePriority>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff5d 	bl	8002ab8 <__NVIC_SetPriority>
}
 8002bfe:	bf00      	nop
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff31 	bl	8002a7c <__NVIC_EnableIRQ>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff ffa2 	bl	8002b74 <SysTick_Config>
 8002c30:	4603      	mov	r3, r0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c48:	f7ff fab6 	bl	80021b8 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e099      	b.n	8002d8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0201 	bic.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c78:	e00f      	b.n	8002c9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c7a:	f7ff fa9d 	bl	80021b8 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b05      	cmp	r3, #5
 8002c86:	d908      	bls.n	8002c9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2203      	movs	r2, #3
 8002c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e078      	b.n	8002d8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e8      	bne.n	8002c7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4b38      	ldr	r3, [pc, #224]	; (8002d94 <HAL_DMA_Init+0x158>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d107      	bne.n	8002d04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f023 0307 	bic.w	r3, r3, #7
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d117      	bne.n	8002d5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00e      	beq.n	8002d5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f9e9 	bl	8003118 <DMA_CheckFifoParam>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2240      	movs	r2, #64	; 0x40
 8002d50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e016      	b.n	8002d8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f9a0 	bl	80030ac <DMA_CalcBaseAndBitshift>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d74:	223f      	movs	r2, #63	; 0x3f
 8002d76:	409a      	lsls	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	f010803f 	.word	0xf010803f

08002d98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002da4:	4b8e      	ldr	r3, [pc, #568]	; (8002fe0 <HAL_DMA_IRQHandler+0x248>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a8e      	ldr	r2, [pc, #568]	; (8002fe4 <HAL_DMA_IRQHandler+0x24c>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	0a9b      	lsrs	r3, r3, #10
 8002db0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc2:	2208      	movs	r2, #8
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01a      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d013      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0204 	bic.w	r2, r2, #4
 8002dea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	2208      	movs	r2, #8
 8002df2:	409a      	lsls	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	f043 0201 	orr.w	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	2201      	movs	r2, #1
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d012      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	2201      	movs	r2, #1
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e32:	f043 0202 	orr.w	r2, r3, #2
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3e:	2204      	movs	r2, #4
 8002e40:	409a      	lsls	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d012      	beq.n	8002e70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00b      	beq.n	8002e70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e68:	f043 0204 	orr.w	r2, r3, #4
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e74:	2210      	movs	r2, #16
 8002e76:	409a      	lsls	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d043      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d03c      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e92:	2210      	movs	r2, #16
 8002e94:	409a      	lsls	r2, r3
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d018      	beq.n	8002eda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d108      	bne.n	8002ec8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d024      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	4798      	blx	r3
 8002ec6:	e01f      	b.n	8002f08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01b      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4798      	blx	r3
 8002ed8:	e016      	b.n	8002f08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d107      	bne.n	8002ef8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0208 	bic.w	r2, r2, #8
 8002ef6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 808f 	beq.w	8003038 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8087 	beq.w	8003038 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2e:	2220      	movs	r2, #32
 8002f30:	409a      	lsls	r2, r3
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b05      	cmp	r3, #5
 8002f40:	d136      	bne.n	8002fb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0216 	bic.w	r2, r2, #22
 8002f50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d103      	bne.n	8002f72 <HAL_DMA_IRQHandler+0x1da>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0208 	bic.w	r2, r2, #8
 8002f80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f86:	223f      	movs	r2, #63	; 0x3f
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d07e      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4798      	blx	r3
        }
        return;
 8002fae:	e079      	b.n	80030a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01d      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10d      	bne.n	8002fe8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d031      	beq.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	4798      	blx	r3
 8002fdc:	e02c      	b.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
 8002fde:	bf00      	nop
 8002fe0:	20000000 	.word	0x20000000
 8002fe4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d023      	beq.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4798      	blx	r3
 8002ff8:	e01e      	b.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10f      	bne.n	8003028 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0210 	bic.w	r2, r2, #16
 8003016:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303c:	2b00      	cmp	r3, #0
 800303e:	d032      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d022      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2205      	movs	r2, #5
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	3301      	adds	r3, #1
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	429a      	cmp	r2, r3
 800306e:	d307      	bcc.n	8003080 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f2      	bne.n	8003064 <HAL_DMA_IRQHandler+0x2cc>
 800307e:	e000      	b.n	8003082 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003080:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
 80030a2:	e000      	b.n	80030a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80030a4:	bf00      	nop
    }
  }
}
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	3b10      	subs	r3, #16
 80030bc:	4a14      	ldr	r2, [pc, #80]	; (8003110 <DMA_CalcBaseAndBitshift+0x64>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030c6:	4a13      	ldr	r2, [pc, #76]	; (8003114 <DMA_CalcBaseAndBitshift+0x68>)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d909      	bls.n	80030ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030e2:	f023 0303 	bic.w	r3, r3, #3
 80030e6:	1d1a      	adds	r2, r3, #4
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	659a      	str	r2, [r3, #88]	; 0x58
 80030ec:	e007      	b.n	80030fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030f6:	f023 0303 	bic.w	r3, r3, #3
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	aaaaaaab 	.word	0xaaaaaaab
 8003114:	080091b0 	.word	0x080091b0

08003118 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d11f      	bne.n	8003172 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d856      	bhi.n	80031e6 <DMA_CheckFifoParam+0xce>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <DMA_CheckFifoParam+0x28>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003151 	.word	0x08003151
 8003144:	08003163 	.word	0x08003163
 8003148:	08003151 	.word	0x08003151
 800314c:	080031e7 	.word	0x080031e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d046      	beq.n	80031ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003160:	e043      	b.n	80031ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003166:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800316a:	d140      	bne.n	80031ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003170:	e03d      	b.n	80031ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800317a:	d121      	bne.n	80031c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b03      	cmp	r3, #3
 8003180:	d837      	bhi.n	80031f2 <DMA_CheckFifoParam+0xda>
 8003182:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <DMA_CheckFifoParam+0x70>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	08003199 	.word	0x08003199
 800318c:	0800319f 	.word	0x0800319f
 8003190:	08003199 	.word	0x08003199
 8003194:	080031b1 	.word	0x080031b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
      break;
 800319c:	e030      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d025      	beq.n	80031f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ae:	e022      	b.n	80031f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031b8:	d11f      	bne.n	80031fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031be:	e01c      	b.n	80031fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d903      	bls.n	80031ce <DMA_CheckFifoParam+0xb6>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d003      	beq.n	80031d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031cc:	e018      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
      break;
 80031d2:	e015      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00e      	beq.n	80031fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
      break;
 80031e4:	e00b      	b.n	80031fe <DMA_CheckFifoParam+0xe6>
      break;
 80031e6:	bf00      	nop
 80031e8:	e00a      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031ea:	bf00      	nop
 80031ec:	e008      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031ee:	bf00      	nop
 80031f0:	e006      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031f2:	bf00      	nop
 80031f4:	e004      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031f6:	bf00      	nop
 80031f8:	e002      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;   
 80031fa:	bf00      	nop
 80031fc:	e000      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003200:	7bfb      	ldrb	r3, [r7, #15]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop

08003210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003210:	b480      	push	{r7}
 8003212:	b089      	sub	sp, #36	; 0x24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	e16b      	b.n	8003504 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800322c:	2201      	movs	r2, #1
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	429a      	cmp	r2, r3
 8003246:	f040 815a 	bne.w	80034fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	2b01      	cmp	r3, #1
 8003254:	d005      	beq.n	8003262 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800325e:	2b02      	cmp	r3, #2
 8003260:	d130      	bne.n	80032c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	2203      	movs	r2, #3
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003298:	2201      	movs	r2, #1
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	f003 0201 	and.w	r2, r3, #1
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d017      	beq.n	8003300 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	2203      	movs	r2, #3
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d123      	bne.n	8003354 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	08da      	lsrs	r2, r3, #3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3208      	adds	r2, #8
 8003314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003318:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	220f      	movs	r2, #15
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	08da      	lsrs	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3208      	adds	r2, #8
 800334e:	69b9      	ldr	r1, [r7, #24]
 8003350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	2203      	movs	r2, #3
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0203 	and.w	r2, r3, #3
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80b4 	beq.w	80034fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	4b60      	ldr	r3, [pc, #384]	; (800351c <HAL_GPIO_Init+0x30c>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	4a5f      	ldr	r2, [pc, #380]	; (800351c <HAL_GPIO_Init+0x30c>)
 80033a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033a4:	6453      	str	r3, [r2, #68]	; 0x44
 80033a6:	4b5d      	ldr	r3, [pc, #372]	; (800351c <HAL_GPIO_Init+0x30c>)
 80033a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033b2:	4a5b      	ldr	r2, [pc, #364]	; (8003520 <HAL_GPIO_Init+0x310>)
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	089b      	lsrs	r3, r3, #2
 80033b8:	3302      	adds	r3, #2
 80033ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	220f      	movs	r2, #15
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a52      	ldr	r2, [pc, #328]	; (8003524 <HAL_GPIO_Init+0x314>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d02b      	beq.n	8003436 <HAL_GPIO_Init+0x226>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a51      	ldr	r2, [pc, #324]	; (8003528 <HAL_GPIO_Init+0x318>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d025      	beq.n	8003432 <HAL_GPIO_Init+0x222>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a50      	ldr	r2, [pc, #320]	; (800352c <HAL_GPIO_Init+0x31c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01f      	beq.n	800342e <HAL_GPIO_Init+0x21e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4f      	ldr	r2, [pc, #316]	; (8003530 <HAL_GPIO_Init+0x320>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d019      	beq.n	800342a <HAL_GPIO_Init+0x21a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a4e      	ldr	r2, [pc, #312]	; (8003534 <HAL_GPIO_Init+0x324>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <HAL_GPIO_Init+0x216>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a4d      	ldr	r2, [pc, #308]	; (8003538 <HAL_GPIO_Init+0x328>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00d      	beq.n	8003422 <HAL_GPIO_Init+0x212>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a4c      	ldr	r2, [pc, #304]	; (800353c <HAL_GPIO_Init+0x32c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d007      	beq.n	800341e <HAL_GPIO_Init+0x20e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a4b      	ldr	r2, [pc, #300]	; (8003540 <HAL_GPIO_Init+0x330>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d101      	bne.n	800341a <HAL_GPIO_Init+0x20a>
 8003416:	2307      	movs	r3, #7
 8003418:	e00e      	b.n	8003438 <HAL_GPIO_Init+0x228>
 800341a:	2308      	movs	r3, #8
 800341c:	e00c      	b.n	8003438 <HAL_GPIO_Init+0x228>
 800341e:	2306      	movs	r3, #6
 8003420:	e00a      	b.n	8003438 <HAL_GPIO_Init+0x228>
 8003422:	2305      	movs	r3, #5
 8003424:	e008      	b.n	8003438 <HAL_GPIO_Init+0x228>
 8003426:	2304      	movs	r3, #4
 8003428:	e006      	b.n	8003438 <HAL_GPIO_Init+0x228>
 800342a:	2303      	movs	r3, #3
 800342c:	e004      	b.n	8003438 <HAL_GPIO_Init+0x228>
 800342e:	2302      	movs	r3, #2
 8003430:	e002      	b.n	8003438 <HAL_GPIO_Init+0x228>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <HAL_GPIO_Init+0x228>
 8003436:	2300      	movs	r3, #0
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	f002 0203 	and.w	r2, r2, #3
 800343e:	0092      	lsls	r2, r2, #2
 8003440:	4093      	lsls	r3, r2
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003448:	4935      	ldr	r1, [pc, #212]	; (8003520 <HAL_GPIO_Init+0x310>)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	089b      	lsrs	r3, r3, #2
 800344e:	3302      	adds	r3, #2
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003456:	4b3b      	ldr	r3, [pc, #236]	; (8003544 <HAL_GPIO_Init+0x334>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	43db      	mvns	r3, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800347a:	4a32      	ldr	r2, [pc, #200]	; (8003544 <HAL_GPIO_Init+0x334>)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003480:	4b30      	ldr	r3, [pc, #192]	; (8003544 <HAL_GPIO_Init+0x334>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034a4:	4a27      	ldr	r2, [pc, #156]	; (8003544 <HAL_GPIO_Init+0x334>)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034aa:	4b26      	ldr	r3, [pc, #152]	; (8003544 <HAL_GPIO_Init+0x334>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ce:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <HAL_GPIO_Init+0x334>)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034d4:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <HAL_GPIO_Init+0x334>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034f8:	4a12      	ldr	r2, [pc, #72]	; (8003544 <HAL_GPIO_Init+0x334>)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3301      	adds	r3, #1
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	2b0f      	cmp	r3, #15
 8003508:	f67f ae90 	bls.w	800322c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	3724      	adds	r7, #36	; 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800
 8003520:	40013800 	.word	0x40013800
 8003524:	40020000 	.word	0x40020000
 8003528:	40020400 	.word	0x40020400
 800352c:	40020800 	.word	0x40020800
 8003530:	40020c00 	.word	0x40020c00
 8003534:	40021000 	.word	0x40021000
 8003538:	40021400 	.word	0x40021400
 800353c:	40021800 	.word	0x40021800
 8003540:	40021c00 	.word	0x40021c00
 8003544:	40013c00 	.word	0x40013c00

08003548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	807b      	strh	r3, [r7, #2]
 8003554:	4613      	mov	r3, r2
 8003556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003558:	787b      	ldrb	r3, [r7, #1]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800355e:	887a      	ldrh	r2, [r7, #2]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003564:	e003      	b.n	800356e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003566:	887b      	ldrh	r3, [r7, #2]
 8003568:	041a      	lsls	r2, r3, #16
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	619a      	str	r2, [r3, #24]
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800357a:	b480      	push	{r7}
 800357c:	b085      	sub	sp, #20
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	460b      	mov	r3, r1
 8003584:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800358c:	887a      	ldrh	r2, [r7, #2]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4013      	ands	r3, r2
 8003592:	041a      	lsls	r2, r3, #16
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	43d9      	mvns	r1, r3
 8003598:	887b      	ldrh	r3, [r7, #2]
 800359a:	400b      	ands	r3, r1
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	619a      	str	r2, [r3, #24]
}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e267      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d075      	beq.n	80036ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ce:	4b88      	ldr	r3, [pc, #544]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d00c      	beq.n	80035f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035da:	4b85      	ldr	r3, [pc, #532]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d112      	bne.n	800360c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035e6:	4b82      	ldr	r3, [pc, #520]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f2:	d10b      	bne.n	800360c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f4:	4b7e      	ldr	r3, [pc, #504]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d05b      	beq.n	80036b8 <HAL_RCC_OscConfig+0x108>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d157      	bne.n	80036b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e242      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003614:	d106      	bne.n	8003624 <HAL_RCC_OscConfig+0x74>
 8003616:	4b76      	ldr	r3, [pc, #472]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a75      	ldr	r2, [pc, #468]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e01d      	b.n	8003660 <HAL_RCC_OscConfig+0xb0>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800362c:	d10c      	bne.n	8003648 <HAL_RCC_OscConfig+0x98>
 800362e:	4b70      	ldr	r3, [pc, #448]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a6f      	ldr	r2, [pc, #444]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	4b6d      	ldr	r3, [pc, #436]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a6c      	ldr	r2, [pc, #432]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	e00b      	b.n	8003660 <HAL_RCC_OscConfig+0xb0>
 8003648:	4b69      	ldr	r3, [pc, #420]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a68      	ldr	r2, [pc, #416]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 800364e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	4b66      	ldr	r3, [pc, #408]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a65      	ldr	r2, [pc, #404]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 800365a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800365e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d013      	beq.n	8003690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003668:	f7fe fda6 	bl	80021b8 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003670:	f7fe fda2 	bl	80021b8 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	; 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e207      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003682:	4b5b      	ldr	r3, [pc, #364]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0xc0>
 800368e:	e014      	b.n	80036ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003690:	f7fe fd92 	bl	80021b8 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003698:	f7fe fd8e 	bl	80021b8 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	; 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e1f3      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036aa:	4b51      	ldr	r3, [pc, #324]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0xe8>
 80036b6:	e000      	b.n	80036ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d063      	beq.n	800378e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036c6:	4b4a      	ldr	r3, [pc, #296]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00b      	beq.n	80036ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036d2:	4b47      	ldr	r3, [pc, #284]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d11c      	bne.n	8003718 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036de:	4b44      	ldr	r3, [pc, #272]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d116      	bne.n	8003718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ea:	4b41      	ldr	r3, [pc, #260]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d005      	beq.n	8003702 <HAL_RCC_OscConfig+0x152>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d001      	beq.n	8003702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e1c7      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003702:	4b3b      	ldr	r3, [pc, #236]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4937      	ldr	r1, [pc, #220]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003716:	e03a      	b.n	800378e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d020      	beq.n	8003762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003720:	4b34      	ldr	r3, [pc, #208]	; (80037f4 <HAL_RCC_OscConfig+0x244>)
 8003722:	2201      	movs	r2, #1
 8003724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003726:	f7fe fd47 	bl	80021b8 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800372e:	f7fe fd43 	bl	80021b8 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e1a8      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003740:	4b2b      	ldr	r3, [pc, #172]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f0      	beq.n	800372e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374c:	4b28      	ldr	r3, [pc, #160]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4925      	ldr	r1, [pc, #148]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 800375c:	4313      	orrs	r3, r2
 800375e:	600b      	str	r3, [r1, #0]
 8003760:	e015      	b.n	800378e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <HAL_RCC_OscConfig+0x244>)
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fe fd26 	bl	80021b8 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003770:	f7fe fd22 	bl	80021b8 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e187      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003782:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d036      	beq.n	8003808 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <HAL_RCC_OscConfig+0x248>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a8:	f7fe fd06 	bl	80021b8 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b0:	f7fe fd02 	bl	80021b8 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e167      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c2:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_OscConfig+0x240>)
 80037c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x200>
 80037ce:	e01b      	b.n	8003808 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <HAL_RCC_OscConfig+0x248>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d6:	f7fe fcef 	bl	80021b8 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037dc:	e00e      	b.n	80037fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037de:	f7fe fceb 	bl	80021b8 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d907      	bls.n	80037fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e150      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
 80037f0:	40023800 	.word	0x40023800
 80037f4:	42470000 	.word	0x42470000
 80037f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037fc:	4b88      	ldr	r3, [pc, #544]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 80037fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1ea      	bne.n	80037de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 8097 	beq.w	8003944 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003816:	2300      	movs	r3, #0
 8003818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800381a:	4b81      	ldr	r3, [pc, #516]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10f      	bne.n	8003846 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	4b7d      	ldr	r3, [pc, #500]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	4a7c      	ldr	r2, [pc, #496]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 8003830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003834:	6413      	str	r3, [r2, #64]	; 0x40
 8003836:	4b7a      	ldr	r3, [pc, #488]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003842:	2301      	movs	r3, #1
 8003844:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003846:	4b77      	ldr	r3, [pc, #476]	; (8003a24 <HAL_RCC_OscConfig+0x474>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d118      	bne.n	8003884 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003852:	4b74      	ldr	r3, [pc, #464]	; (8003a24 <HAL_RCC_OscConfig+0x474>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a73      	ldr	r2, [pc, #460]	; (8003a24 <HAL_RCC_OscConfig+0x474>)
 8003858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800385c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800385e:	f7fe fcab 	bl	80021b8 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003866:	f7fe fca7 	bl	80021b8 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e10c      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003878:	4b6a      	ldr	r3, [pc, #424]	; (8003a24 <HAL_RCC_OscConfig+0x474>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d106      	bne.n	800389a <HAL_RCC_OscConfig+0x2ea>
 800388c:	4b64      	ldr	r3, [pc, #400]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	4a63      	ldr	r2, [pc, #396]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	6713      	str	r3, [r2, #112]	; 0x70
 8003898:	e01c      	b.n	80038d4 <HAL_RCC_OscConfig+0x324>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2b05      	cmp	r3, #5
 80038a0:	d10c      	bne.n	80038bc <HAL_RCC_OscConfig+0x30c>
 80038a2:	4b5f      	ldr	r3, [pc, #380]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	4a5e      	ldr	r2, [pc, #376]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 80038a8:	f043 0304 	orr.w	r3, r3, #4
 80038ac:	6713      	str	r3, [r2, #112]	; 0x70
 80038ae:	4b5c      	ldr	r3, [pc, #368]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b2:	4a5b      	ldr	r2, [pc, #364]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	6713      	str	r3, [r2, #112]	; 0x70
 80038ba:	e00b      	b.n	80038d4 <HAL_RCC_OscConfig+0x324>
 80038bc:	4b58      	ldr	r3, [pc, #352]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 80038be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c0:	4a57      	ldr	r2, [pc, #348]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 80038c2:	f023 0301 	bic.w	r3, r3, #1
 80038c6:	6713      	str	r3, [r2, #112]	; 0x70
 80038c8:	4b55      	ldr	r3, [pc, #340]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038cc:	4a54      	ldr	r2, [pc, #336]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 80038ce:	f023 0304 	bic.w	r3, r3, #4
 80038d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d015      	beq.n	8003908 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038dc:	f7fe fc6c 	bl	80021b8 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e2:	e00a      	b.n	80038fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e4:	f7fe fc68 	bl	80021b8 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e0cb      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fa:	4b49      	ldr	r3, [pc, #292]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0ee      	beq.n	80038e4 <HAL_RCC_OscConfig+0x334>
 8003906:	e014      	b.n	8003932 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003908:	f7fe fc56 	bl	80021b8 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800390e:	e00a      	b.n	8003926 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003910:	f7fe fc52 	bl	80021b8 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	f241 3288 	movw	r2, #5000	; 0x1388
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e0b5      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003926:	4b3e      	ldr	r3, [pc, #248]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1ee      	bne.n	8003910 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003932:	7dfb      	ldrb	r3, [r7, #23]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d105      	bne.n	8003944 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003938:	4b39      	ldr	r3, [pc, #228]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	4a38      	ldr	r2, [pc, #224]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 800393e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003942:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80a1 	beq.w	8003a90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800394e:	4b34      	ldr	r3, [pc, #208]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b08      	cmp	r3, #8
 8003958:	d05c      	beq.n	8003a14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d141      	bne.n	80039e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003962:	4b31      	ldr	r3, [pc, #196]	; (8003a28 <HAL_RCC_OscConfig+0x478>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fe fc26 	bl	80021b8 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003970:	f7fe fc22 	bl	80021b8 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e087      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003982:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69da      	ldr	r2, [r3, #28]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	019b      	lsls	r3, r3, #6
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	085b      	lsrs	r3, r3, #1
 80039a6:	3b01      	subs	r3, #1
 80039a8:	041b      	lsls	r3, r3, #16
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	061b      	lsls	r3, r3, #24
 80039b2:	491b      	ldr	r1, [pc, #108]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b8:	4b1b      	ldr	r3, [pc, #108]	; (8003a28 <HAL_RCC_OscConfig+0x478>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039be:	f7fe fbfb 	bl	80021b8 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c6:	f7fe fbf7 	bl	80021b8 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e05c      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d8:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f0      	beq.n	80039c6 <HAL_RCC_OscConfig+0x416>
 80039e4:	e054      	b.n	8003a90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <HAL_RCC_OscConfig+0x478>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ec:	f7fe fbe4 	bl	80021b8 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f4:	f7fe fbe0 	bl	80021b8 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e045      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a06:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <HAL_RCC_OscConfig+0x470>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x444>
 8003a12:	e03d      	b.n	8003a90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d107      	bne.n	8003a2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e038      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40007000 	.word	0x40007000
 8003a28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a2c:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <HAL_RCC_OscConfig+0x4ec>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d028      	beq.n	8003a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d121      	bne.n	8003a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d11a      	bne.n	8003a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d111      	bne.n	8003a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	085b      	lsrs	r3, r3, #1
 8003a74:	3b01      	subs	r3, #1
 8003a76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d107      	bne.n	8003a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e000      	b.n	8003a92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800

08003aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0cc      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab4:	4b68      	ldr	r3, [pc, #416]	; (8003c58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d90c      	bls.n	8003adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac2:	4b65      	ldr	r3, [pc, #404]	; (8003c58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aca:	4b63      	ldr	r3, [pc, #396]	; (8003c58 <HAL_RCC_ClockConfig+0x1b8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0b8      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d020      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003af4:	4b59      	ldr	r3, [pc, #356]	; (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4a58      	ldr	r2, [pc, #352]	; (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b0c:	4b53      	ldr	r3, [pc, #332]	; (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	4a52      	ldr	r2, [pc, #328]	; (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b18:	4b50      	ldr	r3, [pc, #320]	; (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	494d      	ldr	r1, [pc, #308]	; (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d044      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d107      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3e:	4b47      	ldr	r3, [pc, #284]	; (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d119      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e07f      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d003      	beq.n	8003b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5e:	4b3f      	ldr	r3, [pc, #252]	; (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e06f      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6e:	4b3b      	ldr	r3, [pc, #236]	; (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e067      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b7e:	4b37      	ldr	r3, [pc, #220]	; (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f023 0203 	bic.w	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4934      	ldr	r1, [pc, #208]	; (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b90:	f7fe fb12 	bl	80021b8 <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b96:	e00a      	b.n	8003bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b98:	f7fe fb0e 	bl	80021b8 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e04f      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bae:	4b2b      	ldr	r3, [pc, #172]	; (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 020c 	and.w	r2, r3, #12
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d1eb      	bne.n	8003b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc0:	4b25      	ldr	r3, [pc, #148]	; (8003c58 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d20c      	bcs.n	8003be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bce:	4b22      	ldr	r3, [pc, #136]	; (8003c58 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	4b20      	ldr	r3, [pc, #128]	; (8003c58 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d001      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e032      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bf4:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4916      	ldr	r1, [pc, #88]	; (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d009      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c12:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	490e      	ldr	r1, [pc, #56]	; (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c26:	f000 f82d 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	490a      	ldr	r1, [pc, #40]	; (8003c60 <HAL_RCC_ClockConfig+0x1c0>)
 8003c38:	5ccb      	ldrb	r3, [r1, r3]
 8003c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3e:	4a09      	ldr	r2, [pc, #36]	; (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c42:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe fa72 	bl	8002130 <HAL_InitTick>

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40023c00 	.word	0x40023c00
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	08009198 	.word	0x08009198
 8003c64:	20000000 	.word	0x20000000
 8003c68:	20000004 	.word	0x20000004

08003c6c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003c70:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <HAL_RCC_EnableCSS+0x14>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
}
 8003c76:	bf00      	nop
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	4247004c 	.word	0x4247004c

08003c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c88:	b094      	sub	sp, #80	; 0x50
 8003c8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c90:	2300      	movs	r3, #0
 8003c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c94:	2300      	movs	r3, #0
 8003c96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c9c:	4b79      	ldr	r3, [pc, #484]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 030c 	and.w	r3, r3, #12
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d00d      	beq.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	f200 80e1 	bhi.w	8003e70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d003      	beq.n	8003cbe <HAL_RCC_GetSysClockFreq+0x3a>
 8003cb6:	e0db      	b.n	8003e70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cb8:	4b73      	ldr	r3, [pc, #460]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003cbc:	e0db      	b.n	8003e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cbe:	4b72      	ldr	r3, [pc, #456]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cc2:	e0d8      	b.n	8003e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc4:	4b6f      	ldr	r3, [pc, #444]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ccc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cce:	4b6d      	ldr	r3, [pc, #436]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d063      	beq.n	8003da2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cda:	4b6a      	ldr	r3, [pc, #424]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	099b      	lsrs	r3, r3, #6
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ce4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cec:	633b      	str	r3, [r7, #48]	; 0x30
 8003cee:	2300      	movs	r3, #0
 8003cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cf6:	4622      	mov	r2, r4
 8003cf8:	462b      	mov	r3, r5
 8003cfa:	f04f 0000 	mov.w	r0, #0
 8003cfe:	f04f 0100 	mov.w	r1, #0
 8003d02:	0159      	lsls	r1, r3, #5
 8003d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d08:	0150      	lsls	r0, r2, #5
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4621      	mov	r1, r4
 8003d10:	1a51      	subs	r1, r2, r1
 8003d12:	6139      	str	r1, [r7, #16]
 8003d14:	4629      	mov	r1, r5
 8003d16:	eb63 0301 	sbc.w	r3, r3, r1
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d28:	4659      	mov	r1, fp
 8003d2a:	018b      	lsls	r3, r1, #6
 8003d2c:	4651      	mov	r1, sl
 8003d2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d32:	4651      	mov	r1, sl
 8003d34:	018a      	lsls	r2, r1, #6
 8003d36:	4651      	mov	r1, sl
 8003d38:	ebb2 0801 	subs.w	r8, r2, r1
 8003d3c:	4659      	mov	r1, fp
 8003d3e:	eb63 0901 	sbc.w	r9, r3, r1
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d56:	4690      	mov	r8, r2
 8003d58:	4699      	mov	r9, r3
 8003d5a:	4623      	mov	r3, r4
 8003d5c:	eb18 0303 	adds.w	r3, r8, r3
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	462b      	mov	r3, r5
 8003d64:	eb49 0303 	adc.w	r3, r9, r3
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d76:	4629      	mov	r1, r5
 8003d78:	028b      	lsls	r3, r1, #10
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d80:	4621      	mov	r1, r4
 8003d82:	028a      	lsls	r2, r1, #10
 8003d84:	4610      	mov	r0, r2
 8003d86:	4619      	mov	r1, r3
 8003d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d94:	f7fc ff08 	bl	8000ba8 <__aeabi_uldivmod>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003da0:	e058      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da2:	4b38      	ldr	r3, [pc, #224]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	099b      	lsrs	r3, r3, #6
 8003da8:	2200      	movs	r2, #0
 8003daa:	4618      	mov	r0, r3
 8003dac:	4611      	mov	r1, r2
 8003dae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003db2:	623b      	str	r3, [r7, #32]
 8003db4:	2300      	movs	r3, #0
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
 8003db8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dbc:	4642      	mov	r2, r8
 8003dbe:	464b      	mov	r3, r9
 8003dc0:	f04f 0000 	mov.w	r0, #0
 8003dc4:	f04f 0100 	mov.w	r1, #0
 8003dc8:	0159      	lsls	r1, r3, #5
 8003dca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dce:	0150      	lsls	r0, r2, #5
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4641      	mov	r1, r8
 8003dd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dda:	4649      	mov	r1, r9
 8003ddc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003dec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003df0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003df4:	ebb2 040a 	subs.w	r4, r2, sl
 8003df8:	eb63 050b 	sbc.w	r5, r3, fp
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	00eb      	lsls	r3, r5, #3
 8003e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e0a:	00e2      	lsls	r2, r4, #3
 8003e0c:	4614      	mov	r4, r2
 8003e0e:	461d      	mov	r5, r3
 8003e10:	4643      	mov	r3, r8
 8003e12:	18e3      	adds	r3, r4, r3
 8003e14:	603b      	str	r3, [r7, #0]
 8003e16:	464b      	mov	r3, r9
 8003e18:	eb45 0303 	adc.w	r3, r5, r3
 8003e1c:	607b      	str	r3, [r7, #4]
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	028b      	lsls	r3, r1, #10
 8003e2e:	4621      	mov	r1, r4
 8003e30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e34:	4621      	mov	r1, r4
 8003e36:	028a      	lsls	r2, r1, #10
 8003e38:	4610      	mov	r0, r2
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e3e:	2200      	movs	r2, #0
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	61fa      	str	r2, [r7, #28]
 8003e44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e48:	f7fc feae 	bl	8000ba8 <__aeabi_uldivmod>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4613      	mov	r3, r2
 8003e52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e54:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	0c1b      	lsrs	r3, r3, #16
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	3301      	adds	r3, #1
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e6e:	e002      	b.n	8003e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3750      	adds	r7, #80	; 0x50
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e82:	bf00      	nop
 8003e84:	40023800 	.word	0x40023800
 8003e88:	00f42400 	.word	0x00f42400

08003e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e90:	4b03      	ldr	r3, [pc, #12]	; (8003ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e92:	681b      	ldr	r3, [r3, #0]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000000 	.word	0x20000000

08003ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ea8:	f7ff fff0 	bl	8003e8c <HAL_RCC_GetHCLKFreq>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	0a9b      	lsrs	r3, r3, #10
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4903      	ldr	r1, [pc, #12]	; (8003ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eba:	5ccb      	ldrb	r3, [r1, r3]
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	080091a8 	.word	0x080091a8

08003ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ed0:	f7ff ffdc 	bl	8003e8c <HAL_RCC_GetHCLKFreq>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	0b5b      	lsrs	r3, r3, #13
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	4903      	ldr	r1, [pc, #12]	; (8003ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ee2:	5ccb      	ldrb	r3, [r1, r3]
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	080091a8 	.word	0x080091a8

08003ef4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003ef8:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f00:	2b80      	cmp	r3, #128	; 0x80
 8003f02:	d104      	bne.n	8003f0e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003f04:	f000 f80a 	bl	8003f1c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003f0a:	2280      	movs	r2, #128	; 0x80
 8003f0c:	701a      	strb	r2, [r3, #0]
  }
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	40023800 	.word	0x40023800
 8003f18:	4002380e 	.word	0x4002380e

08003f1c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e07b      	b.n	8004034 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d108      	bne.n	8003f56 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f4c:	d009      	beq.n	8003f62 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	61da      	str	r2, [r3, #28]
 8003f54:	e005      	b.n	8003f62 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d106      	bne.n	8003f82 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7fd fd09 	bl	8001994 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2202      	movs	r2, #2
 8003f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f98:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe6:	ea42 0103 	orr.w	r1, r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	0c1b      	lsrs	r3, r3, #16
 8004000:	f003 0104 	and.w	r1, r3, #4
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	f003 0210 	and.w	r2, r3, #16
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69da      	ldr	r2, [r3, #28]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004022:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	4613      	mov	r3, r2
 800404a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_SPI_Transmit+0x22>
 800405a:	2302      	movs	r3, #2
 800405c:	e126      	b.n	80042ac <HAL_SPI_Transmit+0x270>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004066:	f7fe f8a7 	bl	80021b8 <HAL_GetTick>
 800406a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	d002      	beq.n	8004082 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800407c:	2302      	movs	r3, #2
 800407e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004080:	e10b      	b.n	800429a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_SPI_Transmit+0x52>
 8004088:	88fb      	ldrh	r3, [r7, #6]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d102      	bne.n	8004094 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004092:	e102      	b.n	800429a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2203      	movs	r2, #3
 8004098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	88fa      	ldrh	r2, [r7, #6]
 80040ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	88fa      	ldrh	r2, [r7, #6]
 80040b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040da:	d10f      	bne.n	80040fc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004106:	2b40      	cmp	r3, #64	; 0x40
 8004108:	d007      	beq.n	800411a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004118:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004122:	d14b      	bne.n	80041bc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <HAL_SPI_Transmit+0xf6>
 800412c:	8afb      	ldrh	r3, [r7, #22]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d13e      	bne.n	80041b0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	881a      	ldrh	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	1c9a      	adds	r2, r3, #2
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004156:	e02b      	b.n	80041b0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b02      	cmp	r3, #2
 8004164:	d112      	bne.n	800418c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	881a      	ldrh	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	1c9a      	adds	r2, r3, #2
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	86da      	strh	r2, [r3, #54]	; 0x36
 800418a:	e011      	b.n	80041b0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800418c:	f7fe f814 	bl	80021b8 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d803      	bhi.n	80041a4 <HAL_SPI_Transmit+0x168>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d102      	bne.n	80041aa <HAL_SPI_Transmit+0x16e>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041ae:	e074      	b.n	800429a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1ce      	bne.n	8004158 <HAL_SPI_Transmit+0x11c>
 80041ba:	e04c      	b.n	8004256 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <HAL_SPI_Transmit+0x18e>
 80041c4:	8afb      	ldrh	r3, [r7, #22]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d140      	bne.n	800424c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	7812      	ldrb	r2, [r2, #0]
 80041d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041f0:	e02c      	b.n	800424c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d113      	bne.n	8004228 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	330c      	adds	r3, #12
 800420a:	7812      	ldrb	r2, [r2, #0]
 800420c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	1c5a      	adds	r2, r3, #1
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	86da      	strh	r2, [r3, #54]	; 0x36
 8004226:	e011      	b.n	800424c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004228:	f7fd ffc6 	bl	80021b8 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d803      	bhi.n	8004240 <HAL_SPI_Transmit+0x204>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d102      	bne.n	8004246 <HAL_SPI_Transmit+0x20a>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d102      	bne.n	800424c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	77fb      	strb	r3, [r7, #31]
          goto error;
 800424a:	e026      	b.n	800429a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1cd      	bne.n	80041f2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	6839      	ldr	r1, [r7, #0]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fbcc 	bl	80049f8 <SPI_EndRxTxTransaction>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004274:	2300      	movs	r3, #0
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	613b      	str	r3, [r7, #16]
 8004288:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	77fb      	strb	r3, [r7, #31]
 8004296:	e000      	b.n	800429a <HAL_SPI_Transmit+0x25e>
  }

error:
 8004298:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3720      	adds	r7, #32
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	4613      	mov	r3, r2
 80042c2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042c4:	2300      	movs	r3, #0
 80042c6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042d0:	d112      	bne.n	80042f8 <HAL_SPI_Receive+0x44>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10e      	bne.n	80042f8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2204      	movs	r2, #4
 80042de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042e2:	88fa      	ldrh	r2, [r7, #6]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	4613      	mov	r3, r2
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f8f1 	bl	80044d6 <HAL_SPI_TransmitReceive>
 80042f4:	4603      	mov	r3, r0
 80042f6:	e0ea      	b.n	80044ce <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_SPI_Receive+0x52>
 8004302:	2302      	movs	r3, #2
 8004304:	e0e3      	b.n	80044ce <HAL_SPI_Receive+0x21a>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800430e:	f7fd ff53 	bl	80021b8 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b01      	cmp	r3, #1
 800431e:	d002      	beq.n	8004326 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004320:	2302      	movs	r3, #2
 8004322:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004324:	e0ca      	b.n	80044bc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <HAL_SPI_Receive+0x7e>
 800432c:	88fb      	ldrh	r3, [r7, #6]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d102      	bne.n	8004338 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004336:	e0c1      	b.n	80044bc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2204      	movs	r2, #4
 800433c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	88fa      	ldrh	r2, [r7, #6]
 8004350:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	88fa      	ldrh	r2, [r7, #6]
 8004356:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437e:	d10f      	bne.n	80043a0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800438e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800439e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	d007      	beq.n	80043be <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043bc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d162      	bne.n	800448c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80043c6:	e02e      	b.n	8004426 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d115      	bne.n	8004402 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f103 020c 	add.w	r2, r3, #12
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	7812      	ldrb	r2, [r2, #0]
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004400:	e011      	b.n	8004426 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004402:	f7fd fed9 	bl	80021b8 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d803      	bhi.n	800441a <HAL_SPI_Receive+0x166>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004418:	d102      	bne.n	8004420 <HAL_SPI_Receive+0x16c>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004424:	e04a      	b.n	80044bc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1cb      	bne.n	80043c8 <HAL_SPI_Receive+0x114>
 8004430:	e031      	b.n	8004496 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d113      	bne.n	8004468 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	b292      	uxth	r2, r2
 800444c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	1c9a      	adds	r2, r3, #2
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004466:	e011      	b.n	800448c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004468:	f7fd fea6 	bl	80021b8 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d803      	bhi.n	8004480 <HAL_SPI_Receive+0x1cc>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d102      	bne.n	8004486 <HAL_SPI_Receive+0x1d2>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	75fb      	strb	r3, [r7, #23]
          goto error;
 800448a:	e017      	b.n	80044bc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1cd      	bne.n	8004432 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	6839      	ldr	r1, [r7, #0]
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 fa46 	bl	800492c <SPI_EndRxTransaction>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	75fb      	strb	r3, [r7, #23]
 80044b8:	e000      	b.n	80044bc <HAL_SPI_Receive+0x208>
  }

error :
 80044ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b08c      	sub	sp, #48	; 0x30
 80044da:	af00      	add	r7, sp, #0
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044e4:	2301      	movs	r3, #1
 80044e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_SPI_TransmitReceive+0x26>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e18a      	b.n	8004812 <HAL_SPI_TransmitReceive+0x33c>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004504:	f7fd fe58 	bl	80021b8 <HAL_GetTick>
 8004508:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800451a:	887b      	ldrh	r3, [r7, #2]
 800451c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800451e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004522:	2b01      	cmp	r3, #1
 8004524:	d00f      	beq.n	8004546 <HAL_SPI_TransmitReceive+0x70>
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800452c:	d107      	bne.n	800453e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d103      	bne.n	800453e <HAL_SPI_TransmitReceive+0x68>
 8004536:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800453a:	2b04      	cmp	r3, #4
 800453c:	d003      	beq.n	8004546 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800453e:	2302      	movs	r3, #2
 8004540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004544:	e15b      	b.n	80047fe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_SPI_TransmitReceive+0x82>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <HAL_SPI_TransmitReceive+0x82>
 8004552:	887b      	ldrh	r3, [r7, #2]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d103      	bne.n	8004560 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800455e:	e14e      	b.n	80047fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b04      	cmp	r3, #4
 800456a:	d003      	beq.n	8004574 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2205      	movs	r2, #5
 8004570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	887a      	ldrh	r2, [r7, #2]
 8004584:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	887a      	ldrh	r2, [r7, #2]
 800458a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	887a      	ldrh	r2, [r7, #2]
 8004596:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	887a      	ldrh	r2, [r7, #2]
 800459c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d007      	beq.n	80045c8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d0:	d178      	bne.n	80046c4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_SPI_TransmitReceive+0x10a>
 80045da:	8b7b      	ldrh	r3, [r7, #26]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d166      	bne.n	80046ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	881a      	ldrh	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	1c9a      	adds	r2, r3, #2
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004604:	e053      	b.n	80046ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b02      	cmp	r3, #2
 8004612:	d11b      	bne.n	800464c <HAL_SPI_TransmitReceive+0x176>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d016      	beq.n	800464c <HAL_SPI_TransmitReceive+0x176>
 800461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004620:	2b01      	cmp	r3, #1
 8004622:	d113      	bne.n	800464c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004628:	881a      	ldrh	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	1c9a      	adds	r2, r3, #2
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b01      	cmp	r3, #1
 8004658:	d119      	bne.n	800468e <HAL_SPI_TransmitReceive+0x1b8>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d014      	beq.n	800468e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	b292      	uxth	r2, r2
 8004670:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	1c9a      	adds	r2, r3, #2
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800468a:	2301      	movs	r3, #1
 800468c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800468e:	f7fd fd93 	bl	80021b8 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800469a:	429a      	cmp	r2, r3
 800469c:	d807      	bhi.n	80046ae <HAL_SPI_TransmitReceive+0x1d8>
 800469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a4:	d003      	beq.n	80046ae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046ac:	e0a7      	b.n	80047fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1a6      	bne.n	8004606 <HAL_SPI_TransmitReceive+0x130>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1a1      	bne.n	8004606 <HAL_SPI_TransmitReceive+0x130>
 80046c2:	e07c      	b.n	80047be <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <HAL_SPI_TransmitReceive+0x1fc>
 80046cc:	8b7b      	ldrh	r3, [r7, #26]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d16b      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	330c      	adds	r3, #12
 80046dc:	7812      	ldrb	r2, [r2, #0]
 80046de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046f8:	e057      	b.n	80047aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b02      	cmp	r3, #2
 8004706:	d11c      	bne.n	8004742 <HAL_SPI_TransmitReceive+0x26c>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d017      	beq.n	8004742 <HAL_SPI_TransmitReceive+0x26c>
 8004712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004714:	2b01      	cmp	r3, #1
 8004716:	d114      	bne.n	8004742 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	330c      	adds	r3, #12
 8004722:	7812      	ldrb	r2, [r2, #0]
 8004724:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b01      	cmp	r3, #1
 800474e:	d119      	bne.n	8004784 <HAL_SPI_TransmitReceive+0x2ae>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d014      	beq.n	8004784 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004780:	2301      	movs	r3, #1
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004784:	f7fd fd18 	bl	80021b8 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004790:	429a      	cmp	r2, r3
 8004792:	d803      	bhi.n	800479c <HAL_SPI_TransmitReceive+0x2c6>
 8004794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479a:	d102      	bne.n	80047a2 <HAL_SPI_TransmitReceive+0x2cc>
 800479c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d103      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80047a8:	e029      	b.n	80047fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1a2      	bne.n	80046fa <HAL_SPI_TransmitReceive+0x224>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d19d      	bne.n	80046fa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f918 	bl	80049f8 <SPI_EndRxTxTransaction>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d006      	beq.n	80047dc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80047da:	e010      	b.n	80047fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10b      	bne.n	80047fc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	e000      	b.n	80047fe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80047fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800480e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004812:	4618      	mov	r0, r3
 8004814:	3730      	adds	r7, #48	; 0x30
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800482c:	f7fd fcc4 	bl	80021b8 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	4413      	add	r3, r2
 800483a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800483c:	f7fd fcbc 	bl	80021b8 <HAL_GetTick>
 8004840:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004842:	4b39      	ldr	r3, [pc, #228]	; (8004928 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	015b      	lsls	r3, r3, #5
 8004848:	0d1b      	lsrs	r3, r3, #20
 800484a:	69fa      	ldr	r2, [r7, #28]
 800484c:	fb02 f303 	mul.w	r3, r2, r3
 8004850:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004852:	e054      	b.n	80048fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485a:	d050      	beq.n	80048fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800485c:	f7fd fcac 	bl	80021b8 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	429a      	cmp	r2, r3
 800486a:	d902      	bls.n	8004872 <SPI_WaitFlagStateUntilTimeout+0x56>
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d13d      	bne.n	80048ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004880:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800488a:	d111      	bne.n	80048b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004894:	d004      	beq.n	80048a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489e:	d107      	bne.n	80048b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b8:	d10f      	bne.n	80048da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e017      	b.n	800491e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4013      	ands	r3, r2
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	429a      	cmp	r2, r3
 800490c:	bf0c      	ite	eq
 800490e:	2301      	moveq	r3, #1
 8004910:	2300      	movne	r3, #0
 8004912:	b2db      	uxtb	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	429a      	cmp	r2, r3
 800491a:	d19b      	bne.n	8004854 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3720      	adds	r7, #32
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000000 	.word	0x20000000

0800492c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004940:	d111      	bne.n	8004966 <SPI_EndRxTransaction+0x3a>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494a:	d004      	beq.n	8004956 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004954:	d107      	bne.n	8004966 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004964:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800496e:	d12a      	bne.n	80049c6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004978:	d012      	beq.n	80049a0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2200      	movs	r2, #0
 8004982:	2180      	movs	r1, #128	; 0x80
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7ff ff49 	bl	800481c <SPI_WaitFlagStateUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d02d      	beq.n	80049ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004994:	f043 0220 	orr.w	r2, r3, #32
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e026      	b.n	80049ee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2200      	movs	r2, #0
 80049a8:	2101      	movs	r1, #1
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f7ff ff36 	bl	800481c <SPI_WaitFlagStateUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01a      	beq.n	80049ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ba:	f043 0220 	orr.w	r2, r3, #32
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e013      	b.n	80049ee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2200      	movs	r2, #0
 80049ce:	2101      	movs	r1, #1
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f7ff ff23 	bl	800481c <SPI_WaitFlagStateUntilTimeout>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	f043 0220 	orr.w	r2, r3, #32
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e000      	b.n	80049ee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a04:	4b1b      	ldr	r3, [pc, #108]	; (8004a74 <SPI_EndRxTxTransaction+0x7c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1b      	ldr	r2, [pc, #108]	; (8004a78 <SPI_EndRxTxTransaction+0x80>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	0d5b      	lsrs	r3, r3, #21
 8004a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a14:	fb02 f303 	mul.w	r3, r2, r3
 8004a18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a22:	d112      	bne.n	8004a4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2180      	movs	r1, #128	; 0x80
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7ff fef4 	bl	800481c <SPI_WaitFlagStateUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d016      	beq.n	8004a68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3e:	f043 0220 	orr.w	r2, r3, #32
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e00f      	b.n	8004a6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a60:	2b80      	cmp	r3, #128	; 0x80
 8004a62:	d0f2      	beq.n	8004a4a <SPI_EndRxTxTransaction+0x52>
 8004a64:	e000      	b.n	8004a68 <SPI_EndRxTxTransaction+0x70>
        break;
 8004a66:	bf00      	nop
  }

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20000000 	.word	0x20000000
 8004a78:	165e9f81 	.word	0x165e9f81

08004a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e041      	b.n	8004b12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fc fff4 	bl	8001a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4610      	mov	r0, r2
 8004abc:	f000 fcae 	bl	800541c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b082      	sub	sp, #8
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e041      	b.n	8004bb0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f839 	bl	8004bb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3304      	adds	r3, #4
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f000 fc5f 	bl	800541c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d109      	bne.n	8004bf0 <HAL_TIM_PWM_Start+0x24>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	bf14      	ite	ne
 8004be8:	2301      	movne	r3, #1
 8004bea:	2300      	moveq	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	e022      	b.n	8004c36 <HAL_TIM_PWM_Start+0x6a>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d109      	bne.n	8004c0a <HAL_TIM_PWM_Start+0x3e>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	bf14      	ite	ne
 8004c02:	2301      	movne	r3, #1
 8004c04:	2300      	moveq	r3, #0
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	e015      	b.n	8004c36 <HAL_TIM_PWM_Start+0x6a>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d109      	bne.n	8004c24 <HAL_TIM_PWM_Start+0x58>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	bf14      	ite	ne
 8004c1c:	2301      	movne	r3, #1
 8004c1e:	2300      	moveq	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	e008      	b.n	8004c36 <HAL_TIM_PWM_Start+0x6a>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	bf14      	ite	ne
 8004c30:	2301      	movne	r3, #1
 8004c32:	2300      	moveq	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e07c      	b.n	8004d38 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d104      	bne.n	8004c4e <HAL_TIM_PWM_Start+0x82>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c4c:	e013      	b.n	8004c76 <HAL_TIM_PWM_Start+0xaa>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d104      	bne.n	8004c5e <HAL_TIM_PWM_Start+0x92>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c5c:	e00b      	b.n	8004c76 <HAL_TIM_PWM_Start+0xaa>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d104      	bne.n	8004c6e <HAL_TIM_PWM_Start+0xa2>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c6c:	e003      	b.n	8004c76 <HAL_TIM_PWM_Start+0xaa>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2202      	movs	r2, #2
 8004c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	6839      	ldr	r1, [r7, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 feb6 	bl	80059f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a2d      	ldr	r2, [pc, #180]	; (8004d40 <HAL_TIM_PWM_Start+0x174>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <HAL_TIM_PWM_Start+0xcc>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a2c      	ldr	r2, [pc, #176]	; (8004d44 <HAL_TIM_PWM_Start+0x178>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d101      	bne.n	8004c9c <HAL_TIM_PWM_Start+0xd0>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <HAL_TIM_PWM_Start+0xd2>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a22      	ldr	r2, [pc, #136]	; (8004d40 <HAL_TIM_PWM_Start+0x174>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d022      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x136>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc4:	d01d      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x136>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a1f      	ldr	r2, [pc, #124]	; (8004d48 <HAL_TIM_PWM_Start+0x17c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d018      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x136>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a1d      	ldr	r2, [pc, #116]	; (8004d4c <HAL_TIM_PWM_Start+0x180>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d013      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x136>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a1c      	ldr	r2, [pc, #112]	; (8004d50 <HAL_TIM_PWM_Start+0x184>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00e      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x136>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a16      	ldr	r2, [pc, #88]	; (8004d44 <HAL_TIM_PWM_Start+0x178>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d009      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x136>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a18      	ldr	r2, [pc, #96]	; (8004d54 <HAL_TIM_PWM_Start+0x188>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d004      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x136>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a16      	ldr	r2, [pc, #88]	; (8004d58 <HAL_TIM_PWM_Start+0x18c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d111      	bne.n	8004d26 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b06      	cmp	r3, #6
 8004d12:	d010      	beq.n	8004d36 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d24:	e007      	b.n	8004d36 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40010000 	.word	0x40010000
 8004d44:	40010400 	.word	0x40010400
 8004d48:	40000400 	.word	0x40000400
 8004d4c:	40000800 	.word	0x40000800
 8004d50:	40000c00 	.word	0x40000c00
 8004d54:	40014000 	.word	0x40014000
 8004d58:	40001800 	.word	0x40001800

08004d5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e097      	b.n	8004ea0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7fc ff21 	bl	8001bcc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004da0:	f023 0307 	bic.w	r3, r3, #7
 8004da4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3304      	adds	r3, #4
 8004dae:	4619      	mov	r1, r3
 8004db0:	4610      	mov	r0, r2
 8004db2:	f000 fb33 	bl	800541c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	021b      	lsls	r3, r3, #8
 8004dee:	4313      	orrs	r3, r2
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004dfc:	f023 030c 	bic.w	r3, r3, #12
 8004e00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	011a      	lsls	r2, r3, #4
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	031b      	lsls	r3, r3, #12
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e3a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004e42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d122      	bne.n	8004f04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d11b      	bne.n	8004f04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f06f 0202 	mvn.w	r2, #2
 8004ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fa77 	bl	80053de <HAL_TIM_IC_CaptureCallback>
 8004ef0:	e005      	b.n	8004efe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fa69 	bl	80053ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fa7a 	bl	80053f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d122      	bne.n	8004f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d11b      	bne.n	8004f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0204 	mvn.w	r2, #4
 8004f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fa4d 	bl	80053de <HAL_TIM_IC_CaptureCallback>
 8004f44:	e005      	b.n	8004f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fa3f 	bl	80053ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fa50 	bl	80053f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d122      	bne.n	8004fac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d11b      	bne.n	8004fac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0208 	mvn.w	r2, #8
 8004f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2204      	movs	r2, #4
 8004f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fa23 	bl	80053de <HAL_TIM_IC_CaptureCallback>
 8004f98:	e005      	b.n	8004fa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fa15 	bl	80053ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fa26 	bl	80053f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f003 0310 	and.w	r3, r3, #16
 8004fb6:	2b10      	cmp	r3, #16
 8004fb8:	d122      	bne.n	8005000 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f003 0310 	and.w	r3, r3, #16
 8004fc4:	2b10      	cmp	r3, #16
 8004fc6:	d11b      	bne.n	8005000 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f06f 0210 	mvn.w	r2, #16
 8004fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2208      	movs	r2, #8
 8004fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f9f9 	bl	80053de <HAL_TIM_IC_CaptureCallback>
 8004fec:	e005      	b.n	8004ffa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f9eb 	bl	80053ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f9fc 	bl	80053f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b01      	cmp	r3, #1
 800500c:	d10e      	bne.n	800502c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b01      	cmp	r3, #1
 800501a:	d107      	bne.n	800502c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0201 	mvn.w	r2, #1
 8005024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 fb1c 	bl	8006664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005036:	2b80      	cmp	r3, #128	; 0x80
 8005038:	d10e      	bne.n	8005058 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005044:	2b80      	cmp	r3, #128	; 0x80
 8005046:	d107      	bne.n	8005058 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fd78 	bl	8005b48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005062:	2b40      	cmp	r3, #64	; 0x40
 8005064:	d10e      	bne.n	8005084 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005070:	2b40      	cmp	r3, #64	; 0x40
 8005072:	d107      	bne.n	8005084 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800507c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f9c1 	bl	8005406 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	2b20      	cmp	r3, #32
 8005090:	d10e      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0320 	and.w	r3, r3, #32
 800509c:	2b20      	cmp	r3, #32
 800509e:	d107      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0220 	mvn.w	r2, #32
 80050a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fd42 	bl	8005b34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050b0:	bf00      	nop
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e0ae      	b.n	8005234 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b0c      	cmp	r3, #12
 80050e2:	f200 809f 	bhi.w	8005224 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80050e6:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ec:	08005121 	.word	0x08005121
 80050f0:	08005225 	.word	0x08005225
 80050f4:	08005225 	.word	0x08005225
 80050f8:	08005225 	.word	0x08005225
 80050fc:	08005161 	.word	0x08005161
 8005100:	08005225 	.word	0x08005225
 8005104:	08005225 	.word	0x08005225
 8005108:	08005225 	.word	0x08005225
 800510c:	080051a3 	.word	0x080051a3
 8005110:	08005225 	.word	0x08005225
 8005114:	08005225 	.word	0x08005225
 8005118:	08005225 	.word	0x08005225
 800511c:	080051e3 	.word	0x080051e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68b9      	ldr	r1, [r7, #8]
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fa18 	bl	800555c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699a      	ldr	r2, [r3, #24]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0208 	orr.w	r2, r2, #8
 800513a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0204 	bic.w	r2, r2, #4
 800514a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6999      	ldr	r1, [r3, #24]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	619a      	str	r2, [r3, #24]
      break;
 800515e:	e064      	b.n	800522a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fa68 	bl	800563c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800517a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800518a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6999      	ldr	r1, [r3, #24]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	021a      	lsls	r2, r3, #8
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	619a      	str	r2, [r3, #24]
      break;
 80051a0:	e043      	b.n	800522a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fabd 	bl	8005728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69da      	ldr	r2, [r3, #28]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0208 	orr.w	r2, r2, #8
 80051bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69da      	ldr	r2, [r3, #28]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0204 	bic.w	r2, r2, #4
 80051cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69d9      	ldr	r1, [r3, #28]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	691a      	ldr	r2, [r3, #16]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	61da      	str	r2, [r3, #28]
      break;
 80051e0:	e023      	b.n	800522a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fb11 	bl	8005810 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800520c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69d9      	ldr	r1, [r3, #28]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	021a      	lsls	r2, r3, #8
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	61da      	str	r2, [r3, #28]
      break;
 8005222:	e002      	b.n	800522a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	75fb      	strb	r3, [r7, #23]
      break;
 8005228:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005232:	7dfb      	ldrb	r3, [r7, #23]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_TIM_ConfigClockSource+0x1c>
 8005254:	2302      	movs	r3, #2
 8005256:	e0b4      	b.n	80053c2 <HAL_TIM_ConfigClockSource+0x186>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800527e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005290:	d03e      	beq.n	8005310 <HAL_TIM_ConfigClockSource+0xd4>
 8005292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005296:	f200 8087 	bhi.w	80053a8 <HAL_TIM_ConfigClockSource+0x16c>
 800529a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529e:	f000 8086 	beq.w	80053ae <HAL_TIM_ConfigClockSource+0x172>
 80052a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a6:	d87f      	bhi.n	80053a8 <HAL_TIM_ConfigClockSource+0x16c>
 80052a8:	2b70      	cmp	r3, #112	; 0x70
 80052aa:	d01a      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0xa6>
 80052ac:	2b70      	cmp	r3, #112	; 0x70
 80052ae:	d87b      	bhi.n	80053a8 <HAL_TIM_ConfigClockSource+0x16c>
 80052b0:	2b60      	cmp	r3, #96	; 0x60
 80052b2:	d050      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x11a>
 80052b4:	2b60      	cmp	r3, #96	; 0x60
 80052b6:	d877      	bhi.n	80053a8 <HAL_TIM_ConfigClockSource+0x16c>
 80052b8:	2b50      	cmp	r3, #80	; 0x50
 80052ba:	d03c      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0xfa>
 80052bc:	2b50      	cmp	r3, #80	; 0x50
 80052be:	d873      	bhi.n	80053a8 <HAL_TIM_ConfigClockSource+0x16c>
 80052c0:	2b40      	cmp	r3, #64	; 0x40
 80052c2:	d058      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x13a>
 80052c4:	2b40      	cmp	r3, #64	; 0x40
 80052c6:	d86f      	bhi.n	80053a8 <HAL_TIM_ConfigClockSource+0x16c>
 80052c8:	2b30      	cmp	r3, #48	; 0x30
 80052ca:	d064      	beq.n	8005396 <HAL_TIM_ConfigClockSource+0x15a>
 80052cc:	2b30      	cmp	r3, #48	; 0x30
 80052ce:	d86b      	bhi.n	80053a8 <HAL_TIM_ConfigClockSource+0x16c>
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d060      	beq.n	8005396 <HAL_TIM_ConfigClockSource+0x15a>
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d867      	bhi.n	80053a8 <HAL_TIM_ConfigClockSource+0x16c>
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d05c      	beq.n	8005396 <HAL_TIM_ConfigClockSource+0x15a>
 80052dc:	2b10      	cmp	r3, #16
 80052de:	d05a      	beq.n	8005396 <HAL_TIM_ConfigClockSource+0x15a>
 80052e0:	e062      	b.n	80053a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6899      	ldr	r1, [r3, #8]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f000 fb5d 	bl	80059b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005304:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	609a      	str	r2, [r3, #8]
      break;
 800530e:	e04f      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6818      	ldr	r0, [r3, #0]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	6899      	ldr	r1, [r3, #8]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f000 fb46 	bl	80059b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005332:	609a      	str	r2, [r3, #8]
      break;
 8005334:	e03c      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6859      	ldr	r1, [r3, #4]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	461a      	mov	r2, r3
 8005344:	f000 faba 	bl	80058bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2150      	movs	r1, #80	; 0x50
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fb13 	bl	800597a <TIM_ITRx_SetConfig>
      break;
 8005354:	e02c      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6859      	ldr	r1, [r3, #4]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	461a      	mov	r2, r3
 8005364:	f000 fad9 	bl	800591a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2160      	movs	r1, #96	; 0x60
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fb03 	bl	800597a <TIM_ITRx_SetConfig>
      break;
 8005374:	e01c      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	6859      	ldr	r1, [r3, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	461a      	mov	r2, r3
 8005384:	f000 fa9a 	bl	80058bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2140      	movs	r1, #64	; 0x40
 800538e:	4618      	mov	r0, r3
 8005390:	f000 faf3 	bl	800597a <TIM_ITRx_SetConfig>
      break;
 8005394:	e00c      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4619      	mov	r1, r3
 80053a0:	4610      	mov	r0, r2
 80053a2:	f000 faea 	bl	800597a <TIM_ITRx_SetConfig>
      break;
 80053a6:	e003      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	73fb      	strb	r3, [r7, #15]
      break;
 80053ac:	e000      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
	...

0800541c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a40      	ldr	r2, [pc, #256]	; (8005530 <TIM_Base_SetConfig+0x114>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d013      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543a:	d00f      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a3d      	ldr	r2, [pc, #244]	; (8005534 <TIM_Base_SetConfig+0x118>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00b      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a3c      	ldr	r2, [pc, #240]	; (8005538 <TIM_Base_SetConfig+0x11c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d007      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a3b      	ldr	r2, [pc, #236]	; (800553c <TIM_Base_SetConfig+0x120>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d003      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a3a      	ldr	r2, [pc, #232]	; (8005540 <TIM_Base_SetConfig+0x124>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d108      	bne.n	800546e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a2f      	ldr	r2, [pc, #188]	; (8005530 <TIM_Base_SetConfig+0x114>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d02b      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547c:	d027      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a2c      	ldr	r2, [pc, #176]	; (8005534 <TIM_Base_SetConfig+0x118>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d023      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a2b      	ldr	r2, [pc, #172]	; (8005538 <TIM_Base_SetConfig+0x11c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d01f      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a2a      	ldr	r2, [pc, #168]	; (800553c <TIM_Base_SetConfig+0x120>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d01b      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a29      	ldr	r2, [pc, #164]	; (8005540 <TIM_Base_SetConfig+0x124>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d017      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a28      	ldr	r2, [pc, #160]	; (8005544 <TIM_Base_SetConfig+0x128>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a27      	ldr	r2, [pc, #156]	; (8005548 <TIM_Base_SetConfig+0x12c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00f      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a26      	ldr	r2, [pc, #152]	; (800554c <TIM_Base_SetConfig+0x130>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00b      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a25      	ldr	r2, [pc, #148]	; (8005550 <TIM_Base_SetConfig+0x134>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d007      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a24      	ldr	r2, [pc, #144]	; (8005554 <TIM_Base_SetConfig+0x138>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d003      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a23      	ldr	r2, [pc, #140]	; (8005558 <TIM_Base_SetConfig+0x13c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d108      	bne.n	80054e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a0a      	ldr	r2, [pc, #40]	; (8005530 <TIM_Base_SetConfig+0x114>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d003      	beq.n	8005514 <TIM_Base_SetConfig+0xf8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a0c      	ldr	r2, [pc, #48]	; (8005540 <TIM_Base_SetConfig+0x124>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d103      	bne.n	800551c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	615a      	str	r2, [r3, #20]
}
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40010000 	.word	0x40010000
 8005534:	40000400 	.word	0x40000400
 8005538:	40000800 	.word	0x40000800
 800553c:	40000c00 	.word	0x40000c00
 8005540:	40010400 	.word	0x40010400
 8005544:	40014000 	.word	0x40014000
 8005548:	40014400 	.word	0x40014400
 800554c:	40014800 	.word	0x40014800
 8005550:	40001800 	.word	0x40001800
 8005554:	40001c00 	.word	0x40001c00
 8005558:	40002000 	.word	0x40002000

0800555c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	f023 0201 	bic.w	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f023 0302 	bic.w	r3, r3, #2
 80055a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a20      	ldr	r2, [pc, #128]	; (8005634 <TIM_OC1_SetConfig+0xd8>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d003      	beq.n	80055c0 <TIM_OC1_SetConfig+0x64>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a1f      	ldr	r2, [pc, #124]	; (8005638 <TIM_OC1_SetConfig+0xdc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d10c      	bne.n	80055da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f023 0308 	bic.w	r3, r3, #8
 80055c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f023 0304 	bic.w	r3, r3, #4
 80055d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a15      	ldr	r2, [pc, #84]	; (8005634 <TIM_OC1_SetConfig+0xd8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d003      	beq.n	80055ea <TIM_OC1_SetConfig+0x8e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a14      	ldr	r2, [pc, #80]	; (8005638 <TIM_OC1_SetConfig+0xdc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d111      	bne.n	800560e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	621a      	str	r2, [r3, #32]
}
 8005628:	bf00      	nop
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	40010000 	.word	0x40010000
 8005638:	40010400 	.word	0x40010400

0800563c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f023 0210 	bic.w	r2, r3, #16
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f023 0320 	bic.w	r3, r3, #32
 8005686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a22      	ldr	r2, [pc, #136]	; (8005720 <TIM_OC2_SetConfig+0xe4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_OC2_SetConfig+0x68>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a21      	ldr	r2, [pc, #132]	; (8005724 <TIM_OC2_SetConfig+0xe8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d10d      	bne.n	80056c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a17      	ldr	r2, [pc, #92]	; (8005720 <TIM_OC2_SetConfig+0xe4>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <TIM_OC2_SetConfig+0x94>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a16      	ldr	r2, [pc, #88]	; (8005724 <TIM_OC2_SetConfig+0xe8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d113      	bne.n	80056f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	621a      	str	r2, [r3, #32]
}
 8005712:	bf00      	nop
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40010000 	.word	0x40010000
 8005724:	40010400 	.word	0x40010400

08005728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0303 	bic.w	r3, r3, #3
 800575e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	021b      	lsls	r3, r3, #8
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a21      	ldr	r2, [pc, #132]	; (8005808 <TIM_OC3_SetConfig+0xe0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d003      	beq.n	800578e <TIM_OC3_SetConfig+0x66>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a20      	ldr	r2, [pc, #128]	; (800580c <TIM_OC3_SetConfig+0xe4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d10d      	bne.n	80057aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a16      	ldr	r2, [pc, #88]	; (8005808 <TIM_OC3_SetConfig+0xe0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d003      	beq.n	80057ba <TIM_OC3_SetConfig+0x92>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a15      	ldr	r2, [pc, #84]	; (800580c <TIM_OC3_SetConfig+0xe4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d113      	bne.n	80057e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	621a      	str	r2, [r3, #32]
}
 80057fc:	bf00      	nop
 80057fe:	371c      	adds	r7, #28
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	40010000 	.word	0x40010000
 800580c:	40010400 	.word	0x40010400

08005810 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800583e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800585a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	031b      	lsls	r3, r3, #12
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a12      	ldr	r2, [pc, #72]	; (80058b4 <TIM_OC4_SetConfig+0xa4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_OC4_SetConfig+0x68>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a11      	ldr	r2, [pc, #68]	; (80058b8 <TIM_OC4_SetConfig+0xa8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d109      	bne.n	800588c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800587e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	019b      	lsls	r3, r3, #6
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	621a      	str	r2, [r3, #32]
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40010000 	.word	0x40010000
 80058b8:	40010400 	.word	0x40010400

080058bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	f023 0201 	bic.w	r2, r3, #1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f023 030a 	bic.w	r3, r3, #10
 80058f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800591a:	b480      	push	{r7}
 800591c:	b087      	sub	sp, #28
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	f023 0210 	bic.w	r2, r3, #16
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005944:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	031b      	lsls	r3, r3, #12
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005956:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	011b      	lsls	r3, r3, #4
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	621a      	str	r2, [r3, #32]
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800597a:	b480      	push	{r7}
 800597c:	b085      	sub	sp, #20
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005990:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	f043 0307 	orr.w	r3, r3, #7
 800599c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	609a      	str	r2, [r3, #8]
}
 80059a4:	bf00      	nop
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	021a      	lsls	r2, r3, #8
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	609a      	str	r2, [r3, #8]
}
 80059e4:	bf00      	nop
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f003 031f 	and.w	r3, r3, #31
 8005a02:	2201      	movs	r2, #1
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a1a      	ldr	r2, [r3, #32]
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	43db      	mvns	r3, r3
 8005a12:	401a      	ands	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a1a      	ldr	r2, [r3, #32]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f003 031f 	and.w	r3, r3, #31
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	fa01 f303 	lsl.w	r3, r1, r3
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	621a      	str	r2, [r3, #32]
}
 8005a2e:	bf00      	nop
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
	...

08005a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d101      	bne.n	8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e05a      	b.n	8005b0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a21      	ldr	r2, [pc, #132]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d022      	beq.n	8005ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa0:	d01d      	beq.n	8005ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a1d      	ldr	r2, [pc, #116]	; (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d018      	beq.n	8005ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1b      	ldr	r2, [pc, #108]	; (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d013      	beq.n	8005ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a1a      	ldr	r2, [pc, #104]	; (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00e      	beq.n	8005ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a18      	ldr	r2, [pc, #96]	; (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d009      	beq.n	8005ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a17      	ldr	r2, [pc, #92]	; (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d004      	beq.n	8005ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a15      	ldr	r2, [pc, #84]	; (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d10c      	bne.n	8005af8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ae4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40010000 	.word	0x40010000
 8005b1c:	40000400 	.word	0x40000400
 8005b20:	40000800 	.word	0x40000800
 8005b24:	40000c00 	.word	0x40000c00
 8005b28:	40010400 	.word	0x40010400
 8005b2c:	40014000 	.word	0x40014000
 8005b30:	40001800 	.word	0x40001800

08005b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e03f      	b.n	8005bee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fc f91e 	bl	8001dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2224      	movs	r2, #36	; 0x24
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f829 	bl	8005bf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695a      	ldr	r2, [r3, #20]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bfc:	b0c0      	sub	sp, #256	; 0x100
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c14:	68d9      	ldr	r1, [r3, #12]
 8005c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	ea40 0301 	orr.w	r3, r0, r1
 8005c20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	431a      	orrs	r2, r3
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c50:	f021 010c 	bic.w	r1, r1, #12
 8005c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c5e:	430b      	orrs	r3, r1
 8005c60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c72:	6999      	ldr	r1, [r3, #24]
 8005c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	ea40 0301 	orr.w	r3, r0, r1
 8005c7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	4b8f      	ldr	r3, [pc, #572]	; (8005ec4 <UART_SetConfig+0x2cc>)
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d005      	beq.n	8005c98 <UART_SetConfig+0xa0>
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	4b8d      	ldr	r3, [pc, #564]	; (8005ec8 <UART_SetConfig+0x2d0>)
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d104      	bne.n	8005ca2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c98:	f7fe f918 	bl	8003ecc <HAL_RCC_GetPCLK2Freq>
 8005c9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ca0:	e003      	b.n	8005caa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ca2:	f7fe f8ff 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 8005ca6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb4:	f040 810c 	bne.w	8005ed0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005cc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005cca:	4622      	mov	r2, r4
 8005ccc:	462b      	mov	r3, r5
 8005cce:	1891      	adds	r1, r2, r2
 8005cd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cd2:	415b      	adcs	r3, r3
 8005cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cda:	4621      	mov	r1, r4
 8005cdc:	eb12 0801 	adds.w	r8, r2, r1
 8005ce0:	4629      	mov	r1, r5
 8005ce2:	eb43 0901 	adc.w	r9, r3, r1
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cfa:	4690      	mov	r8, r2
 8005cfc:	4699      	mov	r9, r3
 8005cfe:	4623      	mov	r3, r4
 8005d00:	eb18 0303 	adds.w	r3, r8, r3
 8005d04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d08:	462b      	mov	r3, r5
 8005d0a:	eb49 0303 	adc.w	r3, r9, r3
 8005d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d26:	460b      	mov	r3, r1
 8005d28:	18db      	adds	r3, r3, r3
 8005d2a:	653b      	str	r3, [r7, #80]	; 0x50
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	eb42 0303 	adc.w	r3, r2, r3
 8005d32:	657b      	str	r3, [r7, #84]	; 0x54
 8005d34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d3c:	f7fa ff34 	bl	8000ba8 <__aeabi_uldivmod>
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	4b61      	ldr	r3, [pc, #388]	; (8005ecc <UART_SetConfig+0x2d4>)
 8005d46:	fba3 2302 	umull	r2, r3, r3, r2
 8005d4a:	095b      	lsrs	r3, r3, #5
 8005d4c:	011c      	lsls	r4, r3, #4
 8005d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d60:	4642      	mov	r2, r8
 8005d62:	464b      	mov	r3, r9
 8005d64:	1891      	adds	r1, r2, r2
 8005d66:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d68:	415b      	adcs	r3, r3
 8005d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d70:	4641      	mov	r1, r8
 8005d72:	eb12 0a01 	adds.w	sl, r2, r1
 8005d76:	4649      	mov	r1, r9
 8005d78:	eb43 0b01 	adc.w	fp, r3, r1
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d90:	4692      	mov	sl, r2
 8005d92:	469b      	mov	fp, r3
 8005d94:	4643      	mov	r3, r8
 8005d96:	eb1a 0303 	adds.w	r3, sl, r3
 8005d9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d9e:	464b      	mov	r3, r9
 8005da0:	eb4b 0303 	adc.w	r3, fp, r3
 8005da4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005db4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005db8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	18db      	adds	r3, r3, r3
 8005dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	eb42 0303 	adc.w	r3, r2, r3
 8005dc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005dce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005dd2:	f7fa fee9 	bl	8000ba8 <__aeabi_uldivmod>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4611      	mov	r1, r2
 8005ddc:	4b3b      	ldr	r3, [pc, #236]	; (8005ecc <UART_SetConfig+0x2d4>)
 8005dde:	fba3 2301 	umull	r2, r3, r3, r1
 8005de2:	095b      	lsrs	r3, r3, #5
 8005de4:	2264      	movs	r2, #100	; 0x64
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	1acb      	subs	r3, r1, r3
 8005dec:	00db      	lsls	r3, r3, #3
 8005dee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005df2:	4b36      	ldr	r3, [pc, #216]	; (8005ecc <UART_SetConfig+0x2d4>)
 8005df4:	fba3 2302 	umull	r2, r3, r3, r2
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e00:	441c      	add	r4, r3
 8005e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e06:	2200      	movs	r2, #0
 8005e08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e14:	4642      	mov	r2, r8
 8005e16:	464b      	mov	r3, r9
 8005e18:	1891      	adds	r1, r2, r2
 8005e1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e1c:	415b      	adcs	r3, r3
 8005e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e24:	4641      	mov	r1, r8
 8005e26:	1851      	adds	r1, r2, r1
 8005e28:	6339      	str	r1, [r7, #48]	; 0x30
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	414b      	adcs	r3, r1
 8005e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e30:	f04f 0200 	mov.w	r2, #0
 8005e34:	f04f 0300 	mov.w	r3, #0
 8005e38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e3c:	4659      	mov	r1, fp
 8005e3e:	00cb      	lsls	r3, r1, #3
 8005e40:	4651      	mov	r1, sl
 8005e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e46:	4651      	mov	r1, sl
 8005e48:	00ca      	lsls	r2, r1, #3
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4603      	mov	r3, r0
 8005e50:	4642      	mov	r2, r8
 8005e52:	189b      	adds	r3, r3, r2
 8005e54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e58:	464b      	mov	r3, r9
 8005e5a:	460a      	mov	r2, r1
 8005e5c:	eb42 0303 	adc.w	r3, r2, r3
 8005e60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e78:	460b      	mov	r3, r1
 8005e7a:	18db      	adds	r3, r3, r3
 8005e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e7e:	4613      	mov	r3, r2
 8005e80:	eb42 0303 	adc.w	r3, r2, r3
 8005e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e8e:	f7fa fe8b 	bl	8000ba8 <__aeabi_uldivmod>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4b0d      	ldr	r3, [pc, #52]	; (8005ecc <UART_SetConfig+0x2d4>)
 8005e98:	fba3 1302 	umull	r1, r3, r3, r2
 8005e9c:	095b      	lsrs	r3, r3, #5
 8005e9e:	2164      	movs	r1, #100	; 0x64
 8005ea0:	fb01 f303 	mul.w	r3, r1, r3
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	3332      	adds	r3, #50	; 0x32
 8005eaa:	4a08      	ldr	r2, [pc, #32]	; (8005ecc <UART_SetConfig+0x2d4>)
 8005eac:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	f003 0207 	and.w	r2, r3, #7
 8005eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4422      	add	r2, r4
 8005ebe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ec0:	e106      	b.n	80060d0 <UART_SetConfig+0x4d8>
 8005ec2:	bf00      	nop
 8005ec4:	40011000 	.word	0x40011000
 8005ec8:	40011400 	.word	0x40011400
 8005ecc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005eda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ede:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ee2:	4642      	mov	r2, r8
 8005ee4:	464b      	mov	r3, r9
 8005ee6:	1891      	adds	r1, r2, r2
 8005ee8:	6239      	str	r1, [r7, #32]
 8005eea:	415b      	adcs	r3, r3
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
 8005eee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ef2:	4641      	mov	r1, r8
 8005ef4:	1854      	adds	r4, r2, r1
 8005ef6:	4649      	mov	r1, r9
 8005ef8:	eb43 0501 	adc.w	r5, r3, r1
 8005efc:	f04f 0200 	mov.w	r2, #0
 8005f00:	f04f 0300 	mov.w	r3, #0
 8005f04:	00eb      	lsls	r3, r5, #3
 8005f06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f0a:	00e2      	lsls	r2, r4, #3
 8005f0c:	4614      	mov	r4, r2
 8005f0e:	461d      	mov	r5, r3
 8005f10:	4643      	mov	r3, r8
 8005f12:	18e3      	adds	r3, r4, r3
 8005f14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f18:	464b      	mov	r3, r9
 8005f1a:	eb45 0303 	adc.w	r3, r5, r3
 8005f1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f32:	f04f 0200 	mov.w	r2, #0
 8005f36:	f04f 0300 	mov.w	r3, #0
 8005f3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f3e:	4629      	mov	r1, r5
 8005f40:	008b      	lsls	r3, r1, #2
 8005f42:	4621      	mov	r1, r4
 8005f44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f48:	4621      	mov	r1, r4
 8005f4a:	008a      	lsls	r2, r1, #2
 8005f4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f50:	f7fa fe2a 	bl	8000ba8 <__aeabi_uldivmod>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4b60      	ldr	r3, [pc, #384]	; (80060dc <UART_SetConfig+0x4e4>)
 8005f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	011c      	lsls	r4, r3, #4
 8005f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f74:	4642      	mov	r2, r8
 8005f76:	464b      	mov	r3, r9
 8005f78:	1891      	adds	r1, r2, r2
 8005f7a:	61b9      	str	r1, [r7, #24]
 8005f7c:	415b      	adcs	r3, r3
 8005f7e:	61fb      	str	r3, [r7, #28]
 8005f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f84:	4641      	mov	r1, r8
 8005f86:	1851      	adds	r1, r2, r1
 8005f88:	6139      	str	r1, [r7, #16]
 8005f8a:	4649      	mov	r1, r9
 8005f8c:	414b      	adcs	r3, r1
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	f04f 0300 	mov.w	r3, #0
 8005f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f9c:	4659      	mov	r1, fp
 8005f9e:	00cb      	lsls	r3, r1, #3
 8005fa0:	4651      	mov	r1, sl
 8005fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fa6:	4651      	mov	r1, sl
 8005fa8:	00ca      	lsls	r2, r1, #3
 8005faa:	4610      	mov	r0, r2
 8005fac:	4619      	mov	r1, r3
 8005fae:	4603      	mov	r3, r0
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	189b      	adds	r3, r3, r2
 8005fb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fb8:	464b      	mov	r3, r9
 8005fba:	460a      	mov	r2, r1
 8005fbc:	eb42 0303 	adc.w	r3, r2, r3
 8005fc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005fd0:	f04f 0200 	mov.w	r2, #0
 8005fd4:	f04f 0300 	mov.w	r3, #0
 8005fd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005fdc:	4649      	mov	r1, r9
 8005fde:	008b      	lsls	r3, r1, #2
 8005fe0:	4641      	mov	r1, r8
 8005fe2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fe6:	4641      	mov	r1, r8
 8005fe8:	008a      	lsls	r2, r1, #2
 8005fea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005fee:	f7fa fddb 	bl	8000ba8 <__aeabi_uldivmod>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	4b38      	ldr	r3, [pc, #224]	; (80060dc <UART_SetConfig+0x4e4>)
 8005ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	2264      	movs	r2, #100	; 0x64
 8006002:	fb02 f303 	mul.w	r3, r2, r3
 8006006:	1acb      	subs	r3, r1, r3
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	3332      	adds	r3, #50	; 0x32
 800600c:	4a33      	ldr	r2, [pc, #204]	; (80060dc <UART_SetConfig+0x4e4>)
 800600e:	fba2 2303 	umull	r2, r3, r2, r3
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006018:	441c      	add	r4, r3
 800601a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800601e:	2200      	movs	r2, #0
 8006020:	673b      	str	r3, [r7, #112]	; 0x70
 8006022:	677a      	str	r2, [r7, #116]	; 0x74
 8006024:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006028:	4642      	mov	r2, r8
 800602a:	464b      	mov	r3, r9
 800602c:	1891      	adds	r1, r2, r2
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	415b      	adcs	r3, r3
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006038:	4641      	mov	r1, r8
 800603a:	1851      	adds	r1, r2, r1
 800603c:	6039      	str	r1, [r7, #0]
 800603e:	4649      	mov	r1, r9
 8006040:	414b      	adcs	r3, r1
 8006042:	607b      	str	r3, [r7, #4]
 8006044:	f04f 0200 	mov.w	r2, #0
 8006048:	f04f 0300 	mov.w	r3, #0
 800604c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006050:	4659      	mov	r1, fp
 8006052:	00cb      	lsls	r3, r1, #3
 8006054:	4651      	mov	r1, sl
 8006056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800605a:	4651      	mov	r1, sl
 800605c:	00ca      	lsls	r2, r1, #3
 800605e:	4610      	mov	r0, r2
 8006060:	4619      	mov	r1, r3
 8006062:	4603      	mov	r3, r0
 8006064:	4642      	mov	r2, r8
 8006066:	189b      	adds	r3, r3, r2
 8006068:	66bb      	str	r3, [r7, #104]	; 0x68
 800606a:	464b      	mov	r3, r9
 800606c:	460a      	mov	r2, r1
 800606e:	eb42 0303 	adc.w	r3, r2, r3
 8006072:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	663b      	str	r3, [r7, #96]	; 0x60
 800607e:	667a      	str	r2, [r7, #100]	; 0x64
 8006080:	f04f 0200 	mov.w	r2, #0
 8006084:	f04f 0300 	mov.w	r3, #0
 8006088:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800608c:	4649      	mov	r1, r9
 800608e:	008b      	lsls	r3, r1, #2
 8006090:	4641      	mov	r1, r8
 8006092:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006096:	4641      	mov	r1, r8
 8006098:	008a      	lsls	r2, r1, #2
 800609a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800609e:	f7fa fd83 	bl	8000ba8 <__aeabi_uldivmod>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	4b0d      	ldr	r3, [pc, #52]	; (80060dc <UART_SetConfig+0x4e4>)
 80060a8:	fba3 1302 	umull	r1, r3, r3, r2
 80060ac:	095b      	lsrs	r3, r3, #5
 80060ae:	2164      	movs	r1, #100	; 0x64
 80060b0:	fb01 f303 	mul.w	r3, r1, r3
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	3332      	adds	r3, #50	; 0x32
 80060ba:	4a08      	ldr	r2, [pc, #32]	; (80060dc <UART_SetConfig+0x4e4>)
 80060bc:	fba2 2303 	umull	r2, r3, r2, r3
 80060c0:	095b      	lsrs	r3, r3, #5
 80060c2:	f003 020f 	and.w	r2, r3, #15
 80060c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4422      	add	r2, r4
 80060ce:	609a      	str	r2, [r3, #8]
}
 80060d0:	bf00      	nop
 80060d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80060d6:	46bd      	mov	sp, r7
 80060d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060dc:	51eb851f 	.word	0x51eb851f

080060e0 <L3GD20_loop>:
	}
	LED9_OFF;LED10_OFF;LED11_OFF;
}

void L3GD20_loop(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
	Noise_Z = (Noise_Z>GYRO_NOISE_THRESHOLD)? GYRO_NOISE_THRESHOLD:Noise_Z;
 80060e4:	4b55      	ldr	r3, [pc, #340]	; (800623c <L3GD20_loop+0x15c>)
 80060e6:	edd3 7a00 	vldr	s15, [r3]
 80060ea:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006240 <L3GD20_loop+0x160>
 80060ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f6:	dd01      	ble.n	80060fc <L3GD20_loop+0x1c>
 80060f8:	4b52      	ldr	r3, [pc, #328]	; (8006244 <L3GD20_loop+0x164>)
 80060fa:	e001      	b.n	8006100 <L3GD20_loop+0x20>
 80060fc:	4b4f      	ldr	r3, [pc, #316]	; (800623c <L3GD20_loop+0x15c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a4e      	ldr	r2, [pc, #312]	; (800623c <L3GD20_loop+0x15c>)
 8006102:	6013      	str	r3, [r2, #0]
	Raw_z = 0;
 8006104:	4b50      	ldr	r3, [pc, #320]	; (8006248 <L3GD20_loop+0x168>)
 8006106:	2200      	movs	r2, #0
 8006108:	801a      	strh	r2, [r3, #0]

	if (dataReadyFlag == L3GD20_DATA_READY)
 800610a:	4b50      	ldr	r3, [pc, #320]	; (800624c <L3GD20_loop+0x16c>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d139      	bne.n	8006186 <L3GD20_loop+0xa6>
	{

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006112:	2200      	movs	r2, #0
 8006114:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006118:	484d      	ldr	r0, [pc, #308]	; (8006250 <L3GD20_loop+0x170>)
 800611a:	f7fd fa15 	bl	8003548 <HAL_GPIO_WritePin>
		spiTxBuf[0] = 0x2c | 0x80;
 800611e:	4b4d      	ldr	r3, [pc, #308]	; (8006254 <L3GD20_loop+0x174>)
 8006120:	22ac      	movs	r2, #172	; 0xac
 8006122:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8006124:	2332      	movs	r3, #50	; 0x32
 8006126:	2201      	movs	r2, #1
 8006128:	494a      	ldr	r1, [pc, #296]	; (8006254 <L3GD20_loop+0x174>)
 800612a:	484b      	ldr	r0, [pc, #300]	; (8006258 <L3GD20_loop+0x178>)
 800612c:	f7fd ff86 	bl	800403c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &spiRxBuf[5], 1, 50);
 8006130:	2332      	movs	r3, #50	; 0x32
 8006132:	2201      	movs	r2, #1
 8006134:	4949      	ldr	r1, [pc, #292]	; (800625c <L3GD20_loop+0x17c>)
 8006136:	4848      	ldr	r0, [pc, #288]	; (8006258 <L3GD20_loop+0x178>)
 8006138:	f7fe f8bc 	bl	80042b4 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800613c:	2201      	movs	r2, #1
 800613e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006142:	4843      	ldr	r0, [pc, #268]	; (8006250 <L3GD20_loop+0x170>)
 8006144:	f7fd fa00 	bl	8003548 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006148:	2200      	movs	r2, #0
 800614a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800614e:	4840      	ldr	r0, [pc, #256]	; (8006250 <L3GD20_loop+0x170>)
 8006150:	f7fd f9fa 	bl	8003548 <HAL_GPIO_WritePin>
		spiTxBuf[0] = 0x2d | 0x80;
 8006154:	4b3f      	ldr	r3, [pc, #252]	; (8006254 <L3GD20_loop+0x174>)
 8006156:	22ad      	movs	r2, #173	; 0xad
 8006158:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 800615a:	2332      	movs	r3, #50	; 0x32
 800615c:	2201      	movs	r2, #1
 800615e:	493d      	ldr	r1, [pc, #244]	; (8006254 <L3GD20_loop+0x174>)
 8006160:	483d      	ldr	r0, [pc, #244]	; (8006258 <L3GD20_loop+0x178>)
 8006162:	f7fd ff6b 	bl	800403c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &spiRxBuf[6], 1, 50);
 8006166:	2332      	movs	r3, #50	; 0x32
 8006168:	2201      	movs	r2, #1
 800616a:	493d      	ldr	r1, [pc, #244]	; (8006260 <L3GD20_loop+0x180>)
 800616c:	483a      	ldr	r0, [pc, #232]	; (8006258 <L3GD20_loop+0x178>)
 800616e:	f7fe f8a1 	bl	80042b4 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006172:	2201      	movs	r2, #1
 8006174:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006178:	4835      	ldr	r0, [pc, #212]	; (8006250 <L3GD20_loop+0x170>)
 800617a:	f7fd f9e5 	bl	8003548 <HAL_GPIO_WritePin>

		dataReadyFlag = L3GD20_DATA_NOT_READY;
 800617e:	4b33      	ldr	r3, [pc, #204]	; (800624c <L3GD20_loop+0x16c>)
 8006180:	2200      	movs	r2, #0
 8006182:	701a      	strb	r2, [r3, #0]
			LastAngleRate_Z = angleRate_z;
		}
		else;
		dataReadyFlag = L3GD20_DATA_READY;
	}
}
 8006184:	e057      	b.n	8006236 <L3GD20_loop+0x156>
		Raw_z = (spiRxBuf[6] << 8) | spiRxBuf[5];
 8006186:	4b37      	ldr	r3, [pc, #220]	; (8006264 <L3GD20_loop+0x184>)
 8006188:	799b      	ldrb	r3, [r3, #6]
 800618a:	021b      	lsls	r3, r3, #8
 800618c:	b21a      	sxth	r2, r3
 800618e:	4b35      	ldr	r3, [pc, #212]	; (8006264 <L3GD20_loop+0x184>)
 8006190:	795b      	ldrb	r3, [r3, #5]
 8006192:	b21b      	sxth	r3, r3
 8006194:	4313      	orrs	r3, r2
 8006196:	b21a      	sxth	r2, r3
 8006198:	4b2b      	ldr	r3, [pc, #172]	; (8006248 <L3GD20_loop+0x168>)
 800619a:	801a      	strh	r2, [r3, #0]
		angleRate_z = (float)(Raw_z - (offset_z)) * GYRO_SENSITIVITY;
 800619c:	4b2a      	ldr	r3, [pc, #168]	; (8006248 <L3GD20_loop+0x168>)
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	b21b      	sxth	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	4b30      	ldr	r3, [pc, #192]	; (8006268 <L3GD20_loop+0x188>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061b2:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800626c <L3GD20_loop+0x18c>
 80061b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061ba:	4b2d      	ldr	r3, [pc, #180]	; (8006270 <L3GD20_loop+0x190>)
 80061bc:	edc3 7a00 	vstr	s15, [r3]
		timeDifference = 0.001;
 80061c0:	4b2c      	ldr	r3, [pc, #176]	; (8006274 <L3GD20_loop+0x194>)
 80061c2:	4a2d      	ldr	r2, [pc, #180]	; (8006278 <L3GD20_loop+0x198>)
 80061c4:	601a      	str	r2, [r3, #0]
		if ((angleRate_z > Noise_Z) || (angleRate_z < -Noise_Z))
 80061c6:	4b2a      	ldr	r3, [pc, #168]	; (8006270 <L3GD20_loop+0x190>)
 80061c8:	ed93 7a00 	vldr	s14, [r3]
 80061cc:	4b1b      	ldr	r3, [pc, #108]	; (800623c <L3GD20_loop+0x15c>)
 80061ce:	edd3 7a00 	vldr	s15, [r3]
 80061d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061da:	dc0c      	bgt.n	80061f6 <L3GD20_loop+0x116>
 80061dc:	4b17      	ldr	r3, [pc, #92]	; (800623c <L3GD20_loop+0x15c>)
 80061de:	edd3 7a00 	vldr	s15, [r3]
 80061e2:	eeb1 7a67 	vneg.f32	s14, s15
 80061e6:	4b22      	ldr	r3, [pc, #136]	; (8006270 <L3GD20_loop+0x190>)
 80061e8:	edd3 7a00 	vldr	s15, [r3]
 80061ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f4:	dd1c      	ble.n	8006230 <L3GD20_loop+0x150>
			Angle_Z += ((angleRate_z + LastAngleRate_Z) * timeDifference) / (2.0f);
 80061f6:	4b1e      	ldr	r3, [pc, #120]	; (8006270 <L3GD20_loop+0x190>)
 80061f8:	ed93 7a00 	vldr	s14, [r3]
 80061fc:	4b1f      	ldr	r3, [pc, #124]	; (800627c <L3GD20_loop+0x19c>)
 80061fe:	edd3 7a00 	vldr	s15, [r3]
 8006202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006206:	4b1b      	ldr	r3, [pc, #108]	; (8006274 <L3GD20_loop+0x194>)
 8006208:	edd3 7a00 	vldr	s15, [r3]
 800620c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006210:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006214:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006218:	4b19      	ldr	r3, [pc, #100]	; (8006280 <L3GD20_loop+0x1a0>)
 800621a:	edd3 7a00 	vldr	s15, [r3]
 800621e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006222:	4b17      	ldr	r3, [pc, #92]	; (8006280 <L3GD20_loop+0x1a0>)
 8006224:	edc3 7a00 	vstr	s15, [r3]
			LastAngleRate_Z = angleRate_z;
 8006228:	4b11      	ldr	r3, [pc, #68]	; (8006270 <L3GD20_loop+0x190>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a13      	ldr	r2, [pc, #76]	; (800627c <L3GD20_loop+0x19c>)
 800622e:	6013      	str	r3, [r2, #0]
		dataReadyFlag = L3GD20_DATA_READY;
 8006230:	4b06      	ldr	r3, [pc, #24]	; (800624c <L3GD20_loop+0x16c>)
 8006232:	2201      	movs	r2, #1
 8006234:	701a      	strb	r2, [r3, #0]
}
 8006236:	bf00      	nop
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	200005c0 	.word	0x200005c0
 8006240:	3f733333 	.word	0x3f733333
 8006244:	3f733333 	.word	0x3f733333
 8006248:	200005dc 	.word	0x200005dc
 800624c:	20000009 	.word	0x20000009
 8006250:	40020800 	.word	0x40020800
 8006254:	200005cc 	.word	0x200005cc
 8006258:	200002c4 	.word	0x200002c4
 800625c:	200005d5 	.word	0x200005d5
 8006260:	200005d6 	.word	0x200005d6
 8006264:	200005d0 	.word	0x200005d0
 8006268:	200005bc 	.word	0x200005bc
 800626c:	3e159b3d 	.word	0x3e159b3d
 8006270:	200005b8 	.word	0x200005b8
 8006274:	200005d8 	.word	0x200005d8
 8006278:	3a83126f 	.word	0x3a83126f
 800627c:	200005c8 	.word	0x200005c8
 8006280:	200005c4 	.word	0x200005c4

08006284 <readADC>:
#include "adc.h"



uint16_t readADC(adc_channels channel, uint8_t timeout)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	460a      	mov	r2, r1
 800628e:	71fb      	strb	r3, [r7, #7]
 8006290:	4613      	mov	r3, r2
 8006292:	71bb      	strb	r3, [r7, #6]
    ADC_ChannelConfTypeDef sConfig = {0};
 8006294:	f107 030c 	add.w	r3, r7, #12
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	605a      	str	r2, [r3, #4]
 800629e:	609a      	str	r2, [r3, #8]
 80062a0:	60da      	str	r2, [r3, #12]
    uint16_t adc_val = 0;
 80062a2:	2300      	movs	r3, #0
 80062a4:	83fb      	strh	r3, [r7, #30]
    switch (channel)
 80062a6:	79fb      	ldrb	r3, [r7, #7]
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d81c      	bhi.n	80062e6 <readADC+0x62>
 80062ac:	a201      	add	r2, pc, #4	; (adr r2, 80062b4 <readADC+0x30>)
 80062ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b2:	bf00      	nop
 80062b4:	080062d5 	.word	0x080062d5
 80062b8:	080062c9 	.word	0x080062c9
 80062bc:	080062e1 	.word	0x080062e1
 80062c0:	080062cf 	.word	0x080062cf
 80062c4:	080062db 	.word	0x080062db
    {
        case RF_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_4;
 80062c8:	2304      	movs	r3, #4
 80062ca:	60fb      	str	r3, [r7, #12]
            break;
 80062cc:	e00b      	b.n	80062e6 <readADC+0x62>

        case DL_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_8;
 80062ce:	2308      	movs	r3, #8
 80062d0:	60fb      	str	r3, [r7, #12]
            break;
 80062d2:	e008      	b.n	80062e6 <readADC+0x62>

        case LF_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_9;
 80062d4:	2309      	movs	r3, #9
 80062d6:	60fb      	str	r3, [r7, #12]
            break;
 80062d8:	e005      	b.n	80062e6 <readADC+0x62>

        case BAT_VOL:
        	sConfig.Channel = ADC_CHANNEL_13;
 80062da:	230d      	movs	r3, #13
 80062dc:	60fb      	str	r3, [r7, #12]
            break;
 80062de:	e002      	b.n	80062e6 <readADC+0x62>
        
        case DR_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_14;
 80062e0:	230e      	movs	r3, #14
 80062e2:	60fb      	str	r3, [r7, #12]
            break;
 80062e4:	bf00      	nop
    }


    sConfig.Rank = 1;
 80062e6:	2301      	movs	r3, #1
 80062e8:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80062ea:	2304      	movs	r3, #4
 80062ec:	617b      	str	r3, [r7, #20]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80062ee:	f107 030c 	add.w	r3, r7, #12
 80062f2:	4619      	mov	r1, r3
 80062f4:	480e      	ldr	r0, [pc, #56]	; (8006330 <readADC+0xac>)
 80062f6:	f7fc f971 	bl	80025dc <HAL_ADC_ConfigChannel>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <readADC+0x80>
    {
      Error_Handler();
 8006300:	f7fb fa6a 	bl	80017d8 <Error_Handler>
    }

    HAL_ADC_Start(&hadc1);
 8006304:	480a      	ldr	r0, [pc, #40]	; (8006330 <readADC+0xac>)
 8006306:	f7fb ffcb 	bl	80022a0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1,timeout);
 800630a:	79bb      	ldrb	r3, [r7, #6]
 800630c:	4619      	mov	r1, r3
 800630e:	4808      	ldr	r0, [pc, #32]	; (8006330 <readADC+0xac>)
 8006310:	f7fc f8cb 	bl	80024aa <HAL_ADC_PollForConversion>
    adc_val = HAL_ADC_GetValue(&hadc1);
 8006314:	4806      	ldr	r0, [pc, #24]	; (8006330 <readADC+0xac>)
 8006316:	f7fc f953 	bl	80025c0 <HAL_ADC_GetValue>
 800631a:	4603      	mov	r3, r0
 800631c:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(&hadc1);
 800631e:	4804      	ldr	r0, [pc, #16]	; (8006330 <readADC+0xac>)
 8006320:	f7fc f890 	bl	8002444 <HAL_ADC_Stop>

    return adc_val;
 8006324:	8bfb      	ldrh	r3, [r7, #30]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3720      	adds	r7, #32
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	2000021c 	.word	0x2000021c

08006334 <buzzerInit>:
const float BUZZ_LOUDNESS = 0.07;
const int SLOW_FACTOR = 30;

// BUZZER INITIALIZATION
void buzzerInit(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8006338:	2100      	movs	r1, #0
 800633a:	4802      	ldr	r0, [pc, #8]	; (8006344 <buzzerInit+0x10>)
 800633c:	f7fe fc46 	bl	8004bcc <HAL_TIM_PWM_Start>
}
 8006340:	bf00      	nop
 8006342:	bd80      	pop	{r7, pc}
 8006344:	20000494 	.word	0x20000494

08006348 <setBuzz>:

// SETTING FREQUECY & AMPLITUDE
int setBuzz(u16 freq, float amp)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	4603      	mov	r3, r0
 8006350:	ed87 0a00 	vstr	s0, [r7]
 8006354:	80fb      	strh	r3, [r7, #6]
  u16 period = 500000 / freq;
 8006356:	88fb      	ldrh	r3, [r7, #6]
 8006358:	4a10      	ldr	r2, [pc, #64]	; (800639c <setBuzz+0x54>)
 800635a:	fb92 f3f3 	sdiv	r3, r2, r3
 800635e:	81fb      	strh	r3, [r7, #14]
  TIM9->CNT = 0;
 8006360:	4b0f      	ldr	r3, [pc, #60]	; (80063a0 <setBuzz+0x58>)
 8006362:	2200      	movs	r2, #0
 8006364:	625a      	str	r2, [r3, #36]	; 0x24
  TIM9->ARR = period - 1;
 8006366:	89fb      	ldrh	r3, [r7, #14]
 8006368:	1e5a      	subs	r2, r3, #1
 800636a:	4b0d      	ldr	r3, [pc, #52]	; (80063a0 <setBuzz+0x58>)
 800636c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, period * amp);
 800636e:	89fb      	ldrh	r3, [r7, #14]
 8006370:	ee07 3a90 	vmov	s15, r3
 8006374:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006378:	edd7 7a00 	vldr	s15, [r7]
 800637c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006380:	4b08      	ldr	r3, [pc, #32]	; (80063a4 <setBuzz+0x5c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006388:	ee17 2a90 	vmov	r2, s15
 800638c:	635a      	str	r2, [r3, #52]	; 0x34
  return 0;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	0007a120 	.word	0x0007a120
 80063a0:	40014000 	.word	0x40014000
 80063a4:	20000494 	.word	0x20000494

080063a8 <playSound>:

void playSound(BUZZ_Tones tone_index)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	4603      	mov	r3, r0
 80063b0:	71fb      	strb	r3, [r7, #7]
  int tone_ = 0;
 80063b2:	2300      	movs	r3, #0
 80063b4:	60fb      	str	r3, [r7, #12]
  switch (tone_index)
 80063b6:	79fb      	ldrb	r3, [r7, #7]
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d81c      	bhi.n	80063f6 <playSound+0x4e>
 80063bc:	a201      	add	r2, pc, #4	; (adr r2, 80063c4 <playSound+0x1c>)
 80063be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c2:	bf00      	nop
 80063c4:	080063d9 	.word	0x080063d9
 80063c8:	080063df 	.word	0x080063df
 80063cc:	080063e5 	.word	0x080063e5
 80063d0:	080063eb 	.word	0x080063eb
 80063d4:	080063f1 	.word	0x080063f1
  {
  case WIN_TONE:
    tone_ = 0;
 80063d8:	2300      	movs	r3, #0
 80063da:	60fb      	str	r3, [r7, #12]
    break;
 80063dc:	e00b      	b.n	80063f6 <playSound+0x4e>

  case TONE1:
    tone_ = 1;
 80063de:	2301      	movs	r3, #1
 80063e0:	60fb      	str	r3, [r7, #12]
    break;
 80063e2:	e008      	b.n	80063f6 <playSound+0x4e>

  case TONE2:
    tone_ = 2;
 80063e4:	2302      	movs	r3, #2
 80063e6:	60fb      	str	r3, [r7, #12]
    break;
 80063e8:	e005      	b.n	80063f6 <playSound+0x4e>

  case TONE3:
    tone_ = 3;
 80063ea:	2303      	movs	r3, #3
 80063ec:	60fb      	str	r3, [r7, #12]
    break;
 80063ee:	e002      	b.n	80063f6 <playSound+0x4e>

  case TONE4:
    tone_ = 4;
 80063f0:	2304      	movs	r3, #4
 80063f2:	60fb      	str	r3, [r7, #12]
    break;
 80063f4:	bf00      	nop
  }
  for (int noteIndex = 0; noteIndex < melodySizes[tone_]; noteIndex++)
 80063f6:	2300      	movs	r3, #0
 80063f8:	60bb      	str	r3, [r7, #8]
 80063fa:	e020      	b.n	800643e <playSound+0x96>
  {
    setBuzz(melody[tone_][noteIndex], BUZZ_LOUDNESS);
 80063fc:	4a17      	ldr	r2, [pc, #92]	; (800645c <playSound+0xb4>)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	b29b      	uxth	r3, r3
 800640e:	eddf 7a14 	vldr	s15, [pc, #80]	; 8006460 <playSound+0xb8>
 8006412:	eeb0 0a67 	vmov.f32	s0, s15
 8006416:	4618      	mov	r0, r3
 8006418:	f7ff ff96 	bl	8006348 <setBuzz>
    HAL_Delay(noteDurations[tone_][noteIndex] * SLOW_FACTOR);
 800641c:	4a11      	ldr	r2, [pc, #68]	; (8006464 <playSound+0xbc>)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	221e      	movs	r2, #30
 800642e:	fb02 f303 	mul.w	r3, r2, r3
 8006432:	4618      	mov	r0, r3
 8006434:	f7fb fecc 	bl	80021d0 <HAL_Delay>
  for (int noteIndex = 0; noteIndex < melodySizes[tone_]; noteIndex++)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	3301      	adds	r3, #1
 800643c:	60bb      	str	r3, [r7, #8]
 800643e:	4a0a      	ldr	r2, [pc, #40]	; (8006468 <playSound+0xc0>)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	429a      	cmp	r2, r3
 800644a:	d8d7      	bhi.n	80063fc <playSound+0x54>
  }
  OFF_BUZZ;
 800644c:	4b07      	ldr	r3, [pc, #28]	; (800646c <playSound+0xc4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2200      	movs	r2, #0
 8006452:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006454:	bf00      	nop
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	2000000c 	.word	0x2000000c
 8006460:	3d8f5c29 	.word	0x3d8f5c29
 8006464:	20000020 	.word	0x20000020
 8006468:	08009530 	.word	0x08009530
 800646c:	20000494 	.word	0x20000494

08006470 <readSensor>:
bool R = false;
bool F = false;

/*read IR sensors*/
void readSensor(void)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8006474:	4b73      	ldr	r3, [pc, #460]	; (8006644 <readSensor+0x1d4>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2200      	movs	r2, #0
 800647a:	625a      	str	r2, [r3, #36]	; 0x24
	//read DC value	
	LFSensor = read_LF_Sensor;	
 800647c:	2101      	movs	r1, #1
 800647e:	2000      	movs	r0, #0
 8006480:	f7ff ff00 	bl	8006284 <readADC>
 8006484:	4603      	mov	r3, r0
 8006486:	461a      	mov	r2, r3
 8006488:	4b6f      	ldr	r3, [pc, #444]	; (8006648 <readSensor+0x1d8>)
 800648a:	601a      	str	r2, [r3, #0]
	RFSensor = read_RF_Sensor;	
 800648c:	2101      	movs	r1, #1
 800648e:	2001      	movs	r0, #1
 8006490:	f7ff fef8 	bl	8006284 <readADC>
 8006494:	4603      	mov	r3, r0
 8006496:	461a      	mov	r2, r3
 8006498:	4b6c      	ldr	r3, [pc, #432]	; (800664c <readSensor+0x1dc>)
 800649a:	601a      	str	r2, [r3, #0]
	DLSensor = read_DL_Sensor;
 800649c:	2101      	movs	r1, #1
 800649e:	2003      	movs	r0, #3
 80064a0:	f7ff fef0 	bl	8006284 <readADC>
 80064a4:	4603      	mov	r3, r0
 80064a6:	461a      	mov	r2, r3
 80064a8:	4b69      	ldr	r3, [pc, #420]	; (8006650 <readSensor+0x1e0>)
 80064aa:	601a      	str	r2, [r3, #0]
	DRSensor = read_DR_Sensor;	
 80064ac:	2101      	movs	r1, #1
 80064ae:	2002      	movs	r0, #2
 80064b0:	f7ff fee8 	bl	8006284 <readADC>
 80064b4:	4603      	mov	r3, r0
 80064b6:	461a      	mov	r2, r3
 80064b8:	4b66      	ldr	r3, [pc, #408]	; (8006654 <readSensor+0x1e4>)
 80064ba:	601a      	str	r2, [r3, #0]
	
	
    //left front sensor
	LF_EM_ON;
 80064bc:	2201      	movs	r2, #1
 80064be:	2180      	movs	r1, #128	; 0x80
 80064c0:	4865      	ldr	r0, [pc, #404]	; (8006658 <readSensor+0x1e8>)
 80064c2:	f7fd f841 	bl	8003548 <HAL_GPIO_WritePin>
	LFSensor = read_LF_Sensor - LFSensor;
 80064c6:	2101      	movs	r1, #1
 80064c8:	2000      	movs	r0, #0
 80064ca:	f7ff fedb 	bl	8006284 <readADC>
 80064ce:	4603      	mov	r3, r0
 80064d0:	461a      	mov	r2, r3
 80064d2:	4b5d      	ldr	r3, [pc, #372]	; (8006648 <readSensor+0x1d8>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	4a5b      	ldr	r2, [pc, #364]	; (8006648 <readSensor+0x1d8>)
 80064da:	6013      	str	r3, [r2, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<120);
 80064dc:	bf00      	nop
 80064de:	4b59      	ldr	r3, [pc, #356]	; (8006644 <readSensor+0x1d4>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	2b77      	cmp	r3, #119	; 0x77
 80064e6:	d9fa      	bls.n	80064de <readSensor+0x6e>
	LF_EM_OFF;
 80064e8:	2200      	movs	r2, #0
 80064ea:	2180      	movs	r1, #128	; 0x80
 80064ec:	485a      	ldr	r0, [pc, #360]	; (8006658 <readSensor+0x1e8>)
 80064ee:	f7fd f82b 	bl	8003548 <HAL_GPIO_WritePin>
	if(LFSensor < 0)//error check
 80064f2:	4b55      	ldr	r3, [pc, #340]	; (8006648 <readSensor+0x1d8>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	da02      	bge.n	8006500 <readSensor+0x90>
		LFSensor = 0;
 80064fa:	4b53      	ldr	r3, [pc, #332]	; (8006648 <readSensor+0x1d8>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<280);
 8006500:	bf00      	nop
 8006502:	4b50      	ldr	r3, [pc, #320]	; (8006644 <readSensor+0x1d4>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800650c:	d3f9      	bcc.n	8006502 <readSensor+0x92>

	//right front sensor
	RF_EM_ON;
 800650e:	2201      	movs	r2, #1
 8006510:	2102      	movs	r1, #2
 8006512:	4851      	ldr	r0, [pc, #324]	; (8006658 <readSensor+0x1e8>)
 8006514:	f7fd f818 	bl	8003548 <HAL_GPIO_WritePin>
	RFSensor = read_RF_Sensor - RFSensor;
 8006518:	2101      	movs	r1, #1
 800651a:	2001      	movs	r0, #1
 800651c:	f7ff feb2 	bl	8006284 <readADC>
 8006520:	4603      	mov	r3, r0
 8006522:	461a      	mov	r2, r3
 8006524:	4b49      	ldr	r3, [pc, #292]	; (800664c <readSensor+0x1dc>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	4a48      	ldr	r2, [pc, #288]	; (800664c <readSensor+0x1dc>)
 800652c:	6013      	str	r3, [r2, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<400);
 800652e:	bf00      	nop
 8006530:	4b44      	ldr	r3, [pc, #272]	; (8006644 <readSensor+0x1d4>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800653a:	d3f9      	bcc.n	8006530 <readSensor+0xc0>
	RF_EM_OFF;
 800653c:	2200      	movs	r2, #0
 800653e:	2102      	movs	r1, #2
 8006540:	4845      	ldr	r0, [pc, #276]	; (8006658 <readSensor+0x1e8>)
 8006542:	f7fd f801 	bl	8003548 <HAL_GPIO_WritePin>
	if(RFSensor < 0)
 8006546:	4b41      	ldr	r3, [pc, #260]	; (800664c <readSensor+0x1dc>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	da02      	bge.n	8006554 <readSensor+0xe4>
		RFSensor = 0;
 800654e:	4b3f      	ldr	r3, [pc, #252]	; (800664c <readSensor+0x1dc>)
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<560);
 8006554:	bf00      	nop
 8006556:	4b3b      	ldr	r3, [pc, #236]	; (8006644 <readSensor+0x1d4>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
 8006560:	d3f9      	bcc.n	8006556 <readSensor+0xe6>

    //diagonal sensors
	SIDE_EM_ON;
 8006562:	2201      	movs	r2, #1
 8006564:	2120      	movs	r1, #32
 8006566:	483c      	ldr	r0, [pc, #240]	; (8006658 <readSensor+0x1e8>)
 8006568:	f7fc ffee 	bl	8003548 <HAL_GPIO_WritePin>
	while(__HAL_TIM_GET_COUNTER(&htim1)<680);
 800656c:	bf00      	nop
 800656e:	4b35      	ldr	r3, [pc, #212]	; (8006644 <readSensor+0x1d4>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8006578:	d3f9      	bcc.n	800656e <readSensor+0xfe>
	DLSensor = read_DL_Sensor - DLSensor;
 800657a:	2101      	movs	r1, #1
 800657c:	2003      	movs	r0, #3
 800657e:	f7ff fe81 	bl	8006284 <readADC>
 8006582:	4603      	mov	r3, r0
 8006584:	461a      	mov	r2, r3
 8006586:	4b32      	ldr	r3, [pc, #200]	; (8006650 <readSensor+0x1e0>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	4a30      	ldr	r2, [pc, #192]	; (8006650 <readSensor+0x1e0>)
 800658e:	6013      	str	r3, [r2, #0]
	DRSensor = read_DR_Sensor - DRSensor;
 8006590:	2101      	movs	r1, #1
 8006592:	2002      	movs	r0, #2
 8006594:	f7ff fe76 	bl	8006284 <readADC>
 8006598:	4603      	mov	r3, r0
 800659a:	461a      	mov	r2, r3
 800659c:	4b2d      	ldr	r3, [pc, #180]	; (8006654 <readSensor+0x1e4>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	4a2c      	ldr	r2, [pc, #176]	; (8006654 <readSensor+0x1e4>)
 80065a4:	6013      	str	r3, [r2, #0]
    SIDE_EM_OFF;
 80065a6:	2200      	movs	r2, #0
 80065a8:	2120      	movs	r1, #32
 80065aa:	482b      	ldr	r0, [pc, #172]	; (8006658 <readSensor+0x1e8>)
 80065ac:	f7fc ffcc 	bl	8003548 <HAL_GPIO_WritePin>
	if(DLSensor < 0)
 80065b0:	4b27      	ldr	r3, [pc, #156]	; (8006650 <readSensor+0x1e0>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	da02      	bge.n	80065be <readSensor+0x14e>
		DLSensor = 0;
 80065b8:	4b25      	ldr	r3, [pc, #148]	; (8006650 <readSensor+0x1e0>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
	if(DRSensor < 0)
 80065be:	4b25      	ldr	r3, [pc, #148]	; (8006654 <readSensor+0x1e4>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	da02      	bge.n	80065cc <readSensor+0x15c>
		DRSensor = 0;
 80065c6:	4b23      	ldr	r3, [pc, #140]	; (8006654 <readSensor+0x1e4>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]
	// while(__HAL_TIM_GET_COUNTER(&htim1)<500);
	
	readVolMeter();
 80065cc:	f000 f86e 	bl	80066ac <readVolMeter>
	
	LFSensor = LFSensor*reflectionRate/1000;
 80065d0:	4b1d      	ldr	r3, [pc, #116]	; (8006648 <readSensor+0x1d8>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a21      	ldr	r2, [pc, #132]	; (800665c <readSensor+0x1ec>)
 80065d6:	6812      	ldr	r2, [r2, #0]
 80065d8:	fb02 f303 	mul.w	r3, r2, r3
 80065dc:	4a20      	ldr	r2, [pc, #128]	; (8006660 <readSensor+0x1f0>)
 80065de:	fb82 1203 	smull	r1, r2, r2, r3
 80065e2:	1192      	asrs	r2, r2, #6
 80065e4:	17db      	asrs	r3, r3, #31
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	4a17      	ldr	r2, [pc, #92]	; (8006648 <readSensor+0x1d8>)
 80065ea:	6013      	str	r3, [r2, #0]
	RFSensor = RFSensor*reflectionRate/1000;
 80065ec:	4b17      	ldr	r3, [pc, #92]	; (800664c <readSensor+0x1dc>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a1a      	ldr	r2, [pc, #104]	; (800665c <readSensor+0x1ec>)
 80065f2:	6812      	ldr	r2, [r2, #0]
 80065f4:	fb02 f303 	mul.w	r3, r2, r3
 80065f8:	4a19      	ldr	r2, [pc, #100]	; (8006660 <readSensor+0x1f0>)
 80065fa:	fb82 1203 	smull	r1, r2, r2, r3
 80065fe:	1192      	asrs	r2, r2, #6
 8006600:	17db      	asrs	r3, r3, #31
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	4a11      	ldr	r2, [pc, #68]	; (800664c <readSensor+0x1dc>)
 8006606:	6013      	str	r3, [r2, #0]
	DLSensor = DLSensor*reflectionRate/1000;
 8006608:	4b11      	ldr	r3, [pc, #68]	; (8006650 <readSensor+0x1e0>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a13      	ldr	r2, [pc, #76]	; (800665c <readSensor+0x1ec>)
 800660e:	6812      	ldr	r2, [r2, #0]
 8006610:	fb02 f303 	mul.w	r3, r2, r3
 8006614:	4a12      	ldr	r2, [pc, #72]	; (8006660 <readSensor+0x1f0>)
 8006616:	fb82 1203 	smull	r1, r2, r2, r3
 800661a:	1192      	asrs	r2, r2, #6
 800661c:	17db      	asrs	r3, r3, #31
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	4a0b      	ldr	r2, [pc, #44]	; (8006650 <readSensor+0x1e0>)
 8006622:	6013      	str	r3, [r2, #0]
	DRSensor = DRSensor*reflectionRate/1000;
 8006624:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <readSensor+0x1e4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a0c      	ldr	r2, [pc, #48]	; (800665c <readSensor+0x1ec>)
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	fb02 f303 	mul.w	r3, r2, r3
 8006630:	4a0b      	ldr	r2, [pc, #44]	; (8006660 <readSensor+0x1f0>)
 8006632:	fb82 1203 	smull	r1, r2, r2, r3
 8006636:	1192      	asrs	r2, r2, #6
 8006638:	17db      	asrs	r3, r3, #31
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	4a05      	ldr	r2, [pc, #20]	; (8006654 <readSensor+0x1e4>)
 800663e:	6013      	str	r3, [r2, #0]
	
}
 8006640:	bf00      	nop
 8006642:	bd80      	pop	{r7, pc}
 8006644:	20000374 	.word	0x20000374
 8006648:	200005e8 	.word	0x200005e8
 800664c:	200005ec 	.word	0x200005ec
 8006650:	200005f0 	.word	0x200005f0
 8006654:	200005f4 	.word	0x200005f4
 8006658:	40020800 	.word	0x40020800
 800665c:	20000034 	.word	0x20000034
 8006660:	10624dd3 	.word	0x10624dd3

08006664 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  if (htim == &htim14 )
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a0c      	ldr	r2, [pc, #48]	; (80066a0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d106      	bne.n	8006682 <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
    readSensor();
 8006674:	f7ff fefc 	bl	8006470 <readSensor>
	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8006678:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800667c:	4809      	ldr	r0, [pc, #36]	; (80066a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800667e:	f7fc ff7c 	bl	800357a <HAL_GPIO_TogglePin>
  }
  if (htim == &htim13)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a08      	ldr	r2, [pc, #32]	; (80066a8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d106      	bne.n	8006698 <HAL_TIM_PeriodElapsedCallback+0x34>
  {
	HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 800668a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800668e:	4805      	ldr	r0, [pc, #20]	; (80066a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8006690:	f7fc ff73 	bl	800357a <HAL_GPIO_TogglePin>
	L3GD20_loop();
 8006694:	f7ff fd24 	bl	80060e0 <L3GD20_loop>
  }
}
 8006698:	bf00      	nop
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	20000524 	.word	0x20000524
 80066a4:	40020000 	.word	0x40020000
 80066a8:	200004dc 	.word	0x200004dc

080066ac <readVolMeter>:



/*read voltage meter*/
void readVolMeter(void)
{          //3240 = 7.85V
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
	volMeter = read_Vol_Meter;//raw value
 80066b0:	2101      	movs	r1, #1
 80066b2:	2004      	movs	r0, #4
 80066b4:	f7ff fde6 	bl	8006284 <readADC>
 80066b8:	4603      	mov	r3, r0
 80066ba:	461a      	mov	r2, r3
 80066bc:	4b09      	ldr	r3, [pc, #36]	; (80066e4 <readVolMeter+0x38>)
 80066be:	601a      	str	r2, [r3, #0]
	voltage = volMeter*809/3248;//actual voltage value  ex) 8.2V = 8200
 80066c0:	4b08      	ldr	r3, [pc, #32]	; (80066e4 <readVolMeter+0x38>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f240 3229 	movw	r2, #809	; 0x329
 80066c8:	fb02 f303 	mul.w	r3, r2, r3
 80066cc:	4a06      	ldr	r2, [pc, #24]	; (80066e8 <readVolMeter+0x3c>)
 80066ce:	fb82 1203 	smull	r1, r2, r2, r3
 80066d2:	441a      	add	r2, r3
 80066d4:	12d2      	asrs	r2, r2, #11
 80066d6:	17db      	asrs	r3, r3, #31
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	4a04      	ldr	r2, [pc, #16]	; (80066ec <readVolMeter+0x40>)
 80066dc:	6013      	str	r3, [r2, #0]
}
 80066de:	bf00      	nop
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	200005e0 	.word	0x200005e0
 80066e8:	a16b312f 	.word	0xa16b312f
 80066ec:	200005e4 	.word	0x200005e4

080066f0 <cppmain>:
bool buttonPress = false;

int mouseState = 0;

void cppmain(void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
	LED1_ON;
 80066f4:	2201      	movs	r2, #1
 80066f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066fa:	4847      	ldr	r0, [pc, #284]	; (8006818 <cppmain+0x128>)
 80066fc:	f7fc ff24 	bl	8003548 <HAL_GPIO_WritePin>
	// INITIALIZATION OF HARDWARES
	// motorInit();
	// encoderInit();
	// resetEncoder();
	// ssd1306_Init();
	buzzerInit();
 8006700:	f7ff fe18 	bl	8006334 <buzzerInit>

	ALL_LED_ON;
 8006704:	2201      	movs	r2, #1
 8006706:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800670a:	4843      	ldr	r0, [pc, #268]	; (8006818 <cppmain+0x128>)
 800670c:	f7fc ff1c 	bl	8003548 <HAL_GPIO_WritePin>
 8006710:	2201      	movs	r2, #1
 8006712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006716:	4840      	ldr	r0, [pc, #256]	; (8006818 <cppmain+0x128>)
 8006718:	f7fc ff16 	bl	8003548 <HAL_GPIO_WritePin>
 800671c:	2201      	movs	r2, #1
 800671e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006722:	483e      	ldr	r0, [pc, #248]	; (800681c <cppmain+0x12c>)
 8006724:	f7fc ff10 	bl	8003548 <HAL_GPIO_WritePin>
 8006728:	2201      	movs	r2, #1
 800672a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800672e:	483b      	ldr	r0, [pc, #236]	; (800681c <cppmain+0x12c>)
 8006730:	f7fc ff0a 	bl	8003548 <HAL_GPIO_WritePin>
 8006734:	2201      	movs	r2, #1
 8006736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800673a:	4838      	ldr	r0, [pc, #224]	; (800681c <cppmain+0x12c>)
 800673c:	f7fc ff04 	bl	8003548 <HAL_GPIO_WritePin>
 8006740:	2201      	movs	r2, #1
 8006742:	2104      	movs	r1, #4
 8006744:	4836      	ldr	r0, [pc, #216]	; (8006820 <cppmain+0x130>)
 8006746:	f7fc feff 	bl	8003548 <HAL_GPIO_WritePin>
 800674a:	2201      	movs	r2, #1
 800674c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006750:	4831      	ldr	r0, [pc, #196]	; (8006818 <cppmain+0x128>)
 8006752:	f7fc fef9 	bl	8003548 <HAL_GPIO_WritePin>
 8006756:	2201      	movs	r2, #1
 8006758:	2110      	movs	r1, #16
 800675a:	4832      	ldr	r0, [pc, #200]	; (8006824 <cppmain+0x134>)
 800675c:	f7fc fef4 	bl	8003548 <HAL_GPIO_WritePin>
 8006760:	2201      	movs	r2, #1
 8006762:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006766:	482f      	ldr	r0, [pc, #188]	; (8006824 <cppmain+0x134>)
 8006768:	f7fc feee 	bl	8003548 <HAL_GPIO_WritePin>
 800676c:	2201      	movs	r2, #1
 800676e:	2101      	movs	r1, #1
 8006770:	482a      	ldr	r0, [pc, #168]	; (800681c <cppmain+0x12c>)
 8006772:	f7fc fee9 	bl	8003548 <HAL_GPIO_WritePin>
 8006776:	2201      	movs	r2, #1
 8006778:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800677c:	4829      	ldr	r0, [pc, #164]	; (8006824 <cppmain+0x134>)
 800677e:	f7fc fee3 	bl	8003548 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8006782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006786:	f7fb fd23 	bl	80021d0 <HAL_Delay>
	ALL_LED_OFF;
 800678a:	2200      	movs	r2, #0
 800678c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006790:	4821      	ldr	r0, [pc, #132]	; (8006818 <cppmain+0x128>)
 8006792:	f7fc fed9 	bl	8003548 <HAL_GPIO_WritePin>
 8006796:	2200      	movs	r2, #0
 8006798:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800679c:	481e      	ldr	r0, [pc, #120]	; (8006818 <cppmain+0x128>)
 800679e:	f7fc fed3 	bl	8003548 <HAL_GPIO_WritePin>
 80067a2:	2200      	movs	r2, #0
 80067a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80067a8:	481c      	ldr	r0, [pc, #112]	; (800681c <cppmain+0x12c>)
 80067aa:	f7fc fecd 	bl	8003548 <HAL_GPIO_WritePin>
 80067ae:	2200      	movs	r2, #0
 80067b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067b4:	4819      	ldr	r0, [pc, #100]	; (800681c <cppmain+0x12c>)
 80067b6:	f7fc fec7 	bl	8003548 <HAL_GPIO_WritePin>
 80067ba:	2200      	movs	r2, #0
 80067bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067c0:	4816      	ldr	r0, [pc, #88]	; (800681c <cppmain+0x12c>)
 80067c2:	f7fc fec1 	bl	8003548 <HAL_GPIO_WritePin>
 80067c6:	2200      	movs	r2, #0
 80067c8:	2104      	movs	r1, #4
 80067ca:	4815      	ldr	r0, [pc, #84]	; (8006820 <cppmain+0x130>)
 80067cc:	f7fc febc 	bl	8003548 <HAL_GPIO_WritePin>
 80067d0:	2200      	movs	r2, #0
 80067d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067d6:	4810      	ldr	r0, [pc, #64]	; (8006818 <cppmain+0x128>)
 80067d8:	f7fc feb6 	bl	8003548 <HAL_GPIO_WritePin>
 80067dc:	2200      	movs	r2, #0
 80067de:	2110      	movs	r1, #16
 80067e0:	4810      	ldr	r0, [pc, #64]	; (8006824 <cppmain+0x134>)
 80067e2:	f7fc feb1 	bl	8003548 <HAL_GPIO_WritePin>
 80067e6:	2200      	movs	r2, #0
 80067e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067ec:	480d      	ldr	r0, [pc, #52]	; (8006824 <cppmain+0x134>)
 80067ee:	f7fc feab 	bl	8003548 <HAL_GPIO_WritePin>
 80067f2:	2200      	movs	r2, #0
 80067f4:	2101      	movs	r1, #1
 80067f6:	4809      	ldr	r0, [pc, #36]	; (800681c <cppmain+0x12c>)
 80067f8:	f7fc fea6 	bl	8003548 <HAL_GPIO_WritePin>
 80067fc:	2200      	movs	r2, #0
 80067fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006802:	4808      	ldr	r0, [pc, #32]	; (8006824 <cppmain+0x134>)
 8006804:	f7fc fea0 	bl	8003548 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8006808:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800680c:	f7fb fce0 	bl	80021d0 <HAL_Delay>

	playSound(WIN_TONE);
 8006810:	2000      	movs	r0, #0
 8006812:	f7ff fdc9 	bl	80063a8 <playSound>

	while (1)
 8006816:	e7fe      	b.n	8006816 <cppmain+0x126>
 8006818:	40020000 	.word	0x40020000
 800681c:	40020800 	.word	0x40020800
 8006820:	40020c00 	.word	0x40020c00
 8006824:	40020400 	.word	0x40020400

08006828 <abort>:
 8006828:	b508      	push	{r3, lr}
 800682a:	2006      	movs	r0, #6
 800682c:	f000 fe42 	bl	80074b4 <raise>
 8006830:	2001      	movs	r0, #1
 8006832:	f7fb fb71 	bl	8001f18 <_exit>
	...

08006838 <malloc>:
 8006838:	4b02      	ldr	r3, [pc, #8]	; (8006844 <malloc+0xc>)
 800683a:	4601      	mov	r1, r0
 800683c:	6818      	ldr	r0, [r3, #0]
 800683e:	f000 b823 	b.w	8006888 <_malloc_r>
 8006842:	bf00      	nop
 8006844:	20000090 	.word	0x20000090

08006848 <sbrk_aligned>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	4e0e      	ldr	r6, [pc, #56]	; (8006884 <sbrk_aligned+0x3c>)
 800684c:	460c      	mov	r4, r1
 800684e:	6831      	ldr	r1, [r6, #0]
 8006850:	4605      	mov	r5, r0
 8006852:	b911      	cbnz	r1, 800685a <sbrk_aligned+0x12>
 8006854:	f000 fe82 	bl	800755c <_sbrk_r>
 8006858:	6030      	str	r0, [r6, #0]
 800685a:	4621      	mov	r1, r4
 800685c:	4628      	mov	r0, r5
 800685e:	f000 fe7d 	bl	800755c <_sbrk_r>
 8006862:	1c43      	adds	r3, r0, #1
 8006864:	d00a      	beq.n	800687c <sbrk_aligned+0x34>
 8006866:	1cc4      	adds	r4, r0, #3
 8006868:	f024 0403 	bic.w	r4, r4, #3
 800686c:	42a0      	cmp	r0, r4
 800686e:	d007      	beq.n	8006880 <sbrk_aligned+0x38>
 8006870:	1a21      	subs	r1, r4, r0
 8006872:	4628      	mov	r0, r5
 8006874:	f000 fe72 	bl	800755c <_sbrk_r>
 8006878:	3001      	adds	r0, #1
 800687a:	d101      	bne.n	8006880 <sbrk_aligned+0x38>
 800687c:	f04f 34ff 	mov.w	r4, #4294967295
 8006880:	4620      	mov	r0, r4
 8006882:	bd70      	pop	{r4, r5, r6, pc}
 8006884:	200005fc 	.word	0x200005fc

08006888 <_malloc_r>:
 8006888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800688c:	1ccd      	adds	r5, r1, #3
 800688e:	f025 0503 	bic.w	r5, r5, #3
 8006892:	3508      	adds	r5, #8
 8006894:	2d0c      	cmp	r5, #12
 8006896:	bf38      	it	cc
 8006898:	250c      	movcc	r5, #12
 800689a:	2d00      	cmp	r5, #0
 800689c:	4607      	mov	r7, r0
 800689e:	db01      	blt.n	80068a4 <_malloc_r+0x1c>
 80068a0:	42a9      	cmp	r1, r5
 80068a2:	d905      	bls.n	80068b0 <_malloc_r+0x28>
 80068a4:	230c      	movs	r3, #12
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	2600      	movs	r6, #0
 80068aa:	4630      	mov	r0, r6
 80068ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006984 <_malloc_r+0xfc>
 80068b4:	f000 f868 	bl	8006988 <__malloc_lock>
 80068b8:	f8d8 3000 	ldr.w	r3, [r8]
 80068bc:	461c      	mov	r4, r3
 80068be:	bb5c      	cbnz	r4, 8006918 <_malloc_r+0x90>
 80068c0:	4629      	mov	r1, r5
 80068c2:	4638      	mov	r0, r7
 80068c4:	f7ff ffc0 	bl	8006848 <sbrk_aligned>
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	4604      	mov	r4, r0
 80068cc:	d155      	bne.n	800697a <_malloc_r+0xf2>
 80068ce:	f8d8 4000 	ldr.w	r4, [r8]
 80068d2:	4626      	mov	r6, r4
 80068d4:	2e00      	cmp	r6, #0
 80068d6:	d145      	bne.n	8006964 <_malloc_r+0xdc>
 80068d8:	2c00      	cmp	r4, #0
 80068da:	d048      	beq.n	800696e <_malloc_r+0xe6>
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	4631      	mov	r1, r6
 80068e0:	4638      	mov	r0, r7
 80068e2:	eb04 0903 	add.w	r9, r4, r3
 80068e6:	f000 fe39 	bl	800755c <_sbrk_r>
 80068ea:	4581      	cmp	r9, r0
 80068ec:	d13f      	bne.n	800696e <_malloc_r+0xe6>
 80068ee:	6821      	ldr	r1, [r4, #0]
 80068f0:	1a6d      	subs	r5, r5, r1
 80068f2:	4629      	mov	r1, r5
 80068f4:	4638      	mov	r0, r7
 80068f6:	f7ff ffa7 	bl	8006848 <sbrk_aligned>
 80068fa:	3001      	adds	r0, #1
 80068fc:	d037      	beq.n	800696e <_malloc_r+0xe6>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	442b      	add	r3, r5
 8006902:	6023      	str	r3, [r4, #0]
 8006904:	f8d8 3000 	ldr.w	r3, [r8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d038      	beq.n	800697e <_malloc_r+0xf6>
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	42a2      	cmp	r2, r4
 8006910:	d12b      	bne.n	800696a <_malloc_r+0xe2>
 8006912:	2200      	movs	r2, #0
 8006914:	605a      	str	r2, [r3, #4]
 8006916:	e00f      	b.n	8006938 <_malloc_r+0xb0>
 8006918:	6822      	ldr	r2, [r4, #0]
 800691a:	1b52      	subs	r2, r2, r5
 800691c:	d41f      	bmi.n	800695e <_malloc_r+0xd6>
 800691e:	2a0b      	cmp	r2, #11
 8006920:	d917      	bls.n	8006952 <_malloc_r+0xca>
 8006922:	1961      	adds	r1, r4, r5
 8006924:	42a3      	cmp	r3, r4
 8006926:	6025      	str	r5, [r4, #0]
 8006928:	bf18      	it	ne
 800692a:	6059      	strne	r1, [r3, #4]
 800692c:	6863      	ldr	r3, [r4, #4]
 800692e:	bf08      	it	eq
 8006930:	f8c8 1000 	streq.w	r1, [r8]
 8006934:	5162      	str	r2, [r4, r5]
 8006936:	604b      	str	r3, [r1, #4]
 8006938:	4638      	mov	r0, r7
 800693a:	f104 060b 	add.w	r6, r4, #11
 800693e:	f000 f829 	bl	8006994 <__malloc_unlock>
 8006942:	f026 0607 	bic.w	r6, r6, #7
 8006946:	1d23      	adds	r3, r4, #4
 8006948:	1af2      	subs	r2, r6, r3
 800694a:	d0ae      	beq.n	80068aa <_malloc_r+0x22>
 800694c:	1b9b      	subs	r3, r3, r6
 800694e:	50a3      	str	r3, [r4, r2]
 8006950:	e7ab      	b.n	80068aa <_malloc_r+0x22>
 8006952:	42a3      	cmp	r3, r4
 8006954:	6862      	ldr	r2, [r4, #4]
 8006956:	d1dd      	bne.n	8006914 <_malloc_r+0x8c>
 8006958:	f8c8 2000 	str.w	r2, [r8]
 800695c:	e7ec      	b.n	8006938 <_malloc_r+0xb0>
 800695e:	4623      	mov	r3, r4
 8006960:	6864      	ldr	r4, [r4, #4]
 8006962:	e7ac      	b.n	80068be <_malloc_r+0x36>
 8006964:	4634      	mov	r4, r6
 8006966:	6876      	ldr	r6, [r6, #4]
 8006968:	e7b4      	b.n	80068d4 <_malloc_r+0x4c>
 800696a:	4613      	mov	r3, r2
 800696c:	e7cc      	b.n	8006908 <_malloc_r+0x80>
 800696e:	230c      	movs	r3, #12
 8006970:	603b      	str	r3, [r7, #0]
 8006972:	4638      	mov	r0, r7
 8006974:	f000 f80e 	bl	8006994 <__malloc_unlock>
 8006978:	e797      	b.n	80068aa <_malloc_r+0x22>
 800697a:	6025      	str	r5, [r4, #0]
 800697c:	e7dc      	b.n	8006938 <_malloc_r+0xb0>
 800697e:	605b      	str	r3, [r3, #4]
 8006980:	deff      	udf	#255	; 0xff
 8006982:	bf00      	nop
 8006984:	200005f8 	.word	0x200005f8

08006988 <__malloc_lock>:
 8006988:	4801      	ldr	r0, [pc, #4]	; (8006990 <__malloc_lock+0x8>)
 800698a:	f000 be33 	b.w	80075f4 <__retarget_lock_acquire_recursive>
 800698e:	bf00      	nop
 8006990:	20000740 	.word	0x20000740

08006994 <__malloc_unlock>:
 8006994:	4801      	ldr	r0, [pc, #4]	; (800699c <__malloc_unlock+0x8>)
 8006996:	f000 be2e 	b.w	80075f6 <__retarget_lock_release_recursive>
 800699a:	bf00      	nop
 800699c:	20000740 	.word	0x20000740

080069a0 <__cvt>:
 80069a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069a4:	ec55 4b10 	vmov	r4, r5, d0
 80069a8:	2d00      	cmp	r5, #0
 80069aa:	460e      	mov	r6, r1
 80069ac:	4619      	mov	r1, r3
 80069ae:	462b      	mov	r3, r5
 80069b0:	bfbb      	ittet	lt
 80069b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80069b6:	461d      	movlt	r5, r3
 80069b8:	2300      	movge	r3, #0
 80069ba:	232d      	movlt	r3, #45	; 0x2d
 80069bc:	700b      	strb	r3, [r1, #0]
 80069be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80069c4:	4691      	mov	r9, r2
 80069c6:	f023 0820 	bic.w	r8, r3, #32
 80069ca:	bfbc      	itt	lt
 80069cc:	4622      	movlt	r2, r4
 80069ce:	4614      	movlt	r4, r2
 80069d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069d4:	d005      	beq.n	80069e2 <__cvt+0x42>
 80069d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80069da:	d100      	bne.n	80069de <__cvt+0x3e>
 80069dc:	3601      	adds	r6, #1
 80069de:	2102      	movs	r1, #2
 80069e0:	e000      	b.n	80069e4 <__cvt+0x44>
 80069e2:	2103      	movs	r1, #3
 80069e4:	ab03      	add	r3, sp, #12
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	ab02      	add	r3, sp, #8
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	ec45 4b10 	vmov	d0, r4, r5
 80069f0:	4653      	mov	r3, sl
 80069f2:	4632      	mov	r2, r6
 80069f4:	f000 fe98 	bl	8007728 <_dtoa_r>
 80069f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80069fc:	4607      	mov	r7, r0
 80069fe:	d102      	bne.n	8006a06 <__cvt+0x66>
 8006a00:	f019 0f01 	tst.w	r9, #1
 8006a04:	d022      	beq.n	8006a4c <__cvt+0xac>
 8006a06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a0a:	eb07 0906 	add.w	r9, r7, r6
 8006a0e:	d110      	bne.n	8006a32 <__cvt+0x92>
 8006a10:	783b      	ldrb	r3, [r7, #0]
 8006a12:	2b30      	cmp	r3, #48	; 0x30
 8006a14:	d10a      	bne.n	8006a2c <__cvt+0x8c>
 8006a16:	2200      	movs	r2, #0
 8006a18:	2300      	movs	r3, #0
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	f7fa f853 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a22:	b918      	cbnz	r0, 8006a2c <__cvt+0x8c>
 8006a24:	f1c6 0601 	rsb	r6, r6, #1
 8006a28:	f8ca 6000 	str.w	r6, [sl]
 8006a2c:	f8da 3000 	ldr.w	r3, [sl]
 8006a30:	4499      	add	r9, r3
 8006a32:	2200      	movs	r2, #0
 8006a34:	2300      	movs	r3, #0
 8006a36:	4620      	mov	r0, r4
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f7fa f845 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a3e:	b108      	cbz	r0, 8006a44 <__cvt+0xa4>
 8006a40:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a44:	2230      	movs	r2, #48	; 0x30
 8006a46:	9b03      	ldr	r3, [sp, #12]
 8006a48:	454b      	cmp	r3, r9
 8006a4a:	d307      	bcc.n	8006a5c <__cvt+0xbc>
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a50:	1bdb      	subs	r3, r3, r7
 8006a52:	4638      	mov	r0, r7
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	b004      	add	sp, #16
 8006a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a5c:	1c59      	adds	r1, r3, #1
 8006a5e:	9103      	str	r1, [sp, #12]
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	e7f0      	b.n	8006a46 <__cvt+0xa6>

08006a64 <__exponent>:
 8006a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a66:	4603      	mov	r3, r0
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	bfb8      	it	lt
 8006a6c:	4249      	neglt	r1, r1
 8006a6e:	f803 2b02 	strb.w	r2, [r3], #2
 8006a72:	bfb4      	ite	lt
 8006a74:	222d      	movlt	r2, #45	; 0x2d
 8006a76:	222b      	movge	r2, #43	; 0x2b
 8006a78:	2909      	cmp	r1, #9
 8006a7a:	7042      	strb	r2, [r0, #1]
 8006a7c:	dd2a      	ble.n	8006ad4 <__exponent+0x70>
 8006a7e:	f10d 0207 	add.w	r2, sp, #7
 8006a82:	4617      	mov	r7, r2
 8006a84:	260a      	movs	r6, #10
 8006a86:	4694      	mov	ip, r2
 8006a88:	fb91 f5f6 	sdiv	r5, r1, r6
 8006a8c:	fb06 1415 	mls	r4, r6, r5, r1
 8006a90:	3430      	adds	r4, #48	; 0x30
 8006a92:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006a96:	460c      	mov	r4, r1
 8006a98:	2c63      	cmp	r4, #99	; 0x63
 8006a9a:	f102 32ff 	add.w	r2, r2, #4294967295
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	dcf1      	bgt.n	8006a86 <__exponent+0x22>
 8006aa2:	3130      	adds	r1, #48	; 0x30
 8006aa4:	f1ac 0402 	sub.w	r4, ip, #2
 8006aa8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006aac:	1c41      	adds	r1, r0, #1
 8006aae:	4622      	mov	r2, r4
 8006ab0:	42ba      	cmp	r2, r7
 8006ab2:	d30a      	bcc.n	8006aca <__exponent+0x66>
 8006ab4:	f10d 0209 	add.w	r2, sp, #9
 8006ab8:	eba2 020c 	sub.w	r2, r2, ip
 8006abc:	42bc      	cmp	r4, r7
 8006abe:	bf88      	it	hi
 8006ac0:	2200      	movhi	r2, #0
 8006ac2:	4413      	add	r3, r2
 8006ac4:	1a18      	subs	r0, r3, r0
 8006ac6:	b003      	add	sp, #12
 8006ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aca:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006ace:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006ad2:	e7ed      	b.n	8006ab0 <__exponent+0x4c>
 8006ad4:	2330      	movs	r3, #48	; 0x30
 8006ad6:	3130      	adds	r1, #48	; 0x30
 8006ad8:	7083      	strb	r3, [r0, #2]
 8006ada:	70c1      	strb	r1, [r0, #3]
 8006adc:	1d03      	adds	r3, r0, #4
 8006ade:	e7f1      	b.n	8006ac4 <__exponent+0x60>

08006ae0 <_printf_float>:
 8006ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	ed2d 8b02 	vpush	{d8}
 8006ae8:	b08d      	sub	sp, #52	; 0x34
 8006aea:	460c      	mov	r4, r1
 8006aec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006af0:	4616      	mov	r6, r2
 8006af2:	461f      	mov	r7, r3
 8006af4:	4605      	mov	r5, r0
 8006af6:	f000 fce5 	bl	80074c4 <_localeconv_r>
 8006afa:	f8d0 a000 	ldr.w	sl, [r0]
 8006afe:	4650      	mov	r0, sl
 8006b00:	f7f9 fbb6 	bl	8000270 <strlen>
 8006b04:	2300      	movs	r3, #0
 8006b06:	930a      	str	r3, [sp, #40]	; 0x28
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	9305      	str	r3, [sp, #20]
 8006b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b14:	3307      	adds	r3, #7
 8006b16:	f023 0307 	bic.w	r3, r3, #7
 8006b1a:	f103 0208 	add.w	r2, r3, #8
 8006b1e:	f8c8 2000 	str.w	r2, [r8]
 8006b22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b2a:	9307      	str	r3, [sp, #28]
 8006b2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b30:	ee08 0a10 	vmov	s16, r0
 8006b34:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006b38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b3c:	4b9e      	ldr	r3, [pc, #632]	; (8006db8 <_printf_float+0x2d8>)
 8006b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b42:	f7f9 fff3 	bl	8000b2c <__aeabi_dcmpun>
 8006b46:	bb88      	cbnz	r0, 8006bac <_printf_float+0xcc>
 8006b48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b4c:	4b9a      	ldr	r3, [pc, #616]	; (8006db8 <_printf_float+0x2d8>)
 8006b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b52:	f7f9 ffcd 	bl	8000af0 <__aeabi_dcmple>
 8006b56:	bb48      	cbnz	r0, 8006bac <_printf_float+0xcc>
 8006b58:	2200      	movs	r2, #0
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	4640      	mov	r0, r8
 8006b5e:	4649      	mov	r1, r9
 8006b60:	f7f9 ffbc 	bl	8000adc <__aeabi_dcmplt>
 8006b64:	b110      	cbz	r0, 8006b6c <_printf_float+0x8c>
 8006b66:	232d      	movs	r3, #45	; 0x2d
 8006b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b6c:	4a93      	ldr	r2, [pc, #588]	; (8006dbc <_printf_float+0x2dc>)
 8006b6e:	4b94      	ldr	r3, [pc, #592]	; (8006dc0 <_printf_float+0x2e0>)
 8006b70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006b74:	bf94      	ite	ls
 8006b76:	4690      	movls	r8, r2
 8006b78:	4698      	movhi	r8, r3
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	6123      	str	r3, [r4, #16]
 8006b7e:	9b05      	ldr	r3, [sp, #20]
 8006b80:	f023 0304 	bic.w	r3, r3, #4
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	f04f 0900 	mov.w	r9, #0
 8006b8a:	9700      	str	r7, [sp, #0]
 8006b8c:	4633      	mov	r3, r6
 8006b8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b90:	4621      	mov	r1, r4
 8006b92:	4628      	mov	r0, r5
 8006b94:	f000 f9da 	bl	8006f4c <_printf_common>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	f040 8090 	bne.w	8006cbe <_printf_float+0x1de>
 8006b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba2:	b00d      	add	sp, #52	; 0x34
 8006ba4:	ecbd 8b02 	vpop	{d8}
 8006ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bac:	4642      	mov	r2, r8
 8006bae:	464b      	mov	r3, r9
 8006bb0:	4640      	mov	r0, r8
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	f7f9 ffba 	bl	8000b2c <__aeabi_dcmpun>
 8006bb8:	b140      	cbz	r0, 8006bcc <_printf_float+0xec>
 8006bba:	464b      	mov	r3, r9
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	bfbc      	itt	lt
 8006bc0:	232d      	movlt	r3, #45	; 0x2d
 8006bc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006bc6:	4a7f      	ldr	r2, [pc, #508]	; (8006dc4 <_printf_float+0x2e4>)
 8006bc8:	4b7f      	ldr	r3, [pc, #508]	; (8006dc8 <_printf_float+0x2e8>)
 8006bca:	e7d1      	b.n	8006b70 <_printf_float+0x90>
 8006bcc:	6863      	ldr	r3, [r4, #4]
 8006bce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006bd2:	9206      	str	r2, [sp, #24]
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	d13f      	bne.n	8006c58 <_printf_float+0x178>
 8006bd8:	2306      	movs	r3, #6
 8006bda:	6063      	str	r3, [r4, #4]
 8006bdc:	9b05      	ldr	r3, [sp, #20]
 8006bde:	6861      	ldr	r1, [r4, #4]
 8006be0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006be4:	2300      	movs	r3, #0
 8006be6:	9303      	str	r3, [sp, #12]
 8006be8:	ab0a      	add	r3, sp, #40	; 0x28
 8006bea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006bee:	ab09      	add	r3, sp, #36	; 0x24
 8006bf0:	ec49 8b10 	vmov	d0, r8, r9
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	6022      	str	r2, [r4, #0]
 8006bf8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	f7ff fecf 	bl	80069a0 <__cvt>
 8006c02:	9b06      	ldr	r3, [sp, #24]
 8006c04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c06:	2b47      	cmp	r3, #71	; 0x47
 8006c08:	4680      	mov	r8, r0
 8006c0a:	d108      	bne.n	8006c1e <_printf_float+0x13e>
 8006c0c:	1cc8      	adds	r0, r1, #3
 8006c0e:	db02      	blt.n	8006c16 <_printf_float+0x136>
 8006c10:	6863      	ldr	r3, [r4, #4]
 8006c12:	4299      	cmp	r1, r3
 8006c14:	dd41      	ble.n	8006c9a <_printf_float+0x1ba>
 8006c16:	f1ab 0302 	sub.w	r3, fp, #2
 8006c1a:	fa5f fb83 	uxtb.w	fp, r3
 8006c1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c22:	d820      	bhi.n	8006c66 <_printf_float+0x186>
 8006c24:	3901      	subs	r1, #1
 8006c26:	465a      	mov	r2, fp
 8006c28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c2c:	9109      	str	r1, [sp, #36]	; 0x24
 8006c2e:	f7ff ff19 	bl	8006a64 <__exponent>
 8006c32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c34:	1813      	adds	r3, r2, r0
 8006c36:	2a01      	cmp	r2, #1
 8006c38:	4681      	mov	r9, r0
 8006c3a:	6123      	str	r3, [r4, #16]
 8006c3c:	dc02      	bgt.n	8006c44 <_printf_float+0x164>
 8006c3e:	6822      	ldr	r2, [r4, #0]
 8006c40:	07d2      	lsls	r2, r2, #31
 8006c42:	d501      	bpl.n	8006c48 <_printf_float+0x168>
 8006c44:	3301      	adds	r3, #1
 8006c46:	6123      	str	r3, [r4, #16]
 8006c48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d09c      	beq.n	8006b8a <_printf_float+0xaa>
 8006c50:	232d      	movs	r3, #45	; 0x2d
 8006c52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c56:	e798      	b.n	8006b8a <_printf_float+0xaa>
 8006c58:	9a06      	ldr	r2, [sp, #24]
 8006c5a:	2a47      	cmp	r2, #71	; 0x47
 8006c5c:	d1be      	bne.n	8006bdc <_printf_float+0xfc>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1bc      	bne.n	8006bdc <_printf_float+0xfc>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e7b9      	b.n	8006bda <_printf_float+0xfa>
 8006c66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006c6a:	d118      	bne.n	8006c9e <_printf_float+0x1be>
 8006c6c:	2900      	cmp	r1, #0
 8006c6e:	6863      	ldr	r3, [r4, #4]
 8006c70:	dd0b      	ble.n	8006c8a <_printf_float+0x1aa>
 8006c72:	6121      	str	r1, [r4, #16]
 8006c74:	b913      	cbnz	r3, 8006c7c <_printf_float+0x19c>
 8006c76:	6822      	ldr	r2, [r4, #0]
 8006c78:	07d0      	lsls	r0, r2, #31
 8006c7a:	d502      	bpl.n	8006c82 <_printf_float+0x1a2>
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	440b      	add	r3, r1
 8006c80:	6123      	str	r3, [r4, #16]
 8006c82:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c84:	f04f 0900 	mov.w	r9, #0
 8006c88:	e7de      	b.n	8006c48 <_printf_float+0x168>
 8006c8a:	b913      	cbnz	r3, 8006c92 <_printf_float+0x1b2>
 8006c8c:	6822      	ldr	r2, [r4, #0]
 8006c8e:	07d2      	lsls	r2, r2, #31
 8006c90:	d501      	bpl.n	8006c96 <_printf_float+0x1b6>
 8006c92:	3302      	adds	r3, #2
 8006c94:	e7f4      	b.n	8006c80 <_printf_float+0x1a0>
 8006c96:	2301      	movs	r3, #1
 8006c98:	e7f2      	b.n	8006c80 <_printf_float+0x1a0>
 8006c9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca0:	4299      	cmp	r1, r3
 8006ca2:	db05      	blt.n	8006cb0 <_printf_float+0x1d0>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	6121      	str	r1, [r4, #16]
 8006ca8:	07d8      	lsls	r0, r3, #31
 8006caa:	d5ea      	bpl.n	8006c82 <_printf_float+0x1a2>
 8006cac:	1c4b      	adds	r3, r1, #1
 8006cae:	e7e7      	b.n	8006c80 <_printf_float+0x1a0>
 8006cb0:	2900      	cmp	r1, #0
 8006cb2:	bfd4      	ite	le
 8006cb4:	f1c1 0202 	rsble	r2, r1, #2
 8006cb8:	2201      	movgt	r2, #1
 8006cba:	4413      	add	r3, r2
 8006cbc:	e7e0      	b.n	8006c80 <_printf_float+0x1a0>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	055a      	lsls	r2, r3, #21
 8006cc2:	d407      	bmi.n	8006cd4 <_printf_float+0x1f4>
 8006cc4:	6923      	ldr	r3, [r4, #16]
 8006cc6:	4642      	mov	r2, r8
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4628      	mov	r0, r5
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	d12c      	bne.n	8006d2c <_printf_float+0x24c>
 8006cd2:	e764      	b.n	8006b9e <_printf_float+0xbe>
 8006cd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cd8:	f240 80e0 	bls.w	8006e9c <_printf_float+0x3bc>
 8006cdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f7f9 fef0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d034      	beq.n	8006d56 <_printf_float+0x276>
 8006cec:	4a37      	ldr	r2, [pc, #220]	; (8006dcc <_printf_float+0x2ec>)
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4631      	mov	r1, r6
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	47b8      	blx	r7
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	f43f af51 	beq.w	8006b9e <_printf_float+0xbe>
 8006cfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d00:	429a      	cmp	r2, r3
 8006d02:	db02      	blt.n	8006d0a <_printf_float+0x22a>
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	07d8      	lsls	r0, r3, #31
 8006d08:	d510      	bpl.n	8006d2c <_printf_float+0x24c>
 8006d0a:	ee18 3a10 	vmov	r3, s16
 8006d0e:	4652      	mov	r2, sl
 8006d10:	4631      	mov	r1, r6
 8006d12:	4628      	mov	r0, r5
 8006d14:	47b8      	blx	r7
 8006d16:	3001      	adds	r0, #1
 8006d18:	f43f af41 	beq.w	8006b9e <_printf_float+0xbe>
 8006d1c:	f04f 0800 	mov.w	r8, #0
 8006d20:	f104 091a 	add.w	r9, r4, #26
 8006d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d26:	3b01      	subs	r3, #1
 8006d28:	4543      	cmp	r3, r8
 8006d2a:	dc09      	bgt.n	8006d40 <_printf_float+0x260>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	079b      	lsls	r3, r3, #30
 8006d30:	f100 8107 	bmi.w	8006f42 <_printf_float+0x462>
 8006d34:	68e0      	ldr	r0, [r4, #12]
 8006d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d38:	4298      	cmp	r0, r3
 8006d3a:	bfb8      	it	lt
 8006d3c:	4618      	movlt	r0, r3
 8006d3e:	e730      	b.n	8006ba2 <_printf_float+0xc2>
 8006d40:	2301      	movs	r3, #1
 8006d42:	464a      	mov	r2, r9
 8006d44:	4631      	mov	r1, r6
 8006d46:	4628      	mov	r0, r5
 8006d48:	47b8      	blx	r7
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	f43f af27 	beq.w	8006b9e <_printf_float+0xbe>
 8006d50:	f108 0801 	add.w	r8, r8, #1
 8006d54:	e7e6      	b.n	8006d24 <_printf_float+0x244>
 8006d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	dc39      	bgt.n	8006dd0 <_printf_float+0x2f0>
 8006d5c:	4a1b      	ldr	r2, [pc, #108]	; (8006dcc <_printf_float+0x2ec>)
 8006d5e:	2301      	movs	r3, #1
 8006d60:	4631      	mov	r1, r6
 8006d62:	4628      	mov	r0, r5
 8006d64:	47b8      	blx	r7
 8006d66:	3001      	adds	r0, #1
 8006d68:	f43f af19 	beq.w	8006b9e <_printf_float+0xbe>
 8006d6c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006d70:	4313      	orrs	r3, r2
 8006d72:	d102      	bne.n	8006d7a <_printf_float+0x29a>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	07d9      	lsls	r1, r3, #31
 8006d78:	d5d8      	bpl.n	8006d2c <_printf_float+0x24c>
 8006d7a:	ee18 3a10 	vmov	r3, s16
 8006d7e:	4652      	mov	r2, sl
 8006d80:	4631      	mov	r1, r6
 8006d82:	4628      	mov	r0, r5
 8006d84:	47b8      	blx	r7
 8006d86:	3001      	adds	r0, #1
 8006d88:	f43f af09 	beq.w	8006b9e <_printf_float+0xbe>
 8006d8c:	f04f 0900 	mov.w	r9, #0
 8006d90:	f104 0a1a 	add.w	sl, r4, #26
 8006d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d96:	425b      	negs	r3, r3
 8006d98:	454b      	cmp	r3, r9
 8006d9a:	dc01      	bgt.n	8006da0 <_printf_float+0x2c0>
 8006d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d9e:	e792      	b.n	8006cc6 <_printf_float+0x1e6>
 8006da0:	2301      	movs	r3, #1
 8006da2:	4652      	mov	r2, sl
 8006da4:	4631      	mov	r1, r6
 8006da6:	4628      	mov	r0, r5
 8006da8:	47b8      	blx	r7
 8006daa:	3001      	adds	r0, #1
 8006dac:	f43f aef7 	beq.w	8006b9e <_printf_float+0xbe>
 8006db0:	f109 0901 	add.w	r9, r9, #1
 8006db4:	e7ee      	b.n	8006d94 <_printf_float+0x2b4>
 8006db6:	bf00      	nop
 8006db8:	7fefffff 	.word	0x7fefffff
 8006dbc:	08009544 	.word	0x08009544
 8006dc0:	08009548 	.word	0x08009548
 8006dc4:	0800954c 	.word	0x0800954c
 8006dc8:	08009550 	.word	0x08009550
 8006dcc:	08009554 	.word	0x08009554
 8006dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	bfa8      	it	ge
 8006dd8:	461a      	movge	r2, r3
 8006dda:	2a00      	cmp	r2, #0
 8006ddc:	4691      	mov	r9, r2
 8006dde:	dc37      	bgt.n	8006e50 <_printf_float+0x370>
 8006de0:	f04f 0b00 	mov.w	fp, #0
 8006de4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006de8:	f104 021a 	add.w	r2, r4, #26
 8006dec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dee:	9305      	str	r3, [sp, #20]
 8006df0:	eba3 0309 	sub.w	r3, r3, r9
 8006df4:	455b      	cmp	r3, fp
 8006df6:	dc33      	bgt.n	8006e60 <_printf_float+0x380>
 8006df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	db3b      	blt.n	8006e78 <_printf_float+0x398>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	07da      	lsls	r2, r3, #31
 8006e04:	d438      	bmi.n	8006e78 <_printf_float+0x398>
 8006e06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006e0a:	eba2 0903 	sub.w	r9, r2, r3
 8006e0e:	9b05      	ldr	r3, [sp, #20]
 8006e10:	1ad2      	subs	r2, r2, r3
 8006e12:	4591      	cmp	r9, r2
 8006e14:	bfa8      	it	ge
 8006e16:	4691      	movge	r9, r2
 8006e18:	f1b9 0f00 	cmp.w	r9, #0
 8006e1c:	dc35      	bgt.n	8006e8a <_printf_float+0x3aa>
 8006e1e:	f04f 0800 	mov.w	r8, #0
 8006e22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e26:	f104 0a1a 	add.w	sl, r4, #26
 8006e2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e2e:	1a9b      	subs	r3, r3, r2
 8006e30:	eba3 0309 	sub.w	r3, r3, r9
 8006e34:	4543      	cmp	r3, r8
 8006e36:	f77f af79 	ble.w	8006d2c <_printf_float+0x24c>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	4652      	mov	r2, sl
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4628      	mov	r0, r5
 8006e42:	47b8      	blx	r7
 8006e44:	3001      	adds	r0, #1
 8006e46:	f43f aeaa 	beq.w	8006b9e <_printf_float+0xbe>
 8006e4a:	f108 0801 	add.w	r8, r8, #1
 8006e4e:	e7ec      	b.n	8006e2a <_printf_float+0x34a>
 8006e50:	4613      	mov	r3, r2
 8006e52:	4631      	mov	r1, r6
 8006e54:	4642      	mov	r2, r8
 8006e56:	4628      	mov	r0, r5
 8006e58:	47b8      	blx	r7
 8006e5a:	3001      	adds	r0, #1
 8006e5c:	d1c0      	bne.n	8006de0 <_printf_float+0x300>
 8006e5e:	e69e      	b.n	8006b9e <_printf_float+0xbe>
 8006e60:	2301      	movs	r3, #1
 8006e62:	4631      	mov	r1, r6
 8006e64:	4628      	mov	r0, r5
 8006e66:	9205      	str	r2, [sp, #20]
 8006e68:	47b8      	blx	r7
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	f43f ae97 	beq.w	8006b9e <_printf_float+0xbe>
 8006e70:	9a05      	ldr	r2, [sp, #20]
 8006e72:	f10b 0b01 	add.w	fp, fp, #1
 8006e76:	e7b9      	b.n	8006dec <_printf_float+0x30c>
 8006e78:	ee18 3a10 	vmov	r3, s16
 8006e7c:	4652      	mov	r2, sl
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4628      	mov	r0, r5
 8006e82:	47b8      	blx	r7
 8006e84:	3001      	adds	r0, #1
 8006e86:	d1be      	bne.n	8006e06 <_printf_float+0x326>
 8006e88:	e689      	b.n	8006b9e <_printf_float+0xbe>
 8006e8a:	9a05      	ldr	r2, [sp, #20]
 8006e8c:	464b      	mov	r3, r9
 8006e8e:	4442      	add	r2, r8
 8006e90:	4631      	mov	r1, r6
 8006e92:	4628      	mov	r0, r5
 8006e94:	47b8      	blx	r7
 8006e96:	3001      	adds	r0, #1
 8006e98:	d1c1      	bne.n	8006e1e <_printf_float+0x33e>
 8006e9a:	e680      	b.n	8006b9e <_printf_float+0xbe>
 8006e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e9e:	2a01      	cmp	r2, #1
 8006ea0:	dc01      	bgt.n	8006ea6 <_printf_float+0x3c6>
 8006ea2:	07db      	lsls	r3, r3, #31
 8006ea4:	d53a      	bpl.n	8006f1c <_printf_float+0x43c>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4642      	mov	r2, r8
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4628      	mov	r0, r5
 8006eae:	47b8      	blx	r7
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	f43f ae74 	beq.w	8006b9e <_printf_float+0xbe>
 8006eb6:	ee18 3a10 	vmov	r3, s16
 8006eba:	4652      	mov	r2, sl
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	47b8      	blx	r7
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	f43f ae6b 	beq.w	8006b9e <_printf_float+0xbe>
 8006ec8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2300      	movs	r3, #0
 8006ed0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006ed4:	f7f9 fdf8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ed8:	b9d8      	cbnz	r0, 8006f12 <_printf_float+0x432>
 8006eda:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006ede:	f108 0201 	add.w	r2, r8, #1
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	47b8      	blx	r7
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d10e      	bne.n	8006f0a <_printf_float+0x42a>
 8006eec:	e657      	b.n	8006b9e <_printf_float+0xbe>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4652      	mov	r2, sl
 8006ef2:	4631      	mov	r1, r6
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	47b8      	blx	r7
 8006ef8:	3001      	adds	r0, #1
 8006efa:	f43f ae50 	beq.w	8006b9e <_printf_float+0xbe>
 8006efe:	f108 0801 	add.w	r8, r8, #1
 8006f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f04:	3b01      	subs	r3, #1
 8006f06:	4543      	cmp	r3, r8
 8006f08:	dcf1      	bgt.n	8006eee <_printf_float+0x40e>
 8006f0a:	464b      	mov	r3, r9
 8006f0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f10:	e6da      	b.n	8006cc8 <_printf_float+0x1e8>
 8006f12:	f04f 0800 	mov.w	r8, #0
 8006f16:	f104 0a1a 	add.w	sl, r4, #26
 8006f1a:	e7f2      	b.n	8006f02 <_printf_float+0x422>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	4642      	mov	r2, r8
 8006f20:	e7df      	b.n	8006ee2 <_printf_float+0x402>
 8006f22:	2301      	movs	r3, #1
 8006f24:	464a      	mov	r2, r9
 8006f26:	4631      	mov	r1, r6
 8006f28:	4628      	mov	r0, r5
 8006f2a:	47b8      	blx	r7
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	f43f ae36 	beq.w	8006b9e <_printf_float+0xbe>
 8006f32:	f108 0801 	add.w	r8, r8, #1
 8006f36:	68e3      	ldr	r3, [r4, #12]
 8006f38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f3a:	1a5b      	subs	r3, r3, r1
 8006f3c:	4543      	cmp	r3, r8
 8006f3e:	dcf0      	bgt.n	8006f22 <_printf_float+0x442>
 8006f40:	e6f8      	b.n	8006d34 <_printf_float+0x254>
 8006f42:	f04f 0800 	mov.w	r8, #0
 8006f46:	f104 0919 	add.w	r9, r4, #25
 8006f4a:	e7f4      	b.n	8006f36 <_printf_float+0x456>

08006f4c <_printf_common>:
 8006f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f50:	4616      	mov	r6, r2
 8006f52:	4699      	mov	r9, r3
 8006f54:	688a      	ldr	r2, [r1, #8]
 8006f56:	690b      	ldr	r3, [r1, #16]
 8006f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	bfb8      	it	lt
 8006f60:	4613      	movlt	r3, r2
 8006f62:	6033      	str	r3, [r6, #0]
 8006f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f68:	4607      	mov	r7, r0
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	b10a      	cbz	r2, 8006f72 <_printf_common+0x26>
 8006f6e:	3301      	adds	r3, #1
 8006f70:	6033      	str	r3, [r6, #0]
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	0699      	lsls	r1, r3, #26
 8006f76:	bf42      	ittt	mi
 8006f78:	6833      	ldrmi	r3, [r6, #0]
 8006f7a:	3302      	addmi	r3, #2
 8006f7c:	6033      	strmi	r3, [r6, #0]
 8006f7e:	6825      	ldr	r5, [r4, #0]
 8006f80:	f015 0506 	ands.w	r5, r5, #6
 8006f84:	d106      	bne.n	8006f94 <_printf_common+0x48>
 8006f86:	f104 0a19 	add.w	sl, r4, #25
 8006f8a:	68e3      	ldr	r3, [r4, #12]
 8006f8c:	6832      	ldr	r2, [r6, #0]
 8006f8e:	1a9b      	subs	r3, r3, r2
 8006f90:	42ab      	cmp	r3, r5
 8006f92:	dc26      	bgt.n	8006fe2 <_printf_common+0x96>
 8006f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f98:	1e13      	subs	r3, r2, #0
 8006f9a:	6822      	ldr	r2, [r4, #0]
 8006f9c:	bf18      	it	ne
 8006f9e:	2301      	movne	r3, #1
 8006fa0:	0692      	lsls	r2, r2, #26
 8006fa2:	d42b      	bmi.n	8006ffc <_printf_common+0xb0>
 8006fa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fa8:	4649      	mov	r1, r9
 8006faa:	4638      	mov	r0, r7
 8006fac:	47c0      	blx	r8
 8006fae:	3001      	adds	r0, #1
 8006fb0:	d01e      	beq.n	8006ff0 <_printf_common+0xa4>
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	6922      	ldr	r2, [r4, #16]
 8006fb6:	f003 0306 	and.w	r3, r3, #6
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	bf02      	ittt	eq
 8006fbe:	68e5      	ldreq	r5, [r4, #12]
 8006fc0:	6833      	ldreq	r3, [r6, #0]
 8006fc2:	1aed      	subeq	r5, r5, r3
 8006fc4:	68a3      	ldr	r3, [r4, #8]
 8006fc6:	bf0c      	ite	eq
 8006fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fcc:	2500      	movne	r5, #0
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	bfc4      	itt	gt
 8006fd2:	1a9b      	subgt	r3, r3, r2
 8006fd4:	18ed      	addgt	r5, r5, r3
 8006fd6:	2600      	movs	r6, #0
 8006fd8:	341a      	adds	r4, #26
 8006fda:	42b5      	cmp	r5, r6
 8006fdc:	d11a      	bne.n	8007014 <_printf_common+0xc8>
 8006fde:	2000      	movs	r0, #0
 8006fe0:	e008      	b.n	8006ff4 <_printf_common+0xa8>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	4652      	mov	r2, sl
 8006fe6:	4649      	mov	r1, r9
 8006fe8:	4638      	mov	r0, r7
 8006fea:	47c0      	blx	r8
 8006fec:	3001      	adds	r0, #1
 8006fee:	d103      	bne.n	8006ff8 <_printf_common+0xac>
 8006ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff8:	3501      	adds	r5, #1
 8006ffa:	e7c6      	b.n	8006f8a <_printf_common+0x3e>
 8006ffc:	18e1      	adds	r1, r4, r3
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	2030      	movs	r0, #48	; 0x30
 8007002:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007006:	4422      	add	r2, r4
 8007008:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800700c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007010:	3302      	adds	r3, #2
 8007012:	e7c7      	b.n	8006fa4 <_printf_common+0x58>
 8007014:	2301      	movs	r3, #1
 8007016:	4622      	mov	r2, r4
 8007018:	4649      	mov	r1, r9
 800701a:	4638      	mov	r0, r7
 800701c:	47c0      	blx	r8
 800701e:	3001      	adds	r0, #1
 8007020:	d0e6      	beq.n	8006ff0 <_printf_common+0xa4>
 8007022:	3601      	adds	r6, #1
 8007024:	e7d9      	b.n	8006fda <_printf_common+0x8e>
	...

08007028 <_printf_i>:
 8007028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800702c:	7e0f      	ldrb	r7, [r1, #24]
 800702e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007030:	2f78      	cmp	r7, #120	; 0x78
 8007032:	4691      	mov	r9, r2
 8007034:	4680      	mov	r8, r0
 8007036:	460c      	mov	r4, r1
 8007038:	469a      	mov	sl, r3
 800703a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800703e:	d807      	bhi.n	8007050 <_printf_i+0x28>
 8007040:	2f62      	cmp	r7, #98	; 0x62
 8007042:	d80a      	bhi.n	800705a <_printf_i+0x32>
 8007044:	2f00      	cmp	r7, #0
 8007046:	f000 80d4 	beq.w	80071f2 <_printf_i+0x1ca>
 800704a:	2f58      	cmp	r7, #88	; 0x58
 800704c:	f000 80c0 	beq.w	80071d0 <_printf_i+0x1a8>
 8007050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007054:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007058:	e03a      	b.n	80070d0 <_printf_i+0xa8>
 800705a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800705e:	2b15      	cmp	r3, #21
 8007060:	d8f6      	bhi.n	8007050 <_printf_i+0x28>
 8007062:	a101      	add	r1, pc, #4	; (adr r1, 8007068 <_printf_i+0x40>)
 8007064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007068:	080070c1 	.word	0x080070c1
 800706c:	080070d5 	.word	0x080070d5
 8007070:	08007051 	.word	0x08007051
 8007074:	08007051 	.word	0x08007051
 8007078:	08007051 	.word	0x08007051
 800707c:	08007051 	.word	0x08007051
 8007080:	080070d5 	.word	0x080070d5
 8007084:	08007051 	.word	0x08007051
 8007088:	08007051 	.word	0x08007051
 800708c:	08007051 	.word	0x08007051
 8007090:	08007051 	.word	0x08007051
 8007094:	080071d9 	.word	0x080071d9
 8007098:	08007101 	.word	0x08007101
 800709c:	08007193 	.word	0x08007193
 80070a0:	08007051 	.word	0x08007051
 80070a4:	08007051 	.word	0x08007051
 80070a8:	080071fb 	.word	0x080071fb
 80070ac:	08007051 	.word	0x08007051
 80070b0:	08007101 	.word	0x08007101
 80070b4:	08007051 	.word	0x08007051
 80070b8:	08007051 	.word	0x08007051
 80070bc:	0800719b 	.word	0x0800719b
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	1d1a      	adds	r2, r3, #4
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	602a      	str	r2, [r5, #0]
 80070c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070d0:	2301      	movs	r3, #1
 80070d2:	e09f      	b.n	8007214 <_printf_i+0x1ec>
 80070d4:	6820      	ldr	r0, [r4, #0]
 80070d6:	682b      	ldr	r3, [r5, #0]
 80070d8:	0607      	lsls	r7, r0, #24
 80070da:	f103 0104 	add.w	r1, r3, #4
 80070de:	6029      	str	r1, [r5, #0]
 80070e0:	d501      	bpl.n	80070e6 <_printf_i+0xbe>
 80070e2:	681e      	ldr	r6, [r3, #0]
 80070e4:	e003      	b.n	80070ee <_printf_i+0xc6>
 80070e6:	0646      	lsls	r6, r0, #25
 80070e8:	d5fb      	bpl.n	80070e2 <_printf_i+0xba>
 80070ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80070ee:	2e00      	cmp	r6, #0
 80070f0:	da03      	bge.n	80070fa <_printf_i+0xd2>
 80070f2:	232d      	movs	r3, #45	; 0x2d
 80070f4:	4276      	negs	r6, r6
 80070f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070fa:	485a      	ldr	r0, [pc, #360]	; (8007264 <_printf_i+0x23c>)
 80070fc:	230a      	movs	r3, #10
 80070fe:	e012      	b.n	8007126 <_printf_i+0xfe>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	6820      	ldr	r0, [r4, #0]
 8007104:	1d19      	adds	r1, r3, #4
 8007106:	6029      	str	r1, [r5, #0]
 8007108:	0605      	lsls	r5, r0, #24
 800710a:	d501      	bpl.n	8007110 <_printf_i+0xe8>
 800710c:	681e      	ldr	r6, [r3, #0]
 800710e:	e002      	b.n	8007116 <_printf_i+0xee>
 8007110:	0641      	lsls	r1, r0, #25
 8007112:	d5fb      	bpl.n	800710c <_printf_i+0xe4>
 8007114:	881e      	ldrh	r6, [r3, #0]
 8007116:	4853      	ldr	r0, [pc, #332]	; (8007264 <_printf_i+0x23c>)
 8007118:	2f6f      	cmp	r7, #111	; 0x6f
 800711a:	bf0c      	ite	eq
 800711c:	2308      	moveq	r3, #8
 800711e:	230a      	movne	r3, #10
 8007120:	2100      	movs	r1, #0
 8007122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007126:	6865      	ldr	r5, [r4, #4]
 8007128:	60a5      	str	r5, [r4, #8]
 800712a:	2d00      	cmp	r5, #0
 800712c:	bfa2      	ittt	ge
 800712e:	6821      	ldrge	r1, [r4, #0]
 8007130:	f021 0104 	bicge.w	r1, r1, #4
 8007134:	6021      	strge	r1, [r4, #0]
 8007136:	b90e      	cbnz	r6, 800713c <_printf_i+0x114>
 8007138:	2d00      	cmp	r5, #0
 800713a:	d04b      	beq.n	80071d4 <_printf_i+0x1ac>
 800713c:	4615      	mov	r5, r2
 800713e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007142:	fb03 6711 	mls	r7, r3, r1, r6
 8007146:	5dc7      	ldrb	r7, [r0, r7]
 8007148:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800714c:	4637      	mov	r7, r6
 800714e:	42bb      	cmp	r3, r7
 8007150:	460e      	mov	r6, r1
 8007152:	d9f4      	bls.n	800713e <_printf_i+0x116>
 8007154:	2b08      	cmp	r3, #8
 8007156:	d10b      	bne.n	8007170 <_printf_i+0x148>
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	07de      	lsls	r6, r3, #31
 800715c:	d508      	bpl.n	8007170 <_printf_i+0x148>
 800715e:	6923      	ldr	r3, [r4, #16]
 8007160:	6861      	ldr	r1, [r4, #4]
 8007162:	4299      	cmp	r1, r3
 8007164:	bfde      	ittt	le
 8007166:	2330      	movle	r3, #48	; 0x30
 8007168:	f805 3c01 	strble.w	r3, [r5, #-1]
 800716c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007170:	1b52      	subs	r2, r2, r5
 8007172:	6122      	str	r2, [r4, #16]
 8007174:	f8cd a000 	str.w	sl, [sp]
 8007178:	464b      	mov	r3, r9
 800717a:	aa03      	add	r2, sp, #12
 800717c:	4621      	mov	r1, r4
 800717e:	4640      	mov	r0, r8
 8007180:	f7ff fee4 	bl	8006f4c <_printf_common>
 8007184:	3001      	adds	r0, #1
 8007186:	d14a      	bne.n	800721e <_printf_i+0x1f6>
 8007188:	f04f 30ff 	mov.w	r0, #4294967295
 800718c:	b004      	add	sp, #16
 800718e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	f043 0320 	orr.w	r3, r3, #32
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	4833      	ldr	r0, [pc, #204]	; (8007268 <_printf_i+0x240>)
 800719c:	2778      	movs	r7, #120	; 0x78
 800719e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	6829      	ldr	r1, [r5, #0]
 80071a6:	061f      	lsls	r7, r3, #24
 80071a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80071ac:	d402      	bmi.n	80071b4 <_printf_i+0x18c>
 80071ae:	065f      	lsls	r7, r3, #25
 80071b0:	bf48      	it	mi
 80071b2:	b2b6      	uxthmi	r6, r6
 80071b4:	07df      	lsls	r7, r3, #31
 80071b6:	bf48      	it	mi
 80071b8:	f043 0320 	orrmi.w	r3, r3, #32
 80071bc:	6029      	str	r1, [r5, #0]
 80071be:	bf48      	it	mi
 80071c0:	6023      	strmi	r3, [r4, #0]
 80071c2:	b91e      	cbnz	r6, 80071cc <_printf_i+0x1a4>
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	f023 0320 	bic.w	r3, r3, #32
 80071ca:	6023      	str	r3, [r4, #0]
 80071cc:	2310      	movs	r3, #16
 80071ce:	e7a7      	b.n	8007120 <_printf_i+0xf8>
 80071d0:	4824      	ldr	r0, [pc, #144]	; (8007264 <_printf_i+0x23c>)
 80071d2:	e7e4      	b.n	800719e <_printf_i+0x176>
 80071d4:	4615      	mov	r5, r2
 80071d6:	e7bd      	b.n	8007154 <_printf_i+0x12c>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	6826      	ldr	r6, [r4, #0]
 80071dc:	6961      	ldr	r1, [r4, #20]
 80071de:	1d18      	adds	r0, r3, #4
 80071e0:	6028      	str	r0, [r5, #0]
 80071e2:	0635      	lsls	r5, r6, #24
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	d501      	bpl.n	80071ec <_printf_i+0x1c4>
 80071e8:	6019      	str	r1, [r3, #0]
 80071ea:	e002      	b.n	80071f2 <_printf_i+0x1ca>
 80071ec:	0670      	lsls	r0, r6, #25
 80071ee:	d5fb      	bpl.n	80071e8 <_printf_i+0x1c0>
 80071f0:	8019      	strh	r1, [r3, #0]
 80071f2:	2300      	movs	r3, #0
 80071f4:	6123      	str	r3, [r4, #16]
 80071f6:	4615      	mov	r5, r2
 80071f8:	e7bc      	b.n	8007174 <_printf_i+0x14c>
 80071fa:	682b      	ldr	r3, [r5, #0]
 80071fc:	1d1a      	adds	r2, r3, #4
 80071fe:	602a      	str	r2, [r5, #0]
 8007200:	681d      	ldr	r5, [r3, #0]
 8007202:	6862      	ldr	r2, [r4, #4]
 8007204:	2100      	movs	r1, #0
 8007206:	4628      	mov	r0, r5
 8007208:	f7f8 ffe2 	bl	80001d0 <memchr>
 800720c:	b108      	cbz	r0, 8007212 <_printf_i+0x1ea>
 800720e:	1b40      	subs	r0, r0, r5
 8007210:	6060      	str	r0, [r4, #4]
 8007212:	6863      	ldr	r3, [r4, #4]
 8007214:	6123      	str	r3, [r4, #16]
 8007216:	2300      	movs	r3, #0
 8007218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800721c:	e7aa      	b.n	8007174 <_printf_i+0x14c>
 800721e:	6923      	ldr	r3, [r4, #16]
 8007220:	462a      	mov	r2, r5
 8007222:	4649      	mov	r1, r9
 8007224:	4640      	mov	r0, r8
 8007226:	47d0      	blx	sl
 8007228:	3001      	adds	r0, #1
 800722a:	d0ad      	beq.n	8007188 <_printf_i+0x160>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	079b      	lsls	r3, r3, #30
 8007230:	d413      	bmi.n	800725a <_printf_i+0x232>
 8007232:	68e0      	ldr	r0, [r4, #12]
 8007234:	9b03      	ldr	r3, [sp, #12]
 8007236:	4298      	cmp	r0, r3
 8007238:	bfb8      	it	lt
 800723a:	4618      	movlt	r0, r3
 800723c:	e7a6      	b.n	800718c <_printf_i+0x164>
 800723e:	2301      	movs	r3, #1
 8007240:	4632      	mov	r2, r6
 8007242:	4649      	mov	r1, r9
 8007244:	4640      	mov	r0, r8
 8007246:	47d0      	blx	sl
 8007248:	3001      	adds	r0, #1
 800724a:	d09d      	beq.n	8007188 <_printf_i+0x160>
 800724c:	3501      	adds	r5, #1
 800724e:	68e3      	ldr	r3, [r4, #12]
 8007250:	9903      	ldr	r1, [sp, #12]
 8007252:	1a5b      	subs	r3, r3, r1
 8007254:	42ab      	cmp	r3, r5
 8007256:	dcf2      	bgt.n	800723e <_printf_i+0x216>
 8007258:	e7eb      	b.n	8007232 <_printf_i+0x20a>
 800725a:	2500      	movs	r5, #0
 800725c:	f104 0619 	add.w	r6, r4, #25
 8007260:	e7f5      	b.n	800724e <_printf_i+0x226>
 8007262:	bf00      	nop
 8007264:	08009556 	.word	0x08009556
 8007268:	08009567 	.word	0x08009567

0800726c <std>:
 800726c:	2300      	movs	r3, #0
 800726e:	b510      	push	{r4, lr}
 8007270:	4604      	mov	r4, r0
 8007272:	e9c0 3300 	strd	r3, r3, [r0]
 8007276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800727a:	6083      	str	r3, [r0, #8]
 800727c:	8181      	strh	r1, [r0, #12]
 800727e:	6643      	str	r3, [r0, #100]	; 0x64
 8007280:	81c2      	strh	r2, [r0, #14]
 8007282:	6183      	str	r3, [r0, #24]
 8007284:	4619      	mov	r1, r3
 8007286:	2208      	movs	r2, #8
 8007288:	305c      	adds	r0, #92	; 0x5c
 800728a:	f000 f8e2 	bl	8007452 <memset>
 800728e:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <std+0x38>)
 8007290:	6263      	str	r3, [r4, #36]	; 0x24
 8007292:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <std+0x3c>)
 8007294:	62a3      	str	r3, [r4, #40]	; 0x28
 8007296:	4b05      	ldr	r3, [pc, #20]	; (80072ac <std+0x40>)
 8007298:	62e3      	str	r3, [r4, #44]	; 0x2c
 800729a:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <std+0x44>)
 800729c:	6224      	str	r4, [r4, #32]
 800729e:	6323      	str	r3, [r4, #48]	; 0x30
 80072a0:	bd10      	pop	{r4, pc}
 80072a2:	bf00      	nop
 80072a4:	080073cd 	.word	0x080073cd
 80072a8:	080073ef 	.word	0x080073ef
 80072ac:	08007427 	.word	0x08007427
 80072b0:	0800744b 	.word	0x0800744b

080072b4 <stdio_exit_handler>:
 80072b4:	4a02      	ldr	r2, [pc, #8]	; (80072c0 <stdio_exit_handler+0xc>)
 80072b6:	4903      	ldr	r1, [pc, #12]	; (80072c4 <stdio_exit_handler+0x10>)
 80072b8:	4803      	ldr	r0, [pc, #12]	; (80072c8 <stdio_exit_handler+0x14>)
 80072ba:	f000 b869 	b.w	8007390 <_fwalk_sglue>
 80072be:	bf00      	nop
 80072c0:	20000038 	.word	0x20000038
 80072c4:	08008ba9 	.word	0x08008ba9
 80072c8:	20000044 	.word	0x20000044

080072cc <cleanup_stdio>:
 80072cc:	6841      	ldr	r1, [r0, #4]
 80072ce:	4b0c      	ldr	r3, [pc, #48]	; (8007300 <cleanup_stdio+0x34>)
 80072d0:	4299      	cmp	r1, r3
 80072d2:	b510      	push	{r4, lr}
 80072d4:	4604      	mov	r4, r0
 80072d6:	d001      	beq.n	80072dc <cleanup_stdio+0x10>
 80072d8:	f001 fc66 	bl	8008ba8 <_fflush_r>
 80072dc:	68a1      	ldr	r1, [r4, #8]
 80072de:	4b09      	ldr	r3, [pc, #36]	; (8007304 <cleanup_stdio+0x38>)
 80072e0:	4299      	cmp	r1, r3
 80072e2:	d002      	beq.n	80072ea <cleanup_stdio+0x1e>
 80072e4:	4620      	mov	r0, r4
 80072e6:	f001 fc5f 	bl	8008ba8 <_fflush_r>
 80072ea:	68e1      	ldr	r1, [r4, #12]
 80072ec:	4b06      	ldr	r3, [pc, #24]	; (8007308 <cleanup_stdio+0x3c>)
 80072ee:	4299      	cmp	r1, r3
 80072f0:	d004      	beq.n	80072fc <cleanup_stdio+0x30>
 80072f2:	4620      	mov	r0, r4
 80072f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072f8:	f001 bc56 	b.w	8008ba8 <_fflush_r>
 80072fc:	bd10      	pop	{r4, pc}
 80072fe:	bf00      	nop
 8007300:	20000600 	.word	0x20000600
 8007304:	20000668 	.word	0x20000668
 8007308:	200006d0 	.word	0x200006d0

0800730c <global_stdio_init.part.0>:
 800730c:	b510      	push	{r4, lr}
 800730e:	4b0b      	ldr	r3, [pc, #44]	; (800733c <global_stdio_init.part.0+0x30>)
 8007310:	4c0b      	ldr	r4, [pc, #44]	; (8007340 <global_stdio_init.part.0+0x34>)
 8007312:	4a0c      	ldr	r2, [pc, #48]	; (8007344 <global_stdio_init.part.0+0x38>)
 8007314:	601a      	str	r2, [r3, #0]
 8007316:	4620      	mov	r0, r4
 8007318:	2200      	movs	r2, #0
 800731a:	2104      	movs	r1, #4
 800731c:	f7ff ffa6 	bl	800726c <std>
 8007320:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007324:	2201      	movs	r2, #1
 8007326:	2109      	movs	r1, #9
 8007328:	f7ff ffa0 	bl	800726c <std>
 800732c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007330:	2202      	movs	r2, #2
 8007332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007336:	2112      	movs	r1, #18
 8007338:	f7ff bf98 	b.w	800726c <std>
 800733c:	20000738 	.word	0x20000738
 8007340:	20000600 	.word	0x20000600
 8007344:	080072b5 	.word	0x080072b5

08007348 <__sfp_lock_acquire>:
 8007348:	4801      	ldr	r0, [pc, #4]	; (8007350 <__sfp_lock_acquire+0x8>)
 800734a:	f000 b953 	b.w	80075f4 <__retarget_lock_acquire_recursive>
 800734e:	bf00      	nop
 8007350:	20000741 	.word	0x20000741

08007354 <__sfp_lock_release>:
 8007354:	4801      	ldr	r0, [pc, #4]	; (800735c <__sfp_lock_release+0x8>)
 8007356:	f000 b94e 	b.w	80075f6 <__retarget_lock_release_recursive>
 800735a:	bf00      	nop
 800735c:	20000741 	.word	0x20000741

08007360 <__sinit>:
 8007360:	b510      	push	{r4, lr}
 8007362:	4604      	mov	r4, r0
 8007364:	f7ff fff0 	bl	8007348 <__sfp_lock_acquire>
 8007368:	6a23      	ldr	r3, [r4, #32]
 800736a:	b11b      	cbz	r3, 8007374 <__sinit+0x14>
 800736c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007370:	f7ff bff0 	b.w	8007354 <__sfp_lock_release>
 8007374:	4b04      	ldr	r3, [pc, #16]	; (8007388 <__sinit+0x28>)
 8007376:	6223      	str	r3, [r4, #32]
 8007378:	4b04      	ldr	r3, [pc, #16]	; (800738c <__sinit+0x2c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1f5      	bne.n	800736c <__sinit+0xc>
 8007380:	f7ff ffc4 	bl	800730c <global_stdio_init.part.0>
 8007384:	e7f2      	b.n	800736c <__sinit+0xc>
 8007386:	bf00      	nop
 8007388:	080072cd 	.word	0x080072cd
 800738c:	20000738 	.word	0x20000738

08007390 <_fwalk_sglue>:
 8007390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007394:	4607      	mov	r7, r0
 8007396:	4688      	mov	r8, r1
 8007398:	4614      	mov	r4, r2
 800739a:	2600      	movs	r6, #0
 800739c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073a0:	f1b9 0901 	subs.w	r9, r9, #1
 80073a4:	d505      	bpl.n	80073b2 <_fwalk_sglue+0x22>
 80073a6:	6824      	ldr	r4, [r4, #0]
 80073a8:	2c00      	cmp	r4, #0
 80073aa:	d1f7      	bne.n	800739c <_fwalk_sglue+0xc>
 80073ac:	4630      	mov	r0, r6
 80073ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073b2:	89ab      	ldrh	r3, [r5, #12]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d907      	bls.n	80073c8 <_fwalk_sglue+0x38>
 80073b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073bc:	3301      	adds	r3, #1
 80073be:	d003      	beq.n	80073c8 <_fwalk_sglue+0x38>
 80073c0:	4629      	mov	r1, r5
 80073c2:	4638      	mov	r0, r7
 80073c4:	47c0      	blx	r8
 80073c6:	4306      	orrs	r6, r0
 80073c8:	3568      	adds	r5, #104	; 0x68
 80073ca:	e7e9      	b.n	80073a0 <_fwalk_sglue+0x10>

080073cc <__sread>:
 80073cc:	b510      	push	{r4, lr}
 80073ce:	460c      	mov	r4, r1
 80073d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d4:	f000 f89c 	bl	8007510 <_read_r>
 80073d8:	2800      	cmp	r0, #0
 80073da:	bfab      	itete	ge
 80073dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073de:	89a3      	ldrhlt	r3, [r4, #12]
 80073e0:	181b      	addge	r3, r3, r0
 80073e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073e6:	bfac      	ite	ge
 80073e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80073ea:	81a3      	strhlt	r3, [r4, #12]
 80073ec:	bd10      	pop	{r4, pc}

080073ee <__swrite>:
 80073ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f2:	461f      	mov	r7, r3
 80073f4:	898b      	ldrh	r3, [r1, #12]
 80073f6:	05db      	lsls	r3, r3, #23
 80073f8:	4605      	mov	r5, r0
 80073fa:	460c      	mov	r4, r1
 80073fc:	4616      	mov	r6, r2
 80073fe:	d505      	bpl.n	800740c <__swrite+0x1e>
 8007400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007404:	2302      	movs	r3, #2
 8007406:	2200      	movs	r2, #0
 8007408:	f000 f870 	bl	80074ec <_lseek_r>
 800740c:	89a3      	ldrh	r3, [r4, #12]
 800740e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007412:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007416:	81a3      	strh	r3, [r4, #12]
 8007418:	4632      	mov	r2, r6
 800741a:	463b      	mov	r3, r7
 800741c:	4628      	mov	r0, r5
 800741e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007422:	f000 b8ab 	b.w	800757c <_write_r>

08007426 <__sseek>:
 8007426:	b510      	push	{r4, lr}
 8007428:	460c      	mov	r4, r1
 800742a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742e:	f000 f85d 	bl	80074ec <_lseek_r>
 8007432:	1c43      	adds	r3, r0, #1
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	bf15      	itete	ne
 8007438:	6560      	strne	r0, [r4, #84]	; 0x54
 800743a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800743e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007442:	81a3      	strheq	r3, [r4, #12]
 8007444:	bf18      	it	ne
 8007446:	81a3      	strhne	r3, [r4, #12]
 8007448:	bd10      	pop	{r4, pc}

0800744a <__sclose>:
 800744a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800744e:	f000 b83d 	b.w	80074cc <_close_r>

08007452 <memset>:
 8007452:	4402      	add	r2, r0
 8007454:	4603      	mov	r3, r0
 8007456:	4293      	cmp	r3, r2
 8007458:	d100      	bne.n	800745c <memset+0xa>
 800745a:	4770      	bx	lr
 800745c:	f803 1b01 	strb.w	r1, [r3], #1
 8007460:	e7f9      	b.n	8007456 <memset+0x4>

08007462 <_raise_r>:
 8007462:	291f      	cmp	r1, #31
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4604      	mov	r4, r0
 8007468:	460d      	mov	r5, r1
 800746a:	d904      	bls.n	8007476 <_raise_r+0x14>
 800746c:	2316      	movs	r3, #22
 800746e:	6003      	str	r3, [r0, #0]
 8007470:	f04f 30ff 	mov.w	r0, #4294967295
 8007474:	bd38      	pop	{r3, r4, r5, pc}
 8007476:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007478:	b112      	cbz	r2, 8007480 <_raise_r+0x1e>
 800747a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800747e:	b94b      	cbnz	r3, 8007494 <_raise_r+0x32>
 8007480:	4620      	mov	r0, r4
 8007482:	f000 f869 	bl	8007558 <_getpid_r>
 8007486:	462a      	mov	r2, r5
 8007488:	4601      	mov	r1, r0
 800748a:	4620      	mov	r0, r4
 800748c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007490:	f000 b850 	b.w	8007534 <_kill_r>
 8007494:	2b01      	cmp	r3, #1
 8007496:	d00a      	beq.n	80074ae <_raise_r+0x4c>
 8007498:	1c59      	adds	r1, r3, #1
 800749a:	d103      	bne.n	80074a4 <_raise_r+0x42>
 800749c:	2316      	movs	r3, #22
 800749e:	6003      	str	r3, [r0, #0]
 80074a0:	2001      	movs	r0, #1
 80074a2:	e7e7      	b.n	8007474 <_raise_r+0x12>
 80074a4:	2400      	movs	r4, #0
 80074a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80074aa:	4628      	mov	r0, r5
 80074ac:	4798      	blx	r3
 80074ae:	2000      	movs	r0, #0
 80074b0:	e7e0      	b.n	8007474 <_raise_r+0x12>
	...

080074b4 <raise>:
 80074b4:	4b02      	ldr	r3, [pc, #8]	; (80074c0 <raise+0xc>)
 80074b6:	4601      	mov	r1, r0
 80074b8:	6818      	ldr	r0, [r3, #0]
 80074ba:	f7ff bfd2 	b.w	8007462 <_raise_r>
 80074be:	bf00      	nop
 80074c0:	20000090 	.word	0x20000090

080074c4 <_localeconv_r>:
 80074c4:	4800      	ldr	r0, [pc, #0]	; (80074c8 <_localeconv_r+0x4>)
 80074c6:	4770      	bx	lr
 80074c8:	20000184 	.word	0x20000184

080074cc <_close_r>:
 80074cc:	b538      	push	{r3, r4, r5, lr}
 80074ce:	4d06      	ldr	r5, [pc, #24]	; (80074e8 <_close_r+0x1c>)
 80074d0:	2300      	movs	r3, #0
 80074d2:	4604      	mov	r4, r0
 80074d4:	4608      	mov	r0, r1
 80074d6:	602b      	str	r3, [r5, #0]
 80074d8:	f7fa fd61 	bl	8001f9e <_close>
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	d102      	bne.n	80074e6 <_close_r+0x1a>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	b103      	cbz	r3, 80074e6 <_close_r+0x1a>
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	2000073c 	.word	0x2000073c

080074ec <_lseek_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4d07      	ldr	r5, [pc, #28]	; (800750c <_lseek_r+0x20>)
 80074f0:	4604      	mov	r4, r0
 80074f2:	4608      	mov	r0, r1
 80074f4:	4611      	mov	r1, r2
 80074f6:	2200      	movs	r2, #0
 80074f8:	602a      	str	r2, [r5, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	f7fa fd76 	bl	8001fec <_lseek>
 8007500:	1c43      	adds	r3, r0, #1
 8007502:	d102      	bne.n	800750a <_lseek_r+0x1e>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	b103      	cbz	r3, 800750a <_lseek_r+0x1e>
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	2000073c 	.word	0x2000073c

08007510 <_read_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4d07      	ldr	r5, [pc, #28]	; (8007530 <_read_r+0x20>)
 8007514:	4604      	mov	r4, r0
 8007516:	4608      	mov	r0, r1
 8007518:	4611      	mov	r1, r2
 800751a:	2200      	movs	r2, #0
 800751c:	602a      	str	r2, [r5, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	f7fa fd04 	bl	8001f2c <_read>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	d102      	bne.n	800752e <_read_r+0x1e>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	b103      	cbz	r3, 800752e <_read_r+0x1e>
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	2000073c 	.word	0x2000073c

08007534 <_kill_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4d07      	ldr	r5, [pc, #28]	; (8007554 <_kill_r+0x20>)
 8007538:	2300      	movs	r3, #0
 800753a:	4604      	mov	r4, r0
 800753c:	4608      	mov	r0, r1
 800753e:	4611      	mov	r1, r2
 8007540:	602b      	str	r3, [r5, #0]
 8007542:	f7fa fcd9 	bl	8001ef8 <_kill>
 8007546:	1c43      	adds	r3, r0, #1
 8007548:	d102      	bne.n	8007550 <_kill_r+0x1c>
 800754a:	682b      	ldr	r3, [r5, #0]
 800754c:	b103      	cbz	r3, 8007550 <_kill_r+0x1c>
 800754e:	6023      	str	r3, [r4, #0]
 8007550:	bd38      	pop	{r3, r4, r5, pc}
 8007552:	bf00      	nop
 8007554:	2000073c 	.word	0x2000073c

08007558 <_getpid_r>:
 8007558:	f7fa bcc6 	b.w	8001ee8 <_getpid>

0800755c <_sbrk_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	4d06      	ldr	r5, [pc, #24]	; (8007578 <_sbrk_r+0x1c>)
 8007560:	2300      	movs	r3, #0
 8007562:	4604      	mov	r4, r0
 8007564:	4608      	mov	r0, r1
 8007566:	602b      	str	r3, [r5, #0]
 8007568:	f7fa fd4e 	bl	8002008 <_sbrk>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	d102      	bne.n	8007576 <_sbrk_r+0x1a>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	b103      	cbz	r3, 8007576 <_sbrk_r+0x1a>
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	2000073c 	.word	0x2000073c

0800757c <_write_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	4d07      	ldr	r5, [pc, #28]	; (800759c <_write_r+0x20>)
 8007580:	4604      	mov	r4, r0
 8007582:	4608      	mov	r0, r1
 8007584:	4611      	mov	r1, r2
 8007586:	2200      	movs	r2, #0
 8007588:	602a      	str	r2, [r5, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	f7fa fceb 	bl	8001f66 <_write>
 8007590:	1c43      	adds	r3, r0, #1
 8007592:	d102      	bne.n	800759a <_write_r+0x1e>
 8007594:	682b      	ldr	r3, [r5, #0]
 8007596:	b103      	cbz	r3, 800759a <_write_r+0x1e>
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	bd38      	pop	{r3, r4, r5, pc}
 800759c:	2000073c 	.word	0x2000073c

080075a0 <__errno>:
 80075a0:	4b01      	ldr	r3, [pc, #4]	; (80075a8 <__errno+0x8>)
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	20000090 	.word	0x20000090

080075ac <__libc_init_array>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	4d0d      	ldr	r5, [pc, #52]	; (80075e4 <__libc_init_array+0x38>)
 80075b0:	4c0d      	ldr	r4, [pc, #52]	; (80075e8 <__libc_init_array+0x3c>)
 80075b2:	1b64      	subs	r4, r4, r5
 80075b4:	10a4      	asrs	r4, r4, #2
 80075b6:	2600      	movs	r6, #0
 80075b8:	42a6      	cmp	r6, r4
 80075ba:	d109      	bne.n	80075d0 <__libc_init_array+0x24>
 80075bc:	4d0b      	ldr	r5, [pc, #44]	; (80075ec <__libc_init_array+0x40>)
 80075be:	4c0c      	ldr	r4, [pc, #48]	; (80075f0 <__libc_init_array+0x44>)
 80075c0:	f001 fdde 	bl	8009180 <_init>
 80075c4:	1b64      	subs	r4, r4, r5
 80075c6:	10a4      	asrs	r4, r4, #2
 80075c8:	2600      	movs	r6, #0
 80075ca:	42a6      	cmp	r6, r4
 80075cc:	d105      	bne.n	80075da <__libc_init_array+0x2e>
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d4:	4798      	blx	r3
 80075d6:	3601      	adds	r6, #1
 80075d8:	e7ee      	b.n	80075b8 <__libc_init_array+0xc>
 80075da:	f855 3b04 	ldr.w	r3, [r5], #4
 80075de:	4798      	blx	r3
 80075e0:	3601      	adds	r6, #1
 80075e2:	e7f2      	b.n	80075ca <__libc_init_array+0x1e>
 80075e4:	080098bc 	.word	0x080098bc
 80075e8:	080098bc 	.word	0x080098bc
 80075ec:	080098bc 	.word	0x080098bc
 80075f0:	080098c0 	.word	0x080098c0

080075f4 <__retarget_lock_acquire_recursive>:
 80075f4:	4770      	bx	lr

080075f6 <__retarget_lock_release_recursive>:
 80075f6:	4770      	bx	lr

080075f8 <memcpy>:
 80075f8:	440a      	add	r2, r1
 80075fa:	4291      	cmp	r1, r2
 80075fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007600:	d100      	bne.n	8007604 <memcpy+0xc>
 8007602:	4770      	bx	lr
 8007604:	b510      	push	{r4, lr}
 8007606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800760a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800760e:	4291      	cmp	r1, r2
 8007610:	d1f9      	bne.n	8007606 <memcpy+0xe>
 8007612:	bd10      	pop	{r4, pc}

08007614 <quorem>:
 8007614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007618:	6903      	ldr	r3, [r0, #16]
 800761a:	690c      	ldr	r4, [r1, #16]
 800761c:	42a3      	cmp	r3, r4
 800761e:	4607      	mov	r7, r0
 8007620:	db7e      	blt.n	8007720 <quorem+0x10c>
 8007622:	3c01      	subs	r4, #1
 8007624:	f101 0814 	add.w	r8, r1, #20
 8007628:	f100 0514 	add.w	r5, r0, #20
 800762c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007636:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800763a:	3301      	adds	r3, #1
 800763c:	429a      	cmp	r2, r3
 800763e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007642:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007646:	fbb2 f6f3 	udiv	r6, r2, r3
 800764a:	d331      	bcc.n	80076b0 <quorem+0x9c>
 800764c:	f04f 0e00 	mov.w	lr, #0
 8007650:	4640      	mov	r0, r8
 8007652:	46ac      	mov	ip, r5
 8007654:	46f2      	mov	sl, lr
 8007656:	f850 2b04 	ldr.w	r2, [r0], #4
 800765a:	b293      	uxth	r3, r2
 800765c:	fb06 e303 	mla	r3, r6, r3, lr
 8007660:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007664:	0c1a      	lsrs	r2, r3, #16
 8007666:	b29b      	uxth	r3, r3
 8007668:	ebaa 0303 	sub.w	r3, sl, r3
 800766c:	f8dc a000 	ldr.w	sl, [ip]
 8007670:	fa13 f38a 	uxtah	r3, r3, sl
 8007674:	fb06 220e 	mla	r2, r6, lr, r2
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	9b00      	ldr	r3, [sp, #0]
 800767c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007680:	b292      	uxth	r2, r2
 8007682:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007686:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800768a:	f8bd 3000 	ldrh.w	r3, [sp]
 800768e:	4581      	cmp	r9, r0
 8007690:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007694:	f84c 3b04 	str.w	r3, [ip], #4
 8007698:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800769c:	d2db      	bcs.n	8007656 <quorem+0x42>
 800769e:	f855 300b 	ldr.w	r3, [r5, fp]
 80076a2:	b92b      	cbnz	r3, 80076b0 <quorem+0x9c>
 80076a4:	9b01      	ldr	r3, [sp, #4]
 80076a6:	3b04      	subs	r3, #4
 80076a8:	429d      	cmp	r5, r3
 80076aa:	461a      	mov	r2, r3
 80076ac:	d32c      	bcc.n	8007708 <quorem+0xf4>
 80076ae:	613c      	str	r4, [r7, #16]
 80076b0:	4638      	mov	r0, r7
 80076b2:	f001 f8f3 	bl	800889c <__mcmp>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	db22      	blt.n	8007700 <quorem+0xec>
 80076ba:	3601      	adds	r6, #1
 80076bc:	4629      	mov	r1, r5
 80076be:	2000      	movs	r0, #0
 80076c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80076c4:	f8d1 c000 	ldr.w	ip, [r1]
 80076c8:	b293      	uxth	r3, r2
 80076ca:	1ac3      	subs	r3, r0, r3
 80076cc:	0c12      	lsrs	r2, r2, #16
 80076ce:	fa13 f38c 	uxtah	r3, r3, ip
 80076d2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80076d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076da:	b29b      	uxth	r3, r3
 80076dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076e0:	45c1      	cmp	r9, r8
 80076e2:	f841 3b04 	str.w	r3, [r1], #4
 80076e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076ea:	d2e9      	bcs.n	80076c0 <quorem+0xac>
 80076ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076f4:	b922      	cbnz	r2, 8007700 <quorem+0xec>
 80076f6:	3b04      	subs	r3, #4
 80076f8:	429d      	cmp	r5, r3
 80076fa:	461a      	mov	r2, r3
 80076fc:	d30a      	bcc.n	8007714 <quorem+0x100>
 80076fe:	613c      	str	r4, [r7, #16]
 8007700:	4630      	mov	r0, r6
 8007702:	b003      	add	sp, #12
 8007704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007708:	6812      	ldr	r2, [r2, #0]
 800770a:	3b04      	subs	r3, #4
 800770c:	2a00      	cmp	r2, #0
 800770e:	d1ce      	bne.n	80076ae <quorem+0x9a>
 8007710:	3c01      	subs	r4, #1
 8007712:	e7c9      	b.n	80076a8 <quorem+0x94>
 8007714:	6812      	ldr	r2, [r2, #0]
 8007716:	3b04      	subs	r3, #4
 8007718:	2a00      	cmp	r2, #0
 800771a:	d1f0      	bne.n	80076fe <quorem+0xea>
 800771c:	3c01      	subs	r4, #1
 800771e:	e7eb      	b.n	80076f8 <quorem+0xe4>
 8007720:	2000      	movs	r0, #0
 8007722:	e7ee      	b.n	8007702 <quorem+0xee>
 8007724:	0000      	movs	r0, r0
	...

08007728 <_dtoa_r>:
 8007728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772c:	ed2d 8b04 	vpush	{d8-d9}
 8007730:	69c5      	ldr	r5, [r0, #28]
 8007732:	b093      	sub	sp, #76	; 0x4c
 8007734:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007738:	ec57 6b10 	vmov	r6, r7, d0
 800773c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007740:	9107      	str	r1, [sp, #28]
 8007742:	4604      	mov	r4, r0
 8007744:	920a      	str	r2, [sp, #40]	; 0x28
 8007746:	930d      	str	r3, [sp, #52]	; 0x34
 8007748:	b975      	cbnz	r5, 8007768 <_dtoa_r+0x40>
 800774a:	2010      	movs	r0, #16
 800774c:	f7ff f874 	bl	8006838 <malloc>
 8007750:	4602      	mov	r2, r0
 8007752:	61e0      	str	r0, [r4, #28]
 8007754:	b920      	cbnz	r0, 8007760 <_dtoa_r+0x38>
 8007756:	4bae      	ldr	r3, [pc, #696]	; (8007a10 <_dtoa_r+0x2e8>)
 8007758:	21ef      	movs	r1, #239	; 0xef
 800775a:	48ae      	ldr	r0, [pc, #696]	; (8007a14 <_dtoa_r+0x2ec>)
 800775c:	f001 fa4c 	bl	8008bf8 <__assert_func>
 8007760:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007764:	6005      	str	r5, [r0, #0]
 8007766:	60c5      	str	r5, [r0, #12]
 8007768:	69e3      	ldr	r3, [r4, #28]
 800776a:	6819      	ldr	r1, [r3, #0]
 800776c:	b151      	cbz	r1, 8007784 <_dtoa_r+0x5c>
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	604a      	str	r2, [r1, #4]
 8007772:	2301      	movs	r3, #1
 8007774:	4093      	lsls	r3, r2
 8007776:	608b      	str	r3, [r1, #8]
 8007778:	4620      	mov	r0, r4
 800777a:	f000 fe53 	bl	8008424 <_Bfree>
 800777e:	69e3      	ldr	r3, [r4, #28]
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	1e3b      	subs	r3, r7, #0
 8007786:	bfbb      	ittet	lt
 8007788:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800778c:	9303      	strlt	r3, [sp, #12]
 800778e:	2300      	movge	r3, #0
 8007790:	2201      	movlt	r2, #1
 8007792:	bfac      	ite	ge
 8007794:	f8c8 3000 	strge.w	r3, [r8]
 8007798:	f8c8 2000 	strlt.w	r2, [r8]
 800779c:	4b9e      	ldr	r3, [pc, #632]	; (8007a18 <_dtoa_r+0x2f0>)
 800779e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80077a2:	ea33 0308 	bics.w	r3, r3, r8
 80077a6:	d11b      	bne.n	80077e0 <_dtoa_r+0xb8>
 80077a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80077ae:	6013      	str	r3, [r2, #0]
 80077b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80077b4:	4333      	orrs	r3, r6
 80077b6:	f000 8593 	beq.w	80082e0 <_dtoa_r+0xbb8>
 80077ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077bc:	b963      	cbnz	r3, 80077d8 <_dtoa_r+0xb0>
 80077be:	4b97      	ldr	r3, [pc, #604]	; (8007a1c <_dtoa_r+0x2f4>)
 80077c0:	e027      	b.n	8007812 <_dtoa_r+0xea>
 80077c2:	4b97      	ldr	r3, [pc, #604]	; (8007a20 <_dtoa_r+0x2f8>)
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	3308      	adds	r3, #8
 80077c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	9800      	ldr	r0, [sp, #0]
 80077ce:	b013      	add	sp, #76	; 0x4c
 80077d0:	ecbd 8b04 	vpop	{d8-d9}
 80077d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d8:	4b90      	ldr	r3, [pc, #576]	; (8007a1c <_dtoa_r+0x2f4>)
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	3303      	adds	r3, #3
 80077de:	e7f3      	b.n	80077c8 <_dtoa_r+0xa0>
 80077e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077e4:	2200      	movs	r2, #0
 80077e6:	ec51 0b17 	vmov	r0, r1, d7
 80077ea:	eeb0 8a47 	vmov.f32	s16, s14
 80077ee:	eef0 8a67 	vmov.f32	s17, s15
 80077f2:	2300      	movs	r3, #0
 80077f4:	f7f9 f968 	bl	8000ac8 <__aeabi_dcmpeq>
 80077f8:	4681      	mov	r9, r0
 80077fa:	b160      	cbz	r0, 8007816 <_dtoa_r+0xee>
 80077fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077fe:	2301      	movs	r3, #1
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 8568 	beq.w	80082da <_dtoa_r+0xbb2>
 800780a:	4b86      	ldr	r3, [pc, #536]	; (8007a24 <_dtoa_r+0x2fc>)
 800780c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800780e:	6013      	str	r3, [r2, #0]
 8007810:	3b01      	subs	r3, #1
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	e7da      	b.n	80077cc <_dtoa_r+0xa4>
 8007816:	aa10      	add	r2, sp, #64	; 0x40
 8007818:	a911      	add	r1, sp, #68	; 0x44
 800781a:	4620      	mov	r0, r4
 800781c:	eeb0 0a48 	vmov.f32	s0, s16
 8007820:	eef0 0a68 	vmov.f32	s1, s17
 8007824:	f001 f8e0 	bl	80089e8 <__d2b>
 8007828:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800782c:	4682      	mov	sl, r0
 800782e:	2d00      	cmp	r5, #0
 8007830:	d07f      	beq.n	8007932 <_dtoa_r+0x20a>
 8007832:	ee18 3a90 	vmov	r3, s17
 8007836:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800783a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800783e:	ec51 0b18 	vmov	r0, r1, d8
 8007842:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007846:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800784a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800784e:	4619      	mov	r1, r3
 8007850:	2200      	movs	r2, #0
 8007852:	4b75      	ldr	r3, [pc, #468]	; (8007a28 <_dtoa_r+0x300>)
 8007854:	f7f8 fd18 	bl	8000288 <__aeabi_dsub>
 8007858:	a367      	add	r3, pc, #412	; (adr r3, 80079f8 <_dtoa_r+0x2d0>)
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f7f8 fecb 	bl	80005f8 <__aeabi_dmul>
 8007862:	a367      	add	r3, pc, #412	; (adr r3, 8007a00 <_dtoa_r+0x2d8>)
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f7f8 fd10 	bl	800028c <__adddf3>
 800786c:	4606      	mov	r6, r0
 800786e:	4628      	mov	r0, r5
 8007870:	460f      	mov	r7, r1
 8007872:	f7f8 fe57 	bl	8000524 <__aeabi_i2d>
 8007876:	a364      	add	r3, pc, #400	; (adr r3, 8007a08 <_dtoa_r+0x2e0>)
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	f7f8 febc 	bl	80005f8 <__aeabi_dmul>
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	4630      	mov	r0, r6
 8007886:	4639      	mov	r1, r7
 8007888:	f7f8 fd00 	bl	800028c <__adddf3>
 800788c:	4606      	mov	r6, r0
 800788e:	460f      	mov	r7, r1
 8007890:	f7f9 f962 	bl	8000b58 <__aeabi_d2iz>
 8007894:	2200      	movs	r2, #0
 8007896:	4683      	mov	fp, r0
 8007898:	2300      	movs	r3, #0
 800789a:	4630      	mov	r0, r6
 800789c:	4639      	mov	r1, r7
 800789e:	f7f9 f91d 	bl	8000adc <__aeabi_dcmplt>
 80078a2:	b148      	cbz	r0, 80078b8 <_dtoa_r+0x190>
 80078a4:	4658      	mov	r0, fp
 80078a6:	f7f8 fe3d 	bl	8000524 <__aeabi_i2d>
 80078aa:	4632      	mov	r2, r6
 80078ac:	463b      	mov	r3, r7
 80078ae:	f7f9 f90b 	bl	8000ac8 <__aeabi_dcmpeq>
 80078b2:	b908      	cbnz	r0, 80078b8 <_dtoa_r+0x190>
 80078b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078b8:	f1bb 0f16 	cmp.w	fp, #22
 80078bc:	d857      	bhi.n	800796e <_dtoa_r+0x246>
 80078be:	4b5b      	ldr	r3, [pc, #364]	; (8007a2c <_dtoa_r+0x304>)
 80078c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	ec51 0b18 	vmov	r0, r1, d8
 80078cc:	f7f9 f906 	bl	8000adc <__aeabi_dcmplt>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d04e      	beq.n	8007972 <_dtoa_r+0x24a>
 80078d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078d8:	2300      	movs	r3, #0
 80078da:	930c      	str	r3, [sp, #48]	; 0x30
 80078dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078de:	1b5b      	subs	r3, r3, r5
 80078e0:	1e5a      	subs	r2, r3, #1
 80078e2:	bf45      	ittet	mi
 80078e4:	f1c3 0301 	rsbmi	r3, r3, #1
 80078e8:	9305      	strmi	r3, [sp, #20]
 80078ea:	2300      	movpl	r3, #0
 80078ec:	2300      	movmi	r3, #0
 80078ee:	9206      	str	r2, [sp, #24]
 80078f0:	bf54      	ite	pl
 80078f2:	9305      	strpl	r3, [sp, #20]
 80078f4:	9306      	strmi	r3, [sp, #24]
 80078f6:	f1bb 0f00 	cmp.w	fp, #0
 80078fa:	db3c      	blt.n	8007976 <_dtoa_r+0x24e>
 80078fc:	9b06      	ldr	r3, [sp, #24]
 80078fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007902:	445b      	add	r3, fp
 8007904:	9306      	str	r3, [sp, #24]
 8007906:	2300      	movs	r3, #0
 8007908:	9308      	str	r3, [sp, #32]
 800790a:	9b07      	ldr	r3, [sp, #28]
 800790c:	2b09      	cmp	r3, #9
 800790e:	d868      	bhi.n	80079e2 <_dtoa_r+0x2ba>
 8007910:	2b05      	cmp	r3, #5
 8007912:	bfc4      	itt	gt
 8007914:	3b04      	subgt	r3, #4
 8007916:	9307      	strgt	r3, [sp, #28]
 8007918:	9b07      	ldr	r3, [sp, #28]
 800791a:	f1a3 0302 	sub.w	r3, r3, #2
 800791e:	bfcc      	ite	gt
 8007920:	2500      	movgt	r5, #0
 8007922:	2501      	movle	r5, #1
 8007924:	2b03      	cmp	r3, #3
 8007926:	f200 8085 	bhi.w	8007a34 <_dtoa_r+0x30c>
 800792a:	e8df f003 	tbb	[pc, r3]
 800792e:	3b2e      	.short	0x3b2e
 8007930:	5839      	.short	0x5839
 8007932:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007936:	441d      	add	r5, r3
 8007938:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800793c:	2b20      	cmp	r3, #32
 800793e:	bfc1      	itttt	gt
 8007940:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007944:	fa08 f803 	lslgt.w	r8, r8, r3
 8007948:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800794c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007950:	bfd6      	itet	le
 8007952:	f1c3 0320 	rsble	r3, r3, #32
 8007956:	ea48 0003 	orrgt.w	r0, r8, r3
 800795a:	fa06 f003 	lslle.w	r0, r6, r3
 800795e:	f7f8 fdd1 	bl	8000504 <__aeabi_ui2d>
 8007962:	2201      	movs	r2, #1
 8007964:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007968:	3d01      	subs	r5, #1
 800796a:	920e      	str	r2, [sp, #56]	; 0x38
 800796c:	e76f      	b.n	800784e <_dtoa_r+0x126>
 800796e:	2301      	movs	r3, #1
 8007970:	e7b3      	b.n	80078da <_dtoa_r+0x1b2>
 8007972:	900c      	str	r0, [sp, #48]	; 0x30
 8007974:	e7b2      	b.n	80078dc <_dtoa_r+0x1b4>
 8007976:	9b05      	ldr	r3, [sp, #20]
 8007978:	eba3 030b 	sub.w	r3, r3, fp
 800797c:	9305      	str	r3, [sp, #20]
 800797e:	f1cb 0300 	rsb	r3, fp, #0
 8007982:	9308      	str	r3, [sp, #32]
 8007984:	2300      	movs	r3, #0
 8007986:	930b      	str	r3, [sp, #44]	; 0x2c
 8007988:	e7bf      	b.n	800790a <_dtoa_r+0x1e2>
 800798a:	2300      	movs	r3, #0
 800798c:	9309      	str	r3, [sp, #36]	; 0x24
 800798e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007990:	2b00      	cmp	r3, #0
 8007992:	dc52      	bgt.n	8007a3a <_dtoa_r+0x312>
 8007994:	2301      	movs	r3, #1
 8007996:	9301      	str	r3, [sp, #4]
 8007998:	9304      	str	r3, [sp, #16]
 800799a:	461a      	mov	r2, r3
 800799c:	920a      	str	r2, [sp, #40]	; 0x28
 800799e:	e00b      	b.n	80079b8 <_dtoa_r+0x290>
 80079a0:	2301      	movs	r3, #1
 80079a2:	e7f3      	b.n	800798c <_dtoa_r+0x264>
 80079a4:	2300      	movs	r3, #0
 80079a6:	9309      	str	r3, [sp, #36]	; 0x24
 80079a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079aa:	445b      	add	r3, fp
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	3301      	adds	r3, #1
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	9304      	str	r3, [sp, #16]
 80079b4:	bfb8      	it	lt
 80079b6:	2301      	movlt	r3, #1
 80079b8:	69e0      	ldr	r0, [r4, #28]
 80079ba:	2100      	movs	r1, #0
 80079bc:	2204      	movs	r2, #4
 80079be:	f102 0614 	add.w	r6, r2, #20
 80079c2:	429e      	cmp	r6, r3
 80079c4:	d93d      	bls.n	8007a42 <_dtoa_r+0x31a>
 80079c6:	6041      	str	r1, [r0, #4]
 80079c8:	4620      	mov	r0, r4
 80079ca:	f000 fceb 	bl	80083a4 <_Balloc>
 80079ce:	9000      	str	r0, [sp, #0]
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d139      	bne.n	8007a48 <_dtoa_r+0x320>
 80079d4:	4b16      	ldr	r3, [pc, #88]	; (8007a30 <_dtoa_r+0x308>)
 80079d6:	4602      	mov	r2, r0
 80079d8:	f240 11af 	movw	r1, #431	; 0x1af
 80079dc:	e6bd      	b.n	800775a <_dtoa_r+0x32>
 80079de:	2301      	movs	r3, #1
 80079e0:	e7e1      	b.n	80079a6 <_dtoa_r+0x27e>
 80079e2:	2501      	movs	r5, #1
 80079e4:	2300      	movs	r3, #0
 80079e6:	9307      	str	r3, [sp, #28]
 80079e8:	9509      	str	r5, [sp, #36]	; 0x24
 80079ea:	f04f 33ff 	mov.w	r3, #4294967295
 80079ee:	9301      	str	r3, [sp, #4]
 80079f0:	9304      	str	r3, [sp, #16]
 80079f2:	2200      	movs	r2, #0
 80079f4:	2312      	movs	r3, #18
 80079f6:	e7d1      	b.n	800799c <_dtoa_r+0x274>
 80079f8:	636f4361 	.word	0x636f4361
 80079fc:	3fd287a7 	.word	0x3fd287a7
 8007a00:	8b60c8b3 	.word	0x8b60c8b3
 8007a04:	3fc68a28 	.word	0x3fc68a28
 8007a08:	509f79fb 	.word	0x509f79fb
 8007a0c:	3fd34413 	.word	0x3fd34413
 8007a10:	08009585 	.word	0x08009585
 8007a14:	0800959c 	.word	0x0800959c
 8007a18:	7ff00000 	.word	0x7ff00000
 8007a1c:	08009581 	.word	0x08009581
 8007a20:	08009578 	.word	0x08009578
 8007a24:	08009555 	.word	0x08009555
 8007a28:	3ff80000 	.word	0x3ff80000
 8007a2c:	08009688 	.word	0x08009688
 8007a30:	080095f4 	.word	0x080095f4
 8007a34:	2301      	movs	r3, #1
 8007a36:	9309      	str	r3, [sp, #36]	; 0x24
 8007a38:	e7d7      	b.n	80079ea <_dtoa_r+0x2c2>
 8007a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a3c:	9301      	str	r3, [sp, #4]
 8007a3e:	9304      	str	r3, [sp, #16]
 8007a40:	e7ba      	b.n	80079b8 <_dtoa_r+0x290>
 8007a42:	3101      	adds	r1, #1
 8007a44:	0052      	lsls	r2, r2, #1
 8007a46:	e7ba      	b.n	80079be <_dtoa_r+0x296>
 8007a48:	69e3      	ldr	r3, [r4, #28]
 8007a4a:	9a00      	ldr	r2, [sp, #0]
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	9b04      	ldr	r3, [sp, #16]
 8007a50:	2b0e      	cmp	r3, #14
 8007a52:	f200 80a8 	bhi.w	8007ba6 <_dtoa_r+0x47e>
 8007a56:	2d00      	cmp	r5, #0
 8007a58:	f000 80a5 	beq.w	8007ba6 <_dtoa_r+0x47e>
 8007a5c:	f1bb 0f00 	cmp.w	fp, #0
 8007a60:	dd38      	ble.n	8007ad4 <_dtoa_r+0x3ac>
 8007a62:	4bc0      	ldr	r3, [pc, #768]	; (8007d64 <_dtoa_r+0x63c>)
 8007a64:	f00b 020f 	and.w	r2, fp, #15
 8007a68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007a70:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007a74:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007a78:	d019      	beq.n	8007aae <_dtoa_r+0x386>
 8007a7a:	4bbb      	ldr	r3, [pc, #748]	; (8007d68 <_dtoa_r+0x640>)
 8007a7c:	ec51 0b18 	vmov	r0, r1, d8
 8007a80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a84:	f7f8 fee2 	bl	800084c <__aeabi_ddiv>
 8007a88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a8c:	f008 080f 	and.w	r8, r8, #15
 8007a90:	2503      	movs	r5, #3
 8007a92:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007d68 <_dtoa_r+0x640>
 8007a96:	f1b8 0f00 	cmp.w	r8, #0
 8007a9a:	d10a      	bne.n	8007ab2 <_dtoa_r+0x38a>
 8007a9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aa0:	4632      	mov	r2, r6
 8007aa2:	463b      	mov	r3, r7
 8007aa4:	f7f8 fed2 	bl	800084c <__aeabi_ddiv>
 8007aa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aac:	e02b      	b.n	8007b06 <_dtoa_r+0x3de>
 8007aae:	2502      	movs	r5, #2
 8007ab0:	e7ef      	b.n	8007a92 <_dtoa_r+0x36a>
 8007ab2:	f018 0f01 	tst.w	r8, #1
 8007ab6:	d008      	beq.n	8007aca <_dtoa_r+0x3a2>
 8007ab8:	4630      	mov	r0, r6
 8007aba:	4639      	mov	r1, r7
 8007abc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007ac0:	f7f8 fd9a 	bl	80005f8 <__aeabi_dmul>
 8007ac4:	3501      	adds	r5, #1
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	460f      	mov	r7, r1
 8007aca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007ace:	f109 0908 	add.w	r9, r9, #8
 8007ad2:	e7e0      	b.n	8007a96 <_dtoa_r+0x36e>
 8007ad4:	f000 809f 	beq.w	8007c16 <_dtoa_r+0x4ee>
 8007ad8:	f1cb 0600 	rsb	r6, fp, #0
 8007adc:	4ba1      	ldr	r3, [pc, #644]	; (8007d64 <_dtoa_r+0x63c>)
 8007ade:	4fa2      	ldr	r7, [pc, #648]	; (8007d68 <_dtoa_r+0x640>)
 8007ae0:	f006 020f 	and.w	r2, r6, #15
 8007ae4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aec:	ec51 0b18 	vmov	r0, r1, d8
 8007af0:	f7f8 fd82 	bl	80005f8 <__aeabi_dmul>
 8007af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007af8:	1136      	asrs	r6, r6, #4
 8007afa:	2300      	movs	r3, #0
 8007afc:	2502      	movs	r5, #2
 8007afe:	2e00      	cmp	r6, #0
 8007b00:	d17e      	bne.n	8007c00 <_dtoa_r+0x4d8>
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1d0      	bne.n	8007aa8 <_dtoa_r+0x380>
 8007b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b08:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 8084 	beq.w	8007c1a <_dtoa_r+0x4f2>
 8007b12:	4b96      	ldr	r3, [pc, #600]	; (8007d6c <_dtoa_r+0x644>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	4640      	mov	r0, r8
 8007b18:	4649      	mov	r1, r9
 8007b1a:	f7f8 ffdf 	bl	8000adc <__aeabi_dcmplt>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d07b      	beq.n	8007c1a <_dtoa_r+0x4f2>
 8007b22:	9b04      	ldr	r3, [sp, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d078      	beq.n	8007c1a <_dtoa_r+0x4f2>
 8007b28:	9b01      	ldr	r3, [sp, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	dd39      	ble.n	8007ba2 <_dtoa_r+0x47a>
 8007b2e:	4b90      	ldr	r3, [pc, #576]	; (8007d70 <_dtoa_r+0x648>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	4640      	mov	r0, r8
 8007b34:	4649      	mov	r1, r9
 8007b36:	f7f8 fd5f 	bl	80005f8 <__aeabi_dmul>
 8007b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b3e:	9e01      	ldr	r6, [sp, #4]
 8007b40:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007b44:	3501      	adds	r5, #1
 8007b46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f7f8 fcea 	bl	8000524 <__aeabi_i2d>
 8007b50:	4642      	mov	r2, r8
 8007b52:	464b      	mov	r3, r9
 8007b54:	f7f8 fd50 	bl	80005f8 <__aeabi_dmul>
 8007b58:	4b86      	ldr	r3, [pc, #536]	; (8007d74 <_dtoa_r+0x64c>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f7f8 fb96 	bl	800028c <__adddf3>
 8007b60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b68:	9303      	str	r3, [sp, #12]
 8007b6a:	2e00      	cmp	r6, #0
 8007b6c:	d158      	bne.n	8007c20 <_dtoa_r+0x4f8>
 8007b6e:	4b82      	ldr	r3, [pc, #520]	; (8007d78 <_dtoa_r+0x650>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	4640      	mov	r0, r8
 8007b74:	4649      	mov	r1, r9
 8007b76:	f7f8 fb87 	bl	8000288 <__aeabi_dsub>
 8007b7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b7e:	4680      	mov	r8, r0
 8007b80:	4689      	mov	r9, r1
 8007b82:	f7f8 ffc9 	bl	8000b18 <__aeabi_dcmpgt>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	f040 8296 	bne.w	80080b8 <_dtoa_r+0x990>
 8007b8c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007b90:	4640      	mov	r0, r8
 8007b92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b96:	4649      	mov	r1, r9
 8007b98:	f7f8 ffa0 	bl	8000adc <__aeabi_dcmplt>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	f040 8289 	bne.w	80080b4 <_dtoa_r+0x98c>
 8007ba2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007ba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f2c0 814e 	blt.w	8007e4a <_dtoa_r+0x722>
 8007bae:	f1bb 0f0e 	cmp.w	fp, #14
 8007bb2:	f300 814a 	bgt.w	8007e4a <_dtoa_r+0x722>
 8007bb6:	4b6b      	ldr	r3, [pc, #428]	; (8007d64 <_dtoa_r+0x63c>)
 8007bb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007bbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f280 80dc 	bge.w	8007d80 <_dtoa_r+0x658>
 8007bc8:	9b04      	ldr	r3, [sp, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f300 80d8 	bgt.w	8007d80 <_dtoa_r+0x658>
 8007bd0:	f040 826f 	bne.w	80080b2 <_dtoa_r+0x98a>
 8007bd4:	4b68      	ldr	r3, [pc, #416]	; (8007d78 <_dtoa_r+0x650>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	4640      	mov	r0, r8
 8007bda:	4649      	mov	r1, r9
 8007bdc:	f7f8 fd0c 	bl	80005f8 <__aeabi_dmul>
 8007be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007be4:	f7f8 ff8e 	bl	8000b04 <__aeabi_dcmpge>
 8007be8:	9e04      	ldr	r6, [sp, #16]
 8007bea:	4637      	mov	r7, r6
 8007bec:	2800      	cmp	r0, #0
 8007bee:	f040 8245 	bne.w	800807c <_dtoa_r+0x954>
 8007bf2:	9d00      	ldr	r5, [sp, #0]
 8007bf4:	2331      	movs	r3, #49	; 0x31
 8007bf6:	f805 3b01 	strb.w	r3, [r5], #1
 8007bfa:	f10b 0b01 	add.w	fp, fp, #1
 8007bfe:	e241      	b.n	8008084 <_dtoa_r+0x95c>
 8007c00:	07f2      	lsls	r2, r6, #31
 8007c02:	d505      	bpl.n	8007c10 <_dtoa_r+0x4e8>
 8007c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c08:	f7f8 fcf6 	bl	80005f8 <__aeabi_dmul>
 8007c0c:	3501      	adds	r5, #1
 8007c0e:	2301      	movs	r3, #1
 8007c10:	1076      	asrs	r6, r6, #1
 8007c12:	3708      	adds	r7, #8
 8007c14:	e773      	b.n	8007afe <_dtoa_r+0x3d6>
 8007c16:	2502      	movs	r5, #2
 8007c18:	e775      	b.n	8007b06 <_dtoa_r+0x3de>
 8007c1a:	9e04      	ldr	r6, [sp, #16]
 8007c1c:	465f      	mov	r7, fp
 8007c1e:	e792      	b.n	8007b46 <_dtoa_r+0x41e>
 8007c20:	9900      	ldr	r1, [sp, #0]
 8007c22:	4b50      	ldr	r3, [pc, #320]	; (8007d64 <_dtoa_r+0x63c>)
 8007c24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c28:	4431      	add	r1, r6
 8007c2a:	9102      	str	r1, [sp, #8]
 8007c2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c2e:	eeb0 9a47 	vmov.f32	s18, s14
 8007c32:	eef0 9a67 	vmov.f32	s19, s15
 8007c36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c3e:	2900      	cmp	r1, #0
 8007c40:	d044      	beq.n	8007ccc <_dtoa_r+0x5a4>
 8007c42:	494e      	ldr	r1, [pc, #312]	; (8007d7c <_dtoa_r+0x654>)
 8007c44:	2000      	movs	r0, #0
 8007c46:	f7f8 fe01 	bl	800084c <__aeabi_ddiv>
 8007c4a:	ec53 2b19 	vmov	r2, r3, d9
 8007c4e:	f7f8 fb1b 	bl	8000288 <__aeabi_dsub>
 8007c52:	9d00      	ldr	r5, [sp, #0]
 8007c54:	ec41 0b19 	vmov	d9, r0, r1
 8007c58:	4649      	mov	r1, r9
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	f7f8 ff7c 	bl	8000b58 <__aeabi_d2iz>
 8007c60:	4606      	mov	r6, r0
 8007c62:	f7f8 fc5f 	bl	8000524 <__aeabi_i2d>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4640      	mov	r0, r8
 8007c6c:	4649      	mov	r1, r9
 8007c6e:	f7f8 fb0b 	bl	8000288 <__aeabi_dsub>
 8007c72:	3630      	adds	r6, #48	; 0x30
 8007c74:	f805 6b01 	strb.w	r6, [r5], #1
 8007c78:	ec53 2b19 	vmov	r2, r3, d9
 8007c7c:	4680      	mov	r8, r0
 8007c7e:	4689      	mov	r9, r1
 8007c80:	f7f8 ff2c 	bl	8000adc <__aeabi_dcmplt>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d164      	bne.n	8007d52 <_dtoa_r+0x62a>
 8007c88:	4642      	mov	r2, r8
 8007c8a:	464b      	mov	r3, r9
 8007c8c:	4937      	ldr	r1, [pc, #220]	; (8007d6c <_dtoa_r+0x644>)
 8007c8e:	2000      	movs	r0, #0
 8007c90:	f7f8 fafa 	bl	8000288 <__aeabi_dsub>
 8007c94:	ec53 2b19 	vmov	r2, r3, d9
 8007c98:	f7f8 ff20 	bl	8000adc <__aeabi_dcmplt>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	f040 80b6 	bne.w	8007e0e <_dtoa_r+0x6e6>
 8007ca2:	9b02      	ldr	r3, [sp, #8]
 8007ca4:	429d      	cmp	r5, r3
 8007ca6:	f43f af7c 	beq.w	8007ba2 <_dtoa_r+0x47a>
 8007caa:	4b31      	ldr	r3, [pc, #196]	; (8007d70 <_dtoa_r+0x648>)
 8007cac:	ec51 0b19 	vmov	r0, r1, d9
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f7f8 fca1 	bl	80005f8 <__aeabi_dmul>
 8007cb6:	4b2e      	ldr	r3, [pc, #184]	; (8007d70 <_dtoa_r+0x648>)
 8007cb8:	ec41 0b19 	vmov	d9, r0, r1
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	4640      	mov	r0, r8
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	f7f8 fc99 	bl	80005f8 <__aeabi_dmul>
 8007cc6:	4680      	mov	r8, r0
 8007cc8:	4689      	mov	r9, r1
 8007cca:	e7c5      	b.n	8007c58 <_dtoa_r+0x530>
 8007ccc:	ec51 0b17 	vmov	r0, r1, d7
 8007cd0:	f7f8 fc92 	bl	80005f8 <__aeabi_dmul>
 8007cd4:	9b02      	ldr	r3, [sp, #8]
 8007cd6:	9d00      	ldr	r5, [sp, #0]
 8007cd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cda:	ec41 0b19 	vmov	d9, r0, r1
 8007cde:	4649      	mov	r1, r9
 8007ce0:	4640      	mov	r0, r8
 8007ce2:	f7f8 ff39 	bl	8000b58 <__aeabi_d2iz>
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	f7f8 fc1c 	bl	8000524 <__aeabi_i2d>
 8007cec:	3630      	adds	r6, #48	; 0x30
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	f7f8 fac7 	bl	8000288 <__aeabi_dsub>
 8007cfa:	f805 6b01 	strb.w	r6, [r5], #1
 8007cfe:	9b02      	ldr	r3, [sp, #8]
 8007d00:	429d      	cmp	r5, r3
 8007d02:	4680      	mov	r8, r0
 8007d04:	4689      	mov	r9, r1
 8007d06:	f04f 0200 	mov.w	r2, #0
 8007d0a:	d124      	bne.n	8007d56 <_dtoa_r+0x62e>
 8007d0c:	4b1b      	ldr	r3, [pc, #108]	; (8007d7c <_dtoa_r+0x654>)
 8007d0e:	ec51 0b19 	vmov	r0, r1, d9
 8007d12:	f7f8 fabb 	bl	800028c <__adddf3>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4640      	mov	r0, r8
 8007d1c:	4649      	mov	r1, r9
 8007d1e:	f7f8 fefb 	bl	8000b18 <__aeabi_dcmpgt>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d173      	bne.n	8007e0e <_dtoa_r+0x6e6>
 8007d26:	ec53 2b19 	vmov	r2, r3, d9
 8007d2a:	4914      	ldr	r1, [pc, #80]	; (8007d7c <_dtoa_r+0x654>)
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	f7f8 faab 	bl	8000288 <__aeabi_dsub>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4640      	mov	r0, r8
 8007d38:	4649      	mov	r1, r9
 8007d3a:	f7f8 fecf 	bl	8000adc <__aeabi_dcmplt>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	f43f af2f 	beq.w	8007ba2 <_dtoa_r+0x47a>
 8007d44:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d46:	1e6b      	subs	r3, r5, #1
 8007d48:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d4e:	2b30      	cmp	r3, #48	; 0x30
 8007d50:	d0f8      	beq.n	8007d44 <_dtoa_r+0x61c>
 8007d52:	46bb      	mov	fp, r7
 8007d54:	e04a      	b.n	8007dec <_dtoa_r+0x6c4>
 8007d56:	4b06      	ldr	r3, [pc, #24]	; (8007d70 <_dtoa_r+0x648>)
 8007d58:	f7f8 fc4e 	bl	80005f8 <__aeabi_dmul>
 8007d5c:	4680      	mov	r8, r0
 8007d5e:	4689      	mov	r9, r1
 8007d60:	e7bd      	b.n	8007cde <_dtoa_r+0x5b6>
 8007d62:	bf00      	nop
 8007d64:	08009688 	.word	0x08009688
 8007d68:	08009660 	.word	0x08009660
 8007d6c:	3ff00000 	.word	0x3ff00000
 8007d70:	40240000 	.word	0x40240000
 8007d74:	401c0000 	.word	0x401c0000
 8007d78:	40140000 	.word	0x40140000
 8007d7c:	3fe00000 	.word	0x3fe00000
 8007d80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d84:	9d00      	ldr	r5, [sp, #0]
 8007d86:	4642      	mov	r2, r8
 8007d88:	464b      	mov	r3, r9
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	4639      	mov	r1, r7
 8007d8e:	f7f8 fd5d 	bl	800084c <__aeabi_ddiv>
 8007d92:	f7f8 fee1 	bl	8000b58 <__aeabi_d2iz>
 8007d96:	9001      	str	r0, [sp, #4]
 8007d98:	f7f8 fbc4 	bl	8000524 <__aeabi_i2d>
 8007d9c:	4642      	mov	r2, r8
 8007d9e:	464b      	mov	r3, r9
 8007da0:	f7f8 fc2a 	bl	80005f8 <__aeabi_dmul>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4630      	mov	r0, r6
 8007daa:	4639      	mov	r1, r7
 8007dac:	f7f8 fa6c 	bl	8000288 <__aeabi_dsub>
 8007db0:	9e01      	ldr	r6, [sp, #4]
 8007db2:	9f04      	ldr	r7, [sp, #16]
 8007db4:	3630      	adds	r6, #48	; 0x30
 8007db6:	f805 6b01 	strb.w	r6, [r5], #1
 8007dba:	9e00      	ldr	r6, [sp, #0]
 8007dbc:	1bae      	subs	r6, r5, r6
 8007dbe:	42b7      	cmp	r7, r6
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	d134      	bne.n	8007e30 <_dtoa_r+0x708>
 8007dc6:	f7f8 fa61 	bl	800028c <__adddf3>
 8007dca:	4642      	mov	r2, r8
 8007dcc:	464b      	mov	r3, r9
 8007dce:	4606      	mov	r6, r0
 8007dd0:	460f      	mov	r7, r1
 8007dd2:	f7f8 fea1 	bl	8000b18 <__aeabi_dcmpgt>
 8007dd6:	b9c8      	cbnz	r0, 8007e0c <_dtoa_r+0x6e4>
 8007dd8:	4642      	mov	r2, r8
 8007dda:	464b      	mov	r3, r9
 8007ddc:	4630      	mov	r0, r6
 8007dde:	4639      	mov	r1, r7
 8007de0:	f7f8 fe72 	bl	8000ac8 <__aeabi_dcmpeq>
 8007de4:	b110      	cbz	r0, 8007dec <_dtoa_r+0x6c4>
 8007de6:	9b01      	ldr	r3, [sp, #4]
 8007de8:	07db      	lsls	r3, r3, #31
 8007dea:	d40f      	bmi.n	8007e0c <_dtoa_r+0x6e4>
 8007dec:	4651      	mov	r1, sl
 8007dee:	4620      	mov	r0, r4
 8007df0:	f000 fb18 	bl	8008424 <_Bfree>
 8007df4:	2300      	movs	r3, #0
 8007df6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007df8:	702b      	strb	r3, [r5, #0]
 8007dfa:	f10b 0301 	add.w	r3, fp, #1
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f43f ace2 	beq.w	80077cc <_dtoa_r+0xa4>
 8007e08:	601d      	str	r5, [r3, #0]
 8007e0a:	e4df      	b.n	80077cc <_dtoa_r+0xa4>
 8007e0c:	465f      	mov	r7, fp
 8007e0e:	462b      	mov	r3, r5
 8007e10:	461d      	mov	r5, r3
 8007e12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e16:	2a39      	cmp	r2, #57	; 0x39
 8007e18:	d106      	bne.n	8007e28 <_dtoa_r+0x700>
 8007e1a:	9a00      	ldr	r2, [sp, #0]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d1f7      	bne.n	8007e10 <_dtoa_r+0x6e8>
 8007e20:	9900      	ldr	r1, [sp, #0]
 8007e22:	2230      	movs	r2, #48	; 0x30
 8007e24:	3701      	adds	r7, #1
 8007e26:	700a      	strb	r2, [r1, #0]
 8007e28:	781a      	ldrb	r2, [r3, #0]
 8007e2a:	3201      	adds	r2, #1
 8007e2c:	701a      	strb	r2, [r3, #0]
 8007e2e:	e790      	b.n	8007d52 <_dtoa_r+0x62a>
 8007e30:	4ba3      	ldr	r3, [pc, #652]	; (80080c0 <_dtoa_r+0x998>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	f7f8 fbe0 	bl	80005f8 <__aeabi_dmul>
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	460f      	mov	r7, r1
 8007e40:	f7f8 fe42 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d09e      	beq.n	8007d86 <_dtoa_r+0x65e>
 8007e48:	e7d0      	b.n	8007dec <_dtoa_r+0x6c4>
 8007e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e4c:	2a00      	cmp	r2, #0
 8007e4e:	f000 80ca 	beq.w	8007fe6 <_dtoa_r+0x8be>
 8007e52:	9a07      	ldr	r2, [sp, #28]
 8007e54:	2a01      	cmp	r2, #1
 8007e56:	f300 80ad 	bgt.w	8007fb4 <_dtoa_r+0x88c>
 8007e5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e5c:	2a00      	cmp	r2, #0
 8007e5e:	f000 80a5 	beq.w	8007fac <_dtoa_r+0x884>
 8007e62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e66:	9e08      	ldr	r6, [sp, #32]
 8007e68:	9d05      	ldr	r5, [sp, #20]
 8007e6a:	9a05      	ldr	r2, [sp, #20]
 8007e6c:	441a      	add	r2, r3
 8007e6e:	9205      	str	r2, [sp, #20]
 8007e70:	9a06      	ldr	r2, [sp, #24]
 8007e72:	2101      	movs	r1, #1
 8007e74:	441a      	add	r2, r3
 8007e76:	4620      	mov	r0, r4
 8007e78:	9206      	str	r2, [sp, #24]
 8007e7a:	f000 fb89 	bl	8008590 <__i2b>
 8007e7e:	4607      	mov	r7, r0
 8007e80:	b165      	cbz	r5, 8007e9c <_dtoa_r+0x774>
 8007e82:	9b06      	ldr	r3, [sp, #24]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	dd09      	ble.n	8007e9c <_dtoa_r+0x774>
 8007e88:	42ab      	cmp	r3, r5
 8007e8a:	9a05      	ldr	r2, [sp, #20]
 8007e8c:	bfa8      	it	ge
 8007e8e:	462b      	movge	r3, r5
 8007e90:	1ad2      	subs	r2, r2, r3
 8007e92:	9205      	str	r2, [sp, #20]
 8007e94:	9a06      	ldr	r2, [sp, #24]
 8007e96:	1aed      	subs	r5, r5, r3
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	9306      	str	r3, [sp, #24]
 8007e9c:	9b08      	ldr	r3, [sp, #32]
 8007e9e:	b1f3      	cbz	r3, 8007ede <_dtoa_r+0x7b6>
 8007ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 80a3 	beq.w	8007fee <_dtoa_r+0x8c6>
 8007ea8:	2e00      	cmp	r6, #0
 8007eaa:	dd10      	ble.n	8007ece <_dtoa_r+0x7a6>
 8007eac:	4639      	mov	r1, r7
 8007eae:	4632      	mov	r2, r6
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f000 fc2d 	bl	8008710 <__pow5mult>
 8007eb6:	4652      	mov	r2, sl
 8007eb8:	4601      	mov	r1, r0
 8007eba:	4607      	mov	r7, r0
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f000 fb7d 	bl	80085bc <__multiply>
 8007ec2:	4651      	mov	r1, sl
 8007ec4:	4680      	mov	r8, r0
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f000 faac 	bl	8008424 <_Bfree>
 8007ecc:	46c2      	mov	sl, r8
 8007ece:	9b08      	ldr	r3, [sp, #32]
 8007ed0:	1b9a      	subs	r2, r3, r6
 8007ed2:	d004      	beq.n	8007ede <_dtoa_r+0x7b6>
 8007ed4:	4651      	mov	r1, sl
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f000 fc1a 	bl	8008710 <__pow5mult>
 8007edc:	4682      	mov	sl, r0
 8007ede:	2101      	movs	r1, #1
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f000 fb55 	bl	8008590 <__i2b>
 8007ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	4606      	mov	r6, r0
 8007eec:	f340 8081 	ble.w	8007ff2 <_dtoa_r+0x8ca>
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	4601      	mov	r1, r0
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f000 fc0b 	bl	8008710 <__pow5mult>
 8007efa:	9b07      	ldr	r3, [sp, #28]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	4606      	mov	r6, r0
 8007f00:	dd7a      	ble.n	8007ff8 <_dtoa_r+0x8d0>
 8007f02:	f04f 0800 	mov.w	r8, #0
 8007f06:	6933      	ldr	r3, [r6, #16]
 8007f08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f0c:	6918      	ldr	r0, [r3, #16]
 8007f0e:	f000 faf1 	bl	80084f4 <__hi0bits>
 8007f12:	f1c0 0020 	rsb	r0, r0, #32
 8007f16:	9b06      	ldr	r3, [sp, #24]
 8007f18:	4418      	add	r0, r3
 8007f1a:	f010 001f 	ands.w	r0, r0, #31
 8007f1e:	f000 8094 	beq.w	800804a <_dtoa_r+0x922>
 8007f22:	f1c0 0320 	rsb	r3, r0, #32
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	f340 8085 	ble.w	8008036 <_dtoa_r+0x90e>
 8007f2c:	9b05      	ldr	r3, [sp, #20]
 8007f2e:	f1c0 001c 	rsb	r0, r0, #28
 8007f32:	4403      	add	r3, r0
 8007f34:	9305      	str	r3, [sp, #20]
 8007f36:	9b06      	ldr	r3, [sp, #24]
 8007f38:	4403      	add	r3, r0
 8007f3a:	4405      	add	r5, r0
 8007f3c:	9306      	str	r3, [sp, #24]
 8007f3e:	9b05      	ldr	r3, [sp, #20]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	dd05      	ble.n	8007f50 <_dtoa_r+0x828>
 8007f44:	4651      	mov	r1, sl
 8007f46:	461a      	mov	r2, r3
 8007f48:	4620      	mov	r0, r4
 8007f4a:	f000 fc3b 	bl	80087c4 <__lshift>
 8007f4e:	4682      	mov	sl, r0
 8007f50:	9b06      	ldr	r3, [sp, #24]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	dd05      	ble.n	8007f62 <_dtoa_r+0x83a>
 8007f56:	4631      	mov	r1, r6
 8007f58:	461a      	mov	r2, r3
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f000 fc32 	bl	80087c4 <__lshift>
 8007f60:	4606      	mov	r6, r0
 8007f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d072      	beq.n	800804e <_dtoa_r+0x926>
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4650      	mov	r0, sl
 8007f6c:	f000 fc96 	bl	800889c <__mcmp>
 8007f70:	2800      	cmp	r0, #0
 8007f72:	da6c      	bge.n	800804e <_dtoa_r+0x926>
 8007f74:	2300      	movs	r3, #0
 8007f76:	4651      	mov	r1, sl
 8007f78:	220a      	movs	r2, #10
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 fa74 	bl	8008468 <__multadd>
 8007f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f86:	4682      	mov	sl, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f000 81b0 	beq.w	80082ee <_dtoa_r+0xbc6>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	4639      	mov	r1, r7
 8007f92:	220a      	movs	r2, #10
 8007f94:	4620      	mov	r0, r4
 8007f96:	f000 fa67 	bl	8008468 <__multadd>
 8007f9a:	9b01      	ldr	r3, [sp, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	f300 8096 	bgt.w	80080d0 <_dtoa_r+0x9a8>
 8007fa4:	9b07      	ldr	r3, [sp, #28]
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	dc59      	bgt.n	800805e <_dtoa_r+0x936>
 8007faa:	e091      	b.n	80080d0 <_dtoa_r+0x9a8>
 8007fac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fb2:	e758      	b.n	8007e66 <_dtoa_r+0x73e>
 8007fb4:	9b04      	ldr	r3, [sp, #16]
 8007fb6:	1e5e      	subs	r6, r3, #1
 8007fb8:	9b08      	ldr	r3, [sp, #32]
 8007fba:	42b3      	cmp	r3, r6
 8007fbc:	bfbf      	itttt	lt
 8007fbe:	9b08      	ldrlt	r3, [sp, #32]
 8007fc0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007fc2:	9608      	strlt	r6, [sp, #32]
 8007fc4:	1af3      	sublt	r3, r6, r3
 8007fc6:	bfb4      	ite	lt
 8007fc8:	18d2      	addlt	r2, r2, r3
 8007fca:	1b9e      	subge	r6, r3, r6
 8007fcc:	9b04      	ldr	r3, [sp, #16]
 8007fce:	bfbc      	itt	lt
 8007fd0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007fd2:	2600      	movlt	r6, #0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	bfb7      	itett	lt
 8007fd8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007fdc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007fe0:	1a9d      	sublt	r5, r3, r2
 8007fe2:	2300      	movlt	r3, #0
 8007fe4:	e741      	b.n	8007e6a <_dtoa_r+0x742>
 8007fe6:	9e08      	ldr	r6, [sp, #32]
 8007fe8:	9d05      	ldr	r5, [sp, #20]
 8007fea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007fec:	e748      	b.n	8007e80 <_dtoa_r+0x758>
 8007fee:	9a08      	ldr	r2, [sp, #32]
 8007ff0:	e770      	b.n	8007ed4 <_dtoa_r+0x7ac>
 8007ff2:	9b07      	ldr	r3, [sp, #28]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	dc19      	bgt.n	800802c <_dtoa_r+0x904>
 8007ff8:	9b02      	ldr	r3, [sp, #8]
 8007ffa:	b9bb      	cbnz	r3, 800802c <_dtoa_r+0x904>
 8007ffc:	9b03      	ldr	r3, [sp, #12]
 8007ffe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008002:	b99b      	cbnz	r3, 800802c <_dtoa_r+0x904>
 8008004:	9b03      	ldr	r3, [sp, #12]
 8008006:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800800a:	0d1b      	lsrs	r3, r3, #20
 800800c:	051b      	lsls	r3, r3, #20
 800800e:	b183      	cbz	r3, 8008032 <_dtoa_r+0x90a>
 8008010:	9b05      	ldr	r3, [sp, #20]
 8008012:	3301      	adds	r3, #1
 8008014:	9305      	str	r3, [sp, #20]
 8008016:	9b06      	ldr	r3, [sp, #24]
 8008018:	3301      	adds	r3, #1
 800801a:	9306      	str	r3, [sp, #24]
 800801c:	f04f 0801 	mov.w	r8, #1
 8008020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008022:	2b00      	cmp	r3, #0
 8008024:	f47f af6f 	bne.w	8007f06 <_dtoa_r+0x7de>
 8008028:	2001      	movs	r0, #1
 800802a:	e774      	b.n	8007f16 <_dtoa_r+0x7ee>
 800802c:	f04f 0800 	mov.w	r8, #0
 8008030:	e7f6      	b.n	8008020 <_dtoa_r+0x8f8>
 8008032:	4698      	mov	r8, r3
 8008034:	e7f4      	b.n	8008020 <_dtoa_r+0x8f8>
 8008036:	d082      	beq.n	8007f3e <_dtoa_r+0x816>
 8008038:	9a05      	ldr	r2, [sp, #20]
 800803a:	331c      	adds	r3, #28
 800803c:	441a      	add	r2, r3
 800803e:	9205      	str	r2, [sp, #20]
 8008040:	9a06      	ldr	r2, [sp, #24]
 8008042:	441a      	add	r2, r3
 8008044:	441d      	add	r5, r3
 8008046:	9206      	str	r2, [sp, #24]
 8008048:	e779      	b.n	8007f3e <_dtoa_r+0x816>
 800804a:	4603      	mov	r3, r0
 800804c:	e7f4      	b.n	8008038 <_dtoa_r+0x910>
 800804e:	9b04      	ldr	r3, [sp, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	dc37      	bgt.n	80080c4 <_dtoa_r+0x99c>
 8008054:	9b07      	ldr	r3, [sp, #28]
 8008056:	2b02      	cmp	r3, #2
 8008058:	dd34      	ble.n	80080c4 <_dtoa_r+0x99c>
 800805a:	9b04      	ldr	r3, [sp, #16]
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	9b01      	ldr	r3, [sp, #4]
 8008060:	b963      	cbnz	r3, 800807c <_dtoa_r+0x954>
 8008062:	4631      	mov	r1, r6
 8008064:	2205      	movs	r2, #5
 8008066:	4620      	mov	r0, r4
 8008068:	f000 f9fe 	bl	8008468 <__multadd>
 800806c:	4601      	mov	r1, r0
 800806e:	4606      	mov	r6, r0
 8008070:	4650      	mov	r0, sl
 8008072:	f000 fc13 	bl	800889c <__mcmp>
 8008076:	2800      	cmp	r0, #0
 8008078:	f73f adbb 	bgt.w	8007bf2 <_dtoa_r+0x4ca>
 800807c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800807e:	9d00      	ldr	r5, [sp, #0]
 8008080:	ea6f 0b03 	mvn.w	fp, r3
 8008084:	f04f 0800 	mov.w	r8, #0
 8008088:	4631      	mov	r1, r6
 800808a:	4620      	mov	r0, r4
 800808c:	f000 f9ca 	bl	8008424 <_Bfree>
 8008090:	2f00      	cmp	r7, #0
 8008092:	f43f aeab 	beq.w	8007dec <_dtoa_r+0x6c4>
 8008096:	f1b8 0f00 	cmp.w	r8, #0
 800809a:	d005      	beq.n	80080a8 <_dtoa_r+0x980>
 800809c:	45b8      	cmp	r8, r7
 800809e:	d003      	beq.n	80080a8 <_dtoa_r+0x980>
 80080a0:	4641      	mov	r1, r8
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 f9be 	bl	8008424 <_Bfree>
 80080a8:	4639      	mov	r1, r7
 80080aa:	4620      	mov	r0, r4
 80080ac:	f000 f9ba 	bl	8008424 <_Bfree>
 80080b0:	e69c      	b.n	8007dec <_dtoa_r+0x6c4>
 80080b2:	2600      	movs	r6, #0
 80080b4:	4637      	mov	r7, r6
 80080b6:	e7e1      	b.n	800807c <_dtoa_r+0x954>
 80080b8:	46bb      	mov	fp, r7
 80080ba:	4637      	mov	r7, r6
 80080bc:	e599      	b.n	8007bf2 <_dtoa_r+0x4ca>
 80080be:	bf00      	nop
 80080c0:	40240000 	.word	0x40240000
 80080c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f000 80c8 	beq.w	800825c <_dtoa_r+0xb34>
 80080cc:	9b04      	ldr	r3, [sp, #16]
 80080ce:	9301      	str	r3, [sp, #4]
 80080d0:	2d00      	cmp	r5, #0
 80080d2:	dd05      	ble.n	80080e0 <_dtoa_r+0x9b8>
 80080d4:	4639      	mov	r1, r7
 80080d6:	462a      	mov	r2, r5
 80080d8:	4620      	mov	r0, r4
 80080da:	f000 fb73 	bl	80087c4 <__lshift>
 80080de:	4607      	mov	r7, r0
 80080e0:	f1b8 0f00 	cmp.w	r8, #0
 80080e4:	d05b      	beq.n	800819e <_dtoa_r+0xa76>
 80080e6:	6879      	ldr	r1, [r7, #4]
 80080e8:	4620      	mov	r0, r4
 80080ea:	f000 f95b 	bl	80083a4 <_Balloc>
 80080ee:	4605      	mov	r5, r0
 80080f0:	b928      	cbnz	r0, 80080fe <_dtoa_r+0x9d6>
 80080f2:	4b83      	ldr	r3, [pc, #524]	; (8008300 <_dtoa_r+0xbd8>)
 80080f4:	4602      	mov	r2, r0
 80080f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80080fa:	f7ff bb2e 	b.w	800775a <_dtoa_r+0x32>
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	3202      	adds	r2, #2
 8008102:	0092      	lsls	r2, r2, #2
 8008104:	f107 010c 	add.w	r1, r7, #12
 8008108:	300c      	adds	r0, #12
 800810a:	f7ff fa75 	bl	80075f8 <memcpy>
 800810e:	2201      	movs	r2, #1
 8008110:	4629      	mov	r1, r5
 8008112:	4620      	mov	r0, r4
 8008114:	f000 fb56 	bl	80087c4 <__lshift>
 8008118:	9b00      	ldr	r3, [sp, #0]
 800811a:	3301      	adds	r3, #1
 800811c:	9304      	str	r3, [sp, #16]
 800811e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008122:	4413      	add	r3, r2
 8008124:	9308      	str	r3, [sp, #32]
 8008126:	9b02      	ldr	r3, [sp, #8]
 8008128:	f003 0301 	and.w	r3, r3, #1
 800812c:	46b8      	mov	r8, r7
 800812e:	9306      	str	r3, [sp, #24]
 8008130:	4607      	mov	r7, r0
 8008132:	9b04      	ldr	r3, [sp, #16]
 8008134:	4631      	mov	r1, r6
 8008136:	3b01      	subs	r3, #1
 8008138:	4650      	mov	r0, sl
 800813a:	9301      	str	r3, [sp, #4]
 800813c:	f7ff fa6a 	bl	8007614 <quorem>
 8008140:	4641      	mov	r1, r8
 8008142:	9002      	str	r0, [sp, #8]
 8008144:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008148:	4650      	mov	r0, sl
 800814a:	f000 fba7 	bl	800889c <__mcmp>
 800814e:	463a      	mov	r2, r7
 8008150:	9005      	str	r0, [sp, #20]
 8008152:	4631      	mov	r1, r6
 8008154:	4620      	mov	r0, r4
 8008156:	f000 fbbd 	bl	80088d4 <__mdiff>
 800815a:	68c2      	ldr	r2, [r0, #12]
 800815c:	4605      	mov	r5, r0
 800815e:	bb02      	cbnz	r2, 80081a2 <_dtoa_r+0xa7a>
 8008160:	4601      	mov	r1, r0
 8008162:	4650      	mov	r0, sl
 8008164:	f000 fb9a 	bl	800889c <__mcmp>
 8008168:	4602      	mov	r2, r0
 800816a:	4629      	mov	r1, r5
 800816c:	4620      	mov	r0, r4
 800816e:	9209      	str	r2, [sp, #36]	; 0x24
 8008170:	f000 f958 	bl	8008424 <_Bfree>
 8008174:	9b07      	ldr	r3, [sp, #28]
 8008176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008178:	9d04      	ldr	r5, [sp, #16]
 800817a:	ea43 0102 	orr.w	r1, r3, r2
 800817e:	9b06      	ldr	r3, [sp, #24]
 8008180:	4319      	orrs	r1, r3
 8008182:	d110      	bne.n	80081a6 <_dtoa_r+0xa7e>
 8008184:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008188:	d029      	beq.n	80081de <_dtoa_r+0xab6>
 800818a:	9b05      	ldr	r3, [sp, #20]
 800818c:	2b00      	cmp	r3, #0
 800818e:	dd02      	ble.n	8008196 <_dtoa_r+0xa6e>
 8008190:	9b02      	ldr	r3, [sp, #8]
 8008192:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008196:	9b01      	ldr	r3, [sp, #4]
 8008198:	f883 9000 	strb.w	r9, [r3]
 800819c:	e774      	b.n	8008088 <_dtoa_r+0x960>
 800819e:	4638      	mov	r0, r7
 80081a0:	e7ba      	b.n	8008118 <_dtoa_r+0x9f0>
 80081a2:	2201      	movs	r2, #1
 80081a4:	e7e1      	b.n	800816a <_dtoa_r+0xa42>
 80081a6:	9b05      	ldr	r3, [sp, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	db04      	blt.n	80081b6 <_dtoa_r+0xa8e>
 80081ac:	9907      	ldr	r1, [sp, #28]
 80081ae:	430b      	orrs	r3, r1
 80081b0:	9906      	ldr	r1, [sp, #24]
 80081b2:	430b      	orrs	r3, r1
 80081b4:	d120      	bne.n	80081f8 <_dtoa_r+0xad0>
 80081b6:	2a00      	cmp	r2, #0
 80081b8:	dded      	ble.n	8008196 <_dtoa_r+0xa6e>
 80081ba:	4651      	mov	r1, sl
 80081bc:	2201      	movs	r2, #1
 80081be:	4620      	mov	r0, r4
 80081c0:	f000 fb00 	bl	80087c4 <__lshift>
 80081c4:	4631      	mov	r1, r6
 80081c6:	4682      	mov	sl, r0
 80081c8:	f000 fb68 	bl	800889c <__mcmp>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	dc03      	bgt.n	80081d8 <_dtoa_r+0xab0>
 80081d0:	d1e1      	bne.n	8008196 <_dtoa_r+0xa6e>
 80081d2:	f019 0f01 	tst.w	r9, #1
 80081d6:	d0de      	beq.n	8008196 <_dtoa_r+0xa6e>
 80081d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081dc:	d1d8      	bne.n	8008190 <_dtoa_r+0xa68>
 80081de:	9a01      	ldr	r2, [sp, #4]
 80081e0:	2339      	movs	r3, #57	; 0x39
 80081e2:	7013      	strb	r3, [r2, #0]
 80081e4:	462b      	mov	r3, r5
 80081e6:	461d      	mov	r5, r3
 80081e8:	3b01      	subs	r3, #1
 80081ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80081ee:	2a39      	cmp	r2, #57	; 0x39
 80081f0:	d06c      	beq.n	80082cc <_dtoa_r+0xba4>
 80081f2:	3201      	adds	r2, #1
 80081f4:	701a      	strb	r2, [r3, #0]
 80081f6:	e747      	b.n	8008088 <_dtoa_r+0x960>
 80081f8:	2a00      	cmp	r2, #0
 80081fa:	dd07      	ble.n	800820c <_dtoa_r+0xae4>
 80081fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008200:	d0ed      	beq.n	80081de <_dtoa_r+0xab6>
 8008202:	9a01      	ldr	r2, [sp, #4]
 8008204:	f109 0301 	add.w	r3, r9, #1
 8008208:	7013      	strb	r3, [r2, #0]
 800820a:	e73d      	b.n	8008088 <_dtoa_r+0x960>
 800820c:	9b04      	ldr	r3, [sp, #16]
 800820e:	9a08      	ldr	r2, [sp, #32]
 8008210:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008214:	4293      	cmp	r3, r2
 8008216:	d043      	beq.n	80082a0 <_dtoa_r+0xb78>
 8008218:	4651      	mov	r1, sl
 800821a:	2300      	movs	r3, #0
 800821c:	220a      	movs	r2, #10
 800821e:	4620      	mov	r0, r4
 8008220:	f000 f922 	bl	8008468 <__multadd>
 8008224:	45b8      	cmp	r8, r7
 8008226:	4682      	mov	sl, r0
 8008228:	f04f 0300 	mov.w	r3, #0
 800822c:	f04f 020a 	mov.w	r2, #10
 8008230:	4641      	mov	r1, r8
 8008232:	4620      	mov	r0, r4
 8008234:	d107      	bne.n	8008246 <_dtoa_r+0xb1e>
 8008236:	f000 f917 	bl	8008468 <__multadd>
 800823a:	4680      	mov	r8, r0
 800823c:	4607      	mov	r7, r0
 800823e:	9b04      	ldr	r3, [sp, #16]
 8008240:	3301      	adds	r3, #1
 8008242:	9304      	str	r3, [sp, #16]
 8008244:	e775      	b.n	8008132 <_dtoa_r+0xa0a>
 8008246:	f000 f90f 	bl	8008468 <__multadd>
 800824a:	4639      	mov	r1, r7
 800824c:	4680      	mov	r8, r0
 800824e:	2300      	movs	r3, #0
 8008250:	220a      	movs	r2, #10
 8008252:	4620      	mov	r0, r4
 8008254:	f000 f908 	bl	8008468 <__multadd>
 8008258:	4607      	mov	r7, r0
 800825a:	e7f0      	b.n	800823e <_dtoa_r+0xb16>
 800825c:	9b04      	ldr	r3, [sp, #16]
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	9d00      	ldr	r5, [sp, #0]
 8008262:	4631      	mov	r1, r6
 8008264:	4650      	mov	r0, sl
 8008266:	f7ff f9d5 	bl	8007614 <quorem>
 800826a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800826e:	9b00      	ldr	r3, [sp, #0]
 8008270:	f805 9b01 	strb.w	r9, [r5], #1
 8008274:	1aea      	subs	r2, r5, r3
 8008276:	9b01      	ldr	r3, [sp, #4]
 8008278:	4293      	cmp	r3, r2
 800827a:	dd07      	ble.n	800828c <_dtoa_r+0xb64>
 800827c:	4651      	mov	r1, sl
 800827e:	2300      	movs	r3, #0
 8008280:	220a      	movs	r2, #10
 8008282:	4620      	mov	r0, r4
 8008284:	f000 f8f0 	bl	8008468 <__multadd>
 8008288:	4682      	mov	sl, r0
 800828a:	e7ea      	b.n	8008262 <_dtoa_r+0xb3a>
 800828c:	9b01      	ldr	r3, [sp, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	bfc8      	it	gt
 8008292:	461d      	movgt	r5, r3
 8008294:	9b00      	ldr	r3, [sp, #0]
 8008296:	bfd8      	it	le
 8008298:	2501      	movle	r5, #1
 800829a:	441d      	add	r5, r3
 800829c:	f04f 0800 	mov.w	r8, #0
 80082a0:	4651      	mov	r1, sl
 80082a2:	2201      	movs	r2, #1
 80082a4:	4620      	mov	r0, r4
 80082a6:	f000 fa8d 	bl	80087c4 <__lshift>
 80082aa:	4631      	mov	r1, r6
 80082ac:	4682      	mov	sl, r0
 80082ae:	f000 faf5 	bl	800889c <__mcmp>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	dc96      	bgt.n	80081e4 <_dtoa_r+0xabc>
 80082b6:	d102      	bne.n	80082be <_dtoa_r+0xb96>
 80082b8:	f019 0f01 	tst.w	r9, #1
 80082bc:	d192      	bne.n	80081e4 <_dtoa_r+0xabc>
 80082be:	462b      	mov	r3, r5
 80082c0:	461d      	mov	r5, r3
 80082c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082c6:	2a30      	cmp	r2, #48	; 0x30
 80082c8:	d0fa      	beq.n	80082c0 <_dtoa_r+0xb98>
 80082ca:	e6dd      	b.n	8008088 <_dtoa_r+0x960>
 80082cc:	9a00      	ldr	r2, [sp, #0]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d189      	bne.n	80081e6 <_dtoa_r+0xabe>
 80082d2:	f10b 0b01 	add.w	fp, fp, #1
 80082d6:	2331      	movs	r3, #49	; 0x31
 80082d8:	e796      	b.n	8008208 <_dtoa_r+0xae0>
 80082da:	4b0a      	ldr	r3, [pc, #40]	; (8008304 <_dtoa_r+0xbdc>)
 80082dc:	f7ff ba99 	b.w	8007812 <_dtoa_r+0xea>
 80082e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f47f aa6d 	bne.w	80077c2 <_dtoa_r+0x9a>
 80082e8:	4b07      	ldr	r3, [pc, #28]	; (8008308 <_dtoa_r+0xbe0>)
 80082ea:	f7ff ba92 	b.w	8007812 <_dtoa_r+0xea>
 80082ee:	9b01      	ldr	r3, [sp, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	dcb5      	bgt.n	8008260 <_dtoa_r+0xb38>
 80082f4:	9b07      	ldr	r3, [sp, #28]
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	f73f aeb1 	bgt.w	800805e <_dtoa_r+0x936>
 80082fc:	e7b0      	b.n	8008260 <_dtoa_r+0xb38>
 80082fe:	bf00      	nop
 8008300:	080095f4 	.word	0x080095f4
 8008304:	08009554 	.word	0x08009554
 8008308:	08009578 	.word	0x08009578

0800830c <_free_r>:
 800830c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800830e:	2900      	cmp	r1, #0
 8008310:	d044      	beq.n	800839c <_free_r+0x90>
 8008312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008316:	9001      	str	r0, [sp, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	f1a1 0404 	sub.w	r4, r1, #4
 800831e:	bfb8      	it	lt
 8008320:	18e4      	addlt	r4, r4, r3
 8008322:	f7fe fb31 	bl	8006988 <__malloc_lock>
 8008326:	4a1e      	ldr	r2, [pc, #120]	; (80083a0 <_free_r+0x94>)
 8008328:	9801      	ldr	r0, [sp, #4]
 800832a:	6813      	ldr	r3, [r2, #0]
 800832c:	b933      	cbnz	r3, 800833c <_free_r+0x30>
 800832e:	6063      	str	r3, [r4, #4]
 8008330:	6014      	str	r4, [r2, #0]
 8008332:	b003      	add	sp, #12
 8008334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008338:	f7fe bb2c 	b.w	8006994 <__malloc_unlock>
 800833c:	42a3      	cmp	r3, r4
 800833e:	d908      	bls.n	8008352 <_free_r+0x46>
 8008340:	6825      	ldr	r5, [r4, #0]
 8008342:	1961      	adds	r1, r4, r5
 8008344:	428b      	cmp	r3, r1
 8008346:	bf01      	itttt	eq
 8008348:	6819      	ldreq	r1, [r3, #0]
 800834a:	685b      	ldreq	r3, [r3, #4]
 800834c:	1949      	addeq	r1, r1, r5
 800834e:	6021      	streq	r1, [r4, #0]
 8008350:	e7ed      	b.n	800832e <_free_r+0x22>
 8008352:	461a      	mov	r2, r3
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	b10b      	cbz	r3, 800835c <_free_r+0x50>
 8008358:	42a3      	cmp	r3, r4
 800835a:	d9fa      	bls.n	8008352 <_free_r+0x46>
 800835c:	6811      	ldr	r1, [r2, #0]
 800835e:	1855      	adds	r5, r2, r1
 8008360:	42a5      	cmp	r5, r4
 8008362:	d10b      	bne.n	800837c <_free_r+0x70>
 8008364:	6824      	ldr	r4, [r4, #0]
 8008366:	4421      	add	r1, r4
 8008368:	1854      	adds	r4, r2, r1
 800836a:	42a3      	cmp	r3, r4
 800836c:	6011      	str	r1, [r2, #0]
 800836e:	d1e0      	bne.n	8008332 <_free_r+0x26>
 8008370:	681c      	ldr	r4, [r3, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	6053      	str	r3, [r2, #4]
 8008376:	440c      	add	r4, r1
 8008378:	6014      	str	r4, [r2, #0]
 800837a:	e7da      	b.n	8008332 <_free_r+0x26>
 800837c:	d902      	bls.n	8008384 <_free_r+0x78>
 800837e:	230c      	movs	r3, #12
 8008380:	6003      	str	r3, [r0, #0]
 8008382:	e7d6      	b.n	8008332 <_free_r+0x26>
 8008384:	6825      	ldr	r5, [r4, #0]
 8008386:	1961      	adds	r1, r4, r5
 8008388:	428b      	cmp	r3, r1
 800838a:	bf04      	itt	eq
 800838c:	6819      	ldreq	r1, [r3, #0]
 800838e:	685b      	ldreq	r3, [r3, #4]
 8008390:	6063      	str	r3, [r4, #4]
 8008392:	bf04      	itt	eq
 8008394:	1949      	addeq	r1, r1, r5
 8008396:	6021      	streq	r1, [r4, #0]
 8008398:	6054      	str	r4, [r2, #4]
 800839a:	e7ca      	b.n	8008332 <_free_r+0x26>
 800839c:	b003      	add	sp, #12
 800839e:	bd30      	pop	{r4, r5, pc}
 80083a0:	200005f8 	.word	0x200005f8

080083a4 <_Balloc>:
 80083a4:	b570      	push	{r4, r5, r6, lr}
 80083a6:	69c6      	ldr	r6, [r0, #28]
 80083a8:	4604      	mov	r4, r0
 80083aa:	460d      	mov	r5, r1
 80083ac:	b976      	cbnz	r6, 80083cc <_Balloc+0x28>
 80083ae:	2010      	movs	r0, #16
 80083b0:	f7fe fa42 	bl	8006838 <malloc>
 80083b4:	4602      	mov	r2, r0
 80083b6:	61e0      	str	r0, [r4, #28]
 80083b8:	b920      	cbnz	r0, 80083c4 <_Balloc+0x20>
 80083ba:	4b18      	ldr	r3, [pc, #96]	; (800841c <_Balloc+0x78>)
 80083bc:	4818      	ldr	r0, [pc, #96]	; (8008420 <_Balloc+0x7c>)
 80083be:	216b      	movs	r1, #107	; 0x6b
 80083c0:	f000 fc1a 	bl	8008bf8 <__assert_func>
 80083c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083c8:	6006      	str	r6, [r0, #0]
 80083ca:	60c6      	str	r6, [r0, #12]
 80083cc:	69e6      	ldr	r6, [r4, #28]
 80083ce:	68f3      	ldr	r3, [r6, #12]
 80083d0:	b183      	cbz	r3, 80083f4 <_Balloc+0x50>
 80083d2:	69e3      	ldr	r3, [r4, #28]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083da:	b9b8      	cbnz	r0, 800840c <_Balloc+0x68>
 80083dc:	2101      	movs	r1, #1
 80083de:	fa01 f605 	lsl.w	r6, r1, r5
 80083e2:	1d72      	adds	r2, r6, #5
 80083e4:	0092      	lsls	r2, r2, #2
 80083e6:	4620      	mov	r0, r4
 80083e8:	f000 fc24 	bl	8008c34 <_calloc_r>
 80083ec:	b160      	cbz	r0, 8008408 <_Balloc+0x64>
 80083ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083f2:	e00e      	b.n	8008412 <_Balloc+0x6e>
 80083f4:	2221      	movs	r2, #33	; 0x21
 80083f6:	2104      	movs	r1, #4
 80083f8:	4620      	mov	r0, r4
 80083fa:	f000 fc1b 	bl	8008c34 <_calloc_r>
 80083fe:	69e3      	ldr	r3, [r4, #28]
 8008400:	60f0      	str	r0, [r6, #12]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1e4      	bne.n	80083d2 <_Balloc+0x2e>
 8008408:	2000      	movs	r0, #0
 800840a:	bd70      	pop	{r4, r5, r6, pc}
 800840c:	6802      	ldr	r2, [r0, #0]
 800840e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008412:	2300      	movs	r3, #0
 8008414:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008418:	e7f7      	b.n	800840a <_Balloc+0x66>
 800841a:	bf00      	nop
 800841c:	08009585 	.word	0x08009585
 8008420:	08009605 	.word	0x08009605

08008424 <_Bfree>:
 8008424:	b570      	push	{r4, r5, r6, lr}
 8008426:	69c6      	ldr	r6, [r0, #28]
 8008428:	4605      	mov	r5, r0
 800842a:	460c      	mov	r4, r1
 800842c:	b976      	cbnz	r6, 800844c <_Bfree+0x28>
 800842e:	2010      	movs	r0, #16
 8008430:	f7fe fa02 	bl	8006838 <malloc>
 8008434:	4602      	mov	r2, r0
 8008436:	61e8      	str	r0, [r5, #28]
 8008438:	b920      	cbnz	r0, 8008444 <_Bfree+0x20>
 800843a:	4b09      	ldr	r3, [pc, #36]	; (8008460 <_Bfree+0x3c>)
 800843c:	4809      	ldr	r0, [pc, #36]	; (8008464 <_Bfree+0x40>)
 800843e:	218f      	movs	r1, #143	; 0x8f
 8008440:	f000 fbda 	bl	8008bf8 <__assert_func>
 8008444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008448:	6006      	str	r6, [r0, #0]
 800844a:	60c6      	str	r6, [r0, #12]
 800844c:	b13c      	cbz	r4, 800845e <_Bfree+0x3a>
 800844e:	69eb      	ldr	r3, [r5, #28]
 8008450:	6862      	ldr	r2, [r4, #4]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008458:	6021      	str	r1, [r4, #0]
 800845a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800845e:	bd70      	pop	{r4, r5, r6, pc}
 8008460:	08009585 	.word	0x08009585
 8008464:	08009605 	.word	0x08009605

08008468 <__multadd>:
 8008468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800846c:	690d      	ldr	r5, [r1, #16]
 800846e:	4607      	mov	r7, r0
 8008470:	460c      	mov	r4, r1
 8008472:	461e      	mov	r6, r3
 8008474:	f101 0c14 	add.w	ip, r1, #20
 8008478:	2000      	movs	r0, #0
 800847a:	f8dc 3000 	ldr.w	r3, [ip]
 800847e:	b299      	uxth	r1, r3
 8008480:	fb02 6101 	mla	r1, r2, r1, r6
 8008484:	0c1e      	lsrs	r6, r3, #16
 8008486:	0c0b      	lsrs	r3, r1, #16
 8008488:	fb02 3306 	mla	r3, r2, r6, r3
 800848c:	b289      	uxth	r1, r1
 800848e:	3001      	adds	r0, #1
 8008490:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008494:	4285      	cmp	r5, r0
 8008496:	f84c 1b04 	str.w	r1, [ip], #4
 800849a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800849e:	dcec      	bgt.n	800847a <__multadd+0x12>
 80084a0:	b30e      	cbz	r6, 80084e6 <__multadd+0x7e>
 80084a2:	68a3      	ldr	r3, [r4, #8]
 80084a4:	42ab      	cmp	r3, r5
 80084a6:	dc19      	bgt.n	80084dc <__multadd+0x74>
 80084a8:	6861      	ldr	r1, [r4, #4]
 80084aa:	4638      	mov	r0, r7
 80084ac:	3101      	adds	r1, #1
 80084ae:	f7ff ff79 	bl	80083a4 <_Balloc>
 80084b2:	4680      	mov	r8, r0
 80084b4:	b928      	cbnz	r0, 80084c2 <__multadd+0x5a>
 80084b6:	4602      	mov	r2, r0
 80084b8:	4b0c      	ldr	r3, [pc, #48]	; (80084ec <__multadd+0x84>)
 80084ba:	480d      	ldr	r0, [pc, #52]	; (80084f0 <__multadd+0x88>)
 80084bc:	21ba      	movs	r1, #186	; 0xba
 80084be:	f000 fb9b 	bl	8008bf8 <__assert_func>
 80084c2:	6922      	ldr	r2, [r4, #16]
 80084c4:	3202      	adds	r2, #2
 80084c6:	f104 010c 	add.w	r1, r4, #12
 80084ca:	0092      	lsls	r2, r2, #2
 80084cc:	300c      	adds	r0, #12
 80084ce:	f7ff f893 	bl	80075f8 <memcpy>
 80084d2:	4621      	mov	r1, r4
 80084d4:	4638      	mov	r0, r7
 80084d6:	f7ff ffa5 	bl	8008424 <_Bfree>
 80084da:	4644      	mov	r4, r8
 80084dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084e0:	3501      	adds	r5, #1
 80084e2:	615e      	str	r6, [r3, #20]
 80084e4:	6125      	str	r5, [r4, #16]
 80084e6:	4620      	mov	r0, r4
 80084e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084ec:	080095f4 	.word	0x080095f4
 80084f0:	08009605 	.word	0x08009605

080084f4 <__hi0bits>:
 80084f4:	0c03      	lsrs	r3, r0, #16
 80084f6:	041b      	lsls	r3, r3, #16
 80084f8:	b9d3      	cbnz	r3, 8008530 <__hi0bits+0x3c>
 80084fa:	0400      	lsls	r0, r0, #16
 80084fc:	2310      	movs	r3, #16
 80084fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008502:	bf04      	itt	eq
 8008504:	0200      	lsleq	r0, r0, #8
 8008506:	3308      	addeq	r3, #8
 8008508:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800850c:	bf04      	itt	eq
 800850e:	0100      	lsleq	r0, r0, #4
 8008510:	3304      	addeq	r3, #4
 8008512:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008516:	bf04      	itt	eq
 8008518:	0080      	lsleq	r0, r0, #2
 800851a:	3302      	addeq	r3, #2
 800851c:	2800      	cmp	r0, #0
 800851e:	db05      	blt.n	800852c <__hi0bits+0x38>
 8008520:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008524:	f103 0301 	add.w	r3, r3, #1
 8008528:	bf08      	it	eq
 800852a:	2320      	moveq	r3, #32
 800852c:	4618      	mov	r0, r3
 800852e:	4770      	bx	lr
 8008530:	2300      	movs	r3, #0
 8008532:	e7e4      	b.n	80084fe <__hi0bits+0xa>

08008534 <__lo0bits>:
 8008534:	6803      	ldr	r3, [r0, #0]
 8008536:	f013 0207 	ands.w	r2, r3, #7
 800853a:	d00c      	beq.n	8008556 <__lo0bits+0x22>
 800853c:	07d9      	lsls	r1, r3, #31
 800853e:	d422      	bmi.n	8008586 <__lo0bits+0x52>
 8008540:	079a      	lsls	r2, r3, #30
 8008542:	bf49      	itett	mi
 8008544:	085b      	lsrmi	r3, r3, #1
 8008546:	089b      	lsrpl	r3, r3, #2
 8008548:	6003      	strmi	r3, [r0, #0]
 800854a:	2201      	movmi	r2, #1
 800854c:	bf5c      	itt	pl
 800854e:	6003      	strpl	r3, [r0, #0]
 8008550:	2202      	movpl	r2, #2
 8008552:	4610      	mov	r0, r2
 8008554:	4770      	bx	lr
 8008556:	b299      	uxth	r1, r3
 8008558:	b909      	cbnz	r1, 800855e <__lo0bits+0x2a>
 800855a:	0c1b      	lsrs	r3, r3, #16
 800855c:	2210      	movs	r2, #16
 800855e:	b2d9      	uxtb	r1, r3
 8008560:	b909      	cbnz	r1, 8008566 <__lo0bits+0x32>
 8008562:	3208      	adds	r2, #8
 8008564:	0a1b      	lsrs	r3, r3, #8
 8008566:	0719      	lsls	r1, r3, #28
 8008568:	bf04      	itt	eq
 800856a:	091b      	lsreq	r3, r3, #4
 800856c:	3204      	addeq	r2, #4
 800856e:	0799      	lsls	r1, r3, #30
 8008570:	bf04      	itt	eq
 8008572:	089b      	lsreq	r3, r3, #2
 8008574:	3202      	addeq	r2, #2
 8008576:	07d9      	lsls	r1, r3, #31
 8008578:	d403      	bmi.n	8008582 <__lo0bits+0x4e>
 800857a:	085b      	lsrs	r3, r3, #1
 800857c:	f102 0201 	add.w	r2, r2, #1
 8008580:	d003      	beq.n	800858a <__lo0bits+0x56>
 8008582:	6003      	str	r3, [r0, #0]
 8008584:	e7e5      	b.n	8008552 <__lo0bits+0x1e>
 8008586:	2200      	movs	r2, #0
 8008588:	e7e3      	b.n	8008552 <__lo0bits+0x1e>
 800858a:	2220      	movs	r2, #32
 800858c:	e7e1      	b.n	8008552 <__lo0bits+0x1e>
	...

08008590 <__i2b>:
 8008590:	b510      	push	{r4, lr}
 8008592:	460c      	mov	r4, r1
 8008594:	2101      	movs	r1, #1
 8008596:	f7ff ff05 	bl	80083a4 <_Balloc>
 800859a:	4602      	mov	r2, r0
 800859c:	b928      	cbnz	r0, 80085aa <__i2b+0x1a>
 800859e:	4b05      	ldr	r3, [pc, #20]	; (80085b4 <__i2b+0x24>)
 80085a0:	4805      	ldr	r0, [pc, #20]	; (80085b8 <__i2b+0x28>)
 80085a2:	f240 1145 	movw	r1, #325	; 0x145
 80085a6:	f000 fb27 	bl	8008bf8 <__assert_func>
 80085aa:	2301      	movs	r3, #1
 80085ac:	6144      	str	r4, [r0, #20]
 80085ae:	6103      	str	r3, [r0, #16]
 80085b0:	bd10      	pop	{r4, pc}
 80085b2:	bf00      	nop
 80085b4:	080095f4 	.word	0x080095f4
 80085b8:	08009605 	.word	0x08009605

080085bc <__multiply>:
 80085bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c0:	4691      	mov	r9, r2
 80085c2:	690a      	ldr	r2, [r1, #16]
 80085c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	bfb8      	it	lt
 80085cc:	460b      	movlt	r3, r1
 80085ce:	460c      	mov	r4, r1
 80085d0:	bfbc      	itt	lt
 80085d2:	464c      	movlt	r4, r9
 80085d4:	4699      	movlt	r9, r3
 80085d6:	6927      	ldr	r7, [r4, #16]
 80085d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80085dc:	68a3      	ldr	r3, [r4, #8]
 80085de:	6861      	ldr	r1, [r4, #4]
 80085e0:	eb07 060a 	add.w	r6, r7, sl
 80085e4:	42b3      	cmp	r3, r6
 80085e6:	b085      	sub	sp, #20
 80085e8:	bfb8      	it	lt
 80085ea:	3101      	addlt	r1, #1
 80085ec:	f7ff feda 	bl	80083a4 <_Balloc>
 80085f0:	b930      	cbnz	r0, 8008600 <__multiply+0x44>
 80085f2:	4602      	mov	r2, r0
 80085f4:	4b44      	ldr	r3, [pc, #272]	; (8008708 <__multiply+0x14c>)
 80085f6:	4845      	ldr	r0, [pc, #276]	; (800870c <__multiply+0x150>)
 80085f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80085fc:	f000 fafc 	bl	8008bf8 <__assert_func>
 8008600:	f100 0514 	add.w	r5, r0, #20
 8008604:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008608:	462b      	mov	r3, r5
 800860a:	2200      	movs	r2, #0
 800860c:	4543      	cmp	r3, r8
 800860e:	d321      	bcc.n	8008654 <__multiply+0x98>
 8008610:	f104 0314 	add.w	r3, r4, #20
 8008614:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008618:	f109 0314 	add.w	r3, r9, #20
 800861c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008620:	9202      	str	r2, [sp, #8]
 8008622:	1b3a      	subs	r2, r7, r4
 8008624:	3a15      	subs	r2, #21
 8008626:	f022 0203 	bic.w	r2, r2, #3
 800862a:	3204      	adds	r2, #4
 800862c:	f104 0115 	add.w	r1, r4, #21
 8008630:	428f      	cmp	r7, r1
 8008632:	bf38      	it	cc
 8008634:	2204      	movcc	r2, #4
 8008636:	9201      	str	r2, [sp, #4]
 8008638:	9a02      	ldr	r2, [sp, #8]
 800863a:	9303      	str	r3, [sp, #12]
 800863c:	429a      	cmp	r2, r3
 800863e:	d80c      	bhi.n	800865a <__multiply+0x9e>
 8008640:	2e00      	cmp	r6, #0
 8008642:	dd03      	ble.n	800864c <__multiply+0x90>
 8008644:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008648:	2b00      	cmp	r3, #0
 800864a:	d05b      	beq.n	8008704 <__multiply+0x148>
 800864c:	6106      	str	r6, [r0, #16]
 800864e:	b005      	add	sp, #20
 8008650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008654:	f843 2b04 	str.w	r2, [r3], #4
 8008658:	e7d8      	b.n	800860c <__multiply+0x50>
 800865a:	f8b3 a000 	ldrh.w	sl, [r3]
 800865e:	f1ba 0f00 	cmp.w	sl, #0
 8008662:	d024      	beq.n	80086ae <__multiply+0xf2>
 8008664:	f104 0e14 	add.w	lr, r4, #20
 8008668:	46a9      	mov	r9, r5
 800866a:	f04f 0c00 	mov.w	ip, #0
 800866e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008672:	f8d9 1000 	ldr.w	r1, [r9]
 8008676:	fa1f fb82 	uxth.w	fp, r2
 800867a:	b289      	uxth	r1, r1
 800867c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008680:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008684:	f8d9 2000 	ldr.w	r2, [r9]
 8008688:	4461      	add	r1, ip
 800868a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800868e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008692:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008696:	b289      	uxth	r1, r1
 8008698:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800869c:	4577      	cmp	r7, lr
 800869e:	f849 1b04 	str.w	r1, [r9], #4
 80086a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80086a6:	d8e2      	bhi.n	800866e <__multiply+0xb2>
 80086a8:	9a01      	ldr	r2, [sp, #4]
 80086aa:	f845 c002 	str.w	ip, [r5, r2]
 80086ae:	9a03      	ldr	r2, [sp, #12]
 80086b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80086b4:	3304      	adds	r3, #4
 80086b6:	f1b9 0f00 	cmp.w	r9, #0
 80086ba:	d021      	beq.n	8008700 <__multiply+0x144>
 80086bc:	6829      	ldr	r1, [r5, #0]
 80086be:	f104 0c14 	add.w	ip, r4, #20
 80086c2:	46ae      	mov	lr, r5
 80086c4:	f04f 0a00 	mov.w	sl, #0
 80086c8:	f8bc b000 	ldrh.w	fp, [ip]
 80086cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80086d0:	fb09 220b 	mla	r2, r9, fp, r2
 80086d4:	4452      	add	r2, sl
 80086d6:	b289      	uxth	r1, r1
 80086d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80086dc:	f84e 1b04 	str.w	r1, [lr], #4
 80086e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80086e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80086e8:	f8be 1000 	ldrh.w	r1, [lr]
 80086ec:	fb09 110a 	mla	r1, r9, sl, r1
 80086f0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80086f4:	4567      	cmp	r7, ip
 80086f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80086fa:	d8e5      	bhi.n	80086c8 <__multiply+0x10c>
 80086fc:	9a01      	ldr	r2, [sp, #4]
 80086fe:	50a9      	str	r1, [r5, r2]
 8008700:	3504      	adds	r5, #4
 8008702:	e799      	b.n	8008638 <__multiply+0x7c>
 8008704:	3e01      	subs	r6, #1
 8008706:	e79b      	b.n	8008640 <__multiply+0x84>
 8008708:	080095f4 	.word	0x080095f4
 800870c:	08009605 	.word	0x08009605

08008710 <__pow5mult>:
 8008710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008714:	4615      	mov	r5, r2
 8008716:	f012 0203 	ands.w	r2, r2, #3
 800871a:	4606      	mov	r6, r0
 800871c:	460f      	mov	r7, r1
 800871e:	d007      	beq.n	8008730 <__pow5mult+0x20>
 8008720:	4c25      	ldr	r4, [pc, #148]	; (80087b8 <__pow5mult+0xa8>)
 8008722:	3a01      	subs	r2, #1
 8008724:	2300      	movs	r3, #0
 8008726:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800872a:	f7ff fe9d 	bl	8008468 <__multadd>
 800872e:	4607      	mov	r7, r0
 8008730:	10ad      	asrs	r5, r5, #2
 8008732:	d03d      	beq.n	80087b0 <__pow5mult+0xa0>
 8008734:	69f4      	ldr	r4, [r6, #28]
 8008736:	b97c      	cbnz	r4, 8008758 <__pow5mult+0x48>
 8008738:	2010      	movs	r0, #16
 800873a:	f7fe f87d 	bl	8006838 <malloc>
 800873e:	4602      	mov	r2, r0
 8008740:	61f0      	str	r0, [r6, #28]
 8008742:	b928      	cbnz	r0, 8008750 <__pow5mult+0x40>
 8008744:	4b1d      	ldr	r3, [pc, #116]	; (80087bc <__pow5mult+0xac>)
 8008746:	481e      	ldr	r0, [pc, #120]	; (80087c0 <__pow5mult+0xb0>)
 8008748:	f240 11b3 	movw	r1, #435	; 0x1b3
 800874c:	f000 fa54 	bl	8008bf8 <__assert_func>
 8008750:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008754:	6004      	str	r4, [r0, #0]
 8008756:	60c4      	str	r4, [r0, #12]
 8008758:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800875c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008760:	b94c      	cbnz	r4, 8008776 <__pow5mult+0x66>
 8008762:	f240 2171 	movw	r1, #625	; 0x271
 8008766:	4630      	mov	r0, r6
 8008768:	f7ff ff12 	bl	8008590 <__i2b>
 800876c:	2300      	movs	r3, #0
 800876e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008772:	4604      	mov	r4, r0
 8008774:	6003      	str	r3, [r0, #0]
 8008776:	f04f 0900 	mov.w	r9, #0
 800877a:	07eb      	lsls	r3, r5, #31
 800877c:	d50a      	bpl.n	8008794 <__pow5mult+0x84>
 800877e:	4639      	mov	r1, r7
 8008780:	4622      	mov	r2, r4
 8008782:	4630      	mov	r0, r6
 8008784:	f7ff ff1a 	bl	80085bc <__multiply>
 8008788:	4639      	mov	r1, r7
 800878a:	4680      	mov	r8, r0
 800878c:	4630      	mov	r0, r6
 800878e:	f7ff fe49 	bl	8008424 <_Bfree>
 8008792:	4647      	mov	r7, r8
 8008794:	106d      	asrs	r5, r5, #1
 8008796:	d00b      	beq.n	80087b0 <__pow5mult+0xa0>
 8008798:	6820      	ldr	r0, [r4, #0]
 800879a:	b938      	cbnz	r0, 80087ac <__pow5mult+0x9c>
 800879c:	4622      	mov	r2, r4
 800879e:	4621      	mov	r1, r4
 80087a0:	4630      	mov	r0, r6
 80087a2:	f7ff ff0b 	bl	80085bc <__multiply>
 80087a6:	6020      	str	r0, [r4, #0]
 80087a8:	f8c0 9000 	str.w	r9, [r0]
 80087ac:	4604      	mov	r4, r0
 80087ae:	e7e4      	b.n	800877a <__pow5mult+0x6a>
 80087b0:	4638      	mov	r0, r7
 80087b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087b6:	bf00      	nop
 80087b8:	08009750 	.word	0x08009750
 80087bc:	08009585 	.word	0x08009585
 80087c0:	08009605 	.word	0x08009605

080087c4 <__lshift>:
 80087c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c8:	460c      	mov	r4, r1
 80087ca:	6849      	ldr	r1, [r1, #4]
 80087cc:	6923      	ldr	r3, [r4, #16]
 80087ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087d2:	68a3      	ldr	r3, [r4, #8]
 80087d4:	4607      	mov	r7, r0
 80087d6:	4691      	mov	r9, r2
 80087d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087dc:	f108 0601 	add.w	r6, r8, #1
 80087e0:	42b3      	cmp	r3, r6
 80087e2:	db0b      	blt.n	80087fc <__lshift+0x38>
 80087e4:	4638      	mov	r0, r7
 80087e6:	f7ff fddd 	bl	80083a4 <_Balloc>
 80087ea:	4605      	mov	r5, r0
 80087ec:	b948      	cbnz	r0, 8008802 <__lshift+0x3e>
 80087ee:	4602      	mov	r2, r0
 80087f0:	4b28      	ldr	r3, [pc, #160]	; (8008894 <__lshift+0xd0>)
 80087f2:	4829      	ldr	r0, [pc, #164]	; (8008898 <__lshift+0xd4>)
 80087f4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80087f8:	f000 f9fe 	bl	8008bf8 <__assert_func>
 80087fc:	3101      	adds	r1, #1
 80087fe:	005b      	lsls	r3, r3, #1
 8008800:	e7ee      	b.n	80087e0 <__lshift+0x1c>
 8008802:	2300      	movs	r3, #0
 8008804:	f100 0114 	add.w	r1, r0, #20
 8008808:	f100 0210 	add.w	r2, r0, #16
 800880c:	4618      	mov	r0, r3
 800880e:	4553      	cmp	r3, sl
 8008810:	db33      	blt.n	800887a <__lshift+0xb6>
 8008812:	6920      	ldr	r0, [r4, #16]
 8008814:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008818:	f104 0314 	add.w	r3, r4, #20
 800881c:	f019 091f 	ands.w	r9, r9, #31
 8008820:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008824:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008828:	d02b      	beq.n	8008882 <__lshift+0xbe>
 800882a:	f1c9 0e20 	rsb	lr, r9, #32
 800882e:	468a      	mov	sl, r1
 8008830:	2200      	movs	r2, #0
 8008832:	6818      	ldr	r0, [r3, #0]
 8008834:	fa00 f009 	lsl.w	r0, r0, r9
 8008838:	4310      	orrs	r0, r2
 800883a:	f84a 0b04 	str.w	r0, [sl], #4
 800883e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008842:	459c      	cmp	ip, r3
 8008844:	fa22 f20e 	lsr.w	r2, r2, lr
 8008848:	d8f3      	bhi.n	8008832 <__lshift+0x6e>
 800884a:	ebac 0304 	sub.w	r3, ip, r4
 800884e:	3b15      	subs	r3, #21
 8008850:	f023 0303 	bic.w	r3, r3, #3
 8008854:	3304      	adds	r3, #4
 8008856:	f104 0015 	add.w	r0, r4, #21
 800885a:	4584      	cmp	ip, r0
 800885c:	bf38      	it	cc
 800885e:	2304      	movcc	r3, #4
 8008860:	50ca      	str	r2, [r1, r3]
 8008862:	b10a      	cbz	r2, 8008868 <__lshift+0xa4>
 8008864:	f108 0602 	add.w	r6, r8, #2
 8008868:	3e01      	subs	r6, #1
 800886a:	4638      	mov	r0, r7
 800886c:	612e      	str	r6, [r5, #16]
 800886e:	4621      	mov	r1, r4
 8008870:	f7ff fdd8 	bl	8008424 <_Bfree>
 8008874:	4628      	mov	r0, r5
 8008876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800887a:	f842 0f04 	str.w	r0, [r2, #4]!
 800887e:	3301      	adds	r3, #1
 8008880:	e7c5      	b.n	800880e <__lshift+0x4a>
 8008882:	3904      	subs	r1, #4
 8008884:	f853 2b04 	ldr.w	r2, [r3], #4
 8008888:	f841 2f04 	str.w	r2, [r1, #4]!
 800888c:	459c      	cmp	ip, r3
 800888e:	d8f9      	bhi.n	8008884 <__lshift+0xc0>
 8008890:	e7ea      	b.n	8008868 <__lshift+0xa4>
 8008892:	bf00      	nop
 8008894:	080095f4 	.word	0x080095f4
 8008898:	08009605 	.word	0x08009605

0800889c <__mcmp>:
 800889c:	b530      	push	{r4, r5, lr}
 800889e:	6902      	ldr	r2, [r0, #16]
 80088a0:	690c      	ldr	r4, [r1, #16]
 80088a2:	1b12      	subs	r2, r2, r4
 80088a4:	d10e      	bne.n	80088c4 <__mcmp+0x28>
 80088a6:	f100 0314 	add.w	r3, r0, #20
 80088aa:	3114      	adds	r1, #20
 80088ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80088b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80088b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80088b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80088bc:	42a5      	cmp	r5, r4
 80088be:	d003      	beq.n	80088c8 <__mcmp+0x2c>
 80088c0:	d305      	bcc.n	80088ce <__mcmp+0x32>
 80088c2:	2201      	movs	r2, #1
 80088c4:	4610      	mov	r0, r2
 80088c6:	bd30      	pop	{r4, r5, pc}
 80088c8:	4283      	cmp	r3, r0
 80088ca:	d3f3      	bcc.n	80088b4 <__mcmp+0x18>
 80088cc:	e7fa      	b.n	80088c4 <__mcmp+0x28>
 80088ce:	f04f 32ff 	mov.w	r2, #4294967295
 80088d2:	e7f7      	b.n	80088c4 <__mcmp+0x28>

080088d4 <__mdiff>:
 80088d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d8:	460c      	mov	r4, r1
 80088da:	4606      	mov	r6, r0
 80088dc:	4611      	mov	r1, r2
 80088de:	4620      	mov	r0, r4
 80088e0:	4690      	mov	r8, r2
 80088e2:	f7ff ffdb 	bl	800889c <__mcmp>
 80088e6:	1e05      	subs	r5, r0, #0
 80088e8:	d110      	bne.n	800890c <__mdiff+0x38>
 80088ea:	4629      	mov	r1, r5
 80088ec:	4630      	mov	r0, r6
 80088ee:	f7ff fd59 	bl	80083a4 <_Balloc>
 80088f2:	b930      	cbnz	r0, 8008902 <__mdiff+0x2e>
 80088f4:	4b3a      	ldr	r3, [pc, #232]	; (80089e0 <__mdiff+0x10c>)
 80088f6:	4602      	mov	r2, r0
 80088f8:	f240 2137 	movw	r1, #567	; 0x237
 80088fc:	4839      	ldr	r0, [pc, #228]	; (80089e4 <__mdiff+0x110>)
 80088fe:	f000 f97b 	bl	8008bf8 <__assert_func>
 8008902:	2301      	movs	r3, #1
 8008904:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008908:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800890c:	bfa4      	itt	ge
 800890e:	4643      	movge	r3, r8
 8008910:	46a0      	movge	r8, r4
 8008912:	4630      	mov	r0, r6
 8008914:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008918:	bfa6      	itte	ge
 800891a:	461c      	movge	r4, r3
 800891c:	2500      	movge	r5, #0
 800891e:	2501      	movlt	r5, #1
 8008920:	f7ff fd40 	bl	80083a4 <_Balloc>
 8008924:	b920      	cbnz	r0, 8008930 <__mdiff+0x5c>
 8008926:	4b2e      	ldr	r3, [pc, #184]	; (80089e0 <__mdiff+0x10c>)
 8008928:	4602      	mov	r2, r0
 800892a:	f240 2145 	movw	r1, #581	; 0x245
 800892e:	e7e5      	b.n	80088fc <__mdiff+0x28>
 8008930:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008934:	6926      	ldr	r6, [r4, #16]
 8008936:	60c5      	str	r5, [r0, #12]
 8008938:	f104 0914 	add.w	r9, r4, #20
 800893c:	f108 0514 	add.w	r5, r8, #20
 8008940:	f100 0e14 	add.w	lr, r0, #20
 8008944:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008948:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800894c:	f108 0210 	add.w	r2, r8, #16
 8008950:	46f2      	mov	sl, lr
 8008952:	2100      	movs	r1, #0
 8008954:	f859 3b04 	ldr.w	r3, [r9], #4
 8008958:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800895c:	fa11 f88b 	uxtah	r8, r1, fp
 8008960:	b299      	uxth	r1, r3
 8008962:	0c1b      	lsrs	r3, r3, #16
 8008964:	eba8 0801 	sub.w	r8, r8, r1
 8008968:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800896c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008970:	fa1f f888 	uxth.w	r8, r8
 8008974:	1419      	asrs	r1, r3, #16
 8008976:	454e      	cmp	r6, r9
 8008978:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800897c:	f84a 3b04 	str.w	r3, [sl], #4
 8008980:	d8e8      	bhi.n	8008954 <__mdiff+0x80>
 8008982:	1b33      	subs	r3, r6, r4
 8008984:	3b15      	subs	r3, #21
 8008986:	f023 0303 	bic.w	r3, r3, #3
 800898a:	3304      	adds	r3, #4
 800898c:	3415      	adds	r4, #21
 800898e:	42a6      	cmp	r6, r4
 8008990:	bf38      	it	cc
 8008992:	2304      	movcc	r3, #4
 8008994:	441d      	add	r5, r3
 8008996:	4473      	add	r3, lr
 8008998:	469e      	mov	lr, r3
 800899a:	462e      	mov	r6, r5
 800899c:	4566      	cmp	r6, ip
 800899e:	d30e      	bcc.n	80089be <__mdiff+0xea>
 80089a0:	f10c 0203 	add.w	r2, ip, #3
 80089a4:	1b52      	subs	r2, r2, r5
 80089a6:	f022 0203 	bic.w	r2, r2, #3
 80089aa:	3d03      	subs	r5, #3
 80089ac:	45ac      	cmp	ip, r5
 80089ae:	bf38      	it	cc
 80089b0:	2200      	movcc	r2, #0
 80089b2:	4413      	add	r3, r2
 80089b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80089b8:	b17a      	cbz	r2, 80089da <__mdiff+0x106>
 80089ba:	6107      	str	r7, [r0, #16]
 80089bc:	e7a4      	b.n	8008908 <__mdiff+0x34>
 80089be:	f856 8b04 	ldr.w	r8, [r6], #4
 80089c2:	fa11 f288 	uxtah	r2, r1, r8
 80089c6:	1414      	asrs	r4, r2, #16
 80089c8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80089cc:	b292      	uxth	r2, r2
 80089ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80089d2:	f84e 2b04 	str.w	r2, [lr], #4
 80089d6:	1421      	asrs	r1, r4, #16
 80089d8:	e7e0      	b.n	800899c <__mdiff+0xc8>
 80089da:	3f01      	subs	r7, #1
 80089dc:	e7ea      	b.n	80089b4 <__mdiff+0xe0>
 80089de:	bf00      	nop
 80089e0:	080095f4 	.word	0x080095f4
 80089e4:	08009605 	.word	0x08009605

080089e8 <__d2b>:
 80089e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089ec:	460f      	mov	r7, r1
 80089ee:	2101      	movs	r1, #1
 80089f0:	ec59 8b10 	vmov	r8, r9, d0
 80089f4:	4616      	mov	r6, r2
 80089f6:	f7ff fcd5 	bl	80083a4 <_Balloc>
 80089fa:	4604      	mov	r4, r0
 80089fc:	b930      	cbnz	r0, 8008a0c <__d2b+0x24>
 80089fe:	4602      	mov	r2, r0
 8008a00:	4b24      	ldr	r3, [pc, #144]	; (8008a94 <__d2b+0xac>)
 8008a02:	4825      	ldr	r0, [pc, #148]	; (8008a98 <__d2b+0xb0>)
 8008a04:	f240 310f 	movw	r1, #783	; 0x30f
 8008a08:	f000 f8f6 	bl	8008bf8 <__assert_func>
 8008a0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a14:	bb2d      	cbnz	r5, 8008a62 <__d2b+0x7a>
 8008a16:	9301      	str	r3, [sp, #4]
 8008a18:	f1b8 0300 	subs.w	r3, r8, #0
 8008a1c:	d026      	beq.n	8008a6c <__d2b+0x84>
 8008a1e:	4668      	mov	r0, sp
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	f7ff fd87 	bl	8008534 <__lo0bits>
 8008a26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a2a:	b1e8      	cbz	r0, 8008a68 <__d2b+0x80>
 8008a2c:	f1c0 0320 	rsb	r3, r0, #32
 8008a30:	fa02 f303 	lsl.w	r3, r2, r3
 8008a34:	430b      	orrs	r3, r1
 8008a36:	40c2      	lsrs	r2, r0
 8008a38:	6163      	str	r3, [r4, #20]
 8008a3a:	9201      	str	r2, [sp, #4]
 8008a3c:	9b01      	ldr	r3, [sp, #4]
 8008a3e:	61a3      	str	r3, [r4, #24]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	bf14      	ite	ne
 8008a44:	2202      	movne	r2, #2
 8008a46:	2201      	moveq	r2, #1
 8008a48:	6122      	str	r2, [r4, #16]
 8008a4a:	b1bd      	cbz	r5, 8008a7c <__d2b+0x94>
 8008a4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a50:	4405      	add	r5, r0
 8008a52:	603d      	str	r5, [r7, #0]
 8008a54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a58:	6030      	str	r0, [r6, #0]
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	b003      	add	sp, #12
 8008a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a66:	e7d6      	b.n	8008a16 <__d2b+0x2e>
 8008a68:	6161      	str	r1, [r4, #20]
 8008a6a:	e7e7      	b.n	8008a3c <__d2b+0x54>
 8008a6c:	a801      	add	r0, sp, #4
 8008a6e:	f7ff fd61 	bl	8008534 <__lo0bits>
 8008a72:	9b01      	ldr	r3, [sp, #4]
 8008a74:	6163      	str	r3, [r4, #20]
 8008a76:	3020      	adds	r0, #32
 8008a78:	2201      	movs	r2, #1
 8008a7a:	e7e5      	b.n	8008a48 <__d2b+0x60>
 8008a7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a84:	6038      	str	r0, [r7, #0]
 8008a86:	6918      	ldr	r0, [r3, #16]
 8008a88:	f7ff fd34 	bl	80084f4 <__hi0bits>
 8008a8c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a90:	e7e2      	b.n	8008a58 <__d2b+0x70>
 8008a92:	bf00      	nop
 8008a94:	080095f4 	.word	0x080095f4
 8008a98:	08009605 	.word	0x08009605

08008a9c <__sflush_r>:
 8008a9c:	898a      	ldrh	r2, [r1, #12]
 8008a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa2:	4605      	mov	r5, r0
 8008aa4:	0710      	lsls	r0, r2, #28
 8008aa6:	460c      	mov	r4, r1
 8008aa8:	d458      	bmi.n	8008b5c <__sflush_r+0xc0>
 8008aaa:	684b      	ldr	r3, [r1, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	dc05      	bgt.n	8008abc <__sflush_r+0x20>
 8008ab0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	dc02      	bgt.n	8008abc <__sflush_r+0x20>
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008abc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008abe:	2e00      	cmp	r6, #0
 8008ac0:	d0f9      	beq.n	8008ab6 <__sflush_r+0x1a>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ac8:	682f      	ldr	r7, [r5, #0]
 8008aca:	6a21      	ldr	r1, [r4, #32]
 8008acc:	602b      	str	r3, [r5, #0]
 8008ace:	d032      	beq.n	8008b36 <__sflush_r+0x9a>
 8008ad0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	075a      	lsls	r2, r3, #29
 8008ad6:	d505      	bpl.n	8008ae4 <__sflush_r+0x48>
 8008ad8:	6863      	ldr	r3, [r4, #4]
 8008ada:	1ac0      	subs	r0, r0, r3
 8008adc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ade:	b10b      	cbz	r3, 8008ae4 <__sflush_r+0x48>
 8008ae0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ae2:	1ac0      	subs	r0, r0, r3
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aea:	6a21      	ldr	r1, [r4, #32]
 8008aec:	4628      	mov	r0, r5
 8008aee:	47b0      	blx	r6
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	d106      	bne.n	8008b04 <__sflush_r+0x68>
 8008af6:	6829      	ldr	r1, [r5, #0]
 8008af8:	291d      	cmp	r1, #29
 8008afa:	d82b      	bhi.n	8008b54 <__sflush_r+0xb8>
 8008afc:	4a29      	ldr	r2, [pc, #164]	; (8008ba4 <__sflush_r+0x108>)
 8008afe:	410a      	asrs	r2, r1
 8008b00:	07d6      	lsls	r6, r2, #31
 8008b02:	d427      	bmi.n	8008b54 <__sflush_r+0xb8>
 8008b04:	2200      	movs	r2, #0
 8008b06:	6062      	str	r2, [r4, #4]
 8008b08:	04d9      	lsls	r1, r3, #19
 8008b0a:	6922      	ldr	r2, [r4, #16]
 8008b0c:	6022      	str	r2, [r4, #0]
 8008b0e:	d504      	bpl.n	8008b1a <__sflush_r+0x7e>
 8008b10:	1c42      	adds	r2, r0, #1
 8008b12:	d101      	bne.n	8008b18 <__sflush_r+0x7c>
 8008b14:	682b      	ldr	r3, [r5, #0]
 8008b16:	b903      	cbnz	r3, 8008b1a <__sflush_r+0x7e>
 8008b18:	6560      	str	r0, [r4, #84]	; 0x54
 8008b1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b1c:	602f      	str	r7, [r5, #0]
 8008b1e:	2900      	cmp	r1, #0
 8008b20:	d0c9      	beq.n	8008ab6 <__sflush_r+0x1a>
 8008b22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b26:	4299      	cmp	r1, r3
 8008b28:	d002      	beq.n	8008b30 <__sflush_r+0x94>
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f7ff fbee 	bl	800830c <_free_r>
 8008b30:	2000      	movs	r0, #0
 8008b32:	6360      	str	r0, [r4, #52]	; 0x34
 8008b34:	e7c0      	b.n	8008ab8 <__sflush_r+0x1c>
 8008b36:	2301      	movs	r3, #1
 8008b38:	4628      	mov	r0, r5
 8008b3a:	47b0      	blx	r6
 8008b3c:	1c41      	adds	r1, r0, #1
 8008b3e:	d1c8      	bne.n	8008ad2 <__sflush_r+0x36>
 8008b40:	682b      	ldr	r3, [r5, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0c5      	beq.n	8008ad2 <__sflush_r+0x36>
 8008b46:	2b1d      	cmp	r3, #29
 8008b48:	d001      	beq.n	8008b4e <__sflush_r+0xb2>
 8008b4a:	2b16      	cmp	r3, #22
 8008b4c:	d101      	bne.n	8008b52 <__sflush_r+0xb6>
 8008b4e:	602f      	str	r7, [r5, #0]
 8008b50:	e7b1      	b.n	8008ab6 <__sflush_r+0x1a>
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b58:	81a3      	strh	r3, [r4, #12]
 8008b5a:	e7ad      	b.n	8008ab8 <__sflush_r+0x1c>
 8008b5c:	690f      	ldr	r7, [r1, #16]
 8008b5e:	2f00      	cmp	r7, #0
 8008b60:	d0a9      	beq.n	8008ab6 <__sflush_r+0x1a>
 8008b62:	0793      	lsls	r3, r2, #30
 8008b64:	680e      	ldr	r6, [r1, #0]
 8008b66:	bf08      	it	eq
 8008b68:	694b      	ldreq	r3, [r1, #20]
 8008b6a:	600f      	str	r7, [r1, #0]
 8008b6c:	bf18      	it	ne
 8008b6e:	2300      	movne	r3, #0
 8008b70:	eba6 0807 	sub.w	r8, r6, r7
 8008b74:	608b      	str	r3, [r1, #8]
 8008b76:	f1b8 0f00 	cmp.w	r8, #0
 8008b7a:	dd9c      	ble.n	8008ab6 <__sflush_r+0x1a>
 8008b7c:	6a21      	ldr	r1, [r4, #32]
 8008b7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b80:	4643      	mov	r3, r8
 8008b82:	463a      	mov	r2, r7
 8008b84:	4628      	mov	r0, r5
 8008b86:	47b0      	blx	r6
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	dc06      	bgt.n	8008b9a <__sflush_r+0xfe>
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b92:	81a3      	strh	r3, [r4, #12]
 8008b94:	f04f 30ff 	mov.w	r0, #4294967295
 8008b98:	e78e      	b.n	8008ab8 <__sflush_r+0x1c>
 8008b9a:	4407      	add	r7, r0
 8008b9c:	eba8 0800 	sub.w	r8, r8, r0
 8008ba0:	e7e9      	b.n	8008b76 <__sflush_r+0xda>
 8008ba2:	bf00      	nop
 8008ba4:	dfbffffe 	.word	0xdfbffffe

08008ba8 <_fflush_r>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	690b      	ldr	r3, [r1, #16]
 8008bac:	4605      	mov	r5, r0
 8008bae:	460c      	mov	r4, r1
 8008bb0:	b913      	cbnz	r3, 8008bb8 <_fflush_r+0x10>
 8008bb2:	2500      	movs	r5, #0
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	bd38      	pop	{r3, r4, r5, pc}
 8008bb8:	b118      	cbz	r0, 8008bc2 <_fflush_r+0x1a>
 8008bba:	6a03      	ldr	r3, [r0, #32]
 8008bbc:	b90b      	cbnz	r3, 8008bc2 <_fflush_r+0x1a>
 8008bbe:	f7fe fbcf 	bl	8007360 <__sinit>
 8008bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d0f3      	beq.n	8008bb2 <_fflush_r+0xa>
 8008bca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bcc:	07d0      	lsls	r0, r2, #31
 8008bce:	d404      	bmi.n	8008bda <_fflush_r+0x32>
 8008bd0:	0599      	lsls	r1, r3, #22
 8008bd2:	d402      	bmi.n	8008bda <_fflush_r+0x32>
 8008bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bd6:	f7fe fd0d 	bl	80075f4 <__retarget_lock_acquire_recursive>
 8008bda:	4628      	mov	r0, r5
 8008bdc:	4621      	mov	r1, r4
 8008bde:	f7ff ff5d 	bl	8008a9c <__sflush_r>
 8008be2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008be4:	07da      	lsls	r2, r3, #31
 8008be6:	4605      	mov	r5, r0
 8008be8:	d4e4      	bmi.n	8008bb4 <_fflush_r+0xc>
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	059b      	lsls	r3, r3, #22
 8008bee:	d4e1      	bmi.n	8008bb4 <_fflush_r+0xc>
 8008bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bf2:	f7fe fd00 	bl	80075f6 <__retarget_lock_release_recursive>
 8008bf6:	e7dd      	b.n	8008bb4 <_fflush_r+0xc>

08008bf8 <__assert_func>:
 8008bf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bfa:	4614      	mov	r4, r2
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	4b09      	ldr	r3, [pc, #36]	; (8008c24 <__assert_func+0x2c>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4605      	mov	r5, r0
 8008c04:	68d8      	ldr	r0, [r3, #12]
 8008c06:	b14c      	cbz	r4, 8008c1c <__assert_func+0x24>
 8008c08:	4b07      	ldr	r3, [pc, #28]	; (8008c28 <__assert_func+0x30>)
 8008c0a:	9100      	str	r1, [sp, #0]
 8008c0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c10:	4906      	ldr	r1, [pc, #24]	; (8008c2c <__assert_func+0x34>)
 8008c12:	462b      	mov	r3, r5
 8008c14:	f000 f844 	bl	8008ca0 <fiprintf>
 8008c18:	f7fd fe06 	bl	8006828 <abort>
 8008c1c:	4b04      	ldr	r3, [pc, #16]	; (8008c30 <__assert_func+0x38>)
 8008c1e:	461c      	mov	r4, r3
 8008c20:	e7f3      	b.n	8008c0a <__assert_func+0x12>
 8008c22:	bf00      	nop
 8008c24:	20000090 	.word	0x20000090
 8008c28:	08009766 	.word	0x08009766
 8008c2c:	08009773 	.word	0x08009773
 8008c30:	080097a1 	.word	0x080097a1

08008c34 <_calloc_r>:
 8008c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c36:	fba1 2402 	umull	r2, r4, r1, r2
 8008c3a:	b94c      	cbnz	r4, 8008c50 <_calloc_r+0x1c>
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	9201      	str	r2, [sp, #4]
 8008c40:	f7fd fe22 	bl	8006888 <_malloc_r>
 8008c44:	9a01      	ldr	r2, [sp, #4]
 8008c46:	4605      	mov	r5, r0
 8008c48:	b930      	cbnz	r0, 8008c58 <_calloc_r+0x24>
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	b003      	add	sp, #12
 8008c4e:	bd30      	pop	{r4, r5, pc}
 8008c50:	220c      	movs	r2, #12
 8008c52:	6002      	str	r2, [r0, #0]
 8008c54:	2500      	movs	r5, #0
 8008c56:	e7f8      	b.n	8008c4a <_calloc_r+0x16>
 8008c58:	4621      	mov	r1, r4
 8008c5a:	f7fe fbfa 	bl	8007452 <memset>
 8008c5e:	e7f4      	b.n	8008c4a <_calloc_r+0x16>

08008c60 <__ascii_mbtowc>:
 8008c60:	b082      	sub	sp, #8
 8008c62:	b901      	cbnz	r1, 8008c66 <__ascii_mbtowc+0x6>
 8008c64:	a901      	add	r1, sp, #4
 8008c66:	b142      	cbz	r2, 8008c7a <__ascii_mbtowc+0x1a>
 8008c68:	b14b      	cbz	r3, 8008c7e <__ascii_mbtowc+0x1e>
 8008c6a:	7813      	ldrb	r3, [r2, #0]
 8008c6c:	600b      	str	r3, [r1, #0]
 8008c6e:	7812      	ldrb	r2, [r2, #0]
 8008c70:	1e10      	subs	r0, r2, #0
 8008c72:	bf18      	it	ne
 8008c74:	2001      	movne	r0, #1
 8008c76:	b002      	add	sp, #8
 8008c78:	4770      	bx	lr
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	e7fb      	b.n	8008c76 <__ascii_mbtowc+0x16>
 8008c7e:	f06f 0001 	mvn.w	r0, #1
 8008c82:	e7f8      	b.n	8008c76 <__ascii_mbtowc+0x16>

08008c84 <__ascii_wctomb>:
 8008c84:	b149      	cbz	r1, 8008c9a <__ascii_wctomb+0x16>
 8008c86:	2aff      	cmp	r2, #255	; 0xff
 8008c88:	bf85      	ittet	hi
 8008c8a:	238a      	movhi	r3, #138	; 0x8a
 8008c8c:	6003      	strhi	r3, [r0, #0]
 8008c8e:	700a      	strbls	r2, [r1, #0]
 8008c90:	f04f 30ff 	movhi.w	r0, #4294967295
 8008c94:	bf98      	it	ls
 8008c96:	2001      	movls	r0, #1
 8008c98:	4770      	bx	lr
 8008c9a:	4608      	mov	r0, r1
 8008c9c:	4770      	bx	lr
	...

08008ca0 <fiprintf>:
 8008ca0:	b40e      	push	{r1, r2, r3}
 8008ca2:	b503      	push	{r0, r1, lr}
 8008ca4:	4601      	mov	r1, r0
 8008ca6:	ab03      	add	r3, sp, #12
 8008ca8:	4805      	ldr	r0, [pc, #20]	; (8008cc0 <fiprintf+0x20>)
 8008caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cae:	6800      	ldr	r0, [r0, #0]
 8008cb0:	9301      	str	r3, [sp, #4]
 8008cb2:	f000 f831 	bl	8008d18 <_vfiprintf_r>
 8008cb6:	b002      	add	sp, #8
 8008cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cbc:	b003      	add	sp, #12
 8008cbe:	4770      	bx	lr
 8008cc0:	20000090 	.word	0x20000090

08008cc4 <__sfputc_r>:
 8008cc4:	6893      	ldr	r3, [r2, #8]
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	b410      	push	{r4}
 8008ccc:	6093      	str	r3, [r2, #8]
 8008cce:	da08      	bge.n	8008ce2 <__sfputc_r+0x1e>
 8008cd0:	6994      	ldr	r4, [r2, #24]
 8008cd2:	42a3      	cmp	r3, r4
 8008cd4:	db01      	blt.n	8008cda <__sfputc_r+0x16>
 8008cd6:	290a      	cmp	r1, #10
 8008cd8:	d103      	bne.n	8008ce2 <__sfputc_r+0x1e>
 8008cda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cde:	f000 b935 	b.w	8008f4c <__swbuf_r>
 8008ce2:	6813      	ldr	r3, [r2, #0]
 8008ce4:	1c58      	adds	r0, r3, #1
 8008ce6:	6010      	str	r0, [r2, #0]
 8008ce8:	7019      	strb	r1, [r3, #0]
 8008cea:	4608      	mov	r0, r1
 8008cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <__sfputs_r>:
 8008cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	460f      	mov	r7, r1
 8008cf8:	4614      	mov	r4, r2
 8008cfa:	18d5      	adds	r5, r2, r3
 8008cfc:	42ac      	cmp	r4, r5
 8008cfe:	d101      	bne.n	8008d04 <__sfputs_r+0x12>
 8008d00:	2000      	movs	r0, #0
 8008d02:	e007      	b.n	8008d14 <__sfputs_r+0x22>
 8008d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d08:	463a      	mov	r2, r7
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	f7ff ffda 	bl	8008cc4 <__sfputc_r>
 8008d10:	1c43      	adds	r3, r0, #1
 8008d12:	d1f3      	bne.n	8008cfc <__sfputs_r+0xa>
 8008d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d18 <_vfiprintf_r>:
 8008d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1c:	460d      	mov	r5, r1
 8008d1e:	b09d      	sub	sp, #116	; 0x74
 8008d20:	4614      	mov	r4, r2
 8008d22:	4698      	mov	r8, r3
 8008d24:	4606      	mov	r6, r0
 8008d26:	b118      	cbz	r0, 8008d30 <_vfiprintf_r+0x18>
 8008d28:	6a03      	ldr	r3, [r0, #32]
 8008d2a:	b90b      	cbnz	r3, 8008d30 <_vfiprintf_r+0x18>
 8008d2c:	f7fe fb18 	bl	8007360 <__sinit>
 8008d30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d32:	07d9      	lsls	r1, r3, #31
 8008d34:	d405      	bmi.n	8008d42 <_vfiprintf_r+0x2a>
 8008d36:	89ab      	ldrh	r3, [r5, #12]
 8008d38:	059a      	lsls	r2, r3, #22
 8008d3a:	d402      	bmi.n	8008d42 <_vfiprintf_r+0x2a>
 8008d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d3e:	f7fe fc59 	bl	80075f4 <__retarget_lock_acquire_recursive>
 8008d42:	89ab      	ldrh	r3, [r5, #12]
 8008d44:	071b      	lsls	r3, r3, #28
 8008d46:	d501      	bpl.n	8008d4c <_vfiprintf_r+0x34>
 8008d48:	692b      	ldr	r3, [r5, #16]
 8008d4a:	b99b      	cbnz	r3, 8008d74 <_vfiprintf_r+0x5c>
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f000 f93a 	bl	8008fc8 <__swsetup_r>
 8008d54:	b170      	cbz	r0, 8008d74 <_vfiprintf_r+0x5c>
 8008d56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d58:	07dc      	lsls	r4, r3, #31
 8008d5a:	d504      	bpl.n	8008d66 <_vfiprintf_r+0x4e>
 8008d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d60:	b01d      	add	sp, #116	; 0x74
 8008d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d66:	89ab      	ldrh	r3, [r5, #12]
 8008d68:	0598      	lsls	r0, r3, #22
 8008d6a:	d4f7      	bmi.n	8008d5c <_vfiprintf_r+0x44>
 8008d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d6e:	f7fe fc42 	bl	80075f6 <__retarget_lock_release_recursive>
 8008d72:	e7f3      	b.n	8008d5c <_vfiprintf_r+0x44>
 8008d74:	2300      	movs	r3, #0
 8008d76:	9309      	str	r3, [sp, #36]	; 0x24
 8008d78:	2320      	movs	r3, #32
 8008d7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d82:	2330      	movs	r3, #48	; 0x30
 8008d84:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008f38 <_vfiprintf_r+0x220>
 8008d88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d8c:	f04f 0901 	mov.w	r9, #1
 8008d90:	4623      	mov	r3, r4
 8008d92:	469a      	mov	sl, r3
 8008d94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d98:	b10a      	cbz	r2, 8008d9e <_vfiprintf_r+0x86>
 8008d9a:	2a25      	cmp	r2, #37	; 0x25
 8008d9c:	d1f9      	bne.n	8008d92 <_vfiprintf_r+0x7a>
 8008d9e:	ebba 0b04 	subs.w	fp, sl, r4
 8008da2:	d00b      	beq.n	8008dbc <_vfiprintf_r+0xa4>
 8008da4:	465b      	mov	r3, fp
 8008da6:	4622      	mov	r2, r4
 8008da8:	4629      	mov	r1, r5
 8008daa:	4630      	mov	r0, r6
 8008dac:	f7ff ffa1 	bl	8008cf2 <__sfputs_r>
 8008db0:	3001      	adds	r0, #1
 8008db2:	f000 80a9 	beq.w	8008f08 <_vfiprintf_r+0x1f0>
 8008db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008db8:	445a      	add	r2, fp
 8008dba:	9209      	str	r2, [sp, #36]	; 0x24
 8008dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 80a1 	beq.w	8008f08 <_vfiprintf_r+0x1f0>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8008dcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dd0:	f10a 0a01 	add.w	sl, sl, #1
 8008dd4:	9304      	str	r3, [sp, #16]
 8008dd6:	9307      	str	r3, [sp, #28]
 8008dd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ddc:	931a      	str	r3, [sp, #104]	; 0x68
 8008dde:	4654      	mov	r4, sl
 8008de0:	2205      	movs	r2, #5
 8008de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de6:	4854      	ldr	r0, [pc, #336]	; (8008f38 <_vfiprintf_r+0x220>)
 8008de8:	f7f7 f9f2 	bl	80001d0 <memchr>
 8008dec:	9a04      	ldr	r2, [sp, #16]
 8008dee:	b9d8      	cbnz	r0, 8008e28 <_vfiprintf_r+0x110>
 8008df0:	06d1      	lsls	r1, r2, #27
 8008df2:	bf44      	itt	mi
 8008df4:	2320      	movmi	r3, #32
 8008df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dfa:	0713      	lsls	r3, r2, #28
 8008dfc:	bf44      	itt	mi
 8008dfe:	232b      	movmi	r3, #43	; 0x2b
 8008e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e04:	f89a 3000 	ldrb.w	r3, [sl]
 8008e08:	2b2a      	cmp	r3, #42	; 0x2a
 8008e0a:	d015      	beq.n	8008e38 <_vfiprintf_r+0x120>
 8008e0c:	9a07      	ldr	r2, [sp, #28]
 8008e0e:	4654      	mov	r4, sl
 8008e10:	2000      	movs	r0, #0
 8008e12:	f04f 0c0a 	mov.w	ip, #10
 8008e16:	4621      	mov	r1, r4
 8008e18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e1c:	3b30      	subs	r3, #48	; 0x30
 8008e1e:	2b09      	cmp	r3, #9
 8008e20:	d94d      	bls.n	8008ebe <_vfiprintf_r+0x1a6>
 8008e22:	b1b0      	cbz	r0, 8008e52 <_vfiprintf_r+0x13a>
 8008e24:	9207      	str	r2, [sp, #28]
 8008e26:	e014      	b.n	8008e52 <_vfiprintf_r+0x13a>
 8008e28:	eba0 0308 	sub.w	r3, r0, r8
 8008e2c:	fa09 f303 	lsl.w	r3, r9, r3
 8008e30:	4313      	orrs	r3, r2
 8008e32:	9304      	str	r3, [sp, #16]
 8008e34:	46a2      	mov	sl, r4
 8008e36:	e7d2      	b.n	8008dde <_vfiprintf_r+0xc6>
 8008e38:	9b03      	ldr	r3, [sp, #12]
 8008e3a:	1d19      	adds	r1, r3, #4
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	9103      	str	r1, [sp, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	bfbb      	ittet	lt
 8008e44:	425b      	neglt	r3, r3
 8008e46:	f042 0202 	orrlt.w	r2, r2, #2
 8008e4a:	9307      	strge	r3, [sp, #28]
 8008e4c:	9307      	strlt	r3, [sp, #28]
 8008e4e:	bfb8      	it	lt
 8008e50:	9204      	strlt	r2, [sp, #16]
 8008e52:	7823      	ldrb	r3, [r4, #0]
 8008e54:	2b2e      	cmp	r3, #46	; 0x2e
 8008e56:	d10c      	bne.n	8008e72 <_vfiprintf_r+0x15a>
 8008e58:	7863      	ldrb	r3, [r4, #1]
 8008e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e5c:	d134      	bne.n	8008ec8 <_vfiprintf_r+0x1b0>
 8008e5e:	9b03      	ldr	r3, [sp, #12]
 8008e60:	1d1a      	adds	r2, r3, #4
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	9203      	str	r2, [sp, #12]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	bfb8      	it	lt
 8008e6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e6e:	3402      	adds	r4, #2
 8008e70:	9305      	str	r3, [sp, #20]
 8008e72:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008f48 <_vfiprintf_r+0x230>
 8008e76:	7821      	ldrb	r1, [r4, #0]
 8008e78:	2203      	movs	r2, #3
 8008e7a:	4650      	mov	r0, sl
 8008e7c:	f7f7 f9a8 	bl	80001d0 <memchr>
 8008e80:	b138      	cbz	r0, 8008e92 <_vfiprintf_r+0x17a>
 8008e82:	9b04      	ldr	r3, [sp, #16]
 8008e84:	eba0 000a 	sub.w	r0, r0, sl
 8008e88:	2240      	movs	r2, #64	; 0x40
 8008e8a:	4082      	lsls	r2, r0
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	3401      	adds	r4, #1
 8008e90:	9304      	str	r3, [sp, #16]
 8008e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e96:	4829      	ldr	r0, [pc, #164]	; (8008f3c <_vfiprintf_r+0x224>)
 8008e98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e9c:	2206      	movs	r2, #6
 8008e9e:	f7f7 f997 	bl	80001d0 <memchr>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	d03f      	beq.n	8008f26 <_vfiprintf_r+0x20e>
 8008ea6:	4b26      	ldr	r3, [pc, #152]	; (8008f40 <_vfiprintf_r+0x228>)
 8008ea8:	bb1b      	cbnz	r3, 8008ef2 <_vfiprintf_r+0x1da>
 8008eaa:	9b03      	ldr	r3, [sp, #12]
 8008eac:	3307      	adds	r3, #7
 8008eae:	f023 0307 	bic.w	r3, r3, #7
 8008eb2:	3308      	adds	r3, #8
 8008eb4:	9303      	str	r3, [sp, #12]
 8008eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eb8:	443b      	add	r3, r7
 8008eba:	9309      	str	r3, [sp, #36]	; 0x24
 8008ebc:	e768      	b.n	8008d90 <_vfiprintf_r+0x78>
 8008ebe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	e7a6      	b.n	8008e16 <_vfiprintf_r+0xfe>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	3401      	adds	r4, #1
 8008ecc:	9305      	str	r3, [sp, #20]
 8008ece:	4619      	mov	r1, r3
 8008ed0:	f04f 0c0a 	mov.w	ip, #10
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eda:	3a30      	subs	r2, #48	; 0x30
 8008edc:	2a09      	cmp	r2, #9
 8008ede:	d903      	bls.n	8008ee8 <_vfiprintf_r+0x1d0>
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d0c6      	beq.n	8008e72 <_vfiprintf_r+0x15a>
 8008ee4:	9105      	str	r1, [sp, #20]
 8008ee6:	e7c4      	b.n	8008e72 <_vfiprintf_r+0x15a>
 8008ee8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eec:	4604      	mov	r4, r0
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e7f0      	b.n	8008ed4 <_vfiprintf_r+0x1bc>
 8008ef2:	ab03      	add	r3, sp, #12
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	462a      	mov	r2, r5
 8008ef8:	4b12      	ldr	r3, [pc, #72]	; (8008f44 <_vfiprintf_r+0x22c>)
 8008efa:	a904      	add	r1, sp, #16
 8008efc:	4630      	mov	r0, r6
 8008efe:	f7fd fdef 	bl	8006ae0 <_printf_float>
 8008f02:	4607      	mov	r7, r0
 8008f04:	1c78      	adds	r0, r7, #1
 8008f06:	d1d6      	bne.n	8008eb6 <_vfiprintf_r+0x19e>
 8008f08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f0a:	07d9      	lsls	r1, r3, #31
 8008f0c:	d405      	bmi.n	8008f1a <_vfiprintf_r+0x202>
 8008f0e:	89ab      	ldrh	r3, [r5, #12]
 8008f10:	059a      	lsls	r2, r3, #22
 8008f12:	d402      	bmi.n	8008f1a <_vfiprintf_r+0x202>
 8008f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f16:	f7fe fb6e 	bl	80075f6 <__retarget_lock_release_recursive>
 8008f1a:	89ab      	ldrh	r3, [r5, #12]
 8008f1c:	065b      	lsls	r3, r3, #25
 8008f1e:	f53f af1d 	bmi.w	8008d5c <_vfiprintf_r+0x44>
 8008f22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f24:	e71c      	b.n	8008d60 <_vfiprintf_r+0x48>
 8008f26:	ab03      	add	r3, sp, #12
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	462a      	mov	r2, r5
 8008f2c:	4b05      	ldr	r3, [pc, #20]	; (8008f44 <_vfiprintf_r+0x22c>)
 8008f2e:	a904      	add	r1, sp, #16
 8008f30:	4630      	mov	r0, r6
 8008f32:	f7fe f879 	bl	8007028 <_printf_i>
 8008f36:	e7e4      	b.n	8008f02 <_vfiprintf_r+0x1ea>
 8008f38:	080098a3 	.word	0x080098a3
 8008f3c:	080098ad 	.word	0x080098ad
 8008f40:	08006ae1 	.word	0x08006ae1
 8008f44:	08008cf3 	.word	0x08008cf3
 8008f48:	080098a9 	.word	0x080098a9

08008f4c <__swbuf_r>:
 8008f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4e:	460e      	mov	r6, r1
 8008f50:	4614      	mov	r4, r2
 8008f52:	4605      	mov	r5, r0
 8008f54:	b118      	cbz	r0, 8008f5e <__swbuf_r+0x12>
 8008f56:	6a03      	ldr	r3, [r0, #32]
 8008f58:	b90b      	cbnz	r3, 8008f5e <__swbuf_r+0x12>
 8008f5a:	f7fe fa01 	bl	8007360 <__sinit>
 8008f5e:	69a3      	ldr	r3, [r4, #24]
 8008f60:	60a3      	str	r3, [r4, #8]
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	071a      	lsls	r2, r3, #28
 8008f66:	d525      	bpl.n	8008fb4 <__swbuf_r+0x68>
 8008f68:	6923      	ldr	r3, [r4, #16]
 8008f6a:	b31b      	cbz	r3, 8008fb4 <__swbuf_r+0x68>
 8008f6c:	6823      	ldr	r3, [r4, #0]
 8008f6e:	6922      	ldr	r2, [r4, #16]
 8008f70:	1a98      	subs	r0, r3, r2
 8008f72:	6963      	ldr	r3, [r4, #20]
 8008f74:	b2f6      	uxtb	r6, r6
 8008f76:	4283      	cmp	r3, r0
 8008f78:	4637      	mov	r7, r6
 8008f7a:	dc04      	bgt.n	8008f86 <__swbuf_r+0x3a>
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	4628      	mov	r0, r5
 8008f80:	f7ff fe12 	bl	8008ba8 <_fflush_r>
 8008f84:	b9e0      	cbnz	r0, 8008fc0 <__swbuf_r+0x74>
 8008f86:	68a3      	ldr	r3, [r4, #8]
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	60a3      	str	r3, [r4, #8]
 8008f8c:	6823      	ldr	r3, [r4, #0]
 8008f8e:	1c5a      	adds	r2, r3, #1
 8008f90:	6022      	str	r2, [r4, #0]
 8008f92:	701e      	strb	r6, [r3, #0]
 8008f94:	6962      	ldr	r2, [r4, #20]
 8008f96:	1c43      	adds	r3, r0, #1
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d004      	beq.n	8008fa6 <__swbuf_r+0x5a>
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	07db      	lsls	r3, r3, #31
 8008fa0:	d506      	bpl.n	8008fb0 <__swbuf_r+0x64>
 8008fa2:	2e0a      	cmp	r6, #10
 8008fa4:	d104      	bne.n	8008fb0 <__swbuf_r+0x64>
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	4628      	mov	r0, r5
 8008faa:	f7ff fdfd 	bl	8008ba8 <_fflush_r>
 8008fae:	b938      	cbnz	r0, 8008fc0 <__swbuf_r+0x74>
 8008fb0:	4638      	mov	r0, r7
 8008fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f000 f806 	bl	8008fc8 <__swsetup_r>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d0d5      	beq.n	8008f6c <__swbuf_r+0x20>
 8008fc0:	f04f 37ff 	mov.w	r7, #4294967295
 8008fc4:	e7f4      	b.n	8008fb0 <__swbuf_r+0x64>
	...

08008fc8 <__swsetup_r>:
 8008fc8:	b538      	push	{r3, r4, r5, lr}
 8008fca:	4b2a      	ldr	r3, [pc, #168]	; (8009074 <__swsetup_r+0xac>)
 8008fcc:	4605      	mov	r5, r0
 8008fce:	6818      	ldr	r0, [r3, #0]
 8008fd0:	460c      	mov	r4, r1
 8008fd2:	b118      	cbz	r0, 8008fdc <__swsetup_r+0x14>
 8008fd4:	6a03      	ldr	r3, [r0, #32]
 8008fd6:	b90b      	cbnz	r3, 8008fdc <__swsetup_r+0x14>
 8008fd8:	f7fe f9c2 	bl	8007360 <__sinit>
 8008fdc:	89a3      	ldrh	r3, [r4, #12]
 8008fde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fe2:	0718      	lsls	r0, r3, #28
 8008fe4:	d422      	bmi.n	800902c <__swsetup_r+0x64>
 8008fe6:	06d9      	lsls	r1, r3, #27
 8008fe8:	d407      	bmi.n	8008ffa <__swsetup_r+0x32>
 8008fea:	2309      	movs	r3, #9
 8008fec:	602b      	str	r3, [r5, #0]
 8008fee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff8:	e034      	b.n	8009064 <__swsetup_r+0x9c>
 8008ffa:	0758      	lsls	r0, r3, #29
 8008ffc:	d512      	bpl.n	8009024 <__swsetup_r+0x5c>
 8008ffe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009000:	b141      	cbz	r1, 8009014 <__swsetup_r+0x4c>
 8009002:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009006:	4299      	cmp	r1, r3
 8009008:	d002      	beq.n	8009010 <__swsetup_r+0x48>
 800900a:	4628      	mov	r0, r5
 800900c:	f7ff f97e 	bl	800830c <_free_r>
 8009010:	2300      	movs	r3, #0
 8009012:	6363      	str	r3, [r4, #52]	; 0x34
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800901a:	81a3      	strh	r3, [r4, #12]
 800901c:	2300      	movs	r3, #0
 800901e:	6063      	str	r3, [r4, #4]
 8009020:	6923      	ldr	r3, [r4, #16]
 8009022:	6023      	str	r3, [r4, #0]
 8009024:	89a3      	ldrh	r3, [r4, #12]
 8009026:	f043 0308 	orr.w	r3, r3, #8
 800902a:	81a3      	strh	r3, [r4, #12]
 800902c:	6923      	ldr	r3, [r4, #16]
 800902e:	b94b      	cbnz	r3, 8009044 <__swsetup_r+0x7c>
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800903a:	d003      	beq.n	8009044 <__swsetup_r+0x7c>
 800903c:	4621      	mov	r1, r4
 800903e:	4628      	mov	r0, r5
 8009040:	f000 f840 	bl	80090c4 <__smakebuf_r>
 8009044:	89a0      	ldrh	r0, [r4, #12]
 8009046:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800904a:	f010 0301 	ands.w	r3, r0, #1
 800904e:	d00a      	beq.n	8009066 <__swsetup_r+0x9e>
 8009050:	2300      	movs	r3, #0
 8009052:	60a3      	str	r3, [r4, #8]
 8009054:	6963      	ldr	r3, [r4, #20]
 8009056:	425b      	negs	r3, r3
 8009058:	61a3      	str	r3, [r4, #24]
 800905a:	6923      	ldr	r3, [r4, #16]
 800905c:	b943      	cbnz	r3, 8009070 <__swsetup_r+0xa8>
 800905e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009062:	d1c4      	bne.n	8008fee <__swsetup_r+0x26>
 8009064:	bd38      	pop	{r3, r4, r5, pc}
 8009066:	0781      	lsls	r1, r0, #30
 8009068:	bf58      	it	pl
 800906a:	6963      	ldrpl	r3, [r4, #20]
 800906c:	60a3      	str	r3, [r4, #8]
 800906e:	e7f4      	b.n	800905a <__swsetup_r+0x92>
 8009070:	2000      	movs	r0, #0
 8009072:	e7f7      	b.n	8009064 <__swsetup_r+0x9c>
 8009074:	20000090 	.word	0x20000090

08009078 <__swhatbuf_r>:
 8009078:	b570      	push	{r4, r5, r6, lr}
 800907a:	460c      	mov	r4, r1
 800907c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009080:	2900      	cmp	r1, #0
 8009082:	b096      	sub	sp, #88	; 0x58
 8009084:	4615      	mov	r5, r2
 8009086:	461e      	mov	r6, r3
 8009088:	da0d      	bge.n	80090a6 <__swhatbuf_r+0x2e>
 800908a:	89a3      	ldrh	r3, [r4, #12]
 800908c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009090:	f04f 0100 	mov.w	r1, #0
 8009094:	bf0c      	ite	eq
 8009096:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800909a:	2340      	movne	r3, #64	; 0x40
 800909c:	2000      	movs	r0, #0
 800909e:	6031      	str	r1, [r6, #0]
 80090a0:	602b      	str	r3, [r5, #0]
 80090a2:	b016      	add	sp, #88	; 0x58
 80090a4:	bd70      	pop	{r4, r5, r6, pc}
 80090a6:	466a      	mov	r2, sp
 80090a8:	f000 f848 	bl	800913c <_fstat_r>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	dbec      	blt.n	800908a <__swhatbuf_r+0x12>
 80090b0:	9901      	ldr	r1, [sp, #4]
 80090b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80090b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80090ba:	4259      	negs	r1, r3
 80090bc:	4159      	adcs	r1, r3
 80090be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090c2:	e7eb      	b.n	800909c <__swhatbuf_r+0x24>

080090c4 <__smakebuf_r>:
 80090c4:	898b      	ldrh	r3, [r1, #12]
 80090c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090c8:	079d      	lsls	r5, r3, #30
 80090ca:	4606      	mov	r6, r0
 80090cc:	460c      	mov	r4, r1
 80090ce:	d507      	bpl.n	80090e0 <__smakebuf_r+0x1c>
 80090d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	6123      	str	r3, [r4, #16]
 80090d8:	2301      	movs	r3, #1
 80090da:	6163      	str	r3, [r4, #20]
 80090dc:	b002      	add	sp, #8
 80090de:	bd70      	pop	{r4, r5, r6, pc}
 80090e0:	ab01      	add	r3, sp, #4
 80090e2:	466a      	mov	r2, sp
 80090e4:	f7ff ffc8 	bl	8009078 <__swhatbuf_r>
 80090e8:	9900      	ldr	r1, [sp, #0]
 80090ea:	4605      	mov	r5, r0
 80090ec:	4630      	mov	r0, r6
 80090ee:	f7fd fbcb 	bl	8006888 <_malloc_r>
 80090f2:	b948      	cbnz	r0, 8009108 <__smakebuf_r+0x44>
 80090f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090f8:	059a      	lsls	r2, r3, #22
 80090fa:	d4ef      	bmi.n	80090dc <__smakebuf_r+0x18>
 80090fc:	f023 0303 	bic.w	r3, r3, #3
 8009100:	f043 0302 	orr.w	r3, r3, #2
 8009104:	81a3      	strh	r3, [r4, #12]
 8009106:	e7e3      	b.n	80090d0 <__smakebuf_r+0xc>
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	6020      	str	r0, [r4, #0]
 800910c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009110:	81a3      	strh	r3, [r4, #12]
 8009112:	9b00      	ldr	r3, [sp, #0]
 8009114:	6163      	str	r3, [r4, #20]
 8009116:	9b01      	ldr	r3, [sp, #4]
 8009118:	6120      	str	r0, [r4, #16]
 800911a:	b15b      	cbz	r3, 8009134 <__smakebuf_r+0x70>
 800911c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009120:	4630      	mov	r0, r6
 8009122:	f000 f81d 	bl	8009160 <_isatty_r>
 8009126:	b128      	cbz	r0, 8009134 <__smakebuf_r+0x70>
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	f023 0303 	bic.w	r3, r3, #3
 800912e:	f043 0301 	orr.w	r3, r3, #1
 8009132:	81a3      	strh	r3, [r4, #12]
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	431d      	orrs	r5, r3
 8009138:	81a5      	strh	r5, [r4, #12]
 800913a:	e7cf      	b.n	80090dc <__smakebuf_r+0x18>

0800913c <_fstat_r>:
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	4d07      	ldr	r5, [pc, #28]	; (800915c <_fstat_r+0x20>)
 8009140:	2300      	movs	r3, #0
 8009142:	4604      	mov	r4, r0
 8009144:	4608      	mov	r0, r1
 8009146:	4611      	mov	r1, r2
 8009148:	602b      	str	r3, [r5, #0]
 800914a:	f7f8 ff34 	bl	8001fb6 <_fstat>
 800914e:	1c43      	adds	r3, r0, #1
 8009150:	d102      	bne.n	8009158 <_fstat_r+0x1c>
 8009152:	682b      	ldr	r3, [r5, #0]
 8009154:	b103      	cbz	r3, 8009158 <_fstat_r+0x1c>
 8009156:	6023      	str	r3, [r4, #0]
 8009158:	bd38      	pop	{r3, r4, r5, pc}
 800915a:	bf00      	nop
 800915c:	2000073c 	.word	0x2000073c

08009160 <_isatty_r>:
 8009160:	b538      	push	{r3, r4, r5, lr}
 8009162:	4d06      	ldr	r5, [pc, #24]	; (800917c <_isatty_r+0x1c>)
 8009164:	2300      	movs	r3, #0
 8009166:	4604      	mov	r4, r0
 8009168:	4608      	mov	r0, r1
 800916a:	602b      	str	r3, [r5, #0]
 800916c:	f7f8 ff33 	bl	8001fd6 <_isatty>
 8009170:	1c43      	adds	r3, r0, #1
 8009172:	d102      	bne.n	800917a <_isatty_r+0x1a>
 8009174:	682b      	ldr	r3, [r5, #0]
 8009176:	b103      	cbz	r3, 800917a <_isatty_r+0x1a>
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	bd38      	pop	{r3, r4, r5, pc}
 800917c:	2000073c 	.word	0x2000073c

08009180 <_init>:
 8009180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009182:	bf00      	nop
 8009184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009186:	bc08      	pop	{r3}
 8009188:	469e      	mov	lr, r3
 800918a:	4770      	bx	lr

0800918c <_fini>:
 800918c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800918e:	bf00      	nop
 8009190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009192:	bc08      	pop	{r3}
 8009194:	469e      	mov	lr, r3
 8009196:	4770      	bx	lr
