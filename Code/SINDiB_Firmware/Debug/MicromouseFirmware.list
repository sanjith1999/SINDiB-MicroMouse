
MicromouseFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006d78  08006d78  00016d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d98  08006d98  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006d98  08006d98  00016d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006da0  08006da0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006da0  08006da0  00016da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006da4  08006da4  00016da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000032e8  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200032fc  200032fc  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   000130bb  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002da9  00000000  00000000  00033142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010e0  00000000  00000000  00035ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d24  00000000  00000000  00036fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024aae  00000000  00000000  00037cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000170f1  00000000  00000000  0005c7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cff67  00000000  00000000  00073893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000472c  00000000  00000000  001437fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00147f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d60 	.word	0x08006d60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08006d60 	.word	0x08006d60

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__gedf2>:
 8000540:	f04f 3cff 	mov.w	ip, #4294967295
 8000544:	e006      	b.n	8000554 <__cmpdf2+0x4>
 8000546:	bf00      	nop

08000548 <__ledf2>:
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	e002      	b.n	8000554 <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__cmpdf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800055c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000564:	bf18      	it	ne
 8000566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800056a:	d01b      	beq.n	80005a4 <__cmpdf2+0x54>
 800056c:	b001      	add	sp, #4
 800056e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000572:	bf0c      	ite	eq
 8000574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000578:	ea91 0f03 	teqne	r1, r3
 800057c:	bf02      	ittt	eq
 800057e:	ea90 0f02 	teqeq	r0, r2
 8000582:	2000      	moveq	r0, #0
 8000584:	4770      	bxeq	lr
 8000586:	f110 0f00 	cmn.w	r0, #0
 800058a:	ea91 0f03 	teq	r1, r3
 800058e:	bf58      	it	pl
 8000590:	4299      	cmppl	r1, r3
 8000592:	bf08      	it	eq
 8000594:	4290      	cmpeq	r0, r2
 8000596:	bf2c      	ite	cs
 8000598:	17d8      	asrcs	r0, r3, #31
 800059a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800059e:	f040 0001 	orr.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ac:	d102      	bne.n	80005b4 <__cmpdf2+0x64>
 80005ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005b2:	d107      	bne.n	80005c4 <__cmpdf2+0x74>
 80005b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d1d6      	bne.n	800056c <__cmpdf2+0x1c>
 80005be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005c2:	d0d3      	beq.n	800056c <__cmpdf2+0x1c>
 80005c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <__aeabi_cdrcmple>:
 80005cc:	4684      	mov	ip, r0
 80005ce:	4610      	mov	r0, r2
 80005d0:	4662      	mov	r2, ip
 80005d2:	468c      	mov	ip, r1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4663      	mov	r3, ip
 80005d8:	e000      	b.n	80005dc <__aeabi_cdcmpeq>
 80005da:	bf00      	nop

080005dc <__aeabi_cdcmpeq>:
 80005dc:	b501      	push	{r0, lr}
 80005de:	f7ff ffb7 	bl	8000550 <__cmpdf2>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	bf48      	it	mi
 80005e6:	f110 0f00 	cmnmi.w	r0, #0
 80005ea:	bd01      	pop	{r0, pc}

080005ec <__aeabi_dcmpeq>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff fff4 	bl	80005dc <__aeabi_cdcmpeq>
 80005f4:	bf0c      	ite	eq
 80005f6:	2001      	moveq	r0, #1
 80005f8:	2000      	movne	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_dcmplt>:
 8000600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000604:	f7ff ffea 	bl	80005dc <__aeabi_cdcmpeq>
 8000608:	bf34      	ite	cc
 800060a:	2001      	movcc	r0, #1
 800060c:	2000      	movcs	r0, #0
 800060e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000612:	bf00      	nop

08000614 <__aeabi_dcmple>:
 8000614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000618:	f7ff ffe0 	bl	80005dc <__aeabi_cdcmpeq>
 800061c:	bf94      	ite	ls
 800061e:	2001      	movls	r0, #1
 8000620:	2000      	movhi	r0, #0
 8000622:	f85d fb08 	ldr.w	pc, [sp], #8
 8000626:	bf00      	nop

08000628 <__aeabi_dcmpge>:
 8000628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800062c:	f7ff ffce 	bl	80005cc <__aeabi_cdrcmple>
 8000630:	bf94      	ite	ls
 8000632:	2001      	movls	r0, #1
 8000634:	2000      	movhi	r0, #0
 8000636:	f85d fb08 	ldr.w	pc, [sp], #8
 800063a:	bf00      	nop

0800063c <__aeabi_dcmpgt>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff ffc4 	bl	80005cc <__aeabi_cdrcmple>
 8000644:	bf34      	ite	cc
 8000646:	2001      	movcc	r0, #1
 8000648:	2000      	movcs	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_uldivmod>:
 8000650:	b953      	cbnz	r3, 8000668 <__aeabi_uldivmod+0x18>
 8000652:	b94a      	cbnz	r2, 8000668 <__aeabi_uldivmod+0x18>
 8000654:	2900      	cmp	r1, #0
 8000656:	bf08      	it	eq
 8000658:	2800      	cmpeq	r0, #0
 800065a:	bf1c      	itt	ne
 800065c:	f04f 31ff 	movne.w	r1, #4294967295
 8000660:	f04f 30ff 	movne.w	r0, #4294967295
 8000664:	f000 b970 	b.w	8000948 <__aeabi_idiv0>
 8000668:	f1ad 0c08 	sub.w	ip, sp, #8
 800066c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000670:	f000 f806 	bl	8000680 <__udivmoddi4>
 8000674:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800067c:	b004      	add	sp, #16
 800067e:	4770      	bx	lr

08000680 <__udivmoddi4>:
 8000680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000684:	9e08      	ldr	r6, [sp, #32]
 8000686:	460d      	mov	r5, r1
 8000688:	4604      	mov	r4, r0
 800068a:	460f      	mov	r7, r1
 800068c:	2b00      	cmp	r3, #0
 800068e:	d14a      	bne.n	8000726 <__udivmoddi4+0xa6>
 8000690:	428a      	cmp	r2, r1
 8000692:	4694      	mov	ip, r2
 8000694:	d965      	bls.n	8000762 <__udivmoddi4+0xe2>
 8000696:	fab2 f382 	clz	r3, r2
 800069a:	b143      	cbz	r3, 80006ae <__udivmoddi4+0x2e>
 800069c:	fa02 fc03 	lsl.w	ip, r2, r3
 80006a0:	f1c3 0220 	rsb	r2, r3, #32
 80006a4:	409f      	lsls	r7, r3
 80006a6:	fa20 f202 	lsr.w	r2, r0, r2
 80006aa:	4317      	orrs	r7, r2
 80006ac:	409c      	lsls	r4, r3
 80006ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006b2:	fa1f f58c 	uxth.w	r5, ip
 80006b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80006ba:	0c22      	lsrs	r2, r4, #16
 80006bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80006c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80006c4:	fb01 f005 	mul.w	r0, r1, r5
 80006c8:	4290      	cmp	r0, r2
 80006ca:	d90a      	bls.n	80006e2 <__udivmoddi4+0x62>
 80006cc:	eb1c 0202 	adds.w	r2, ip, r2
 80006d0:	f101 37ff 	add.w	r7, r1, #4294967295
 80006d4:	f080 811c 	bcs.w	8000910 <__udivmoddi4+0x290>
 80006d8:	4290      	cmp	r0, r2
 80006da:	f240 8119 	bls.w	8000910 <__udivmoddi4+0x290>
 80006de:	3902      	subs	r1, #2
 80006e0:	4462      	add	r2, ip
 80006e2:	1a12      	subs	r2, r2, r0
 80006e4:	b2a4      	uxth	r4, r4
 80006e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80006ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80006ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006f2:	fb00 f505 	mul.w	r5, r0, r5
 80006f6:	42a5      	cmp	r5, r4
 80006f8:	d90a      	bls.n	8000710 <__udivmoddi4+0x90>
 80006fa:	eb1c 0404 	adds.w	r4, ip, r4
 80006fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000702:	f080 8107 	bcs.w	8000914 <__udivmoddi4+0x294>
 8000706:	42a5      	cmp	r5, r4
 8000708:	f240 8104 	bls.w	8000914 <__udivmoddi4+0x294>
 800070c:	4464      	add	r4, ip
 800070e:	3802      	subs	r0, #2
 8000710:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000714:	1b64      	subs	r4, r4, r5
 8000716:	2100      	movs	r1, #0
 8000718:	b11e      	cbz	r6, 8000722 <__udivmoddi4+0xa2>
 800071a:	40dc      	lsrs	r4, r3
 800071c:	2300      	movs	r3, #0
 800071e:	e9c6 4300 	strd	r4, r3, [r6]
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	428b      	cmp	r3, r1
 8000728:	d908      	bls.n	800073c <__udivmoddi4+0xbc>
 800072a:	2e00      	cmp	r6, #0
 800072c:	f000 80ed 	beq.w	800090a <__udivmoddi4+0x28a>
 8000730:	2100      	movs	r1, #0
 8000732:	e9c6 0500 	strd	r0, r5, [r6]
 8000736:	4608      	mov	r0, r1
 8000738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073c:	fab3 f183 	clz	r1, r3
 8000740:	2900      	cmp	r1, #0
 8000742:	d149      	bne.n	80007d8 <__udivmoddi4+0x158>
 8000744:	42ab      	cmp	r3, r5
 8000746:	d302      	bcc.n	800074e <__udivmoddi4+0xce>
 8000748:	4282      	cmp	r2, r0
 800074a:	f200 80f8 	bhi.w	800093e <__udivmoddi4+0x2be>
 800074e:	1a84      	subs	r4, r0, r2
 8000750:	eb65 0203 	sbc.w	r2, r5, r3
 8000754:	2001      	movs	r0, #1
 8000756:	4617      	mov	r7, r2
 8000758:	2e00      	cmp	r6, #0
 800075a:	d0e2      	beq.n	8000722 <__udivmoddi4+0xa2>
 800075c:	e9c6 4700 	strd	r4, r7, [r6]
 8000760:	e7df      	b.n	8000722 <__udivmoddi4+0xa2>
 8000762:	b902      	cbnz	r2, 8000766 <__udivmoddi4+0xe6>
 8000764:	deff      	udf	#255	; 0xff
 8000766:	fab2 f382 	clz	r3, r2
 800076a:	2b00      	cmp	r3, #0
 800076c:	f040 8090 	bne.w	8000890 <__udivmoddi4+0x210>
 8000770:	1a8a      	subs	r2, r1, r2
 8000772:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000776:	fa1f fe8c 	uxth.w	lr, ip
 800077a:	2101      	movs	r1, #1
 800077c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000780:	fb07 2015 	mls	r0, r7, r5, r2
 8000784:	0c22      	lsrs	r2, r4, #16
 8000786:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800078a:	fb0e f005 	mul.w	r0, lr, r5
 800078e:	4290      	cmp	r0, r2
 8000790:	d908      	bls.n	80007a4 <__udivmoddi4+0x124>
 8000792:	eb1c 0202 	adds.w	r2, ip, r2
 8000796:	f105 38ff 	add.w	r8, r5, #4294967295
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x122>
 800079c:	4290      	cmp	r0, r2
 800079e:	f200 80cb 	bhi.w	8000938 <__udivmoddi4+0x2b8>
 80007a2:	4645      	mov	r5, r8
 80007a4:	1a12      	subs	r2, r2, r0
 80007a6:	b2a4      	uxth	r4, r4
 80007a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80007ac:	fb07 2210 	mls	r2, r7, r0, r2
 80007b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007b4:	fb0e fe00 	mul.w	lr, lr, r0
 80007b8:	45a6      	cmp	lr, r4
 80007ba:	d908      	bls.n	80007ce <__udivmoddi4+0x14e>
 80007bc:	eb1c 0404 	adds.w	r4, ip, r4
 80007c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80007c4:	d202      	bcs.n	80007cc <__udivmoddi4+0x14c>
 80007c6:	45a6      	cmp	lr, r4
 80007c8:	f200 80bb 	bhi.w	8000942 <__udivmoddi4+0x2c2>
 80007cc:	4610      	mov	r0, r2
 80007ce:	eba4 040e 	sub.w	r4, r4, lr
 80007d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007d6:	e79f      	b.n	8000718 <__udivmoddi4+0x98>
 80007d8:	f1c1 0720 	rsb	r7, r1, #32
 80007dc:	408b      	lsls	r3, r1
 80007de:	fa22 fc07 	lsr.w	ip, r2, r7
 80007e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007e6:	fa05 f401 	lsl.w	r4, r5, r1
 80007ea:	fa20 f307 	lsr.w	r3, r0, r7
 80007ee:	40fd      	lsrs	r5, r7
 80007f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007f4:	4323      	orrs	r3, r4
 80007f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80007fa:	fa1f fe8c 	uxth.w	lr, ip
 80007fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000802:	0c1c      	lsrs	r4, r3, #16
 8000804:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000808:	fb08 f50e 	mul.w	r5, r8, lr
 800080c:	42a5      	cmp	r5, r4
 800080e:	fa02 f201 	lsl.w	r2, r2, r1
 8000812:	fa00 f001 	lsl.w	r0, r0, r1
 8000816:	d90b      	bls.n	8000830 <__udivmoddi4+0x1b0>
 8000818:	eb1c 0404 	adds.w	r4, ip, r4
 800081c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000820:	f080 8088 	bcs.w	8000934 <__udivmoddi4+0x2b4>
 8000824:	42a5      	cmp	r5, r4
 8000826:	f240 8085 	bls.w	8000934 <__udivmoddi4+0x2b4>
 800082a:	f1a8 0802 	sub.w	r8, r8, #2
 800082e:	4464      	add	r4, ip
 8000830:	1b64      	subs	r4, r4, r5
 8000832:	b29d      	uxth	r5, r3
 8000834:	fbb4 f3f9 	udiv	r3, r4, r9
 8000838:	fb09 4413 	mls	r4, r9, r3, r4
 800083c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000840:	fb03 fe0e 	mul.w	lr, r3, lr
 8000844:	45a6      	cmp	lr, r4
 8000846:	d908      	bls.n	800085a <__udivmoddi4+0x1da>
 8000848:	eb1c 0404 	adds.w	r4, ip, r4
 800084c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000850:	d26c      	bcs.n	800092c <__udivmoddi4+0x2ac>
 8000852:	45a6      	cmp	lr, r4
 8000854:	d96a      	bls.n	800092c <__udivmoddi4+0x2ac>
 8000856:	3b02      	subs	r3, #2
 8000858:	4464      	add	r4, ip
 800085a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800085e:	fba3 9502 	umull	r9, r5, r3, r2
 8000862:	eba4 040e 	sub.w	r4, r4, lr
 8000866:	42ac      	cmp	r4, r5
 8000868:	46c8      	mov	r8, r9
 800086a:	46ae      	mov	lr, r5
 800086c:	d356      	bcc.n	800091c <__udivmoddi4+0x29c>
 800086e:	d053      	beq.n	8000918 <__udivmoddi4+0x298>
 8000870:	b156      	cbz	r6, 8000888 <__udivmoddi4+0x208>
 8000872:	ebb0 0208 	subs.w	r2, r0, r8
 8000876:	eb64 040e 	sbc.w	r4, r4, lr
 800087a:	fa04 f707 	lsl.w	r7, r4, r7
 800087e:	40ca      	lsrs	r2, r1
 8000880:	40cc      	lsrs	r4, r1
 8000882:	4317      	orrs	r7, r2
 8000884:	e9c6 7400 	strd	r7, r4, [r6]
 8000888:	4618      	mov	r0, r3
 800088a:	2100      	movs	r1, #0
 800088c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000890:	f1c3 0120 	rsb	r1, r3, #32
 8000894:	fa02 fc03 	lsl.w	ip, r2, r3
 8000898:	fa20 f201 	lsr.w	r2, r0, r1
 800089c:	fa25 f101 	lsr.w	r1, r5, r1
 80008a0:	409d      	lsls	r5, r3
 80008a2:	432a      	orrs	r2, r5
 80008a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a8:	fa1f fe8c 	uxth.w	lr, ip
 80008ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80008b0:	fb07 1510 	mls	r5, r7, r0, r1
 80008b4:	0c11      	lsrs	r1, r2, #16
 80008b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008ba:	fb00 f50e 	mul.w	r5, r0, lr
 80008be:	428d      	cmp	r5, r1
 80008c0:	fa04 f403 	lsl.w	r4, r4, r3
 80008c4:	d908      	bls.n	80008d8 <__udivmoddi4+0x258>
 80008c6:	eb1c 0101 	adds.w	r1, ip, r1
 80008ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ce:	d22f      	bcs.n	8000930 <__udivmoddi4+0x2b0>
 80008d0:	428d      	cmp	r5, r1
 80008d2:	d92d      	bls.n	8000930 <__udivmoddi4+0x2b0>
 80008d4:	3802      	subs	r0, #2
 80008d6:	4461      	add	r1, ip
 80008d8:	1b49      	subs	r1, r1, r5
 80008da:	b292      	uxth	r2, r2
 80008dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80008e0:	fb07 1115 	mls	r1, r7, r5, r1
 80008e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008e8:	fb05 f10e 	mul.w	r1, r5, lr
 80008ec:	4291      	cmp	r1, r2
 80008ee:	d908      	bls.n	8000902 <__udivmoddi4+0x282>
 80008f0:	eb1c 0202 	adds.w	r2, ip, r2
 80008f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80008f8:	d216      	bcs.n	8000928 <__udivmoddi4+0x2a8>
 80008fa:	4291      	cmp	r1, r2
 80008fc:	d914      	bls.n	8000928 <__udivmoddi4+0x2a8>
 80008fe:	3d02      	subs	r5, #2
 8000900:	4462      	add	r2, ip
 8000902:	1a52      	subs	r2, r2, r1
 8000904:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000908:	e738      	b.n	800077c <__udivmoddi4+0xfc>
 800090a:	4631      	mov	r1, r6
 800090c:	4630      	mov	r0, r6
 800090e:	e708      	b.n	8000722 <__udivmoddi4+0xa2>
 8000910:	4639      	mov	r1, r7
 8000912:	e6e6      	b.n	80006e2 <__udivmoddi4+0x62>
 8000914:	4610      	mov	r0, r2
 8000916:	e6fb      	b.n	8000710 <__udivmoddi4+0x90>
 8000918:	4548      	cmp	r0, r9
 800091a:	d2a9      	bcs.n	8000870 <__udivmoddi4+0x1f0>
 800091c:	ebb9 0802 	subs.w	r8, r9, r2
 8000920:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000924:	3b01      	subs	r3, #1
 8000926:	e7a3      	b.n	8000870 <__udivmoddi4+0x1f0>
 8000928:	4645      	mov	r5, r8
 800092a:	e7ea      	b.n	8000902 <__udivmoddi4+0x282>
 800092c:	462b      	mov	r3, r5
 800092e:	e794      	b.n	800085a <__udivmoddi4+0x1da>
 8000930:	4640      	mov	r0, r8
 8000932:	e7d1      	b.n	80008d8 <__udivmoddi4+0x258>
 8000934:	46d0      	mov	r8, sl
 8000936:	e77b      	b.n	8000830 <__udivmoddi4+0x1b0>
 8000938:	3d02      	subs	r5, #2
 800093a:	4462      	add	r2, ip
 800093c:	e732      	b.n	80007a4 <__udivmoddi4+0x124>
 800093e:	4608      	mov	r0, r1
 8000940:	e70a      	b.n	8000758 <__udivmoddi4+0xd8>
 8000942:	4464      	add	r4, ip
 8000944:	3802      	subs	r0, #2
 8000946:	e742      	b.n	80007ce <__udivmoddi4+0x14e>

08000948 <__aeabi_idiv0>:
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000950:	f000 fff6 	bl	8001940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000954:	f000 f832 	bl	80009bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <main+0x64>)
 800095a:	2201      	movs	r2, #1
 800095c:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095e:	f000 fb6d 	bl	800103c <MX_GPIO_Init>
  MX_DMA_Init();
 8000962:	f000 fb4b 	bl	8000ffc <MX_DMA_Init>
  MX_SPI1_Init();
 8000966:	f000 f8cb 	bl	8000b00 <MX_SPI1_Init>
  MX_TIM4_Init();
 800096a:	f000 f9b3 	bl	8000cd4 <MX_TIM4_Init>
  MX_ADC1_Init();
 800096e:	f000 f88f 	bl	8000a90 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000972:	f000 f8fb 	bl	8000b6c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000976:	f000 f931 	bl	8000bdc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800097a:	f000 fb15 	bl	8000fa8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800097e:	f000 fa95 	bl	8000eac <MX_TIM6_Init>
  MX_TIM14_Init();
 8000982:	f000 faed 	bl	8000f60 <MX_TIM14_Init>
  MX_TIM5_Init();
 8000986:	f000 fa3d 	bl	8000e04 <MX_TIM5_Init>
  MX_TIM13_Init();
 800098a:	f000 fac5 	bl	8000f18 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  L3GD20_Init();
 800098e:	f005 f8c7 	bl	8005b20 <L3GD20_Init>
  ITM_Port32(31) = 2;
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <main+0x64>)
 8000994:	2202      	movs	r2, #2
 8000996:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim14);
 8000998:	4806      	ldr	r0, [pc, #24]	; (80009b4 <main+0x68>)
 800099a:	f003 fce9 	bl	8004370 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <main+0x6c>)
 80009a0:	f003 fce6 	bl	8004370 <HAL_TIM_Base_Start_IT>
  cppmain();
 80009a4:	f006 f994 	bl	8006cd0 <cppmain>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  return -1;
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
  }
  /* USER CODE END 3 */
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	e000007c 	.word	0xe000007c
 80009b4:	200002f0 	.word	0x200002f0
 80009b8:	200002a8 	.word	0x200002a8

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b094      	sub	sp, #80	; 0x50
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0320 	add.w	r3, r7, #32
 80009c6:	2230      	movs	r2, #48	; 0x30
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f006 f99c 	bl	8006d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <SystemClock_Config+0xcc>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	4a27      	ldr	r2, [pc, #156]	; (8000a88 <SystemClock_Config+0xcc>)
 80009ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40
 80009f0:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <SystemClock_Config+0xcc>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009fc:	2300      	movs	r3, #0
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <SystemClock_Config+0xd0>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <SystemClock_Config+0xd0>)
 8000a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <SystemClock_Config+0xd0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a22:	2302      	movs	r3, #2
 8000a24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000a30:	2332      	movs	r3, #50	; 0x32
 8000a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3c:	f107 0320 	add.w	r3, r7, #32
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 f9df 	bl	8002e04 <HAL_RCC_OscConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a4c:	f000 fbce 	bl	80011ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a50:	230f      	movs	r3, #15
 8000a52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a54:	2302      	movs	r3, #2
 8000a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 fc41 	bl	80032f4 <HAL_RCC_ClockConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a78:	f000 fbb8 	bl	80011ec <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000a7c:	f002 fd20 	bl	80034c0 <HAL_RCC_EnableCSS>
}
 8000a80:	bf00      	nop
 8000a82:	3750      	adds	r7, #80	; 0x50
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40007000 	.word	0x40007000

08000a90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_ADC1_Init+0x64>)
 8000a96:	4a18      	ldr	r2, [pc, #96]	; (8000af8 <MX_ADC1_Init+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <MX_ADC1_Init+0x64>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_ADC1_Init+0x64>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_ADC1_Init+0x64>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_ADC1_Init+0x64>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_ADC1_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_ADC1_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_ADC1_Init+0x64>)
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <MX_ADC1_Init+0x6c>)
 8000ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_ADC1_Init+0x64>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_ADC1_Init+0x64>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_ADC1_Init+0x64>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_ADC1_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_ADC1_Init+0x64>)
 8000ae2:	f000 ffc3 	bl	8001a6c <HAL_ADC_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8000aec:	f000 fb7e 	bl	80011ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000030 	.word	0x20000030
 8000af8:	40012000 	.word	0x40012000
 8000afc:	0f000001 	.word	0x0f000001

08000b00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b06:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <MX_SPI1_Init+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b34:	2218      	movs	r2, #24
 8000b36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b4c:	220a      	movs	r2, #10
 8000b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b52:	f002 fe14 	bl	800377e <HAL_SPI_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b5c:	f000 fb46 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200000d8 	.word	0x200000d8
 8000b68:	40013000 	.word	0x40013000

08000b6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_SPI2_Init+0x68>)
 8000b72:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <MX_SPI2_Init+0x6c>)
 8000b74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_SPI2_Init+0x68>)
 8000b78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_SPI2_Init+0x68>)
 8000b80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b84:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_SPI2_Init+0x68>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_SPI2_Init+0x68>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_SPI2_Init+0x68>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_SPI2_Init+0x68>)
 8000b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b9e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_SPI2_Init+0x68>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_SPI2_Init+0x68>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_SPI2_Init+0x68>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_SPI2_Init+0x68>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_SPI2_Init+0x68>)
 8000bba:	220a      	movs	r2, #10
 8000bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_SPI2_Init+0x68>)
 8000bc0:	f002 fddd 	bl	800377e <HAL_SPI_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000bca:	f000 fb0f 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000130 	.word	0x20000130
 8000bd8:	40003800 	.word	0x40003800

08000bdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b092      	sub	sp, #72	; 0x48
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	2224      	movs	r2, #36	; 0x24
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f006 f88c 	bl	8006d08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c0c:	4b30      	ldr	r3, [pc, #192]	; (8000cd0 <MX_TIM2_Init+0xf4>)
 8000c0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c14:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <MX_TIM2_Init+0xf4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <MX_TIM2_Init+0xf4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c20:	4b2b      	ldr	r3, [pc, #172]	; (8000cd0 <MX_TIM2_Init+0xf4>)
 8000c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c28:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <MX_TIM2_Init+0xf4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c2e:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <MX_TIM2_Init+0xf4>)
 8000c30:	2280      	movs	r2, #128	; 0x80
 8000c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c34:	4826      	ldr	r0, [pc, #152]	; (8000cd0 <MX_TIM2_Init+0xf4>)
 8000c36:	f003 fc0b 	bl	8004450 <HAL_TIM_PWM_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c40:	f000 fad4 	bl	80011ec <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c44:	2301      	movs	r3, #1
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC1Filter = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.IC2Filter = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <MX_TIM2_Init+0xf4>)
 8000c70:	f003 fd06 	bl	8004680 <HAL_TIM_Encoder_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000c7a:	f000 fab7 	bl	80011ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4810      	ldr	r0, [pc, #64]	; (8000cd0 <MX_TIM2_Init+0xf4>)
 8000c8e:	f004 fbf5 	bl	800547c <HAL_TIMEx_MasterConfigSynchronization>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8000c98:	f000 faa8 	bl	80011ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c9c:	2360      	movs	r3, #96	; 0x60
 8000c9e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cac:	463b      	mov	r3, r7
 8000cae:	2208      	movs	r2, #8
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <MX_TIM2_Init+0xf4>)
 8000cb4:	f003 ff20 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000cbe:	f000 fa95 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cc2:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <MX_TIM2_Init+0xf4>)
 8000cc4:	f000 fd0e 	bl	80016e4 <HAL_TIM_MspPostInit>

}
 8000cc8:	bf00      	nop
 8000cca:	3748      	adds	r7, #72	; 0x48
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000188 	.word	0x20000188

08000cd4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08e      	sub	sp, #56	; 0x38
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	f107 0320 	add.w	r3, r7, #32
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
 8000d00:	615a      	str	r2, [r3, #20]
 8000d02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d04:	4b3d      	ldr	r3, [pc, #244]	; (8000dfc <MX_TIM4_Init+0x128>)
 8000d06:	4a3e      	ldr	r2, [pc, #248]	; (8000e00 <MX_TIM4_Init+0x12c>)
 8000d08:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d0a:	4b3c      	ldr	r3, [pc, #240]	; (8000dfc <MX_TIM4_Init+0x128>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b3a      	ldr	r3, [pc, #232]	; (8000dfc <MX_TIM4_Init+0x128>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d16:	4b39      	ldr	r3, [pc, #228]	; (8000dfc <MX_TIM4_Init+0x128>)
 8000d18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d1c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1e:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <MX_TIM4_Init+0x128>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b35      	ldr	r3, [pc, #212]	; (8000dfc <MX_TIM4_Init+0x128>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d2a:	4834      	ldr	r0, [pc, #208]	; (8000dfc <MX_TIM4_Init+0x128>)
 8000d2c:	f003 fad0 	bl	80042d0 <HAL_TIM_Base_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000d36:	f000 fa59 	bl	80011ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d44:	4619      	mov	r1, r3
 8000d46:	482d      	ldr	r0, [pc, #180]	; (8000dfc <MX_TIM4_Init+0x128>)
 8000d48:	f003 ff98 	bl	8004c7c <HAL_TIM_ConfigClockSource>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d52:	f000 fa4b 	bl	80011ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d56:	4829      	ldr	r0, [pc, #164]	; (8000dfc <MX_TIM4_Init+0x128>)
 8000d58:	f003 fb7a 	bl	8004450 <HAL_TIM_PWM_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d62:	f000 fa43 	bl	80011ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d6e:	f107 0320 	add.w	r3, r7, #32
 8000d72:	4619      	mov	r1, r3
 8000d74:	4821      	ldr	r0, [pc, #132]	; (8000dfc <MX_TIM4_Init+0x128>)
 8000d76:	f004 fb81 	bl	800547c <HAL_TIMEx_MasterConfigSynchronization>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d80:	f000 fa34 	bl	80011ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d84:	2360      	movs	r3, #96	; 0x60
 8000d86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2200      	movs	r2, #0
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4818      	ldr	r0, [pc, #96]	; (8000dfc <MX_TIM4_Init+0x128>)
 8000d9c:	f003 feac 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000da6:	f000 fa21 	bl	80011ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2204      	movs	r2, #4
 8000dae:	4619      	mov	r1, r3
 8000db0:	4812      	ldr	r0, [pc, #72]	; (8000dfc <MX_TIM4_Init+0x128>)
 8000db2:	f003 fea1 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000dbc:	f000 fa16 	bl	80011ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480d      	ldr	r0, [pc, #52]	; (8000dfc <MX_TIM4_Init+0x128>)
 8000dc8:	f003 fe96 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000dd2:	f000 fa0b 	bl	80011ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	220c      	movs	r2, #12
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4807      	ldr	r0, [pc, #28]	; (8000dfc <MX_TIM4_Init+0x128>)
 8000dde:	f003 fe8b 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000de8:	f000 fa00 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <MX_TIM4_Init+0x128>)
 8000dee:	f000 fc79 	bl	80016e4 <HAL_TIM_MspPostInit>

}
 8000df2:	bf00      	nop
 8000df4:	3738      	adds	r7, #56	; 0x38
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200001d0 	.word	0x200001d0
 8000e00:	40000800 	.word	0x40000800

08000e04 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08c      	sub	sp, #48	; 0x30
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	2224      	movs	r2, #36	; 0x24
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f005 ff78 	bl	8006d08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e20:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <MX_TIM5_Init+0xa0>)
 8000e22:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <MX_TIM5_Init+0xa4>)
 8000e24:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e26:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <MX_TIM5_Init+0xa0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_TIM5_Init+0xa0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <MX_TIM5_Init+0xa0>)
 8000e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e38:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_TIM5_Init+0xa0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_TIM5_Init+0xa0>)
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8000e46:	2302      	movs	r3, #2
 8000e48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <MX_TIM5_Init+0xa0>)
 8000e72:	f003 fc05 	bl	8004680 <HAL_TIM_Encoder_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000e7c:	f000 f9b6 	bl	80011ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e80:	2300      	movs	r3, #0
 8000e82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_TIM5_Init+0xa0>)
 8000e8e:	f004 faf5 	bl	800547c <HAL_TIMEx_MasterConfigSynchronization>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000e98:	f000 f9a8 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3730      	adds	r7, #48	; 0x30
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000218 	.word	0x20000218
 8000ea8:	40000c00 	.word	0x40000c00

08000eac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_TIM6_Init+0x64>)
 8000ebc:	4a15      	ldr	r2, [pc, #84]	; (8000f14 <MX_TIM6_Init+0x68>)
 8000ebe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_TIM6_Init+0x64>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <MX_TIM6_Init+0x64>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <MX_TIM6_Init+0x64>)
 8000ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ed2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_TIM6_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000eda:	480d      	ldr	r0, [pc, #52]	; (8000f10 <MX_TIM6_Init+0x64>)
 8000edc:	f003 f9f8 	bl	80042d0 <HAL_TIM_Base_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000ee6:	f000 f981 	bl	80011ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <MX_TIM6_Init+0x64>)
 8000ef8:	f004 fac0 	bl	800547c <HAL_TIMEx_MasterConfigSynchronization>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000f02:	f000 f973 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000260 	.word	0x20000260
 8000f14:	40001000 	.word	0x40001000

08000f18 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_TIM13_Init+0x40>)
 8000f1e:	4a0f      	ldr	r2, [pc, #60]	; (8000f5c <MX_TIM13_Init+0x44>)
 8000f20:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <MX_TIM13_Init+0x40>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <MX_TIM13_Init+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 16000;
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <MX_TIM13_Init+0x40>)
 8000f30:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000f34:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <MX_TIM13_Init+0x40>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_TIM13_Init+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_TIM13_Init+0x40>)
 8000f44:	f003 f9c4 	bl	80042d0 <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000f4e:	f000 f94d 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200002a8 	.word	0x200002a8
 8000f5c:	40001c00 	.word	0x40001c00

08000f60 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_TIM14_Init+0x40>)
 8000f66:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <MX_TIM14_Init+0x44>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8;
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <MX_TIM14_Init+0x40>)
 8000f6c:	2208      	movs	r2, #8
 8000f6e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <MX_TIM14_Init+0x40>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <MX_TIM14_Init+0x40>)
 8000f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f7c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <MX_TIM14_Init+0x40>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_TIM14_Init+0x40>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_TIM14_Init+0x40>)
 8000f8c:	f003 f9a0 	bl	80042d0 <HAL_TIM_Base_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000f96:	f000 f929 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200002f0 	.word	0x200002f0
 8000fa4:	40002000 	.word	0x40002000

08000fa8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <MX_USART1_UART_Init+0x50>)
 8000fb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fe0:	f004 fadc 	bl	800559c <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fea:	f000 f8ff 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000338 	.word	0x20000338
 8000ff8:	40011000 	.word	0x40011000

08000ffc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_DMA_Init+0x3c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <MX_DMA_Init+0x3c>)
 800100c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_DMA_Init+0x3c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2038      	movs	r0, #56	; 0x38
 8001024:	f001 f9fd 	bl	8002422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001028:	2038      	movs	r0, #56	; 0x38
 800102a:	f001 fa16 	bl	800245a <HAL_NVIC_EnableIRQ>

}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800

0800103c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	4b60      	ldr	r3, [pc, #384]	; (80011d8 <MX_GPIO_Init+0x19c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a5f      	ldr	r2, [pc, #380]	; (80011d8 <MX_GPIO_Init+0x19c>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b5d      	ldr	r3, [pc, #372]	; (80011d8 <MX_GPIO_Init+0x19c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b59      	ldr	r3, [pc, #356]	; (80011d8 <MX_GPIO_Init+0x19c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a58      	ldr	r2, [pc, #352]	; (80011d8 <MX_GPIO_Init+0x19c>)
 8001078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b56      	ldr	r3, [pc, #344]	; (80011d8 <MX_GPIO_Init+0x19c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	4b52      	ldr	r3, [pc, #328]	; (80011d8 <MX_GPIO_Init+0x19c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a51      	ldr	r2, [pc, #324]	; (80011d8 <MX_GPIO_Init+0x19c>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b4f      	ldr	r3, [pc, #316]	; (80011d8 <MX_GPIO_Init+0x19c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b4b      	ldr	r3, [pc, #300]	; (80011d8 <MX_GPIO_Init+0x19c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a4a      	ldr	r2, [pc, #296]	; (80011d8 <MX_GPIO_Init+0x19c>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b48      	ldr	r3, [pc, #288]	; (80011d8 <MX_GPIO_Init+0x19c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	4b44      	ldr	r3, [pc, #272]	; (80011d8 <MX_GPIO_Init+0x19c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a43      	ldr	r2, [pc, #268]	; (80011d8 <MX_GPIO_Init+0x19c>)
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b41      	ldr	r3, [pc, #260]	; (80011d8 <MX_GPIO_Init+0x19c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED10_Pin|RF_EMITTER_Pin|D_C_Pin|DIAGONAL_EMITTER_Pin
 80010de:	2200      	movs	r2, #0
 80010e0:	f641 51e7 	movw	r1, #7655	; 0x1de7
 80010e4:	483d      	ldr	r0, [pc, #244]	; (80011dc <MX_GPIO_Init+0x1a0>)
 80010e6:	f001 fe59 	bl	8002d9c <HAL_GPIO_WritePin>
                          |CE_Pin|LF_EMITTER_Pin|CS_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED11_Pin|LED9_Pin|LED8_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f641 0110 	movw	r1, #6160	; 0x1810
 80010f0:	483b      	ldr	r0, [pc, #236]	; (80011e0 <MX_GPIO_Init+0x1a4>)
 80010f2:	f001 fe53 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED7_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80010fc:	4839      	ldr	r0, [pc, #228]	; (80011e4 <MX_GPIO_Init+0x1a8>)
 80010fe:	f001 fe4d 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	2104      	movs	r1, #4
 8001106:	4838      	ldr	r0, [pc, #224]	; (80011e8 <MX_GPIO_Init+0x1ac>)
 8001108:	f001 fe48 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TB1_Pin */
  GPIO_InitStruct.Pin = TB1_Pin;
 800110c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TB1_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	482e      	ldr	r0, [pc, #184]	; (80011dc <MX_GPIO_Init+0x1a0>)
 8001122:	f001 fc9f 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED10_Pin RF_EMITTER_Pin D_C_Pin DIAGONAL_EMITTER_Pin
                           CE_Pin LF_EMITTER_Pin CS_Pin LED3_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED10_Pin|RF_EMITTER_Pin|D_C_Pin|DIAGONAL_EMITTER_Pin
 8001126:	f641 53e7 	movw	r3, #7655	; 0x1de7
 800112a:	617b      	str	r3, [r7, #20]
                          |CE_Pin|LF_EMITTER_Pin|CS_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	4827      	ldr	r0, [pc, #156]	; (80011dc <MX_GPIO_Init+0x1a0>)
 8001140:	f001 fc90 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin;
 8001144:	2308      	movs	r3, #8
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRDY_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4823      	ldr	r0, [pc, #140]	; (80011e4 <MX_GPIO_Init+0x1a8>)
 8001158:	f001 fc84 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 INT_Pin MISO_Pin BOOT0_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|INT_Pin|MISO_Pin|BOOT0_Pin;
 800115c:	f244 4324 	movw	r3, #17444	; 0x4424
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	481b      	ldr	r0, [pc, #108]	; (80011e0 <MX_GPIO_Init+0x1a4>)
 8001172:	f001 fc77 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED11_Pin LED9_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED11_Pin|LED9_Pin|LED8_Pin;
 8001176:	f641 0310 	movw	r3, #6160	; 0x1810
 800117a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	4814      	ldr	r0, [pc, #80]	; (80011e0 <MX_GPIO_Init+0x1a4>)
 8001190:	f001 fc68 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED7_Pin|LED1_Pin|LED2_Pin;
 8001194:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_GPIO_Init+0x1a8>)
 80011ae:	f001 fc59 	bl	8002a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 80011b2:	2304      	movs	r3, #4
 80011b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <MX_GPIO_Init+0x1ac>)
 80011ca:	f001 fc4b 	bl	8002a64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40020c00 	.word	0x40020c00

080011ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
}
 80011f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <Error_Handler+0x8>
	...

080011f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_MspInit+0x4c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_MspInit+0x4c>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_MspInit+0x4c>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_MspInit+0x4c>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	; 0x30
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a49      	ldr	r2, [pc, #292]	; (800138c <HAL_ADC_MspInit+0x144>)
 8001266:	4293      	cmp	r3, r2
 8001268:	f040 808b 	bne.w	8001382 <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
 8001270:	4b47      	ldr	r3, [pc, #284]	; (8001390 <HAL_ADC_MspInit+0x148>)
 8001272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001274:	4a46      	ldr	r2, [pc, #280]	; (8001390 <HAL_ADC_MspInit+0x148>)
 8001276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127a:	6453      	str	r3, [r2, #68]	; 0x44
 800127c:	4b44      	ldr	r3, [pc, #272]	; (8001390 <HAL_ADC_MspInit+0x148>)
 800127e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001284:	61bb      	str	r3, [r7, #24]
 8001286:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	4b40      	ldr	r3, [pc, #256]	; (8001390 <HAL_ADC_MspInit+0x148>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001290:	4a3f      	ldr	r2, [pc, #252]	; (8001390 <HAL_ADC_MspInit+0x148>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6313      	str	r3, [r2, #48]	; 0x30
 8001298:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <HAL_ADC_MspInit+0x148>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	4b39      	ldr	r3, [pc, #228]	; (8001390 <HAL_ADC_MspInit+0x148>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	4a38      	ldr	r2, [pc, #224]	; (8001390 <HAL_ADC_MspInit+0x148>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6313      	str	r3, [r2, #48]	; 0x30
 80012b4:	4b36      	ldr	r3, [pc, #216]	; (8001390 <HAL_ADC_MspInit+0x148>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	4b32      	ldr	r3, [pc, #200]	; (8001390 <HAL_ADC_MspInit+0x148>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	4a31      	ldr	r2, [pc, #196]	; (8001390 <HAL_ADC_MspInit+0x148>)
 80012ca:	f043 0302 	orr.w	r3, r3, #2
 80012ce:	6313      	str	r3, [r2, #48]	; 0x30
 80012d0:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <HAL_ADC_MspInit+0x148>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VOL_METER_Pin|R_RECEIVER_Pin;
 80012dc:	2318      	movs	r3, #24
 80012de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e0:	2303      	movs	r3, #3
 80012e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	4619      	mov	r1, r3
 80012ee:	4829      	ldr	r0, [pc, #164]	; (8001394 <HAL_ADC_MspInit+0x14c>)
 80012f0:	f001 fbb8 	bl	8002a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_RECEIVER_Pin;
 80012f4:	2310      	movs	r3, #16
 80012f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f8:	2303      	movs	r3, #3
 80012fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RF_RECEIVER_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4619      	mov	r1, r3
 8001306:	4824      	ldr	r0, [pc, #144]	; (8001398 <HAL_ADC_MspInit+0x150>)
 8001308:	f001 fbac 	bl	8002a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L_RECEIVER_Pin|LF_RECEIVER_Pin;
 800130c:	2303      	movs	r3, #3
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001310:	2303      	movs	r3, #3
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	481f      	ldr	r0, [pc, #124]	; (800139c <HAL_ADC_MspInit+0x154>)
 8001320:	f001 fba0 	bl	8002a64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <HAL_ADC_MspInit+0x158>)
 8001326:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <HAL_ADC_MspInit+0x15c>)
 8001328:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_ADC_MspInit+0x158>)
 800132c:	2200      	movs	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <HAL_ADC_MspInit+0x158>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HAL_ADC_MspInit+0x158>)
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_ADC_MspInit+0x158>)
 800133e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001342:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <HAL_ADC_MspInit+0x158>)
 8001346:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800134a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_ADC_MspInit+0x158>)
 800134e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001352:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_ADC_MspInit+0x158>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_ADC_MspInit+0x158>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_ADC_MspInit+0x158>)
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001366:	480e      	ldr	r0, [pc, #56]	; (80013a0 <HAL_ADC_MspInit+0x158>)
 8001368:	f001 f892 	bl	8002490 <HAL_DMA_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8001372:	f7ff ff3b 	bl	80011ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <HAL_ADC_MspInit+0x158>)
 800137a:	639a      	str	r2, [r3, #56]	; 0x38
 800137c:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_ADC_MspInit+0x158>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3730      	adds	r7, #48	; 0x30
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40012000 	.word	0x40012000
 8001390:	40023800 	.word	0x40023800
 8001394:	40020800 	.word	0x40020800
 8001398:	40020000 	.word	0x40020000
 800139c:	40020400 	.word	0x40020400
 80013a0:	20000078 	.word	0x20000078
 80013a4:	40026410 	.word	0x40026410

080013a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08c      	sub	sp, #48	; 0x30
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a32      	ldr	r2, [pc, #200]	; (8001490 <HAL_SPI_MspInit+0xe8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d12c      	bne.n	8001424 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	4b31      	ldr	r3, [pc, #196]	; (8001494 <HAL_SPI_MspInit+0xec>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	4a30      	ldr	r2, [pc, #192]	; (8001494 <HAL_SPI_MspInit+0xec>)
 80013d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013d8:	6453      	str	r3, [r2, #68]	; 0x44
 80013da:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <HAL_SPI_MspInit+0xec>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <HAL_SPI_MspInit+0xec>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a29      	ldr	r2, [pc, #164]	; (8001494 <HAL_SPI_MspInit+0xec>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b27      	ldr	r3, [pc, #156]	; (8001494 <HAL_SPI_MspInit+0xec>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDI_Pin;
 8001402:	23e0      	movs	r3, #224	; 0xe0
 8001404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001412:	2305      	movs	r3, #5
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 031c 	add.w	r3, r7, #28
 800141a:	4619      	mov	r1, r3
 800141c:	481e      	ldr	r0, [pc, #120]	; (8001498 <HAL_SPI_MspInit+0xf0>)
 800141e:	f001 fb21 	bl	8002a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001422:	e031      	b.n	8001488 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a1c      	ldr	r2, [pc, #112]	; (800149c <HAL_SPI_MspInit+0xf4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d12c      	bne.n	8001488 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <HAL_SPI_MspInit+0xec>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a17      	ldr	r2, [pc, #92]	; (8001494 <HAL_SPI_MspInit+0xec>)
 8001438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_SPI_MspInit+0xec>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_SPI_MspInit+0xec>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a10      	ldr	r2, [pc, #64]	; (8001494 <HAL_SPI_MspInit+0xec>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_SPI_MspInit+0xec>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CLK_Pin|DATA_IN_Pin;
 8001466:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800146a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001478:	2305      	movs	r3, #5
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	4807      	ldr	r0, [pc, #28]	; (80014a0 <HAL_SPI_MspInit+0xf8>)
 8001484:	f001 faee 	bl	8002a64 <HAL_GPIO_Init>
}
 8001488:	bf00      	nop
 800148a:	3730      	adds	r7, #48	; 0x30
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40013000 	.word	0x40013000
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000
 800149c:	40003800 	.word	0x40003800
 80014a0:	40020400 	.word	0x40020400

080014a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c4:	d14a      	bne.n	800155c <HAL_TIM_PWM_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <HAL_TIM_PWM_MspInit+0xc0>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a25      	ldr	r2, [pc, #148]	; (8001564 <HAL_TIM_PWM_MspInit+0xc0>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b23      	ldr	r3, [pc, #140]	; (8001564 <HAL_TIM_PWM_MspInit+0xc0>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <HAL_TIM_PWM_MspInit+0xc0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <HAL_TIM_PWM_MspInit+0xc0>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <HAL_TIM_PWM_MspInit+0xc0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <HAL_TIM_PWM_MspInit+0xc0>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a17      	ldr	r2, [pc, #92]	; (8001564 <HAL_TIM_PWM_MspInit+0xc0>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_TIM_PWM_MspInit+0xc0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800151a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800151e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800152c:	2301      	movs	r3, #1
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	480c      	ldr	r0, [pc, #48]	; (8001568 <HAL_TIM_PWM_MspInit+0xc4>)
 8001538:	f001 fa94 	bl	8002a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800153c:	2308      	movs	r3, #8
 800153e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800154c:	2301      	movs	r3, #1
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <HAL_TIM_PWM_MspInit+0xc8>)
 8001558:	f001 fa84 	bl	8002a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800155c:	bf00      	nop
 800155e:	3728      	adds	r7, #40	; 0x28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	40020000 	.word	0x40020000
 800156c:	40020400 	.word	0x40020400

08001570 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a30      	ldr	r2, [pc, #192]	; (8001640 <HAL_TIM_Base_MspInit+0xd0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d10e      	bne.n	80015a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	4b2f      	ldr	r3, [pc, #188]	; (8001644 <HAL_TIM_Base_MspInit+0xd4>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	4a2e      	ldr	r2, [pc, #184]	; (8001644 <HAL_TIM_Base_MspInit+0xd4>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6413      	str	r3, [r2, #64]	; 0x40
 8001592:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <HAL_TIM_Base_MspInit+0xd4>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800159e:	e04a      	b.n	8001636 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a28      	ldr	r2, [pc, #160]	; (8001648 <HAL_TIM_Base_MspInit+0xd8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d10e      	bne.n	80015c8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b25      	ldr	r3, [pc, #148]	; (8001644 <HAL_TIM_Base_MspInit+0xd4>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a24      	ldr	r2, [pc, #144]	; (8001644 <HAL_TIM_Base_MspInit+0xd4>)
 80015b4:	f043 0310 	orr.w	r3, r3, #16
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <HAL_TIM_Base_MspInit+0xd4>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
}
 80015c6:	e036      	b.n	8001636 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM13)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a1f      	ldr	r2, [pc, #124]	; (800164c <HAL_TIM_Base_MspInit+0xdc>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d116      	bne.n	8001600 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_TIM_Base_MspInit+0xd4>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a1a      	ldr	r2, [pc, #104]	; (8001644 <HAL_TIM_Base_MspInit+0xd4>)
 80015dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <HAL_TIM_Base_MspInit+0xd4>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	202c      	movs	r0, #44	; 0x2c
 80015f4:	f000 ff15 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80015f8:	202c      	movs	r0, #44	; 0x2c
 80015fa:	f000 ff2e 	bl	800245a <HAL_NVIC_EnableIRQ>
}
 80015fe:	e01a      	b.n	8001636 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM14)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a12      	ldr	r2, [pc, #72]	; (8001650 <HAL_TIM_Base_MspInit+0xe0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d115      	bne.n	8001636 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <HAL_TIM_Base_MspInit+0xd4>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <HAL_TIM_Base_MspInit+0xd4>)
 8001614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001618:	6413      	str	r3, [r2, #64]	; 0x40
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <HAL_TIM_Base_MspInit+0xd4>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	202d      	movs	r0, #45	; 0x2d
 800162c:	f000 fef9 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001630:	202d      	movs	r0, #45	; 0x2d
 8001632:	f000 ff12 	bl	800245a <HAL_NVIC_EnableIRQ>
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40000800 	.word	0x40000800
 8001644:	40023800 	.word	0x40023800
 8001648:	40001000 	.word	0x40001000
 800164c:	40001c00 	.word	0x40001c00
 8001650:	40002000 	.word	0x40002000

08001654 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a19      	ldr	r2, [pc, #100]	; (80016d8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d12b      	bne.n	80016ce <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_TIM_Encoder_MspInit+0x88>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a17      	ldr	r2, [pc, #92]	; (80016dc <HAL_TIM_Encoder_MspInit+0x88>)
 8001680:	f043 0308 	orr.w	r3, r3, #8
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_TIM_Encoder_MspInit+0x88>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_TIM_Encoder_MspInit+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <HAL_TIM_Encoder_MspInit+0x88>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_TIM_Encoder_MspInit+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016ae:	2303      	movs	r3, #3
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80016be:	2302      	movs	r3, #2
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <HAL_TIM_Encoder_MspInit+0x8c>)
 80016ca:	f001 f9cb 	bl	8002a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	; 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40000c00 	.word	0x40000c00
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020000 	.word	0x40020000

080016e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001704:	d11e      	bne.n	8001744 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <HAL_TIM_MspPostInit+0xb0>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a21      	ldr	r2, [pc, #132]	; (8001794 <HAL_TIM_MspPostInit+0xb0>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <HAL_TIM_MspPostInit+0xb0>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001722:	2304      	movs	r3, #4
 8001724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001732:	2301      	movs	r3, #1
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4816      	ldr	r0, [pc, #88]	; (8001798 <HAL_TIM_MspPostInit+0xb4>)
 800173e:	f001 f991 	bl	8002a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001742:	e023      	b.n	800178c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_TIM_MspPostInit+0xb8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d11e      	bne.n	800178c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_TIM_MspPostInit+0xb0>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a0f      	ldr	r2, [pc, #60]	; (8001794 <HAL_TIM_MspPostInit+0xb0>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_TIM_MspPostInit+0xb0>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LPWMA_Pin|LPWMB_Pin|RPWMA_Pin|RPWMB_Pin;
 800176a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800177c:	2302      	movs	r3, #2
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <HAL_TIM_MspPostInit+0xbc>)
 8001788:	f001 f96c 	bl	8002a64 <HAL_GPIO_Init>
}
 800178c:	bf00      	nop
 800178e:	3728      	adds	r7, #40	; 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	40000800 	.word	0x40000800
 80017a0:	40020400 	.word	0x40020400

080017a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a19      	ldr	r2, [pc, #100]	; (8001828 <HAL_UART_MspInit+0x84>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d12c      	bne.n	8001820 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_UART_MspInit+0x88>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_UART_MspInit+0x88>)
 80017d0:	f043 0310 	orr.w	r3, r3, #16
 80017d4:	6453      	str	r3, [r2, #68]	; 0x44
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_UART_MspInit+0x88>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f003 0310 	and.w	r3, r3, #16
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_UART_MspInit+0x88>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a10      	ldr	r2, [pc, #64]	; (800182c <HAL_UART_MspInit+0x88>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_UART_MspInit+0x88>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80017fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001810:	2307      	movs	r3, #7
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <HAL_UART_MspInit+0x8c>)
 800181c:	f001 f922 	bl	8002a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40011000 	.word	0x40011000
 800182c:	40023800 	.word	0x40023800
 8001830:	40020000 	.word	0x40020000

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001838:	f001 ff86 	bl	8003748 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800183c:	e7fe      	b.n	800183c <NMI_Handler+0x8>

0800183e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <MemManage_Handler+0x4>

0800184a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <BusFault_Handler+0x4>

08001850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <UsageFault_Handler+0x4>

08001856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001884:	f000 f8ae 	bl	80019e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001892:	f003 f829 	bl	80048e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200002a8 	.word	0x200002a8

080018a0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80018a6:	f003 f81f 	bl	80048e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200002f0 	.word	0x200002f0

080018b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <DMA2_Stream0_IRQHandler+0x10>)
 80018ba:	f000 fe97 	bl	80025ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000078 	.word	0x20000078

080018c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <SystemInit+0x20>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <SystemInit+0x20>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001924 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f0:	480d      	ldr	r0, [pc, #52]	; (8001928 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018f2:	490e      	ldr	r1, [pc, #56]	; (800192c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018f4:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001908:	4c0b      	ldr	r4, [pc, #44]	; (8001938 <LoopFillZerobss+0x26>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001916:	f7ff ffd7 	bl	80018c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800191a:	f005 f9fd 	bl	8006d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191e:	f7ff f815 	bl	800094c <main>
  bx  lr    
 8001922:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001924:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800192c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001930:	08006da8 	.word	0x08006da8
  ldr r2, =_sbss
 8001934:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001938:	200032fc 	.word	0x200032fc

0800193c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800193c:	e7fe      	b.n	800193c <ADC_IRQHandler>
	...

08001940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_Init+0x40>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <HAL_Init+0x40>)
 800194a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_Init+0x40>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <HAL_Init+0x40>)
 8001956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800195a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <HAL_Init+0x40>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a07      	ldr	r2, [pc, #28]	; (8001980 <HAL_Init+0x40>)
 8001962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001968:	2003      	movs	r0, #3
 800196a:	f000 fd4f 	bl	800240c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196e:	200f      	movs	r0, #15
 8001970:	f000 f808 	bl	8001984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001974:	f7ff fc40 	bl	80011f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023c00 	.word	0x40023c00

08001984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_InitTick+0x54>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_InitTick+0x58>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4619      	mov	r1, r3
 8001996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199a:	fbb3 f3f1 	udiv	r3, r3, r1
 800199e:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fd67 	bl	8002476 <HAL_SYSTICK_Config>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00e      	b.n	80019d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b0f      	cmp	r3, #15
 80019b6:	d80a      	bhi.n	80019ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b8:	2200      	movs	r2, #0
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f000 fd2f 	bl	8002422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c4:	4a06      	ldr	r2, [pc, #24]	; (80019e0 <HAL_InitTick+0x5c>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e000      	b.n	80019d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000008 	.word	0x20000008
 80019e0:	20000004 	.word	0x20000004

080019e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_IncTick+0x20>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_IncTick+0x24>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <HAL_IncTick+0x24>)
 80019f6:	6013      	str	r3, [r2, #0]
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000008 	.word	0x20000008
 8001a08:	2000037c 	.word	0x2000037c

08001a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <HAL_GetTick+0x14>)
 8001a12:	681b      	ldr	r3, [r3, #0]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	2000037c 	.word	0x2000037c

08001a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a2c:	f7ff ffee 	bl	8001a0c <HAL_GetTick>
 8001a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3c:	d005      	beq.n	8001a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_Delay+0x44>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4413      	add	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a4a:	bf00      	nop
 8001a4c:	f7ff ffde 	bl	8001a0c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d8f7      	bhi.n	8001a4c <HAL_Delay+0x28>
  {
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000008 	.word	0x20000008

08001a6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e033      	b.n	8001aea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d109      	bne.n	8001a9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff fbdc 	bl	8001248 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d118      	bne.n	8001adc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ab2:	f023 0302 	bic.w	r3, r3, #2
 8001ab6:	f043 0202 	orr.w	r2, r3, #2
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fad8 	bl	8002074 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f023 0303 	bic.w	r3, r3, #3
 8001ad2:	f043 0201 	orr.w	r2, r3, #1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	641a      	str	r2, [r3, #64]	; 0x40
 8001ada:	e001      	b.n	8001ae0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_ADC_Start+0x1a>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e0b2      	b.n	8001c74 <HAL_ADC_Start+0x180>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d018      	beq.n	8001b56 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b34:	4b52      	ldr	r3, [pc, #328]	; (8001c80 <HAL_ADC_Start+0x18c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a52      	ldr	r2, [pc, #328]	; (8001c84 <HAL_ADC_Start+0x190>)
 8001b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3e:	0c9a      	lsrs	r2, r3, #18
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b48:	e002      	b.n	8001b50 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f9      	bne.n	8001b4a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d17a      	bne.n	8001c5a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d007      	beq.n	8001b96 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba2:	d106      	bne.n	8001bb2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba8:	f023 0206 	bic.w	r2, r3, #6
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	645a      	str	r2, [r3, #68]	; 0x44
 8001bb0:	e002      	b.n	8001bb8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bc0:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <HAL_ADC_Start+0x194>)
 8001bc2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bcc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d12a      	bne.n	8001c30 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a2b      	ldr	r2, [pc, #172]	; (8001c8c <HAL_ADC_Start+0x198>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d015      	beq.n	8001c10 <HAL_ADC_Start+0x11c>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a29      	ldr	r2, [pc, #164]	; (8001c90 <HAL_ADC_Start+0x19c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d105      	bne.n	8001bfa <HAL_ADC_Start+0x106>
 8001bee:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <HAL_ADC_Start+0x194>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00a      	beq.n	8001c10 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a25      	ldr	r2, [pc, #148]	; (8001c94 <HAL_ADC_Start+0x1a0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d136      	bne.n	8001c72 <HAL_ADC_Start+0x17e>
 8001c04:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <HAL_ADC_Start+0x194>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d130      	bne.n	8001c72 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d129      	bne.n	8001c72 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	e020      	b.n	8001c72 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <HAL_ADC_Start+0x198>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d11b      	bne.n	8001c72 <HAL_ADC_Start+0x17e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d114      	bne.n	8001c72 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	e00b      	b.n	8001c72 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f043 0210 	orr.w	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f043 0201 	orr.w	r2, r3, #1
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	20000000 	.word	0x20000000
 8001c84:	431bde83 	.word	0x431bde83
 8001c88:	40012300 	.word	0x40012300
 8001c8c:	40012000 	.word	0x40012000
 8001c90:	40012100 	.word	0x40012100
 8001c94:	40012200 	.word	0x40012200

08001c98 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_ADC_Stop+0x16>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e021      	b.n	8001cf2 <HAL_ADC_Stop+0x5a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0201 	bic.w	r2, r2, #1
 8001cc4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	f043 0201 	orr.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1a:	d113      	bne.n	8001d44 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d2a:	d10b      	bne.n	8001d44 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f043 0220 	orr.w	r2, r3, #32
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e063      	b.n	8001e0c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d44:	f7ff fe62 	bl	8001a0c <HAL_GetTick>
 8001d48:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d4a:	e021      	b.n	8001d90 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d52:	d01d      	beq.n	8001d90 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <HAL_ADC_PollForConversion+0x6c>
 8001d5a:	f7ff fe57 	bl	8001a0c <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d212      	bcs.n	8001d90 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d00b      	beq.n	8001d90 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f043 0204 	orr.w	r2, r3, #4
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e03d      	b.n	8001e0c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d1d6      	bne.n	8001d4c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f06f 0212 	mvn.w	r2, #18
 8001da6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d123      	bne.n	8001e0a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d11f      	bne.n	8001e0a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d111      	bne.n	8001e0a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d105      	bne.n	8001e0a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x1c>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e105      	b.n	8002058 <HAL_ADC_ConfigChannel+0x228>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b09      	cmp	r3, #9
 8001e5a:	d925      	bls.n	8001ea8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68d9      	ldr	r1, [r3, #12]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b1e      	subs	r3, #30
 8001e72:	2207      	movs	r2, #7
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43da      	mvns	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	400a      	ands	r2, r1
 8001e80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68d9      	ldr	r1, [r3, #12]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	4603      	mov	r3, r0
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4403      	add	r3, r0
 8001e9a:	3b1e      	subs	r3, #30
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	e022      	b.n	8001eee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6919      	ldr	r1, [r3, #16]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	400a      	ands	r2, r1
 8001eca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6919      	ldr	r1, [r3, #16]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	4618      	mov	r0, r3
 8001ede:	4603      	mov	r3, r0
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4403      	add	r3, r0
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b06      	cmp	r3, #6
 8001ef4:	d824      	bhi.n	8001f40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	3b05      	subs	r3, #5
 8001f08:	221f      	movs	r2, #31
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	400a      	ands	r2, r1
 8001f16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	4618      	mov	r0, r3
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	3b05      	subs	r3, #5
 8001f32:	fa00 f203 	lsl.w	r2, r0, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f3e:	e04c      	b.n	8001fda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b0c      	cmp	r3, #12
 8001f46:	d824      	bhi.n	8001f92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	3b23      	subs	r3, #35	; 0x23
 8001f5a:	221f      	movs	r2, #31
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43da      	mvns	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	400a      	ands	r2, r1
 8001f68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	3b23      	subs	r3, #35	; 0x23
 8001f84:	fa00 f203 	lsl.w	r2, r0, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f90:	e023      	b.n	8001fda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3b41      	subs	r3, #65	; 0x41
 8001fa4:	221f      	movs	r2, #31
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	3b41      	subs	r3, #65	; 0x41
 8001fce:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fda:	4b22      	ldr	r3, [pc, #136]	; (8002064 <HAL_ADC_ConfigChannel+0x234>)
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a21      	ldr	r2, [pc, #132]	; (8002068 <HAL_ADC_ConfigChannel+0x238>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d109      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1cc>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b12      	cmp	r3, #18
 8001fee:	d105      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a19      	ldr	r2, [pc, #100]	; (8002068 <HAL_ADC_ConfigChannel+0x238>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d123      	bne.n	800204e <HAL_ADC_ConfigChannel+0x21e>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b10      	cmp	r3, #16
 800200c:	d003      	beq.n	8002016 <HAL_ADC_ConfigChannel+0x1e6>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b11      	cmp	r3, #17
 8002014:	d11b      	bne.n	800204e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b10      	cmp	r3, #16
 8002028:	d111      	bne.n	800204e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_ADC_ConfigChannel+0x23c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a10      	ldr	r2, [pc, #64]	; (8002070 <HAL_ADC_ConfigChannel+0x240>)
 8002030:	fba2 2303 	umull	r2, r3, r2, r3
 8002034:	0c9a      	lsrs	r2, r3, #18
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002040:	e002      	b.n	8002048 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	3b01      	subs	r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f9      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	40012300 	.word	0x40012300
 8002068:	40012000 	.word	0x40012000
 800206c:	20000000 	.word	0x20000000
 8002070:	431bde83 	.word	0x431bde83

08002074 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800207c:	4b79      	ldr	r3, [pc, #484]	; (8002264 <ADC_Init+0x1f0>)
 800207e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	431a      	orrs	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6859      	ldr	r1, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	021a      	lsls	r2, r3, #8
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6899      	ldr	r1, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	4a58      	ldr	r2, [pc, #352]	; (8002268 <ADC_Init+0x1f4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d022      	beq.n	8002152 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800211a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6899      	ldr	r1, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800213c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6899      	ldr	r1, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	e00f      	b.n	8002172 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002160:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002170:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0202 	bic.w	r2, r2, #2
 8002180:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6899      	ldr	r1, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7e1b      	ldrb	r3, [r3, #24]
 800218c:	005a      	lsls	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3020 	ldrb.w	r3, [r3, #32]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01b      	beq.n	80021d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6859      	ldr	r1, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	3b01      	subs	r3, #1
 80021cc:	035a      	lsls	r2, r3, #13
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	e007      	b.n	80021e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	3b01      	subs	r3, #1
 8002204:	051a      	lsls	r2, r3, #20
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800221c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6899      	ldr	r1, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800222a:	025a      	lsls	r2, r3, #9
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002242:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6899      	ldr	r1, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	029a      	lsls	r2, r3, #10
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	609a      	str	r2, [r3, #8]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	40012300 	.word	0x40012300
 8002268:	0f000001 	.word	0x0f000001

0800226c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	60d3      	str	r3, [r2, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <__NVIC_GetPriorityGrouping+0x18>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 0307 	and.w	r3, r3, #7
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db0b      	blt.n	80022fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	4907      	ldr	r1, [pc, #28]	; (8002308 <__NVIC_EnableIRQ+0x38>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2001      	movs	r0, #1
 80022f2:	fa00 f202 	lsl.w	r2, r0, r2
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000e100 	.word	0xe000e100

0800230c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	db0a      	blt.n	8002336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	490c      	ldr	r1, [pc, #48]	; (8002358 <__NVIC_SetPriority+0x4c>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	0112      	lsls	r2, r2, #4
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	440b      	add	r3, r1
 8002330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002334:	e00a      	b.n	800234c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4908      	ldr	r1, [pc, #32]	; (800235c <__NVIC_SetPriority+0x50>)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3b04      	subs	r3, #4
 8002344:	0112      	lsls	r2, r2, #4
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	440b      	add	r3, r1
 800234a:	761a      	strb	r2, [r3, #24]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000e100 	.word	0xe000e100
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	; 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f1c3 0307 	rsb	r3, r3, #7
 800237a:	2b04      	cmp	r3, #4
 800237c:	bf28      	it	cs
 800237e:	2304      	movcs	r3, #4
 8002380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3304      	adds	r3, #4
 8002386:	2b06      	cmp	r3, #6
 8002388:	d902      	bls.n	8002390 <NVIC_EncodePriority+0x30>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3b03      	subs	r3, #3
 800238e:	e000      	b.n	8002392 <NVIC_EncodePriority+0x32>
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	f04f 32ff 	mov.w	r2, #4294967295
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	401a      	ands	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	4313      	orrs	r3, r2
         );
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3724      	adds	r7, #36	; 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d8:	d301      	bcc.n	80023de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023da:	2301      	movs	r3, #1
 80023dc:	e00f      	b.n	80023fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <SysTick_Config+0x40>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e6:	210f      	movs	r1, #15
 80023e8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ec:	f7ff ff8e 	bl	800230c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <SysTick_Config+0x40>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f6:	4b04      	ldr	r3, [pc, #16]	; (8002408 <SysTick_Config+0x40>)
 80023f8:	2207      	movs	r2, #7
 80023fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	e000e010 	.word	0xe000e010

0800240c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff29 	bl	800226c <__NVIC_SetPriorityGrouping>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002434:	f7ff ff3e 	bl	80022b4 <__NVIC_GetPriorityGrouping>
 8002438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f7ff ff8e 	bl	8002360 <NVIC_EncodePriority>
 8002444:	4602      	mov	r2, r0
 8002446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff5d 	bl	800230c <__NVIC_SetPriority>
}
 8002452:	bf00      	nop
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff31 	bl	80022d0 <__NVIC_EnableIRQ>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ffa2 	bl	80023c8 <SysTick_Config>
 8002484:	4603      	mov	r3, r0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800249c:	f7ff fab6 	bl	8001a0c <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e099      	b.n	80025e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024cc:	e00f      	b.n	80024ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ce:	f7ff fa9d 	bl	8001a0c <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b05      	cmp	r3, #5
 80024da:	d908      	bls.n	80024ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2203      	movs	r2, #3
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e078      	b.n	80025e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1e8      	bne.n	80024ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <HAL_DMA_Init+0x158>)
 8002508:	4013      	ands	r3, r2
 800250a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800251a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002526:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002532:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	2b04      	cmp	r3, #4
 8002546:	d107      	bne.n	8002558 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	4313      	orrs	r3, r2
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f023 0307 	bic.w	r3, r3, #7
 800256e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	4313      	orrs	r3, r2
 8002578:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	2b04      	cmp	r3, #4
 8002580:	d117      	bne.n	80025b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00e      	beq.n	80025b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f9e9 	bl	800296c <DMA_CheckFifoParam>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2240      	movs	r2, #64	; 0x40
 80025a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025ae:	2301      	movs	r3, #1
 80025b0:	e016      	b.n	80025e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f9a0 	bl	8002900 <DMA_CalcBaseAndBitshift>
 80025c0:	4603      	mov	r3, r0
 80025c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	223f      	movs	r2, #63	; 0x3f
 80025ca:	409a      	lsls	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	f010803f 	.word	0xf010803f

080025ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025f8:	4b8e      	ldr	r3, [pc, #568]	; (8002834 <HAL_DMA_IRQHandler+0x248>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a8e      	ldr	r2, [pc, #568]	; (8002838 <HAL_DMA_IRQHandler+0x24c>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	0a9b      	lsrs	r3, r3, #10
 8002604:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	2208      	movs	r2, #8
 8002618:	409a      	lsls	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d01a      	beq.n	8002658 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0204 	bic.w	r2, r2, #4
 800263e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	2208      	movs	r2, #8
 8002646:	409a      	lsls	r2, r3
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002650:	f043 0201 	orr.w	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	2201      	movs	r2, #1
 800265e:	409a      	lsls	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d012      	beq.n	800268e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	2201      	movs	r2, #1
 800267c:	409a      	lsls	r2, r3
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002686:	f043 0202 	orr.w	r2, r3, #2
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002692:	2204      	movs	r2, #4
 8002694:	409a      	lsls	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d012      	beq.n	80026c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00b      	beq.n	80026c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	2204      	movs	r2, #4
 80026b2:	409a      	lsls	r2, r3
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026bc:	f043 0204 	orr.w	r2, r3, #4
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c8:	2210      	movs	r2, #16
 80026ca:	409a      	lsls	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d043      	beq.n	800275c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d03c      	beq.n	800275c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	2210      	movs	r2, #16
 80026e8:	409a      	lsls	r2, r3
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d018      	beq.n	800272e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d108      	bne.n	800271c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d024      	beq.n	800275c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	4798      	blx	r3
 800271a:	e01f      	b.n	800275c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01b      	beq.n	800275c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
 800272c:	e016      	b.n	800275c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d107      	bne.n	800274c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0208 	bic.w	r2, r2, #8
 800274a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002760:	2220      	movs	r2, #32
 8002762:	409a      	lsls	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 808f 	beq.w	800288c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 8087 	beq.w	800288c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002782:	2220      	movs	r2, #32
 8002784:	409a      	lsls	r2, r3
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b05      	cmp	r3, #5
 8002794:	d136      	bne.n	8002804 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0216 	bic.w	r2, r2, #22
 80027a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <HAL_DMA_IRQHandler+0x1da>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0208 	bic.w	r2, r2, #8
 80027d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027da:	223f      	movs	r2, #63	; 0x3f
 80027dc:	409a      	lsls	r2, r3
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d07e      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
        }
        return;
 8002802:	e079      	b.n	80028f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d01d      	beq.n	800284e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10d      	bne.n	800283c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	2b00      	cmp	r3, #0
 8002826:	d031      	beq.n	800288c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4798      	blx	r3
 8002830:	e02c      	b.n	800288c <HAL_DMA_IRQHandler+0x2a0>
 8002832:	bf00      	nop
 8002834:	20000000 	.word	0x20000000
 8002838:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d023      	beq.n	800288c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4798      	blx	r3
 800284c:	e01e      	b.n	800288c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10f      	bne.n	800287c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0210 	bic.w	r2, r2, #16
 800286a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002890:	2b00      	cmp	r3, #0
 8002892:	d032      	beq.n	80028fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d022      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2205      	movs	r2, #5
 80028a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0201 	bic.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	3301      	adds	r3, #1
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d307      	bcc.n	80028d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f2      	bne.n	80028b8 <HAL_DMA_IRQHandler+0x2cc>
 80028d2:	e000      	b.n	80028d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	4798      	blx	r3
 80028f6:	e000      	b.n	80028fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80028f8:	bf00      	nop
    }
  }
}
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	3b10      	subs	r3, #16
 8002910:	4a14      	ldr	r2, [pc, #80]	; (8002964 <DMA_CalcBaseAndBitshift+0x64>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800291a:	4a13      	ldr	r2, [pc, #76]	; (8002968 <DMA_CalcBaseAndBitshift+0x68>)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4413      	add	r3, r2
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b03      	cmp	r3, #3
 800292c:	d909      	bls.n	8002942 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002936:	f023 0303 	bic.w	r3, r3, #3
 800293a:	1d1a      	adds	r2, r3, #4
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	659a      	str	r2, [r3, #88]	; 0x58
 8002940:	e007      	b.n	8002952 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800294a:	f023 0303 	bic.w	r3, r3, #3
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002956:	4618      	mov	r0, r3
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	aaaaaaab 	.word	0xaaaaaaab
 8002968:	08006d90 	.word	0x08006d90

0800296c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d11f      	bne.n	80029c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d856      	bhi.n	8002a3a <DMA_CheckFifoParam+0xce>
 800298c:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <DMA_CheckFifoParam+0x28>)
 800298e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002992:	bf00      	nop
 8002994:	080029a5 	.word	0x080029a5
 8002998:	080029b7 	.word	0x080029b7
 800299c:	080029a5 	.word	0x080029a5
 80029a0:	08002a3b 	.word	0x08002a3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d046      	beq.n	8002a3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b4:	e043      	b.n	8002a3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029be:	d140      	bne.n	8002a42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c4:	e03d      	b.n	8002a42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ce:	d121      	bne.n	8002a14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d837      	bhi.n	8002a46 <DMA_CheckFifoParam+0xda>
 80029d6:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <DMA_CheckFifoParam+0x70>)
 80029d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029dc:	080029ed 	.word	0x080029ed
 80029e0:	080029f3 	.word	0x080029f3
 80029e4:	080029ed 	.word	0x080029ed
 80029e8:	08002a05 	.word	0x08002a05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
      break;
 80029f0:	e030      	b.n	8002a54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d025      	beq.n	8002a4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a02:	e022      	b.n	8002a4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a0c:	d11f      	bne.n	8002a4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a12:	e01c      	b.n	8002a4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d903      	bls.n	8002a22 <DMA_CheckFifoParam+0xb6>
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d003      	beq.n	8002a28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a20:	e018      	b.n	8002a54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
      break;
 8002a26:	e015      	b.n	8002a54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00e      	beq.n	8002a52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
      break;
 8002a38:	e00b      	b.n	8002a52 <DMA_CheckFifoParam+0xe6>
      break;
 8002a3a:	bf00      	nop
 8002a3c:	e00a      	b.n	8002a54 <DMA_CheckFifoParam+0xe8>
      break;
 8002a3e:	bf00      	nop
 8002a40:	e008      	b.n	8002a54 <DMA_CheckFifoParam+0xe8>
      break;
 8002a42:	bf00      	nop
 8002a44:	e006      	b.n	8002a54 <DMA_CheckFifoParam+0xe8>
      break;
 8002a46:	bf00      	nop
 8002a48:	e004      	b.n	8002a54 <DMA_CheckFifoParam+0xe8>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e002      	b.n	8002a54 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a4e:	bf00      	nop
 8002a50:	e000      	b.n	8002a54 <DMA_CheckFifoParam+0xe8>
      break;
 8002a52:	bf00      	nop
    }
  } 
  
  return status; 
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop

08002a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b089      	sub	sp, #36	; 0x24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	e16b      	b.n	8002d58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a80:	2201      	movs	r2, #1
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	f040 815a 	bne.w	8002d52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d005      	beq.n	8002ab6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d130      	bne.n	8002b18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aec:	2201      	movs	r2, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 0201 	and.w	r2, r3, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d017      	beq.n	8002b54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	2203      	movs	r2, #3
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d123      	bne.n	8002ba8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	08da      	lsrs	r2, r3, #3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3208      	adds	r2, #8
 8002b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	220f      	movs	r2, #15
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	08da      	lsrs	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3208      	adds	r2, #8
 8002ba2:	69b9      	ldr	r1, [r7, #24]
 8002ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0203 	and.w	r2, r3, #3
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80b4 	beq.w	8002d52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	4b60      	ldr	r3, [pc, #384]	; (8002d70 <HAL_GPIO_Init+0x30c>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	4a5f      	ldr	r2, [pc, #380]	; (8002d70 <HAL_GPIO_Init+0x30c>)
 8002bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bfa:	4b5d      	ldr	r3, [pc, #372]	; (8002d70 <HAL_GPIO_Init+0x30c>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c06:	4a5b      	ldr	r2, [pc, #364]	; (8002d74 <HAL_GPIO_Init+0x310>)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	220f      	movs	r2, #15
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a52      	ldr	r2, [pc, #328]	; (8002d78 <HAL_GPIO_Init+0x314>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d02b      	beq.n	8002c8a <HAL_GPIO_Init+0x226>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a51      	ldr	r2, [pc, #324]	; (8002d7c <HAL_GPIO_Init+0x318>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d025      	beq.n	8002c86 <HAL_GPIO_Init+0x222>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a50      	ldr	r2, [pc, #320]	; (8002d80 <HAL_GPIO_Init+0x31c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d01f      	beq.n	8002c82 <HAL_GPIO_Init+0x21e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a4f      	ldr	r2, [pc, #316]	; (8002d84 <HAL_GPIO_Init+0x320>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d019      	beq.n	8002c7e <HAL_GPIO_Init+0x21a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4e      	ldr	r2, [pc, #312]	; (8002d88 <HAL_GPIO_Init+0x324>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <HAL_GPIO_Init+0x216>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4d      	ldr	r2, [pc, #308]	; (8002d8c <HAL_GPIO_Init+0x328>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00d      	beq.n	8002c76 <HAL_GPIO_Init+0x212>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4c      	ldr	r2, [pc, #304]	; (8002d90 <HAL_GPIO_Init+0x32c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d007      	beq.n	8002c72 <HAL_GPIO_Init+0x20e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4b      	ldr	r2, [pc, #300]	; (8002d94 <HAL_GPIO_Init+0x330>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d101      	bne.n	8002c6e <HAL_GPIO_Init+0x20a>
 8002c6a:	2307      	movs	r3, #7
 8002c6c:	e00e      	b.n	8002c8c <HAL_GPIO_Init+0x228>
 8002c6e:	2308      	movs	r3, #8
 8002c70:	e00c      	b.n	8002c8c <HAL_GPIO_Init+0x228>
 8002c72:	2306      	movs	r3, #6
 8002c74:	e00a      	b.n	8002c8c <HAL_GPIO_Init+0x228>
 8002c76:	2305      	movs	r3, #5
 8002c78:	e008      	b.n	8002c8c <HAL_GPIO_Init+0x228>
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	e006      	b.n	8002c8c <HAL_GPIO_Init+0x228>
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e004      	b.n	8002c8c <HAL_GPIO_Init+0x228>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e002      	b.n	8002c8c <HAL_GPIO_Init+0x228>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <HAL_GPIO_Init+0x228>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	f002 0203 	and.w	r2, r2, #3
 8002c92:	0092      	lsls	r2, r2, #2
 8002c94:	4093      	lsls	r3, r2
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c9c:	4935      	ldr	r1, [pc, #212]	; (8002d74 <HAL_GPIO_Init+0x310>)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	089b      	lsrs	r3, r3, #2
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002caa:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <HAL_GPIO_Init+0x334>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cce:	4a32      	ldr	r2, [pc, #200]	; (8002d98 <HAL_GPIO_Init+0x334>)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cd4:	4b30      	ldr	r3, [pc, #192]	; (8002d98 <HAL_GPIO_Init+0x334>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cf8:	4a27      	ldr	r2, [pc, #156]	; (8002d98 <HAL_GPIO_Init+0x334>)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cfe:	4b26      	ldr	r3, [pc, #152]	; (8002d98 <HAL_GPIO_Init+0x334>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d22:	4a1d      	ldr	r2, [pc, #116]	; (8002d98 <HAL_GPIO_Init+0x334>)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d28:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <HAL_GPIO_Init+0x334>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d4c:	4a12      	ldr	r2, [pc, #72]	; (8002d98 <HAL_GPIO_Init+0x334>)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3301      	adds	r3, #1
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b0f      	cmp	r3, #15
 8002d5c:	f67f ae90 	bls.w	8002a80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	3724      	adds	r7, #36	; 0x24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40013800 	.word	0x40013800
 8002d78:	40020000 	.word	0x40020000
 8002d7c:	40020400 	.word	0x40020400
 8002d80:	40020800 	.word	0x40020800
 8002d84:	40020c00 	.word	0x40020c00
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40021400 	.word	0x40021400
 8002d90:	40021800 	.word	0x40021800
 8002d94:	40021c00 	.word	0x40021c00
 8002d98:	40013c00 	.word	0x40013c00

08002d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	807b      	strh	r3, [r7, #2]
 8002da8:	4613      	mov	r3, r2
 8002daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dac:	787b      	ldrb	r3, [r7, #1]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002db2:	887a      	ldrh	r2, [r7, #2]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002db8:	e003      	b.n	8002dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dba:	887b      	ldrh	r3, [r7, #2]
 8002dbc:	041a      	lsls	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	619a      	str	r2, [r3, #24]
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b085      	sub	sp, #20
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002de0:	887a      	ldrh	r2, [r7, #2]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4013      	ands	r3, r2
 8002de6:	041a      	lsls	r2, r3, #16
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	43d9      	mvns	r1, r3
 8002dec:	887b      	ldrh	r3, [r7, #2]
 8002dee:	400b      	ands	r3, r1
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	619a      	str	r2, [r3, #24]
}
 8002df6:	bf00      	nop
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e267      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d075      	beq.n	8002f0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e22:	4b88      	ldr	r3, [pc, #544]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d00c      	beq.n	8002e48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e2e:	4b85      	ldr	r3, [pc, #532]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d112      	bne.n	8002e60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e3a:	4b82      	ldr	r3, [pc, #520]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e46:	d10b      	bne.n	8002e60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e48:	4b7e      	ldr	r3, [pc, #504]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d05b      	beq.n	8002f0c <HAL_RCC_OscConfig+0x108>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d157      	bne.n	8002f0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e242      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e68:	d106      	bne.n	8002e78 <HAL_RCC_OscConfig+0x74>
 8002e6a:	4b76      	ldr	r3, [pc, #472]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a75      	ldr	r2, [pc, #468]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	e01d      	b.n	8002eb4 <HAL_RCC_OscConfig+0xb0>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCC_OscConfig+0x98>
 8002e82:	4b70      	ldr	r3, [pc, #448]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a6f      	ldr	r2, [pc, #444]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	4b6d      	ldr	r3, [pc, #436]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a6c      	ldr	r2, [pc, #432]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e00b      	b.n	8002eb4 <HAL_RCC_OscConfig+0xb0>
 8002e9c:	4b69      	ldr	r3, [pc, #420]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a68      	ldr	r2, [pc, #416]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	4b66      	ldr	r3, [pc, #408]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a65      	ldr	r2, [pc, #404]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d013      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7fe fda6 	bl	8001a0c <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec4:	f7fe fda2 	bl	8001a0c <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b64      	cmp	r3, #100	; 0x64
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e207      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	4b5b      	ldr	r3, [pc, #364]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0xc0>
 8002ee2:	e014      	b.n	8002f0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee4:	f7fe fd92 	bl	8001a0c <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eec:	f7fe fd8e 	bl	8001a0c <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	; 0x64
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e1f3      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efe:	4b51      	ldr	r3, [pc, #324]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0xe8>
 8002f0a:	e000      	b.n	8002f0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d063      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f1a:	4b4a      	ldr	r3, [pc, #296]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00b      	beq.n	8002f3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f26:	4b47      	ldr	r3, [pc, #284]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d11c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f32:	4b44      	ldr	r3, [pc, #272]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d116      	bne.n	8002f6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f3e:	4b41      	ldr	r3, [pc, #260]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_RCC_OscConfig+0x152>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d001      	beq.n	8002f56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e1c7      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f56:	4b3b      	ldr	r3, [pc, #236]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4937      	ldr	r1, [pc, #220]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6a:	e03a      	b.n	8002fe2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d020      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f74:	4b34      	ldr	r3, [pc, #208]	; (8003048 <HAL_RCC_OscConfig+0x244>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7a:	f7fe fd47 	bl	8001a0c <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f82:	f7fe fd43 	bl	8001a0c <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e1a8      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f94:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa0:	4b28      	ldr	r3, [pc, #160]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4925      	ldr	r1, [pc, #148]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	600b      	str	r3, [r1, #0]
 8002fb4:	e015      	b.n	8002fe2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fb6:	4b24      	ldr	r3, [pc, #144]	; (8003048 <HAL_RCC_OscConfig+0x244>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7fe fd26 	bl	8001a0c <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fc4:	f7fe fd22 	bl	8001a0c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e187      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd6:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d036      	beq.n	800305c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d016      	beq.n	8003024 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff6:	4b15      	ldr	r3, [pc, #84]	; (800304c <HAL_RCC_OscConfig+0x248>)
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffc:	f7fe fd06 	bl	8001a0c <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003004:	f7fe fd02 	bl	8001a0c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e167      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCC_OscConfig+0x240>)
 8003018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0x200>
 8003022:	e01b      	b.n	800305c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_RCC_OscConfig+0x248>)
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302a:	f7fe fcef 	bl	8001a0c <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003030:	e00e      	b.n	8003050 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003032:	f7fe fceb 	bl	8001a0c <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d907      	bls.n	8003050 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e150      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
 8003044:	40023800 	.word	0x40023800
 8003048:	42470000 	.word	0x42470000
 800304c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003050:	4b88      	ldr	r3, [pc, #544]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1ea      	bne.n	8003032 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8097 	beq.w	8003198 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800306e:	4b81      	ldr	r3, [pc, #516]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10f      	bne.n	800309a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	4b7d      	ldr	r3, [pc, #500]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	4a7c      	ldr	r2, [pc, #496]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003088:	6413      	str	r3, [r2, #64]	; 0x40
 800308a:	4b7a      	ldr	r3, [pc, #488]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003096:	2301      	movs	r3, #1
 8003098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309a:	4b77      	ldr	r3, [pc, #476]	; (8003278 <HAL_RCC_OscConfig+0x474>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d118      	bne.n	80030d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030a6:	4b74      	ldr	r3, [pc, #464]	; (8003278 <HAL_RCC_OscConfig+0x474>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a73      	ldr	r2, [pc, #460]	; (8003278 <HAL_RCC_OscConfig+0x474>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b2:	f7fe fcab 	bl	8001a0c <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ba:	f7fe fca7 	bl	8001a0c <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e10c      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030cc:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <HAL_RCC_OscConfig+0x474>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d106      	bne.n	80030ee <HAL_RCC_OscConfig+0x2ea>
 80030e0:	4b64      	ldr	r3, [pc, #400]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	4a63      	ldr	r2, [pc, #396]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	6713      	str	r3, [r2, #112]	; 0x70
 80030ec:	e01c      	b.n	8003128 <HAL_RCC_OscConfig+0x324>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b05      	cmp	r3, #5
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0x30c>
 80030f6:	4b5f      	ldr	r3, [pc, #380]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	4a5e      	ldr	r2, [pc, #376]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 80030fc:	f043 0304 	orr.w	r3, r3, #4
 8003100:	6713      	str	r3, [r2, #112]	; 0x70
 8003102:	4b5c      	ldr	r3, [pc, #368]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	4a5b      	ldr	r2, [pc, #364]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	6713      	str	r3, [r2, #112]	; 0x70
 800310e:	e00b      	b.n	8003128 <HAL_RCC_OscConfig+0x324>
 8003110:	4b58      	ldr	r3, [pc, #352]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	4a57      	ldr	r2, [pc, #348]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003116:	f023 0301 	bic.w	r3, r3, #1
 800311a:	6713      	str	r3, [r2, #112]	; 0x70
 800311c:	4b55      	ldr	r3, [pc, #340]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	4a54      	ldr	r2, [pc, #336]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003122:	f023 0304 	bic.w	r3, r3, #4
 8003126:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d015      	beq.n	800315c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003130:	f7fe fc6c 	bl	8001a0c <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003136:	e00a      	b.n	800314e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003138:	f7fe fc68 	bl	8001a0c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	; 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e0cb      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314e:	4b49      	ldr	r3, [pc, #292]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0ee      	beq.n	8003138 <HAL_RCC_OscConfig+0x334>
 800315a:	e014      	b.n	8003186 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315c:	f7fe fc56 	bl	8001a0c <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003162:	e00a      	b.n	800317a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003164:	f7fe fc52 	bl	8001a0c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e0b5      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317a:	4b3e      	ldr	r3, [pc, #248]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1ee      	bne.n	8003164 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003186:	7dfb      	ldrb	r3, [r7, #23]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d105      	bne.n	8003198 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318c:	4b39      	ldr	r3, [pc, #228]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	4a38      	ldr	r2, [pc, #224]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003196:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80a1 	beq.w	80032e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031a2:	4b34      	ldr	r3, [pc, #208]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d05c      	beq.n	8003268 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d141      	bne.n	800323a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b6:	4b31      	ldr	r3, [pc, #196]	; (800327c <HAL_RCC_OscConfig+0x478>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fe fc26 	bl	8001a0c <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c4:	f7fe fc22 	bl	8001a0c <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e087      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d6:	4b27      	ldr	r3, [pc, #156]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69da      	ldr	r2, [r3, #28]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	019b      	lsls	r3, r3, #6
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	085b      	lsrs	r3, r3, #1
 80031fa:	3b01      	subs	r3, #1
 80031fc:	041b      	lsls	r3, r3, #16
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	061b      	lsls	r3, r3, #24
 8003206:	491b      	ldr	r1, [pc, #108]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800320c:	4b1b      	ldr	r3, [pc, #108]	; (800327c <HAL_RCC_OscConfig+0x478>)
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003212:	f7fe fbfb 	bl	8001a0c <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321a:	f7fe fbf7 	bl	8001a0c <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e05c      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x416>
 8003238:	e054      	b.n	80032e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323a:	4b10      	ldr	r3, [pc, #64]	; (800327c <HAL_RCC_OscConfig+0x478>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7fe fbe4 	bl	8001a0c <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003248:	f7fe fbe0 	bl	8001a0c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e045      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_RCC_OscConfig+0x470>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x444>
 8003266:	e03d      	b.n	80032e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d107      	bne.n	8003280 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e038      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
 8003274:	40023800 	.word	0x40023800
 8003278:	40007000 	.word	0x40007000
 800327c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003280:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <HAL_RCC_OscConfig+0x4ec>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d028      	beq.n	80032e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003298:	429a      	cmp	r2, r3
 800329a:	d121      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d11a      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032b0:	4013      	ands	r3, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d111      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	085b      	lsrs	r3, r3, #1
 80032c8:	3b01      	subs	r3, #1
 80032ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800

080032f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0cc      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003308:	4b68      	ldr	r3, [pc, #416]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d90c      	bls.n	8003330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4b65      	ldr	r3, [pc, #404]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b63      	ldr	r3, [pc, #396]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0b8      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003348:	4b59      	ldr	r3, [pc, #356]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4a58      	ldr	r2, [pc, #352]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003360:	4b53      	ldr	r3, [pc, #332]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a52      	ldr	r2, [pc, #328]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800336a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336c:	4b50      	ldr	r3, [pc, #320]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	494d      	ldr	r1, [pc, #308]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d044      	beq.n	8003414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d119      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e07f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b2:	4b3f      	ldr	r3, [pc, #252]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e06f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c2:	4b3b      	ldr	r3, [pc, #236]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e067      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033d2:	4b37      	ldr	r3, [pc, #220]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f023 0203 	bic.w	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4934      	ldr	r1, [pc, #208]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e4:	f7fe fb12 	bl	8001a0c <HAL_GetTick>
 80033e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	e00a      	b.n	8003402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ec:	f7fe fb0e 	bl	8001a0c <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e04f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	4b2b      	ldr	r3, [pc, #172]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 020c 	and.w	r2, r3, #12
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	429a      	cmp	r2, r3
 8003412:	d1eb      	bne.n	80033ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003414:	4b25      	ldr	r3, [pc, #148]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d20c      	bcs.n	800343c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b22      	ldr	r3, [pc, #136]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e032      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003448:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4916      	ldr	r1, [pc, #88]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003466:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	490e      	ldr	r1, [pc, #56]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800347a:	f000 f82d 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 800347e:	4602      	mov	r2, r0
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	490a      	ldr	r1, [pc, #40]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 800348c:	5ccb      	ldrb	r3, [r1, r3]
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_ClockConfig+0x1c8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe fa72 	bl	8001984 <HAL_InitTick>

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40023c00 	.word	0x40023c00
 80034b0:	40023800 	.word	0x40023800
 80034b4:	08006d78 	.word	0x08006d78
 80034b8:	20000000 	.word	0x20000000
 80034bc:	20000004 	.word	0x20000004

080034c0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <HAL_RCC_EnableCSS+0x14>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	601a      	str	r2, [r3, #0]
}
 80034ca:	bf00      	nop
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	4247004c 	.word	0x4247004c

080034d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034dc:	b094      	sub	sp, #80	; 0x50
 80034de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	647b      	str	r3, [r7, #68]	; 0x44
 80034e4:	2300      	movs	r3, #0
 80034e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034e8:	2300      	movs	r3, #0
 80034ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f0:	4b79      	ldr	r3, [pc, #484]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 030c 	and.w	r3, r3, #12
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d00d      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x40>
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	f200 80e1 	bhi.w	80036c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x34>
 8003506:	2b04      	cmp	r3, #4
 8003508:	d003      	beq.n	8003512 <HAL_RCC_GetSysClockFreq+0x3a>
 800350a:	e0db      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800350c:	4b73      	ldr	r3, [pc, #460]	; (80036dc <HAL_RCC_GetSysClockFreq+0x204>)
 800350e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003510:	e0db      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003512:	4b72      	ldr	r3, [pc, #456]	; (80036dc <HAL_RCC_GetSysClockFreq+0x204>)
 8003514:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003516:	e0d8      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003518:	4b6f      	ldr	r3, [pc, #444]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003520:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003522:	4b6d      	ldr	r3, [pc, #436]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d063      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352e:	4b6a      	ldr	r3, [pc, #424]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	099b      	lsrs	r3, r3, #6
 8003534:	2200      	movs	r2, #0
 8003536:	63bb      	str	r3, [r7, #56]	; 0x38
 8003538:	63fa      	str	r2, [r7, #60]	; 0x3c
 800353a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003540:	633b      	str	r3, [r7, #48]	; 0x30
 8003542:	2300      	movs	r3, #0
 8003544:	637b      	str	r3, [r7, #52]	; 0x34
 8003546:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800354a:	4622      	mov	r2, r4
 800354c:	462b      	mov	r3, r5
 800354e:	f04f 0000 	mov.w	r0, #0
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	0159      	lsls	r1, r3, #5
 8003558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800355c:	0150      	lsls	r0, r2, #5
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4621      	mov	r1, r4
 8003564:	1a51      	subs	r1, r2, r1
 8003566:	6139      	str	r1, [r7, #16]
 8003568:	4629      	mov	r1, r5
 800356a:	eb63 0301 	sbc.w	r3, r3, r1
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800357c:	4659      	mov	r1, fp
 800357e:	018b      	lsls	r3, r1, #6
 8003580:	4651      	mov	r1, sl
 8003582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003586:	4651      	mov	r1, sl
 8003588:	018a      	lsls	r2, r1, #6
 800358a:	4651      	mov	r1, sl
 800358c:	ebb2 0801 	subs.w	r8, r2, r1
 8003590:	4659      	mov	r1, fp
 8003592:	eb63 0901 	sbc.w	r9, r3, r1
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035aa:	4690      	mov	r8, r2
 80035ac:	4699      	mov	r9, r3
 80035ae:	4623      	mov	r3, r4
 80035b0:	eb18 0303 	adds.w	r3, r8, r3
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	462b      	mov	r3, r5
 80035b8:	eb49 0303 	adc.w	r3, r9, r3
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035ca:	4629      	mov	r1, r5
 80035cc:	028b      	lsls	r3, r1, #10
 80035ce:	4621      	mov	r1, r4
 80035d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035d4:	4621      	mov	r1, r4
 80035d6:	028a      	lsls	r2, r1, #10
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035de:	2200      	movs	r2, #0
 80035e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035e8:	f7fd f832 	bl	8000650 <__aeabi_uldivmod>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4613      	mov	r3, r2
 80035f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f4:	e058      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f6:	4b38      	ldr	r3, [pc, #224]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	099b      	lsrs	r3, r3, #6
 80035fc:	2200      	movs	r2, #0
 80035fe:	4618      	mov	r0, r3
 8003600:	4611      	mov	r1, r2
 8003602:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003606:	623b      	str	r3, [r7, #32]
 8003608:	2300      	movs	r3, #0
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
 800360c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003610:	4642      	mov	r2, r8
 8003612:	464b      	mov	r3, r9
 8003614:	f04f 0000 	mov.w	r0, #0
 8003618:	f04f 0100 	mov.w	r1, #0
 800361c:	0159      	lsls	r1, r3, #5
 800361e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003622:	0150      	lsls	r0, r2, #5
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4641      	mov	r1, r8
 800362a:	ebb2 0a01 	subs.w	sl, r2, r1
 800362e:	4649      	mov	r1, r9
 8003630:	eb63 0b01 	sbc.w	fp, r3, r1
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003640:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003644:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003648:	ebb2 040a 	subs.w	r4, r2, sl
 800364c:	eb63 050b 	sbc.w	r5, r3, fp
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	00eb      	lsls	r3, r5, #3
 800365a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800365e:	00e2      	lsls	r2, r4, #3
 8003660:	4614      	mov	r4, r2
 8003662:	461d      	mov	r5, r3
 8003664:	4643      	mov	r3, r8
 8003666:	18e3      	adds	r3, r4, r3
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	464b      	mov	r3, r9
 800366c:	eb45 0303 	adc.w	r3, r5, r3
 8003670:	607b      	str	r3, [r7, #4]
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800367e:	4629      	mov	r1, r5
 8003680:	028b      	lsls	r3, r1, #10
 8003682:	4621      	mov	r1, r4
 8003684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003688:	4621      	mov	r1, r4
 800368a:	028a      	lsls	r2, r1, #10
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003692:	2200      	movs	r2, #0
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	61fa      	str	r2, [r7, #28]
 8003698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800369c:	f7fc ffd8 	bl	8000650 <__aeabi_uldivmod>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4613      	mov	r3, r2
 80036a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	0c1b      	lsrs	r3, r3, #16
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	3301      	adds	r3, #1
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036c2:	e002      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_RCC_GetSysClockFreq+0x204>)
 80036c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3750      	adds	r7, #80	; 0x50
 80036d0:	46bd      	mov	sp, r7
 80036d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800
 80036dc:	00f42400 	.word	0x00f42400

080036e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036e4:	4b03      	ldr	r3, [pc, #12]	; (80036f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80036e6:	681b      	ldr	r3, [r3, #0]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20000000 	.word	0x20000000

080036f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036fc:	f7ff fff0 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8003700:	4602      	mov	r2, r0
 8003702:	4b05      	ldr	r3, [pc, #20]	; (8003718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	0a9b      	lsrs	r3, r3, #10
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	4903      	ldr	r1, [pc, #12]	; (800371c <HAL_RCC_GetPCLK1Freq+0x24>)
 800370e:	5ccb      	ldrb	r3, [r1, r3]
 8003710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003714:	4618      	mov	r0, r3
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40023800 	.word	0x40023800
 800371c:	08006d88 	.word	0x08006d88

08003720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003724:	f7ff ffdc 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	0b5b      	lsrs	r3, r3, #13
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	4903      	ldr	r1, [pc, #12]	; (8003744 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003736:	5ccb      	ldrb	r3, [r1, r3]
 8003738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800373c:	4618      	mov	r0, r3
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40023800 	.word	0x40023800
 8003744:	08006d88 	.word	0x08006d88

08003748 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_RCC_NMI_IRQHandler+0x20>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003754:	2b80      	cmp	r3, #128	; 0x80
 8003756:	d104      	bne.n	8003762 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003758:	f000 f80a 	bl	8003770 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800375c:	4b03      	ldr	r3, [pc, #12]	; (800376c <HAL_RCC_NMI_IRQHandler+0x24>)
 800375e:	2280      	movs	r2, #128	; 0x80
 8003760:	701a      	strb	r2, [r3, #0]
  }
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40023800 	.word	0x40023800
 800376c:	4002380e 	.word	0x4002380e

08003770 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e07b      	b.n	8003888 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d108      	bne.n	80037aa <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037a0:	d009      	beq.n	80037b6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	61da      	str	r2, [r3, #28]
 80037a8:	e005      	b.n	80037b6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d106      	bne.n	80037d6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7fd fde9 	bl	80013a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2202      	movs	r2, #2
 80037da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383a:	ea42 0103 	orr.w	r1, r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	0c1b      	lsrs	r3, r3, #16
 8003854:	f003 0104 	and.w	r1, r3, #4
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	f003 0210 	and.w	r2, r3, #16
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69da      	ldr	r2, [r3, #28]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003876:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	4613      	mov	r3, r2
 800389e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_SPI_Transmit+0x22>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e126      	b.n	8003b00 <HAL_SPI_Transmit+0x270>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038ba:	f7fe f8a7 	bl	8001a0c <HAL_GetTick>
 80038be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038c0:	88fb      	ldrh	r3, [r7, #6]
 80038c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d002      	beq.n	80038d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
 80038d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038d4:	e10b      	b.n	8003aee <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <HAL_SPI_Transmit+0x52>
 80038dc:	88fb      	ldrh	r3, [r7, #6]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d102      	bne.n	80038e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038e6:	e102      	b.n	8003aee <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2203      	movs	r2, #3
 80038ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	88fa      	ldrh	r2, [r7, #6]
 8003900:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	88fa      	ldrh	r2, [r7, #6]
 8003906:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800392e:	d10f      	bne.n	8003950 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800393e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800394e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395a:	2b40      	cmp	r3, #64	; 0x40
 800395c:	d007      	beq.n	800396e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800396c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003976:	d14b      	bne.n	8003a10 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_SPI_Transmit+0xf6>
 8003980:	8afb      	ldrh	r3, [r7, #22]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d13e      	bne.n	8003a04 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	881a      	ldrh	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	1c9a      	adds	r2, r3, #2
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039aa:	e02b      	b.n	8003a04 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d112      	bne.n	80039e0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	881a      	ldrh	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	1c9a      	adds	r2, r3, #2
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80039de:	e011      	b.n	8003a04 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039e0:	f7fe f814 	bl	8001a0c <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d803      	bhi.n	80039f8 <HAL_SPI_Transmit+0x168>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	d102      	bne.n	80039fe <HAL_SPI_Transmit+0x16e>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d102      	bne.n	8003a04 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a02:	e074      	b.n	8003aee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1ce      	bne.n	80039ac <HAL_SPI_Transmit+0x11c>
 8003a0e:	e04c      	b.n	8003aaa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_SPI_Transmit+0x18e>
 8003a18:	8afb      	ldrh	r3, [r7, #22]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d140      	bne.n	8003aa0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	330c      	adds	r3, #12
 8003a28:	7812      	ldrb	r2, [r2, #0]
 8003a2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a44:	e02c      	b.n	8003aa0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d113      	bne.n	8003a7c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	7812      	ldrb	r2, [r2, #0]
 8003a60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a7a:	e011      	b.n	8003aa0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a7c:	f7fd ffc6 	bl	8001a0c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d803      	bhi.n	8003a94 <HAL_SPI_Transmit+0x204>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a92:	d102      	bne.n	8003a9a <HAL_SPI_Transmit+0x20a>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d102      	bne.n	8003aa0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a9e:	e026      	b.n	8003aee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1cd      	bne.n	8003a46 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	6839      	ldr	r1, [r7, #0]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fbcc 	bl	800424c <SPI_EndRxTxTransaction>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10a      	bne.n	8003ade <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ac8:	2300      	movs	r3, #0
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	77fb      	strb	r3, [r7, #31]
 8003aea:	e000      	b.n	8003aee <HAL_SPI_Transmit+0x25e>
  }

error:
 8003aec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003afe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3720      	adds	r7, #32
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	4613      	mov	r3, r2
 8003b16:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b24:	d112      	bne.n	8003b4c <HAL_SPI_Receive+0x44>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10e      	bne.n	8003b4c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2204      	movs	r2, #4
 8003b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b36:	88fa      	ldrh	r2, [r7, #6]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f8f1 	bl	8003d2a <HAL_SPI_TransmitReceive>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	e0ea      	b.n	8003d22 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_SPI_Receive+0x52>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e0e3      	b.n	8003d22 <HAL_SPI_Receive+0x21a>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b62:	f7fd ff53 	bl	8001a0c <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d002      	beq.n	8003b7a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
 8003b76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b78:	e0ca      	b.n	8003d10 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_SPI_Receive+0x7e>
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d102      	bne.n	8003b8c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b8a:	e0c1      	b.n	8003d10 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2204      	movs	r2, #4
 8003b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	88fa      	ldrh	r2, [r7, #6]
 8003ba4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	88fa      	ldrh	r2, [r7, #6]
 8003baa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd2:	d10f      	bne.n	8003bf4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bf2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfe:	2b40      	cmp	r3, #64	; 0x40
 8003c00:	d007      	beq.n	8003c12 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d162      	bne.n	8003ce0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c1a:	e02e      	b.n	8003c7a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d115      	bne.n	8003c56 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f103 020c 	add.w	r2, r3, #12
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	7812      	ldrb	r2, [r2, #0]
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c54:	e011      	b.n	8003c7a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c56:	f7fd fed9 	bl	8001a0c <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d803      	bhi.n	8003c6e <HAL_SPI_Receive+0x166>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d102      	bne.n	8003c74 <HAL_SPI_Receive+0x16c>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d102      	bne.n	8003c7a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c78:	e04a      	b.n	8003d10 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1cb      	bne.n	8003c1c <HAL_SPI_Receive+0x114>
 8003c84:	e031      	b.n	8003cea <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d113      	bne.n	8003cbc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	b292      	uxth	r2, r2
 8003ca0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	1c9a      	adds	r2, r3, #2
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cba:	e011      	b.n	8003ce0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cbc:	f7fd fea6 	bl	8001a0c <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d803      	bhi.n	8003cd4 <HAL_SPI_Receive+0x1cc>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd2:	d102      	bne.n	8003cda <HAL_SPI_Receive+0x1d2>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d102      	bne.n	8003ce0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cde:	e017      	b.n	8003d10 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1cd      	bne.n	8003c86 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	6839      	ldr	r1, [r7, #0]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fa46 	bl	8004180 <SPI_EndRxTransaction>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	75fb      	strb	r3, [r7, #23]
 8003d0c:	e000      	b.n	8003d10 <HAL_SPI_Receive+0x208>
  }

error :
 8003d0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b08c      	sub	sp, #48	; 0x30
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_SPI_TransmitReceive+0x26>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e18a      	b.n	8004066 <HAL_SPI_TransmitReceive+0x33c>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d58:	f7fd fe58 	bl	8001a0c <HAL_GetTick>
 8003d5c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d6e:	887b      	ldrh	r3, [r7, #2]
 8003d70:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d00f      	beq.n	8003d9a <HAL_SPI_TransmitReceive+0x70>
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d80:	d107      	bne.n	8003d92 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d103      	bne.n	8003d92 <HAL_SPI_TransmitReceive+0x68>
 8003d8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d003      	beq.n	8003d9a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d92:	2302      	movs	r3, #2
 8003d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d98:	e15b      	b.n	8004052 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_SPI_TransmitReceive+0x82>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <HAL_SPI_TransmitReceive+0x82>
 8003da6:	887b      	ldrh	r3, [r7, #2]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d103      	bne.n	8003db4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003db2:	e14e      	b.n	8004052 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d003      	beq.n	8003dc8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2205      	movs	r2, #5
 8003dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	887a      	ldrh	r2, [r7, #2]
 8003dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	887a      	ldrh	r2, [r7, #2]
 8003dde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	887a      	ldrh	r2, [r7, #2]
 8003dea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	887a      	ldrh	r2, [r7, #2]
 8003df0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e08:	2b40      	cmp	r3, #64	; 0x40
 8003e0a:	d007      	beq.n	8003e1c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e24:	d178      	bne.n	8003f18 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_SPI_TransmitReceive+0x10a>
 8003e2e:	8b7b      	ldrh	r3, [r7, #26]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d166      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	881a      	ldrh	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	1c9a      	adds	r2, r3, #2
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e58:	e053      	b.n	8003f02 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d11b      	bne.n	8003ea0 <HAL_SPI_TransmitReceive+0x176>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d016      	beq.n	8003ea0 <HAL_SPI_TransmitReceive+0x176>
 8003e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d113      	bne.n	8003ea0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	881a      	ldrh	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	1c9a      	adds	r2, r3, #2
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d119      	bne.n	8003ee2 <HAL_SPI_TransmitReceive+0x1b8>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d014      	beq.n	8003ee2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	b292      	uxth	r2, r2
 8003ec4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	1c9a      	adds	r2, r3, #2
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ee2:	f7fd fd93 	bl	8001a0c <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d807      	bhi.n	8003f02 <HAL_SPI_TransmitReceive+0x1d8>
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d003      	beq.n	8003f02 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f00:	e0a7      	b.n	8004052 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1a6      	bne.n	8003e5a <HAL_SPI_TransmitReceive+0x130>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1a1      	bne.n	8003e5a <HAL_SPI_TransmitReceive+0x130>
 8003f16:	e07c      	b.n	8004012 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_SPI_TransmitReceive+0x1fc>
 8003f20:	8b7b      	ldrh	r3, [r7, #26]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d16b      	bne.n	8003ffe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	330c      	adds	r3, #12
 8003f30:	7812      	ldrb	r2, [r2, #0]
 8003f32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f4c:	e057      	b.n	8003ffe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d11c      	bne.n	8003f96 <HAL_SPI_TransmitReceive+0x26c>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d017      	beq.n	8003f96 <HAL_SPI_TransmitReceive+0x26c>
 8003f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d114      	bne.n	8003f96 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	7812      	ldrb	r2, [r2, #0]
 8003f78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d119      	bne.n	8003fd8 <HAL_SPI_TransmitReceive+0x2ae>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d014      	beq.n	8003fd8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fd8:	f7fd fd18 	bl	8001a0c <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d803      	bhi.n	8003ff0 <HAL_SPI_TransmitReceive+0x2c6>
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fee:	d102      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0x2cc>
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d103      	bne.n	8003ffe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ffc:	e029      	b.n	8004052 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1a2      	bne.n	8003f4e <HAL_SPI_TransmitReceive+0x224>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d19d      	bne.n	8003f4e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004014:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f918 	bl	800424c <SPI_EndRxTxTransaction>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d006      	beq.n	8004030 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800402e:	e010      	b.n	8004052 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10b      	bne.n	8004050 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	e000      	b.n	8004052 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004050:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004062:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004066:	4618      	mov	r0, r3
 8004068:	3730      	adds	r7, #48	; 0x30
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	4613      	mov	r3, r2
 800407e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004080:	f7fd fcc4 	bl	8001a0c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	4413      	add	r3, r2
 800408e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004090:	f7fd fcbc 	bl	8001a0c <HAL_GetTick>
 8004094:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004096:	4b39      	ldr	r3, [pc, #228]	; (800417c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	015b      	lsls	r3, r3, #5
 800409c:	0d1b      	lsrs	r3, r3, #20
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	fb02 f303 	mul.w	r3, r2, r3
 80040a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040a6:	e054      	b.n	8004152 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ae:	d050      	beq.n	8004152 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040b0:	f7fd fcac 	bl	8001a0c <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d902      	bls.n	80040c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d13d      	bne.n	8004142 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040de:	d111      	bne.n	8004104 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e8:	d004      	beq.n	80040f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f2:	d107      	bne.n	8004104 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004102:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410c:	d10f      	bne.n	800412e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800412c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e017      	b.n	8004172 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	3b01      	subs	r3, #1
 8004150:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4013      	ands	r3, r2
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	429a      	cmp	r2, r3
 8004160:	bf0c      	ite	eq
 8004162:	2301      	moveq	r3, #1
 8004164:	2300      	movne	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	461a      	mov	r2, r3
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	429a      	cmp	r2, r3
 800416e:	d19b      	bne.n	80040a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000000 	.word	0x20000000

08004180 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004194:	d111      	bne.n	80041ba <SPI_EndRxTransaction+0x3a>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419e:	d004      	beq.n	80041aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a8:	d107      	bne.n	80041ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c2:	d12a      	bne.n	800421a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041cc:	d012      	beq.n	80041f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2180      	movs	r1, #128	; 0x80
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7ff ff49 	bl	8004070 <SPI_WaitFlagStateUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d02d      	beq.n	8004240 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e8:	f043 0220 	orr.w	r2, r3, #32
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e026      	b.n	8004242 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2200      	movs	r2, #0
 80041fc:	2101      	movs	r1, #1
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f7ff ff36 	bl	8004070 <SPI_WaitFlagStateUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01a      	beq.n	8004240 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f043 0220 	orr.w	r2, r3, #32
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e013      	b.n	8004242 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2200      	movs	r2, #0
 8004222:	2101      	movs	r1, #1
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff ff23 	bl	8004070 <SPI_WaitFlagStateUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004234:	f043 0220 	orr.w	r2, r3, #32
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e000      	b.n	8004242 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af02      	add	r7, sp, #8
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004258:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <SPI_EndRxTxTransaction+0x7c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1b      	ldr	r2, [pc, #108]	; (80042cc <SPI_EndRxTxTransaction+0x80>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	0d5b      	lsrs	r3, r3, #21
 8004264:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004268:	fb02 f303 	mul.w	r3, r2, r3
 800426c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004276:	d112      	bne.n	800429e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2200      	movs	r2, #0
 8004280:	2180      	movs	r1, #128	; 0x80
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f7ff fef4 	bl	8004070 <SPI_WaitFlagStateUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d016      	beq.n	80042bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	f043 0220 	orr.w	r2, r3, #32
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e00f      	b.n	80042be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b4:	2b80      	cmp	r3, #128	; 0x80
 80042b6:	d0f2      	beq.n	800429e <SPI_EndRxTxTransaction+0x52>
 80042b8:	e000      	b.n	80042bc <SPI_EndRxTxTransaction+0x70>
        break;
 80042ba:	bf00      	nop
  }

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000000 	.word	0x20000000
 80042cc:	165e9f81 	.word	0x165e9f81

080042d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e041      	b.n	8004366 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fd f93a 	bl	8001570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3304      	adds	r3, #4
 800430c:	4619      	mov	r1, r3
 800430e:	4610      	mov	r0, r2
 8004310:	f000 fda4 	bl	8004e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	d001      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e04e      	b.n	8004426 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0201 	orr.w	r2, r2, #1
 800439e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a23      	ldr	r2, [pc, #140]	; (8004434 <HAL_TIM_Base_Start_IT+0xc4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d022      	beq.n	80043f0 <HAL_TIM_Base_Start_IT+0x80>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b2:	d01d      	beq.n	80043f0 <HAL_TIM_Base_Start_IT+0x80>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1f      	ldr	r2, [pc, #124]	; (8004438 <HAL_TIM_Base_Start_IT+0xc8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d018      	beq.n	80043f0 <HAL_TIM_Base_Start_IT+0x80>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1e      	ldr	r2, [pc, #120]	; (800443c <HAL_TIM_Base_Start_IT+0xcc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d013      	beq.n	80043f0 <HAL_TIM_Base_Start_IT+0x80>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1c      	ldr	r2, [pc, #112]	; (8004440 <HAL_TIM_Base_Start_IT+0xd0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00e      	beq.n	80043f0 <HAL_TIM_Base_Start_IT+0x80>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1b      	ldr	r2, [pc, #108]	; (8004444 <HAL_TIM_Base_Start_IT+0xd4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d009      	beq.n	80043f0 <HAL_TIM_Base_Start_IT+0x80>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a19      	ldr	r2, [pc, #100]	; (8004448 <HAL_TIM_Base_Start_IT+0xd8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d004      	beq.n	80043f0 <HAL_TIM_Base_Start_IT+0x80>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a18      	ldr	r2, [pc, #96]	; (800444c <HAL_TIM_Base_Start_IT+0xdc>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d111      	bne.n	8004414 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b06      	cmp	r3, #6
 8004400:	d010      	beq.n	8004424 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f042 0201 	orr.w	r2, r2, #1
 8004410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004412:	e007      	b.n	8004424 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40010000 	.word	0x40010000
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800
 8004440:	40000c00 	.word	0x40000c00
 8004444:	40010400 	.word	0x40010400
 8004448:	40014000 	.word	0x40014000
 800444c:	40001800 	.word	0x40001800

08004450 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e041      	b.n	80044e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7fd f814 	bl	80014a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3304      	adds	r3, #4
 800448c:	4619      	mov	r1, r3
 800448e:	4610      	mov	r0, r2
 8004490:	f000 fce4 	bl	8004e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d109      	bne.n	8004514 <HAL_TIM_PWM_Start+0x24>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b01      	cmp	r3, #1
 800450a:	bf14      	ite	ne
 800450c:	2301      	movne	r3, #1
 800450e:	2300      	moveq	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	e022      	b.n	800455a <HAL_TIM_PWM_Start+0x6a>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b04      	cmp	r3, #4
 8004518:	d109      	bne.n	800452e <HAL_TIM_PWM_Start+0x3e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b01      	cmp	r3, #1
 8004524:	bf14      	ite	ne
 8004526:	2301      	movne	r3, #1
 8004528:	2300      	moveq	r3, #0
 800452a:	b2db      	uxtb	r3, r3
 800452c:	e015      	b.n	800455a <HAL_TIM_PWM_Start+0x6a>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b08      	cmp	r3, #8
 8004532:	d109      	bne.n	8004548 <HAL_TIM_PWM_Start+0x58>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	bf14      	ite	ne
 8004540:	2301      	movne	r3, #1
 8004542:	2300      	moveq	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	e008      	b.n	800455a <HAL_TIM_PWM_Start+0x6a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	bf14      	ite	ne
 8004554:	2301      	movne	r3, #1
 8004556:	2300      	moveq	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e07c      	b.n	800465c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d104      	bne.n	8004572 <HAL_TIM_PWM_Start+0x82>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004570:	e013      	b.n	800459a <HAL_TIM_PWM_Start+0xaa>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b04      	cmp	r3, #4
 8004576:	d104      	bne.n	8004582 <HAL_TIM_PWM_Start+0x92>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004580:	e00b      	b.n	800459a <HAL_TIM_PWM_Start+0xaa>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b08      	cmp	r3, #8
 8004586:	d104      	bne.n	8004592 <HAL_TIM_PWM_Start+0xa2>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004590:	e003      	b.n	800459a <HAL_TIM_PWM_Start+0xaa>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2202      	movs	r2, #2
 8004596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2201      	movs	r2, #1
 80045a0:	6839      	ldr	r1, [r7, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 ff44 	bl	8005430 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a2d      	ldr	r2, [pc, #180]	; (8004664 <HAL_TIM_PWM_Start+0x174>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d004      	beq.n	80045bc <HAL_TIM_PWM_Start+0xcc>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a2c      	ldr	r2, [pc, #176]	; (8004668 <HAL_TIM_PWM_Start+0x178>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d101      	bne.n	80045c0 <HAL_TIM_PWM_Start+0xd0>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <HAL_TIM_PWM_Start+0xd2>
 80045c0:	2300      	movs	r3, #0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d007      	beq.n	80045d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a22      	ldr	r2, [pc, #136]	; (8004664 <HAL_TIM_PWM_Start+0x174>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d022      	beq.n	8004626 <HAL_TIM_PWM_Start+0x136>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e8:	d01d      	beq.n	8004626 <HAL_TIM_PWM_Start+0x136>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a1f      	ldr	r2, [pc, #124]	; (800466c <HAL_TIM_PWM_Start+0x17c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d018      	beq.n	8004626 <HAL_TIM_PWM_Start+0x136>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a1d      	ldr	r2, [pc, #116]	; (8004670 <HAL_TIM_PWM_Start+0x180>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <HAL_TIM_PWM_Start+0x136>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a1c      	ldr	r2, [pc, #112]	; (8004674 <HAL_TIM_PWM_Start+0x184>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00e      	beq.n	8004626 <HAL_TIM_PWM_Start+0x136>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a16      	ldr	r2, [pc, #88]	; (8004668 <HAL_TIM_PWM_Start+0x178>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d009      	beq.n	8004626 <HAL_TIM_PWM_Start+0x136>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a18      	ldr	r2, [pc, #96]	; (8004678 <HAL_TIM_PWM_Start+0x188>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d004      	beq.n	8004626 <HAL_TIM_PWM_Start+0x136>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a16      	ldr	r2, [pc, #88]	; (800467c <HAL_TIM_PWM_Start+0x18c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d111      	bne.n	800464a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b06      	cmp	r3, #6
 8004636:	d010      	beq.n	800465a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004648:	e007      	b.n	800465a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0201 	orr.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40010000 	.word	0x40010000
 8004668:	40010400 	.word	0x40010400
 800466c:	40000400 	.word	0x40000400
 8004670:	40000800 	.word	0x40000800
 8004674:	40000c00 	.word	0x40000c00
 8004678:	40014000 	.word	0x40014000
 800467c:	40001800 	.word	0x40001800

08004680 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e097      	b.n	80047c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d106      	bne.n	80046ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7fc ffd3 	bl	8001654 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2202      	movs	r2, #2
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046c4:	f023 0307 	bic.w	r3, r3, #7
 80046c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4619      	mov	r1, r3
 80046d4:	4610      	mov	r0, r2
 80046d6:	f000 fbc1 	bl	8004e5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004702:	f023 0303 	bic.w	r3, r3, #3
 8004706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	021b      	lsls	r3, r3, #8
 8004712:	4313      	orrs	r3, r2
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004720:	f023 030c 	bic.w	r3, r3, #12
 8004724:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800472c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004730:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	021b      	lsls	r3, r3, #8
 800473c:	4313      	orrs	r3, r2
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	011a      	lsls	r2, r3, #4
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	031b      	lsls	r3, r3, #12
 8004750:	4313      	orrs	r3, r2
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004766:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	4313      	orrs	r3, r2
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d110      	bne.n	800481e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d102      	bne.n	8004808 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004802:	7b7b      	ldrb	r3, [r7, #13]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d001      	beq.n	800480c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e069      	b.n	80048e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800481c:	e031      	b.n	8004882 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b04      	cmp	r3, #4
 8004822:	d110      	bne.n	8004846 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004824:	7bbb      	ldrb	r3, [r7, #14]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d102      	bne.n	8004830 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800482a:	7b3b      	ldrb	r3, [r7, #12]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d001      	beq.n	8004834 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e055      	b.n	80048e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004844:	e01d      	b.n	8004882 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004846:	7bfb      	ldrb	r3, [r7, #15]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d108      	bne.n	800485e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800484c:	7bbb      	ldrb	r3, [r7, #14]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d105      	bne.n	800485e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004852:	7b7b      	ldrb	r3, [r7, #13]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d102      	bne.n	800485e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004858:	7b3b      	ldrb	r3, [r7, #12]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d001      	beq.n	8004862 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e03e      	b.n	80048e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2202      	movs	r2, #2
 800487e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_TIM_Encoder_Start+0xc4>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b04      	cmp	r3, #4
 800488c:	d008      	beq.n	80048a0 <HAL_TIM_Encoder_Start+0xd4>
 800488e:	e00f      	b.n	80048b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2201      	movs	r2, #1
 8004896:	2100      	movs	r1, #0
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fdc9 	bl	8005430 <TIM_CCxChannelCmd>
      break;
 800489e:	e016      	b.n	80048ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2201      	movs	r2, #1
 80048a6:	2104      	movs	r1, #4
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fdc1 	bl	8005430 <TIM_CCxChannelCmd>
      break;
 80048ae:	e00e      	b.n	80048ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2201      	movs	r2, #1
 80048b6:	2100      	movs	r1, #0
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fdb9 	bl	8005430 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2201      	movs	r2, #1
 80048c4:	2104      	movs	r1, #4
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fdb2 	bl	8005430 <TIM_CCxChannelCmd>
      break;
 80048cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0201 	orr.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d122      	bne.n	8004944 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b02      	cmp	r3, #2
 800490a:	d11b      	bne.n	8004944 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0202 	mvn.w	r2, #2
 8004914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fa77 	bl	8004e1e <HAL_TIM_IC_CaptureCallback>
 8004930:	e005      	b.n	800493e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fa69 	bl	8004e0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fa7a 	bl	8004e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	2b04      	cmp	r3, #4
 8004950:	d122      	bne.n	8004998 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b04      	cmp	r3, #4
 800495e:	d11b      	bne.n	8004998 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0204 	mvn.w	r2, #4
 8004968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2202      	movs	r2, #2
 800496e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fa4d 	bl	8004e1e <HAL_TIM_IC_CaptureCallback>
 8004984:	e005      	b.n	8004992 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fa3f 	bl	8004e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fa50 	bl	8004e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d122      	bne.n	80049ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d11b      	bne.n	80049ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0208 	mvn.w	r2, #8
 80049bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2204      	movs	r2, #4
 80049c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fa23 	bl	8004e1e <HAL_TIM_IC_CaptureCallback>
 80049d8:	e005      	b.n	80049e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fa15 	bl	8004e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fa26 	bl	8004e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f003 0310 	and.w	r3, r3, #16
 80049f6:	2b10      	cmp	r3, #16
 80049f8:	d122      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d11b      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0210 	mvn.w	r2, #16
 8004a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2208      	movs	r2, #8
 8004a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f9f9 	bl	8004e1e <HAL_TIM_IC_CaptureCallback>
 8004a2c:	e005      	b.n	8004a3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f9eb 	bl	8004e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f9fc 	bl	8004e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d10e      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d107      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0201 	mvn.w	r2, #1
 8004a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f002 f8f8 	bl	8006c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a76:	2b80      	cmp	r3, #128	; 0x80
 8004a78:	d10e      	bne.n	8004a98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a84:	2b80      	cmp	r3, #128	; 0x80
 8004a86:	d107      	bne.n	8004a98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fd78 	bl	8005588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa2:	2b40      	cmp	r3, #64	; 0x40
 8004aa4:	d10e      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab0:	2b40      	cmp	r3, #64	; 0x40
 8004ab2:	d107      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f9c1 	bl	8004e46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f003 0320 	and.w	r3, r3, #32
 8004ace:	2b20      	cmp	r3, #32
 8004ad0:	d10e      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	d107      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f06f 0220 	mvn.w	r2, #32
 8004ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fd42 	bl	8005574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004af0:	bf00      	nop
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e0ae      	b.n	8004c74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b0c      	cmp	r3, #12
 8004b22:	f200 809f 	bhi.w	8004c64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b26:	a201      	add	r2, pc, #4	; (adr r2, 8004b2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2c:	08004b61 	.word	0x08004b61
 8004b30:	08004c65 	.word	0x08004c65
 8004b34:	08004c65 	.word	0x08004c65
 8004b38:	08004c65 	.word	0x08004c65
 8004b3c:	08004ba1 	.word	0x08004ba1
 8004b40:	08004c65 	.word	0x08004c65
 8004b44:	08004c65 	.word	0x08004c65
 8004b48:	08004c65 	.word	0x08004c65
 8004b4c:	08004be3 	.word	0x08004be3
 8004b50:	08004c65 	.word	0x08004c65
 8004b54:	08004c65 	.word	0x08004c65
 8004b58:	08004c65 	.word	0x08004c65
 8004b5c:	08004c23 	.word	0x08004c23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fa18 	bl	8004f9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0208 	orr.w	r2, r2, #8
 8004b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0204 	bic.w	r2, r2, #4
 8004b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6999      	ldr	r1, [r3, #24]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	619a      	str	r2, [r3, #24]
      break;
 8004b9e:	e064      	b.n	8004c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fa68 	bl	800507c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6999      	ldr	r1, [r3, #24]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	021a      	lsls	r2, r3, #8
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	619a      	str	r2, [r3, #24]
      break;
 8004be0:	e043      	b.n	8004c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fabd 	bl	8005168 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f042 0208 	orr.w	r2, r2, #8
 8004bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0204 	bic.w	r2, r2, #4
 8004c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69d9      	ldr	r1, [r3, #28]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	61da      	str	r2, [r3, #28]
      break;
 8004c20:	e023      	b.n	8004c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fb11 	bl	8005250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69da      	ldr	r2, [r3, #28]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69d9      	ldr	r1, [r3, #28]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	021a      	lsls	r2, r3, #8
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	61da      	str	r2, [r3, #28]
      break;
 8004c62:	e002      	b.n	8004c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	75fb      	strb	r3, [r7, #23]
      break;
 8004c68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_TIM_ConfigClockSource+0x1c>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e0b4      	b.n	8004e02 <HAL_TIM_ConfigClockSource+0x186>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd0:	d03e      	beq.n	8004d50 <HAL_TIM_ConfigClockSource+0xd4>
 8004cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd6:	f200 8087 	bhi.w	8004de8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cde:	f000 8086 	beq.w	8004dee <HAL_TIM_ConfigClockSource+0x172>
 8004ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce6:	d87f      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce8:	2b70      	cmp	r3, #112	; 0x70
 8004cea:	d01a      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0xa6>
 8004cec:	2b70      	cmp	r3, #112	; 0x70
 8004cee:	d87b      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf0:	2b60      	cmp	r3, #96	; 0x60
 8004cf2:	d050      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x11a>
 8004cf4:	2b60      	cmp	r3, #96	; 0x60
 8004cf6:	d877      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf8:	2b50      	cmp	r3, #80	; 0x50
 8004cfa:	d03c      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0xfa>
 8004cfc:	2b50      	cmp	r3, #80	; 0x50
 8004cfe:	d873      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d00:	2b40      	cmp	r3, #64	; 0x40
 8004d02:	d058      	beq.n	8004db6 <HAL_TIM_ConfigClockSource+0x13a>
 8004d04:	2b40      	cmp	r3, #64	; 0x40
 8004d06:	d86f      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d08:	2b30      	cmp	r3, #48	; 0x30
 8004d0a:	d064      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d0c:	2b30      	cmp	r3, #48	; 0x30
 8004d0e:	d86b      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d060      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d867      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d05c      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d05a      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d20:	e062      	b.n	8004de8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6899      	ldr	r1, [r3, #8]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f000 fb5d 	bl	80053f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	609a      	str	r2, [r3, #8]
      break;
 8004d4e:	e04f      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	6899      	ldr	r1, [r3, #8]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f000 fb46 	bl	80053f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d72:	609a      	str	r2, [r3, #8]
      break;
 8004d74:	e03c      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6859      	ldr	r1, [r3, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	461a      	mov	r2, r3
 8004d84:	f000 faba 	bl	80052fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2150      	movs	r1, #80	; 0x50
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fb13 	bl	80053ba <TIM_ITRx_SetConfig>
      break;
 8004d94:	e02c      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6818      	ldr	r0, [r3, #0]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	6859      	ldr	r1, [r3, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	461a      	mov	r2, r3
 8004da4:	f000 fad9 	bl	800535a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2160      	movs	r1, #96	; 0x60
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fb03 	bl	80053ba <TIM_ITRx_SetConfig>
      break;
 8004db4:	e01c      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	6859      	ldr	r1, [r3, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f000 fa9a 	bl	80052fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2140      	movs	r1, #64	; 0x40
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 faf3 	bl	80053ba <TIM_ITRx_SetConfig>
      break;
 8004dd4:	e00c      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4619      	mov	r1, r3
 8004de0:	4610      	mov	r0, r2
 8004de2:	f000 faea 	bl	80053ba <TIM_ITRx_SetConfig>
      break;
 8004de6:	e003      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
      break;
 8004dec:	e000      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
	...

08004e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a40      	ldr	r2, [pc, #256]	; (8004f70 <TIM_Base_SetConfig+0x114>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d013      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7a:	d00f      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a3d      	ldr	r2, [pc, #244]	; (8004f74 <TIM_Base_SetConfig+0x118>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00b      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a3c      	ldr	r2, [pc, #240]	; (8004f78 <TIM_Base_SetConfig+0x11c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d007      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a3b      	ldr	r2, [pc, #236]	; (8004f7c <TIM_Base_SetConfig+0x120>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d003      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a3a      	ldr	r2, [pc, #232]	; (8004f80 <TIM_Base_SetConfig+0x124>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d108      	bne.n	8004eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a2f      	ldr	r2, [pc, #188]	; (8004f70 <TIM_Base_SetConfig+0x114>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d02b      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebc:	d027      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a2c      	ldr	r2, [pc, #176]	; (8004f74 <TIM_Base_SetConfig+0x118>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d023      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a2b      	ldr	r2, [pc, #172]	; (8004f78 <TIM_Base_SetConfig+0x11c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d01f      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a2a      	ldr	r2, [pc, #168]	; (8004f7c <TIM_Base_SetConfig+0x120>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01b      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a29      	ldr	r2, [pc, #164]	; (8004f80 <TIM_Base_SetConfig+0x124>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d017      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a28      	ldr	r2, [pc, #160]	; (8004f84 <TIM_Base_SetConfig+0x128>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a27      	ldr	r2, [pc, #156]	; (8004f88 <TIM_Base_SetConfig+0x12c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00f      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a26      	ldr	r2, [pc, #152]	; (8004f8c <TIM_Base_SetConfig+0x130>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00b      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a25      	ldr	r2, [pc, #148]	; (8004f90 <TIM_Base_SetConfig+0x134>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d007      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a24      	ldr	r2, [pc, #144]	; (8004f94 <TIM_Base_SetConfig+0x138>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d003      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a23      	ldr	r2, [pc, #140]	; (8004f98 <TIM_Base_SetConfig+0x13c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d108      	bne.n	8004f20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a0a      	ldr	r2, [pc, #40]	; (8004f70 <TIM_Base_SetConfig+0x114>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_Base_SetConfig+0xf8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a0c      	ldr	r2, [pc, #48]	; (8004f80 <TIM_Base_SetConfig+0x124>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d103      	bne.n	8004f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	615a      	str	r2, [r3, #20]
}
 8004f62:	bf00      	nop
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40010000 	.word	0x40010000
 8004f74:	40000400 	.word	0x40000400
 8004f78:	40000800 	.word	0x40000800
 8004f7c:	40000c00 	.word	0x40000c00
 8004f80:	40010400 	.word	0x40010400
 8004f84:	40014000 	.word	0x40014000
 8004f88:	40014400 	.word	0x40014400
 8004f8c:	40014800 	.word	0x40014800
 8004f90:	40001800 	.word	0x40001800
 8004f94:	40001c00 	.word	0x40001c00
 8004f98:	40002000 	.word	0x40002000

08004f9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	f023 0201 	bic.w	r2, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0303 	bic.w	r3, r3, #3
 8004fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f023 0302 	bic.w	r3, r3, #2
 8004fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a20      	ldr	r2, [pc, #128]	; (8005074 <TIM_OC1_SetConfig+0xd8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d003      	beq.n	8005000 <TIM_OC1_SetConfig+0x64>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a1f      	ldr	r2, [pc, #124]	; (8005078 <TIM_OC1_SetConfig+0xdc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d10c      	bne.n	800501a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f023 0308 	bic.w	r3, r3, #8
 8005006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f023 0304 	bic.w	r3, r3, #4
 8005018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a15      	ldr	r2, [pc, #84]	; (8005074 <TIM_OC1_SetConfig+0xd8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d003      	beq.n	800502a <TIM_OC1_SetConfig+0x8e>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a14      	ldr	r2, [pc, #80]	; (8005078 <TIM_OC1_SetConfig+0xdc>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d111      	bne.n	800504e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	621a      	str	r2, [r3, #32]
}
 8005068:	bf00      	nop
 800506a:	371c      	adds	r7, #28
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	40010000 	.word	0x40010000
 8005078:	40010400 	.word	0x40010400

0800507c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	f023 0210 	bic.w	r2, r3, #16
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	021b      	lsls	r3, r3, #8
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f023 0320 	bic.w	r3, r3, #32
 80050c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a22      	ldr	r2, [pc, #136]	; (8005160 <TIM_OC2_SetConfig+0xe4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d003      	beq.n	80050e4 <TIM_OC2_SetConfig+0x68>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a21      	ldr	r2, [pc, #132]	; (8005164 <TIM_OC2_SetConfig+0xe8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d10d      	bne.n	8005100 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a17      	ldr	r2, [pc, #92]	; (8005160 <TIM_OC2_SetConfig+0xe4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d003      	beq.n	8005110 <TIM_OC2_SetConfig+0x94>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a16      	ldr	r2, [pc, #88]	; (8005164 <TIM_OC2_SetConfig+0xe8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d113      	bne.n	8005138 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005116:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800511e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	621a      	str	r2, [r3, #32]
}
 8005152:	bf00      	nop
 8005154:	371c      	adds	r7, #28
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	40010000 	.word	0x40010000
 8005164:	40010400 	.word	0x40010400

08005168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0303 	bic.w	r3, r3, #3
 800519e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a21      	ldr	r2, [pc, #132]	; (8005248 <TIM_OC3_SetConfig+0xe0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d003      	beq.n	80051ce <TIM_OC3_SetConfig+0x66>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a20      	ldr	r2, [pc, #128]	; (800524c <TIM_OC3_SetConfig+0xe4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d10d      	bne.n	80051ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a16      	ldr	r2, [pc, #88]	; (8005248 <TIM_OC3_SetConfig+0xe0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d003      	beq.n	80051fa <TIM_OC3_SetConfig+0x92>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a15      	ldr	r2, [pc, #84]	; (800524c <TIM_OC3_SetConfig+0xe4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d113      	bne.n	8005222 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	621a      	str	r2, [r3, #32]
}
 800523c:	bf00      	nop
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	40010000 	.word	0x40010000
 800524c:	40010400 	.word	0x40010400

08005250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800527e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800529a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	031b      	lsls	r3, r3, #12
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a12      	ldr	r2, [pc, #72]	; (80052f4 <TIM_OC4_SetConfig+0xa4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d003      	beq.n	80052b8 <TIM_OC4_SetConfig+0x68>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a11      	ldr	r2, [pc, #68]	; (80052f8 <TIM_OC4_SetConfig+0xa8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d109      	bne.n	80052cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	019b      	lsls	r3, r3, #6
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	621a      	str	r2, [r3, #32]
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40010000 	.word	0x40010000
 80052f8:	40010400 	.word	0x40010400

080052fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f023 0201 	bic.w	r2, r3, #1
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f023 030a 	bic.w	r3, r3, #10
 8005338:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800535a:	b480      	push	{r7}
 800535c:	b087      	sub	sp, #28
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	f023 0210 	bic.w	r2, r3, #16
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005384:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	031b      	lsls	r3, r3, #12
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005396:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b085      	sub	sp, #20
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f043 0307 	orr.w	r3, r3, #7
 80053dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	609a      	str	r2, [r3, #8]
}
 80053e4:	bf00      	nop
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800540a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	021a      	lsls	r2, r3, #8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	431a      	orrs	r2, r3
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4313      	orrs	r3, r2
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	609a      	str	r2, [r3, #8]
}
 8005424:	bf00      	nop
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f003 031f 	and.w	r3, r3, #31
 8005442:	2201      	movs	r2, #1
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a1a      	ldr	r2, [r3, #32]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	43db      	mvns	r3, r3
 8005452:	401a      	ands	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a1a      	ldr	r2, [r3, #32]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f003 031f 	and.w	r3, r3, #31
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	fa01 f303 	lsl.w	r3, r1, r3
 8005468:	431a      	orrs	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	621a      	str	r2, [r3, #32]
}
 800546e:	bf00      	nop
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800548c:	2b01      	cmp	r3, #1
 800548e:	d101      	bne.n	8005494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005490:	2302      	movs	r3, #2
 8005492:	e05a      	b.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a21      	ldr	r2, [pc, #132]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d022      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e0:	d01d      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1d      	ldr	r2, [pc, #116]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d018      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1b      	ldr	r2, [pc, #108]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d013      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1a      	ldr	r2, [pc, #104]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d00e      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a18      	ldr	r2, [pc, #96]	; (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d009      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a17      	ldr	r2, [pc, #92]	; (800556c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d004      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a15      	ldr	r2, [pc, #84]	; (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d10c      	bne.n	8005538 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005524:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	4313      	orrs	r3, r2
 800552e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40010000 	.word	0x40010000
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800
 8005564:	40000c00 	.word	0x40000c00
 8005568:	40010400 	.word	0x40010400
 800556c:	40014000 	.word	0x40014000
 8005570:	40001800 	.word	0x40001800

08005574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e03f      	b.n	800562e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fc f8ee 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2224      	movs	r2, #36	; 0x24
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f829 	bl	8005638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	691a      	ldr	r2, [r3, #16]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695a      	ldr	r2, [r3, #20]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005604:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005614:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800563c:	b0c0      	sub	sp, #256	; 0x100
 800563e:	af00      	add	r7, sp, #0
 8005640:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005654:	68d9      	ldr	r1, [r3, #12]
 8005656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	ea40 0301 	orr.w	r3, r0, r1
 8005660:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	431a      	orrs	r2, r3
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	431a      	orrs	r2, r3
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005690:	f021 010c 	bic.w	r1, r1, #12
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800569e:	430b      	orrs	r3, r1
 80056a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b2:	6999      	ldr	r1, [r3, #24]
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	ea40 0301 	orr.w	r3, r0, r1
 80056be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	4b8f      	ldr	r3, [pc, #572]	; (8005904 <UART_SetConfig+0x2cc>)
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d005      	beq.n	80056d8 <UART_SetConfig+0xa0>
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	4b8d      	ldr	r3, [pc, #564]	; (8005908 <UART_SetConfig+0x2d0>)
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d104      	bne.n	80056e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056d8:	f7fe f822 	bl	8003720 <HAL_RCC_GetPCLK2Freq>
 80056dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056e0:	e003      	b.n	80056ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056e2:	f7fe f809 	bl	80036f8 <HAL_RCC_GetPCLK1Freq>
 80056e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056f4:	f040 810c 	bne.w	8005910 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056fc:	2200      	movs	r2, #0
 80056fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005702:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005706:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800570a:	4622      	mov	r2, r4
 800570c:	462b      	mov	r3, r5
 800570e:	1891      	adds	r1, r2, r2
 8005710:	65b9      	str	r1, [r7, #88]	; 0x58
 8005712:	415b      	adcs	r3, r3
 8005714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005716:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800571a:	4621      	mov	r1, r4
 800571c:	eb12 0801 	adds.w	r8, r2, r1
 8005720:	4629      	mov	r1, r5
 8005722:	eb43 0901 	adc.w	r9, r3, r1
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800573a:	4690      	mov	r8, r2
 800573c:	4699      	mov	r9, r3
 800573e:	4623      	mov	r3, r4
 8005740:	eb18 0303 	adds.w	r3, r8, r3
 8005744:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005748:	462b      	mov	r3, r5
 800574a:	eb49 0303 	adc.w	r3, r9, r3
 800574e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800575e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005762:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005766:	460b      	mov	r3, r1
 8005768:	18db      	adds	r3, r3, r3
 800576a:	653b      	str	r3, [r7, #80]	; 0x50
 800576c:	4613      	mov	r3, r2
 800576e:	eb42 0303 	adc.w	r3, r2, r3
 8005772:	657b      	str	r3, [r7, #84]	; 0x54
 8005774:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005778:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800577c:	f7fa ff68 	bl	8000650 <__aeabi_uldivmod>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4b61      	ldr	r3, [pc, #388]	; (800590c <UART_SetConfig+0x2d4>)
 8005786:	fba3 2302 	umull	r2, r3, r3, r2
 800578a:	095b      	lsrs	r3, r3, #5
 800578c:	011c      	lsls	r4, r3, #4
 800578e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005792:	2200      	movs	r2, #0
 8005794:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005798:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800579c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80057a0:	4642      	mov	r2, r8
 80057a2:	464b      	mov	r3, r9
 80057a4:	1891      	adds	r1, r2, r2
 80057a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80057a8:	415b      	adcs	r3, r3
 80057aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057b0:	4641      	mov	r1, r8
 80057b2:	eb12 0a01 	adds.w	sl, r2, r1
 80057b6:	4649      	mov	r1, r9
 80057b8:	eb43 0b01 	adc.w	fp, r3, r1
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057d0:	4692      	mov	sl, r2
 80057d2:	469b      	mov	fp, r3
 80057d4:	4643      	mov	r3, r8
 80057d6:	eb1a 0303 	adds.w	r3, sl, r3
 80057da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057de:	464b      	mov	r3, r9
 80057e0:	eb4b 0303 	adc.w	r3, fp, r3
 80057e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057fc:	460b      	mov	r3, r1
 80057fe:	18db      	adds	r3, r3, r3
 8005800:	643b      	str	r3, [r7, #64]	; 0x40
 8005802:	4613      	mov	r3, r2
 8005804:	eb42 0303 	adc.w	r3, r2, r3
 8005808:	647b      	str	r3, [r7, #68]	; 0x44
 800580a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800580e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005812:	f7fa ff1d 	bl	8000650 <__aeabi_uldivmod>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4611      	mov	r1, r2
 800581c:	4b3b      	ldr	r3, [pc, #236]	; (800590c <UART_SetConfig+0x2d4>)
 800581e:	fba3 2301 	umull	r2, r3, r3, r1
 8005822:	095b      	lsrs	r3, r3, #5
 8005824:	2264      	movs	r2, #100	; 0x64
 8005826:	fb02 f303 	mul.w	r3, r2, r3
 800582a:	1acb      	subs	r3, r1, r3
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005832:	4b36      	ldr	r3, [pc, #216]	; (800590c <UART_SetConfig+0x2d4>)
 8005834:	fba3 2302 	umull	r2, r3, r3, r2
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005840:	441c      	add	r4, r3
 8005842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005846:	2200      	movs	r2, #0
 8005848:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800584c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005850:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005854:	4642      	mov	r2, r8
 8005856:	464b      	mov	r3, r9
 8005858:	1891      	adds	r1, r2, r2
 800585a:	63b9      	str	r1, [r7, #56]	; 0x38
 800585c:	415b      	adcs	r3, r3
 800585e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005860:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005864:	4641      	mov	r1, r8
 8005866:	1851      	adds	r1, r2, r1
 8005868:	6339      	str	r1, [r7, #48]	; 0x30
 800586a:	4649      	mov	r1, r9
 800586c:	414b      	adcs	r3, r1
 800586e:	637b      	str	r3, [r7, #52]	; 0x34
 8005870:	f04f 0200 	mov.w	r2, #0
 8005874:	f04f 0300 	mov.w	r3, #0
 8005878:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800587c:	4659      	mov	r1, fp
 800587e:	00cb      	lsls	r3, r1, #3
 8005880:	4651      	mov	r1, sl
 8005882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005886:	4651      	mov	r1, sl
 8005888:	00ca      	lsls	r2, r1, #3
 800588a:	4610      	mov	r0, r2
 800588c:	4619      	mov	r1, r3
 800588e:	4603      	mov	r3, r0
 8005890:	4642      	mov	r2, r8
 8005892:	189b      	adds	r3, r3, r2
 8005894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005898:	464b      	mov	r3, r9
 800589a:	460a      	mov	r2, r1
 800589c:	eb42 0303 	adc.w	r3, r2, r3
 80058a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80058b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058b8:	460b      	mov	r3, r1
 80058ba:	18db      	adds	r3, r3, r3
 80058bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80058be:	4613      	mov	r3, r2
 80058c0:	eb42 0303 	adc.w	r3, r2, r3
 80058c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058ce:	f7fa febf 	bl	8000650 <__aeabi_uldivmod>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4b0d      	ldr	r3, [pc, #52]	; (800590c <UART_SetConfig+0x2d4>)
 80058d8:	fba3 1302 	umull	r1, r3, r3, r2
 80058dc:	095b      	lsrs	r3, r3, #5
 80058de:	2164      	movs	r1, #100	; 0x64
 80058e0:	fb01 f303 	mul.w	r3, r1, r3
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	3332      	adds	r3, #50	; 0x32
 80058ea:	4a08      	ldr	r2, [pc, #32]	; (800590c <UART_SetConfig+0x2d4>)
 80058ec:	fba2 2303 	umull	r2, r3, r2, r3
 80058f0:	095b      	lsrs	r3, r3, #5
 80058f2:	f003 0207 	and.w	r2, r3, #7
 80058f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4422      	add	r2, r4
 80058fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005900:	e106      	b.n	8005b10 <UART_SetConfig+0x4d8>
 8005902:	bf00      	nop
 8005904:	40011000 	.word	0x40011000
 8005908:	40011400 	.word	0x40011400
 800590c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005914:	2200      	movs	r2, #0
 8005916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800591a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800591e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005922:	4642      	mov	r2, r8
 8005924:	464b      	mov	r3, r9
 8005926:	1891      	adds	r1, r2, r2
 8005928:	6239      	str	r1, [r7, #32]
 800592a:	415b      	adcs	r3, r3
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
 800592e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005932:	4641      	mov	r1, r8
 8005934:	1854      	adds	r4, r2, r1
 8005936:	4649      	mov	r1, r9
 8005938:	eb43 0501 	adc.w	r5, r3, r1
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	00eb      	lsls	r3, r5, #3
 8005946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800594a:	00e2      	lsls	r2, r4, #3
 800594c:	4614      	mov	r4, r2
 800594e:	461d      	mov	r5, r3
 8005950:	4643      	mov	r3, r8
 8005952:	18e3      	adds	r3, r4, r3
 8005954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005958:	464b      	mov	r3, r9
 800595a:	eb45 0303 	adc.w	r3, r5, r3
 800595e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800596e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	f04f 0300 	mov.w	r3, #0
 800597a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800597e:	4629      	mov	r1, r5
 8005980:	008b      	lsls	r3, r1, #2
 8005982:	4621      	mov	r1, r4
 8005984:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005988:	4621      	mov	r1, r4
 800598a:	008a      	lsls	r2, r1, #2
 800598c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005990:	f7fa fe5e 	bl	8000650 <__aeabi_uldivmod>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	4b60      	ldr	r3, [pc, #384]	; (8005b1c <UART_SetConfig+0x4e4>)
 800599a:	fba3 2302 	umull	r2, r3, r3, r2
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	011c      	lsls	r4, r3, #4
 80059a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80059b4:	4642      	mov	r2, r8
 80059b6:	464b      	mov	r3, r9
 80059b8:	1891      	adds	r1, r2, r2
 80059ba:	61b9      	str	r1, [r7, #24]
 80059bc:	415b      	adcs	r3, r3
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059c4:	4641      	mov	r1, r8
 80059c6:	1851      	adds	r1, r2, r1
 80059c8:	6139      	str	r1, [r7, #16]
 80059ca:	4649      	mov	r1, r9
 80059cc:	414b      	adcs	r3, r1
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059dc:	4659      	mov	r1, fp
 80059de:	00cb      	lsls	r3, r1, #3
 80059e0:	4651      	mov	r1, sl
 80059e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059e6:	4651      	mov	r1, sl
 80059e8:	00ca      	lsls	r2, r1, #3
 80059ea:	4610      	mov	r0, r2
 80059ec:	4619      	mov	r1, r3
 80059ee:	4603      	mov	r3, r0
 80059f0:	4642      	mov	r2, r8
 80059f2:	189b      	adds	r3, r3, r2
 80059f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059f8:	464b      	mov	r3, r9
 80059fa:	460a      	mov	r2, r1
 80059fc:	eb42 0303 	adc.w	r3, r2, r3
 8005a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	008b      	lsls	r3, r1, #2
 8005a20:	4641      	mov	r1, r8
 8005a22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a26:	4641      	mov	r1, r8
 8005a28:	008a      	lsls	r2, r1, #2
 8005a2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a2e:	f7fa fe0f 	bl	8000650 <__aeabi_uldivmod>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	4b38      	ldr	r3, [pc, #224]	; (8005b1c <UART_SetConfig+0x4e4>)
 8005a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	2264      	movs	r2, #100	; 0x64
 8005a42:	fb02 f303 	mul.w	r3, r2, r3
 8005a46:	1acb      	subs	r3, r1, r3
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	3332      	adds	r3, #50	; 0x32
 8005a4c:	4a33      	ldr	r2, [pc, #204]	; (8005b1c <UART_SetConfig+0x4e4>)
 8005a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a58:	441c      	add	r4, r3
 8005a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a5e:	2200      	movs	r2, #0
 8005a60:	673b      	str	r3, [r7, #112]	; 0x70
 8005a62:	677a      	str	r2, [r7, #116]	; 0x74
 8005a64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a68:	4642      	mov	r2, r8
 8005a6a:	464b      	mov	r3, r9
 8005a6c:	1891      	adds	r1, r2, r2
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	415b      	adcs	r3, r3
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a78:	4641      	mov	r1, r8
 8005a7a:	1851      	adds	r1, r2, r1
 8005a7c:	6039      	str	r1, [r7, #0]
 8005a7e:	4649      	mov	r1, r9
 8005a80:	414b      	adcs	r3, r1
 8005a82:	607b      	str	r3, [r7, #4]
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a90:	4659      	mov	r1, fp
 8005a92:	00cb      	lsls	r3, r1, #3
 8005a94:	4651      	mov	r1, sl
 8005a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a9a:	4651      	mov	r1, sl
 8005a9c:	00ca      	lsls	r2, r1, #3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	4642      	mov	r2, r8
 8005aa6:	189b      	adds	r3, r3, r2
 8005aa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aaa:	464b      	mov	r3, r9
 8005aac:	460a      	mov	r2, r1
 8005aae:	eb42 0303 	adc.w	r3, r2, r3
 8005ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	663b      	str	r3, [r7, #96]	; 0x60
 8005abe:	667a      	str	r2, [r7, #100]	; 0x64
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005acc:	4649      	mov	r1, r9
 8005ace:	008b      	lsls	r3, r1, #2
 8005ad0:	4641      	mov	r1, r8
 8005ad2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ad6:	4641      	mov	r1, r8
 8005ad8:	008a      	lsls	r2, r1, #2
 8005ada:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ade:	f7fa fdb7 	bl	8000650 <__aeabi_uldivmod>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	; (8005b1c <UART_SetConfig+0x4e4>)
 8005ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	2164      	movs	r1, #100	; 0x64
 8005af0:	fb01 f303 	mul.w	r3, r1, r3
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	3332      	adds	r3, #50	; 0x32
 8005afa:	4a08      	ldr	r2, [pc, #32]	; (8005b1c <UART_SetConfig+0x4e4>)
 8005afc:	fba2 2303 	umull	r2, r3, r2, r3
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	f003 020f 	and.w	r2, r3, #15
 8005b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4422      	add	r2, r4
 8005b0e:	609a      	str	r2, [r3, #8]
}
 8005b10:	bf00      	nop
 8005b12:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b16:	46bd      	mov	sp, r7
 8005b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b1c:	51eb851f 	.word	0x51eb851f

08005b20 <L3GD20_Init>:

volatile int16_t Raw_x = 0;
volatile int16_t Raw_y = 0;
volatile int16_t Raw_z = 0;

void L3GD20_Init(void) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b096      	sub	sp, #88	; 0x58
 8005b24:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005b26:	2200      	movs	r2, #0
 8005b28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b2c:	4873      	ldr	r0, [pc, #460]	; (8005cfc <L3GD20_Init+0x1dc>)
 8005b2e:	f7fd f935 	bl	8002d9c <HAL_GPIO_WritePin>
	spiTxBuf[0] = 0x0F; //who i am register address
 8005b32:	4b73      	ldr	r3, [pc, #460]	; (8005d00 <L3GD20_Init+0x1e0>)
 8005b34:	220f      	movs	r2, #15
 8005b36:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8005b38:	2332      	movs	r3, #50	; 0x32
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	4970      	ldr	r1, [pc, #448]	; (8005d00 <L3GD20_Init+0x1e0>)
 8005b3e:	4871      	ldr	r0, [pc, #452]	; (8005d04 <L3GD20_Init+0x1e4>)
 8005b40:	f7fd fea6 	bl	8003890 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &spiRxBuf[1], 1, 50);
 8005b44:	2332      	movs	r3, #50	; 0x32
 8005b46:	2201      	movs	r2, #1
 8005b48:	496f      	ldr	r1, [pc, #444]	; (8005d08 <L3GD20_Init+0x1e8>)
 8005b4a:	486e      	ldr	r0, [pc, #440]	; (8005d04 <L3GD20_Init+0x1e4>)
 8005b4c:	f7fd ffdc 	bl	8003b08 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005b50:	2201      	movs	r2, #1
 8005b52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b56:	4869      	ldr	r0, [pc, #420]	; (8005cfc <L3GD20_Init+0x1dc>)
 8005b58:	f7fd f920 	bl	8002d9c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b62:	4866      	ldr	r0, [pc, #408]	; (8005cfc <L3GD20_Init+0x1dc>)
 8005b64:	f7fd f91a 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005b68:	2014      	movs	r0, #20
 8005b6a:	f7fb ff5b 	bl	8001a24 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b74:	4861      	ldr	r0, [pc, #388]	; (8005cfc <L3GD20_Init+0x1dc>)
 8005b76:	f7fd f911 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005b7a:	2014      	movs	r0, #20
 8005b7c:	f7fb ff52 	bl	8001a24 <HAL_Delay>
	spiTxBuf[0] = 0x20;
 8005b80:	4b5f      	ldr	r3, [pc, #380]	; (8005d00 <L3GD20_Init+0x1e0>)
 8005b82:	2220      	movs	r2, #32
 8005b84:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0xff;
 8005b86:	4b5e      	ldr	r3, [pc, #376]	; (8005d00 <L3GD20_Init+0x1e0>)
 8005b88:	22ff      	movs	r2, #255	; 0xff
 8005b8a:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8005b8c:	2332      	movs	r3, #50	; 0x32
 8005b8e:	2202      	movs	r2, #2
 8005b90:	495b      	ldr	r1, [pc, #364]	; (8005d00 <L3GD20_Init+0x1e0>)
 8005b92:	485c      	ldr	r0, [pc, #368]	; (8005d04 <L3GD20_Init+0x1e4>)
 8005b94:	f7fd fe7c 	bl	8003890 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b9e:	4857      	ldr	r0, [pc, #348]	; (8005cfc <L3GD20_Init+0x1dc>)
 8005ba0:	f7fd f8fc 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005ba4:	2014      	movs	r0, #20
 8005ba6:	f7fb ff3d 	bl	8001a24 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005baa:	2200      	movs	r2, #0
 8005bac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bb0:	4852      	ldr	r0, [pc, #328]	; (8005cfc <L3GD20_Init+0x1dc>)
 8005bb2:	f7fd f8f3 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005bb6:	2014      	movs	r0, #20
 8005bb8:	f7fb ff34 	bl	8001a24 <HAL_Delay>
	spiTxBuf[0] = 0x21;
 8005bbc:	4b50      	ldr	r3, [pc, #320]	; (8005d00 <L3GD20_Init+0x1e0>)
 8005bbe:	2221      	movs	r2, #33	; 0x21
 8005bc0:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x00;
 8005bc2:	4b4f      	ldr	r3, [pc, #316]	; (8005d00 <L3GD20_Init+0x1e0>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8005bc8:	2332      	movs	r3, #50	; 0x32
 8005bca:	2202      	movs	r2, #2
 8005bcc:	494c      	ldr	r1, [pc, #304]	; (8005d00 <L3GD20_Init+0x1e0>)
 8005bce:	484d      	ldr	r0, [pc, #308]	; (8005d04 <L3GD20_Init+0x1e4>)
 8005bd0:	f7fd fe5e 	bl	8003890 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bda:	4848      	ldr	r0, [pc, #288]	; (8005cfc <L3GD20_Init+0x1dc>)
 8005bdc:	f7fd f8de 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005be0:	2014      	movs	r0, #20
 8005be2:	f7fb ff1f 	bl	8001a24 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005be6:	2200      	movs	r2, #0
 8005be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bec:	4843      	ldr	r0, [pc, #268]	; (8005cfc <L3GD20_Init+0x1dc>)
 8005bee:	f7fd f8d5 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005bf2:	2014      	movs	r0, #20
 8005bf4:	f7fb ff16 	bl	8001a24 <HAL_Delay>
	spiTxBuf[0] = 0x22;
 8005bf8:	4b41      	ldr	r3, [pc, #260]	; (8005d00 <L3GD20_Init+0x1e0>)
 8005bfa:	2222      	movs	r2, #34	; 0x22
 8005bfc:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x00;
 8005bfe:	4b40      	ldr	r3, [pc, #256]	; (8005d00 <L3GD20_Init+0x1e0>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8005c04:	2332      	movs	r3, #50	; 0x32
 8005c06:	2202      	movs	r2, #2
 8005c08:	493d      	ldr	r1, [pc, #244]	; (8005d00 <L3GD20_Init+0x1e0>)
 8005c0a:	483e      	ldr	r0, [pc, #248]	; (8005d04 <L3GD20_Init+0x1e4>)
 8005c0c:	f7fd fe40 	bl	8003890 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005c10:	2201      	movs	r2, #1
 8005c12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c16:	4839      	ldr	r0, [pc, #228]	; (8005cfc <L3GD20_Init+0x1dc>)
 8005c18:	f7fd f8c0 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005c1c:	2014      	movs	r0, #20
 8005c1e:	f7fb ff01 	bl	8001a24 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005c22:	2200      	movs	r2, #0
 8005c24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c28:	4834      	ldr	r0, [pc, #208]	; (8005cfc <L3GD20_Init+0x1dc>)
 8005c2a:	f7fd f8b7 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005c2e:	2014      	movs	r0, #20
 8005c30:	f7fb fef8 	bl	8001a24 <HAL_Delay>
	spiTxBuf[0] = 0x23;
 8005c34:	4b32      	ldr	r3, [pc, #200]	; (8005d00 <L3GD20_Init+0x1e0>)
 8005c36:	2223      	movs	r2, #35	; 0x23
 8005c38:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x20;
 8005c3a:	4b31      	ldr	r3, [pc, #196]	; (8005d00 <L3GD20_Init+0x1e0>)
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8005c40:	2332      	movs	r3, #50	; 0x32
 8005c42:	2202      	movs	r2, #2
 8005c44:	492e      	ldr	r1, [pc, #184]	; (8005d00 <L3GD20_Init+0x1e0>)
 8005c46:	482f      	ldr	r0, [pc, #188]	; (8005d04 <L3GD20_Init+0x1e4>)
 8005c48:	f7fd fe22 	bl	8003890 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c52:	482a      	ldr	r0, [pc, #168]	; (8005cfc <L3GD20_Init+0x1dc>)
 8005c54:	f7fd f8a2 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005c58:	2014      	movs	r0, #20
 8005c5a:	f7fb fee3 	bl	8001a24 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c64:	4825      	ldr	r0, [pc, #148]	; (8005cfc <L3GD20_Init+0x1dc>)
 8005c66:	f7fd f899 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005c6a:	2014      	movs	r0, #20
 8005c6c:	f7fb feda 	bl	8001a24 <HAL_Delay>
	spiTxBuf[0] = 0x24;
 8005c70:	4b23      	ldr	r3, [pc, #140]	; (8005d00 <L3GD20_Init+0x1e0>)
 8005c72:	2224      	movs	r2, #36	; 0x24
 8005c74:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x10;
 8005c76:	4b22      	ldr	r3, [pc, #136]	; (8005d00 <L3GD20_Init+0x1e0>)
 8005c78:	2210      	movs	r2, #16
 8005c7a:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8005c7c:	2332      	movs	r3, #50	; 0x32
 8005c7e:	2202      	movs	r2, #2
 8005c80:	491f      	ldr	r1, [pc, #124]	; (8005d00 <L3GD20_Init+0x1e0>)
 8005c82:	4820      	ldr	r0, [pc, #128]	; (8005d04 <L3GD20_Init+0x1e4>)
 8005c84:	f7fd fe04 	bl	8003890 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c8e:	481b      	ldr	r0, [pc, #108]	; (8005cfc <L3GD20_Init+0x1dc>)
 8005c90:	f7fd f884 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005c94:	2014      	movs	r0, #20
 8005c96:	f7fb fec5 	bl	8001a24 <HAL_Delay>

	Raw_x = 0;
 8005c9a:	4b1c      	ldr	r3, [pc, #112]	; (8005d0c <L3GD20_Init+0x1ec>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	801a      	strh	r2, [r3, #0]
	Raw_y = 0;
 8005ca0:	4b1b      	ldr	r3, [pc, #108]	; (8005d10 <L3GD20_Init+0x1f0>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	801a      	strh	r2, [r3, #0]
	Raw_z = 0;
 8005ca6:	4b1b      	ldr	r3, [pc, #108]	; (8005d14 <L3GD20_Init+0x1f4>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	801a      	strh	r2, [r3, #0]

	int16_t averageWindow_X[AVERAGE_WINDOW_SIZE] = { 0 };
 8005cac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	605a      	str	r2, [r3, #4]
 8005cb6:	609a      	str	r2, [r3, #8]
 8005cb8:	60da      	str	r2, [r3, #12]
 8005cba:	611a      	str	r2, [r3, #16]
	int16_t averageWindow_Y[AVERAGE_WINDOW_SIZE] = { 0 };
 8005cbc:	f107 0318 	add.w	r3, r7, #24
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	605a      	str	r2, [r3, #4]
 8005cc6:	609a      	str	r2, [r3, #8]
 8005cc8:	60da      	str	r2, [r3, #12]
 8005cca:	611a      	str	r2, [r3, #16]
	int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = { 0 };
 8005ccc:	1d3b      	adds	r3, r7, #4
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	605a      	str	r2, [r3, #4]
 8005cd4:	609a      	str	r2, [r3, #8]
 8005cd6:	60da      	str	r2, [r3, #12]
 8005cd8:	611a      	str	r2, [r3, #16]

	uint32_t windowPosition = 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	657b      	str	r3, [r7, #84]	; 0x54
	int32_t tempSum_X = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tempSum_Y = 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
	int32_t tempSum_Z = 0;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	64bb      	str	r3, [r7, #72]	; 0x48

	while (1) {
		switch (currentState) {
 8005cea:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <L3GD20_Init+0x1f8>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d014      	beq.n	8005d1c <L3GD20_Init+0x1fc>
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	f000 80c0 	beq.w	8005e78 <L3GD20_Init+0x358>
 8005cf8:	e285      	b.n	8006206 <L3GD20_Init+0x6e6>
 8005cfa:	bf00      	nop
 8005cfc:	40020800 	.word	0x40020800
 8005d00:	200032b0 	.word	0x200032b0
 8005d04:	200000d8 	.word	0x200000d8
 8005d08:	200032b5 	.word	0x200032b5
 8005d0c:	200032c0 	.word	0x200032c0
 8005d10:	200032c2 	.word	0x200032c2
 8005d14:	200032c4 	.word	0x200032c4
 8005d18:	20000381 	.word	0x20000381
		case (L3GD20_fisrt):
			if (dataReadyFlag == L3GD20_DATA_READY) {
 8005d1c:	4b86      	ldr	r3, [pc, #536]	; (8005f38 <L3GD20_Init+0x418>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	f040 8274 	bne.w	800620e <L3GD20_Init+0x6ee>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005d26:	2200      	movs	r2, #0
 8005d28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d2c:	4883      	ldr	r0, [pc, #524]	; (8005f3c <L3GD20_Init+0x41c>)
 8005d2e:	f7fd f835 	bl	8002d9c <HAL_GPIO_WritePin>
				spiTxBuf[0] = 0x28 | 0x80;
 8005d32:	4b83      	ldr	r3, [pc, #524]	; (8005f40 <L3GD20_Init+0x420>)
 8005d34:	22a8      	movs	r2, #168	; 0xa8
 8005d36:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8005d38:	2332      	movs	r3, #50	; 0x32
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	4980      	ldr	r1, [pc, #512]	; (8005f40 <L3GD20_Init+0x420>)
 8005d3e:	4881      	ldr	r0, [pc, #516]	; (8005f44 <L3GD20_Init+0x424>)
 8005d40:	f7fd fda6 	bl	8003890 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi1, &spiRxBuf[1], 1, 50);
 8005d44:	2332      	movs	r3, #50	; 0x32
 8005d46:	2201      	movs	r2, #1
 8005d48:	497f      	ldr	r1, [pc, #508]	; (8005f48 <L3GD20_Init+0x428>)
 8005d4a:	487e      	ldr	r0, [pc, #504]	; (8005f44 <L3GD20_Init+0x424>)
 8005d4c:	f7fd fedc 	bl	8003b08 <HAL_SPI_Receive>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005d50:	2201      	movs	r2, #1
 8005d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d56:	4879      	ldr	r0, [pc, #484]	; (8005f3c <L3GD20_Init+0x41c>)
 8005d58:	f7fd f820 	bl	8002d9c <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d62:	4876      	ldr	r0, [pc, #472]	; (8005f3c <L3GD20_Init+0x41c>)
 8005d64:	f7fd f81a 	bl	8002d9c <HAL_GPIO_WritePin>
				spiTxBuf[0] = 0x29 | 0x80;
 8005d68:	4b75      	ldr	r3, [pc, #468]	; (8005f40 <L3GD20_Init+0x420>)
 8005d6a:	22a9      	movs	r2, #169	; 0xa9
 8005d6c:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8005d6e:	2332      	movs	r3, #50	; 0x32
 8005d70:	2201      	movs	r2, #1
 8005d72:	4973      	ldr	r1, [pc, #460]	; (8005f40 <L3GD20_Init+0x420>)
 8005d74:	4873      	ldr	r0, [pc, #460]	; (8005f44 <L3GD20_Init+0x424>)
 8005d76:	f7fd fd8b 	bl	8003890 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi1, &spiRxBuf[2], 1, 50);
 8005d7a:	2332      	movs	r3, #50	; 0x32
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	4973      	ldr	r1, [pc, #460]	; (8005f4c <L3GD20_Init+0x42c>)
 8005d80:	4870      	ldr	r0, [pc, #448]	; (8005f44 <L3GD20_Init+0x424>)
 8005d82:	f7fd fec1 	bl	8003b08 <HAL_SPI_Receive>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005d86:	2201      	movs	r2, #1
 8005d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d8c:	486b      	ldr	r0, [pc, #428]	; (8005f3c <L3GD20_Init+0x41c>)
 8005d8e:	f7fd f805 	bl	8002d9c <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005d92:	2200      	movs	r2, #0
 8005d94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d98:	4868      	ldr	r0, [pc, #416]	; (8005f3c <L3GD20_Init+0x41c>)
 8005d9a:	f7fc ffff 	bl	8002d9c <HAL_GPIO_WritePin>
				spiTxBuf[0] = 0x2a | 0x80;
 8005d9e:	4b68      	ldr	r3, [pc, #416]	; (8005f40 <L3GD20_Init+0x420>)
 8005da0:	22aa      	movs	r2, #170	; 0xaa
 8005da2:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8005da4:	2332      	movs	r3, #50	; 0x32
 8005da6:	2201      	movs	r2, #1
 8005da8:	4965      	ldr	r1, [pc, #404]	; (8005f40 <L3GD20_Init+0x420>)
 8005daa:	4866      	ldr	r0, [pc, #408]	; (8005f44 <L3GD20_Init+0x424>)
 8005dac:	f7fd fd70 	bl	8003890 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi1, &spiRxBuf[3], 1, 50);
 8005db0:	2332      	movs	r3, #50	; 0x32
 8005db2:	2201      	movs	r2, #1
 8005db4:	4966      	ldr	r1, [pc, #408]	; (8005f50 <L3GD20_Init+0x430>)
 8005db6:	4863      	ldr	r0, [pc, #396]	; (8005f44 <L3GD20_Init+0x424>)
 8005db8:	f7fd fea6 	bl	8003b08 <HAL_SPI_Receive>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dc2:	485e      	ldr	r0, [pc, #376]	; (8005f3c <L3GD20_Init+0x41c>)
 8005dc4:	f7fc ffea 	bl	8002d9c <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dce:	485b      	ldr	r0, [pc, #364]	; (8005f3c <L3GD20_Init+0x41c>)
 8005dd0:	f7fc ffe4 	bl	8002d9c <HAL_GPIO_WritePin>
				spiTxBuf[0] = 0x2b | 0x80;
 8005dd4:	4b5a      	ldr	r3, [pc, #360]	; (8005f40 <L3GD20_Init+0x420>)
 8005dd6:	22ab      	movs	r2, #171	; 0xab
 8005dd8:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8005dda:	2332      	movs	r3, #50	; 0x32
 8005ddc:	2201      	movs	r2, #1
 8005dde:	4958      	ldr	r1, [pc, #352]	; (8005f40 <L3GD20_Init+0x420>)
 8005de0:	4858      	ldr	r0, [pc, #352]	; (8005f44 <L3GD20_Init+0x424>)
 8005de2:	f7fd fd55 	bl	8003890 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi1, &spiRxBuf[4], 1, 50);
 8005de6:	2332      	movs	r3, #50	; 0x32
 8005de8:	2201      	movs	r2, #1
 8005dea:	495a      	ldr	r1, [pc, #360]	; (8005f54 <L3GD20_Init+0x434>)
 8005dec:	4855      	ldr	r0, [pc, #340]	; (8005f44 <L3GD20_Init+0x424>)
 8005dee:	f7fd fe8b 	bl	8003b08 <HAL_SPI_Receive>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005df2:	2201      	movs	r2, #1
 8005df4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005df8:	4850      	ldr	r0, [pc, #320]	; (8005f3c <L3GD20_Init+0x41c>)
 8005dfa:	f7fc ffcf 	bl	8002d9c <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e04:	484d      	ldr	r0, [pc, #308]	; (8005f3c <L3GD20_Init+0x41c>)
 8005e06:	f7fc ffc9 	bl	8002d9c <HAL_GPIO_WritePin>
				spiTxBuf[0] = 0x2c | 0x80;
 8005e0a:	4b4d      	ldr	r3, [pc, #308]	; (8005f40 <L3GD20_Init+0x420>)
 8005e0c:	22ac      	movs	r2, #172	; 0xac
 8005e0e:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8005e10:	2332      	movs	r3, #50	; 0x32
 8005e12:	2201      	movs	r2, #1
 8005e14:	494a      	ldr	r1, [pc, #296]	; (8005f40 <L3GD20_Init+0x420>)
 8005e16:	484b      	ldr	r0, [pc, #300]	; (8005f44 <L3GD20_Init+0x424>)
 8005e18:	f7fd fd3a 	bl	8003890 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi1, &spiRxBuf[5], 1, 50);
 8005e1c:	2332      	movs	r3, #50	; 0x32
 8005e1e:	2201      	movs	r2, #1
 8005e20:	494d      	ldr	r1, [pc, #308]	; (8005f58 <L3GD20_Init+0x438>)
 8005e22:	4848      	ldr	r0, [pc, #288]	; (8005f44 <L3GD20_Init+0x424>)
 8005e24:	f7fd fe70 	bl	8003b08 <HAL_SPI_Receive>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e2e:	4843      	ldr	r0, [pc, #268]	; (8005f3c <L3GD20_Init+0x41c>)
 8005e30:	f7fc ffb4 	bl	8002d9c <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005e34:	2200      	movs	r2, #0
 8005e36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e3a:	4840      	ldr	r0, [pc, #256]	; (8005f3c <L3GD20_Init+0x41c>)
 8005e3c:	f7fc ffae 	bl	8002d9c <HAL_GPIO_WritePin>
				spiTxBuf[0] = 0x2d | 0x80;
 8005e40:	4b3f      	ldr	r3, [pc, #252]	; (8005f40 <L3GD20_Init+0x420>)
 8005e42:	22ad      	movs	r2, #173	; 0xad
 8005e44:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8005e46:	2332      	movs	r3, #50	; 0x32
 8005e48:	2201      	movs	r2, #1
 8005e4a:	493d      	ldr	r1, [pc, #244]	; (8005f40 <L3GD20_Init+0x420>)
 8005e4c:	483d      	ldr	r0, [pc, #244]	; (8005f44 <L3GD20_Init+0x424>)
 8005e4e:	f7fd fd1f 	bl	8003890 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi1, &spiRxBuf[6], 1, 50);
 8005e52:	2332      	movs	r3, #50	; 0x32
 8005e54:	2201      	movs	r2, #1
 8005e56:	4941      	ldr	r1, [pc, #260]	; (8005f5c <L3GD20_Init+0x43c>)
 8005e58:	483a      	ldr	r0, [pc, #232]	; (8005f44 <L3GD20_Init+0x424>)
 8005e5a:	f7fd fe55 	bl	8003b08 <HAL_SPI_Receive>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e64:	4835      	ldr	r0, [pc, #212]	; (8005f3c <L3GD20_Init+0x41c>)
 8005e66:	f7fc ff99 	bl	8002d9c <HAL_GPIO_WritePin>

				currentState = L3GD20_second;
 8005e6a:	4b3d      	ldr	r3, [pc, #244]	; (8005f60 <L3GD20_Init+0x440>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	701a      	strb	r2, [r3, #0]
				dataReadyFlag = L3GD20_DATA_NOT_READY;
 8005e70:	4b31      	ldr	r3, [pc, #196]	; (8005f38 <L3GD20_Init+0x418>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	701a      	strb	r2, [r3, #0]
			} else {

			}
			break;
 8005e76:	e1ca      	b.n	800620e <L3GD20_Init+0x6ee>

		case (L3GD20_second):
			Raw_x = (spiRxBuf[2] << 8) | spiRxBuf[1];
 8005e78:	4b3a      	ldr	r3, [pc, #232]	; (8005f64 <L3GD20_Init+0x444>)
 8005e7a:	789b      	ldrb	r3, [r3, #2]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	b21a      	sxth	r2, r3
 8005e80:	4b38      	ldr	r3, [pc, #224]	; (8005f64 <L3GD20_Init+0x444>)
 8005e82:	785b      	ldrb	r3, [r3, #1]
 8005e84:	b21b      	sxth	r3, r3
 8005e86:	4313      	orrs	r3, r2
 8005e88:	b21a      	sxth	r2, r3
 8005e8a:	4b37      	ldr	r3, [pc, #220]	; (8005f68 <L3GD20_Init+0x448>)
 8005e8c:	801a      	strh	r2, [r3, #0]
			Raw_y = (spiRxBuf[4] << 8) | spiRxBuf[3];
 8005e8e:	4b35      	ldr	r3, [pc, #212]	; (8005f64 <L3GD20_Init+0x444>)
 8005e90:	791b      	ldrb	r3, [r3, #4]
 8005e92:	021b      	lsls	r3, r3, #8
 8005e94:	b21a      	sxth	r2, r3
 8005e96:	4b33      	ldr	r3, [pc, #204]	; (8005f64 <L3GD20_Init+0x444>)
 8005e98:	78db      	ldrb	r3, [r3, #3]
 8005e9a:	b21b      	sxth	r3, r3
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	b21a      	sxth	r2, r3
 8005ea0:	4b32      	ldr	r3, [pc, #200]	; (8005f6c <L3GD20_Init+0x44c>)
 8005ea2:	801a      	strh	r2, [r3, #0]
			Raw_z = (spiRxBuf[6] << 8) | spiRxBuf[5];
 8005ea4:	4b2f      	ldr	r3, [pc, #188]	; (8005f64 <L3GD20_Init+0x444>)
 8005ea6:	799b      	ldrb	r3, [r3, #6]
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	b21a      	sxth	r2, r3
 8005eac:	4b2d      	ldr	r3, [pc, #180]	; (8005f64 <L3GD20_Init+0x444>)
 8005eae:	795b      	ldrb	r3, [r3, #5]
 8005eb0:	b21b      	sxth	r3, r3
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	b21a      	sxth	r2, r3
 8005eb6:	4b2e      	ldr	r3, [pc, #184]	; (8005f70 <L3GD20_Init+0x450>)
 8005eb8:	801a      	strh	r2, [r3, #0]

			if (currentcalistate == L3GD20_calibrated) {
 8005eba:	4b2e      	ldr	r3, [pc, #184]	; (8005f74 <L3GD20_Init+0x454>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	f000 81a7 	beq.w	8006212 <L3GD20_Init+0x6f2>
				break;
			} else {
				switch (currentcalistate) {
 8005ec4:	4b2b      	ldr	r3, [pc, #172]	; (8005f74 <L3GD20_Init+0x454>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	f000 8193 	beq.w	80061f4 <L3GD20_Init+0x6d4>
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	f300 818c 	bgt.w	80061ec <L3GD20_Init+0x6cc>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <L3GD20_Init+0x3be>
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d02a      	beq.n	8005f32 <L3GD20_Init+0x412>
 8005edc:	e186      	b.n	80061ec <L3GD20_Init+0x6cc>
				//---------------------------------------------------------------------------------------------------------
				case (L3GD20_collect_calibration_samples):
					calibrationBuffer_X[caliCounter] = Raw_x;
 8005ede:	4b26      	ldr	r3, [pc, #152]	; (8005f78 <L3GD20_Init+0x458>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a21      	ldr	r2, [pc, #132]	; (8005f68 <L3GD20_Init+0x448>)
 8005ee4:	8812      	ldrh	r2, [r2, #0]
 8005ee6:	b211      	sxth	r1, r2
 8005ee8:	4a24      	ldr	r2, [pc, #144]	; (8005f7c <L3GD20_Init+0x45c>)
 8005eea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					calibrationBuffer_Y[caliCounter] = Raw_y;
 8005eee:	4b22      	ldr	r3, [pc, #136]	; (8005f78 <L3GD20_Init+0x458>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1e      	ldr	r2, [pc, #120]	; (8005f6c <L3GD20_Init+0x44c>)
 8005ef4:	8812      	ldrh	r2, [r2, #0]
 8005ef6:	b211      	sxth	r1, r2
 8005ef8:	4a21      	ldr	r2, [pc, #132]	; (8005f80 <L3GD20_Init+0x460>)
 8005efa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					calibrationBuffer_Z[caliCounter] = Raw_z;
 8005efe:	4b1e      	ldr	r3, [pc, #120]	; (8005f78 <L3GD20_Init+0x458>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a1b      	ldr	r2, [pc, #108]	; (8005f70 <L3GD20_Init+0x450>)
 8005f04:	8812      	ldrh	r2, [r2, #0]
 8005f06:	b211      	sxth	r1, r2
 8005f08:	4a1e      	ldr	r2, [pc, #120]	; (8005f84 <L3GD20_Init+0x464>)
 8005f0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					caliCounter++;
 8005f0e:	4b1a      	ldr	r3, [pc, #104]	; (8005f78 <L3GD20_Init+0x458>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3301      	adds	r3, #1
 8005f14:	4a18      	ldr	r2, [pc, #96]	; (8005f78 <L3GD20_Init+0x458>)
 8005f16:	6013      	str	r3, [r2, #0]

					if (caliCounter >= CALIBRATION_BUFFER_LENGTH) {
 8005f18:	4b17      	ldr	r3, [pc, #92]	; (8005f78 <L3GD20_Init+0x458>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005f20:	f0c0 816a 	bcc.w	80061f8 <L3GD20_Init+0x6d8>
						caliCounter = 0;
 8005f24:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <L3GD20_Init+0x458>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]

						currentcalistate = L3GD20_process_calibration_samples;
 8005f2a:	4b12      	ldr	r3, [pc, #72]	; (8005f74 <L3GD20_Init+0x454>)
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	701a      	strb	r2, [r3, #0]
					} else {
					}
					break;
 8005f30:	e162      	b.n	80061f8 <L3GD20_Init+0x6d8>
					//----------------------------------------------------------------------------------------------------------
				case (L3GD20_process_calibration_samples):
					for (uint32_t idx = 0; idx < CALIBRATION_BUFFER_LENGTH;
 8005f32:	2300      	movs	r3, #0
 8005f34:	647b      	str	r3, [r7, #68]	; 0x44
 8005f36:	e098      	b.n	800606a <L3GD20_Init+0x54a>
 8005f38:	20000009 	.word	0x20000009
 8005f3c:	40020800 	.word	0x40020800
 8005f40:	200032b0 	.word	0x200032b0
 8005f44:	200000d8 	.word	0x200000d8
 8005f48:	200032b5 	.word	0x200032b5
 8005f4c:	200032b6 	.word	0x200032b6
 8005f50:	200032b7 	.word	0x200032b7
 8005f54:	200032b8 	.word	0x200032b8
 8005f58:	200032b9 	.word	0x200032b9
 8005f5c:	200032ba 	.word	0x200032ba
 8005f60:	20000381 	.word	0x20000381
 8005f64:	200032b4 	.word	0x200032b4
 8005f68:	200032c0 	.word	0x200032c0
 8005f6c:	200032c2 	.word	0x200032c2
 8005f70:	200032c4 	.word	0x200032c4
 8005f74:	20000380 	.word	0x20000380
 8005f78:	200003cc 	.word	0x200003cc
 8005f7c:	200003d0 	.word	0x200003d0
 8005f80:	20001370 	.word	0x20001370
 8005f84:	20002310 	.word	0x20002310
							idx++) {
						tempSum_X = tempSum_X - averageWindow_X[windowPosition] + calibrationBuffer_X[idx];
 8005f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	3358      	adds	r3, #88	; 0x58
 8005f8e:	443b      	add	r3, r7
 8005f90:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8005f94:	461a      	mov	r2, r3
 8005f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f98:	1a9b      	subs	r3, r3, r2
 8005f9a:	49a5      	ldr	r1, [pc, #660]	; (8006230 <L3GD20_Init+0x710>)
 8005f9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f9e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	653b      	str	r3, [r7, #80]	; 0x50
						tempSum_Y = tempSum_Y - averageWindow_Y[windowPosition] + calibrationBuffer_Y[idx];
 8005fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	3358      	adds	r3, #88	; 0x58
 8005fac:	443b      	add	r3, r7
 8005fae:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb6:	1a9b      	subs	r3, r3, r2
 8005fb8:	499e      	ldr	r1, [pc, #632]	; (8006234 <L3GD20_Init+0x714>)
 8005fba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fbc:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
						tempSum_Z = tempSum_Z - averageWindow_Z[windowPosition] + calibrationBuffer_Z[idx];
 8005fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	3358      	adds	r3, #88	; 0x58
 8005fca:	443b      	add	r3, r7
 8005fcc:	f933 3c54 	ldrsh.w	r3, [r3, #-84]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fd4:	1a9b      	subs	r3, r3, r2
 8005fd6:	4998      	ldr	r1, [pc, #608]	; (8006238 <L3GD20_Init+0x718>)
 8005fd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fda:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8005fde:	4413      	add	r3, r2
 8005fe0:	64bb      	str	r3, [r7, #72]	; 0x48

						averageWindow_X[windowPosition] = calibrationBuffer_X[idx];
 8005fe2:	4a93      	ldr	r2, [pc, #588]	; (8006230 <L3GD20_Init+0x710>)
 8005fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fe6:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8005fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	3358      	adds	r3, #88	; 0x58
 8005ff0:	443b      	add	r3, r7
 8005ff2:	f823 2c2c 	strh.w	r2, [r3, #-44]
						averageWindow_Y[windowPosition] = calibrationBuffer_Y[idx];
 8005ff6:	4a8f      	ldr	r2, [pc, #572]	; (8006234 <L3GD20_Init+0x714>)
 8005ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ffa:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8005ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	3358      	adds	r3, #88	; 0x58
 8006004:	443b      	add	r3, r7
 8006006:	f823 2c40 	strh.w	r2, [r3, #-64]
						averageWindow_Z[windowPosition] = calibrationBuffer_Z[idx];
 800600a:	4a8b      	ldr	r2, [pc, #556]	; (8006238 <L3GD20_Init+0x718>)
 800600c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800600e:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8006012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	3358      	adds	r3, #88	; 0x58
 8006018:	443b      	add	r3, r7
 800601a:	f823 2c54 	strh.w	r2, [r3, #-84]

						offset_x = tempSum_X / (int32_t) AVERAGE_WINDOW_SIZE;
 800601e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006020:	4a86      	ldr	r2, [pc, #536]	; (800623c <L3GD20_Init+0x71c>)
 8006022:	fb82 1203 	smull	r1, r2, r2, r3
 8006026:	1092      	asrs	r2, r2, #2
 8006028:	17db      	asrs	r3, r3, #31
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	4a84      	ldr	r2, [pc, #528]	; (8006240 <L3GD20_Init+0x720>)
 800602e:	6013      	str	r3, [r2, #0]
						offset_y = tempSum_Y / (int32_t) AVERAGE_WINDOW_SIZE;
 8006030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006032:	4a82      	ldr	r2, [pc, #520]	; (800623c <L3GD20_Init+0x71c>)
 8006034:	fb82 1203 	smull	r1, r2, r2, r3
 8006038:	1092      	asrs	r2, r2, #2
 800603a:	17db      	asrs	r3, r3, #31
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	4a81      	ldr	r2, [pc, #516]	; (8006244 <L3GD20_Init+0x724>)
 8006040:	6013      	str	r3, [r2, #0]
						offset_z = tempSum_Z / (int32_t) AVERAGE_WINDOW_SIZE;
 8006042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006044:	4a7d      	ldr	r2, [pc, #500]	; (800623c <L3GD20_Init+0x71c>)
 8006046:	fb82 1203 	smull	r1, r2, r2, r3
 800604a:	1092      	asrs	r2, r2, #2
 800604c:	17db      	asrs	r3, r3, #31
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	4a7d      	ldr	r2, [pc, #500]	; (8006248 <L3GD20_Init+0x728>)
 8006052:	6013      	str	r3, [r2, #0]

						windowPosition++;
 8006054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006056:	3301      	adds	r3, #1
 8006058:	657b      	str	r3, [r7, #84]	; 0x54

						if (windowPosition >= AVERAGE_WINDOW_SIZE) {
 800605a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800605c:	2b09      	cmp	r3, #9
 800605e:	d901      	bls.n	8006064 <L3GD20_Init+0x544>
							windowPosition = 0;
 8006060:	2300      	movs	r3, #0
 8006062:	657b      	str	r3, [r7, #84]	; 0x54
							idx++) {
 8006064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006066:	3301      	adds	r3, #1
 8006068:	647b      	str	r3, [r7, #68]	; 0x44
					for (uint32_t idx = 0; idx < CALIBRATION_BUFFER_LENGTH;
 800606a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800606c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006070:	d38a      	bcc.n	8005f88 <L3GD20_Init+0x468>
						} else {
						}

					}
					for (uint32_t idx = 0; idx < CALIBRATION_BUFFER_LENGTH;
 8006072:	2300      	movs	r3, #0
 8006074:	643b      	str	r3, [r7, #64]	; 0x40
 8006076:	e089      	b.n	800618c <L3GD20_Init+0x66c>
							idx++) {
						if (((int32_t) calibrationBuffer_X[idx] - offset_x) > TempNoise_X) {
 8006078:	4a6d      	ldr	r2, [pc, #436]	; (8006230 <L3GD20_Init+0x710>)
 800607a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800607c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8006080:	461a      	mov	r2, r3
 8006082:	4b6f      	ldr	r3, [pc, #444]	; (8006240 <L3GD20_Init+0x720>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	1ad2      	subs	r2, r2, r3
 8006088:	4b70      	ldr	r3, [pc, #448]	; (800624c <L3GD20_Init+0x72c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	429a      	cmp	r2, r3
 800608e:	dd0a      	ble.n	80060a6 <L3GD20_Init+0x586>
							TempNoise_X = (int32_t) calibrationBuffer_X[idx] - offset_x;
 8006090:	4a67      	ldr	r2, [pc, #412]	; (8006230 <L3GD20_Init+0x710>)
 8006092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006094:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8006098:	461a      	mov	r2, r3
 800609a:	4b69      	ldr	r3, [pc, #420]	; (8006240 <L3GD20_Init+0x720>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	4a6a      	ldr	r2, [pc, #424]	; (800624c <L3GD20_Init+0x72c>)
 80060a2:	6013      	str	r3, [r2, #0]
 80060a4:	e015      	b.n	80060d2 <L3GD20_Init+0x5b2>
						} else if (((int32_t) calibrationBuffer_X[idx] - offset_x) < -TempNoise_X) {
 80060a6:	4a62      	ldr	r2, [pc, #392]	; (8006230 <L3GD20_Init+0x710>)
 80060a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060aa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80060ae:	461a      	mov	r2, r3
 80060b0:	4b63      	ldr	r3, [pc, #396]	; (8006240 <L3GD20_Init+0x720>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	1ad2      	subs	r2, r2, r3
 80060b6:	4b65      	ldr	r3, [pc, #404]	; (800624c <L3GD20_Init+0x72c>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	425b      	negs	r3, r3
 80060bc:	429a      	cmp	r2, r3
 80060be:	da08      	bge.n	80060d2 <L3GD20_Init+0x5b2>
							TempNoise_X = -((int32_t) calibrationBuffer_X[idx] - offset_x);
 80060c0:	4b5f      	ldr	r3, [pc, #380]	; (8006240 <L3GD20_Init+0x720>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	495a      	ldr	r1, [pc, #360]	; (8006230 <L3GD20_Init+0x710>)
 80060c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060c8:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80060cc:	1a9b      	subs	r3, r3, r2
 80060ce:	4a5f      	ldr	r2, [pc, #380]	; (800624c <L3GD20_Init+0x72c>)
 80060d0:	6013      	str	r3, [r2, #0]
						}

						if (((int32_t) calibrationBuffer_Y[idx] - offset_y)> TempNoise_Y) {
 80060d2:	4a58      	ldr	r2, [pc, #352]	; (8006234 <L3GD20_Init+0x714>)
 80060d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060d6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80060da:	461a      	mov	r2, r3
 80060dc:	4b59      	ldr	r3, [pc, #356]	; (8006244 <L3GD20_Init+0x724>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	1ad2      	subs	r2, r2, r3
 80060e2:	4b5b      	ldr	r3, [pc, #364]	; (8006250 <L3GD20_Init+0x730>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	dd0a      	ble.n	8006100 <L3GD20_Init+0x5e0>
							TempNoise_Y = (int32_t) calibrationBuffer_Y[idx] - offset_y;
 80060ea:	4a52      	ldr	r2, [pc, #328]	; (8006234 <L3GD20_Init+0x714>)
 80060ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80060f2:	461a      	mov	r2, r3
 80060f4:	4b53      	ldr	r3, [pc, #332]	; (8006244 <L3GD20_Init+0x724>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	4a55      	ldr	r2, [pc, #340]	; (8006250 <L3GD20_Init+0x730>)
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	e015      	b.n	800612c <L3GD20_Init+0x60c>
						} else if (((int32_t) calibrationBuffer_Y[idx] - offset_y) < -TempNoise_Y) {
 8006100:	4a4c      	ldr	r2, [pc, #304]	; (8006234 <L3GD20_Init+0x714>)
 8006102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006104:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8006108:	461a      	mov	r2, r3
 800610a:	4b4e      	ldr	r3, [pc, #312]	; (8006244 <L3GD20_Init+0x724>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	1ad2      	subs	r2, r2, r3
 8006110:	4b4f      	ldr	r3, [pc, #316]	; (8006250 <L3GD20_Init+0x730>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	425b      	negs	r3, r3
 8006116:	429a      	cmp	r2, r3
 8006118:	da08      	bge.n	800612c <L3GD20_Init+0x60c>
							TempNoise_Y = -((int32_t) calibrationBuffer_Y[idx] - offset_y);
 800611a:	4b4a      	ldr	r3, [pc, #296]	; (8006244 <L3GD20_Init+0x724>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4945      	ldr	r1, [pc, #276]	; (8006234 <L3GD20_Init+0x714>)
 8006120:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006122:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8006126:	1a9b      	subs	r3, r3, r2
 8006128:	4a49      	ldr	r2, [pc, #292]	; (8006250 <L3GD20_Init+0x730>)
 800612a:	6013      	str	r3, [r2, #0]
						}

						if (((int32_t) calibrationBuffer_Z[idx] - offset_z) > TempNoise_Z) {
 800612c:	4a42      	ldr	r2, [pc, #264]	; (8006238 <L3GD20_Init+0x718>)
 800612e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006130:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8006134:	461a      	mov	r2, r3
 8006136:	4b44      	ldr	r3, [pc, #272]	; (8006248 <L3GD20_Init+0x728>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	1ad2      	subs	r2, r2, r3
 800613c:	4b45      	ldr	r3, [pc, #276]	; (8006254 <L3GD20_Init+0x734>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	429a      	cmp	r2, r3
 8006142:	dd0a      	ble.n	800615a <L3GD20_Init+0x63a>
							TempNoise_Z = (int32_t) calibrationBuffer_Z[idx] - offset_z;
 8006144:	4a3c      	ldr	r2, [pc, #240]	; (8006238 <L3GD20_Init+0x718>)
 8006146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006148:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800614c:	461a      	mov	r2, r3
 800614e:	4b3e      	ldr	r3, [pc, #248]	; (8006248 <L3GD20_Init+0x728>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	4a3f      	ldr	r2, [pc, #252]	; (8006254 <L3GD20_Init+0x734>)
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	e015      	b.n	8006186 <L3GD20_Init+0x666>
						} else if (((int32_t) calibrationBuffer_Z[idx] - offset_z) < -TempNoise_Z) {
 800615a:	4a37      	ldr	r2, [pc, #220]	; (8006238 <L3GD20_Init+0x718>)
 800615c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800615e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8006162:	461a      	mov	r2, r3
 8006164:	4b38      	ldr	r3, [pc, #224]	; (8006248 <L3GD20_Init+0x728>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	1ad2      	subs	r2, r2, r3
 800616a:	4b3a      	ldr	r3, [pc, #232]	; (8006254 <L3GD20_Init+0x734>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	425b      	negs	r3, r3
 8006170:	429a      	cmp	r2, r3
 8006172:	da08      	bge.n	8006186 <L3GD20_Init+0x666>
							TempNoise_Z = -((int32_t) calibrationBuffer_Z[idx] - offset_z);
 8006174:	4b34      	ldr	r3, [pc, #208]	; (8006248 <L3GD20_Init+0x728>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	492f      	ldr	r1, [pc, #188]	; (8006238 <L3GD20_Init+0x718>)
 800617a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800617c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	4a34      	ldr	r2, [pc, #208]	; (8006254 <L3GD20_Init+0x734>)
 8006184:	6013      	str	r3, [r2, #0]
							idx++) {
 8006186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006188:	3301      	adds	r3, #1
 800618a:	643b      	str	r3, [r7, #64]	; 0x40
					for (uint32_t idx = 0; idx < CALIBRATION_BUFFER_LENGTH;
 800618c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800618e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006192:	f4ff af71 	bcc.w	8006078 <L3GD20_Init+0x558>
						}
					}

					Noise_X = (float) TempNoise_X * L3GD20_SENSITIVITY;
 8006196:	4b2d      	ldr	r3, [pc, #180]	; (800624c <L3GD20_Init+0x72c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061a2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8006258 <L3GD20_Init+0x738>
 80061a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061aa:	4b2c      	ldr	r3, [pc, #176]	; (800625c <L3GD20_Init+0x73c>)
 80061ac:	edc3 7a00 	vstr	s15, [r3]
					Noise_Y = (float) TempNoise_Y * L3GD20_SENSITIVITY;
 80061b0:	4b27      	ldr	r3, [pc, #156]	; (8006250 <L3GD20_Init+0x730>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	ee07 3a90 	vmov	s15, r3
 80061b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061bc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006258 <L3GD20_Init+0x738>
 80061c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061c4:	4b26      	ldr	r3, [pc, #152]	; (8006260 <L3GD20_Init+0x740>)
 80061c6:	edc3 7a00 	vstr	s15, [r3]
					Noise_Z = (float) TempNoise_Z * L3GD20_SENSITIVITY;
 80061ca:	4b22      	ldr	r3, [pc, #136]	; (8006254 <L3GD20_Init+0x734>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061d6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8006258 <L3GD20_Init+0x738>
 80061da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061de:	4b21      	ldr	r3, [pc, #132]	; (8006264 <L3GD20_Init+0x744>)
 80061e0:	edc3 7a00 	vstr	s15, [r3]

					currentcalistate = L3GD20_calibrated;
 80061e4:	4b20      	ldr	r3, [pc, #128]	; (8006268 <L3GD20_Init+0x748>)
 80061e6:	2202      	movs	r2, #2
 80061e8:	701a      	strb	r2, [r3, #0]
					break;
 80061ea:	e006      	b.n	80061fa <L3GD20_Init+0x6da>

				case (L3GD20_calibrated):
					break;

				default:
					currentcalistate = L3GD20_collect_calibration_samples;
 80061ec:	4b1e      	ldr	r3, [pc, #120]	; (8006268 <L3GD20_Init+0x748>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	701a      	strb	r2, [r3, #0]
					break;
 80061f2:	e002      	b.n	80061fa <L3GD20_Init+0x6da>
					break;
 80061f4:	bf00      	nop
 80061f6:	e000      	b.n	80061fa <L3GD20_Init+0x6da>
					break;
 80061f8:	bf00      	nop
				}

			}
			currentState = L3GD20_fisrt;
 80061fa:	4b1c      	ldr	r3, [pc, #112]	; (800626c <L3GD20_Init+0x74c>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	701a      	strb	r2, [r3, #0]
			dataReadyFlag = L3GD20_DATA_READY;
 8006200:	4b1b      	ldr	r3, [pc, #108]	; (8006270 <L3GD20_Init+0x750>)
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]

		default:
			currentState = L3GD20_fisrt;
 8006206:	4b19      	ldr	r3, [pc, #100]	; (800626c <L3GD20_Init+0x74c>)
 8006208:	2200      	movs	r2, #0
 800620a:	701a      	strb	r2, [r3, #0]
 800620c:	e002      	b.n	8006214 <L3GD20_Init+0x6f4>
			break;
 800620e:	bf00      	nop
 8006210:	e000      	b.n	8006214 <L3GD20_Init+0x6f4>
				break;
 8006212:	bf00      	nop

		}
		if (currentcalistate == L3GD20_calibrated) {
 8006214:	4b14      	ldr	r3, [pc, #80]	; (8006268 <L3GD20_Init+0x748>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b02      	cmp	r3, #2
 800621a:	d003      	beq.n	8006224 <L3GD20_Init+0x704>
			break;
		}

		HAL_Delay(1);
 800621c:	2001      	movs	r0, #1
 800621e:	f7fb fc01 	bl	8001a24 <HAL_Delay>
		switch (currentState) {
 8006222:	e562      	b.n	8005cea <L3GD20_Init+0x1ca>
			break;
 8006224:	bf00      	nop
	}

}
 8006226:	bf00      	nop
 8006228:	3758      	adds	r7, #88	; 0x58
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	200003d0 	.word	0x200003d0
 8006234:	20001370 	.word	0x20001370
 8006238:	20002310 	.word	0x20002310
 800623c:	66666667 	.word	0x66666667
 8006240:	20000390 	.word	0x20000390
 8006244:	20000394 	.word	0x20000394
 8006248:	20000398 	.word	0x20000398
 800624c:	200003c0 	.word	0x200003c0
 8006250:	200003c4 	.word	0x200003c4
 8006254:	200003c8 	.word	0x200003c8
 8006258:	3d8f5c29 	.word	0x3d8f5c29
 800625c:	2000039c 	.word	0x2000039c
 8006260:	200003a0 	.word	0x200003a0
 8006264:	200003a4 	.word	0x200003a4
 8006268:	20000380 	.word	0x20000380
 800626c:	20000381 	.word	0x20000381
 8006270:	20000009 	.word	0x20000009

08006274 <L3GD20_loop>:

void L3GD20_loop(void) {
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
	Raw_x = 0;
 8006278:	4b5f      	ldr	r3, [pc, #380]	; (80063f8 <L3GD20_loop+0x184>)
 800627a:	2200      	movs	r2, #0
 800627c:	801a      	strh	r2, [r3, #0]
	Raw_y = 0;
 800627e:	4b5f      	ldr	r3, [pc, #380]	; (80063fc <L3GD20_loop+0x188>)
 8006280:	2200      	movs	r2, #0
 8006282:	801a      	strh	r2, [r3, #0]
	Raw_z = 0;
 8006284:	4b5e      	ldr	r3, [pc, #376]	; (8006400 <L3GD20_loop+0x18c>)
 8006286:	2200      	movs	r2, #0
 8006288:	801a      	strh	r2, [r3, #0]
//		{
//			timeDifference = (4294967295 + currentTime - previousTime)*1.0/ HAL_RCC_GetHCLKFreq();
//		}
//		previousTime = currentTime;

	switch (currentState) {
 800628a:	4b5e      	ldr	r3, [pc, #376]	; (8006404 <L3GD20_loop+0x190>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <L3GD20_loop+0x26>
 8006292:	2b01      	cmp	r3, #1
 8006294:	f000 80cc 	beq.w	8006430 <L3GD20_loop+0x1bc>
		currentState = L3GD20_fisrt;
		dataReadyFlag = L3GD20_DATA_READY;
		break;

	default:
		break;
 8006298:	e1d0      	b.n	800663c <L3GD20_loop+0x3c8>
		if (dataReadyFlag == L3GD20_DATA_READY) {
 800629a:	4b5b      	ldr	r3, [pc, #364]	; (8006408 <L3GD20_loop+0x194>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	f040 81cb 	bne.w	800663a <L3GD20_loop+0x3c6>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80062a4:	2200      	movs	r2, #0
 80062a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062aa:	4858      	ldr	r0, [pc, #352]	; (800640c <L3GD20_loop+0x198>)
 80062ac:	f7fc fd76 	bl	8002d9c <HAL_GPIO_WritePin>
			spiTxBuf[0] = 0x28 | 0x80;
 80062b0:	4b57      	ldr	r3, [pc, #348]	; (8006410 <L3GD20_loop+0x19c>)
 80062b2:	22a8      	movs	r2, #168	; 0xa8
 80062b4:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 80062b6:	2332      	movs	r3, #50	; 0x32
 80062b8:	2201      	movs	r2, #1
 80062ba:	4955      	ldr	r1, [pc, #340]	; (8006410 <L3GD20_loop+0x19c>)
 80062bc:	4855      	ldr	r0, [pc, #340]	; (8006414 <L3GD20_loop+0x1a0>)
 80062be:	f7fd fae7 	bl	8003890 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, &spiRxBuf[1], 1, 50);
 80062c2:	2332      	movs	r3, #50	; 0x32
 80062c4:	2201      	movs	r2, #1
 80062c6:	4954      	ldr	r1, [pc, #336]	; (8006418 <L3GD20_loop+0x1a4>)
 80062c8:	4852      	ldr	r0, [pc, #328]	; (8006414 <L3GD20_loop+0x1a0>)
 80062ca:	f7fd fc1d 	bl	8003b08 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80062ce:	2201      	movs	r2, #1
 80062d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062d4:	484d      	ldr	r0, [pc, #308]	; (800640c <L3GD20_loop+0x198>)
 80062d6:	f7fc fd61 	bl	8002d9c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80062da:	2200      	movs	r2, #0
 80062dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062e0:	484a      	ldr	r0, [pc, #296]	; (800640c <L3GD20_loop+0x198>)
 80062e2:	f7fc fd5b 	bl	8002d9c <HAL_GPIO_WritePin>
			spiTxBuf[0] = 0x29 | 0x80;
 80062e6:	4b4a      	ldr	r3, [pc, #296]	; (8006410 <L3GD20_loop+0x19c>)
 80062e8:	22a9      	movs	r2, #169	; 0xa9
 80062ea:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 80062ec:	2332      	movs	r3, #50	; 0x32
 80062ee:	2201      	movs	r2, #1
 80062f0:	4947      	ldr	r1, [pc, #284]	; (8006410 <L3GD20_loop+0x19c>)
 80062f2:	4848      	ldr	r0, [pc, #288]	; (8006414 <L3GD20_loop+0x1a0>)
 80062f4:	f7fd facc 	bl	8003890 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, &spiRxBuf[2], 1, 50);
 80062f8:	2332      	movs	r3, #50	; 0x32
 80062fa:	2201      	movs	r2, #1
 80062fc:	4947      	ldr	r1, [pc, #284]	; (800641c <L3GD20_loop+0x1a8>)
 80062fe:	4845      	ldr	r0, [pc, #276]	; (8006414 <L3GD20_loop+0x1a0>)
 8006300:	f7fd fc02 	bl	8003b08 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006304:	2201      	movs	r2, #1
 8006306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800630a:	4840      	ldr	r0, [pc, #256]	; (800640c <L3GD20_loop+0x198>)
 800630c:	f7fc fd46 	bl	8002d9c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006310:	2200      	movs	r2, #0
 8006312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006316:	483d      	ldr	r0, [pc, #244]	; (800640c <L3GD20_loop+0x198>)
 8006318:	f7fc fd40 	bl	8002d9c <HAL_GPIO_WritePin>
			spiTxBuf[0] = 0x2a | 0x80;
 800631c:	4b3c      	ldr	r3, [pc, #240]	; (8006410 <L3GD20_loop+0x19c>)
 800631e:	22aa      	movs	r2, #170	; 0xaa
 8006320:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8006322:	2332      	movs	r3, #50	; 0x32
 8006324:	2201      	movs	r2, #1
 8006326:	493a      	ldr	r1, [pc, #232]	; (8006410 <L3GD20_loop+0x19c>)
 8006328:	483a      	ldr	r0, [pc, #232]	; (8006414 <L3GD20_loop+0x1a0>)
 800632a:	f7fd fab1 	bl	8003890 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, &spiRxBuf[3], 1, 50);
 800632e:	2332      	movs	r3, #50	; 0x32
 8006330:	2201      	movs	r2, #1
 8006332:	493b      	ldr	r1, [pc, #236]	; (8006420 <L3GD20_loop+0x1ac>)
 8006334:	4837      	ldr	r0, [pc, #220]	; (8006414 <L3GD20_loop+0x1a0>)
 8006336:	f7fd fbe7 	bl	8003b08 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800633a:	2201      	movs	r2, #1
 800633c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006340:	4832      	ldr	r0, [pc, #200]	; (800640c <L3GD20_loop+0x198>)
 8006342:	f7fc fd2b 	bl	8002d9c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006346:	2200      	movs	r2, #0
 8006348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800634c:	482f      	ldr	r0, [pc, #188]	; (800640c <L3GD20_loop+0x198>)
 800634e:	f7fc fd25 	bl	8002d9c <HAL_GPIO_WritePin>
			spiTxBuf[0] = 0x2b | 0x80;
 8006352:	4b2f      	ldr	r3, [pc, #188]	; (8006410 <L3GD20_loop+0x19c>)
 8006354:	22ab      	movs	r2, #171	; 0xab
 8006356:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8006358:	2332      	movs	r3, #50	; 0x32
 800635a:	2201      	movs	r2, #1
 800635c:	492c      	ldr	r1, [pc, #176]	; (8006410 <L3GD20_loop+0x19c>)
 800635e:	482d      	ldr	r0, [pc, #180]	; (8006414 <L3GD20_loop+0x1a0>)
 8006360:	f7fd fa96 	bl	8003890 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, &spiRxBuf[4], 1, 50);
 8006364:	2332      	movs	r3, #50	; 0x32
 8006366:	2201      	movs	r2, #1
 8006368:	492e      	ldr	r1, [pc, #184]	; (8006424 <L3GD20_loop+0x1b0>)
 800636a:	482a      	ldr	r0, [pc, #168]	; (8006414 <L3GD20_loop+0x1a0>)
 800636c:	f7fd fbcc 	bl	8003b08 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006370:	2201      	movs	r2, #1
 8006372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006376:	4825      	ldr	r0, [pc, #148]	; (800640c <L3GD20_loop+0x198>)
 8006378:	f7fc fd10 	bl	8002d9c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800637c:	2200      	movs	r2, #0
 800637e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006382:	4822      	ldr	r0, [pc, #136]	; (800640c <L3GD20_loop+0x198>)
 8006384:	f7fc fd0a 	bl	8002d9c <HAL_GPIO_WritePin>
			spiTxBuf[0] = 0x2c | 0x80;
 8006388:	4b21      	ldr	r3, [pc, #132]	; (8006410 <L3GD20_loop+0x19c>)
 800638a:	22ac      	movs	r2, #172	; 0xac
 800638c:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 800638e:	2332      	movs	r3, #50	; 0x32
 8006390:	2201      	movs	r2, #1
 8006392:	491f      	ldr	r1, [pc, #124]	; (8006410 <L3GD20_loop+0x19c>)
 8006394:	481f      	ldr	r0, [pc, #124]	; (8006414 <L3GD20_loop+0x1a0>)
 8006396:	f7fd fa7b 	bl	8003890 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, &spiRxBuf[5], 1, 50);
 800639a:	2332      	movs	r3, #50	; 0x32
 800639c:	2201      	movs	r2, #1
 800639e:	4922      	ldr	r1, [pc, #136]	; (8006428 <L3GD20_loop+0x1b4>)
 80063a0:	481c      	ldr	r0, [pc, #112]	; (8006414 <L3GD20_loop+0x1a0>)
 80063a2:	f7fd fbb1 	bl	8003b08 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80063a6:	2201      	movs	r2, #1
 80063a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063ac:	4817      	ldr	r0, [pc, #92]	; (800640c <L3GD20_loop+0x198>)
 80063ae:	f7fc fcf5 	bl	8002d9c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80063b2:	2200      	movs	r2, #0
 80063b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063b8:	4814      	ldr	r0, [pc, #80]	; (800640c <L3GD20_loop+0x198>)
 80063ba:	f7fc fcef 	bl	8002d9c <HAL_GPIO_WritePin>
			spiTxBuf[0] = 0x2d | 0x80;
 80063be:	4b14      	ldr	r3, [pc, #80]	; (8006410 <L3GD20_loop+0x19c>)
 80063c0:	22ad      	movs	r2, #173	; 0xad
 80063c2:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 80063c4:	2332      	movs	r3, #50	; 0x32
 80063c6:	2201      	movs	r2, #1
 80063c8:	4911      	ldr	r1, [pc, #68]	; (8006410 <L3GD20_loop+0x19c>)
 80063ca:	4812      	ldr	r0, [pc, #72]	; (8006414 <L3GD20_loop+0x1a0>)
 80063cc:	f7fd fa60 	bl	8003890 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, &spiRxBuf[6], 1, 50);
 80063d0:	2332      	movs	r3, #50	; 0x32
 80063d2:	2201      	movs	r2, #1
 80063d4:	4915      	ldr	r1, [pc, #84]	; (800642c <L3GD20_loop+0x1b8>)
 80063d6:	480f      	ldr	r0, [pc, #60]	; (8006414 <L3GD20_loop+0x1a0>)
 80063d8:	f7fd fb96 	bl	8003b08 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80063dc:	2201      	movs	r2, #1
 80063de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063e2:	480a      	ldr	r0, [pc, #40]	; (800640c <L3GD20_loop+0x198>)
 80063e4:	f7fc fcda 	bl	8002d9c <HAL_GPIO_WritePin>
			currentState = L3GD20_second;
 80063e8:	4b06      	ldr	r3, [pc, #24]	; (8006404 <L3GD20_loop+0x190>)
 80063ea:	2201      	movs	r2, #1
 80063ec:	701a      	strb	r2, [r3, #0]
			dataReadyFlag = L3GD20_DATA_NOT_READY;
 80063ee:	4b06      	ldr	r3, [pc, #24]	; (8006408 <L3GD20_loop+0x194>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
		break;
 80063f4:	e121      	b.n	800663a <L3GD20_loop+0x3c6>
 80063f6:	bf00      	nop
 80063f8:	200032c0 	.word	0x200032c0
 80063fc:	200032c2 	.word	0x200032c2
 8006400:	200032c4 	.word	0x200032c4
 8006404:	20000381 	.word	0x20000381
 8006408:	20000009 	.word	0x20000009
 800640c:	40020800 	.word	0x40020800
 8006410:	200032b0 	.word	0x200032b0
 8006414:	200000d8 	.word	0x200000d8
 8006418:	200032b5 	.word	0x200032b5
 800641c:	200032b6 	.word	0x200032b6
 8006420:	200032b7 	.word	0x200032b7
 8006424:	200032b8 	.word	0x200032b8
 8006428:	200032b9 	.word	0x200032b9
 800642c:	200032ba 	.word	0x200032ba
		Raw_x = (spiRxBuf[2] << 8) | spiRxBuf[1];
 8006430:	4b83      	ldr	r3, [pc, #524]	; (8006640 <L3GD20_loop+0x3cc>)
 8006432:	789b      	ldrb	r3, [r3, #2]
 8006434:	021b      	lsls	r3, r3, #8
 8006436:	b21a      	sxth	r2, r3
 8006438:	4b81      	ldr	r3, [pc, #516]	; (8006640 <L3GD20_loop+0x3cc>)
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	b21b      	sxth	r3, r3
 800643e:	4313      	orrs	r3, r2
 8006440:	b21a      	sxth	r2, r3
 8006442:	4b80      	ldr	r3, [pc, #512]	; (8006644 <L3GD20_loop+0x3d0>)
 8006444:	801a      	strh	r2, [r3, #0]
		Raw_y = (spiRxBuf[4] << 8) | spiRxBuf[3];
 8006446:	4b7e      	ldr	r3, [pc, #504]	; (8006640 <L3GD20_loop+0x3cc>)
 8006448:	791b      	ldrb	r3, [r3, #4]
 800644a:	021b      	lsls	r3, r3, #8
 800644c:	b21a      	sxth	r2, r3
 800644e:	4b7c      	ldr	r3, [pc, #496]	; (8006640 <L3GD20_loop+0x3cc>)
 8006450:	78db      	ldrb	r3, [r3, #3]
 8006452:	b21b      	sxth	r3, r3
 8006454:	4313      	orrs	r3, r2
 8006456:	b21a      	sxth	r2, r3
 8006458:	4b7b      	ldr	r3, [pc, #492]	; (8006648 <L3GD20_loop+0x3d4>)
 800645a:	801a      	strh	r2, [r3, #0]
		Raw_z = (spiRxBuf[6] << 8) | spiRxBuf[5];
 800645c:	4b78      	ldr	r3, [pc, #480]	; (8006640 <L3GD20_loop+0x3cc>)
 800645e:	799b      	ldrb	r3, [r3, #6]
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	b21a      	sxth	r2, r3
 8006464:	4b76      	ldr	r3, [pc, #472]	; (8006640 <L3GD20_loop+0x3cc>)
 8006466:	795b      	ldrb	r3, [r3, #5]
 8006468:	b21b      	sxth	r3, r3
 800646a:	4313      	orrs	r3, r2
 800646c:	b21a      	sxth	r2, r3
 800646e:	4b77      	ldr	r3, [pc, #476]	; (800664c <L3GD20_loop+0x3d8>)
 8006470:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8006472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006476:	4876      	ldr	r0, [pc, #472]	; (8006650 <L3GD20_loop+0x3dc>)
 8006478:	f7fc fca9 	bl	8002dce <HAL_GPIO_TogglePin>
		angleRate_x = (float) (Raw_x - (offset_x)) * L3GD20_SENSITIVITY;
 800647c:	4b71      	ldr	r3, [pc, #452]	; (8006644 <L3GD20_loop+0x3d0>)
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	b21b      	sxth	r3, r3
 8006482:	461a      	mov	r2, r3
 8006484:	4b73      	ldr	r3, [pc, #460]	; (8006654 <L3GD20_loop+0x3e0>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	ee07 3a90 	vmov	s15, r3
 800648e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006492:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8006658 <L3GD20_loop+0x3e4>
 8006496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800649a:	4b70      	ldr	r3, [pc, #448]	; (800665c <L3GD20_loop+0x3e8>)
 800649c:	edc3 7a00 	vstr	s15, [r3]
		angleRate_y = (float) (Raw_y - (offset_y)) * L3GD20_SENSITIVITY;
 80064a0:	4b69      	ldr	r3, [pc, #420]	; (8006648 <L3GD20_loop+0x3d4>)
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b21b      	sxth	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	4b6d      	ldr	r3, [pc, #436]	; (8006660 <L3GD20_loop+0x3ec>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	ee07 3a90 	vmov	s15, r3
 80064b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064b6:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8006658 <L3GD20_loop+0x3e4>
 80064ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064be:	4b69      	ldr	r3, [pc, #420]	; (8006664 <L3GD20_loop+0x3f0>)
 80064c0:	edc3 7a00 	vstr	s15, [r3]
		angleRate_z = (float) (Raw_z - (offset_z)) * L3GD20_SENSITIVITY;
 80064c4:	4b61      	ldr	r3, [pc, #388]	; (800664c <L3GD20_loop+0x3d8>)
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b21b      	sxth	r3, r3
 80064ca:	461a      	mov	r2, r3
 80064cc:	4b66      	ldr	r3, [pc, #408]	; (8006668 <L3GD20_loop+0x3f4>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064da:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8006658 <L3GD20_loop+0x3e4>
 80064de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064e2:	4b62      	ldr	r3, [pc, #392]	; (800666c <L3GD20_loop+0x3f8>)
 80064e4:	edc3 7a00 	vstr	s15, [r3]
		timeDifference = 0.001;
 80064e8:	4b61      	ldr	r3, [pc, #388]	; (8006670 <L3GD20_loop+0x3fc>)
 80064ea:	4a62      	ldr	r2, [pc, #392]	; (8006674 <L3GD20_loop+0x400>)
 80064ec:	601a      	str	r2, [r3, #0]
		if ((angleRate_x > Noise_X) || (angleRate_x < -Noise_X)) {
 80064ee:	4b5b      	ldr	r3, [pc, #364]	; (800665c <L3GD20_loop+0x3e8>)
 80064f0:	ed93 7a00 	vldr	s14, [r3]
 80064f4:	4b60      	ldr	r3, [pc, #384]	; (8006678 <L3GD20_loop+0x404>)
 80064f6:	edd3 7a00 	vldr	s15, [r3]
 80064fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006502:	dc0c      	bgt.n	800651e <L3GD20_loop+0x2aa>
 8006504:	4b5c      	ldr	r3, [pc, #368]	; (8006678 <L3GD20_loop+0x404>)
 8006506:	edd3 7a00 	vldr	s15, [r3]
 800650a:	eeb1 7a67 	vneg.f32	s14, s15
 800650e:	4b53      	ldr	r3, [pc, #332]	; (800665c <L3GD20_loop+0x3e8>)
 8006510:	edd3 7a00 	vldr	s15, [r3]
 8006514:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800651c:	dd1c      	ble.n	8006558 <L3GD20_loop+0x2e4>
			Angle_X += ((angleRate_x + LastAngleRate_X) * timeDifference)/ (2.0f);
 800651e:	4b4f      	ldr	r3, [pc, #316]	; (800665c <L3GD20_loop+0x3e8>)
 8006520:	ed93 7a00 	vldr	s14, [r3]
 8006524:	4b55      	ldr	r3, [pc, #340]	; (800667c <L3GD20_loop+0x408>)
 8006526:	edd3 7a00 	vldr	s15, [r3]
 800652a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800652e:	4b50      	ldr	r3, [pc, #320]	; (8006670 <L3GD20_loop+0x3fc>)
 8006530:	edd3 7a00 	vldr	s15, [r3]
 8006534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006538:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800653c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006540:	4b4f      	ldr	r3, [pc, #316]	; (8006680 <L3GD20_loop+0x40c>)
 8006542:	edd3 7a00 	vldr	s15, [r3]
 8006546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800654a:	4b4d      	ldr	r3, [pc, #308]	; (8006680 <L3GD20_loop+0x40c>)
 800654c:	edc3 7a00 	vstr	s15, [r3]
			LastAngleRate_X = angleRate_x;
 8006550:	4b42      	ldr	r3, [pc, #264]	; (800665c <L3GD20_loop+0x3e8>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a49      	ldr	r2, [pc, #292]	; (800667c <L3GD20_loop+0x408>)
 8006556:	6013      	str	r3, [r2, #0]
		if ((angleRate_y > Noise_Y) || (angleRate_y < -Noise_Y)) {
 8006558:	4b42      	ldr	r3, [pc, #264]	; (8006664 <L3GD20_loop+0x3f0>)
 800655a:	ed93 7a00 	vldr	s14, [r3]
 800655e:	4b49      	ldr	r3, [pc, #292]	; (8006684 <L3GD20_loop+0x410>)
 8006560:	edd3 7a00 	vldr	s15, [r3]
 8006564:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800656c:	dc0c      	bgt.n	8006588 <L3GD20_loop+0x314>
 800656e:	4b45      	ldr	r3, [pc, #276]	; (8006684 <L3GD20_loop+0x410>)
 8006570:	edd3 7a00 	vldr	s15, [r3]
 8006574:	eeb1 7a67 	vneg.f32	s14, s15
 8006578:	4b3a      	ldr	r3, [pc, #232]	; (8006664 <L3GD20_loop+0x3f0>)
 800657a:	edd3 7a00 	vldr	s15, [r3]
 800657e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006586:	dd1c      	ble.n	80065c2 <L3GD20_loop+0x34e>
			Angle_Y += ((angleRate_y + LastAngleRate_Y) * timeDifference) / (2.0f);
 8006588:	4b36      	ldr	r3, [pc, #216]	; (8006664 <L3GD20_loop+0x3f0>)
 800658a:	ed93 7a00 	vldr	s14, [r3]
 800658e:	4b3e      	ldr	r3, [pc, #248]	; (8006688 <L3GD20_loop+0x414>)
 8006590:	edd3 7a00 	vldr	s15, [r3]
 8006594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006598:	4b35      	ldr	r3, [pc, #212]	; (8006670 <L3GD20_loop+0x3fc>)
 800659a:	edd3 7a00 	vldr	s15, [r3]
 800659e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80065a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80065aa:	4b38      	ldr	r3, [pc, #224]	; (800668c <L3GD20_loop+0x418>)
 80065ac:	edd3 7a00 	vldr	s15, [r3]
 80065b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065b4:	4b35      	ldr	r3, [pc, #212]	; (800668c <L3GD20_loop+0x418>)
 80065b6:	edc3 7a00 	vstr	s15, [r3]
			LastAngleRate_Y = angleRate_y;
 80065ba:	4b2a      	ldr	r3, [pc, #168]	; (8006664 <L3GD20_loop+0x3f0>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a32      	ldr	r2, [pc, #200]	; (8006688 <L3GD20_loop+0x414>)
 80065c0:	6013      	str	r3, [r2, #0]
		if ((angleRate_z > Noise_Z) || (angleRate_z < -Noise_Z)) {//57.29577951308232
 80065c2:	4b2a      	ldr	r3, [pc, #168]	; (800666c <L3GD20_loop+0x3f8>)
 80065c4:	ed93 7a00 	vldr	s14, [r3]
 80065c8:	4b31      	ldr	r3, [pc, #196]	; (8006690 <L3GD20_loop+0x41c>)
 80065ca:	edd3 7a00 	vldr	s15, [r3]
 80065ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d6:	dc0c      	bgt.n	80065f2 <L3GD20_loop+0x37e>
 80065d8:	4b2d      	ldr	r3, [pc, #180]	; (8006690 <L3GD20_loop+0x41c>)
 80065da:	edd3 7a00 	vldr	s15, [r3]
 80065de:	eeb1 7a67 	vneg.f32	s14, s15
 80065e2:	4b22      	ldr	r3, [pc, #136]	; (800666c <L3GD20_loop+0x3f8>)
 80065e4:	edd3 7a00 	vldr	s15, [r3]
 80065e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f0:	dd1c      	ble.n	800662c <L3GD20_loop+0x3b8>
			Angle_Z += ((angleRate_z + LastAngleRate_Z) * timeDifference) / (2.0f);
 80065f2:	4b1e      	ldr	r3, [pc, #120]	; (800666c <L3GD20_loop+0x3f8>)
 80065f4:	ed93 7a00 	vldr	s14, [r3]
 80065f8:	4b26      	ldr	r3, [pc, #152]	; (8006694 <L3GD20_loop+0x420>)
 80065fa:	edd3 7a00 	vldr	s15, [r3]
 80065fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006602:	4b1b      	ldr	r3, [pc, #108]	; (8006670 <L3GD20_loop+0x3fc>)
 8006604:	edd3 7a00 	vldr	s15, [r3]
 8006608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800660c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006610:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006614:	4b20      	ldr	r3, [pc, #128]	; (8006698 <L3GD20_loop+0x424>)
 8006616:	edd3 7a00 	vldr	s15, [r3]
 800661a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800661e:	4b1e      	ldr	r3, [pc, #120]	; (8006698 <L3GD20_loop+0x424>)
 8006620:	edc3 7a00 	vstr	s15, [r3]
			LastAngleRate_Z = angleRate_z;
 8006624:	4b11      	ldr	r3, [pc, #68]	; (800666c <L3GD20_loop+0x3f8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a1a      	ldr	r2, [pc, #104]	; (8006694 <L3GD20_loop+0x420>)
 800662a:	6013      	str	r3, [r2, #0]
		currentState = L3GD20_fisrt;
 800662c:	4b1b      	ldr	r3, [pc, #108]	; (800669c <L3GD20_loop+0x428>)
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]
		dataReadyFlag = L3GD20_DATA_READY;
 8006632:	4b1b      	ldr	r3, [pc, #108]	; (80066a0 <L3GD20_loop+0x42c>)
 8006634:	2201      	movs	r2, #1
 8006636:	701a      	strb	r2, [r3, #0]
		break;
 8006638:	e000      	b.n	800663c <L3GD20_loop+0x3c8>
		break;
 800663a:	bf00      	nop

	}
}
 800663c:	bf00      	nop
 800663e:	bd80      	pop	{r7, pc}
 8006640:	200032b4 	.word	0x200032b4
 8006644:	200032c0 	.word	0x200032c0
 8006648:	200032c2 	.word	0x200032c2
 800664c:	200032c4 	.word	0x200032c4
 8006650:	40020000 	.word	0x40020000
 8006654:	20000390 	.word	0x20000390
 8006658:	3d8f5c29 	.word	0x3d8f5c29
 800665c:	20000384 	.word	0x20000384
 8006660:	20000394 	.word	0x20000394
 8006664:	20000388 	.word	0x20000388
 8006668:	20000398 	.word	0x20000398
 800666c:	2000038c 	.word	0x2000038c
 8006670:	200032bc 	.word	0x200032bc
 8006674:	3a83126f 	.word	0x3a83126f
 8006678:	2000039c 	.word	0x2000039c
 800667c:	200003b4 	.word	0x200003b4
 8006680:	200003a8 	.word	0x200003a8
 8006684:	200003a0 	.word	0x200003a0
 8006688:	200003b8 	.word	0x200003b8
 800668c:	200003ac 	.word	0x200003ac
 8006690:	200003a4 	.word	0x200003a4
 8006694:	200003bc 	.word	0x200003bc
 8006698:	200003b0 	.word	0x200003b0
 800669c:	20000381 	.word	0x20000381
 80066a0:	20000009 	.word	0x20000009

080066a4 <readADC>:
#include "adc.h"



uint16_t readADC(adc_channels channel, uint8_t timeout)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b088      	sub	sp, #32
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	4603      	mov	r3, r0
 80066ac:	460a      	mov	r2, r1
 80066ae:	71fb      	strb	r3, [r7, #7]
 80066b0:	4613      	mov	r3, r2
 80066b2:	71bb      	strb	r3, [r7, #6]
    ADC_ChannelConfTypeDef sConfig = {0};
 80066b4:	f107 030c 	add.w	r3, r7, #12
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	605a      	str	r2, [r3, #4]
 80066be:	609a      	str	r2, [r3, #8]
 80066c0:	60da      	str	r2, [r3, #12]
    uint16_t adc_val = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	83fb      	strh	r3, [r7, #30]
    switch (channel)
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	d81c      	bhi.n	8006706 <readADC+0x62>
 80066cc:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <readADC+0x30>)
 80066ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d2:	bf00      	nop
 80066d4:	080066f5 	.word	0x080066f5
 80066d8:	080066e9 	.word	0x080066e9
 80066dc:	08006701 	.word	0x08006701
 80066e0:	080066ef 	.word	0x080066ef
 80066e4:	080066fb 	.word	0x080066fb
    {
        case RF_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_4;
 80066e8:	2304      	movs	r3, #4
 80066ea:	60fb      	str	r3, [r7, #12]
            break;
 80066ec:	e00b      	b.n	8006706 <readADC+0x62>

        case DL_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_8;
 80066ee:	2308      	movs	r3, #8
 80066f0:	60fb      	str	r3, [r7, #12]
            break;
 80066f2:	e008      	b.n	8006706 <readADC+0x62>

        case LF_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_9;
 80066f4:	2309      	movs	r3, #9
 80066f6:	60fb      	str	r3, [r7, #12]
            break;
 80066f8:	e005      	b.n	8006706 <readADC+0x62>

        case BAT_VOL:
        	sConfig.Channel = ADC_CHANNEL_13;
 80066fa:	230d      	movs	r3, #13
 80066fc:	60fb      	str	r3, [r7, #12]
            break;
 80066fe:	e002      	b.n	8006706 <readADC+0x62>
        
        case DR_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_14;
 8006700:	230e      	movs	r3, #14
 8006702:	60fb      	str	r3, [r7, #12]
            break;
 8006704:	bf00      	nop
    }


    sConfig.Rank = 1;
 8006706:	2301      	movs	r3, #1
 8006708:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800670a:	2304      	movs	r3, #4
 800670c:	617b      	str	r3, [r7, #20]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800670e:	f107 030c 	add.w	r3, r7, #12
 8006712:	4619      	mov	r1, r3
 8006714:	480e      	ldr	r0, [pc, #56]	; (8006750 <readADC+0xac>)
 8006716:	f7fb fb8b 	bl	8001e30 <HAL_ADC_ConfigChannel>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <readADC+0x80>
    {
      Error_Handler();
 8006720:	f7fa fd64 	bl	80011ec <Error_Handler>
    }

    HAL_ADC_Start(&hadc1);
 8006724:	480a      	ldr	r0, [pc, #40]	; (8006750 <readADC+0xac>)
 8006726:	f7fb f9e5 	bl	8001af4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1,timeout);
 800672a:	79bb      	ldrb	r3, [r7, #6]
 800672c:	4619      	mov	r1, r3
 800672e:	4808      	ldr	r0, [pc, #32]	; (8006750 <readADC+0xac>)
 8006730:	f7fb fae5 	bl	8001cfe <HAL_ADC_PollForConversion>
    adc_val = HAL_ADC_GetValue(&hadc1);
 8006734:	4806      	ldr	r0, [pc, #24]	; (8006750 <readADC+0xac>)
 8006736:	f7fb fb6d 	bl	8001e14 <HAL_ADC_GetValue>
 800673a:	4603      	mov	r3, r0
 800673c:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(&hadc1);
 800673e:	4804      	ldr	r0, [pc, #16]	; (8006750 <readADC+0xac>)
 8006740:	f7fb faaa 	bl	8001c98 <HAL_ADC_Stop>

    return adc_val;
 8006744:	8bfb      	ldrh	r3, [r7, #30]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3720      	adds	r7, #32
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	20000030 	.word	0x20000030

08006754 <micros>:
	  
// 	Millis = 0;//reset Millis
// }

u32 micros(void)
{
 8006754:	b480      	push	{r7}
 8006756:	af00      	add	r7, sp, #0
	Micros = Millis*1000 + 1000 - SysTick->VAL/systemFrequency;//=Millis*1000+(SystemCoreClock/1000-SysTick->VAL)/168;
 8006758:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <micros+0x34>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3301      	adds	r3, #1
 800675e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006762:	fb03 f202 	mul.w	r2, r3, r2
 8006766:	4b09      	ldr	r3, [pc, #36]	; (800678c <micros+0x38>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	08db      	lsrs	r3, r3, #3
 800676c:	4908      	ldr	r1, [pc, #32]	; (8006790 <micros+0x3c>)
 800676e:	fba1 1303 	umull	r1, r3, r1, r3
 8006772:	085b      	lsrs	r3, r3, #1
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	4a07      	ldr	r2, [pc, #28]	; (8006794 <micros+0x40>)
 8006778:	6013      	str	r3, [r2, #0]
	return Micros; 
 800677a:	4b06      	ldr	r3, [pc, #24]	; (8006794 <micros+0x40>)
 800677c:	681b      	ldr	r3, [r3, #0]
}
 800677e:	4618      	mov	r0, r3
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	200032cc 	.word	0x200032cc
 800678c:	e000e010 	.word	0xe000e010
 8006790:	18618619 	.word	0x18618619
 8006794:	200032c8 	.word	0x200032c8

08006798 <elapseMicros>:
	u32 curTime = micros();
	while((nTime-(micros()-curTime)) > 0);
}  

void elapseMicros(u32 targetTime, u32 oldt)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
	while((micros()-oldt)<targetTime);
 80067a2:	bf00      	nop
 80067a4:	f7ff ffd6 	bl	8006754 <micros>
 80067a8:	4602      	mov	r2, r0
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d8f7      	bhi.n	80067a4 <elapseMicros+0xc>
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
	...

080067c0 <encoderInit>:
#include "encoder.h"


// FUCTION: INTIALIZATION OF ENCODER RELATED HARDWARE
void encoderInit(void){
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
	// LEFT ENCODER
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80067c4:	213c      	movs	r1, #60	; 0x3c
 80067c6:	4804      	ldr	r0, [pc, #16]	; (80067d8 <encoderInit+0x18>)
 80067c8:	f7fe f800 	bl	80047cc <HAL_TIM_Encoder_Start>

	// RIGHT ENCODER
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80067cc:	213c      	movs	r1, #60	; 0x3c
 80067ce:	4803      	ldr	r0, [pc, #12]	; (80067dc <encoderInit+0x1c>)
 80067d0:	f7fd fffc 	bl	80047cc <HAL_TIM_Encoder_Start>
}
 80067d4:	bf00      	nop
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	20000188 	.word	0x20000188
 80067dc:	20000218 	.word	0x20000218

080067e0 <motorInit>:
float run_speed_l;
float run_speed_r;

// INITIALIZATIONS
void motorInit(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
	// Start PWM for TIM4 channels (you may need to adjust this based on your application)
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // LPWMA
 80067e4:	2100      	movs	r1, #0
 80067e6:	480b      	ldr	r0, [pc, #44]	; (8006814 <motorInit+0x34>)
 80067e8:	f7fd fe82 	bl	80044f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // LPWMB
 80067ec:	2104      	movs	r1, #4
 80067ee:	4809      	ldr	r0, [pc, #36]	; (8006814 <motorInit+0x34>)
 80067f0:	f7fd fe7e 	bl	80044f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // RPWMA
 80067f4:	2108      	movs	r1, #8
 80067f6:	4807      	ldr	r0, [pc, #28]	; (8006814 <motorInit+0x34>)
 80067f8:	f7fd fe7a 	bl	80044f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // RPWMB
 80067fc:	210c      	movs	r1, #12
 80067fe:	4805      	ldr	r0, [pc, #20]	; (8006814 <motorInit+0x34>)
 8006800:	f7fd fe76 	bl	80044f0 <HAL_TIM_PWM_Start>
	setWheels(0, 0);
 8006804:	eddf 0a04 	vldr	s1, [pc, #16]	; 8006818 <motorInit+0x38>
 8006808:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8006818 <motorInit+0x38>
 800680c:	f000 f89e 	bl	800694c <setWheels>
}
 8006810:	bf00      	nop
 8006812:	bd80      	pop	{r7, pc}
 8006814:	200001d0 	.word	0x200001d0
 8006818:	00000000 	.word	0x00000000

0800681c <setLeftWheel>:

// LEFT WHEEL PLANNER
void setLeftWheel(float l_speed)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t l_pwma, l_pwmb;
	l_pwma = (l_speed >= 0) ? l_speed * max_limit : 0;
 8006826:	edd7 7a01 	vldr	s15, [r7, #4]
 800682a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800682e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006832:	db0f      	blt.n	8006854 <setLeftWheel+0x38>
 8006834:	4b1d      	ldr	r3, [pc, #116]	; (80068ac <setLeftWheel+0x90>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	ee07 3a90 	vmov	s15, r3
 800683c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006840:	edd7 7a01 	vldr	s15, [r7, #4]
 8006844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800684c:	ee17 3a90 	vmov	r3, s15
 8006850:	b29b      	uxth	r3, r3
 8006852:	e000      	b.n	8006856 <setLeftWheel+0x3a>
 8006854:	2300      	movs	r3, #0
 8006856:	81fb      	strh	r3, [r7, #14]
	l_pwmb = (l_speed < 0) ? (-l_speed) * max_limit : 0;
 8006858:	edd7 7a01 	vldr	s15, [r7, #4]
 800685c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006864:	d511      	bpl.n	800688a <setLeftWheel+0x6e>
 8006866:	edd7 7a01 	vldr	s15, [r7, #4]
 800686a:	eeb1 7a67 	vneg.f32	s14, s15
 800686e:	4b0f      	ldr	r3, [pc, #60]	; (80068ac <setLeftWheel+0x90>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	ee07 3a90 	vmov	s15, r3
 8006876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800687a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006882:	ee17 3a90 	vmov	r3, s15
 8006886:	b29b      	uxth	r3, r3
 8006888:	e000      	b.n	800688c <setLeftWheel+0x70>
 800688a:	2300      	movs	r3, #0
 800688c:	81bb      	strh	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, l_pwma); // LPWMA
 800688e:	4b08      	ldr	r3, [pc, #32]	; (80068b0 <setLeftWheel+0x94>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	89fa      	ldrh	r2, [r7, #14]
 8006894:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, l_pwmb); // LPWMB
 8006896:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <setLeftWheel+0x94>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	89ba      	ldrh	r2, [r7, #12]
 800689c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800689e:	bf00      	nop
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	2000000c 	.word	0x2000000c
 80068b0:	200001d0 	.word	0x200001d0

080068b4 <setRightWheel>:

void setRightWheel(float r_speed)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t r_pwma, r_pwmb;

	r_pwma = (r_speed >= 0) ? r_speed * max_limit : 0;
 80068be:	edd7 7a01 	vldr	s15, [r7, #4]
 80068c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80068c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ca:	db0f      	blt.n	80068ec <setRightWheel+0x38>
 80068cc:	4b1d      	ldr	r3, [pc, #116]	; (8006944 <setRightWheel+0x90>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	ee07 3a90 	vmov	s15, r3
 80068d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80068dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068e4:	ee17 3a90 	vmov	r3, s15
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	e000      	b.n	80068ee <setRightWheel+0x3a>
 80068ec:	2300      	movs	r3, #0
 80068ee:	81fb      	strh	r3, [r7, #14]
	r_pwmb = (r_speed < 0) ? (-r_speed) * max_limit : 0;
 80068f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80068f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80068f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068fc:	d511      	bpl.n	8006922 <setRightWheel+0x6e>
 80068fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8006902:	eeb1 7a67 	vneg.f32	s14, s15
 8006906:	4b0f      	ldr	r3, [pc, #60]	; (8006944 <setRightWheel+0x90>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	ee07 3a90 	vmov	s15, r3
 800690e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800691a:	ee17 3a90 	vmov	r3, s15
 800691e:	b29b      	uxth	r3, r3
 8006920:	e000      	b.n	8006924 <setRightWheel+0x70>
 8006922:	2300      	movs	r3, #0
 8006924:	81bb      	strh	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, r_pwma); // RPWMA
 8006926:	4b08      	ldr	r3, [pc, #32]	; (8006948 <setRightWheel+0x94>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	89fa      	ldrh	r2, [r7, #14]
 800692c:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, r_pwmb); // RPWMB
 800692e:	4b06      	ldr	r3, [pc, #24]	; (8006948 <setRightWheel+0x94>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	89ba      	ldrh	r2, [r7, #12]
 8006934:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006936:	bf00      	nop
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	2000000c 	.word	0x2000000c
 8006948:	200001d0 	.word	0x200001d0

0800694c <setWheels>:

void setWheels(float l_speed, float r_speed)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	ed87 0a01 	vstr	s0, [r7, #4]
 8006956:	edc7 0a00 	vstr	s1, [r7]
	setLeftWheel(l_speed);
 800695a:	ed97 0a01 	vldr	s0, [r7, #4]
 800695e:	f7ff ff5d 	bl	800681c <setLeftWheel>
	setRightWheel(r_speed);
 8006962:	ed97 0a00 	vldr	s0, [r7]
 8006966:	f7ff ffa5 	bl	80068b4 <setRightWheel>
}
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	0000      	movs	r0, r0
 8006974:	0000      	movs	r0, r0
	...

08006978 <turnGyro>:
		}
	}
}

void turnGyro(float angle)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	ed87 0a01 	vstr	s0, [r7, #4]

	while (1)
	{

		error = Angle_Z - angle;
 8006982:	4b37      	ldr	r3, [pc, #220]	; (8006a60 <turnGyro+0xe8>)
 8006984:	ed93 7a00 	vldr	s14, [r3]
 8006988:	edd7 7a01 	vldr	s15, [r7, #4]
 800698c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006994:	ee17 2a90 	vmov	r2, s15
 8006998:	4b32      	ldr	r3, [pc, #200]	; (8006a64 <turnGyro+0xec>)
 800699a:	601a      	str	r2, [r3, #0]
		I = I + error;
 800699c:	4b32      	ldr	r3, [pc, #200]	; (8006a68 <turnGyro+0xf0>)
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	4b30      	ldr	r3, [pc, #192]	; (8006a64 <turnGyro+0xec>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4413      	add	r3, r2
 80069a6:	4a30      	ldr	r2, [pc, #192]	; (8006a68 <turnGyro+0xf0>)
 80069a8:	6013      	str	r3, [r2, #0]

		correction =
			(float)(error * StKp + I * StKi + (error - lastErr) * StKd) / 20.0;
 80069aa:	4b2e      	ldr	r3, [pc, #184]	; (8006a64 <turnGyro+0xec>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	ee07 3a90 	vmov	s15, r3
 80069b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80069be:	4b2a      	ldr	r3, [pc, #168]	; (8006a68 <turnGyro+0xf0>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	ee07 3a90 	vmov	s15, r3
 80069c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069ca:	eddf 6a28 	vldr	s13, [pc, #160]	; 8006a6c <turnGyro+0xf4>
 80069ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80069d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069d6:	4b23      	ldr	r3, [pc, #140]	; (8006a64 <turnGyro+0xec>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	4b25      	ldr	r3, [pc, #148]	; (8006a70 <turnGyro+0xf8>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	ee07 3a90 	vmov	s15, r3
 80069e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069e8:	eddf 6a20 	vldr	s13, [pc, #128]	; 8006a6c <turnGyro+0xf4>
 80069ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80069f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069f4:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80069f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
		correction =
 80069fc:	4b1d      	ldr	r3, [pc, #116]	; (8006a74 <turnGyro+0xfc>)
 80069fe:	edc3 7a00 	vstr	s15, [r3]
		correction = (correction > .2) ? .2 : correction;
 8006a02:	4b1c      	ldr	r3, [pc, #112]	; (8006a74 <turnGyro+0xfc>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7f9 fd42 	bl	8000490 <__aeabi_f2d>
 8006a0c:	a312      	add	r3, pc, #72	; (adr r3, 8006a58 <turnGyro+0xe0>)
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f7f9 fe13 	bl	800063c <__aeabi_dcmpgt>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <turnGyro+0xa8>
 8006a1c:	4b16      	ldr	r3, [pc, #88]	; (8006a78 <turnGyro+0x100>)
 8006a1e:	e001      	b.n	8006a24 <turnGyro+0xac>
 8006a20:	4b14      	ldr	r3, [pc, #80]	; (8006a74 <turnGyro+0xfc>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a13      	ldr	r2, [pc, #76]	; (8006a74 <turnGyro+0xfc>)
 8006a26:	6013      	str	r3, [r2, #0]
		lastErr = error;
 8006a28:	4b0e      	ldr	r3, [pc, #56]	; (8006a64 <turnGyro+0xec>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a10      	ldr	r2, [pc, #64]	; (8006a70 <turnGyro+0xf8>)
 8006a2e:	6013      	str	r3, [r2, #0]

		setLeftWheel(correction);
 8006a30:	4b10      	ldr	r3, [pc, #64]	; (8006a74 <turnGyro+0xfc>)
 8006a32:	edd3 7a00 	vldr	s15, [r3]
 8006a36:	eeb0 0a67 	vmov.f32	s0, s15
 8006a3a:	f7ff feef 	bl	800681c <setLeftWheel>
		setRightWheel(-correction);
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <turnGyro+0xfc>)
 8006a40:	edd3 7a00 	vldr	s15, [r3]
 8006a44:	eef1 7a67 	vneg.f32	s15, s15
 8006a48:	eeb0 0a67 	vmov.f32	s0, s15
 8006a4c:	f7ff ff32 	bl	80068b4 <setRightWheel>
		error = Angle_Z - angle;
 8006a50:	e797      	b.n	8006982 <turnGyro+0xa>
 8006a52:	bf00      	nop
 8006a54:	f3af 8000 	nop.w
 8006a58:	9999999a 	.word	0x9999999a
 8006a5c:	3fc99999 	.word	0x3fc99999
 8006a60:	200003b0 	.word	0x200003b0
 8006a64:	200032d0 	.word	0x200032d0
 8006a68:	200032d8 	.word	0x200032d8
 8006a6c:	00000000 	.word	0x00000000
 8006a70:	200032d4 	.word	0x200032d4
 8006a74:	200032dc 	.word	0x200032dc
 8006a78:	3e4ccccd 	.word	0x3e4ccccd

08006a7c <readSensor>:
bool R = false;
bool F = false;

/*read IR sensors*/
void readSensor(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
	u32 curt;
	
	//read DC value	
	LFSensor = read_LF_Sensor;	
 8006a82:	2101      	movs	r1, #1
 8006a84:	2000      	movs	r0, #0
 8006a86:	f7ff fe0d 	bl	80066a4 <readADC>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	4b6c      	ldr	r3, [pc, #432]	; (8006c40 <readSensor+0x1c4>)
 8006a90:	601a      	str	r2, [r3, #0]
	RFSensor = read_RF_Sensor;	
 8006a92:	2101      	movs	r1, #1
 8006a94:	2001      	movs	r0, #1
 8006a96:	f7ff fe05 	bl	80066a4 <readADC>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4b69      	ldr	r3, [pc, #420]	; (8006c44 <readSensor+0x1c8>)
 8006aa0:	601a      	str	r2, [r3, #0]
	DLSensor = read_DL_Sensor;
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	2003      	movs	r0, #3
 8006aa6:	f7ff fdfd 	bl	80066a4 <readADC>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	461a      	mov	r2, r3
 8006aae:	4b66      	ldr	r3, [pc, #408]	; (8006c48 <readSensor+0x1cc>)
 8006ab0:	601a      	str	r2, [r3, #0]
	DRSensor = read_DR_Sensor;	
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	2002      	movs	r0, #2
 8006ab6:	f7ff fdf5 	bl	80066a4 <readADC>
 8006aba:	4603      	mov	r3, r0
 8006abc:	461a      	mov	r2, r3
 8006abe:	4b63      	ldr	r3, [pc, #396]	; (8006c4c <readSensor+0x1d0>)
 8006ac0:	601a      	str	r2, [r3, #0]
	
	curt = micros();
 8006ac2:	f7ff fe47 	bl	8006754 <micros>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	607b      	str	r3, [r7, #4]
	
    //left front sensor
	LF_EM_ON;
 8006aca:	2201      	movs	r2, #1
 8006acc:	2180      	movs	r1, #128	; 0x80
 8006ace:	4860      	ldr	r0, [pc, #384]	; (8006c50 <readSensor+0x1d4>)
 8006ad0:	f7fc f964 	bl	8002d9c <HAL_GPIO_WritePin>
	elapseMicros(60,curt);
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	203c      	movs	r0, #60	; 0x3c
 8006ad8:	f7ff fe5e 	bl	8006798 <elapseMicros>
	LFSensor = read_LF_Sensor - LFSensor;
 8006adc:	2101      	movs	r1, #1
 8006ade:	2000      	movs	r0, #0
 8006ae0:	f7ff fde0 	bl	80066a4 <readADC>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	4b55      	ldr	r3, [pc, #340]	; (8006c40 <readSensor+0x1c4>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	4a54      	ldr	r2, [pc, #336]	; (8006c40 <readSensor+0x1c4>)
 8006af0:	6013      	str	r3, [r2, #0]
	LF_EM_OFF;
 8006af2:	2200      	movs	r2, #0
 8006af4:	2180      	movs	r1, #128	; 0x80
 8006af6:	4856      	ldr	r0, [pc, #344]	; (8006c50 <readSensor+0x1d4>)
 8006af8:	f7fc f950 	bl	8002d9c <HAL_GPIO_WritePin>
	if(LFSensor < 0)//error check
 8006afc:	4b50      	ldr	r3, [pc, #320]	; (8006c40 <readSensor+0x1c4>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	da02      	bge.n	8006b0a <readSensor+0x8e>
		LFSensor = 0;
 8006b04:	4b4e      	ldr	r3, [pc, #312]	; (8006c40 <readSensor+0x1c4>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	601a      	str	r2, [r3, #0]
 	elapseMicros(140,curt);
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	208c      	movs	r0, #140	; 0x8c
 8006b0e:	f7ff fe43 	bl	8006798 <elapseMicros>

	//right front sensor
	RF_EM_ON;
 8006b12:	2201      	movs	r2, #1
 8006b14:	2102      	movs	r1, #2
 8006b16:	484e      	ldr	r0, [pc, #312]	; (8006c50 <readSensor+0x1d4>)
 8006b18:	f7fc f940 	bl	8002d9c <HAL_GPIO_WritePin>
	elapseMicros(200,curt);	
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	20c8      	movs	r0, #200	; 0xc8
 8006b20:	f7ff fe3a 	bl	8006798 <elapseMicros>
	RFSensor = read_RF_Sensor - RFSensor;
 8006b24:	2101      	movs	r1, #1
 8006b26:	2001      	movs	r0, #1
 8006b28:	f7ff fdbc 	bl	80066a4 <readADC>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	461a      	mov	r2, r3
 8006b30:	4b44      	ldr	r3, [pc, #272]	; (8006c44 <readSensor+0x1c8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	4a43      	ldr	r2, [pc, #268]	; (8006c44 <readSensor+0x1c8>)
 8006b38:	6013      	str	r3, [r2, #0]
	RF_EM_OFF;
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2102      	movs	r1, #2
 8006b3e:	4844      	ldr	r0, [pc, #272]	; (8006c50 <readSensor+0x1d4>)
 8006b40:	f7fc f92c 	bl	8002d9c <HAL_GPIO_WritePin>
	if(RFSensor < 0)
 8006b44:	4b3f      	ldr	r3, [pc, #252]	; (8006c44 <readSensor+0x1c8>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	da02      	bge.n	8006b52 <readSensor+0xd6>
		RFSensor = 0;
 8006b4c:	4b3d      	ldr	r3, [pc, #244]	; (8006c44 <readSensor+0x1c8>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]
 	elapseMicros(280,curt);
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	f44f 708c 	mov.w	r0, #280	; 0x118
 8006b58:	f7ff fe1e 	bl	8006798 <elapseMicros>

    //diagonal sensors
	SIDE_EM_ON;
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	2120      	movs	r1, #32
 8006b60:	483b      	ldr	r0, [pc, #236]	; (8006c50 <readSensor+0x1d4>)
 8006b62:	f7fc f91b 	bl	8002d9c <HAL_GPIO_WritePin>
	elapseMicros(340,curt);	
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8006b6c:	f7ff fe14 	bl	8006798 <elapseMicros>
	DLSensor = read_DL_Sensor - DLSensor;
 8006b70:	2101      	movs	r1, #1
 8006b72:	2003      	movs	r0, #3
 8006b74:	f7ff fd96 	bl	80066a4 <readADC>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	4b32      	ldr	r3, [pc, #200]	; (8006c48 <readSensor+0x1cc>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	4a31      	ldr	r2, [pc, #196]	; (8006c48 <readSensor+0x1cc>)
 8006b84:	6013      	str	r3, [r2, #0]
	DRSensor = read_DR_Sensor - DRSensor;
 8006b86:	2101      	movs	r1, #1
 8006b88:	2002      	movs	r0, #2
 8006b8a:	f7ff fd8b 	bl	80066a4 <readADC>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	461a      	mov	r2, r3
 8006b92:	4b2e      	ldr	r3, [pc, #184]	; (8006c4c <readSensor+0x1d0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	4a2c      	ldr	r2, [pc, #176]	; (8006c4c <readSensor+0x1d0>)
 8006b9a:	6013      	str	r3, [r2, #0]
    SIDE_EM_OFF;
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2120      	movs	r1, #32
 8006ba0:	482b      	ldr	r0, [pc, #172]	; (8006c50 <readSensor+0x1d4>)
 8006ba2:	f7fc f8fb 	bl	8002d9c <HAL_GPIO_WritePin>
	if(DLSensor < 0)
 8006ba6:	4b28      	ldr	r3, [pc, #160]	; (8006c48 <readSensor+0x1cc>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	da02      	bge.n	8006bb4 <readSensor+0x138>
		DLSensor = 0;
 8006bae:	4b26      	ldr	r3, [pc, #152]	; (8006c48 <readSensor+0x1cc>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]
	if(DRSensor < 0)
 8006bb4:	4b25      	ldr	r3, [pc, #148]	; (8006c4c <readSensor+0x1d0>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	da02      	bge.n	8006bc2 <readSensor+0x146>
		DRSensor = 0;
 8006bbc:	4b23      	ldr	r3, [pc, #140]	; (8006c4c <readSensor+0x1d0>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	601a      	str	r2, [r3, #0]
	
	readVolMeter();
 8006bc2:	f000 f863 	bl	8006c8c <readVolMeter>
	
	LFSensor = LFSensor*reflectionRate/1000;
 8006bc6:	4b1e      	ldr	r3, [pc, #120]	; (8006c40 <readSensor+0x1c4>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a22      	ldr	r2, [pc, #136]	; (8006c54 <readSensor+0x1d8>)
 8006bcc:	6812      	ldr	r2, [r2, #0]
 8006bce:	fb02 f303 	mul.w	r3, r2, r3
 8006bd2:	4a21      	ldr	r2, [pc, #132]	; (8006c58 <readSensor+0x1dc>)
 8006bd4:	fb82 1203 	smull	r1, r2, r2, r3
 8006bd8:	1192      	asrs	r2, r2, #6
 8006bda:	17db      	asrs	r3, r3, #31
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	4a18      	ldr	r2, [pc, #96]	; (8006c40 <readSensor+0x1c4>)
 8006be0:	6013      	str	r3, [r2, #0]
	RFSensor = RFSensor*reflectionRate/1000;
 8006be2:	4b18      	ldr	r3, [pc, #96]	; (8006c44 <readSensor+0x1c8>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a1b      	ldr	r2, [pc, #108]	; (8006c54 <readSensor+0x1d8>)
 8006be8:	6812      	ldr	r2, [r2, #0]
 8006bea:	fb02 f303 	mul.w	r3, r2, r3
 8006bee:	4a1a      	ldr	r2, [pc, #104]	; (8006c58 <readSensor+0x1dc>)
 8006bf0:	fb82 1203 	smull	r1, r2, r2, r3
 8006bf4:	1192      	asrs	r2, r2, #6
 8006bf6:	17db      	asrs	r3, r3, #31
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	4a12      	ldr	r2, [pc, #72]	; (8006c44 <readSensor+0x1c8>)
 8006bfc:	6013      	str	r3, [r2, #0]
	DLSensor = DLSensor*reflectionRate/1000;
 8006bfe:	4b12      	ldr	r3, [pc, #72]	; (8006c48 <readSensor+0x1cc>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a14      	ldr	r2, [pc, #80]	; (8006c54 <readSensor+0x1d8>)
 8006c04:	6812      	ldr	r2, [r2, #0]
 8006c06:	fb02 f303 	mul.w	r3, r2, r3
 8006c0a:	4a13      	ldr	r2, [pc, #76]	; (8006c58 <readSensor+0x1dc>)
 8006c0c:	fb82 1203 	smull	r1, r2, r2, r3
 8006c10:	1192      	asrs	r2, r2, #6
 8006c12:	17db      	asrs	r3, r3, #31
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	4a0c      	ldr	r2, [pc, #48]	; (8006c48 <readSensor+0x1cc>)
 8006c18:	6013      	str	r3, [r2, #0]
	DRSensor = DRSensor*reflectionRate/1000;
 8006c1a:	4b0c      	ldr	r3, [pc, #48]	; (8006c4c <readSensor+0x1d0>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a0d      	ldr	r2, [pc, #52]	; (8006c54 <readSensor+0x1d8>)
 8006c20:	6812      	ldr	r2, [r2, #0]
 8006c22:	fb02 f303 	mul.w	r3, r2, r3
 8006c26:	4a0c      	ldr	r2, [pc, #48]	; (8006c58 <readSensor+0x1dc>)
 8006c28:	fb82 1203 	smull	r1, r2, r2, r3
 8006c2c:	1192      	asrs	r2, r2, #6
 8006c2e:	17db      	asrs	r3, r3, #31
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	4a06      	ldr	r2, [pc, #24]	; (8006c4c <readSensor+0x1d0>)
 8006c34:	6013      	str	r3, [r2, #0]
	
	// delay_us(80);
	// elapseMicros(500,curt);
}
 8006c36:	bf00      	nop
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	200032e8 	.word	0x200032e8
 8006c44:	200032ec 	.word	0x200032ec
 8006c48:	200032f0 	.word	0x200032f0
 8006c4c:	200032f4 	.word	0x200032f4
 8006c50:	40020800 	.word	0x40020800
 8006c54:	20000010 	.word	0x20000010
 8006c58:	10624dd3 	.word	0x10624dd3

08006c5c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]

  if (htim == &htim13){
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a07      	ldr	r2, [pc, #28]	; (8006c84 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d101      	bne.n	8006c70 <HAL_TIM_PeriodElapsedCallback+0x14>
		L3GD20_loop();
 8006c6c:	f7ff fb02 	bl	8006274 <L3GD20_loop>
  }
  if (htim == &htim14 )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a05      	ldr	r2, [pc, #20]	; (8006c88 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d101      	bne.n	8006c7c <HAL_TIM_PeriodElapsedCallback+0x20>
  {
    readSensor();
 8006c78:	f7ff ff00 	bl	8006a7c <readSensor>
  }
}
 8006c7c:	bf00      	nop
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	200002a8 	.word	0x200002a8
 8006c88:	200002f0 	.word	0x200002f0

08006c8c <readVolMeter>:



/*read voltage meter*/
void readVolMeter(void)
{          //3240 = 7.85V
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	af00      	add	r7, sp, #0
	volMeter = read_Vol_Meter;//raw value
 8006c90:	2101      	movs	r1, #1
 8006c92:	2004      	movs	r0, #4
 8006c94:	f7ff fd06 	bl	80066a4 <readADC>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	4b09      	ldr	r3, [pc, #36]	; (8006cc4 <readVolMeter+0x38>)
 8006c9e:	601a      	str	r2, [r3, #0]
	voltage = volMeter*809/3248;//actual voltage value  ex) 8.2V = 8200
 8006ca0:	4b08      	ldr	r3, [pc, #32]	; (8006cc4 <readVolMeter+0x38>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f240 3229 	movw	r2, #809	; 0x329
 8006ca8:	fb02 f303 	mul.w	r3, r2, r3
 8006cac:	4a06      	ldr	r2, [pc, #24]	; (8006cc8 <readVolMeter+0x3c>)
 8006cae:	fb82 1203 	smull	r1, r2, r2, r3
 8006cb2:	441a      	add	r2, r3
 8006cb4:	12d2      	asrs	r2, r2, #11
 8006cb6:	17db      	asrs	r3, r3, #31
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	4a04      	ldr	r2, [pc, #16]	; (8006ccc <readVolMeter+0x40>)
 8006cbc:	6013      	str	r3, [r2, #0]
}
 8006cbe:	bf00      	nop
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	200032e0 	.word	0x200032e0
 8006cc8:	a16b312f 	.word	0xa16b312f
 8006ccc:	200032e4 	.word	0x200032e4

08006cd0 <cppmain>:
bool buttonPress = false;

int mouseState = 2, l_adc, r_adc;


void cppmain(void) {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0

	// INITIALIZATION OF HARDWARES
	motorInit();
 8006cd6:	f7ff fd83 	bl	80067e0 <motorInit>
	encoderInit();
 8006cda:	f7ff fd71 	bl	80067c0 <encoderInit>


	int dist = 170;
 8006cde:	23aa      	movs	r3, #170	; 0xaa
 8006ce0:	607b      	str	r3, [r7, #4]

	HAL_Delay(2000);
 8006ce2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006ce6:	f7fa fe9d 	bl	8001a24 <HAL_Delay>

//	straightCountsPID(dist);

	while (1) {

		turnGyro(0);
 8006cea:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8006d00 <cppmain+0x30>
 8006cee:	f7ff fe43 	bl	8006978 <turnGyro>
//		l_value = adcResultsDMA[0];
//		r_value = adcResultsDMA[1];


//		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adcResultsDMA, adcChannelCount);
		i++;
 8006cf2:	4b04      	ldr	r3, [pc, #16]	; (8006d04 <cppmain+0x34>)
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	4b02      	ldr	r3, [pc, #8]	; (8006d04 <cppmain+0x34>)
 8006cfc:	801a      	strh	r2, [r3, #0]
		turnGyro(0);
 8006cfe:	e7f4      	b.n	8006cea <cppmain+0x1a>
 8006d00:	00000000 	.word	0x00000000
 8006d04:	200032f8 	.word	0x200032f8

08006d08 <memset>:
 8006d08:	4402      	add	r2, r0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d100      	bne.n	8006d12 <memset+0xa>
 8006d10:	4770      	bx	lr
 8006d12:	f803 1b01 	strb.w	r1, [r3], #1
 8006d16:	e7f9      	b.n	8006d0c <memset+0x4>

08006d18 <__libc_init_array>:
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	4d0d      	ldr	r5, [pc, #52]	; (8006d50 <__libc_init_array+0x38>)
 8006d1c:	4c0d      	ldr	r4, [pc, #52]	; (8006d54 <__libc_init_array+0x3c>)
 8006d1e:	1b64      	subs	r4, r4, r5
 8006d20:	10a4      	asrs	r4, r4, #2
 8006d22:	2600      	movs	r6, #0
 8006d24:	42a6      	cmp	r6, r4
 8006d26:	d109      	bne.n	8006d3c <__libc_init_array+0x24>
 8006d28:	4d0b      	ldr	r5, [pc, #44]	; (8006d58 <__libc_init_array+0x40>)
 8006d2a:	4c0c      	ldr	r4, [pc, #48]	; (8006d5c <__libc_init_array+0x44>)
 8006d2c:	f000 f818 	bl	8006d60 <_init>
 8006d30:	1b64      	subs	r4, r4, r5
 8006d32:	10a4      	asrs	r4, r4, #2
 8006d34:	2600      	movs	r6, #0
 8006d36:	42a6      	cmp	r6, r4
 8006d38:	d105      	bne.n	8006d46 <__libc_init_array+0x2e>
 8006d3a:	bd70      	pop	{r4, r5, r6, pc}
 8006d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d40:	4798      	blx	r3
 8006d42:	3601      	adds	r6, #1
 8006d44:	e7ee      	b.n	8006d24 <__libc_init_array+0xc>
 8006d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d4a:	4798      	blx	r3
 8006d4c:	3601      	adds	r6, #1
 8006d4e:	e7f2      	b.n	8006d36 <__libc_init_array+0x1e>
 8006d50:	08006da0 	.word	0x08006da0
 8006d54:	08006da0 	.word	0x08006da0
 8006d58:	08006da0 	.word	0x08006da0
 8006d5c:	08006da4 	.word	0x08006da4

08006d60 <_init>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	bf00      	nop
 8006d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d66:	bc08      	pop	{r3}
 8006d68:	469e      	mov	lr, r3
 8006d6a:	4770      	bx	lr

08006d6c <_fini>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	bf00      	nop
 8006d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d72:	bc08      	pop	{r3}
 8006d74:	469e      	mov	lr, r3
 8006d76:	4770      	bx	lr
