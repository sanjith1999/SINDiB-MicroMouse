
MicromouseFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030cc  0800b890  0800b890  0001b890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e95c  0800e95c  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800e95c  0800e95c  0001e95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e964  0800e964  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e964  0800e964  0001e964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e968  0800e968  0001e968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800e96c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020208  2**0
                  CONTENTS
 10 .bss          000007b4  20000208  20000208  00020208  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009bc  200009bc  00020208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017613  00000000  00000000  0002027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003867  00000000  00000000  0003788e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012d8  00000000  00000000  0003b0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e87  00000000  00000000  0003c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028199  00000000  00000000  0003d257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ad18  00000000  00000000  000653f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5e59  00000000  00000000  00080108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000613c  00000000  00000000  00155f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0015c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b874 	.word	0x0800b874

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800b874 	.word	0x0800b874

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <main>:
static void MX_TIM9_Init(void);           // BUZZER SOUND GENERATION
static void MX_TIM13_Init(void);          // INTERRUPT GYRO UPDATE
static void MX_TIM14_Init(void);          // INTERRUPT ADC UPDATE: IR

int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  HAL_Init();
 8000f48:	f001 fc48 	bl	80027dc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000f4c:	f000 f82a 	bl	8000fa4 <SystemClock_Config>

  ITM_Port32(31) = 1;
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <main+0x5c>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f56:	f000 fbef 	bl	8001738 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f5a:	f000 fbcd 	bl	80016f8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000f5e:	f000 f8c3 	bl	80010e8 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000f62:	f000 f9d3 	bl	800130c <MX_TIM4_Init>
  MX_ADC1_Init();
 8000f66:	f000 f887 	bl	8001078 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000f6a:	f000 f8f3 	bl	8001154 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000f6e:	f000 fb99 	bl	80016a4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000f72:	f000 f927 	bl	80011c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f76:	f000 f975 	bl	8001264 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f7a:	f000 fa5f 	bl	800143c <MX_TIM5_Init>
  MX_TIM6_Init();
 8000f7e:	f000 fab1 	bl	80014e4 <MX_TIM6_Init>
  MX_TIM9_Init();
 8000f82:	f000 fae5 	bl	8001550 <MX_TIM9_Init>
  MX_TIM13_Init();
 8000f86:	f000 fb45 	bl	8001614 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000f8a:	f000 fb67 	bl	800165c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  

  ITM_Port32(31) = 2;
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <main+0x5c>)
 8000f90:	2202      	movs	r2, #2
 8000f92:	601a      	str	r2, [r3, #0]

  // TRANSFERRING THE CONTROL TO OUR LOOP
  cppmain();
 8000f94:	f006 fdac 	bl	8007af0 <cppmain>

  while (1)
  {
	  return 0;
 8000f98:	2300      	movs	r3, #0
  }
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000007c 	.word	0xe000007c

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b094      	sub	sp, #80	; 0x50
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0320 	add.w	r3, r7, #32
 8000fae:	2230      	movs	r2, #48	; 0x30
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f008 fc3b 	bl	800982e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b28      	ldr	r3, [pc, #160]	; (8001070 <SystemClock_Config+0xcc>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	4a27      	ldr	r2, [pc, #156]	; (8001070 <SystemClock_Config+0xcc>)
 8000fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd8:	4b25      	ldr	r3, [pc, #148]	; (8001070 <SystemClock_Config+0xcc>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	4b22      	ldr	r3, [pc, #136]	; (8001074 <SystemClock_Config+0xd0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a21      	ldr	r2, [pc, #132]	; (8001074 <SystemClock_Config+0xd0>)
 8000fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <SystemClock_Config+0xd0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure.  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001000:	2301      	movs	r3, #1
 8001002:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001004:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100a:	2302      	movs	r3, #2
 800100c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001012:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001014:	2308      	movs	r3, #8
 8001016:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001018:	2332      	movs	r3, #50	; 0x32
 800101a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800101c:	2302      	movs	r3, #2
 800101e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001020:	2304      	movs	r3, #4
 8001022:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001024:	f107 0320 	add.w	r3, r7, #32
 8001028:	4618      	mov	r0, r3
 800102a:	f002 fe5d 	bl	8003ce8 <HAL_RCC_OscConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001034:	f000 fc58 	bl	80018e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001038:	230f      	movs	r3, #15
 800103a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103c:	2302      	movs	r3, #2
 800103e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001048:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2101      	movs	r1, #1
 8001054:	4618      	mov	r0, r3
 8001056:	f003 f8bf 	bl	80041d8 <HAL_RCC_ClockConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001060:	f000 fc42 	bl	80018e8 <Error_Handler>
  }

  /** Enables the Clock Security System*/
  HAL_RCC_EnableCSS();
 8001064:	f003 f99e 	bl	80043a4 <HAL_RCC_EnableCSS>
}
 8001068:	bf00      	nop
 800106a:	3750      	adds	r7, #80	; 0x50
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023800 	.word	0x40023800
 8001074:	40007000 	.word	0x40007000

08001078 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) */
  hadc1.Instance = ADC1;
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <MX_ADC1_Init+0x64>)
 800107e:	4a18      	ldr	r2, [pc, #96]	; (80010e0 <MX_ADC1_Init+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <MX_ADC1_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <MX_ADC1_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <MX_ADC1_Init+0x64>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_ADC1_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <MX_ADC1_Init+0x64>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_ADC1_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_ADC1_Init+0x64>)
 80010aa:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <MX_ADC1_Init+0x6c>)
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <MX_ADC1_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_ADC1_Init+0x64>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <MX_ADC1_Init+0x64>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_ADC1_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_ADC1_Init+0x64>)
 80010ca:	f001 fc1d 	bl	8002908 <HAL_ADC_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 80010d4:	f000 fc08 	bl	80018e8 <Error_Handler>
  }
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000224 	.word	0x20000224
 80010e0:	40012000 	.word	0x40012000
 80010e4:	0f000001 	.word	0x0f000001

080010e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_SPI1_Init+0x64>)
 80010ee:	4a18      	ldr	r2, [pc, #96]	; (8001150 <MX_SPI1_Init+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_SPI1_Init+0x64>)
 80010f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_SPI1_Init+0x64>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_SPI1_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_SPI1_Init+0x64>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_SPI1_Init+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_SPI1_Init+0x64>)
 8001114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001118:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_SPI1_Init+0x64>)
 800111c:	2218      	movs	r2, #24
 800111e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <MX_SPI1_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_SPI1_Init+0x64>)
 8001128:	2200      	movs	r2, #0
 800112a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <MX_SPI1_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_SPI1_Init+0x64>)
 8001134:	220a      	movs	r2, #10
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_SPI1_Init+0x64>)
 800113a:	f003 fa92 	bl	8004662 <HAL_SPI_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001144:	f000 fbd0 	bl	80018e8 <Error_Handler>
  }
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200002cc 	.word	0x200002cc
 8001150:	40013000 	.word	0x40013000

08001154 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <MX_SPI2_Init+0x68>)
 800115a:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <MX_SPI2_Init+0x6c>)
 800115c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <MX_SPI2_Init+0x68>)
 8001160:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001164:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <MX_SPI2_Init+0x68>)
 8001168:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800116c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800116e:	4b13      	ldr	r3, [pc, #76]	; (80011bc <MX_SPI2_Init+0x68>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_SPI2_Init+0x68>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <MX_SPI2_Init+0x68>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_SPI2_Init+0x68>)
 8001182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001186:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_SPI2_Init+0x68>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_SPI2_Init+0x68>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_SPI2_Init+0x68>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <MX_SPI2_Init+0x68>)
 800119c:	2200      	movs	r2, #0
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_SPI2_Init+0x68>)
 80011a2:	220a      	movs	r2, #10
 80011a4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_SPI2_Init+0x68>)
 80011a8:	f003 fa5b 	bl	8004662 <HAL_SPI_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80011b2:	f000 fb99 	bl	80018e8 <Error_Handler>
  }
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000324 	.word	0x20000324
 80011c0:	40003800 	.word	0x40003800

080011c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MX_TIM1_Init+0x98>)
 80011e2:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <MX_TIM1_Init+0x9c>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <MX_TIM1_Init+0x98>)
 80011e8:	2231      	movs	r2, #49	; 0x31
 80011ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_TIM1_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <MX_TIM1_Init+0x98>)
 80011f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_TIM1_Init+0x98>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_TIM1_Init+0x98>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_TIM1_Init+0x98>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800120c:	4813      	ldr	r0, [pc, #76]	; (800125c <MX_TIM1_Init+0x98>)
 800120e:	f003 ffd1 	bl	80051b4 <HAL_TIM_Base_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x58>
    Error_Handler();
 8001218:	f000 fb66 	bl	80018e8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001220:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	4619      	mov	r1, r3
 8001228:	480c      	ldr	r0, [pc, #48]	; (800125c <MX_TIM1_Init+0x98>)
 800122a:	f004 fd0b 	bl	8005c44 <HAL_TIM_ConfigClockSource>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM1_Init+0x74>
    Error_Handler();
 8001234:	f000 fb58 	bl	80018e8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_TIM1_Init+0x98>)
 8001246:	f005 f8fd 	bl	8006444 <HAL_TIMEx_MasterConfigSynchronization>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0x90>
    Error_Handler();
 8001250:	f000 fb4a 	bl	80018e8 <Error_Handler>
}
 8001254:	bf00      	nop
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000037c 	.word	0x2000037c
 8001260:	40010000 	.word	0x40010000

08001264 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	; 0x30
 8001268:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	2224      	movs	r2, #36	; 0x24
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f008 fadb 	bl	800982e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001280:	4b21      	ldr	r3, [pc, #132]	; (8001308 <MX_TIM2_Init+0xa4>)
 8001282:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001286:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001288:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MX_TIM2_Init+0xa4>)
 800128a:	2200      	movs	r2, #0
 800128c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <MX_TIM2_Init+0xa4>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <MX_TIM2_Init+0xa4>)
 8001296:	f04f 32ff 	mov.w	r2, #4294967295
 800129a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <MX_TIM2_Init+0xa4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_TIM2_Init+0xa4>)
 80012a4:	2280      	movs	r2, #128	; 0x80
 80012a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012b0:	2301      	movs	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012c0:	2301      	movs	r3, #1
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	4619      	mov	r1, r3
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <MX_TIM2_Init+0xa4>)
 80012d4:	f004 f9b8 	bl	8005648 <HAL_TIM_Encoder_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM2_Init+0x7e>
    Error_Handler();
 80012de:	f000 fb03 	bl	80018e8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	4806      	ldr	r0, [pc, #24]	; (8001308 <MX_TIM2_Init+0xa4>)
 80012f0:	f005 f8a8 	bl	8006444 <HAL_TIMEx_MasterConfigSynchronization>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0x9a>
    Error_Handler();
 80012fa:	f000 faf5 	bl	80018e8 <Error_Handler>
}
 80012fe:	bf00      	nop
 8001300:	3730      	adds	r7, #48	; 0x30
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200003c4 	.word	0x200003c4

0800130c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08e      	sub	sp, #56	; 0x38
 8001310:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	615a      	str	r2, [r3, #20]
 800133a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800133c:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <MX_TIM4_Init+0x128>)
 800133e:	4a3e      	ldr	r2, [pc, #248]	; (8001438 <MX_TIM4_Init+0x12c>)
 8001340:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001342:	4b3c      	ldr	r3, [pc, #240]	; (8001434 <MX_TIM4_Init+0x128>)
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <MX_TIM4_Init+0x128>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4095;
 800134e:	4b39      	ldr	r3, [pc, #228]	; (8001434 <MX_TIM4_Init+0x128>)
 8001350:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001354:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	4b37      	ldr	r3, [pc, #220]	; (8001434 <MX_TIM4_Init+0x128>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135c:	4b35      	ldr	r3, [pc, #212]	; (8001434 <MX_TIM4_Init+0x128>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001362:	4834      	ldr	r0, [pc, #208]	; (8001434 <MX_TIM4_Init+0x128>)
 8001364:	f003 ff26 	bl	80051b4 <HAL_TIM_Base_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM4_Init+0x66>
    Error_Handler();
 800136e:	f000 fabb 	bl	80018e8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001378:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800137c:	4619      	mov	r1, r3
 800137e:	482d      	ldr	r0, [pc, #180]	; (8001434 <MX_TIM4_Init+0x128>)
 8001380:	f004 fc60 	bl	8005c44 <HAL_TIM_ConfigClockSource>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM4_Init+0x82>
    Error_Handler();
 800138a:	f000 faad 	bl	80018e8 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800138e:	4829      	ldr	r0, [pc, #164]	; (8001434 <MX_TIM4_Init+0x128>)
 8001390:	f004 f838 	bl	8005404 <HAL_TIM_PWM_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM4_Init+0x92>
    Error_Handler();
 800139a:	f000 faa5 	bl	80018e8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013a6:	f107 0320 	add.w	r3, r7, #32
 80013aa:	4619      	mov	r1, r3
 80013ac:	4821      	ldr	r0, [pc, #132]	; (8001434 <MX_TIM4_Init+0x128>)
 80013ae:	f005 f849 	bl	8006444 <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM4_Init+0xb0>
    Error_Handler();
 80013b8:	f000 fa96 	bl	80018e8 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013bc:	2360      	movs	r3, #96	; 0x60
 80013be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	4619      	mov	r1, r3
 80013d2:	4818      	ldr	r0, [pc, #96]	; (8001434 <MX_TIM4_Init+0x128>)
 80013d4:	f004 fb74 	bl	8005ac0 <HAL_TIM_PWM_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM4_Init+0xd6>
    Error_Handler();
 80013de:	f000 fa83 	bl	80018e8 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2204      	movs	r2, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	4812      	ldr	r0, [pc, #72]	; (8001434 <MX_TIM4_Init+0x128>)
 80013ea:	f004 fb69 	bl	8005ac0 <HAL_TIM_PWM_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM4_Init+0xec>
    Error_Handler();
 80013f4:	f000 fa78 	bl	80018e8 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2208      	movs	r2, #8
 80013fc:	4619      	mov	r1, r3
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <MX_TIM4_Init+0x128>)
 8001400:	f004 fb5e 	bl	8005ac0 <HAL_TIM_PWM_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM4_Init+0x102>
    Error_Handler();
 800140a:	f000 fa6d 	bl	80018e8 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	220c      	movs	r2, #12
 8001412:	4619      	mov	r1, r3
 8001414:	4807      	ldr	r0, [pc, #28]	; (8001434 <MX_TIM4_Init+0x128>)
 8001416:	f004 fb53 	bl	8005ac0 <HAL_TIM_PWM_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM4_Init+0x118>
    Error_Handler();
 8001420:	f000 fa62 	bl	80018e8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8001424:	4803      	ldr	r0, [pc, #12]	; (8001434 <MX_TIM4_Init+0x128>)
 8001426:	f000 fcfb 	bl	8001e20 <HAL_TIM_MspPostInit>
}
 800142a:	bf00      	nop
 800142c:	3738      	adds	r7, #56	; 0x38
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000040c 	.word	0x2000040c
 8001438:	40000800 	.word	0x40000800

0800143c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	; 0x30
 8001440:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	2224      	movs	r2, #36	; 0x24
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f008 f9ef 	bl	800982e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
  htim5.Instance = TIM5;
 8001458:	4b20      	ldr	r3, [pc, #128]	; (80014dc <MX_TIM5_Init+0xa0>)
 800145a:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <MX_TIM5_Init+0xa4>)
 800145c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <MX_TIM5_Init+0xa0>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <MX_TIM5_Init+0xa0>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <MX_TIM5_Init+0xa0>)
 800146c:	f04f 32ff 	mov.w	r2, #4294967295
 8001470:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <MX_TIM5_Init+0xa0>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <MX_TIM5_Init+0xa0>)
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 800147e:	2302      	movs	r3, #2
 8001480:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001486:	2301      	movs	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001496:	2301      	movs	r3, #1
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <MX_TIM5_Init+0xa0>)
 80014aa:	f004 f8cd 	bl	8005648 <HAL_TIM_Encoder_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM5_Init+0x7c>
    Error_Handler();
 80014b4:	f000 fa18 	bl	80018e8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_TIM5_Init+0xa0>)
 80014c6:	f004 ffbd 	bl	8006444 <HAL_TIMEx_MasterConfigSynchronization>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM5_Init+0x98>
    Error_Handler();
 80014d0:	f000 fa0a 	bl	80018e8 <Error_Handler>
}
 80014d4:	bf00      	nop
 80014d6:	3730      	adds	r7, #48	; 0x30
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000454 	.word	0x20000454
 80014e0:	40000c00 	.word	0x40000c00

080014e4 <MX_TIM6_Init>:


static void MX_TIM6_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ea:	463b      	mov	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <MX_TIM6_Init+0x64>)
 80014f4:	4a15      	ldr	r2, [pc, #84]	; (800154c <MX_TIM6_Init+0x68>)
 80014f6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1999;
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <MX_TIM6_Init+0x64>)
 80014fa:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80014fe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_TIM6_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000/(2*FPS);
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <MX_TIM6_Init+0x64>)
 8001508:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800150c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_TIM6_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001514:	480c      	ldr	r0, [pc, #48]	; (8001548 <MX_TIM6_Init+0x64>)
 8001516:	f003 fe4d 	bl	80051b4 <HAL_TIM_Base_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001520:	f000 f9e2 	bl	80018e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800152c:	463b      	mov	r3, r7
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_TIM6_Init+0x64>)
 8001532:	f004 ff87 	bl	8006444 <HAL_TIMEx_MasterConfigSynchronization>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800153c:	f000 f9d4 	bl	80018e8 <Error_Handler>
  }
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	2000049c 	.word	0x2000049c
 800154c:	40001000 	.word	0x40001000

08001550 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08c      	sub	sp, #48	; 0x30
 8001554:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	615a      	str	r2, [r3, #20]
 8001574:	619a      	str	r2, [r3, #24]
  htim9.Instance = TIM9;
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <MX_TIM9_Init+0xbc>)
 8001578:	4a25      	ldr	r2, [pc, #148]	; (8001610 <MX_TIM9_Init+0xc0>)
 800157a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99; // 50 000 000 --> 500 000
 800157c:	4b23      	ldr	r3, [pc, #140]	; (800160c <MX_TIM9_Init+0xbc>)
 800157e:	2263      	movs	r2, #99	; 0x63
 8001580:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <MX_TIM9_Init+0xbc>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;  // 500 000 --> 500
 8001588:	4b20      	ldr	r3, [pc, #128]	; (800160c <MX_TIM9_Init+0xbc>)
 800158a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800158e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <MX_TIM9_Init+0xbc>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_TIM9_Init+0xbc>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800159c:	481b      	ldr	r0, [pc, #108]	; (800160c <MX_TIM9_Init+0xbc>)
 800159e:	f003 fe09 	bl	80051b4 <HAL_TIM_Base_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM9_Init+0x5c>
    Error_Handler();
 80015a8:	f000 f99e 	bl	80018e8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80015b2:	f107 0320 	add.w	r3, r7, #32
 80015b6:	4619      	mov	r1, r3
 80015b8:	4814      	ldr	r0, [pc, #80]	; (800160c <MX_TIM9_Init+0xbc>)
 80015ba:	f004 fb43 	bl	8005c44 <HAL_TIM_ConfigClockSource>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM9_Init+0x78>
    Error_Handler();
 80015c4:	f000 f990 	bl	80018e8 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80015c8:	4810      	ldr	r0, [pc, #64]	; (800160c <MX_TIM9_Init+0xbc>)
 80015ca:	f003 ff1b 	bl	8005404 <HAL_TIM_PWM_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM9_Init+0x88>
    Error_Handler();
 80015d4:	f000 f988 	bl	80018e8 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d8:	2360      	movs	r3, #96	; 0x60
 80015da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	4807      	ldr	r0, [pc, #28]	; (800160c <MX_TIM9_Init+0xbc>)
 80015f0:	f004 fa66 	bl	8005ac0 <HAL_TIM_PWM_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM9_Init+0xae>
    Error_Handler();
 80015fa:	f000 f975 	bl	80018e8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim9);
 80015fe:	4803      	ldr	r0, [pc, #12]	; (800160c <MX_TIM9_Init+0xbc>)
 8001600:	f000 fc0e 	bl	8001e20 <HAL_TIM_MspPostInit>
}
 8001604:	bf00      	nop
 8001606:	3730      	adds	r7, #48	; 0x30
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200004e4 	.word	0x200004e4
 8001610:	40014000 	.word	0x40014000

08001614 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  htim13.Instance = TIM13;
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_TIM13_Init+0x40>)
 800161a:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <MX_TIM13_Init+0x44>)
 800161c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 1;
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <MX_TIM13_Init+0x40>)
 8001620:	2201      	movs	r2, #1
 8001622:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_TIM13_Init+0x40>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 50000;
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <MX_TIM13_Init+0x40>)
 800162c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001630:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MX_TIM13_Init+0x40>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_TIM13_Init+0x40>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_TIM13_Init+0x40>)
 8001640:	f003 fdb8 	bl	80051b4 <HAL_TIM_Base_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM13_Init+0x3a>
    Error_Handler();
 800164a:	f000 f94d 	bl	80018e8 <Error_Handler>
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000052c 	.word	0x2000052c
 8001658:	40001c00 	.word	0x40001c00

0800165c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  htim14.Instance = TIM14;
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_TIM14_Init+0x40>)
 8001662:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <MX_TIM14_Init+0x44>)
 8001664:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1;
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <MX_TIM14_Init+0x40>)
 8001668:	2201      	movs	r2, #1
 800166a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_TIM14_Init+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50000;
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <MX_TIM14_Init+0x40>)
 8001674:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001678:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_TIM14_Init+0x40>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_TIM14_Init+0x40>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_TIM14_Init+0x40>)
 8001688:	f003 fd94 	bl	80051b4 <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001692:	f000 f929 	bl	80018e8 <Error_Handler>
  }
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000574 	.word	0x20000574
 80016a0:	40002000 	.word	0x40002000

080016a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_USART1_UART_Init+0x4c>)
 80016aa:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <MX_USART1_UART_Init+0x50>)
 80016ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <MX_USART1_UART_Init+0x4c>)
 80016b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_USART1_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_USART1_UART_Init+0x4c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <MX_USART1_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_USART1_UART_Init+0x4c>)
 80016ca:	220c      	movs	r2, #12
 80016cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <MX_USART1_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_USART1_UART_Init+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_USART1_UART_Init+0x4c>)
 80016dc:	f004 ff42 	bl	8006564 <HAL_UART_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016e6:	f000 f8ff 	bl	80018e8 <Error_Handler>
  }
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200005bc 	.word	0x200005bc
 80016f4:	40011000 	.word	0x40011000

080016f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_DMA_Init+0x3c>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <MX_DMA_Init+0x3c>)
 8001708:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_DMA_Init+0x3c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	2038      	movs	r0, #56	; 0x38
 8001720:	f001 fdcd 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001724:	2038      	movs	r0, #56	; 0x38
 8001726:	f001 fde6 	bl	80032f6 <HAL_NVIC_EnableIRQ>

}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800

08001738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	4b60      	ldr	r3, [pc, #384]	; (80018d4 <MX_GPIO_Init+0x19c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a5f      	ldr	r2, [pc, #380]	; (80018d4 <MX_GPIO_Init+0x19c>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b5d      	ldr	r3, [pc, #372]	; (80018d4 <MX_GPIO_Init+0x19c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b59      	ldr	r3, [pc, #356]	; (80018d4 <MX_GPIO_Init+0x19c>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a58      	ldr	r2, [pc, #352]	; (80018d4 <MX_GPIO_Init+0x19c>)
 8001774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b56      	ldr	r3, [pc, #344]	; (80018d4 <MX_GPIO_Init+0x19c>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	4b52      	ldr	r3, [pc, #328]	; (80018d4 <MX_GPIO_Init+0x19c>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a51      	ldr	r2, [pc, #324]	; (80018d4 <MX_GPIO_Init+0x19c>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b4f      	ldr	r3, [pc, #316]	; (80018d4 <MX_GPIO_Init+0x19c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	4b4b      	ldr	r3, [pc, #300]	; (80018d4 <MX_GPIO_Init+0x19c>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a4a      	ldr	r2, [pc, #296]	; (80018d4 <MX_GPIO_Init+0x19c>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b48      	ldr	r3, [pc, #288]	; (80018d4 <MX_GPIO_Init+0x19c>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	4b44      	ldr	r3, [pc, #272]	; (80018d4 <MX_GPIO_Init+0x19c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a43      	ldr	r2, [pc, #268]	; (80018d4 <MX_GPIO_Init+0x19c>)
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <MX_GPIO_Init+0x19c>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED10_Pin|RF_EMITTER_Pin|D_C_Pin|DIAGONAL_EMITTER_Pin
 80017da:	2200      	movs	r2, #0
 80017dc:	f641 51e7 	movw	r1, #7655	; 0x1de7
 80017e0:	483d      	ldr	r0, [pc, #244]	; (80018d8 <MX_GPIO_Init+0x1a0>)
 80017e2:	f002 fa29 	bl	8003c38 <HAL_GPIO_WritePin>
                          |CE_Pin|LF_EMITTER_Pin|CS_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED11_Pin|LED9_Pin|LED8_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	f641 0110 	movw	r1, #6160	; 0x1810
 80017ec:	483b      	ldr	r0, [pc, #236]	; (80018dc <MX_GPIO_Init+0x1a4>)
 80017ee:	f002 fa23 	bl	8003c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED7_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80017f8:	4839      	ldr	r0, [pc, #228]	; (80018e0 <MX_GPIO_Init+0x1a8>)
 80017fa:	f002 fa1d 	bl	8003c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	2104      	movs	r1, #4
 8001802:	4838      	ldr	r0, [pc, #224]	; (80018e4 <MX_GPIO_Init+0x1ac>)
 8001804:	f002 fa18 	bl	8003c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TB1_Pin */
  GPIO_InitStruct.Pin = TB1_Pin;
 8001808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800180c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TB1_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	482e      	ldr	r0, [pc, #184]	; (80018d8 <MX_GPIO_Init+0x1a0>)
 800181e:	f002 f86f 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED10_Pin RF_EMITTER_Pin D_C_Pin DIAGONAL_EMITTER_Pin
                           CE_Pin LF_EMITTER_Pin CS_Pin LED3_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED10_Pin|RF_EMITTER_Pin|D_C_Pin|DIAGONAL_EMITTER_Pin
 8001822:	f641 53e7 	movw	r3, #7655	; 0x1de7
 8001826:	617b      	str	r3, [r7, #20]
                          |CE_Pin|LF_EMITTER_Pin|CS_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	4827      	ldr	r0, [pc, #156]	; (80018d8 <MX_GPIO_Init+0x1a0>)
 800183c:	f002 f860 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin;
 8001840:	2308      	movs	r3, #8
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRDY_GPIO_Port, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	4823      	ldr	r0, [pc, #140]	; (80018e0 <MX_GPIO_Init+0x1a8>)
 8001854:	f002 f854 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 INT_Pin MISO_Pin BOOT0_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|INT_Pin|MISO_Pin|BOOT0_Pin;
 8001858:	f244 4324 	movw	r3, #17444	; 0x4424
 800185c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	481b      	ldr	r0, [pc, #108]	; (80018dc <MX_GPIO_Init+0x1a4>)
 800186e:	f002 f847 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED11_Pin LED9_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED11_Pin|LED9_Pin|LED8_Pin;
 8001872:	f641 0310 	movw	r3, #6160	; 0x1810
 8001876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001878:	2301      	movs	r3, #1
 800187a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4814      	ldr	r0, [pc, #80]	; (80018dc <MX_GPIO_Init+0x1a4>)
 800188c:	f002 f838 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED7_Pin|LED1_Pin|LED2_Pin;
 8001890:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	2301      	movs	r3, #1
 8001898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	480d      	ldr	r0, [pc, #52]	; (80018e0 <MX_GPIO_Init+0x1a8>)
 80018aa:	f002 f829 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 80018ae:	2304      	movs	r3, #4
 80018b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	4807      	ldr	r0, [pc, #28]	; (80018e4 <MX_GPIO_Init+0x1ac>)
 80018c6:	f002 f81b 	bl	8003900 <HAL_GPIO_Init>
}
 80018ca:	bf00      	nop
 80018cc:	3728      	adds	r7, #40	; 0x28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020800 	.word	0x40020800
 80018dc:	40020400 	.word	0x40020400
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020c00 	.word	0x40020c00

080018e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ec:	b672      	cpsid	i
}
 80018ee:	bf00      	nop
  __disable_irq();
  while (1);
 80018f0:	e7fe      	b.n	80018f0 <Error_Handler+0x8>
	...

080018f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_MspInit+0x4c>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <HAL_MspInit+0x4c>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_MspInit+0x4c>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_MspInit+0x4c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a08      	ldr	r2, [pc, #32]	; (8001940 <HAL_MspInit+0x4c>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_MspInit+0x4c>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800

08001944 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08c      	sub	sp, #48	; 0x30
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a49      	ldr	r2, [pc, #292]	; (8001a88 <HAL_ADC_MspInit+0x144>)
 8001962:	4293      	cmp	r3, r2
 8001964:	f040 808b 	bne.w	8001a7e <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
 800196c:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 800196e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001970:	4a46      	ldr	r2, [pc, #280]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001976:	6453      	str	r3, [r2, #68]	; 0x44
 8001978:	4b44      	ldr	r3, [pc, #272]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 800197a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	4b40      	ldr	r3, [pc, #256]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	4a3f      	ldr	r2, [pc, #252]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	6313      	str	r3, [r2, #48]	; 0x30
 8001994:	4b3d      	ldr	r3, [pc, #244]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	4b39      	ldr	r3, [pc, #228]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	4a38      	ldr	r2, [pc, #224]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6313      	str	r3, [r2, #48]	; 0x30
 80019b0:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	4b32      	ldr	r3, [pc, #200]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	4a31      	ldr	r2, [pc, #196]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 80019c6:	f043 0302 	orr.w	r3, r3, #2
 80019ca:	6313      	str	r3, [r2, #48]	; 0x30
 80019cc:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VOL_METER_Pin|R_RECEIVER_Pin;
 80019d8:	2318      	movs	r3, #24
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019dc:	2303      	movs	r3, #3
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	4829      	ldr	r0, [pc, #164]	; (8001a90 <HAL_ADC_MspInit+0x14c>)
 80019ec:	f001 ff88 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_RECEIVER_Pin;
 80019f0:	2310      	movs	r3, #16
 80019f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f4:	2303      	movs	r3, #3
 80019f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RF_RECEIVER_GPIO_Port, &GPIO_InitStruct);
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	4619      	mov	r1, r3
 8001a02:	4824      	ldr	r0, [pc, #144]	; (8001a94 <HAL_ADC_MspInit+0x150>)
 8001a04:	f001 ff7c 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L_RECEIVER_Pin|LF_RECEIVER_Pin;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	481f      	ldr	r0, [pc, #124]	; (8001a98 <HAL_ADC_MspInit+0x154>)
 8001a1c:	f001 ff70 	bl	8003900 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a22:	4a1f      	ldr	r2, [pc, #124]	; (8001aa0 <HAL_ADC_MspInit+0x15c>)
 8001a24:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a4e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a62:	480e      	ldr	r0, [pc, #56]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a64:	f001 fc62 	bl	800332c <HAL_DMA_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8001a6e:	f7ff ff3b 	bl	80018e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a76:	639a      	str	r2, [r3, #56]	; 0x38
 8001a78:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a7e:	bf00      	nop
 8001a80:	3730      	adds	r7, #48	; 0x30
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40012000 	.word	0x40012000
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020800 	.word	0x40020800
 8001a94:	40020000 	.word	0x40020000
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	2000026c 	.word	0x2000026c
 8001aa0:	40026410 	.word	0x40026410

08001aa4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08c      	sub	sp, #48	; 0x30
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 031c 	add.w	r3, r7, #28
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a32      	ldr	r2, [pc, #200]	; (8001b8c <HAL_SPI_MspInit+0xe8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d12c      	bne.n	8001b20 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	4a30      	ldr	r2, [pc, #192]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001ad0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad6:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ade:	61bb      	str	r3, [r7, #24]
 8001ae0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a29      	ldr	r2, [pc, #164]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDI_Pin;
 8001afe:	23e0      	movs	r3, #224	; 0xe0
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b0e:	2305      	movs	r3, #5
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	481e      	ldr	r0, [pc, #120]	; (8001b94 <HAL_SPI_MspInit+0xf0>)
 8001b1a:	f001 fef1 	bl	8003900 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b1e:	e031      	b.n	8001b84 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1c      	ldr	r2, [pc, #112]	; (8001b98 <HAL_SPI_MspInit+0xf4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d12c      	bne.n	8001b84 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a17      	ldr	r2, [pc, #92]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CLK_Pin|DATA_IN_Pin;
 8001b62:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b74:	2305      	movs	r3, #5
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4807      	ldr	r0, [pc, #28]	; (8001b9c <HAL_SPI_MspInit+0xf8>)
 8001b80:	f001 febe 	bl	8003900 <HAL_GPIO_Init>
}
 8001b84:	bf00      	nop
 8001b86:	3730      	adds	r7, #48	; 0x30
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40013000 	.word	0x40013000
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40003800 	.word	0x40003800
 8001b9c:	40020400 	.word	0x40020400

08001ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a48      	ldr	r2, [pc, #288]	; (8001cd0 <HAL_TIM_Base_MspInit+0x130>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d10e      	bne.n	8001bd0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a46      	ldr	r2, [pc, #280]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc2:	4b44      	ldr	r3, [pc, #272]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	61fb      	str	r3, [r7, #28]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001bce:	e07a      	b.n	8001cc6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM4)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a40      	ldr	r2, [pc, #256]	; (8001cd8 <HAL_TIM_Base_MspInit+0x138>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d10e      	bne.n	8001bf8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a3c      	ldr	r2, [pc, #240]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	61bb      	str	r3, [r7, #24]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
}
 8001bf6:	e066      	b.n	8001cc6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM6)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a37      	ldr	r2, [pc, #220]	; (8001cdc <HAL_TIM_Base_MspInit+0x13c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d116      	bne.n	8001c30 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	4b33      	ldr	r3, [pc, #204]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a32      	ldr	r2, [pc, #200]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c0c:	f043 0310 	orr.w	r3, r3, #16
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
 8001c12:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	2036      	movs	r0, #54	; 0x36
 8001c24:	f001 fb4b 	bl	80032be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c28:	2036      	movs	r0, #54	; 0x36
 8001c2a:	f001 fb64 	bl	80032f6 <HAL_NVIC_EnableIRQ>
}
 8001c2e:	e04a      	b.n	8001cc6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM9)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a2a      	ldr	r2, [pc, #168]	; (8001ce0 <HAL_TIM_Base_MspInit+0x140>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d10e      	bne.n	8001c58 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a24      	ldr	r2, [pc, #144]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
}
 8001c56:	e036      	b.n	8001cc6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM13)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a21      	ldr	r2, [pc, #132]	; (8001ce4 <HAL_TIM_Base_MspInit+0x144>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d116      	bne.n	8001c90 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a1a      	ldr	r2, [pc, #104]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	202c      	movs	r0, #44	; 0x2c
 8001c84:	f001 fb1b 	bl	80032be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001c88:	202c      	movs	r0, #44	; 0x2c
 8001c8a:	f001 fb34 	bl	80032f6 <HAL_NVIC_EnableIRQ>
}
 8001c8e:	e01a      	b.n	8001cc6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM14)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <HAL_TIM_Base_MspInit+0x148>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d115      	bne.n	8001cc6 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	4a0c      	ldr	r2, [pc, #48]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	202d      	movs	r0, #45	; 0x2d
 8001cbc:	f001 faff 	bl	80032be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001cc0:	202d      	movs	r0, #45	; 0x2d
 8001cc2:	f001 fb18 	bl	80032f6 <HAL_NVIC_EnableIRQ>
}
 8001cc6:	bf00      	nop
 8001cc8:	3720      	adds	r7, #32
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40000800 	.word	0x40000800
 8001cdc:	40001000 	.word	0x40001000
 8001ce0:	40014000 	.word	0x40014000
 8001ce4:	40001c00 	.word	0x40001c00
 8001ce8:	40002000 	.word	0x40002000

08001cec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08c      	sub	sp, #48	; 0x30
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d0c:	d14b      	bne.n	8001da6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	4b3f      	ldr	r3, [pc, #252]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a3e      	ldr	r2, [pc, #248]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b3c      	ldr	r3, [pc, #240]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	61bb      	str	r3, [r7, #24]
 8001d28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	4b38      	ldr	r3, [pc, #224]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a37      	ldr	r2, [pc, #220]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b35      	ldr	r3, [pc, #212]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a30      	ldr	r2, [pc, #192]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d74:	2301      	movs	r3, #1
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4825      	ldr	r0, [pc, #148]	; (8001e14 <HAL_TIM_Encoder_MspInit+0x128>)
 8001d80:	f001 fdbe 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d84:	2308      	movs	r3, #8
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d94:	2301      	movs	r3, #1
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	481e      	ldr	r0, [pc, #120]	; (8001e18 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001da0:	f001 fdae 	bl	8003900 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001da4:	e030      	b.n	8001e08 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM5)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a1c      	ldr	r2, [pc, #112]	; (8001e1c <HAL_TIM_Encoder_MspInit+0x130>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d12b      	bne.n	8001e08 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	4a15      	ldr	r2, [pc, #84]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dba:	f043 0308 	orr.w	r3, r3, #8
 8001dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6313      	str	r3, [r2, #48]	; 0x30
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001de8:	2303      	movs	r3, #3
 8001dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	4619      	mov	r1, r3
 8001e02:	4804      	ldr	r0, [pc, #16]	; (8001e14 <HAL_TIM_Encoder_MspInit+0x128>)
 8001e04:	f001 fd7c 	bl	8003900 <HAL_GPIO_Init>
}
 8001e08:	bf00      	nop
 8001e0a:	3730      	adds	r7, #48	; 0x30
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020000 	.word	0x40020000
 8001e18:	40020400 	.word	0x40020400
 8001e1c:	40000c00 	.word	0x40000c00

08001e20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a24      	ldr	r2, [pc, #144]	; (8001ed0 <HAL_TIM_MspPostInit+0xb0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d11f      	bne.n	8001e82 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <HAL_TIM_MspPostInit+0xb4>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a22      	ldr	r2, [pc, #136]	; (8001ed4 <HAL_TIM_MspPostInit+0xb4>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <HAL_TIM_MspPostInit+0xb4>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = LPWMA_Pin|LPWMB_Pin|RPWMA_Pin|RPWMB_Pin;
 8001e5e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e70:	2302      	movs	r3, #2
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4817      	ldr	r0, [pc, #92]	; (8001ed8 <HAL_TIM_MspPostInit+0xb8>)
 8001e7c:	f001 fd40 	bl	8003900 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001e80:	e022      	b.n	8001ec8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a15      	ldr	r2, [pc, #84]	; (8001edc <HAL_TIM_MspPostInit+0xbc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d11d      	bne.n	8001ec8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_TIM_MspPostInit+0xb4>)
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <HAL_TIM_MspPostInit+0xb4>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_TIM_MspPostInit+0xb4>)
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ea8:	2304      	movs	r3, #4
 8001eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <HAL_TIM_MspPostInit+0xc0>)
 8001ec4:	f001 fd1c 	bl	8003900 <HAL_GPIO_Init>
}
 8001ec8:	bf00      	nop
 8001eca:	3728      	adds	r7, #40	; 0x28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40000800 	.word	0x40000800
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020400 	.word	0x40020400
 8001edc:	40014000 	.word	0x40014000
 8001ee0:	40020000 	.word	0x40020000

08001ee4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <HAL_UART_MspInit+0x84>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d12c      	bne.n	8001f60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <HAL_UART_MspInit+0x88>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <HAL_UART_MspInit+0x88>)
 8001f10:	f043 0310 	orr.w	r3, r3, #16
 8001f14:	6453      	str	r3, [r2, #68]	; 0x44
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_UART_MspInit+0x88>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_UART_MspInit+0x88>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <HAL_UART_MspInit+0x88>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <HAL_UART_MspInit+0x88>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001f3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f50:	2307      	movs	r3, #7
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <HAL_UART_MspInit+0x8c>)
 8001f5c:	f001 fcd0 	bl	8003900 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f60:	bf00      	nop
 8001f62:	3728      	adds	r7, #40	; 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40011000 	.word	0x40011000
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020000 	.word	0x40020000

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001f78:	f002 fb58 	bl	800462c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <NMI_Handler+0x8>

08001f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <HardFault_Handler+0x4>

08001f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <MemManage_Handler+0x4>

08001f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8e:	e7fe      	b.n	8001f8e <BusFault_Handler+0x4>

08001f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <UsageFault_Handler+0x4>

08001f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc4:	f000 fc5c 	bl	8002880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TB1_Pin);
 8001fd0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fd4:	f001 fe64 	bl	8003ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001fe2:	f003 fc65 	bl	80058b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2000052c 	.word	0x2000052c

08001ff0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001ff6:	f003 fc5b 	bl	80058b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000574 	.word	0x20000574

08002004 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <TIM6_DAC_IRQHandler+0x10>)
 800200a:	f003 fc51 	bl	80058b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	2000049c 	.word	0x2000049c

08002018 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <DMA2_Stream0_IRQHandler+0x10>)
 800201e:	f001 fa33 	bl	8003488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000026c 	.word	0x2000026c

0800202c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return 1;
 8002030:	2301      	movs	r3, #1
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_kill>:

int _kill(int pid, int sig)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002046:	f007 fc99 	bl	800997c <__errno>
 800204a:	4603      	mov	r3, r0
 800204c:	2216      	movs	r2, #22
 800204e:	601a      	str	r2, [r3, #0]
  return -1;
 8002050:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_exit>:

void _exit (int status)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002064:	f04f 31ff 	mov.w	r1, #4294967295
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ffe7 	bl	800203c <_kill>
  while (1) {}    /* Make sure we hang here */
 800206e:	e7fe      	b.n	800206e <_exit+0x12>

08002070 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	e00a      	b.n	8002098 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002082:	f3af 8000 	nop.w
 8002086:	4601      	mov	r1, r0
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	60ba      	str	r2, [r7, #8]
 800208e:	b2ca      	uxtb	r2, r1
 8002090:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3301      	adds	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	429a      	cmp	r2, r3
 800209e:	dbf0      	blt.n	8002082 <_read+0x12>
  }

  return len;
 80020a0:	687b      	ldr	r3, [r7, #4]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	e009      	b.n	80020d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	60ba      	str	r2, [r7, #8]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	3301      	adds	r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	dbf1      	blt.n	80020bc <_write+0x12>
  }
  return len;
 80020d8:	687b      	ldr	r3, [r7, #4]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <_close>:

int _close(int file)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800210a:	605a      	str	r2, [r3, #4]
  return 0;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <_isatty>:

int _isatty(int file)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002122:	2301      	movs	r3, #1
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002154:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <_sbrk+0x5c>)
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <_sbrk+0x60>)
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002160:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d102      	bne.n	800216e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <_sbrk+0x64>)
 800216a:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <_sbrk+0x68>)
 800216c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <_sbrk+0x64>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	429a      	cmp	r2, r3
 800217a:	d207      	bcs.n	800218c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800217c:	f007 fbfe 	bl	800997c <__errno>
 8002180:	4603      	mov	r3, r0
 8002182:	220c      	movs	r2, #12
 8002184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
 800218a:	e009      	b.n	80021a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <_sbrk+0x64>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	4a05      	ldr	r2, [pc, #20]	; (80021b0 <_sbrk+0x64>)
 800219c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800219e:	68fb      	ldr	r3, [r7, #12]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20020000 	.word	0x20020000
 80021ac:	00000400 	.word	0x00000400
 80021b0:	20000600 	.word	0x20000600
 80021b4:	200009c0 	.word	0x200009c0

080021b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <SystemInit+0x20>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <SystemInit+0x20>)
 80021c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002214 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021e0:	480d      	ldr	r0, [pc, #52]	; (8002218 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021e2:	490e      	ldr	r1, [pc, #56]	; (800221c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021e4:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e8:	e002      	b.n	80021f0 <LoopCopyDataInit>

080021ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ee:	3304      	adds	r3, #4

080021f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f4:	d3f9      	bcc.n	80021ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021f6:	4a0b      	ldr	r2, [pc, #44]	; (8002224 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021f8:	4c0b      	ldr	r4, [pc, #44]	; (8002228 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021fc:	e001      	b.n	8002202 <LoopFillZerobss>

080021fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002200:	3204      	adds	r2, #4

08002202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002204:	d3fb      	bcc.n	80021fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002206:	f7ff ffd7 	bl	80021b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800220a:	f007 fbbd 	bl	8009988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800220e:	f7fe fe99 	bl	8000f44 <main>
  bx  lr    
 8002212:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002214:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800221c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002220:	0800e96c 	.word	0x0800e96c
  ldr r2, =_sbss
 8002224:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002228:	200009bc 	.word	0x200009bc

0800222c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800222c:	e7fe      	b.n	800222c <ADC_IRQHandler>

0800222e <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 800222e:	b580      	push	{r7, lr}
 8002230:	af00      	add	r7, sp, #0
//
//    // Reset the OLED
//    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
//    HAL_Delay(10);
//    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
    HAL_Delay(10);
 8002232:	200a      	movs	r0, #10
 8002234:	f000 fb44 	bl	80028c0 <HAL_Delay>
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}

0800223c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002246:	2200      	movs	r2, #0
 8002248:	2140      	movs	r1, #64	; 0x40
 800224a:	480c      	ldr	r0, [pc, #48]	; (800227c <ssd1306_WriteCommand+0x40>)
 800224c:	f001 fcf4 	bl	8003c38 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8002250:	2200      	movs	r2, #0
 8002252:	2104      	movs	r1, #4
 8002254:	4809      	ldr	r0, [pc, #36]	; (800227c <ssd1306_WriteCommand+0x40>)
 8002256:	f001 fcef 	bl	8003c38 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 800225a:	1df9      	adds	r1, r7, #7
 800225c:	f04f 33ff 	mov.w	r3, #4294967295
 8002260:	2201      	movs	r2, #1
 8002262:	4807      	ldr	r0, [pc, #28]	; (8002280 <ssd1306_WriteCommand+0x44>)
 8002264:	f002 fa86 	bl	8004774 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8002268:	2201      	movs	r2, #1
 800226a:	2140      	movs	r1, #64	; 0x40
 800226c:	4803      	ldr	r0, [pc, #12]	; (800227c <ssd1306_WriteCommand+0x40>)
 800226e:	f001 fce3 	bl	8003c38 <HAL_GPIO_WritePin>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40020800 	.word	0x40020800
 8002280:	20000324 	.word	0x20000324

08002284 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800228e:	2200      	movs	r2, #0
 8002290:	2140      	movs	r1, #64	; 0x40
 8002292:	480c      	ldr	r0, [pc, #48]	; (80022c4 <ssd1306_WriteData+0x40>)
 8002294:	f001 fcd0 	bl	8003c38 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8002298:	2201      	movs	r2, #1
 800229a:	2104      	movs	r1, #4
 800229c:	4809      	ldr	r0, [pc, #36]	; (80022c4 <ssd1306_WriteData+0x40>)
 800229e:	f001 fccb 	bl	8003c38 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4806      	ldr	r0, [pc, #24]	; (80022c8 <ssd1306_WriteData+0x44>)
 80022ae:	f002 fa61 	bl	8004774 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80022b2:	2201      	movs	r2, #1
 80022b4:	2140      	movs	r1, #64	; 0x40
 80022b6:	4803      	ldr	r0, [pc, #12]	; (80022c4 <ssd1306_WriteData+0x40>)
 80022b8:	f001 fcbe 	bl	8003c38 <HAL_GPIO_WritePin>
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40020800 	.word	0x40020800
 80022c8:	20000324 	.word	0x20000324

080022cc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80022d0:	f7ff ffad 	bl	800222e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80022d4:	2064      	movs	r0, #100	; 0x64
 80022d6:	f000 faf3 	bl	80028c0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80022da:	2000      	movs	r0, #0
 80022dc:	f000 fa60 	bl	80027a0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80022e0:	2020      	movs	r0, #32
 80022e2:	f7ff ffab 	bl	800223c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80022e6:	2000      	movs	r0, #0
 80022e8:	f7ff ffa8 	bl	800223c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80022ec:	20b0      	movs	r0, #176	; 0xb0
 80022ee:	f7ff ffa5 	bl	800223c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80022f2:	20c8      	movs	r0, #200	; 0xc8
 80022f4:	f7ff ffa2 	bl	800223c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7ff ff9f 	bl	800223c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80022fe:	2010      	movs	r0, #16
 8002300:	f7ff ff9c 	bl	800223c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002304:	2040      	movs	r0, #64	; 0x40
 8002306:	f7ff ff99 	bl	800223c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800230a:	20ff      	movs	r0, #255	; 0xff
 800230c:	f000 fa35 	bl	800277a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002310:	20a1      	movs	r0, #161	; 0xa1
 8002312:	f7ff ff93 	bl	800223c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002316:	20a6      	movs	r0, #166	; 0xa6
 8002318:	f7ff ff90 	bl	800223c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800231c:	20a8      	movs	r0, #168	; 0xa8
 800231e:	f7ff ff8d 	bl	800223c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8002322:	201f      	movs	r0, #31
 8002324:	f7ff ff8a 	bl	800223c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002328:	20a4      	movs	r0, #164	; 0xa4
 800232a:	f7ff ff87 	bl	800223c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800232e:	20d3      	movs	r0, #211	; 0xd3
 8002330:	f7ff ff84 	bl	800223c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002334:	2000      	movs	r0, #0
 8002336:	f7ff ff81 	bl	800223c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800233a:	20d5      	movs	r0, #213	; 0xd5
 800233c:	f7ff ff7e 	bl	800223c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002340:	20f0      	movs	r0, #240	; 0xf0
 8002342:	f7ff ff7b 	bl	800223c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002346:	20d9      	movs	r0, #217	; 0xd9
 8002348:	f7ff ff78 	bl	800223c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800234c:	2022      	movs	r0, #34	; 0x22
 800234e:	f7ff ff75 	bl	800223c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002352:	20da      	movs	r0, #218	; 0xda
 8002354:	f7ff ff72 	bl	800223c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8002358:	2002      	movs	r0, #2
 800235a:	f7ff ff6f 	bl	800223c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800235e:	20db      	movs	r0, #219	; 0xdb
 8002360:	f7ff ff6c 	bl	800223c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002364:	2020      	movs	r0, #32
 8002366:	f7ff ff69 	bl	800223c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800236a:	208d      	movs	r0, #141	; 0x8d
 800236c:	f7ff ff66 	bl	800223c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002370:	2014      	movs	r0, #20
 8002372:	f7ff ff63 	bl	800223c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002376:	2001      	movs	r0, #1
 8002378:	f000 fa12 	bl	80027a0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800237c:	2000      	movs	r0, #0
 800237e:	f000 f80f 	bl	80023a0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002382:	f000 f831 	bl	80023e8 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <ssd1306_Init+0xd0>)
 8002388:	2200      	movs	r2, #0
 800238a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <ssd1306_Init+0xd0>)
 800238e:	2200      	movs	r2, #0
 8002390:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8002392:	4b02      	ldr	r3, [pc, #8]	; (800239c <ssd1306_Init+0xd0>)
 8002394:	2201      	movs	r2, #1
 8002396:	711a      	strb	r2, [r3, #4]
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000804 	.word	0x20000804

080023a0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	e00d      	b.n	80023cc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <ssd1306_Fill+0x1a>
 80023b6:	2100      	movs	r1, #0
 80023b8:	e000      	b.n	80023bc <ssd1306_Fill+0x1c>
 80023ba:	21ff      	movs	r1, #255	; 0xff
 80023bc:	4a09      	ldr	r2, [pc, #36]	; (80023e4 <ssd1306_Fill+0x44>)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4413      	add	r3, r2
 80023c2:	460a      	mov	r2, r1
 80023c4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3301      	adds	r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d2:	d3ed      	bcc.n	80023b0 <ssd1306_Fill+0x10>
    }
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000604 	.word	0x20000604

080023e8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80023ee:	2300      	movs	r3, #0
 80023f0:	71fb      	strb	r3, [r7, #7]
 80023f2:	e016      	b.n	8002422 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	3b50      	subs	r3, #80	; 0x50
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff1e 	bl	800223c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002400:	2000      	movs	r0, #0
 8002402:	f7ff ff1b 	bl	800223c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002406:	2010      	movs	r0, #16
 8002408:	f7ff ff18 	bl	800223c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	01db      	lsls	r3, r3, #7
 8002410:	4a08      	ldr	r2, [pc, #32]	; (8002434 <ssd1306_UpdateScreen+0x4c>)
 8002412:	4413      	add	r3, r2
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff34 	bl	8002284 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	3301      	adds	r3, #1
 8002420:	71fb      	strb	r3, [r7, #7]
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d9e5      	bls.n	80023f4 <ssd1306_UpdateScreen+0xc>
    }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000604 	.word	0x20000604

08002438 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
 8002442:	460b      	mov	r3, r1
 8002444:	71bb      	strb	r3, [r7, #6]
 8002446:	4613      	mov	r3, r2
 8002448:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	2b00      	cmp	r3, #0
 8002450:	db3d      	blt.n	80024ce <ssd1306_DrawPixel+0x96>
 8002452:	79bb      	ldrb	r3, [r7, #6]
 8002454:	2b1f      	cmp	r3, #31
 8002456:	d83a      	bhi.n	80024ce <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8002458:	797b      	ldrb	r3, [r7, #5]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d11a      	bne.n	8002494 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800245e:	79fa      	ldrb	r2, [r7, #7]
 8002460:	79bb      	ldrb	r3, [r7, #6]
 8002462:	08db      	lsrs	r3, r3, #3
 8002464:	b2d8      	uxtb	r0, r3
 8002466:	4603      	mov	r3, r0
 8002468:	01db      	lsls	r3, r3, #7
 800246a:	4413      	add	r3, r2
 800246c:	4a1b      	ldr	r2, [pc, #108]	; (80024dc <ssd1306_DrawPixel+0xa4>)
 800246e:	5cd3      	ldrb	r3, [r2, r3]
 8002470:	b25a      	sxtb	r2, r3
 8002472:	79bb      	ldrb	r3, [r7, #6]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	2101      	movs	r1, #1
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	b25b      	sxtb	r3, r3
 8002480:	4313      	orrs	r3, r2
 8002482:	b259      	sxtb	r1, r3
 8002484:	79fa      	ldrb	r2, [r7, #7]
 8002486:	4603      	mov	r3, r0
 8002488:	01db      	lsls	r3, r3, #7
 800248a:	4413      	add	r3, r2
 800248c:	b2c9      	uxtb	r1, r1
 800248e:	4a13      	ldr	r2, [pc, #76]	; (80024dc <ssd1306_DrawPixel+0xa4>)
 8002490:	54d1      	strb	r1, [r2, r3]
 8002492:	e01d      	b.n	80024d0 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002494:	79fa      	ldrb	r2, [r7, #7]
 8002496:	79bb      	ldrb	r3, [r7, #6]
 8002498:	08db      	lsrs	r3, r3, #3
 800249a:	b2d8      	uxtb	r0, r3
 800249c:	4603      	mov	r3, r0
 800249e:	01db      	lsls	r3, r3, #7
 80024a0:	4413      	add	r3, r2
 80024a2:	4a0e      	ldr	r2, [pc, #56]	; (80024dc <ssd1306_DrawPixel+0xa4>)
 80024a4:	5cd3      	ldrb	r3, [r2, r3]
 80024a6:	b25a      	sxtb	r2, r3
 80024a8:	79bb      	ldrb	r3, [r7, #6]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f303 	lsl.w	r3, r1, r3
 80024b4:	b25b      	sxtb	r3, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	b25b      	sxtb	r3, r3
 80024ba:	4013      	ands	r3, r2
 80024bc:	b259      	sxtb	r1, r3
 80024be:	79fa      	ldrb	r2, [r7, #7]
 80024c0:	4603      	mov	r3, r0
 80024c2:	01db      	lsls	r3, r3, #7
 80024c4:	4413      	add	r3, r2
 80024c6:	b2c9      	uxtb	r1, r1
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <ssd1306_DrawPixel+0xa4>)
 80024ca:	54d1      	strb	r1, [r2, r3]
 80024cc:	e000      	b.n	80024d0 <ssd1306_DrawPixel+0x98>
        return;
 80024ce:	bf00      	nop
    }
}
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000604 	.word	0x20000604

080024e0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b089      	sub	sp, #36	; 0x24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4604      	mov	r4, r0
 80024e8:	1d38      	adds	r0, r7, #4
 80024ea:	e880 0006 	stmia.w	r0, {r1, r2}
 80024ee:	461a      	mov	r2, r3
 80024f0:	4623      	mov	r3, r4
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	4613      	mov	r3, r2
 80024f6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b1f      	cmp	r3, #31
 80024fc:	d902      	bls.n	8002504 <ssd1306_WriteChar+0x24>
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	2b7e      	cmp	r3, #126	; 0x7e
 8002502:	d901      	bls.n	8002508 <ssd1306_WriteChar+0x28>
        return 0;
 8002504:	2300      	movs	r3, #0
 8002506:	e06d      	b.n	80025e4 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002508:	4b38      	ldr	r3, [pc, #224]	; (80025ec <ssd1306_WriteChar+0x10c>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	793b      	ldrb	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	2b80      	cmp	r3, #128	; 0x80
 8002514:	dc06      	bgt.n	8002524 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002516:	4b35      	ldr	r3, [pc, #212]	; (80025ec <ssd1306_WriteChar+0x10c>)
 8002518:	885b      	ldrh	r3, [r3, #2]
 800251a:	461a      	mov	r2, r3
 800251c:	797b      	ldrb	r3, [r7, #5]
 800251e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002520:	2b20      	cmp	r3, #32
 8002522:	dd01      	ble.n	8002528 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002524:	2300      	movs	r3, #0
 8002526:	e05d      	b.n	80025e4 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002528:	2300      	movs	r3, #0
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	e04c      	b.n	80025c8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	3b20      	subs	r3, #32
 8002534:	7979      	ldrb	r1, [r7, #5]
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4619      	mov	r1, r3
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	440b      	add	r3, r1
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4413      	add	r3, r2
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002548:	2300      	movs	r3, #0
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	e034      	b.n	80025b8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d012      	beq.n	8002584 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <ssd1306_WriteChar+0x10c>)
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	4413      	add	r3, r2
 800256a:	b2d8      	uxtb	r0, r3
 800256c:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <ssd1306_WriteChar+0x10c>)
 800256e:	885b      	ldrh	r3, [r3, #2]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	4413      	add	r3, r2
 8002578:	b2db      	uxtb	r3, r3
 800257a:	7bba      	ldrb	r2, [r7, #14]
 800257c:	4619      	mov	r1, r3
 800257e:	f7ff ff5b 	bl	8002438 <ssd1306_DrawPixel>
 8002582:	e016      	b.n	80025b2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002584:	4b19      	ldr	r3, [pc, #100]	; (80025ec <ssd1306_WriteChar+0x10c>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	4413      	add	r3, r2
 8002590:	b2d8      	uxtb	r0, r3
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <ssd1306_WriteChar+0x10c>)
 8002594:	885b      	ldrh	r3, [r3, #2]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	4413      	add	r3, r2
 800259e:	b2d9      	uxtb	r1, r3
 80025a0:	7bbb      	ldrb	r3, [r7, #14]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf0c      	ite	eq
 80025a6:	2301      	moveq	r3, #1
 80025a8:	2300      	movne	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	f7ff ff43 	bl	8002438 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	3301      	adds	r3, #1
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	793b      	ldrb	r3, [r7, #4]
 80025ba:	461a      	mov	r2, r3
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	4293      	cmp	r3, r2
 80025c0:	d3c5      	bcc.n	800254e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3301      	adds	r3, #1
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	797b      	ldrb	r3, [r7, #5]
 80025ca:	461a      	mov	r2, r3
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d3ad      	bcc.n	800252e <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <ssd1306_WriteChar+0x10c>)
 80025d4:	881a      	ldrh	r2, [r3, #0]
 80025d6:	793b      	ldrb	r3, [r7, #4]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	4413      	add	r3, r2
 80025dc:	b29a      	uxth	r2, r3
 80025de:	4b03      	ldr	r3, [pc, #12]	; (80025ec <ssd1306_WriteChar+0x10c>)
 80025e0:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3724      	adds	r7, #36	; 0x24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd90      	pop	{r4, r7, pc}
 80025ec:	20000804 	.word	0x20000804

080025f0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	1d38      	adds	r0, r7, #4
 80025fa:	e880 0006 	stmia.w	r0, {r1, r2}
 80025fe:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002600:	e012      	b.n	8002628 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	7818      	ldrb	r0, [r3, #0]
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	1d3a      	adds	r2, r7, #4
 800260a:	ca06      	ldmia	r2, {r1, r2}
 800260c:	f7ff ff68 	bl	80024e0 <ssd1306_WriteChar>
 8002610:	4603      	mov	r3, r0
 8002612:	461a      	mov	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d002      	beq.n	8002622 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	e008      	b.n	8002634 <ssd1306_WriteString+0x44>
        }
        str++;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	3301      	adds	r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1e8      	bne.n	8002602 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	781b      	ldrb	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	460a      	mov	r2, r1
 8002646:	71fb      	strb	r3, [r7, #7]
 8002648:	4613      	mov	r3, r2
 800264a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	b29a      	uxth	r2, r3
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <ssd1306_SetCursor+0x2c>)
 8002652:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002654:	79bb      	ldrb	r3, [r7, #6]
 8002656:	b29a      	uxth	r2, r3
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <ssd1306_SetCursor+0x2c>)
 800265a:	805a      	strh	r2, [r3, #2]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	20000804 	.word	0x20000804

0800266c <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	4604      	mov	r4, r0
 8002674:	4608      	mov	r0, r1
 8002676:	4611      	mov	r1, r2
 8002678:	461a      	mov	r2, r3
 800267a:	4623      	mov	r3, r4
 800267c:	71fb      	strb	r3, [r7, #7]
 800267e:	4603      	mov	r3, r0
 8002680:	71bb      	strb	r3, [r7, #6]
 8002682:	460b      	mov	r3, r1
 8002684:	717b      	strb	r3, [r7, #5]
 8002686:	4613      	mov	r3, r2
 8002688:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 800268a:	797b      	ldrb	r3, [r7, #5]
 800268c:	425b      	negs	r3, r3
 800268e:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8002694:	797b      	ldrb	r3, [r7, #5]
 8002696:	f1c3 0301 	rsb	r3, r3, #1
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	db65      	blt.n	8002772 <ssd1306_DrawCircle+0x106>
 80026a6:	79bb      	ldrb	r3, [r7, #6]
 80026a8:	2b1f      	cmp	r3, #31
 80026aa:	d862      	bhi.n	8002772 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	79fa      	ldrb	r2, [r7, #7]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	b2d8      	uxtb	r0, r3
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	79bb      	ldrb	r3, [r7, #6]
 80026bc:	4413      	add	r3, r2
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	793a      	ldrb	r2, [r7, #4]
 80026c2:	4619      	mov	r1, r3
 80026c4:	f7ff feb8 	bl	8002438 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	4413      	add	r3, r2
 80026d0:	b2d8      	uxtb	r0, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	79bb      	ldrb	r3, [r7, #6]
 80026d8:	4413      	add	r3, r2
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	793a      	ldrb	r2, [r7, #4]
 80026de:	4619      	mov	r1, r3
 80026e0:	f7ff feaa 	bl	8002438 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	4413      	add	r3, r2
 80026ec:	b2d8      	uxtb	r0, r3
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	79ba      	ldrb	r2, [r7, #6]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	793a      	ldrb	r2, [r7, #4]
 80026fa:	4619      	mov	r1, r3
 80026fc:	f7ff fe9c 	bl	8002438 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	79fa      	ldrb	r2, [r7, #7]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	b2d8      	uxtb	r0, r3
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	79ba      	ldrb	r2, [r7, #6]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	793a      	ldrb	r2, [r7, #4]
 8002716:	4619      	mov	r1, r3
 8002718:	f7ff fe8e 	bl	8002438 <ssd1306_DrawPixel>
        e2 = err;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	429a      	cmp	r2, r3
 8002726:	dc13      	bgt.n	8002750 <ssd1306_DrawCircle+0xe4>
            y++;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	3301      	adds	r3, #1
 800272c:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	3301      	adds	r3, #1
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	425b      	negs	r3, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	429a      	cmp	r2, r3
 8002742:	d105      	bne.n	8002750 <ssd1306_DrawCircle+0xe4>
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	429a      	cmp	r2, r3
 800274a:	dc01      	bgt.n	8002750 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	dd08      	ble.n	800276a <ssd1306_DrawCircle+0xfe>
            x++;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3301      	adds	r3, #1
 800275c:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	3301      	adds	r3, #1
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4413      	add	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b00      	cmp	r3, #0
 800276e:	dd9d      	ble.n	80026ac <ssd1306_DrawCircle+0x40>

    return;
 8002770:	e000      	b.n	8002774 <ssd1306_DrawCircle+0x108>
        return;
 8002772:	bf00      	nop
}
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	bd90      	pop	{r4, r7, pc}

0800277a <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002784:	2381      	movs	r3, #129	; 0x81
 8002786:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fd56 	bl	800223c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fd52 	bl	800223c <ssd1306_WriteCommand>
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80027b0:	23af      	movs	r3, #175	; 0xaf
 80027b2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <ssd1306_SetDisplayOn+0x38>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	715a      	strb	r2, [r3, #5]
 80027ba:	e004      	b.n	80027c6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80027bc:	23ae      	movs	r3, #174	; 0xae
 80027be:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <ssd1306_SetDisplayOn+0x38>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fd37 	bl	800223c <ssd1306_WriteCommand>
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000804 	.word	0x20000804

080027dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <HAL_Init+0x40>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0d      	ldr	r2, [pc, #52]	; (800281c <HAL_Init+0x40>)
 80027e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_Init+0x40>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0a      	ldr	r2, [pc, #40]	; (800281c <HAL_Init+0x40>)
 80027f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_Init+0x40>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a07      	ldr	r2, [pc, #28]	; (800281c <HAL_Init+0x40>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002804:	2003      	movs	r0, #3
 8002806:	f000 fd4f 	bl	80032a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280a:	200f      	movs	r0, #15
 800280c:	f000 f808 	bl	8002820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002810:	f7ff f870 	bl	80018f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40023c00 	.word	0x40023c00

08002820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002828:	4b12      	ldr	r3, [pc, #72]	; (8002874 <HAL_InitTick+0x54>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_InitTick+0x58>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	4619      	mov	r1, r3
 8002832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002836:	fbb3 f3f1 	udiv	r3, r3, r1
 800283a:	fbb2 f3f3 	udiv	r3, r2, r3
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fd67 	bl	8003312 <HAL_SYSTICK_Config>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e00e      	b.n	800286c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b0f      	cmp	r3, #15
 8002852:	d80a      	bhi.n	800286a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002854:	2200      	movs	r2, #0
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	f04f 30ff 	mov.w	r0, #4294967295
 800285c:	f000 fd2f 	bl	80032be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002860:	4a06      	ldr	r2, [pc, #24]	; (800287c <HAL_InitTick+0x5c>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e000      	b.n	800286c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000000 	.word	0x20000000
 8002878:	20000028 	.word	0x20000028
 800287c:	20000024 	.word	0x20000024

08002880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_IncTick+0x20>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_IncTick+0x24>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4413      	add	r3, r2
 8002890:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <HAL_IncTick+0x24>)
 8002892:	6013      	str	r3, [r2, #0]
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000028 	.word	0x20000028
 80028a4:	2000080c 	.word	0x2000080c

080028a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return uwTick;
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <HAL_GetTick+0x14>)
 80028ae:	681b      	ldr	r3, [r3, #0]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	2000080c 	.word	0x2000080c

080028c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c8:	f7ff ffee 	bl	80028a8 <HAL_GetTick>
 80028cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d8:	d005      	beq.n	80028e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028da:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <HAL_Delay+0x44>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028e6:	bf00      	nop
 80028e8:	f7ff ffde 	bl	80028a8 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d8f7      	bhi.n	80028e8 <HAL_Delay+0x28>
  {
  }
}
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000028 	.word	0x20000028

08002908 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e033      	b.n	8002986 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff f80c 	bl	8001944 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	2b00      	cmp	r3, #0
 8002944:	d118      	bne.n	8002978 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800294e:	f023 0302 	bic.w	r3, r3, #2
 8002952:	f043 0202 	orr.w	r2, r3, #2
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fad8 	bl	8002f10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f023 0303 	bic.w	r3, r3, #3
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
 8002976:	e001      	b.n	800297c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002984:	7bfb      	ldrb	r3, [r7, #15]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_Start+0x1a>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e0b2      	b.n	8002b10 <HAL_ADC_Start+0x180>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d018      	beq.n	80029f2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029d0:	4b52      	ldr	r3, [pc, #328]	; (8002b1c <HAL_ADC_Start+0x18c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a52      	ldr	r2, [pc, #328]	; (8002b20 <HAL_ADC_Start+0x190>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0c9a      	lsrs	r2, r3, #18
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80029e4:	e002      	b.n	80029ec <HAL_ADC_Start+0x5c>
    {
      counter--;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f9      	bne.n	80029e6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d17a      	bne.n	8002af6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a3e:	d106      	bne.n	8002a4e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a44:	f023 0206 	bic.w	r2, r3, #6
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	645a      	str	r2, [r3, #68]	; 0x44
 8002a4c:	e002      	b.n	8002a54 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a5c:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <HAL_ADC_Start+0x194>)
 8002a5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a68:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d12a      	bne.n	8002acc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a2b      	ldr	r2, [pc, #172]	; (8002b28 <HAL_ADC_Start+0x198>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d015      	beq.n	8002aac <HAL_ADC_Start+0x11c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a29      	ldr	r2, [pc, #164]	; (8002b2c <HAL_ADC_Start+0x19c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d105      	bne.n	8002a96 <HAL_ADC_Start+0x106>
 8002a8a:	4b26      	ldr	r3, [pc, #152]	; (8002b24 <HAL_ADC_Start+0x194>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a25      	ldr	r2, [pc, #148]	; (8002b30 <HAL_ADC_Start+0x1a0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d136      	bne.n	8002b0e <HAL_ADC_Start+0x17e>
 8002aa0:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <HAL_ADC_Start+0x194>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d130      	bne.n	8002b0e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d129      	bne.n	8002b0e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	e020      	b.n	8002b0e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <HAL_ADC_Start+0x198>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d11b      	bne.n	8002b0e <HAL_ADC_Start+0x17e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d114      	bne.n	8002b0e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	e00b      	b.n	8002b0e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f043 0210 	orr.w	r2, r3, #16
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	f043 0201 	orr.w	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	431bde83 	.word	0x431bde83
 8002b24:	40012300 	.word	0x40012300
 8002b28:	40012000 	.word	0x40012000
 8002b2c:	40012100 	.word	0x40012100
 8002b30:	40012200 	.word	0x40012200

08002b34 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_ADC_Stop+0x16>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e021      	b.n	8002b8e <HAL_ADC_Stop+0x5a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0201 	bic.w	r2, r2, #1
 8002b60:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb6:	d113      	bne.n	8002be0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc6:	d10b      	bne.n	8002be0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	f043 0220 	orr.w	r2, r3, #32
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e063      	b.n	8002ca8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002be0:	f7ff fe62 	bl	80028a8 <HAL_GetTick>
 8002be4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002be6:	e021      	b.n	8002c2c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bee:	d01d      	beq.n	8002c2c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <HAL_ADC_PollForConversion+0x6c>
 8002bf6:	f7ff fe57 	bl	80028a8 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d212      	bcs.n	8002c2c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d00b      	beq.n	8002c2c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f043 0204 	orr.w	r2, r3, #4
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e03d      	b.n	8002ca8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d1d6      	bne.n	8002be8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f06f 0212 	mvn.w	r2, #18
 8002c42:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d123      	bne.n	8002ca6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11f      	bne.n	8002ca6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d006      	beq.n	8002c82 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d111      	bne.n	8002ca6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d105      	bne.n	8002ca6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f043 0201 	orr.w	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x1c>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e105      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x228>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b09      	cmp	r3, #9
 8002cf6:	d925      	bls.n	8002d44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68d9      	ldr	r1, [r3, #12]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3b1e      	subs	r3, #30
 8002d0e:	2207      	movs	r2, #7
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43da      	mvns	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	400a      	ands	r2, r1
 8002d1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68d9      	ldr	r1, [r3, #12]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	4603      	mov	r3, r0
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	4403      	add	r3, r0
 8002d36:	3b1e      	subs	r3, #30
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	e022      	b.n	8002d8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6919      	ldr	r1, [r3, #16]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	4613      	mov	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4413      	add	r3, r2
 8002d58:	2207      	movs	r2, #7
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	400a      	ands	r2, r1
 8002d66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6919      	ldr	r1, [r3, #16]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	4618      	mov	r0, r3
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4403      	add	r3, r0
 8002d80:	409a      	lsls	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b06      	cmp	r3, #6
 8002d90:	d824      	bhi.n	8002ddc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	3b05      	subs	r3, #5
 8002da4:	221f      	movs	r2, #31
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43da      	mvns	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	400a      	ands	r2, r1
 8002db2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	3b05      	subs	r3, #5
 8002dce:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dda:	e04c      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b0c      	cmp	r3, #12
 8002de2:	d824      	bhi.n	8002e2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	3b23      	subs	r3, #35	; 0x23
 8002df6:	221f      	movs	r2, #31
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43da      	mvns	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	400a      	ands	r2, r1
 8002e04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4618      	mov	r0, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3b23      	subs	r3, #35	; 0x23
 8002e20:	fa00 f203 	lsl.w	r2, r0, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e2c:	e023      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3b41      	subs	r3, #65	; 0x41
 8002e40:	221f      	movs	r2, #31
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43da      	mvns	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	400a      	ands	r2, r1
 8002e4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	3b41      	subs	r3, #65	; 0x41
 8002e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e76:	4b22      	ldr	r3, [pc, #136]	; (8002f00 <HAL_ADC_ConfigChannel+0x234>)
 8002e78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a21      	ldr	r2, [pc, #132]	; (8002f04 <HAL_ADC_ConfigChannel+0x238>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d109      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x1cc>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b12      	cmp	r3, #18
 8002e8a:	d105      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a19      	ldr	r2, [pc, #100]	; (8002f04 <HAL_ADC_ConfigChannel+0x238>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d123      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x21e>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b10      	cmp	r3, #16
 8002ea8:	d003      	beq.n	8002eb2 <HAL_ADC_ConfigChannel+0x1e6>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b11      	cmp	r3, #17
 8002eb0:	d11b      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d111      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <HAL_ADC_ConfigChannel+0x23c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a10      	ldr	r2, [pc, #64]	; (8002f0c <HAL_ADC_ConfigChannel+0x240>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	0c9a      	lsrs	r2, r3, #18
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002edc:	e002      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f9      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	40012300 	.word	0x40012300
 8002f04:	40012000 	.word	0x40012000
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	431bde83 	.word	0x431bde83

08002f10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f18:	4b79      	ldr	r3, [pc, #484]	; (8003100 <ADC_Init+0x1f0>)
 8002f1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	021a      	lsls	r2, r3, #8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6899      	ldr	r1, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa2:	4a58      	ldr	r2, [pc, #352]	; (8003104 <ADC_Init+0x1f4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d022      	beq.n	8002fee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6899      	ldr	r1, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6899      	ldr	r1, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	e00f      	b.n	800300e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ffc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800300c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0202 	bic.w	r2, r2, #2
 800301c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6899      	ldr	r1, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	7e1b      	ldrb	r3, [r3, #24]
 8003028:	005a      	lsls	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01b      	beq.n	8003074 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800304a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800305a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6859      	ldr	r1, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	3b01      	subs	r3, #1
 8003068:	035a      	lsls	r2, r3, #13
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	e007      	b.n	8003084 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003082:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003092:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	3b01      	subs	r3, #1
 80030a0:	051a      	lsls	r2, r3, #20
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6899      	ldr	r1, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030c6:	025a      	lsls	r2, r3, #9
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6899      	ldr	r1, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	029a      	lsls	r2, r3, #10
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	609a      	str	r2, [r3, #8]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40012300 	.word	0x40012300
 8003104:	0f000001 	.word	0x0f000001

08003108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003124:	4013      	ands	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313a:	4a04      	ldr	r2, [pc, #16]	; (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	60d3      	str	r3, [r2, #12]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <__NVIC_GetPriorityGrouping+0x18>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	f003 0307 	and.w	r3, r3, #7
}
 800315e:	4618      	mov	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	2b00      	cmp	r3, #0
 800317c:	db0b      	blt.n	8003196 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	f003 021f 	and.w	r2, r3, #31
 8003184:	4907      	ldr	r1, [pc, #28]	; (80031a4 <__NVIC_EnableIRQ+0x38>)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	2001      	movs	r0, #1
 800318e:	fa00 f202 	lsl.w	r2, r0, r2
 8003192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	e000e100 	.word	0xe000e100

080031a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	db0a      	blt.n	80031d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	490c      	ldr	r1, [pc, #48]	; (80031f4 <__NVIC_SetPriority+0x4c>)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	0112      	lsls	r2, r2, #4
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	440b      	add	r3, r1
 80031cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d0:	e00a      	b.n	80031e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4908      	ldr	r1, [pc, #32]	; (80031f8 <__NVIC_SetPriority+0x50>)
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	3b04      	subs	r3, #4
 80031e0:	0112      	lsls	r2, r2, #4
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	440b      	add	r3, r1
 80031e6:	761a      	strb	r2, [r3, #24]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000e100 	.word	0xe000e100
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f1c3 0307 	rsb	r3, r3, #7
 8003216:	2b04      	cmp	r3, #4
 8003218:	bf28      	it	cs
 800321a:	2304      	movcs	r3, #4
 800321c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3304      	adds	r3, #4
 8003222:	2b06      	cmp	r3, #6
 8003224:	d902      	bls.n	800322c <NVIC_EncodePriority+0x30>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3b03      	subs	r3, #3
 800322a:	e000      	b.n	800322e <NVIC_EncodePriority+0x32>
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	f04f 32ff 	mov.w	r2, #4294967295
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43da      	mvns	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	401a      	ands	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003244:	f04f 31ff 	mov.w	r1, #4294967295
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43d9      	mvns	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	4313      	orrs	r3, r2
         );
}
 8003256:	4618      	mov	r0, r3
 8003258:	3724      	adds	r7, #36	; 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3b01      	subs	r3, #1
 8003270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003274:	d301      	bcc.n	800327a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003276:	2301      	movs	r3, #1
 8003278:	e00f      	b.n	800329a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800327a:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <SysTick_Config+0x40>)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3b01      	subs	r3, #1
 8003280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003282:	210f      	movs	r1, #15
 8003284:	f04f 30ff 	mov.w	r0, #4294967295
 8003288:	f7ff ff8e 	bl	80031a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <SysTick_Config+0x40>)
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003292:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <SysTick_Config+0x40>)
 8003294:	2207      	movs	r2, #7
 8003296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	e000e010 	.word	0xe000e010

080032a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ff29 	bl	8003108 <__NVIC_SetPriorityGrouping>
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	4603      	mov	r3, r0
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032d0:	f7ff ff3e 	bl	8003150 <__NVIC_GetPriorityGrouping>
 80032d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	6978      	ldr	r0, [r7, #20]
 80032dc:	f7ff ff8e 	bl	80031fc <NVIC_EncodePriority>
 80032e0:	4602      	mov	r2, r0
 80032e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff5d 	bl	80031a8 <__NVIC_SetPriority>
}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff31 	bl	800316c <__NVIC_EnableIRQ>
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ffa2 	bl	8003264 <SysTick_Config>
 8003320:	4603      	mov	r3, r0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003338:	f7ff fab6 	bl	80028a8 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e099      	b.n	800347c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0201 	bic.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003368:	e00f      	b.n	800338a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800336a:	f7ff fa9d 	bl	80028a8 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b05      	cmp	r3, #5
 8003376:	d908      	bls.n	800338a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2203      	movs	r2, #3
 8003382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e078      	b.n	800347c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1e8      	bne.n	800336a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	4b38      	ldr	r3, [pc, #224]	; (8003484 <HAL_DMA_Init+0x158>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d107      	bne.n	80033f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	4313      	orrs	r3, r2
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 0307 	bic.w	r3, r3, #7
 800340a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	2b04      	cmp	r3, #4
 800341c:	d117      	bne.n	800344e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00e      	beq.n	800344e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f9e9 	bl	8003808 <DMA_CheckFifoParam>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2240      	movs	r2, #64	; 0x40
 8003440:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800344a:	2301      	movs	r3, #1
 800344c:	e016      	b.n	800347c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f9a0 	bl	800379c <DMA_CalcBaseAndBitshift>
 800345c:	4603      	mov	r3, r0
 800345e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003464:	223f      	movs	r2, #63	; 0x3f
 8003466:	409a      	lsls	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	f010803f 	.word	0xf010803f

08003488 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003494:	4b8e      	ldr	r3, [pc, #568]	; (80036d0 <HAL_DMA_IRQHandler+0x248>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a8e      	ldr	r2, [pc, #568]	; (80036d4 <HAL_DMA_IRQHandler+0x24c>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	0a9b      	lsrs	r3, r3, #10
 80034a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b2:	2208      	movs	r2, #8
 80034b4:	409a      	lsls	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d01a      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d013      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0204 	bic.w	r2, r2, #4
 80034da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e0:	2208      	movs	r2, #8
 80034e2:	409a      	lsls	r2, r3
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ec:	f043 0201 	orr.w	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f8:	2201      	movs	r2, #1
 80034fa:	409a      	lsls	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d012      	beq.n	800352a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00b      	beq.n	800352a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003516:	2201      	movs	r2, #1
 8003518:	409a      	lsls	r2, r3
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	f043 0202 	orr.w	r2, r3, #2
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352e:	2204      	movs	r2, #4
 8003530:	409a      	lsls	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4013      	ands	r3, r2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d012      	beq.n	8003560 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00b      	beq.n	8003560 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354c:	2204      	movs	r2, #4
 800354e:	409a      	lsls	r2, r3
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	f043 0204 	orr.w	r2, r3, #4
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	2210      	movs	r2, #16
 8003566:	409a      	lsls	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d043      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d03c      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003582:	2210      	movs	r2, #16
 8003584:	409a      	lsls	r2, r3
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d018      	beq.n	80035ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d108      	bne.n	80035b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d024      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	4798      	blx	r3
 80035b6:	e01f      	b.n	80035f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01b      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4798      	blx	r3
 80035c8:	e016      	b.n	80035f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d107      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0208 	bic.w	r2, r2, #8
 80035e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fc:	2220      	movs	r2, #32
 80035fe:	409a      	lsls	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4013      	ands	r3, r2
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 808f 	beq.w	8003728 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8087 	beq.w	8003728 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361e:	2220      	movs	r2, #32
 8003620:	409a      	lsls	r2, r3
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b05      	cmp	r3, #5
 8003630:	d136      	bne.n	80036a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0216 	bic.w	r2, r2, #22
 8003640:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695a      	ldr	r2, [r3, #20]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003650:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d103      	bne.n	8003662 <HAL_DMA_IRQHandler+0x1da>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0208 	bic.w	r2, r2, #8
 8003670:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003676:	223f      	movs	r2, #63	; 0x3f
 8003678:	409a      	lsls	r2, r3
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003692:	2b00      	cmp	r3, #0
 8003694:	d07e      	beq.n	8003794 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4798      	blx	r3
        }
        return;
 800369e:	e079      	b.n	8003794 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01d      	beq.n	80036ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10d      	bne.n	80036d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d031      	beq.n	8003728 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4798      	blx	r3
 80036cc:	e02c      	b.n	8003728 <HAL_DMA_IRQHandler+0x2a0>
 80036ce:	bf00      	nop
 80036d0:	20000000 	.word	0x20000000
 80036d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d023      	beq.n	8003728 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	4798      	blx	r3
 80036e8:	e01e      	b.n	8003728 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10f      	bne.n	8003718 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0210 	bic.w	r2, r2, #16
 8003706:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	2b00      	cmp	r3, #0
 800372e:	d032      	beq.n	8003796 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d022      	beq.n	8003782 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2205      	movs	r2, #5
 8003740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0201 	bic.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	3301      	adds	r3, #1
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	429a      	cmp	r2, r3
 800375e:	d307      	bcc.n	8003770 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f2      	bne.n	8003754 <HAL_DMA_IRQHandler+0x2cc>
 800376e:	e000      	b.n	8003772 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003770:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	4798      	blx	r3
 8003792:	e000      	b.n	8003796 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003794:	bf00      	nop
    }
  }
}
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	3b10      	subs	r3, #16
 80037ac:	4a14      	ldr	r2, [pc, #80]	; (8003800 <DMA_CalcBaseAndBitshift+0x64>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037b6:	4a13      	ldr	r2, [pc, #76]	; (8003804 <DMA_CalcBaseAndBitshift+0x68>)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4413      	add	r3, r2
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d909      	bls.n	80037de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037d2:	f023 0303 	bic.w	r3, r3, #3
 80037d6:	1d1a      	adds	r2, r3, #4
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	659a      	str	r2, [r3, #88]	; 0x58
 80037dc:	e007      	b.n	80037ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037e6:	f023 0303 	bic.w	r3, r3, #3
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	aaaaaaab 	.word	0xaaaaaaab
 8003804:	0800e5ac 	.word	0x0800e5ac

08003808 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d11f      	bne.n	8003862 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b03      	cmp	r3, #3
 8003826:	d856      	bhi.n	80038d6 <DMA_CheckFifoParam+0xce>
 8003828:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <DMA_CheckFifoParam+0x28>)
 800382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382e:	bf00      	nop
 8003830:	08003841 	.word	0x08003841
 8003834:	08003853 	.word	0x08003853
 8003838:	08003841 	.word	0x08003841
 800383c:	080038d7 	.word	0x080038d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d046      	beq.n	80038da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003850:	e043      	b.n	80038da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800385a:	d140      	bne.n	80038de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003860:	e03d      	b.n	80038de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800386a:	d121      	bne.n	80038b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b03      	cmp	r3, #3
 8003870:	d837      	bhi.n	80038e2 <DMA_CheckFifoParam+0xda>
 8003872:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <DMA_CheckFifoParam+0x70>)
 8003874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003878:	08003889 	.word	0x08003889
 800387c:	0800388f 	.word	0x0800388f
 8003880:	08003889 	.word	0x08003889
 8003884:	080038a1 	.word	0x080038a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
      break;
 800388c:	e030      	b.n	80038f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d025      	beq.n	80038e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800389e:	e022      	b.n	80038e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038a8:	d11f      	bne.n	80038ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038ae:	e01c      	b.n	80038ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d903      	bls.n	80038be <DMA_CheckFifoParam+0xb6>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d003      	beq.n	80038c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038bc:	e018      	b.n	80038f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	73fb      	strb	r3, [r7, #15]
      break;
 80038c2:	e015      	b.n	80038f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00e      	beq.n	80038ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
      break;
 80038d4:	e00b      	b.n	80038ee <DMA_CheckFifoParam+0xe6>
      break;
 80038d6:	bf00      	nop
 80038d8:	e00a      	b.n	80038f0 <DMA_CheckFifoParam+0xe8>
      break;
 80038da:	bf00      	nop
 80038dc:	e008      	b.n	80038f0 <DMA_CheckFifoParam+0xe8>
      break;
 80038de:	bf00      	nop
 80038e0:	e006      	b.n	80038f0 <DMA_CheckFifoParam+0xe8>
      break;
 80038e2:	bf00      	nop
 80038e4:	e004      	b.n	80038f0 <DMA_CheckFifoParam+0xe8>
      break;
 80038e6:	bf00      	nop
 80038e8:	e002      	b.n	80038f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80038ea:	bf00      	nop
 80038ec:	e000      	b.n	80038f0 <DMA_CheckFifoParam+0xe8>
      break;
 80038ee:	bf00      	nop
    }
  } 
  
  return status; 
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop

08003900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003900:	b480      	push	{r7}
 8003902:	b089      	sub	sp, #36	; 0x24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	e16b      	b.n	8003bf4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800391c:	2201      	movs	r2, #1
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4013      	ands	r3, r2
 800392e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	429a      	cmp	r2, r3
 8003936:	f040 815a 	bne.w	8003bee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b01      	cmp	r3, #1
 8003944:	d005      	beq.n	8003952 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800394e:	2b02      	cmp	r3, #2
 8003950:	d130      	bne.n	80039b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	2203      	movs	r2, #3
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43db      	mvns	r3, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003988:	2201      	movs	r2, #1
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4013      	ands	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 0201 	and.w	r2, r3, #1
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d017      	beq.n	80039f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	2203      	movs	r2, #3
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d123      	bne.n	8003a44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	08da      	lsrs	r2, r3, #3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3208      	adds	r2, #8
 8003a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	220f      	movs	r2, #15
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	08da      	lsrs	r2, r3, #3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3208      	adds	r2, #8
 8003a3e:	69b9      	ldr	r1, [r7, #24]
 8003a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	2203      	movs	r2, #3
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 0203 	and.w	r2, r3, #3
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 80b4 	beq.w	8003bee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	4b60      	ldr	r3, [pc, #384]	; (8003c0c <HAL_GPIO_Init+0x30c>)
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	4a5f      	ldr	r2, [pc, #380]	; (8003c0c <HAL_GPIO_Init+0x30c>)
 8003a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a94:	6453      	str	r3, [r2, #68]	; 0x44
 8003a96:	4b5d      	ldr	r3, [pc, #372]	; (8003c0c <HAL_GPIO_Init+0x30c>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aa2:	4a5b      	ldr	r2, [pc, #364]	; (8003c10 <HAL_GPIO_Init+0x310>)
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	089b      	lsrs	r3, r3, #2
 8003aa8:	3302      	adds	r3, #2
 8003aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	220f      	movs	r2, #15
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a52      	ldr	r2, [pc, #328]	; (8003c14 <HAL_GPIO_Init+0x314>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d02b      	beq.n	8003b26 <HAL_GPIO_Init+0x226>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a51      	ldr	r2, [pc, #324]	; (8003c18 <HAL_GPIO_Init+0x318>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d025      	beq.n	8003b22 <HAL_GPIO_Init+0x222>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a50      	ldr	r2, [pc, #320]	; (8003c1c <HAL_GPIO_Init+0x31c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01f      	beq.n	8003b1e <HAL_GPIO_Init+0x21e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a4f      	ldr	r2, [pc, #316]	; (8003c20 <HAL_GPIO_Init+0x320>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d019      	beq.n	8003b1a <HAL_GPIO_Init+0x21a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a4e      	ldr	r2, [pc, #312]	; (8003c24 <HAL_GPIO_Init+0x324>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <HAL_GPIO_Init+0x216>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a4d      	ldr	r2, [pc, #308]	; (8003c28 <HAL_GPIO_Init+0x328>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00d      	beq.n	8003b12 <HAL_GPIO_Init+0x212>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a4c      	ldr	r2, [pc, #304]	; (8003c2c <HAL_GPIO_Init+0x32c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d007      	beq.n	8003b0e <HAL_GPIO_Init+0x20e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a4b      	ldr	r2, [pc, #300]	; (8003c30 <HAL_GPIO_Init+0x330>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d101      	bne.n	8003b0a <HAL_GPIO_Init+0x20a>
 8003b06:	2307      	movs	r3, #7
 8003b08:	e00e      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	e00c      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b0e:	2306      	movs	r3, #6
 8003b10:	e00a      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b12:	2305      	movs	r3, #5
 8003b14:	e008      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b16:	2304      	movs	r3, #4
 8003b18:	e006      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e004      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e002      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b26:	2300      	movs	r3, #0
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	f002 0203 	and.w	r2, r2, #3
 8003b2e:	0092      	lsls	r2, r2, #2
 8003b30:	4093      	lsls	r3, r2
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b38:	4935      	ldr	r1, [pc, #212]	; (8003c10 <HAL_GPIO_Init+0x310>)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	089b      	lsrs	r3, r3, #2
 8003b3e:	3302      	adds	r3, #2
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b46:	4b3b      	ldr	r3, [pc, #236]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b6a:	4a32      	ldr	r2, [pc, #200]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b70:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b94:	4a27      	ldr	r2, [pc, #156]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b9a:	4b26      	ldr	r3, [pc, #152]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bbe:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003be8:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	2b0f      	cmp	r3, #15
 8003bf8:	f67f ae90 	bls.w	800391c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	3724      	adds	r7, #36	; 0x24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	40013800 	.word	0x40013800
 8003c14:	40020000 	.word	0x40020000
 8003c18:	40020400 	.word	0x40020400
 8003c1c:	40020800 	.word	0x40020800
 8003c20:	40020c00 	.word	0x40020c00
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40021400 	.word	0x40021400
 8003c2c:	40021800 	.word	0x40021800
 8003c30:	40021c00 	.word	0x40021c00
 8003c34:	40013c00 	.word	0x40013c00

08003c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	807b      	strh	r3, [r7, #2]
 8003c44:	4613      	mov	r3, r2
 8003c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c48:	787b      	ldrb	r3, [r7, #1]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c4e:	887a      	ldrh	r2, [r7, #2]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c54:	e003      	b.n	8003c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c56:	887b      	ldrh	r3, [r7, #2]
 8003c58:	041a      	lsls	r2, r3, #16
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	619a      	str	r2, [r3, #24]
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c7c:	887a      	ldrh	r2, [r7, #2]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4013      	ands	r3, r2
 8003c82:	041a      	lsls	r2, r3, #16
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	43d9      	mvns	r1, r3
 8003c88:	887b      	ldrh	r3, [r7, #2]
 8003c8a:	400b      	ands	r3, r1
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	619a      	str	r2, [r3, #24]
}
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003caa:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cac:	695a      	ldr	r2, [r3, #20]
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d006      	beq.n	8003cc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cb6:	4a05      	ldr	r2, [pc, #20]	; (8003ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cb8:	88fb      	ldrh	r3, [r7, #6]
 8003cba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 f806 	bl	8003cd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40013c00 	.word	0x40013c00

08003cd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
	...

08003ce8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e267      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d075      	beq.n	8003df2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d06:	4b88      	ldr	r3, [pc, #544]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d00c      	beq.n	8003d2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d12:	4b85      	ldr	r3, [pc, #532]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d112      	bne.n	8003d44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1e:	4b82      	ldr	r3, [pc, #520]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d2a:	d10b      	bne.n	8003d44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	4b7e      	ldr	r3, [pc, #504]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d05b      	beq.n	8003df0 <HAL_RCC_OscConfig+0x108>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d157      	bne.n	8003df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e242      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4c:	d106      	bne.n	8003d5c <HAL_RCC_OscConfig+0x74>
 8003d4e:	4b76      	ldr	r3, [pc, #472]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a75      	ldr	r2, [pc, #468]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e01d      	b.n	8003d98 <HAL_RCC_OscConfig+0xb0>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x98>
 8003d66:	4b70      	ldr	r3, [pc, #448]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a6f      	ldr	r2, [pc, #444]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b6d      	ldr	r3, [pc, #436]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a6c      	ldr	r2, [pc, #432]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e00b      	b.n	8003d98 <HAL_RCC_OscConfig+0xb0>
 8003d80:	4b69      	ldr	r3, [pc, #420]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a68      	ldr	r2, [pc, #416]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	4b66      	ldr	r3, [pc, #408]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a65      	ldr	r2, [pc, #404]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d013      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da0:	f7fe fd82 	bl	80028a8 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fe fd7e 	bl	80028a8 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	; 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e207      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	4b5b      	ldr	r3, [pc, #364]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0xc0>
 8003dc6:	e014      	b.n	8003df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7fe fd6e 	bl	80028a8 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fe fd6a 	bl	80028a8 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	; 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e1f3      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	4b51      	ldr	r3, [pc, #324]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0xe8>
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d063      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dfe:	4b4a      	ldr	r3, [pc, #296]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0a:	4b47      	ldr	r3, [pc, #284]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d11c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e16:	4b44      	ldr	r3, [pc, #272]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d116      	bne.n	8003e50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e22:	4b41      	ldr	r3, [pc, #260]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_RCC_OscConfig+0x152>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e1c7      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3a:	4b3b      	ldr	r3, [pc, #236]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	4937      	ldr	r1, [pc, #220]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4e:	e03a      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d020      	beq.n	8003e9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e58:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <HAL_RCC_OscConfig+0x244>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5e:	f7fe fd23 	bl	80028a8 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e66:	f7fe fd1f 	bl	80028a8 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e1a8      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e78:	4b2b      	ldr	r3, [pc, #172]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e84:	4b28      	ldr	r3, [pc, #160]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	4925      	ldr	r1, [pc, #148]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	600b      	str	r3, [r1, #0]
 8003e98:	e015      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e9a:	4b24      	ldr	r3, [pc, #144]	; (8003f2c <HAL_RCC_OscConfig+0x244>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fe fd02 	bl	80028a8 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea8:	f7fe fcfe 	bl	80028a8 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e187      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eba:	4b1b      	ldr	r3, [pc, #108]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d036      	beq.n	8003f40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d016      	beq.n	8003f08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <HAL_RCC_OscConfig+0x248>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fe fce2 	bl	80028a8 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ee8:	f7fe fcde 	bl	80028a8 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e167      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efa:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f0      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x200>
 8003f06:	e01b      	b.n	8003f40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f08:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <HAL_RCC_OscConfig+0x248>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0e:	f7fe fccb 	bl	80028a8 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f14:	e00e      	b.n	8003f34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f16:	f7fe fcc7 	bl	80028a8 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d907      	bls.n	8003f34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e150      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	42470000 	.word	0x42470000
 8003f30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f34:	4b88      	ldr	r3, [pc, #544]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1ea      	bne.n	8003f16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8097 	beq.w	800407c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f52:	4b81      	ldr	r3, [pc, #516]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10f      	bne.n	8003f7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60bb      	str	r3, [r7, #8]
 8003f62:	4b7d      	ldr	r3, [pc, #500]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	4a7c      	ldr	r2, [pc, #496]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6e:	4b7a      	ldr	r3, [pc, #488]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7e:	4b77      	ldr	r3, [pc, #476]	; (800415c <HAL_RCC_OscConfig+0x474>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d118      	bne.n	8003fbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f8a:	4b74      	ldr	r3, [pc, #464]	; (800415c <HAL_RCC_OscConfig+0x474>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a73      	ldr	r2, [pc, #460]	; (800415c <HAL_RCC_OscConfig+0x474>)
 8003f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f96:	f7fe fc87 	bl	80028a8 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f9e:	f7fe fc83 	bl	80028a8 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e10c      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	4b6a      	ldr	r3, [pc, #424]	; (800415c <HAL_RCC_OscConfig+0x474>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x2ea>
 8003fc4:	4b64      	ldr	r3, [pc, #400]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	4a63      	ldr	r2, [pc, #396]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd0:	e01c      	b.n	800400c <HAL_RCC_OscConfig+0x324>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b05      	cmp	r3, #5
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x30c>
 8003fda:	4b5f      	ldr	r3, [pc, #380]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	4a5e      	ldr	r2, [pc, #376]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fe0:	f043 0304 	orr.w	r3, r3, #4
 8003fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe6:	4b5c      	ldr	r3, [pc, #368]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fea:	4a5b      	ldr	r2, [pc, #364]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff2:	e00b      	b.n	800400c <HAL_RCC_OscConfig+0x324>
 8003ff4:	4b58      	ldr	r3, [pc, #352]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	4a57      	ldr	r2, [pc, #348]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8004000:	4b55      	ldr	r3, [pc, #340]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	4a54      	ldr	r2, [pc, #336]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8004006:	f023 0304 	bic.w	r3, r3, #4
 800400a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d015      	beq.n	8004040 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004014:	f7fe fc48 	bl	80028a8 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401a:	e00a      	b.n	8004032 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800401c:	f7fe fc44 	bl	80028a8 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f241 3288 	movw	r2, #5000	; 0x1388
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e0cb      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004032:	4b49      	ldr	r3, [pc, #292]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0ee      	beq.n	800401c <HAL_RCC_OscConfig+0x334>
 800403e:	e014      	b.n	800406a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004040:	f7fe fc32 	bl	80028a8 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004046:	e00a      	b.n	800405e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004048:	f7fe fc2e 	bl	80028a8 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	; 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e0b5      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405e:	4b3e      	ldr	r3, [pc, #248]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1ee      	bne.n	8004048 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800406a:	7dfb      	ldrb	r3, [r7, #23]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d105      	bne.n	800407c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004070:	4b39      	ldr	r3, [pc, #228]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	4a38      	ldr	r2, [pc, #224]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8004076:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80a1 	beq.w	80041c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004086:	4b34      	ldr	r3, [pc, #208]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b08      	cmp	r3, #8
 8004090:	d05c      	beq.n	800414c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d141      	bne.n	800411e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409a:	4b31      	ldr	r3, [pc, #196]	; (8004160 <HAL_RCC_OscConfig+0x478>)
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a0:	f7fe fc02 	bl	80028a8 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a8:	f7fe fbfe 	bl	80028a8 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e087      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ba:	4b27      	ldr	r3, [pc, #156]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f0      	bne.n	80040a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69da      	ldr	r2, [r3, #28]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	019b      	lsls	r3, r3, #6
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	3b01      	subs	r3, #1
 80040e0:	041b      	lsls	r3, r3, #16
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	061b      	lsls	r3, r3, #24
 80040ea:	491b      	ldr	r1, [pc, #108]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040f0:	4b1b      	ldr	r3, [pc, #108]	; (8004160 <HAL_RCC_OscConfig+0x478>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f6:	f7fe fbd7 	bl	80028a8 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040fe:	f7fe fbd3 	bl	80028a8 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e05c      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004110:	4b11      	ldr	r3, [pc, #68]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0f0      	beq.n	80040fe <HAL_RCC_OscConfig+0x416>
 800411c:	e054      	b.n	80041c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411e:	4b10      	ldr	r3, [pc, #64]	; (8004160 <HAL_RCC_OscConfig+0x478>)
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004124:	f7fe fbc0 	bl	80028a8 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800412c:	f7fe fbbc 	bl	80028a8 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e045      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_RCC_OscConfig+0x470>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x444>
 800414a:	e03d      	b.n	80041c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d107      	bne.n	8004164 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e038      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
 8004158:	40023800 	.word	0x40023800
 800415c:	40007000 	.word	0x40007000
 8004160:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004164:	4b1b      	ldr	r3, [pc, #108]	; (80041d4 <HAL_RCC_OscConfig+0x4ec>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d028      	beq.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800417c:	429a      	cmp	r2, r3
 800417e:	d121      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418a:	429a      	cmp	r2, r3
 800418c:	d11a      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004194:	4013      	ands	r3, r2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800419a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800419c:	4293      	cmp	r3, r2
 800419e:	d111      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	085b      	lsrs	r3, r3, #1
 80041ac:	3b01      	subs	r3, #1
 80041ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40023800 	.word	0x40023800

080041d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0cc      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041ec:	4b68      	ldr	r3, [pc, #416]	; (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d90c      	bls.n	8004214 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b65      	ldr	r3, [pc, #404]	; (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b63      	ldr	r3, [pc, #396]	; (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0b8      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d020      	beq.n	8004262 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800422c:	4b59      	ldr	r3, [pc, #356]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4a58      	ldr	r2, [pc, #352]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004236:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004244:	4b53      	ldr	r3, [pc, #332]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	4a52      	ldr	r2, [pc, #328]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800424e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004250:	4b50      	ldr	r3, [pc, #320]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	494d      	ldr	r1, [pc, #308]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	4313      	orrs	r3, r2
 8004260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d044      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d107      	bne.n	8004286 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004276:	4b47      	ldr	r3, [pc, #284]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d119      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e07f      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d003      	beq.n	8004296 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004292:	2b03      	cmp	r3, #3
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004296:	4b3f      	ldr	r3, [pc, #252]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e06f      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a6:	4b3b      	ldr	r3, [pc, #236]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e067      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042b6:	4b37      	ldr	r3, [pc, #220]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f023 0203 	bic.w	r2, r3, #3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	4934      	ldr	r1, [pc, #208]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042c8:	f7fe faee 	bl	80028a8 <HAL_GetTick>
 80042cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ce:	e00a      	b.n	80042e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d0:	f7fe faea 	bl	80028a8 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f241 3288 	movw	r2, #5000	; 0x1388
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e04f      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e6:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 020c 	and.w	r2, r3, #12
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d1eb      	bne.n	80042d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042f8:	4b25      	ldr	r3, [pc, #148]	; (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d20c      	bcs.n	8004320 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004306:	4b22      	ldr	r3, [pc, #136]	; (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800430e:	4b20      	ldr	r3, [pc, #128]	; (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d001      	beq.n	8004320 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e032      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800432c:	4b19      	ldr	r3, [pc, #100]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4916      	ldr	r1, [pc, #88]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	4313      	orrs	r3, r2
 800433c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800434a:	4b12      	ldr	r3, [pc, #72]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	490e      	ldr	r1, [pc, #56]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800435e:	f000 f82d 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 8004362:	4602      	mov	r2, r0
 8004364:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	490a      	ldr	r1, [pc, #40]	; (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 8004370:	5ccb      	ldrb	r3, [r1, r3]
 8004372:	fa22 f303 	lsr.w	r3, r2, r3
 8004376:	4a09      	ldr	r2, [pc, #36]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800437a:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7fe fa4e 	bl	8002820 <HAL_InitTick>

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40023c00 	.word	0x40023c00
 8004394:	40023800 	.word	0x40023800
 8004398:	0800b90c 	.word	0x0800b90c
 800439c:	20000000 	.word	0x20000000
 80043a0:	20000024 	.word	0x20000024

080043a4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80043a8:	4b03      	ldr	r3, [pc, #12]	; (80043b8 <HAL_RCC_EnableCSS+0x14>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
}
 80043ae:	bf00      	nop
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	4247004c 	.word	0x4247004c

080043bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c0:	b094      	sub	sp, #80	; 0x50
 80043c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	647b      	str	r3, [r7, #68]	; 0x44
 80043c8:	2300      	movs	r3, #0
 80043ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043cc:	2300      	movs	r3, #0
 80043ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043d4:	4b79      	ldr	r3, [pc, #484]	; (80045bc <HAL_RCC_GetSysClockFreq+0x200>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 030c 	and.w	r3, r3, #12
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d00d      	beq.n	80043fc <HAL_RCC_GetSysClockFreq+0x40>
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	f200 80e1 	bhi.w	80045a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <HAL_RCC_GetSysClockFreq+0x34>
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d003      	beq.n	80043f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80043ee:	e0db      	b.n	80045a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043f0:	4b73      	ldr	r3, [pc, #460]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80043f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80043f4:	e0db      	b.n	80045ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043f6:	4b72      	ldr	r3, [pc, #456]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80043f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043fa:	e0d8      	b.n	80045ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043fc:	4b6f      	ldr	r3, [pc, #444]	; (80045bc <HAL_RCC_GetSysClockFreq+0x200>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004404:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004406:	4b6d      	ldr	r3, [pc, #436]	; (80045bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d063      	beq.n	80044da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004412:	4b6a      	ldr	r3, [pc, #424]	; (80045bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	099b      	lsrs	r3, r3, #6
 8004418:	2200      	movs	r2, #0
 800441a:	63bb      	str	r3, [r7, #56]	; 0x38
 800441c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004424:	633b      	str	r3, [r7, #48]	; 0x30
 8004426:	2300      	movs	r3, #0
 8004428:	637b      	str	r3, [r7, #52]	; 0x34
 800442a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800442e:	4622      	mov	r2, r4
 8004430:	462b      	mov	r3, r5
 8004432:	f04f 0000 	mov.w	r0, #0
 8004436:	f04f 0100 	mov.w	r1, #0
 800443a:	0159      	lsls	r1, r3, #5
 800443c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004440:	0150      	lsls	r0, r2, #5
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4621      	mov	r1, r4
 8004448:	1a51      	subs	r1, r2, r1
 800444a:	6139      	str	r1, [r7, #16]
 800444c:	4629      	mov	r1, r5
 800444e:	eb63 0301 	sbc.w	r3, r3, r1
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004460:	4659      	mov	r1, fp
 8004462:	018b      	lsls	r3, r1, #6
 8004464:	4651      	mov	r1, sl
 8004466:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800446a:	4651      	mov	r1, sl
 800446c:	018a      	lsls	r2, r1, #6
 800446e:	4651      	mov	r1, sl
 8004470:	ebb2 0801 	subs.w	r8, r2, r1
 8004474:	4659      	mov	r1, fp
 8004476:	eb63 0901 	sbc.w	r9, r3, r1
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800448a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800448e:	4690      	mov	r8, r2
 8004490:	4699      	mov	r9, r3
 8004492:	4623      	mov	r3, r4
 8004494:	eb18 0303 	adds.w	r3, r8, r3
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	462b      	mov	r3, r5
 800449c:	eb49 0303 	adc.w	r3, r9, r3
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044ae:	4629      	mov	r1, r5
 80044b0:	028b      	lsls	r3, r1, #10
 80044b2:	4621      	mov	r1, r4
 80044b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044b8:	4621      	mov	r1, r4
 80044ba:	028a      	lsls	r2, r1, #10
 80044bc:	4610      	mov	r0, r2
 80044be:	4619      	mov	r1, r3
 80044c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c2:	2200      	movs	r2, #0
 80044c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044cc:	f7fc fbbc 	bl	8000c48 <__aeabi_uldivmod>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4613      	mov	r3, r2
 80044d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044d8:	e058      	b.n	800458c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044da:	4b38      	ldr	r3, [pc, #224]	; (80045bc <HAL_RCC_GetSysClockFreq+0x200>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	099b      	lsrs	r3, r3, #6
 80044e0:	2200      	movs	r2, #0
 80044e2:	4618      	mov	r0, r3
 80044e4:	4611      	mov	r1, r2
 80044e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044ea:	623b      	str	r3, [r7, #32]
 80044ec:	2300      	movs	r3, #0
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
 80044f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044f4:	4642      	mov	r2, r8
 80044f6:	464b      	mov	r3, r9
 80044f8:	f04f 0000 	mov.w	r0, #0
 80044fc:	f04f 0100 	mov.w	r1, #0
 8004500:	0159      	lsls	r1, r3, #5
 8004502:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004506:	0150      	lsls	r0, r2, #5
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4641      	mov	r1, r8
 800450e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004512:	4649      	mov	r1, r9
 8004514:	eb63 0b01 	sbc.w	fp, r3, r1
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004524:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004528:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800452c:	ebb2 040a 	subs.w	r4, r2, sl
 8004530:	eb63 050b 	sbc.w	r5, r3, fp
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	00eb      	lsls	r3, r5, #3
 800453e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004542:	00e2      	lsls	r2, r4, #3
 8004544:	4614      	mov	r4, r2
 8004546:	461d      	mov	r5, r3
 8004548:	4643      	mov	r3, r8
 800454a:	18e3      	adds	r3, r4, r3
 800454c:	603b      	str	r3, [r7, #0]
 800454e:	464b      	mov	r3, r9
 8004550:	eb45 0303 	adc.w	r3, r5, r3
 8004554:	607b      	str	r3, [r7, #4]
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004562:	4629      	mov	r1, r5
 8004564:	028b      	lsls	r3, r1, #10
 8004566:	4621      	mov	r1, r4
 8004568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800456c:	4621      	mov	r1, r4
 800456e:	028a      	lsls	r2, r1, #10
 8004570:	4610      	mov	r0, r2
 8004572:	4619      	mov	r1, r3
 8004574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004576:	2200      	movs	r2, #0
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	61fa      	str	r2, [r7, #28]
 800457c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004580:	f7fc fb62 	bl	8000c48 <__aeabi_uldivmod>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4613      	mov	r3, r2
 800458a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800458c:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <HAL_RCC_GetSysClockFreq+0x200>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	0c1b      	lsrs	r3, r3, #16
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	3301      	adds	r3, #1
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800459c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800459e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045a6:	e002      	b.n	80045ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80045aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3750      	adds	r7, #80	; 0x50
 80045b4:	46bd      	mov	sp, r7
 80045b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ba:	bf00      	nop
 80045bc:	40023800 	.word	0x40023800
 80045c0:	00f42400 	.word	0x00f42400

080045c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c8:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ca:	681b      	ldr	r3, [r3, #0]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	20000000 	.word	0x20000000

080045dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045e0:	f7ff fff0 	bl	80045c4 <HAL_RCC_GetHCLKFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	0a9b      	lsrs	r3, r3, #10
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	4903      	ldr	r1, [pc, #12]	; (8004600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045f2:	5ccb      	ldrb	r3, [r1, r3]
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40023800 	.word	0x40023800
 8004600:	0800b91c 	.word	0x0800b91c

08004604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004608:	f7ff ffdc 	bl	80045c4 <HAL_RCC_GetHCLKFreq>
 800460c:	4602      	mov	r2, r0
 800460e:	4b05      	ldr	r3, [pc, #20]	; (8004624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	0b5b      	lsrs	r3, r3, #13
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	4903      	ldr	r1, [pc, #12]	; (8004628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800461a:	5ccb      	ldrb	r3, [r1, r3]
 800461c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004620:	4618      	mov	r0, r3
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40023800 	.word	0x40023800
 8004628:	0800b91c 	.word	0x0800b91c

0800462c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <HAL_RCC_NMI_IRQHandler+0x20>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004638:	2b80      	cmp	r3, #128	; 0x80
 800463a:	d104      	bne.n	8004646 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800463c:	f000 f80a 	bl	8004654 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004640:	4b03      	ldr	r3, [pc, #12]	; (8004650 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004642:	2280      	movs	r2, #128	; 0x80
 8004644:	701a      	strb	r2, [r3, #0]
  }
}
 8004646:	bf00      	nop
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40023800 	.word	0x40023800
 8004650:	4002380e 	.word	0x4002380e

08004654 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e07b      	b.n	800476c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	2b00      	cmp	r3, #0
 800467a:	d108      	bne.n	800468e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004684:	d009      	beq.n	800469a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	61da      	str	r2, [r3, #28]
 800468c:	e005      	b.n	800469a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d106      	bne.n	80046ba <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7fd f9f5 	bl	8001aa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471e:	ea42 0103 	orr.w	r1, r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	0c1b      	lsrs	r3, r3, #16
 8004738:	f003 0104 	and.w	r1, r3, #4
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	f003 0210 	and.w	r2, r3, #16
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69da      	ldr	r2, [r3, #28]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800475a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	4613      	mov	r3, r2
 8004782:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_SPI_Transmit+0x22>
 8004792:	2302      	movs	r3, #2
 8004794:	e126      	b.n	80049e4 <HAL_SPI_Transmit+0x270>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800479e:	f7fe f883 	bl	80028a8 <HAL_GetTick>
 80047a2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d002      	beq.n	80047ba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047b4:	2302      	movs	r3, #2
 80047b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047b8:	e10b      	b.n	80049d2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <HAL_SPI_Transmit+0x52>
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d102      	bne.n	80047cc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047ca:	e102      	b.n	80049d2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2203      	movs	r2, #3
 80047d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	88fa      	ldrh	r2, [r7, #6]
 80047e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	88fa      	ldrh	r2, [r7, #6]
 80047ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004812:	d10f      	bne.n	8004834 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004822:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004832:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b40      	cmp	r3, #64	; 0x40
 8004840:	d007      	beq.n	8004852 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004850:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800485a:	d14b      	bne.n	80048f4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <HAL_SPI_Transmit+0xf6>
 8004864:	8afb      	ldrh	r3, [r7, #22]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d13e      	bne.n	80048e8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	881a      	ldrh	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	1c9a      	adds	r2, r3, #2
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800488e:	e02b      	b.n	80048e8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b02      	cmp	r3, #2
 800489c:	d112      	bne.n	80048c4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	881a      	ldrh	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	1c9a      	adds	r2, r3, #2
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80048c2:	e011      	b.n	80048e8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048c4:	f7fd fff0 	bl	80028a8 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d803      	bhi.n	80048dc <HAL_SPI_Transmit+0x168>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048da:	d102      	bne.n	80048e2 <HAL_SPI_Transmit+0x16e>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d102      	bne.n	80048e8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048e6:	e074      	b.n	80049d2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1ce      	bne.n	8004890 <HAL_SPI_Transmit+0x11c>
 80048f2:	e04c      	b.n	800498e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <HAL_SPI_Transmit+0x18e>
 80048fc:	8afb      	ldrh	r3, [r7, #22]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d140      	bne.n	8004984 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	330c      	adds	r3, #12
 800490c:	7812      	ldrb	r2, [r2, #0]
 800490e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004928:	e02c      	b.n	8004984 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b02      	cmp	r3, #2
 8004936:	d113      	bne.n	8004960 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	7812      	ldrb	r2, [r2, #0]
 8004944:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	86da      	strh	r2, [r3, #54]	; 0x36
 800495e:	e011      	b.n	8004984 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004960:	f7fd ffa2 	bl	80028a8 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d803      	bhi.n	8004978 <HAL_SPI_Transmit+0x204>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004976:	d102      	bne.n	800497e <HAL_SPI_Transmit+0x20a>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004982:	e026      	b.n	80049d2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1cd      	bne.n	800492a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	6839      	ldr	r1, [r7, #0]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 fbcc 	bl	8005130 <SPI_EndRxTxTransaction>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2220      	movs	r2, #32
 80049a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10a      	bne.n	80049c2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049ac:	2300      	movs	r3, #0
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	77fb      	strb	r3, [r7, #31]
 80049ce:	e000      	b.n	80049d2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80049d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3720      	adds	r7, #32
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af02      	add	r7, sp, #8
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	4613      	mov	r3, r2
 80049fa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a08:	d112      	bne.n	8004a30 <HAL_SPI_Receive+0x44>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10e      	bne.n	8004a30 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2204      	movs	r2, #4
 8004a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a1a:	88fa      	ldrh	r2, [r7, #6]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	4613      	mov	r3, r2
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f8f1 	bl	8004c0e <HAL_SPI_TransmitReceive>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	e0ea      	b.n	8004c06 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_SPI_Receive+0x52>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e0e3      	b.n	8004c06 <HAL_SPI_Receive+0x21a>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a46:	f7fd ff2f 	bl	80028a8 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d002      	beq.n	8004a5e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004a58:	2302      	movs	r3, #2
 8004a5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a5c:	e0ca      	b.n	8004bf4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <HAL_SPI_Receive+0x7e>
 8004a64:	88fb      	ldrh	r3, [r7, #6]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d102      	bne.n	8004a70 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a6e:	e0c1      	b.n	8004bf4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2204      	movs	r2, #4
 8004a74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	88fa      	ldrh	r2, [r7, #6]
 8004a88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	88fa      	ldrh	r2, [r7, #6]
 8004a8e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab6:	d10f      	bne.n	8004ad8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ad6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d007      	beq.n	8004af6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004af4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d162      	bne.n	8004bc4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004afe:	e02e      	b.n	8004b5e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d115      	bne.n	8004b3a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f103 020c 	add.w	r2, r3, #12
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	7812      	ldrb	r2, [r2, #0]
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b38:	e011      	b.n	8004b5e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b3a:	f7fd feb5 	bl	80028a8 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d803      	bhi.n	8004b52 <HAL_SPI_Receive+0x166>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b50:	d102      	bne.n	8004b58 <HAL_SPI_Receive+0x16c>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d102      	bne.n	8004b5e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b5c:	e04a      	b.n	8004bf4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1cb      	bne.n	8004b00 <HAL_SPI_Receive+0x114>
 8004b68:	e031      	b.n	8004bce <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d113      	bne.n	8004ba0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	b292      	uxth	r2, r2
 8004b84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	1c9a      	adds	r2, r3, #2
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b9e:	e011      	b.n	8004bc4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ba0:	f7fd fe82 	bl	80028a8 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d803      	bhi.n	8004bb8 <HAL_SPI_Receive+0x1cc>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb6:	d102      	bne.n	8004bbe <HAL_SPI_Receive+0x1d2>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d102      	bne.n	8004bc4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004bc2:	e017      	b.n	8004bf4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1cd      	bne.n	8004b6a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	6839      	ldr	r1, [r7, #0]
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 fa46 	bl	8005064 <SPI_EndRxTransaction>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	75fb      	strb	r3, [r7, #23]
 8004bf0:	e000      	b.n	8004bf4 <HAL_SPI_Receive+0x208>
  }

error :
 8004bf2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b08c      	sub	sp, #48	; 0x30
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	607a      	str	r2, [r7, #4]
 8004c1a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x26>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e18a      	b.n	8004f4a <HAL_SPI_TransmitReceive+0x33c>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c3c:	f7fd fe34 	bl	80028a8 <HAL_GetTick>
 8004c40:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c52:	887b      	ldrh	r3, [r7, #2]
 8004c54:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d00f      	beq.n	8004c7e <HAL_SPI_TransmitReceive+0x70>
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c64:	d107      	bne.n	8004c76 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d103      	bne.n	8004c76 <HAL_SPI_TransmitReceive+0x68>
 8004c6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d003      	beq.n	8004c7e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c76:	2302      	movs	r3, #2
 8004c78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c7c:	e15b      	b.n	8004f36 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_SPI_TransmitReceive+0x82>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <HAL_SPI_TransmitReceive+0x82>
 8004c8a:	887b      	ldrh	r3, [r7, #2]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d103      	bne.n	8004c98 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c96:	e14e      	b.n	8004f36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d003      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2205      	movs	r2, #5
 8004ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	887a      	ldrh	r2, [r7, #2]
 8004cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	887a      	ldrh	r2, [r7, #2]
 8004cc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	887a      	ldrh	r2, [r7, #2]
 8004cce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	887a      	ldrh	r2, [r7, #2]
 8004cd4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cec:	2b40      	cmp	r3, #64	; 0x40
 8004cee:	d007      	beq.n	8004d00 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d08:	d178      	bne.n	8004dfc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <HAL_SPI_TransmitReceive+0x10a>
 8004d12:	8b7b      	ldrh	r3, [r7, #26]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d166      	bne.n	8004de6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	881a      	ldrh	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	1c9a      	adds	r2, r3, #2
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d3c:	e053      	b.n	8004de6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d11b      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x176>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d016      	beq.n	8004d84 <HAL_SPI_TransmitReceive+0x176>
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d113      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d60:	881a      	ldrh	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	1c9a      	adds	r2, r3, #2
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d119      	bne.n	8004dc6 <HAL_SPI_TransmitReceive+0x1b8>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d014      	beq.n	8004dc6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da6:	b292      	uxth	r2, r2
 8004da8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	1c9a      	adds	r2, r3, #2
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dc6:	f7fd fd6f 	bl	80028a8 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d807      	bhi.n	8004de6 <HAL_SPI_TransmitReceive+0x1d8>
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ddc:	d003      	beq.n	8004de6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004de4:	e0a7      	b.n	8004f36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1a6      	bne.n	8004d3e <HAL_SPI_TransmitReceive+0x130>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1a1      	bne.n	8004d3e <HAL_SPI_TransmitReceive+0x130>
 8004dfa:	e07c      	b.n	8004ef6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <HAL_SPI_TransmitReceive+0x1fc>
 8004e04:	8b7b      	ldrh	r3, [r7, #26]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d16b      	bne.n	8004ee2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	330c      	adds	r3, #12
 8004e14:	7812      	ldrb	r2, [r2, #0]
 8004e16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e30:	e057      	b.n	8004ee2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d11c      	bne.n	8004e7a <HAL_SPI_TransmitReceive+0x26c>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d017      	beq.n	8004e7a <HAL_SPI_TransmitReceive+0x26c>
 8004e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d114      	bne.n	8004e7a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	330c      	adds	r3, #12
 8004e5a:	7812      	ldrb	r2, [r2, #0]
 8004e5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d119      	bne.n	8004ebc <HAL_SPI_TransmitReceive+0x2ae>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d014      	beq.n	8004ebc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ebc:	f7fd fcf4 	bl	80028a8 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d803      	bhi.n	8004ed4 <HAL_SPI_TransmitReceive+0x2c6>
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d102      	bne.n	8004eda <HAL_SPI_TransmitReceive+0x2cc>
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d103      	bne.n	8004ee2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ee0:	e029      	b.n	8004f36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1a2      	bne.n	8004e32 <HAL_SPI_TransmitReceive+0x224>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d19d      	bne.n	8004e32 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 f918 	bl	8005130 <SPI_EndRxTxTransaction>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d006      	beq.n	8004f14 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f12:	e010      	b.n	8004f36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10b      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	e000      	b.n	8004f36 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3730      	adds	r7, #48	; 0x30
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	4613      	mov	r3, r2
 8004f62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f64:	f7fd fca0 	bl	80028a8 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	1a9b      	subs	r3, r3, r2
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	4413      	add	r3, r2
 8004f72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f74:	f7fd fc98 	bl	80028a8 <HAL_GetTick>
 8004f78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f7a:	4b39      	ldr	r3, [pc, #228]	; (8005060 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	015b      	lsls	r3, r3, #5
 8004f80:	0d1b      	lsrs	r3, r3, #20
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	fb02 f303 	mul.w	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f8a:	e054      	b.n	8005036 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	d050      	beq.n	8005036 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f94:	f7fd fc88 	bl	80028a8 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d902      	bls.n	8004faa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d13d      	bne.n	8005026 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc2:	d111      	bne.n	8004fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fcc:	d004      	beq.n	8004fd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd6:	d107      	bne.n	8004fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff0:	d10f      	bne.n	8005012 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005010:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e017      	b.n	8005056 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	3b01      	subs	r3, #1
 8005034:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4013      	ands	r3, r2
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	429a      	cmp	r2, r3
 8005044:	bf0c      	ite	eq
 8005046:	2301      	moveq	r3, #1
 8005048:	2300      	movne	r3, #0
 800504a:	b2db      	uxtb	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	429a      	cmp	r2, r3
 8005052:	d19b      	bne.n	8004f8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3720      	adds	r7, #32
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000000 	.word	0x20000000

08005064 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af02      	add	r7, sp, #8
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005078:	d111      	bne.n	800509e <SPI_EndRxTransaction+0x3a>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005082:	d004      	beq.n	800508e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800508c:	d107      	bne.n	800509e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800509c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050a6:	d12a      	bne.n	80050fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b0:	d012      	beq.n	80050d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2200      	movs	r2, #0
 80050ba:	2180      	movs	r1, #128	; 0x80
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7ff ff49 	bl	8004f54 <SPI_WaitFlagStateUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d02d      	beq.n	8005124 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050cc:	f043 0220 	orr.w	r2, r3, #32
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e026      	b.n	8005126 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2200      	movs	r2, #0
 80050e0:	2101      	movs	r1, #1
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7ff ff36 	bl	8004f54 <SPI_WaitFlagStateUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d01a      	beq.n	8005124 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	f043 0220 	orr.w	r2, r3, #32
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e013      	b.n	8005126 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2200      	movs	r2, #0
 8005106:	2101      	movs	r1, #1
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff ff23 	bl	8004f54 <SPI_WaitFlagStateUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d007      	beq.n	8005124 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	f043 0220 	orr.w	r2, r3, #32
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e000      	b.n	8005126 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800513c:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <SPI_EndRxTxTransaction+0x7c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1b      	ldr	r2, [pc, #108]	; (80051b0 <SPI_EndRxTxTransaction+0x80>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	0d5b      	lsrs	r3, r3, #21
 8005148:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800514c:	fb02 f303 	mul.w	r3, r2, r3
 8005150:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800515a:	d112      	bne.n	8005182 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2200      	movs	r2, #0
 8005164:	2180      	movs	r1, #128	; 0x80
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f7ff fef4 	bl	8004f54 <SPI_WaitFlagStateUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d016      	beq.n	80051a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e00f      	b.n	80051a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	3b01      	subs	r3, #1
 800518c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005198:	2b80      	cmp	r3, #128	; 0x80
 800519a:	d0f2      	beq.n	8005182 <SPI_EndRxTxTransaction+0x52>
 800519c:	e000      	b.n	80051a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800519e:	bf00      	nop
  }

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000000 	.word	0x20000000
 80051b0:	165e9f81 	.word	0x165e9f81

080051b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e041      	b.n	800524a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fc fce0 	bl	8001ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3304      	adds	r3, #4
 80051f0:	4619      	mov	r1, r3
 80051f2:	4610      	mov	r0, r2
 80051f4:	f000 fe16 	bl	8005e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b01      	cmp	r3, #1
 8005266:	d001      	beq.n	800526c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e046      	b.n	80052fa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a23      	ldr	r2, [pc, #140]	; (8005308 <HAL_TIM_Base_Start+0xb4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d022      	beq.n	80052c4 <HAL_TIM_Base_Start+0x70>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005286:	d01d      	beq.n	80052c4 <HAL_TIM_Base_Start+0x70>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a1f      	ldr	r2, [pc, #124]	; (800530c <HAL_TIM_Base_Start+0xb8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d018      	beq.n	80052c4 <HAL_TIM_Base_Start+0x70>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1e      	ldr	r2, [pc, #120]	; (8005310 <HAL_TIM_Base_Start+0xbc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d013      	beq.n	80052c4 <HAL_TIM_Base_Start+0x70>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a1c      	ldr	r2, [pc, #112]	; (8005314 <HAL_TIM_Base_Start+0xc0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00e      	beq.n	80052c4 <HAL_TIM_Base_Start+0x70>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a1b      	ldr	r2, [pc, #108]	; (8005318 <HAL_TIM_Base_Start+0xc4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d009      	beq.n	80052c4 <HAL_TIM_Base_Start+0x70>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a19      	ldr	r2, [pc, #100]	; (800531c <HAL_TIM_Base_Start+0xc8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <HAL_TIM_Base_Start+0x70>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a18      	ldr	r2, [pc, #96]	; (8005320 <HAL_TIM_Base_Start+0xcc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d111      	bne.n	80052e8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b06      	cmp	r3, #6
 80052d4:	d010      	beq.n	80052f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0201 	orr.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e6:	e007      	b.n	80052f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40010000 	.word	0x40010000
 800530c:	40000400 	.word	0x40000400
 8005310:	40000800 	.word	0x40000800
 8005314:	40000c00 	.word	0x40000c00
 8005318:	40010400 	.word	0x40010400
 800531c:	40014000 	.word	0x40014000
 8005320:	40001800 	.word	0x40001800

08005324 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b01      	cmp	r3, #1
 8005336:	d001      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e04e      	b.n	80053da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0201 	orr.w	r2, r2, #1
 8005352:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a23      	ldr	r2, [pc, #140]	; (80053e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d022      	beq.n	80053a4 <HAL_TIM_Base_Start_IT+0x80>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005366:	d01d      	beq.n	80053a4 <HAL_TIM_Base_Start_IT+0x80>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a1f      	ldr	r2, [pc, #124]	; (80053ec <HAL_TIM_Base_Start_IT+0xc8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d018      	beq.n	80053a4 <HAL_TIM_Base_Start_IT+0x80>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a1e      	ldr	r2, [pc, #120]	; (80053f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d013      	beq.n	80053a4 <HAL_TIM_Base_Start_IT+0x80>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1c      	ldr	r2, [pc, #112]	; (80053f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00e      	beq.n	80053a4 <HAL_TIM_Base_Start_IT+0x80>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a1b      	ldr	r2, [pc, #108]	; (80053f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d009      	beq.n	80053a4 <HAL_TIM_Base_Start_IT+0x80>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a19      	ldr	r2, [pc, #100]	; (80053fc <HAL_TIM_Base_Start_IT+0xd8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d004      	beq.n	80053a4 <HAL_TIM_Base_Start_IT+0x80>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a18      	ldr	r2, [pc, #96]	; (8005400 <HAL_TIM_Base_Start_IT+0xdc>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d111      	bne.n	80053c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b06      	cmp	r3, #6
 80053b4:	d010      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f042 0201 	orr.w	r2, r2, #1
 80053c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c6:	e007      	b.n	80053d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40010000 	.word	0x40010000
 80053ec:	40000400 	.word	0x40000400
 80053f0:	40000800 	.word	0x40000800
 80053f4:	40000c00 	.word	0x40000c00
 80053f8:	40010400 	.word	0x40010400
 80053fc:	40014000 	.word	0x40014000
 8005400:	40001800 	.word	0x40001800

08005404 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e041      	b.n	800549a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f839 	bl	80054a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3304      	adds	r3, #4
 8005440:	4619      	mov	r1, r3
 8005442:	4610      	mov	r0, r2
 8005444:	f000 fcee 	bl	8005e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
	...

080054b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <HAL_TIM_PWM_Start+0x24>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	bf14      	ite	ne
 80054d4:	2301      	movne	r3, #1
 80054d6:	2300      	moveq	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	e022      	b.n	8005522 <HAL_TIM_PWM_Start+0x6a>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d109      	bne.n	80054f6 <HAL_TIM_PWM_Start+0x3e>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	bf14      	ite	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	2300      	moveq	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	e015      	b.n	8005522 <HAL_TIM_PWM_Start+0x6a>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d109      	bne.n	8005510 <HAL_TIM_PWM_Start+0x58>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b01      	cmp	r3, #1
 8005506:	bf14      	ite	ne
 8005508:	2301      	movne	r3, #1
 800550a:	2300      	moveq	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	e008      	b.n	8005522 <HAL_TIM_PWM_Start+0x6a>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	bf14      	ite	ne
 800551c:	2301      	movne	r3, #1
 800551e:	2300      	moveq	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e07c      	b.n	8005624 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d104      	bne.n	800553a <HAL_TIM_PWM_Start+0x82>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005538:	e013      	b.n	8005562 <HAL_TIM_PWM_Start+0xaa>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b04      	cmp	r3, #4
 800553e:	d104      	bne.n	800554a <HAL_TIM_PWM_Start+0x92>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005548:	e00b      	b.n	8005562 <HAL_TIM_PWM_Start+0xaa>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b08      	cmp	r3, #8
 800554e:	d104      	bne.n	800555a <HAL_TIM_PWM_Start+0xa2>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005558:	e003      	b.n	8005562 <HAL_TIM_PWM_Start+0xaa>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2202      	movs	r2, #2
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2201      	movs	r2, #1
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 ff44 	bl	80063f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a2d      	ldr	r2, [pc, #180]	; (800562c <HAL_TIM_PWM_Start+0x174>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d004      	beq.n	8005584 <HAL_TIM_PWM_Start+0xcc>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a2c      	ldr	r2, [pc, #176]	; (8005630 <HAL_TIM_PWM_Start+0x178>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d101      	bne.n	8005588 <HAL_TIM_PWM_Start+0xd0>
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <HAL_TIM_PWM_Start+0xd2>
 8005588:	2300      	movs	r3, #0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800559c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a22      	ldr	r2, [pc, #136]	; (800562c <HAL_TIM_PWM_Start+0x174>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d022      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b0:	d01d      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a1f      	ldr	r2, [pc, #124]	; (8005634 <HAL_TIM_PWM_Start+0x17c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d018      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a1d      	ldr	r2, [pc, #116]	; (8005638 <HAL_TIM_PWM_Start+0x180>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d013      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a1c      	ldr	r2, [pc, #112]	; (800563c <HAL_TIM_PWM_Start+0x184>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00e      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a16      	ldr	r2, [pc, #88]	; (8005630 <HAL_TIM_PWM_Start+0x178>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d009      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a18      	ldr	r2, [pc, #96]	; (8005640 <HAL_TIM_PWM_Start+0x188>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d004      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a16      	ldr	r2, [pc, #88]	; (8005644 <HAL_TIM_PWM_Start+0x18c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d111      	bne.n	8005612 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b06      	cmp	r3, #6
 80055fe:	d010      	beq.n	8005622 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005610:	e007      	b.n	8005622 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0201 	orr.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40010000 	.word	0x40010000
 8005630:	40010400 	.word	0x40010400
 8005634:	40000400 	.word	0x40000400
 8005638:	40000800 	.word	0x40000800
 800563c:	40000c00 	.word	0x40000c00
 8005640:	40014000 	.word	0x40014000
 8005644:	40001800 	.word	0x40001800

08005648 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e097      	b.n	800578c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d106      	bne.n	8005676 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7fc fb3b 	bl	8001cec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2202      	movs	r2, #2
 800567a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6812      	ldr	r2, [r2, #0]
 8005688:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800568c:	f023 0307 	bic.w	r3, r3, #7
 8005690:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3304      	adds	r3, #4
 800569a:	4619      	mov	r1, r3
 800569c:	4610      	mov	r0, r2
 800569e:	f000 fbc1 	bl	8005e24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ca:	f023 0303 	bic.w	r3, r3, #3
 80056ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	021b      	lsls	r3, r3, #8
 80056da:	4313      	orrs	r3, r2
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	4313      	orrs	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80056e8:	f023 030c 	bic.w	r3, r3, #12
 80056ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	021b      	lsls	r3, r3, #8
 8005704:	4313      	orrs	r3, r2
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	011a      	lsls	r2, r3, #4
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	031b      	lsls	r3, r3, #12
 8005718:	4313      	orrs	r3, r2
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005726:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800572e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	4313      	orrs	r3, r2
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3718      	adds	r7, #24
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80057bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d110      	bne.n	80057e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d102      	bne.n	80057d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80057ca:	7b7b      	ldrb	r3, [r7, #13]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d001      	beq.n	80057d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e069      	b.n	80058a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057e4:	e031      	b.n	800584a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d110      	bne.n	800580e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057ec:	7bbb      	ldrb	r3, [r7, #14]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d102      	bne.n	80057f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057f2:	7b3b      	ldrb	r3, [r7, #12]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d001      	beq.n	80057fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e055      	b.n	80058a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800580c:	e01d      	b.n	800584a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800580e:	7bfb      	ldrb	r3, [r7, #15]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d108      	bne.n	8005826 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005814:	7bbb      	ldrb	r3, [r7, #14]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d105      	bne.n	8005826 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800581a:	7b7b      	ldrb	r3, [r7, #13]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d102      	bne.n	8005826 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005820:	7b3b      	ldrb	r3, [r7, #12]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d001      	beq.n	800582a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e03e      	b.n	80058a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2202      	movs	r2, #2
 800582e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2202      	movs	r2, #2
 8005836:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2202      	movs	r2, #2
 800583e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2202      	movs	r2, #2
 8005846:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <HAL_TIM_Encoder_Start+0xc4>
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b04      	cmp	r3, #4
 8005854:	d008      	beq.n	8005868 <HAL_TIM_Encoder_Start+0xd4>
 8005856:	e00f      	b.n	8005878 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2201      	movs	r2, #1
 800585e:	2100      	movs	r1, #0
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fdc9 	bl	80063f8 <TIM_CCxChannelCmd>
      break;
 8005866:	e016      	b.n	8005896 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2201      	movs	r2, #1
 800586e:	2104      	movs	r1, #4
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fdc1 	bl	80063f8 <TIM_CCxChannelCmd>
      break;
 8005876:	e00e      	b.n	8005896 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2201      	movs	r2, #1
 800587e:	2100      	movs	r1, #0
 8005880:	4618      	mov	r0, r3
 8005882:	f000 fdb9 	bl	80063f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2201      	movs	r2, #1
 800588c:	2104      	movs	r1, #4
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fdb2 	bl	80063f8 <TIM_CCxChannelCmd>
      break;
 8005894:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0201 	orr.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d122      	bne.n	800590c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d11b      	bne.n	800590c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f06f 0202 	mvn.w	r2, #2
 80058dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fa77 	bl	8005de6 <HAL_TIM_IC_CaptureCallback>
 80058f8:	e005      	b.n	8005906 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fa69 	bl	8005dd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fa7a 	bl	8005dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b04      	cmp	r3, #4
 8005918:	d122      	bne.n	8005960 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b04      	cmp	r3, #4
 8005926:	d11b      	bne.n	8005960 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0204 	mvn.w	r2, #4
 8005930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fa4d 	bl	8005de6 <HAL_TIM_IC_CaptureCallback>
 800594c:	e005      	b.n	800595a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fa3f 	bl	8005dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fa50 	bl	8005dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b08      	cmp	r3, #8
 800596c:	d122      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b08      	cmp	r3, #8
 800597a:	d11b      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f06f 0208 	mvn.w	r2, #8
 8005984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2204      	movs	r2, #4
 800598a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fa23 	bl	8005de6 <HAL_TIM_IC_CaptureCallback>
 80059a0:	e005      	b.n	80059ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fa15 	bl	8005dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fa26 	bl	8005dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	2b10      	cmp	r3, #16
 80059c0:	d122      	bne.n	8005a08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0310 	and.w	r3, r3, #16
 80059cc:	2b10      	cmp	r3, #16
 80059ce:	d11b      	bne.n	8005a08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f06f 0210 	mvn.w	r2, #16
 80059d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2208      	movs	r2, #8
 80059de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f9f9 	bl	8005de6 <HAL_TIM_IC_CaptureCallback>
 80059f4:	e005      	b.n	8005a02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f9eb 	bl	8005dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f9fc 	bl	8005dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d10e      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d107      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0201 	mvn.w	r2, #1
 8005a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f002 f93c 	bl	8007cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3e:	2b80      	cmp	r3, #128	; 0x80
 8005a40:	d10e      	bne.n	8005a60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4c:	2b80      	cmp	r3, #128	; 0x80
 8005a4e:	d107      	bne.n	8005a60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fd78 	bl	8006550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6a:	2b40      	cmp	r3, #64	; 0x40
 8005a6c:	d10e      	bne.n	8005a8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a78:	2b40      	cmp	r3, #64	; 0x40
 8005a7a:	d107      	bne.n	8005a8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f9c1 	bl	8005e0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0320 	and.w	r3, r3, #32
 8005a96:	2b20      	cmp	r3, #32
 8005a98:	d10e      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d107      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f06f 0220 	mvn.w	r2, #32
 8005ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fd42 	bl	800653c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ab8:	bf00      	nop
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e0ae      	b.n	8005c3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b0c      	cmp	r3, #12
 8005aea:	f200 809f 	bhi.w	8005c2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005aee:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af4:	08005b29 	.word	0x08005b29
 8005af8:	08005c2d 	.word	0x08005c2d
 8005afc:	08005c2d 	.word	0x08005c2d
 8005b00:	08005c2d 	.word	0x08005c2d
 8005b04:	08005b69 	.word	0x08005b69
 8005b08:	08005c2d 	.word	0x08005c2d
 8005b0c:	08005c2d 	.word	0x08005c2d
 8005b10:	08005c2d 	.word	0x08005c2d
 8005b14:	08005bab 	.word	0x08005bab
 8005b18:	08005c2d 	.word	0x08005c2d
 8005b1c:	08005c2d 	.word	0x08005c2d
 8005b20:	08005c2d 	.word	0x08005c2d
 8005b24:	08005beb 	.word	0x08005beb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fa18 	bl	8005f64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699a      	ldr	r2, [r3, #24]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0208 	orr.w	r2, r2, #8
 8005b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0204 	bic.w	r2, r2, #4
 8005b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6999      	ldr	r1, [r3, #24]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	691a      	ldr	r2, [r3, #16]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	619a      	str	r2, [r3, #24]
      break;
 8005b66:	e064      	b.n	8005c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68b9      	ldr	r1, [r7, #8]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fa68 	bl	8006044 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	699a      	ldr	r2, [r3, #24]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6999      	ldr	r1, [r3, #24]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	021a      	lsls	r2, r3, #8
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	619a      	str	r2, [r3, #24]
      break;
 8005ba8:	e043      	b.n	8005c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fabd 	bl	8006130 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69da      	ldr	r2, [r3, #28]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 0208 	orr.w	r2, r2, #8
 8005bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0204 	bic.w	r2, r2, #4
 8005bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69d9      	ldr	r1, [r3, #28]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	691a      	ldr	r2, [r3, #16]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	61da      	str	r2, [r3, #28]
      break;
 8005be8:	e023      	b.n	8005c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fb11 	bl	8006218 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69da      	ldr	r2, [r3, #28]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69d9      	ldr	r1, [r3, #28]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	021a      	lsls	r2, r3, #8
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	61da      	str	r2, [r3, #28]
      break;
 8005c2a:	e002      	b.n	8005c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_TIM_ConfigClockSource+0x1c>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e0b4      	b.n	8005dca <HAL_TIM_ConfigClockSource+0x186>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c98:	d03e      	beq.n	8005d18 <HAL_TIM_ConfigClockSource+0xd4>
 8005c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c9e:	f200 8087 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca6:	f000 8086 	beq.w	8005db6 <HAL_TIM_ConfigClockSource+0x172>
 8005caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cae:	d87f      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb0:	2b70      	cmp	r3, #112	; 0x70
 8005cb2:	d01a      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0xa6>
 8005cb4:	2b70      	cmp	r3, #112	; 0x70
 8005cb6:	d87b      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb8:	2b60      	cmp	r3, #96	; 0x60
 8005cba:	d050      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x11a>
 8005cbc:	2b60      	cmp	r3, #96	; 0x60
 8005cbe:	d877      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc0:	2b50      	cmp	r3, #80	; 0x50
 8005cc2:	d03c      	beq.n	8005d3e <HAL_TIM_ConfigClockSource+0xfa>
 8005cc4:	2b50      	cmp	r3, #80	; 0x50
 8005cc6:	d873      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc8:	2b40      	cmp	r3, #64	; 0x40
 8005cca:	d058      	beq.n	8005d7e <HAL_TIM_ConfigClockSource+0x13a>
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	d86f      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd0:	2b30      	cmp	r3, #48	; 0x30
 8005cd2:	d064      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005cd4:	2b30      	cmp	r3, #48	; 0x30
 8005cd6:	d86b      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d060      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d867      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d05c      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005ce4:	2b10      	cmp	r3, #16
 8005ce6:	d05a      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005ce8:	e062      	b.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6899      	ldr	r1, [r3, #8]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f000 fb5d 	bl	80063b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	609a      	str	r2, [r3, #8]
      break;
 8005d16:	e04f      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6818      	ldr	r0, [r3, #0]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	6899      	ldr	r1, [r3, #8]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f000 fb46 	bl	80063b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d3a:	609a      	str	r2, [r3, #8]
      break;
 8005d3c:	e03c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	6859      	ldr	r1, [r3, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f000 faba 	bl	80062c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2150      	movs	r1, #80	; 0x50
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fb13 	bl	8006382 <TIM_ITRx_SetConfig>
      break;
 8005d5c:	e02c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6818      	ldr	r0, [r3, #0]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	6859      	ldr	r1, [r3, #4]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f000 fad9 	bl	8006322 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2160      	movs	r1, #96	; 0x60
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fb03 	bl	8006382 <TIM_ITRx_SetConfig>
      break;
 8005d7c:	e01c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6818      	ldr	r0, [r3, #0]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6859      	ldr	r1, [r3, #4]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f000 fa9a 	bl	80062c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2140      	movs	r1, #64	; 0x40
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 faf3 	bl	8006382 <TIM_ITRx_SetConfig>
      break;
 8005d9c:	e00c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4619      	mov	r1, r3
 8005da8:	4610      	mov	r0, r2
 8005daa:	f000 faea 	bl	8006382 <TIM_ITRx_SetConfig>
      break;
 8005dae:	e003      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
      break;
 8005db4:	e000      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e02:	bf00      	nop
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
	...

08005e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a40      	ldr	r2, [pc, #256]	; (8005f38 <TIM_Base_SetConfig+0x114>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d013      	beq.n	8005e64 <TIM_Base_SetConfig+0x40>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e42:	d00f      	beq.n	8005e64 <TIM_Base_SetConfig+0x40>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a3d      	ldr	r2, [pc, #244]	; (8005f3c <TIM_Base_SetConfig+0x118>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00b      	beq.n	8005e64 <TIM_Base_SetConfig+0x40>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a3c      	ldr	r2, [pc, #240]	; (8005f40 <TIM_Base_SetConfig+0x11c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d007      	beq.n	8005e64 <TIM_Base_SetConfig+0x40>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a3b      	ldr	r2, [pc, #236]	; (8005f44 <TIM_Base_SetConfig+0x120>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d003      	beq.n	8005e64 <TIM_Base_SetConfig+0x40>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a3a      	ldr	r2, [pc, #232]	; (8005f48 <TIM_Base_SetConfig+0x124>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d108      	bne.n	8005e76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a2f      	ldr	r2, [pc, #188]	; (8005f38 <TIM_Base_SetConfig+0x114>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d02b      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e84:	d027      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a2c      	ldr	r2, [pc, #176]	; (8005f3c <TIM_Base_SetConfig+0x118>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d023      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a2b      	ldr	r2, [pc, #172]	; (8005f40 <TIM_Base_SetConfig+0x11c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d01f      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a2a      	ldr	r2, [pc, #168]	; (8005f44 <TIM_Base_SetConfig+0x120>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d01b      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a29      	ldr	r2, [pc, #164]	; (8005f48 <TIM_Base_SetConfig+0x124>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d017      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a28      	ldr	r2, [pc, #160]	; (8005f4c <TIM_Base_SetConfig+0x128>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a27      	ldr	r2, [pc, #156]	; (8005f50 <TIM_Base_SetConfig+0x12c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00f      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a26      	ldr	r2, [pc, #152]	; (8005f54 <TIM_Base_SetConfig+0x130>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00b      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a25      	ldr	r2, [pc, #148]	; (8005f58 <TIM_Base_SetConfig+0x134>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d007      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a24      	ldr	r2, [pc, #144]	; (8005f5c <TIM_Base_SetConfig+0x138>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d003      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a23      	ldr	r2, [pc, #140]	; (8005f60 <TIM_Base_SetConfig+0x13c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d108      	bne.n	8005ee8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a0a      	ldr	r2, [pc, #40]	; (8005f38 <TIM_Base_SetConfig+0x114>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d003      	beq.n	8005f1c <TIM_Base_SetConfig+0xf8>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a0c      	ldr	r2, [pc, #48]	; (8005f48 <TIM_Base_SetConfig+0x124>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d103      	bne.n	8005f24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	615a      	str	r2, [r3, #20]
}
 8005f2a:	bf00      	nop
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40000400 	.word	0x40000400
 8005f40:	40000800 	.word	0x40000800
 8005f44:	40000c00 	.word	0x40000c00
 8005f48:	40010400 	.word	0x40010400
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40014400 	.word	0x40014400
 8005f54:	40014800 	.word	0x40014800
 8005f58:	40001800 	.word	0x40001800
 8005f5c:	40001c00 	.word	0x40001c00
 8005f60:	40002000 	.word	0x40002000

08005f64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f023 0201 	bic.w	r2, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0303 	bic.w	r3, r3, #3
 8005f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f023 0302 	bic.w	r3, r3, #2
 8005fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a20      	ldr	r2, [pc, #128]	; (800603c <TIM_OC1_SetConfig+0xd8>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d003      	beq.n	8005fc8 <TIM_OC1_SetConfig+0x64>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a1f      	ldr	r2, [pc, #124]	; (8006040 <TIM_OC1_SetConfig+0xdc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d10c      	bne.n	8005fe2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f023 0308 	bic.w	r3, r3, #8
 8005fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f023 0304 	bic.w	r3, r3, #4
 8005fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a15      	ldr	r2, [pc, #84]	; (800603c <TIM_OC1_SetConfig+0xd8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d003      	beq.n	8005ff2 <TIM_OC1_SetConfig+0x8e>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a14      	ldr	r2, [pc, #80]	; (8006040 <TIM_OC1_SetConfig+0xdc>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d111      	bne.n	8006016 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4313      	orrs	r3, r2
 8006014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	621a      	str	r2, [r3, #32]
}
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	40010000 	.word	0x40010000
 8006040:	40010400 	.word	0x40010400

08006044 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	f023 0210 	bic.w	r2, r3, #16
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800607a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	021b      	lsls	r3, r3, #8
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4313      	orrs	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f023 0320 	bic.w	r3, r3, #32
 800608e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a22      	ldr	r2, [pc, #136]	; (8006128 <TIM_OC2_SetConfig+0xe4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d003      	beq.n	80060ac <TIM_OC2_SetConfig+0x68>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a21      	ldr	r2, [pc, #132]	; (800612c <TIM_OC2_SetConfig+0xe8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d10d      	bne.n	80060c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a17      	ldr	r2, [pc, #92]	; (8006128 <TIM_OC2_SetConfig+0xe4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d003      	beq.n	80060d8 <TIM_OC2_SetConfig+0x94>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a16      	ldr	r2, [pc, #88]	; (800612c <TIM_OC2_SetConfig+0xe8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d113      	bne.n	8006100 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	621a      	str	r2, [r3, #32]
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40010000 	.word	0x40010000
 800612c:	40010400 	.word	0x40010400

08006130 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0303 	bic.w	r3, r3, #3
 8006166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	021b      	lsls	r3, r3, #8
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a21      	ldr	r2, [pc, #132]	; (8006210 <TIM_OC3_SetConfig+0xe0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d003      	beq.n	8006196 <TIM_OC3_SetConfig+0x66>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a20      	ldr	r2, [pc, #128]	; (8006214 <TIM_OC3_SetConfig+0xe4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d10d      	bne.n	80061b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800619c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a16      	ldr	r2, [pc, #88]	; (8006210 <TIM_OC3_SetConfig+0xe0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d003      	beq.n	80061c2 <TIM_OC3_SetConfig+0x92>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a15      	ldr	r2, [pc, #84]	; (8006214 <TIM_OC3_SetConfig+0xe4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d113      	bne.n	80061ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	011b      	lsls	r3, r3, #4
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4313      	orrs	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	621a      	str	r2, [r3, #32]
}
 8006204:	bf00      	nop
 8006206:	371c      	adds	r7, #28
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	40010000 	.word	0x40010000
 8006214:	40010400 	.word	0x40010400

08006218 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	021b      	lsls	r3, r3, #8
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	031b      	lsls	r3, r3, #12
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a12      	ldr	r2, [pc, #72]	; (80062bc <TIM_OC4_SetConfig+0xa4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d003      	beq.n	8006280 <TIM_OC4_SetConfig+0x68>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a11      	ldr	r2, [pc, #68]	; (80062c0 <TIM_OC4_SetConfig+0xa8>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d109      	bne.n	8006294 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	019b      	lsls	r3, r3, #6
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	621a      	str	r2, [r3, #32]
}
 80062ae:	bf00      	nop
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40010000 	.word	0x40010000
 80062c0:	40010400 	.word	0x40010400

080062c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	f023 0201 	bic.w	r2, r3, #1
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f023 030a 	bic.w	r3, r3, #10
 8006300:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	621a      	str	r2, [r3, #32]
}
 8006316:	bf00      	nop
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006322:	b480      	push	{r7}
 8006324:	b087      	sub	sp, #28
 8006326:	af00      	add	r7, sp, #0
 8006328:	60f8      	str	r0, [r7, #12]
 800632a:	60b9      	str	r1, [r7, #8]
 800632c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	f023 0210 	bic.w	r2, r3, #16
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800634c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	031b      	lsls	r3, r3, #12
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800635e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	621a      	str	r2, [r3, #32]
}
 8006376:	bf00      	nop
 8006378:	371c      	adds	r7, #28
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006382:	b480      	push	{r7}
 8006384:	b085      	sub	sp, #20
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006398:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4313      	orrs	r3, r2
 80063a0:	f043 0307 	orr.w	r3, r3, #7
 80063a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	609a      	str	r2, [r3, #8]
}
 80063ac:	bf00      	nop
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	021a      	lsls	r2, r3, #8
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	431a      	orrs	r2, r3
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4313      	orrs	r3, r2
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	609a      	str	r2, [r3, #8]
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f003 031f 	and.w	r3, r3, #31
 800640a:	2201      	movs	r2, #1
 800640c:	fa02 f303 	lsl.w	r3, r2, r3
 8006410:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6a1a      	ldr	r2, [r3, #32]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	43db      	mvns	r3, r3
 800641a:	401a      	ands	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6a1a      	ldr	r2, [r3, #32]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f003 031f 	and.w	r3, r3, #31
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	fa01 f303 	lsl.w	r3, r1, r3
 8006430:	431a      	orrs	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	621a      	str	r2, [r3, #32]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
	...

08006444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006458:	2302      	movs	r3, #2
 800645a:	e05a      	b.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a21      	ldr	r2, [pc, #132]	; (8006520 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d022      	beq.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a8:	d01d      	beq.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a1d      	ldr	r2, [pc, #116]	; (8006524 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d018      	beq.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a1b      	ldr	r2, [pc, #108]	; (8006528 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d013      	beq.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a1a      	ldr	r2, [pc, #104]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d00e      	beq.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a18      	ldr	r2, [pc, #96]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d009      	beq.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a17      	ldr	r2, [pc, #92]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d004      	beq.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a15      	ldr	r2, [pc, #84]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d10c      	bne.n	8006500 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	40010000 	.word	0x40010000
 8006524:	40000400 	.word	0x40000400
 8006528:	40000800 	.word	0x40000800
 800652c:	40000c00 	.word	0x40000c00
 8006530:	40010400 	.word	0x40010400
 8006534:	40014000 	.word	0x40014000
 8006538:	40001800 	.word	0x40001800

0800653c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e03f      	b.n	80065f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7fb fcaa 	bl	8001ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2224      	movs	r2, #36	; 0x24
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 f829 	bl	8006600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	695a      	ldr	r2, [r3, #20]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006604:	b0c0      	sub	sp, #256	; 0x100
 8006606:	af00      	add	r7, sp, #0
 8006608:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661c:	68d9      	ldr	r1, [r3, #12]
 800661e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	ea40 0301 	orr.w	r3, r0, r1
 8006628:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800662a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	431a      	orrs	r2, r3
 8006638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	431a      	orrs	r2, r3
 8006640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	4313      	orrs	r3, r2
 8006648:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800664c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006658:	f021 010c 	bic.w	r1, r1, #12
 800665c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006666:	430b      	orrs	r3, r1
 8006668:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800666a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667a:	6999      	ldr	r1, [r3, #24]
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	ea40 0301 	orr.w	r3, r0, r1
 8006686:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	4b8f      	ldr	r3, [pc, #572]	; (80068cc <UART_SetConfig+0x2cc>)
 8006690:	429a      	cmp	r2, r3
 8006692:	d005      	beq.n	80066a0 <UART_SetConfig+0xa0>
 8006694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	4b8d      	ldr	r3, [pc, #564]	; (80068d0 <UART_SetConfig+0x2d0>)
 800669c:	429a      	cmp	r2, r3
 800669e:	d104      	bne.n	80066aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066a0:	f7fd ffb0 	bl	8004604 <HAL_RCC_GetPCLK2Freq>
 80066a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066a8:	e003      	b.n	80066b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066aa:	f7fd ff97 	bl	80045dc <HAL_RCC_GetPCLK1Freq>
 80066ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066bc:	f040 810c 	bne.w	80068d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066c4:	2200      	movs	r2, #0
 80066c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80066ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80066d2:	4622      	mov	r2, r4
 80066d4:	462b      	mov	r3, r5
 80066d6:	1891      	adds	r1, r2, r2
 80066d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80066da:	415b      	adcs	r3, r3
 80066dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80066e2:	4621      	mov	r1, r4
 80066e4:	eb12 0801 	adds.w	r8, r2, r1
 80066e8:	4629      	mov	r1, r5
 80066ea:	eb43 0901 	adc.w	r9, r3, r1
 80066ee:	f04f 0200 	mov.w	r2, #0
 80066f2:	f04f 0300 	mov.w	r3, #0
 80066f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006702:	4690      	mov	r8, r2
 8006704:	4699      	mov	r9, r3
 8006706:	4623      	mov	r3, r4
 8006708:	eb18 0303 	adds.w	r3, r8, r3
 800670c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006710:	462b      	mov	r3, r5
 8006712:	eb49 0303 	adc.w	r3, r9, r3
 8006716:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800671a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006726:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800672a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800672e:	460b      	mov	r3, r1
 8006730:	18db      	adds	r3, r3, r3
 8006732:	653b      	str	r3, [r7, #80]	; 0x50
 8006734:	4613      	mov	r3, r2
 8006736:	eb42 0303 	adc.w	r3, r2, r3
 800673a:	657b      	str	r3, [r7, #84]	; 0x54
 800673c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006740:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006744:	f7fa fa80 	bl	8000c48 <__aeabi_uldivmod>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4b61      	ldr	r3, [pc, #388]	; (80068d4 <UART_SetConfig+0x2d4>)
 800674e:	fba3 2302 	umull	r2, r3, r3, r2
 8006752:	095b      	lsrs	r3, r3, #5
 8006754:	011c      	lsls	r4, r3, #4
 8006756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800675a:	2200      	movs	r2, #0
 800675c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006760:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006764:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006768:	4642      	mov	r2, r8
 800676a:	464b      	mov	r3, r9
 800676c:	1891      	adds	r1, r2, r2
 800676e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006770:	415b      	adcs	r3, r3
 8006772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006774:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006778:	4641      	mov	r1, r8
 800677a:	eb12 0a01 	adds.w	sl, r2, r1
 800677e:	4649      	mov	r1, r9
 8006780:	eb43 0b01 	adc.w	fp, r3, r1
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	f04f 0300 	mov.w	r3, #0
 800678c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006790:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006798:	4692      	mov	sl, r2
 800679a:	469b      	mov	fp, r3
 800679c:	4643      	mov	r3, r8
 800679e:	eb1a 0303 	adds.w	r3, sl, r3
 80067a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067a6:	464b      	mov	r3, r9
 80067a8:	eb4b 0303 	adc.w	r3, fp, r3
 80067ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80067c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067c4:	460b      	mov	r3, r1
 80067c6:	18db      	adds	r3, r3, r3
 80067c8:	643b      	str	r3, [r7, #64]	; 0x40
 80067ca:	4613      	mov	r3, r2
 80067cc:	eb42 0303 	adc.w	r3, r2, r3
 80067d0:	647b      	str	r3, [r7, #68]	; 0x44
 80067d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80067da:	f7fa fa35 	bl	8000c48 <__aeabi_uldivmod>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	4611      	mov	r1, r2
 80067e4:	4b3b      	ldr	r3, [pc, #236]	; (80068d4 <UART_SetConfig+0x2d4>)
 80067e6:	fba3 2301 	umull	r2, r3, r3, r1
 80067ea:	095b      	lsrs	r3, r3, #5
 80067ec:	2264      	movs	r2, #100	; 0x64
 80067ee:	fb02 f303 	mul.w	r3, r2, r3
 80067f2:	1acb      	subs	r3, r1, r3
 80067f4:	00db      	lsls	r3, r3, #3
 80067f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80067fa:	4b36      	ldr	r3, [pc, #216]	; (80068d4 <UART_SetConfig+0x2d4>)
 80067fc:	fba3 2302 	umull	r2, r3, r3, r2
 8006800:	095b      	lsrs	r3, r3, #5
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006808:	441c      	add	r4, r3
 800680a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800680e:	2200      	movs	r2, #0
 8006810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006814:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006818:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800681c:	4642      	mov	r2, r8
 800681e:	464b      	mov	r3, r9
 8006820:	1891      	adds	r1, r2, r2
 8006822:	63b9      	str	r1, [r7, #56]	; 0x38
 8006824:	415b      	adcs	r3, r3
 8006826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006828:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800682c:	4641      	mov	r1, r8
 800682e:	1851      	adds	r1, r2, r1
 8006830:	6339      	str	r1, [r7, #48]	; 0x30
 8006832:	4649      	mov	r1, r9
 8006834:	414b      	adcs	r3, r1
 8006836:	637b      	str	r3, [r7, #52]	; 0x34
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006844:	4659      	mov	r1, fp
 8006846:	00cb      	lsls	r3, r1, #3
 8006848:	4651      	mov	r1, sl
 800684a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800684e:	4651      	mov	r1, sl
 8006850:	00ca      	lsls	r2, r1, #3
 8006852:	4610      	mov	r0, r2
 8006854:	4619      	mov	r1, r3
 8006856:	4603      	mov	r3, r0
 8006858:	4642      	mov	r2, r8
 800685a:	189b      	adds	r3, r3, r2
 800685c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006860:	464b      	mov	r3, r9
 8006862:	460a      	mov	r2, r1
 8006864:	eb42 0303 	adc.w	r3, r2, r3
 8006868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800686c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006878:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800687c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006880:	460b      	mov	r3, r1
 8006882:	18db      	adds	r3, r3, r3
 8006884:	62bb      	str	r3, [r7, #40]	; 0x28
 8006886:	4613      	mov	r3, r2
 8006888:	eb42 0303 	adc.w	r3, r2, r3
 800688c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800688e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006892:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006896:	f7fa f9d7 	bl	8000c48 <__aeabi_uldivmod>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	4b0d      	ldr	r3, [pc, #52]	; (80068d4 <UART_SetConfig+0x2d4>)
 80068a0:	fba3 1302 	umull	r1, r3, r3, r2
 80068a4:	095b      	lsrs	r3, r3, #5
 80068a6:	2164      	movs	r1, #100	; 0x64
 80068a8:	fb01 f303 	mul.w	r3, r1, r3
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	3332      	adds	r3, #50	; 0x32
 80068b2:	4a08      	ldr	r2, [pc, #32]	; (80068d4 <UART_SetConfig+0x2d4>)
 80068b4:	fba2 2303 	umull	r2, r3, r2, r3
 80068b8:	095b      	lsrs	r3, r3, #5
 80068ba:	f003 0207 	and.w	r2, r3, #7
 80068be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4422      	add	r2, r4
 80068c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068c8:	e106      	b.n	8006ad8 <UART_SetConfig+0x4d8>
 80068ca:	bf00      	nop
 80068cc:	40011000 	.word	0x40011000
 80068d0:	40011400 	.word	0x40011400
 80068d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068dc:	2200      	movs	r2, #0
 80068de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80068e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80068ea:	4642      	mov	r2, r8
 80068ec:	464b      	mov	r3, r9
 80068ee:	1891      	adds	r1, r2, r2
 80068f0:	6239      	str	r1, [r7, #32]
 80068f2:	415b      	adcs	r3, r3
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
 80068f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068fa:	4641      	mov	r1, r8
 80068fc:	1854      	adds	r4, r2, r1
 80068fe:	4649      	mov	r1, r9
 8006900:	eb43 0501 	adc.w	r5, r3, r1
 8006904:	f04f 0200 	mov.w	r2, #0
 8006908:	f04f 0300 	mov.w	r3, #0
 800690c:	00eb      	lsls	r3, r5, #3
 800690e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006912:	00e2      	lsls	r2, r4, #3
 8006914:	4614      	mov	r4, r2
 8006916:	461d      	mov	r5, r3
 8006918:	4643      	mov	r3, r8
 800691a:	18e3      	adds	r3, r4, r3
 800691c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006920:	464b      	mov	r3, r9
 8006922:	eb45 0303 	adc.w	r3, r5, r3
 8006926:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800692a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006936:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800693a:	f04f 0200 	mov.w	r2, #0
 800693e:	f04f 0300 	mov.w	r3, #0
 8006942:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006946:	4629      	mov	r1, r5
 8006948:	008b      	lsls	r3, r1, #2
 800694a:	4621      	mov	r1, r4
 800694c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006950:	4621      	mov	r1, r4
 8006952:	008a      	lsls	r2, r1, #2
 8006954:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006958:	f7fa f976 	bl	8000c48 <__aeabi_uldivmod>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4b60      	ldr	r3, [pc, #384]	; (8006ae4 <UART_SetConfig+0x4e4>)
 8006962:	fba3 2302 	umull	r2, r3, r3, r2
 8006966:	095b      	lsrs	r3, r3, #5
 8006968:	011c      	lsls	r4, r3, #4
 800696a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800696e:	2200      	movs	r2, #0
 8006970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006974:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006978:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800697c:	4642      	mov	r2, r8
 800697e:	464b      	mov	r3, r9
 8006980:	1891      	adds	r1, r2, r2
 8006982:	61b9      	str	r1, [r7, #24]
 8006984:	415b      	adcs	r3, r3
 8006986:	61fb      	str	r3, [r7, #28]
 8006988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800698c:	4641      	mov	r1, r8
 800698e:	1851      	adds	r1, r2, r1
 8006990:	6139      	str	r1, [r7, #16]
 8006992:	4649      	mov	r1, r9
 8006994:	414b      	adcs	r3, r1
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	f04f 0200 	mov.w	r2, #0
 800699c:	f04f 0300 	mov.w	r3, #0
 80069a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069a4:	4659      	mov	r1, fp
 80069a6:	00cb      	lsls	r3, r1, #3
 80069a8:	4651      	mov	r1, sl
 80069aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ae:	4651      	mov	r1, sl
 80069b0:	00ca      	lsls	r2, r1, #3
 80069b2:	4610      	mov	r0, r2
 80069b4:	4619      	mov	r1, r3
 80069b6:	4603      	mov	r3, r0
 80069b8:	4642      	mov	r2, r8
 80069ba:	189b      	adds	r3, r3, r2
 80069bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069c0:	464b      	mov	r3, r9
 80069c2:	460a      	mov	r2, r1
 80069c4:	eb42 0303 	adc.w	r3, r2, r3
 80069c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80069d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	f04f 0300 	mov.w	r3, #0
 80069e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80069e4:	4649      	mov	r1, r9
 80069e6:	008b      	lsls	r3, r1, #2
 80069e8:	4641      	mov	r1, r8
 80069ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069ee:	4641      	mov	r1, r8
 80069f0:	008a      	lsls	r2, r1, #2
 80069f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80069f6:	f7fa f927 	bl	8000c48 <__aeabi_uldivmod>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	4611      	mov	r1, r2
 8006a00:	4b38      	ldr	r3, [pc, #224]	; (8006ae4 <UART_SetConfig+0x4e4>)
 8006a02:	fba3 2301 	umull	r2, r3, r3, r1
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	2264      	movs	r2, #100	; 0x64
 8006a0a:	fb02 f303 	mul.w	r3, r2, r3
 8006a0e:	1acb      	subs	r3, r1, r3
 8006a10:	011b      	lsls	r3, r3, #4
 8006a12:	3332      	adds	r3, #50	; 0x32
 8006a14:	4a33      	ldr	r2, [pc, #204]	; (8006ae4 <UART_SetConfig+0x4e4>)
 8006a16:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1a:	095b      	lsrs	r3, r3, #5
 8006a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a20:	441c      	add	r4, r3
 8006a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a26:	2200      	movs	r2, #0
 8006a28:	673b      	str	r3, [r7, #112]	; 0x70
 8006a2a:	677a      	str	r2, [r7, #116]	; 0x74
 8006a2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a30:	4642      	mov	r2, r8
 8006a32:	464b      	mov	r3, r9
 8006a34:	1891      	adds	r1, r2, r2
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	415b      	adcs	r3, r3
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a40:	4641      	mov	r1, r8
 8006a42:	1851      	adds	r1, r2, r1
 8006a44:	6039      	str	r1, [r7, #0]
 8006a46:	4649      	mov	r1, r9
 8006a48:	414b      	adcs	r3, r1
 8006a4a:	607b      	str	r3, [r7, #4]
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	f04f 0300 	mov.w	r3, #0
 8006a54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a58:	4659      	mov	r1, fp
 8006a5a:	00cb      	lsls	r3, r1, #3
 8006a5c:	4651      	mov	r1, sl
 8006a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a62:	4651      	mov	r1, sl
 8006a64:	00ca      	lsls	r2, r1, #3
 8006a66:	4610      	mov	r0, r2
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	189b      	adds	r3, r3, r2
 8006a70:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a72:	464b      	mov	r3, r9
 8006a74:	460a      	mov	r2, r1
 8006a76:	eb42 0303 	adc.w	r3, r2, r3
 8006a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	663b      	str	r3, [r7, #96]	; 0x60
 8006a86:	667a      	str	r2, [r7, #100]	; 0x64
 8006a88:	f04f 0200 	mov.w	r2, #0
 8006a8c:	f04f 0300 	mov.w	r3, #0
 8006a90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a94:	4649      	mov	r1, r9
 8006a96:	008b      	lsls	r3, r1, #2
 8006a98:	4641      	mov	r1, r8
 8006a9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a9e:	4641      	mov	r1, r8
 8006aa0:	008a      	lsls	r2, r1, #2
 8006aa2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006aa6:	f7fa f8cf 	bl	8000c48 <__aeabi_uldivmod>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	4b0d      	ldr	r3, [pc, #52]	; (8006ae4 <UART_SetConfig+0x4e4>)
 8006ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ab4:	095b      	lsrs	r3, r3, #5
 8006ab6:	2164      	movs	r1, #100	; 0x64
 8006ab8:	fb01 f303 	mul.w	r3, r1, r3
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	011b      	lsls	r3, r3, #4
 8006ac0:	3332      	adds	r3, #50	; 0x32
 8006ac2:	4a08      	ldr	r2, [pc, #32]	; (8006ae4 <UART_SetConfig+0x4e4>)
 8006ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac8:	095b      	lsrs	r3, r3, #5
 8006aca:	f003 020f 	and.w	r2, r3, #15
 8006ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4422      	add	r2, r4
 8006ad6:	609a      	str	r2, [r3, #8]
}
 8006ad8:	bf00      	nop
 8006ada:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ae4:	51eb851f 	.word	0x51eb851f

08006ae8 <gyroInit>:
static u8 spiTxBuf[2];
static u8 spiRxBuf[2];


void gyroInit(void)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006aec:	2200      	movs	r2, #0
 8006aee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006af2:	484a      	ldr	r0, [pc, #296]	; (8006c1c <gyroInit+0x134>)
 8006af4:	f7fd f8a0 	bl	8003c38 <HAL_GPIO_WritePin>
	spiTxBuf[0] = 0x0F | 0x80; // WHO_AM_I
 8006af8:	4b49      	ldr	r3, [pc, #292]	; (8006c20 <gyroInit+0x138>)
 8006afa:	228f      	movs	r2, #143	; 0x8f
 8006afc:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8006afe:	2332      	movs	r3, #50	; 0x32
 8006b00:	2201      	movs	r2, #1
 8006b02:	4947      	ldr	r1, [pc, #284]	; (8006c20 <gyroInit+0x138>)
 8006b04:	4847      	ldr	r0, [pc, #284]	; (8006c24 <gyroInit+0x13c>)
 8006b06:	f7fd fe35 	bl	8004774 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &gyro_identity, 1, 50);
 8006b0a:	2332      	movs	r3, #50	; 0x32
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	4946      	ldr	r1, [pc, #280]	; (8006c28 <gyroInit+0x140>)
 8006b10:	4844      	ldr	r0, [pc, #272]	; (8006c24 <gyroInit+0x13c>)
 8006b12:	f7fd ff6b 	bl	80049ec <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006b16:	2201      	movs	r2, #1
 8006b18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b1c:	483f      	ldr	r0, [pc, #252]	; (8006c1c <gyroInit+0x134>)
 8006b1e:	f7fd f88b 	bl	8003c38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006b22:	2014      	movs	r0, #20
 8006b24:	f7fb fecc 	bl	80028c0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b2e:	483b      	ldr	r0, [pc, #236]	; (8006c1c <gyroInit+0x134>)
 8006b30:	f7fd f882 	bl	8003c38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006b34:	2014      	movs	r0, #20
 8006b36:	f7fb fec3 	bl	80028c0 <HAL_Delay>
	spiTxBuf[0] = 0x20; // CTRL1:           DR1 DR0 BW1 BW0 PD Zen Xen Yen
 8006b3a:	4b39      	ldr	r3, [pc, #228]	; (8006c20 <gyroInit+0x138>)
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0xfc; // 800Hz, BW-100Hz   1   1   1   1   1  1   0   0
 8006b40:	4b37      	ldr	r3, [pc, #220]	; (8006c20 <gyroInit+0x138>)
 8006b42:	22fc      	movs	r2, #252	; 0xfc
 8006b44:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8006b46:	2332      	movs	r3, #50	; 0x32
 8006b48:	2202      	movs	r2, #2
 8006b4a:	4935      	ldr	r1, [pc, #212]	; (8006c20 <gyroInit+0x138>)
 8006b4c:	4835      	ldr	r0, [pc, #212]	; (8006c24 <gyroInit+0x13c>)
 8006b4e:	f7fd fe11 	bl	8004774 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006b52:	2201      	movs	r2, #1
 8006b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b58:	4830      	ldr	r0, [pc, #192]	; (8006c1c <gyroInit+0x134>)
 8006b5a:	f7fd f86d 	bl	8003c38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006b5e:	2014      	movs	r0, #20
 8006b60:	f7fb feae 	bl	80028c0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006b64:	2200      	movs	r2, #0
 8006b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b6a:	482c      	ldr	r0, [pc, #176]	; (8006c1c <gyroInit+0x134>)
 8006b6c:	f7fd f864 	bl	8003c38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006b70:	2014      	movs	r0, #20
 8006b72:	f7fb fea5 	bl	80028c0 <HAL_Delay>
	spiTxBuf[0] = 0x21; // CTRL2:            EXTRen LVLen HPM1 HMP0 HPCF3 HPCF2 HPCF1 HPCF0
 8006b76:	4b2a      	ldr	r3, [pc, #168]	; (8006c20 <gyroInit+0x138>)
 8006b78:	2221      	movs	r2, #33	; 0x21
 8006b7a:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x03; //  2Hz                0      0    0    0      0    1     0    1
 8006b7c:	4b28      	ldr	r3, [pc, #160]	; (8006c20 <gyroInit+0x138>)
 8006b7e:	2203      	movs	r2, #3
 8006b80:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8006b82:	2332      	movs	r3, #50	; 0x32
 8006b84:	2202      	movs	r2, #2
 8006b86:	4926      	ldr	r1, [pc, #152]	; (8006c20 <gyroInit+0x138>)
 8006b88:	4826      	ldr	r0, [pc, #152]	; (8006c24 <gyroInit+0x13c>)
 8006b8a:	f7fd fdf3 	bl	8004774 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b94:	4821      	ldr	r0, [pc, #132]	; (8006c1c <gyroInit+0x134>)
 8006b96:	f7fd f84f 	bl	8003c38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006b9a:	2014      	movs	r0, #20
 8006b9c:	f7fb fe90 	bl	80028c0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ba6:	481d      	ldr	r0, [pc, #116]	; (8006c1c <gyroInit+0x134>)
 8006ba8:	f7fd f846 	bl	8003c38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006bac:	2014      	movs	r0, #20
 8006bae:	f7fb fe87 	bl	80028c0 <HAL_Delay>
	spiTxBuf[0] = 0x23; // CTRL4:             BDU      BLE    FS1    FS0     IMPen   ST2  ST1   SIM
 8006bb2:	4b1b      	ldr	r3, [pc, #108]	; (8006c20 <gyroInit+0x138>)
 8006bb4:	2223      	movs	r2, #35	; 0x23
 8006bb6:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x30; // 2000dps     	       0        0    	1      1       0       0    0     0
 8006bb8:	4b19      	ldr	r3, [pc, #100]	; (8006c20 <gyroInit+0x138>)
 8006bba:	2230      	movs	r2, #48	; 0x30
 8006bbc:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8006bbe:	2332      	movs	r3, #50	; 0x32
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	4917      	ldr	r1, [pc, #92]	; (8006c20 <gyroInit+0x138>)
 8006bc4:	4817      	ldr	r0, [pc, #92]	; (8006c24 <gyroInit+0x13c>)
 8006bc6:	f7fd fdd5 	bl	8004774 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006bd0:	4812      	ldr	r0, [pc, #72]	; (8006c1c <gyroInit+0x134>)
 8006bd2:	f7fd f831 	bl	8003c38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006bd6:	2014      	movs	r0, #20
 8006bd8:	f7fb fe72 	bl	80028c0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006be2:	480e      	ldr	r0, [pc, #56]	; (8006c1c <gyroInit+0x134>)
 8006be4:	f7fd f828 	bl	8003c38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006be8:	2014      	movs	r0, #20
 8006bea:	f7fb fe69 	bl	80028c0 <HAL_Delay>
	spiTxBuf[0] = 0x24; // CTRL5:              BOOT FIFO_EN   StopOnFTH    HPen   IG_Sel1    IG_Sel2   Out_Sel1   Out_Sel0
 8006bee:	4b0c      	ldr	r3, [pc, #48]	; (8006c20 <gyroInit+0x138>)
 8006bf0:	2224      	movs	r2, #36	; 0x24
 8006bf2:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x00; //                      0      0         0           0       0         0          0        0
 8006bf4:	4b0a      	ldr	r3, [pc, #40]	; (8006c20 <gyroInit+0x138>)
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8006bfa:	2332      	movs	r3, #50	; 0x32
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	4908      	ldr	r1, [pc, #32]	; (8006c20 <gyroInit+0x138>)
 8006c00:	4808      	ldr	r0, [pc, #32]	; (8006c24 <gyroInit+0x13c>)
 8006c02:	f7fd fdb7 	bl	8004774 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006c06:	2201      	movs	r2, #1
 8006c08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c0c:	4803      	ldr	r0, [pc, #12]	; (8006c1c <gyroInit+0x134>)
 8006c0e:	f7fd f813 	bl	8003c38 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006c12:	2014      	movs	r0, #20
 8006c14:	f7fb fe54 	bl	80028c0 <HAL_Delay>
}
 8006c18:	bf00      	nop
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	40020800 	.word	0x40020800
 8006c20:	20000828 	.word	0x20000828
 8006c24:	200002cc 	.word	0x200002cc
 8006c28:	20000810 	.word	0x20000810

08006c2c <gyroUpdate>:

int gyroUpdate(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
	LED8_ON;
 8006c30:	2201      	movs	r2, #1
 8006c32:	2110      	movs	r1, #16
 8006c34:	483d      	ldr	r0, [pc, #244]	; (8006d2c <gyroUpdate+0x100>)
 8006c36:	f7fc ffff 	bl	8003c38 <HAL_GPIO_WritePin>
	angle_rate = (float)(readGyro() - offset) * GYRO_SENSITIVITY;
 8006c3a:	f000 f887 	bl	8006d4c <readGyro>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	ee07 3a90 	vmov	s15, r3
 8006c44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c48:	4b39      	ldr	r3, [pc, #228]	; (8006d30 <gyroUpdate+0x104>)
 8006c4a:	edd3 7a00 	vldr	s15, [r3]
 8006c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c52:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006d34 <gyroUpdate+0x108>
 8006c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c5a:	4b37      	ldr	r3, [pc, #220]	; (8006d38 <gyroUpdate+0x10c>)
 8006c5c:	edc3 7a00 	vstr	s15, [r3]
	angle_rate = (abs(angle_rate) < noise && abs(angle_rate)<NOISE_THRESHOLD) ? 0 : angle_rate;
 8006c60:	4b35      	ldr	r3, [pc, #212]	; (8006d38 <gyroUpdate+0x10c>)
 8006c62:	edd3 7a00 	vldr	s15, [r3]
 8006c66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c6a:	ee17 3a90 	vmov	r3, s15
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	bfb8      	it	lt
 8006c72:	425b      	neglt	r3, r3
 8006c74:	ee07 3a90 	vmov	s15, r3
 8006c78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c7c:	4b2f      	ldr	r3, [pc, #188]	; (8006d3c <gyroUpdate+0x110>)
 8006c7e:	edd3 7a00 	vldr	s15, [r3]
 8006c82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c8a:	bf4c      	ite	mi
 8006c8c:	2301      	movmi	r3, #1
 8006c8e:	2300      	movpl	r3, #0
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	f083 0301 	eor.w	r3, r3, #1
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d11c      	bne.n	8006cd6 <gyroUpdate+0xaa>
 8006c9c:	4b26      	ldr	r3, [pc, #152]	; (8006d38 <gyroUpdate+0x10c>)
 8006c9e:	edd3 7a00 	vldr	s15, [r3]
 8006ca2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ca6:	ee17 3a90 	vmov	r3, s15
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	bfb8      	it	lt
 8006cae:	425b      	neglt	r3, r3
 8006cb0:	ee07 3a90 	vmov	s15, r3
 8006cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cb8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8006cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc4:	bf4c      	ite	mi
 8006cc6:	2301      	movmi	r3, #1
 8006cc8:	2300      	movpl	r3, #0
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	f083 0301 	eor.w	r3, r3, #1
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <gyroUpdate+0xb0>
 8006cd6:	4b18      	ldr	r3, [pc, #96]	; (8006d38 <gyroUpdate+0x10c>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	e001      	b.n	8006ce0 <gyroUpdate+0xb4>
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	4a15      	ldr	r2, [pc, #84]	; (8006d38 <gyroUpdate+0x10c>)
 8006ce2:	6013      	str	r3, [r2, #0]
	angle_z += ((angle_rate + last_angle_rate) * timeDifference) / (2.0f);
 8006ce4:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <gyroUpdate+0x10c>)
 8006ce6:	ed93 7a00 	vldr	s14, [r3]
 8006cea:	4b15      	ldr	r3, [pc, #84]	; (8006d40 <gyroUpdate+0x114>)
 8006cec:	edd3 7a00 	vldr	s15, [r3]
 8006cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cf4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8006d44 <gyroUpdate+0x118>
 8006cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cfc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006d00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006d04:	4b10      	ldr	r3, [pc, #64]	; (8006d48 <gyroUpdate+0x11c>)
 8006d06:	edd3 7a00 	vldr	s15, [r3]
 8006d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d0e:	4b0e      	ldr	r3, [pc, #56]	; (8006d48 <gyroUpdate+0x11c>)
 8006d10:	edc3 7a00 	vstr	s15, [r3]
	last_angle_rate = angle_rate;
 8006d14:	4b08      	ldr	r3, [pc, #32]	; (8006d38 <gyroUpdate+0x10c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a09      	ldr	r2, [pc, #36]	; (8006d40 <gyroUpdate+0x114>)
 8006d1a:	6013      	str	r3, [r2, #0]
	LED8_OFF;
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2110      	movs	r1, #16
 8006d20:	4802      	ldr	r0, [pc, #8]	; (8006d2c <gyroUpdate+0x100>)
 8006d22:	f7fc ff89 	bl	8003c38 <HAL_GPIO_WritePin>
	return 0;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	40020400 	.word	0x40020400
 8006d30:	20000820 	.word	0x20000820
 8006d34:	3d916873 	.word	0x3d916873
 8006d38:	2000081c 	.word	0x2000081c
 8006d3c:	20000824 	.word	0x20000824
 8006d40:	20000818 	.word	0x20000818
 8006d44:	3b03126f 	.word	0x3b03126f
 8006d48:	20000814 	.word	0x20000814

08006d4c <readGyro>:

int16_t readGyro(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
	u16 raw_z = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006d56:	2200      	movs	r2, #0
 8006d58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d5c:	4821      	ldr	r0, [pc, #132]	; (8006de4 <readGyro+0x98>)
 8006d5e:	f7fc ff6b 	bl	8003c38 <HAL_GPIO_WritePin>
	spiTxBuf[0] = 0x2c | 0x80; // 0x2c ~ L8 bits OUT_Z(2's complement form),  0x2c | 0x80 ~ READ OPERATION
 8006d62:	4b21      	ldr	r3, [pc, #132]	; (8006de8 <readGyro+0x9c>)
 8006d64:	22ac      	movs	r2, #172	; 0xac
 8006d66:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8006d68:	2332      	movs	r3, #50	; 0x32
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	491e      	ldr	r1, [pc, #120]	; (8006de8 <readGyro+0x9c>)
 8006d6e:	481f      	ldr	r0, [pc, #124]	; (8006dec <readGyro+0xa0>)
 8006d70:	f7fd fd00 	bl	8004774 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &spiRxBuf[0], 1, 50);
 8006d74:	2332      	movs	r3, #50	; 0x32
 8006d76:	2201      	movs	r2, #1
 8006d78:	491d      	ldr	r1, [pc, #116]	; (8006df0 <readGyro+0xa4>)
 8006d7a:	481c      	ldr	r0, [pc, #112]	; (8006dec <readGyro+0xa0>)
 8006d7c:	f7fd fe36 	bl	80049ec <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006d80:	2201      	movs	r2, #1
 8006d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d86:	4817      	ldr	r0, [pc, #92]	; (8006de4 <readGyro+0x98>)
 8006d88:	f7fc ff56 	bl	8003c38 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d92:	4814      	ldr	r0, [pc, #80]	; (8006de4 <readGyro+0x98>)
 8006d94:	f7fc ff50 	bl	8003c38 <HAL_GPIO_WritePin>
	spiTxBuf[0] = 0x2d | 0x80;
 8006d98:	4b13      	ldr	r3, [pc, #76]	; (8006de8 <readGyro+0x9c>)
 8006d9a:	22ad      	movs	r2, #173	; 0xad
 8006d9c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50); // 0x2c ~ U8 bits OUT_Z(2's complement form),  0x80 ~ READ OPERATION
 8006d9e:	2332      	movs	r3, #50	; 0x32
 8006da0:	2201      	movs	r2, #1
 8006da2:	4911      	ldr	r1, [pc, #68]	; (8006de8 <readGyro+0x9c>)
 8006da4:	4811      	ldr	r0, [pc, #68]	; (8006dec <readGyro+0xa0>)
 8006da6:	f7fd fce5 	bl	8004774 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &spiRxBuf[1], 1, 50);
 8006daa:	2332      	movs	r3, #50	; 0x32
 8006dac:	2201      	movs	r2, #1
 8006dae:	4911      	ldr	r1, [pc, #68]	; (8006df4 <readGyro+0xa8>)
 8006db0:	480e      	ldr	r0, [pc, #56]	; (8006dec <readGyro+0xa0>)
 8006db2:	f7fd fe1b 	bl	80049ec <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006db6:	2201      	movs	r2, #1
 8006db8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dbc:	4809      	ldr	r0, [pc, #36]	; (8006de4 <readGyro+0x98>)
 8006dbe:	f7fc ff3b 	bl	8003c38 <HAL_GPIO_WritePin>

	raw_z = (spiRxBuf[1] << 8) | spiRxBuf[0];
 8006dc2:	4b0b      	ldr	r3, [pc, #44]	; (8006df0 <readGyro+0xa4>)
 8006dc4:	785b      	ldrb	r3, [r3, #1]
 8006dc6:	021b      	lsls	r3, r3, #8
 8006dc8:	b21a      	sxth	r2, r3
 8006dca:	4b09      	ldr	r3, [pc, #36]	; (8006df0 <readGyro+0xa4>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	b21b      	sxth	r3, r3
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	b21b      	sxth	r3, r3
 8006dd4:	80fb      	strh	r3, [r7, #6]
	return (int16_t)raw_z;
 8006dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	40020800 	.word	0x40020800
 8006de8:	20000828 	.word	0x20000828
 8006dec:	200002cc 	.word	0x200002cc
 8006df0:	2000082c 	.word	0x2000082c
 8006df4:	2000082d 	.word	0x2000082d

08006df8 <gyroCalibration>:

void gyroCalibration(void)
{
 8006df8:	b5b0      	push	{r4, r5, r7, lr}
 8006dfa:	f5ad 6dfc 	sub.w	sp, sp, #2016	; 0x7e0
 8006dfe:	af00      	add	r7, sp, #0
	LED9_ON, LED10_ON, LED11_ON;
 8006e00:	2201      	movs	r2, #1
 8006e02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e06:	486a      	ldr	r0, [pc, #424]	; (8006fb0 <gyroCalibration+0x1b8>)
 8006e08:	f7fc ff16 	bl	8003c38 <HAL_GPIO_WritePin>
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	2101      	movs	r1, #1
 8006e10:	4868      	ldr	r0, [pc, #416]	; (8006fb4 <gyroCalibration+0x1bc>)
 8006e12:	f7fc ff11 	bl	8003c38 <HAL_GPIO_WritePin>
 8006e16:	2201      	movs	r2, #1
 8006e18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e1c:	4864      	ldr	r0, [pc, #400]	; (8006fb0 <gyroCalibration+0x1b8>)
 8006e1e:	f7fc ff0b 	bl	8003c38 <HAL_GPIO_WritePin>
	int16_t calibration_buffer[BUFFER_LENGTH];
	int32_t calibration_sum = 0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc

	for (u32 idx = 0; idx < BUFFER_LENGTH; idx++)
 8006e28:	2300      	movs	r3, #0
 8006e2a:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8
 8006e2e:	e021      	b.n	8006e74 <gyroCalibration+0x7c>
	{
		calibration_buffer[idx] = readGyro();
 8006e30:	f7ff ff8c 	bl	8006d4c <readGyro>
 8006e34:	4603      	mov	r3, r0
 8006e36:	4619      	mov	r1, r3
 8006e38:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8006e3c:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8006e40:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	; 0x7d8
 8006e44:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		HAL_Delay(2);
 8006e48:	2002      	movs	r0, #2
 8006e4a:	f7fb fd39 	bl	80028c0 <HAL_Delay>
		calibration_sum += calibration_buffer[idx];
 8006e4e:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8006e52:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8006e56:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	; 0x7d8
 8006e5a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8006e64:	4413      	add	r3, r2
 8006e66:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
	for (u32 idx = 0; idx < BUFFER_LENGTH; idx++)
 8006e6a:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8006e6e:	3301      	adds	r3, #1
 8006e70:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8
 8006e74:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8006e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e7c:	d3d8      	bcc.n	8006e30 <gyroCalibration+0x38>
	}

	offset = (float)calibration_sum / BUFFER_LENGTH;
 8006e7e:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e8a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8006fb8 <gyroCalibration+0x1c0>
 8006e8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e92:	4b4a      	ldr	r3, [pc, #296]	; (8006fbc <gyroCalibration+0x1c4>)
 8006e94:	edc3 7a00 	vstr	s15, [r3]

	for (u32 idx = 0; idx < BUFFER_LENGTH; idx++)
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 8006e9e:	e037      	b.n	8006f10 <gyroCalibration+0x118>
		noise += pow(calibration_buffer[idx] - offset, 2);
 8006ea0:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8006ea4:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8006ea8:	f8d7 27d4 	ldr.w	r2, [r7, #2004]	; 0x7d4
 8006eac:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8006eb0:	ee07 3a90 	vmov	s15, r3
 8006eb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006eb8:	4b40      	ldr	r3, [pc, #256]	; (8006fbc <gyroCalibration+0x1c4>)
 8006eba:	edd3 7a00 	vldr	s15, [r3]
 8006ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ec2:	ee17 0a90 	vmov	r0, s15
 8006ec6:	f7f9 fb3f 	bl	8000548 <__aeabi_f2d>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8006fa0 <gyroCalibration+0x1a8>
 8006ed2:	ec43 2b10 	vmov	d0, r2, r3
 8006ed6:	f000 ff0d 	bl	8007cf4 <pow>
 8006eda:	ec55 4b10 	vmov	r4, r5, d0
 8006ede:	4b38      	ldr	r3, [pc, #224]	; (8006fc0 <gyroCalibration+0x1c8>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7f9 fb30 	bl	8000548 <__aeabi_f2d>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	4620      	mov	r0, r4
 8006eee:	4629      	mov	r1, r5
 8006ef0:	f7f9 f9cc 	bl	800028c <__adddf3>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4610      	mov	r0, r2
 8006efa:	4619      	mov	r1, r3
 8006efc:	f7f9 fe54 	bl	8000ba8 <__aeabi_d2f>
 8006f00:	4603      	mov	r3, r0
 8006f02:	4a2f      	ldr	r2, [pc, #188]	; (8006fc0 <gyroCalibration+0x1c8>)
 8006f04:	6013      	str	r3, [r2, #0]
	for (u32 idx = 0; idx < BUFFER_LENGTH; idx++)
 8006f06:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 8006f10:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8006f14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f18:	d3c2      	bcc.n	8006ea0 <gyroCalibration+0xa8>
	noise = pow(noise, .5) / 2 * GYRO_SENSITIVITY;
 8006f1a:	4b29      	ldr	r3, [pc, #164]	; (8006fc0 <gyroCalibration+0x1c8>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7f9 fb12 	bl	8000548 <__aeabi_f2d>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8006fa8 <gyroCalibration+0x1b0>
 8006f2c:	ec43 2b10 	vmov	d0, r2, r3
 8006f30:	f000 fee0 	bl	8007cf4 <pow>
 8006f34:	ec51 0b10 	vmov	r0, r1, d0
 8006f38:	f04f 0200 	mov.w	r2, #0
 8006f3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f40:	f7f9 fc84 	bl	800084c <__aeabi_ddiv>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4614      	mov	r4, r2
 8006f4a:	461d      	mov	r5, r3
 8006f4c:	4b1d      	ldr	r3, [pc, #116]	; (8006fc4 <gyroCalibration+0x1cc>)
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7f9 fafa 	bl	8000548 <__aeabi_f2d>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4620      	mov	r0, r4
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	f7f9 fb4c 	bl	80005f8 <__aeabi_dmul>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4610      	mov	r0, r2
 8006f66:	4619      	mov	r1, r3
 8006f68:	f7f9 fe1e 	bl	8000ba8 <__aeabi_d2f>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	4a14      	ldr	r2, [pc, #80]	; (8006fc0 <gyroCalibration+0x1c8>)
 8006f70:	6013      	str	r3, [r2, #0]

	LED9_OFF, LED10_OFF, LED11_OFF;
 8006f72:	2200      	movs	r2, #0
 8006f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f78:	480d      	ldr	r0, [pc, #52]	; (8006fb0 <gyroCalibration+0x1b8>)
 8006f7a:	f7fc fe5d 	bl	8003c38 <HAL_GPIO_WritePin>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2101      	movs	r1, #1
 8006f82:	480c      	ldr	r0, [pc, #48]	; (8006fb4 <gyroCalibration+0x1bc>)
 8006f84:	f7fc fe58 	bl	8003c38 <HAL_GPIO_WritePin>
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f8e:	4808      	ldr	r0, [pc, #32]	; (8006fb0 <gyroCalibration+0x1b8>)
 8006f90:	f7fc fe52 	bl	8003c38 <HAL_GPIO_WritePin>

	return;
 8006f94:	bf00      	nop
 8006f96:	f507 67fc 	add.w	r7, r7, #2016	; 0x7e0
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	00000000 	.word	0x00000000
 8006fa4:	40000000 	.word	0x40000000
 8006fa8:	00000000 	.word	0x00000000
 8006fac:	3fe00000 	.word	0x3fe00000
 8006fb0:	40020400 	.word	0x40020400
 8006fb4:	40020800 	.word	0x40020800
 8006fb8:	447a0000 	.word	0x447a0000
 8006fbc:	20000820 	.word	0x20000820
 8006fc0:	20000824 	.word	0x20000824
 8006fc4:	3d916873 	.word	0x3d916873

08006fc8 <pointTurnLR>:
	setWheels();
	return false;
}

bool pointTurnLR(float angle)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	ed87 0a01 	vstr	s0, [r7, #4]
	float s_error = 0;
 8006fd2:	f04f 0300 	mov.w	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]

	if (start_angle == 0)
 8006fd8:	4b5f      	ldr	r3, [pc, #380]	; (8007158 <pointTurnLR+0x190>)
 8006fda:	edd3 7a00 	vldr	s15, [r3]
 8006fde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe6:	d117      	bne.n	8007018 <pointTurnLR+0x50>
		LED2_ON,
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006fee:	485b      	ldr	r0, [pc, #364]	; (800715c <pointTurnLR+0x194>)
 8006ff0:	f7fc fe22 	bl	8003c38 <HAL_GPIO_WritePin>
			start_angle = angle_z, l_start = l_position, r_start = r_position,
 8006ff4:	4b5a      	ldr	r3, [pc, #360]	; (8007160 <pointTurnLR+0x198>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a57      	ldr	r2, [pc, #348]	; (8007158 <pointTurnLR+0x190>)
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	4a58      	ldr	r2, [pc, #352]	; (8007164 <pointTurnLR+0x19c>)
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	4b58      	ldr	r3, [pc, #352]	; (8007168 <pointTurnLR+0x1a0>)
 8007008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700a:	43db      	mvns	r3, r3
 800700c:	4a57      	ldr	r2, [pc, #348]	; (800716c <pointTurnLR+0x1a4>)
 800700e:	6013      	str	r3, [r2, #0]
			s_last_error = 0;
 8007010:	4b57      	ldr	r3, [pc, #348]	; (8007170 <pointTurnLR+0x1a8>)
 8007012:	f04f 0200 	mov.w	r2, #0
 8007016:	601a      	str	r2, [r3, #0]

	s_error = (start_angle + angle) - angle_z;
 8007018:	4b4f      	ldr	r3, [pc, #316]	; (8007158 <pointTurnLR+0x190>)
 800701a:	ed93 7a00 	vldr	s14, [r3]
 800701e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007022:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007026:	4b4e      	ldr	r3, [pc, #312]	; (8007160 <pointTurnLR+0x198>)
 8007028:	edd3 7a00 	vldr	s15, [r3]
 800702c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007030:	edc7 7a03 	vstr	s15, [r7, #12]
	PD_correction_sc = (float)(s_error * SCKp[1] + (s_error - s_last_error) * SCKd[1]) / SC_RED[1];
 8007034:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007038:	edd7 7a03 	vldr	s15, [r7, #12]
 800703c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007040:	4b4b      	ldr	r3, [pc, #300]	; (8007170 <pointTurnLR+0x1a8>)
 8007042:	edd3 7a00 	vldr	s15, [r3]
 8007046:	edd7 6a03 	vldr	s13, [r7, #12]
 800704a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800704e:	eddf 6a49 	vldr	s13, [pc, #292]	; 8007174 <pointTurnLR+0x1ac>
 8007052:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007056:	ee77 6a27 	vadd.f32	s13, s14, s15
 800705a:	eddf 7a47 	vldr	s15, [pc, #284]	; 8007178 <pointTurnLR+0x1b0>
 800705e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007066:	4b45      	ldr	r3, [pc, #276]	; (800717c <pointTurnLR+0x1b4>)
 8007068:	edc3 7a00 	vstr	s15, [r3]
	s_last_error = s_error;
 800706c:	4a40      	ldr	r2, [pc, #256]	; (8007170 <pointTurnLR+0x1a8>)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6013      	str	r3, [r2, #0]


	if (abs(PD_correction_sc) < 1e-8 && abs(s_error)<1e-2)
 8007072:	4b42      	ldr	r3, [pc, #264]	; (800717c <pointTurnLR+0x1b4>)
 8007074:	edd3 7a00 	vldr	s15, [r3]
 8007078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800707c:	ee17 3a90 	vmov	r3, s15
 8007080:	2b00      	cmp	r3, #0
 8007082:	db3d      	blt.n	8007100 <pointTurnLR+0x138>
 8007084:	4b3d      	ldr	r3, [pc, #244]	; (800717c <pointTurnLR+0x1b4>)
 8007086:	edd3 7a00 	vldr	s15, [r3]
 800708a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800708e:	ee17 3a90 	vmov	r3, s15
 8007092:	2b00      	cmp	r3, #0
 8007094:	dc34      	bgt.n	8007100 <pointTurnLR+0x138>
 8007096:	edd7 7a03 	vldr	s15, [r7, #12]
 800709a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800709e:	ee17 3a90 	vmov	r3, s15
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	db2c      	blt.n	8007100 <pointTurnLR+0x138>
 80070a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80070aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070ae:	ee17 3a90 	vmov	r3, s15
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	dc24      	bgt.n	8007100 <pointTurnLR+0x138>
	{
		if (sc_counter < 10)
 80070b6:	4b32      	ldr	r3, [pc, #200]	; (8007180 <pointTurnLR+0x1b8>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b09      	cmp	r3, #9
 80070bc:	dc09      	bgt.n	80070d2 <pointTurnLR+0x10a>
		{
			sc_counter++;
 80070be:	4b30      	ldr	r3, [pc, #192]	; (8007180 <pointTurnLR+0x1b8>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3301      	adds	r3, #1
 80070c4:	4a2e      	ldr	r2, [pc, #184]	; (8007180 <pointTurnLR+0x1b8>)
 80070c6:	6013      	str	r3, [r2, #0]
			HAL_Delay(20);
 80070c8:	2014      	movs	r0, #20
 80070ca:	f7fb fbf9 	bl	80028c0 <HAL_Delay>
			return false;
 80070ce:	2300      	movs	r3, #0
 80070d0:	e03e      	b.n	8007150 <pointTurnLR+0x188>
		}
		// angularController(IDLE);
		LED2_OFF,
 80070d2:	2200      	movs	r2, #0
 80070d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80070d8:	4820      	ldr	r0, [pc, #128]	; (800715c <pointTurnLR+0x194>)
 80070da:	f7fc fdad 	bl	8003c38 <HAL_GPIO_WritePin>
		start_angle = 0, l_start = 0, r_start = 0;
 80070de:	4b1e      	ldr	r3, [pc, #120]	; (8007158 <pointTurnLR+0x190>)
 80070e0:	f04f 0200 	mov.w	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]
 80070e6:	4b1f      	ldr	r3, [pc, #124]	; (8007164 <pointTurnLR+0x19c>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	4b1f      	ldr	r3, [pc, #124]	; (800716c <pointTurnLR+0x1a4>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]
		resetEncoder();
 80070f2:	f000 fa7d 	bl	80075f0 <resetEncoder>
		sc_counter = 0;
 80070f6:	4b22      	ldr	r3, [pc, #136]	; (8007180 <pointTurnLR+0x1b8>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]
		return true;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e027      	b.n	8007150 <pointTurnLR+0x188>
	}
	
	if (abs(PD_correction_sc) > .3) PD_correction_sc = (PD_correction_sc > 0) ? .3 : -.3;
 8007100:	4b1e      	ldr	r3, [pc, #120]	; (800717c <pointTurnLR+0x1b4>)
 8007102:	edd3 7a00 	vldr	s15, [r3]
 8007106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800710a:	ee17 3a90 	vmov	r3, s15
 800710e:	2b00      	cmp	r3, #0
 8007110:	bfb8      	it	lt
 8007112:	425b      	neglt	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	dd0c      	ble.n	8007132 <pointTurnLR+0x16a>
 8007118:	4b18      	ldr	r3, [pc, #96]	; (800717c <pointTurnLR+0x1b4>)
 800711a:	edd3 7a00 	vldr	s15, [r3]
 800711e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007126:	dd01      	ble.n	800712c <pointTurnLR+0x164>
 8007128:	4b16      	ldr	r3, [pc, #88]	; (8007184 <pointTurnLR+0x1bc>)
 800712a:	e000      	b.n	800712e <pointTurnLR+0x166>
 800712c:	4b16      	ldr	r3, [pc, #88]	; (8007188 <pointTurnLR+0x1c0>)
 800712e:	4a13      	ldr	r2, [pc, #76]	; (800717c <pointTurnLR+0x1b4>)
 8007130:	6013      	str	r3, [r2, #0]
	l_speed = -PD_correction_sc, r_speed = +PD_correction_sc;
 8007132:	4b12      	ldr	r3, [pc, #72]	; (800717c <pointTurnLR+0x1b4>)
 8007134:	edd3 7a00 	vldr	s15, [r3]
 8007138:	eef1 7a67 	vneg.f32	s15, s15
 800713c:	4b13      	ldr	r3, [pc, #76]	; (800718c <pointTurnLR+0x1c4>)
 800713e:	edc3 7a00 	vstr	s15, [r3]
 8007142:	4b0e      	ldr	r3, [pc, #56]	; (800717c <pointTurnLR+0x1b4>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a12      	ldr	r2, [pc, #72]	; (8007190 <pointTurnLR+0x1c8>)
 8007148:	6013      	str	r3, [r2, #0]
	// angularController(POINT_TURN);
	setWheels();
 800714a:	f000 fb6d 	bl	8007828 <setWheels>
	return false;
 800714e:	2300      	movs	r3, #0
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20000838 	.word	0x20000838
 800715c:	40020000 	.word	0x40020000
 8007160:	20000814 	.word	0x20000814
 8007164:	20000830 	.word	0x20000830
 8007168:	40000c00 	.word	0x40000c00
 800716c:	20000834 	.word	0x20000834
 8007170:	20000840 	.word	0x20000840
 8007174:	3f4ccccd 	.word	0x3f4ccccd
 8007178:	0000001e 	.word	0x0000001e
 800717c:	2000083c 	.word	0x2000083c
 8007180:	20000844 	.word	0x20000844
 8007184:	3e99999a 	.word	0x3e99999a
 8007188:	be99999a 	.word	0xbe99999a
 800718c:	2000084c 	.word	0x2000084c
 8007190:	20000850 	.word	0x20000850

08007194 <readADC>:
#include "adc.h"



uint16_t readADC(adc_channels channel, uint8_t timeout)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	460a      	mov	r2, r1
 800719e:	71fb      	strb	r3, [r7, #7]
 80071a0:	4613      	mov	r3, r2
 80071a2:	71bb      	strb	r3, [r7, #6]
    ADC_ChannelConfTypeDef sConfig = {0};
 80071a4:	f107 030c 	add.w	r3, r7, #12
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	605a      	str	r2, [r3, #4]
 80071ae:	609a      	str	r2, [r3, #8]
 80071b0:	60da      	str	r2, [r3, #12]
    uint16_t adc_val = 0;
 80071b2:	2300      	movs	r3, #0
 80071b4:	83fb      	strh	r3, [r7, #30]
    switch (channel)
 80071b6:	79fb      	ldrb	r3, [r7, #7]
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d81c      	bhi.n	80071f6 <readADC+0x62>
 80071bc:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <readADC+0x30>)
 80071be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c2:	bf00      	nop
 80071c4:	080071e5 	.word	0x080071e5
 80071c8:	080071d9 	.word	0x080071d9
 80071cc:	080071f1 	.word	0x080071f1
 80071d0:	080071df 	.word	0x080071df
 80071d4:	080071eb 	.word	0x080071eb
    {
        case RF_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_4;
 80071d8:	2304      	movs	r3, #4
 80071da:	60fb      	str	r3, [r7, #12]
            break;
 80071dc:	e00b      	b.n	80071f6 <readADC+0x62>

        case DL_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_8;
 80071de:	2308      	movs	r3, #8
 80071e0:	60fb      	str	r3, [r7, #12]
            break;
 80071e2:	e008      	b.n	80071f6 <readADC+0x62>

        case LF_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_9;
 80071e4:	2309      	movs	r3, #9
 80071e6:	60fb      	str	r3, [r7, #12]
            break;
 80071e8:	e005      	b.n	80071f6 <readADC+0x62>

        case BAT_VOL:
        	sConfig.Channel = ADC_CHANNEL_13;
 80071ea:	230d      	movs	r3, #13
 80071ec:	60fb      	str	r3, [r7, #12]
            break;
 80071ee:	e002      	b.n	80071f6 <readADC+0x62>
        
        case DR_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_14;
 80071f0:	230e      	movs	r3, #14
 80071f2:	60fb      	str	r3, [r7, #12]
            break;
 80071f4:	bf00      	nop
    }


    sConfig.Rank = 1;
 80071f6:	2301      	movs	r3, #1
 80071f8:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80071fa:	2304      	movs	r3, #4
 80071fc:	617b      	str	r3, [r7, #20]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80071fe:	f107 030c 	add.w	r3, r7, #12
 8007202:	4619      	mov	r1, r3
 8007204:	480e      	ldr	r0, [pc, #56]	; (8007240 <readADC+0xac>)
 8007206:	f7fb fd61 	bl	8002ccc <HAL_ADC_ConfigChannel>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <readADC+0x80>
    {
      Error_Handler();
 8007210:	f7fa fb6a 	bl	80018e8 <Error_Handler>
    }

    HAL_ADC_Start(&hadc1);
 8007214:	480a      	ldr	r0, [pc, #40]	; (8007240 <readADC+0xac>)
 8007216:	f7fb fbbb 	bl	8002990 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1,timeout);
 800721a:	79bb      	ldrb	r3, [r7, #6]
 800721c:	4619      	mov	r1, r3
 800721e:	4808      	ldr	r0, [pc, #32]	; (8007240 <readADC+0xac>)
 8007220:	f7fb fcbb 	bl	8002b9a <HAL_ADC_PollForConversion>
    adc_val = HAL_ADC_GetValue(&hadc1);
 8007224:	4806      	ldr	r0, [pc, #24]	; (8007240 <readADC+0xac>)
 8007226:	f7fb fd43 	bl	8002cb0 <HAL_ADC_GetValue>
 800722a:	4603      	mov	r3, r0
 800722c:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(&hadc1);
 800722e:	4804      	ldr	r0, [pc, #16]	; (8007240 <readADC+0xac>)
 8007230:	f7fb fc80 	bl	8002b34 <HAL_ADC_Stop>

    return adc_val;
 8007234:	8bfb      	ldrh	r3, [r7, #30]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3720      	adds	r7, #32
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20000224 	.word	0x20000224

08007244 <displayInit>:
#include "display.h"

DISP_State disp_state;

void displayInit(void){
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8007248:	f7fb f840 	bl	80022cc <ssd1306_Init>
	disp_state = INIT;
 800724c:	4b03      	ldr	r3, [pc, #12]	; (800725c <displayInit+0x18>)
 800724e:	2200      	movs	r2, #0
 8007250:	701a      	strb	r2, [r3, #0]
	displayUpdate();
 8007252:	f000 f8b1 	bl	80073b8 <displayUpdate>
}
 8007256:	bf00      	nop
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20000848 	.word	0x20000848

08007260 <clearScreen>:

void clearScreen()
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8007264:	2000      	movs	r0, #0
 8007266:	f7fb f89b 	bl	80023a0 <ssd1306_Fill>
}
 800726a:	bf00      	nop
 800726c:	bd80      	pop	{r7, pc}
	...

08007270 <writeString>:

void writeString(char *str, FONT_Size font_size)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	70fb      	strb	r3, [r7, #3]
	switch (font_size)
 800727c:	78fb      	ldrb	r3, [r7, #3]
 800727e:	2b03      	cmp	r3, #3
 8007280:	d826      	bhi.n	80072d0 <writeString+0x60>
 8007282:	a201      	add	r2, pc, #4	; (adr r2, 8007288 <writeString+0x18>)
 8007284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007288:	08007299 	.word	0x08007299
 800728c:	080072a7 	.word	0x080072a7
 8007290:	080072b5 	.word	0x080072b5
 8007294:	080072c3 	.word	0x080072c3
	{
	case SMALL:
		ssd1306_WriteString(str, Font_6x8, White);
 8007298:	4a0f      	ldr	r2, [pc, #60]	; (80072d8 <writeString+0x68>)
 800729a:	2301      	movs	r3, #1
 800729c:	ca06      	ldmia	r2, {r1, r2}
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7fb f9a6 	bl	80025f0 <ssd1306_WriteString>
		break;
 80072a4:	e014      	b.n	80072d0 <writeString+0x60>
	case MEDIUM:
		ssd1306_WriteString(str, Font_7x10, White);
 80072a6:	4a0d      	ldr	r2, [pc, #52]	; (80072dc <writeString+0x6c>)
 80072a8:	2301      	movs	r3, #1
 80072aa:	ca06      	ldmia	r2, {r1, r2}
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7fb f99f 	bl	80025f0 <ssd1306_WriteString>
		break;
 80072b2:	e00d      	b.n	80072d0 <writeString+0x60>
	case LARGE:
		ssd1306_WriteString(str, Font_11x18, White);
 80072b4:	4a0a      	ldr	r2, [pc, #40]	; (80072e0 <writeString+0x70>)
 80072b6:	2301      	movs	r3, #1
 80072b8:	ca06      	ldmia	r2, {r1, r2}
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7fb f998 	bl	80025f0 <ssd1306_WriteString>
		break;
 80072c0:	e006      	b.n	80072d0 <writeString+0x60>
	case HUGE:
		ssd1306_WriteString(str, Font_16x24, White);
 80072c2:	4a08      	ldr	r2, [pc, #32]	; (80072e4 <writeString+0x74>)
 80072c4:	2301      	movs	r3, #1
 80072c6:	ca06      	ldmia	r2, {r1, r2}
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7fb f991 	bl	80025f0 <ssd1306_WriteString>
		break;
 80072ce:	bf00      	nop
	}
}
 80072d0:	bf00      	nop
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	20000004 	.word	0x20000004
 80072dc:	2000000c 	.word	0x2000000c
 80072e0:	20000014 	.word	0x20000014
 80072e4:	2000001c 	.word	0x2000001c

080072e8 <putString>:

void putString(char *str, int x, int y, FONT_Size font_size)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	70fb      	strb	r3, [r7, #3]
	ssd1306_SetCursor(x, y);
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	b2d2      	uxtb	r2, r2
 80072fe:	4611      	mov	r1, r2
 8007300:	4618      	mov	r0, r3
 8007302:	f7fb f99b 	bl	800263c <ssd1306_SetCursor>
	writeString(str, font_size);
 8007306:	78fb      	ldrb	r3, [r7, #3]
 8007308:	4619      	mov	r1, r3
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f7ff ffb0 	bl	8007270 <writeString>
}
 8007310:	bf00      	nop
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <putInt>:
	ssd1306_SetCursor(x, y);
	writeString(str, font_size);
}

void putInt(int INT, int x, int y, FONT_Size font_size)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b094      	sub	sp, #80	; 0x50
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	70fb      	strb	r3, [r7, #3]
	char buff[64];
	snprintf(buff, sizeof(buff), "%d", INT);
 8007326:	f107 0010 	add.w	r0, r7, #16
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	4a0b      	ldr	r2, [pc, #44]	; (800735c <putInt+0x44>)
 800732e:	2140      	movs	r1, #64	; 0x40
 8007330:	f002 f9ec 	bl	800970c <sniprintf>
	ssd1306_SetCursor(x, y);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	b2db      	uxtb	r3, r3
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	4611      	mov	r1, r2
 800733e:	4618      	mov	r0, r3
 8007340:	f7fb f97c 	bl	800263c <ssd1306_SetCursor>
	writeString(buff, font_size);
 8007344:	78fa      	ldrb	r2, [r7, #3]
 8007346:	f107 0310 	add.w	r3, r7, #16
 800734a:	4611      	mov	r1, r2
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff ff8f 	bl	8007270 <writeString>
}
 8007352:	bf00      	nop
 8007354:	3750      	adds	r7, #80	; 0x50
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	0800b890 	.word	0x0800b890

08007360 <putFloat>:

void putFloat(float FLOAT, int x, int y, FONT_Size font_size)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b096      	sub	sp, #88	; 0x58
 8007364:	af02      	add	r7, sp, #8
 8007366:	ed87 0a03 	vstr	s0, [r7, #12]
 800736a:	60b8      	str	r0, [r7, #8]
 800736c:	6079      	str	r1, [r7, #4]
 800736e:	4613      	mov	r3, r2
 8007370:	70fb      	strb	r3, [r7, #3]
	char buff[64];
	snprintf(buff, sizeof(buff), "%.2f", FLOAT); // Change %.2f to adjust precision
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f7f9 f8e8 	bl	8000548 <__aeabi_f2d>
 8007378:	4602      	mov	r2, r0
 800737a:	460b      	mov	r3, r1
 800737c:	f107 0010 	add.w	r0, r7, #16
 8007380:	e9cd 2300 	strd	r2, r3, [sp]
 8007384:	4a0b      	ldr	r2, [pc, #44]	; (80073b4 <putFloat+0x54>)
 8007386:	2140      	movs	r1, #64	; 0x40
 8007388:	f002 f9c0 	bl	800970c <sniprintf>
	ssd1306_SetCursor(x, y);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	4611      	mov	r1, r2
 8007396:	4618      	mov	r0, r3
 8007398:	f7fb f950 	bl	800263c <ssd1306_SetCursor>
	writeString(buff, font_size);
 800739c:	78fa      	ldrb	r2, [r7, #3]
 800739e:	f107 0310 	add.w	r3, r7, #16
 80073a2:	4611      	mov	r1, r2
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7ff ff63 	bl	8007270 <writeString>
}
 80073aa:	bf00      	nop
 80073ac:	3750      	adds	r7, #80	; 0x50
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	0800b894 	.word	0x0800b894

080073b8 <displayUpdate>:


void displayUpdate(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
	clearScreen();
 80073be:	f7ff ff4f 	bl	8007260 <clearScreen>
	switch (disp_state)
 80073c2:	4b6b      	ldr	r3, [pc, #428]	; (8007570 <displayUpdate+0x1b8>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	2b05      	cmp	r3, #5
 80073c8:	f200 80c8 	bhi.w	800755c <displayUpdate+0x1a4>
 80073cc:	a201      	add	r2, pc, #4	; (adr r2, 80073d4 <displayUpdate+0x1c>)
 80073ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d2:	bf00      	nop
 80073d4:	080073ed 	.word	0x080073ed
 80073d8:	08007417 	.word	0x08007417
 80073dc:	08007445 	.word	0x08007445
 80073e0:	080074ab 	.word	0x080074ab
 80073e4:	08007535 	.word	0x08007535
 80073e8:	08007543 	.word	0x08007543
	{
	// INITIALIZATION BLOCK: AUDI CAR EXPECTED
	case (INIT):
		for (int delta = 0; delta < 5; delta++)
 80073ec:	2300      	movs	r3, #0
 80073ee:	607b      	str	r3, [r7, #4]
 80073f0:	e00d      	b.n	800740e <displayUpdate+0x56>
			ssd1306_DrawCircle(16 * delta + 35, 15, 10, White);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	011b      	lsls	r3, r3, #4
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	3323      	adds	r3, #35	; 0x23
 80073fc:	b2d8      	uxtb	r0, r3
 80073fe:	2301      	movs	r3, #1
 8007400:	220a      	movs	r2, #10
 8007402:	210f      	movs	r1, #15
 8007404:	f7fb f932 	bl	800266c <ssd1306_DrawCircle>
		for (int delta = 0; delta < 5; delta++)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3301      	adds	r3, #1
 800740c:	607b      	str	r3, [r7, #4]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b04      	cmp	r3, #4
 8007412:	ddee      	ble.n	80073f2 <displayUpdate+0x3a>
		break;
 8007414:	e0a2      	b.n	800755c <displayUpdate+0x1a4>

	// DEFAULT SCREEN --> BATTERY PERCENTAGE, STATE OF THE ROBOT
	case (DEFAULT):
		// DISPLAYING BATTERY VOLTAGE
		putString("BAT:",74,2,SMALL);
 8007416:	2300      	movs	r3, #0
 8007418:	2202      	movs	r2, #2
 800741a:	214a      	movs	r1, #74	; 0x4a
 800741c:	4855      	ldr	r0, [pc, #340]	; (8007574 <displayUpdate+0x1bc>)
 800741e:	f7ff ff63 	bl	80072e8 <putString>
		putFloat(voltage,104 , 2, SMALL);
 8007422:	4b55      	ldr	r3, [pc, #340]	; (8007578 <displayUpdate+0x1c0>)
 8007424:	edd3 7a00 	vldr	s15, [r3]
 8007428:	2200      	movs	r2, #0
 800742a:	2102      	movs	r1, #2
 800742c:	2068      	movs	r0, #104	; 0x68
 800742e:	eeb0 0a67 	vmov.f32	s0, s15
 8007432:	f7ff ff95 	bl	8007360 <putFloat>

		putString("TURN:",2,16,MEDIUM);
 8007436:	2301      	movs	r3, #1
 8007438:	2210      	movs	r2, #16
 800743a:	2102      	movs	r1, #2
 800743c:	484f      	ldr	r0, [pc, #316]	; (800757c <displayUpdate+0x1c4>)
 800743e:	f7ff ff53 	bl	80072e8 <putString>
		// putString(turn,44,16,MEDIUM);
		break;
 8007442:	e08b      	b.n	800755c <displayUpdate+0x1a4>

	case (GYRO_CALIB):
		putString("NOISE: ",2,2,SMALL);
 8007444:	2300      	movs	r3, #0
 8007446:	2202      	movs	r2, #2
 8007448:	2102      	movs	r1, #2
 800744a:	484d      	ldr	r0, [pc, #308]	; (8007580 <displayUpdate+0x1c8>)
 800744c:	f7ff ff4c 	bl	80072e8 <putString>
		putFloat(noise,64, 2, SMALL);
 8007450:	4b4c      	ldr	r3, [pc, #304]	; (8007584 <displayUpdate+0x1cc>)
 8007452:	edd3 7a00 	vldr	s15, [r3]
 8007456:	2200      	movs	r2, #0
 8007458:	2102      	movs	r1, #2
 800745a:	2040      	movs	r0, #64	; 0x40
 800745c:	eeb0 0a67 	vmov.f32	s0, s15
 8007460:	f7ff ff7e 	bl	8007360 <putFloat>
 
		putString("OFFSET: ",2,11,SMALL);
 8007464:	2300      	movs	r3, #0
 8007466:	220b      	movs	r2, #11
 8007468:	2102      	movs	r1, #2
 800746a:	4847      	ldr	r0, [pc, #284]	; (8007588 <displayUpdate+0x1d0>)
 800746c:	f7ff ff3c 	bl	80072e8 <putString>
		putInt(offset,64,11,SMALL);
 8007470:	4b46      	ldr	r3, [pc, #280]	; (800758c <displayUpdate+0x1d4>)
 8007472:	edd3 7a00 	vldr	s15, [r3]
 8007476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800747a:	2300      	movs	r3, #0
 800747c:	220b      	movs	r2, #11
 800747e:	2140      	movs	r1, #64	; 0x40
 8007480:	ee17 0a90 	vmov	r0, s15
 8007484:	f7ff ff48 	bl	8007318 <putInt>

		putString("ANGLE: ",2,22,SMALL);
 8007488:	2300      	movs	r3, #0
 800748a:	2216      	movs	r2, #22
 800748c:	2102      	movs	r1, #2
 800748e:	4840      	ldr	r0, [pc, #256]	; (8007590 <displayUpdate+0x1d8>)
 8007490:	f7ff ff2a 	bl	80072e8 <putString>
		putFloat(angle_z,64,22,SMALL);
 8007494:	4b3f      	ldr	r3, [pc, #252]	; (8007594 <displayUpdate+0x1dc>)
 8007496:	edd3 7a00 	vldr	s15, [r3]
 800749a:	2200      	movs	r2, #0
 800749c:	2116      	movs	r1, #22
 800749e:	2040      	movs	r0, #64	; 0x40
 80074a0:	eeb0 0a67 	vmov.f32	s0, s15
 80074a4:	f7ff ff5c 	bl	8007360 <putFloat>
		break;
 80074a8:	e058      	b.n	800755c <displayUpdate+0x1a4>

	case (SENSOR_READ):

		putString("LF:",2,2,SMALL);
 80074aa:	2300      	movs	r3, #0
 80074ac:	2202      	movs	r2, #2
 80074ae:	2102      	movs	r1, #2
 80074b0:	4839      	ldr	r0, [pc, #228]	; (8007598 <displayUpdate+0x1e0>)
 80074b2:	f7ff ff19 	bl	80072e8 <putString>
		putInt(LFSensor,26,2, SMALL);
 80074b6:	4b39      	ldr	r3, [pc, #228]	; (800759c <displayUpdate+0x1e4>)
 80074b8:	6818      	ldr	r0, [r3, #0]
 80074ba:	2300      	movs	r3, #0
 80074bc:	2202      	movs	r2, #2
 80074be:	211a      	movs	r1, #26
 80074c0:	f7ff ff2a 	bl	8007318 <putInt>

		putString("RF:",76,2,SMALL);
 80074c4:	2300      	movs	r3, #0
 80074c6:	2202      	movs	r2, #2
 80074c8:	214c      	movs	r1, #76	; 0x4c
 80074ca:	4835      	ldr	r0, [pc, #212]	; (80075a0 <displayUpdate+0x1e8>)
 80074cc:	f7ff ff0c 	bl	80072e8 <putString>
		putInt(RFSensor,100,2, SMALL);
 80074d0:	4b34      	ldr	r3, [pc, #208]	; (80075a4 <displayUpdate+0x1ec>)
 80074d2:	6818      	ldr	r0, [r3, #0]
 80074d4:	2300      	movs	r3, #0
 80074d6:	2202      	movs	r2, #2
 80074d8:	2164      	movs	r1, #100	; 0x64
 80074da:	f7ff ff1d 	bl	8007318 <putInt>

		putString("DL:",2,13,SMALL);
 80074de:	2300      	movs	r3, #0
 80074e0:	220d      	movs	r2, #13
 80074e2:	2102      	movs	r1, #2
 80074e4:	4830      	ldr	r0, [pc, #192]	; (80075a8 <displayUpdate+0x1f0>)
 80074e6:	f7ff feff 	bl	80072e8 <putString>
		putInt(DLSensor,26,13, SMALL);
 80074ea:	4b30      	ldr	r3, [pc, #192]	; (80075ac <displayUpdate+0x1f4>)
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	2300      	movs	r3, #0
 80074f0:	220d      	movs	r2, #13
 80074f2:	211a      	movs	r1, #26
 80074f4:	f7ff ff10 	bl	8007318 <putInt>

		putString("DR:",76,13,SMALL);
 80074f8:	2300      	movs	r3, #0
 80074fa:	220d      	movs	r2, #13
 80074fc:	214c      	movs	r1, #76	; 0x4c
 80074fe:	482c      	ldr	r0, [pc, #176]	; (80075b0 <displayUpdate+0x1f8>)
 8007500:	f7ff fef2 	bl	80072e8 <putString>
		putInt(DRSensor,100,13, SMALL);
 8007504:	4b2b      	ldr	r3, [pc, #172]	; (80075b4 <displayUpdate+0x1fc>)
 8007506:	6818      	ldr	r0, [r3, #0]
 8007508:	2300      	movs	r3, #0
 800750a:	220d      	movs	r2, #13
 800750c:	2164      	movs	r1, #100	; 0x64
 800750e:	f7ff ff03 	bl	8007318 <putInt>
		
		putString("ANGLE:",22,24,SMALL);
 8007512:	2300      	movs	r3, #0
 8007514:	2218      	movs	r2, #24
 8007516:	2116      	movs	r1, #22
 8007518:	4827      	ldr	r0, [pc, #156]	; (80075b8 <displayUpdate+0x200>)
 800751a:	f7ff fee5 	bl	80072e8 <putString>
		putFloat(angle_z,70,22, SMALL);
 800751e:	4b1d      	ldr	r3, [pc, #116]	; (8007594 <displayUpdate+0x1dc>)
 8007520:	edd3 7a00 	vldr	s15, [r3]
 8007524:	2200      	movs	r2, #0
 8007526:	2116      	movs	r1, #22
 8007528:	2046      	movs	r0, #70	; 0x46
 800752a:	eeb0 0a67 	vmov.f32	s0, s15
 800752e:	f7ff ff17 	bl	8007360 <putFloat>
		break;
 8007532:	e013      	b.n	800755c <displayUpdate+0x1a4>

	case (LOW_BAT):
		putString("BAT LOW...!",2,7,LARGE);
 8007534:	2302      	movs	r3, #2
 8007536:	2207      	movs	r2, #7
 8007538:	2102      	movs	r1, #2
 800753a:	4820      	ldr	r0, [pc, #128]	; (80075bc <displayUpdate+0x204>)
 800753c:	f7ff fed4 	bl	80072e8 <putString>
		break;
 8007540:	e00c      	b.n	800755c <displayUpdate+0x1a4>

	case (SUCESS_MSG):
		putString("HURRAYYYY!!!",2,2,LARGE);
 8007542:	2302      	movs	r3, #2
 8007544:	2202      	movs	r2, #2
 8007546:	2102      	movs	r1, #2
 8007548:	481d      	ldr	r0, [pc, #116]	; (80075c0 <displayUpdate+0x208>)
 800754a:	f7ff fecd 	bl	80072e8 <putString>
		putString("SINDiB na kokka",2,22,SMALL);
 800754e:	2300      	movs	r3, #0
 8007550:	2216      	movs	r2, #22
 8007552:	2102      	movs	r1, #2
 8007554:	481b      	ldr	r0, [pc, #108]	; (80075c4 <displayUpdate+0x20c>)
 8007556:	f7ff fec7 	bl	80072e8 <putString>
		break;
 800755a:	bf00      	nop
	}
	ssd1306_UpdateScreen();
 800755c:	f7fa ff44 	bl	80023e8 <ssd1306_UpdateScreen>
	LED6_TOG;
 8007560:	2104      	movs	r1, #4
 8007562:	4819      	ldr	r0, [pc, #100]	; (80075c8 <displayUpdate+0x210>)
 8007564:	f7fc fb81 	bl	8003c6a <HAL_GPIO_TogglePin>
 8007568:	bf00      	nop
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	20000848 	.word	0x20000848
 8007574:	0800b89c 	.word	0x0800b89c
 8007578:	20000858 	.word	0x20000858
 800757c:	0800b8a4 	.word	0x0800b8a4
 8007580:	0800b8ac 	.word	0x0800b8ac
 8007584:	20000824 	.word	0x20000824
 8007588:	0800b8b4 	.word	0x0800b8b4
 800758c:	20000820 	.word	0x20000820
 8007590:	0800b8c0 	.word	0x0800b8c0
 8007594:	20000814 	.word	0x20000814
 8007598:	0800b8c8 	.word	0x0800b8c8
 800759c:	2000085c 	.word	0x2000085c
 80075a0:	0800b8cc 	.word	0x0800b8cc
 80075a4:	20000860 	.word	0x20000860
 80075a8:	0800b8d0 	.word	0x0800b8d0
 80075ac:	20000864 	.word	0x20000864
 80075b0:	0800b8d4 	.word	0x0800b8d4
 80075b4:	20000868 	.word	0x20000868
 80075b8:	0800b8d8 	.word	0x0800b8d8
 80075bc:	0800b8e0 	.word	0x0800b8e0
 80075c0:	0800b8ec 	.word	0x0800b8ec
 80075c4:	0800b8fc 	.word	0x0800b8fc
 80075c8:	40020c00 	.word	0x40020c00

080075cc <encoderInit>:
#include "encoder.h"


// FUCTION: INTIALIZATION OF ENCODER RELATED HARDWARE
void encoderInit(void){
 80075cc:	b580      	push	{r7, lr}
 80075ce:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);   // LEFT ENCODER
 80075d0:	213c      	movs	r1, #60	; 0x3c
 80075d2:	4805      	ldr	r0, [pc, #20]	; (80075e8 <encoderInit+0x1c>)
 80075d4:	f7fe f8de 	bl	8005794 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);   // RIGHT ENCODER
 80075d8:	213c      	movs	r1, #60	; 0x3c
 80075da:	4804      	ldr	r0, [pc, #16]	; (80075ec <encoderInit+0x20>)
 80075dc:	f7fe f8da 	bl	8005794 <HAL_TIM_Encoder_Start>
	resetEncoder();
 80075e0:	f000 f806 	bl	80075f0 <resetEncoder>
}
 80075e4:	bf00      	nop
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	200003c4 	.word	0x200003c4
 80075ec:	20000454 	.word	0x20000454

080075f0 <resetEncoder>:

void resetEncoder(void){
 80075f0:	b480      	push	{r7}
 80075f2:	af00      	add	r7, sp, #0
	TIM2->CNT = _ENCODER_START + 1;
 80075f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075f8:	4a04      	ldr	r2, [pc, #16]	; (800760c <resetEncoder+0x1c>)
 80075fa:	625a      	str	r2, [r3, #36]	; 0x24
	TIM5->CNT = u32_max-_ENCODER_START;
 80075fc:	4b04      	ldr	r3, [pc, #16]	; (8007610 <resetEncoder+0x20>)
 80075fe:	4a05      	ldr	r2, [pc, #20]	; (8007614 <resetEncoder+0x24>)
 8007600:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007602:	bf00      	nop
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	00068db9 	.word	0x00068db9
 8007610:	40000c00 	.word	0x40000c00
 8007614:	fff97246 	.word	0xfff97246

08007618 <motorInit>:
float l_speed, r_speed;
float st_speed = .5, rt_speed = .3;


void motorInit(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	af00      	add	r7, sp, #0
	// Start PWM for TIM4 channels (you may need to adjust this based on your application)
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // LPWMA
 800761c:	2100      	movs	r1, #0
 800761e:	480d      	ldr	r0, [pc, #52]	; (8007654 <motorInit+0x3c>)
 8007620:	f7fd ff4a 	bl	80054b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // LPWMB
 8007624:	2104      	movs	r1, #4
 8007626:	480b      	ldr	r0, [pc, #44]	; (8007654 <motorInit+0x3c>)
 8007628:	f7fd ff46 	bl	80054b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // RPWMA
 800762c:	2108      	movs	r1, #8
 800762e:	4809      	ldr	r0, [pc, #36]	; (8007654 <motorInit+0x3c>)
 8007630:	f7fd ff42 	bl	80054b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // RPWMB
 8007634:	210c      	movs	r1, #12
 8007636:	4807      	ldr	r0, [pc, #28]	; (8007654 <motorInit+0x3c>)
 8007638:	f7fd ff3e 	bl	80054b8 <HAL_TIM_PWM_Start>
	STOP_ROBOT;
 800763c:	4b06      	ldr	r3, [pc, #24]	; (8007658 <motorInit+0x40>)
 800763e:	f04f 0200 	mov.w	r2, #0
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	4b05      	ldr	r3, [pc, #20]	; (800765c <motorInit+0x44>)
 8007646:	f04f 0200 	mov.w	r2, #0
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	f000 f8ec 	bl	8007828 <setWheels>
}
 8007650:	bf00      	nop
 8007652:	bd80      	pop	{r7, pc}
 8007654:	2000040c 	.word	0x2000040c
 8007658:	2000084c 	.word	0x2000084c
 800765c:	20000850 	.word	0x20000850

08007660 <setLeftWheel>:

void setLeftWheel(float l_speed)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t l_pwma, l_pwmb;

	if (abs(l_speed) > SPEED_THRESHOLD)
 800766a:	edd7 7a01 	vldr	s15, [r7, #4]
 800766e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007672:	ee17 3a90 	vmov	r3, s15
 8007676:	2b00      	cmp	r3, #0
 8007678:	bfb8      	it	lt
 800767a:	425b      	neglt	r3, r3
 800767c:	ee07 3a90 	vmov	s15, r3
 8007680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007684:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007738 <setLeftWheel+0xd8>
 8007688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800768c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007690:	dd0f      	ble.n	80076b2 <setLeftWheel+0x52>
		l_speed = (l_speed > 0) ? SPEED_THRESHOLD : -SPEED_THRESHOLD;
 8007692:	edd7 7a01 	vldr	s15, [r7, #4]
 8007696:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800769a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800769e:	dd02      	ble.n	80076a6 <setLeftWheel+0x46>
 80076a0:	eddf 7a25 	vldr	s15, [pc, #148]	; 8007738 <setLeftWheel+0xd8>
 80076a4:	e003      	b.n	80076ae <setLeftWheel+0x4e>
 80076a6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007738 <setLeftWheel+0xd8>
 80076aa:	eef1 7a67 	vneg.f32	s15, s15
 80076ae:	edc7 7a01 	vstr	s15, [r7, #4]

	l_pwma = (l_speed < 0) ? (-l_speed) * u12_max : 0;
 80076b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80076b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076be:	d511      	bpl.n	80076e4 <setLeftWheel+0x84>
 80076c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80076c4:	eeb1 7a67 	vneg.f32	s14, s15
 80076c8:	4b1c      	ldr	r3, [pc, #112]	; (800773c <setLeftWheel+0xdc>)
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	ee07 3a90 	vmov	s15, r3
 80076d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076dc:	ee17 3a90 	vmov	r3, s15
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	e000      	b.n	80076e6 <setLeftWheel+0x86>
 80076e4:	2300      	movs	r3, #0
 80076e6:	81fb      	strh	r3, [r7, #14]
	l_pwmb = (l_speed >= 0) ? l_speed * u12_max : 0;
 80076e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80076ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f4:	db0f      	blt.n	8007716 <setLeftWheel+0xb6>
 80076f6:	4b11      	ldr	r3, [pc, #68]	; (800773c <setLeftWheel+0xdc>)
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007702:	edd7 7a01 	vldr	s15, [r7, #4]
 8007706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800770a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800770e:	ee17 3a90 	vmov	r3, s15
 8007712:	b29b      	uxth	r3, r3
 8007714:	e000      	b.n	8007718 <setLeftWheel+0xb8>
 8007716:	2300      	movs	r3, #0
 8007718:	81bb      	strh	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, l_pwma); // LPWMA
 800771a:	4b09      	ldr	r3, [pc, #36]	; (8007740 <setLeftWheel+0xe0>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	89fa      	ldrh	r2, [r7, #14]
 8007720:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, l_pwmb); // LPWMB
 8007722:	4b07      	ldr	r3, [pc, #28]	; (8007740 <setLeftWheel+0xe0>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	89ba      	ldrh	r2, [r7, #12]
 8007728:	635a      	str	r2, [r3, #52]	; 0x34
}
 800772a:	bf00      	nop
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	3f333333 	.word	0x3f333333
 800773c:	2000002a 	.word	0x2000002a
 8007740:	2000040c 	.word	0x2000040c

08007744 <setRightWheel>:

void setRightWheel(float r_speed)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t r_pwma, r_pwmb;

	if (abs(r_speed) > SPEED_THRESHOLD)
 800774e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007752:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007756:	ee17 3a90 	vmov	r3, s15
 800775a:	2b00      	cmp	r3, #0
 800775c:	bfb8      	it	lt
 800775e:	425b      	neglt	r3, r3
 8007760:	ee07 3a90 	vmov	s15, r3
 8007764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007768:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800781c <setRightWheel+0xd8>
 800776c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007774:	dd0f      	ble.n	8007796 <setRightWheel+0x52>
		r_speed = (r_speed > 0) ? SPEED_THRESHOLD : -SPEED_THRESHOLD;
 8007776:	edd7 7a01 	vldr	s15, [r7, #4]
 800777a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800777e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007782:	dd02      	ble.n	800778a <setRightWheel+0x46>
 8007784:	eddf 7a25 	vldr	s15, [pc, #148]	; 800781c <setRightWheel+0xd8>
 8007788:	e003      	b.n	8007792 <setRightWheel+0x4e>
 800778a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800781c <setRightWheel+0xd8>
 800778e:	eef1 7a67 	vneg.f32	s15, s15
 8007792:	edc7 7a01 	vstr	s15, [r7, #4]
	r_pwma = (r_speed < 0) ? (-r_speed) * u12_max : 0;
 8007796:	edd7 7a01 	vldr	s15, [r7, #4]
 800779a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800779e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a2:	d511      	bpl.n	80077c8 <setRightWheel+0x84>
 80077a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80077a8:	eeb1 7a67 	vneg.f32	s14, s15
 80077ac:	4b1c      	ldr	r3, [pc, #112]	; (8007820 <setRightWheel+0xdc>)
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	ee07 3a90 	vmov	s15, r3
 80077b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077c0:	ee17 3a90 	vmov	r3, s15
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	e000      	b.n	80077ca <setRightWheel+0x86>
 80077c8:	2300      	movs	r3, #0
 80077ca:	81fb      	strh	r3, [r7, #14]
	r_pwmb = (r_speed >= 0) ? r_speed * u12_max : 0;
 80077cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80077d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d8:	db0f      	blt.n	80077fa <setRightWheel+0xb6>
 80077da:	4b11      	ldr	r3, [pc, #68]	; (8007820 <setRightWheel+0xdc>)
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	ee07 3a90 	vmov	s15, r3
 80077e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80077ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077f2:	ee17 3a90 	vmov	r3, s15
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	e000      	b.n	80077fc <setRightWheel+0xb8>
 80077fa:	2300      	movs	r3, #0
 80077fc:	81bb      	strh	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, r_pwma); // RPWMA
 80077fe:	4b09      	ldr	r3, [pc, #36]	; (8007824 <setRightWheel+0xe0>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	89fa      	ldrh	r2, [r7, #14]
 8007804:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, r_pwmb); // RPWMB
 8007806:	4b07      	ldr	r3, [pc, #28]	; (8007824 <setRightWheel+0xe0>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	89ba      	ldrh	r2, [r7, #12]
 800780c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800780e:	bf00      	nop
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	3f333333 	.word	0x3f333333
 8007820:	2000002a 	.word	0x2000002a
 8007824:	2000040c 	.word	0x2000040c

08007828 <setWheels>:

int setWheels()
{
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
	setLeftWheel(l_speed);
 800782c:	4b08      	ldr	r3, [pc, #32]	; (8007850 <setWheels+0x28>)
 800782e:	edd3 7a00 	vldr	s15, [r3]
 8007832:	eeb0 0a67 	vmov.f32	s0, s15
 8007836:	f7ff ff13 	bl	8007660 <setLeftWheel>
	setRightWheel(r_speed);
 800783a:	4b06      	ldr	r3, [pc, #24]	; (8007854 <setWheels+0x2c>)
 800783c:	edd3 7a00 	vldr	s15, [r3]
 8007840:	eeb0 0a67 	vmov.f32	s0, s15
 8007844:	f7ff ff7e 	bl	8007744 <setRightWheel>
	return 0;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	2000084c 	.word	0x2000084c
 8007854:	20000850 	.word	0x20000850

08007858 <readSensor>:
bool R = false;
bool F = false;

/*read IR sensors*/
void readSensor(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
	LED7_ON;
 800785c:	2201      	movs	r2, #1
 800785e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007862:	4877      	ldr	r0, [pc, #476]	; (8007a40 <readSensor+0x1e8>)
 8007864:	f7fc f9e8 	bl	8003c38 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COUNTER(&htim1,0);
 8007868:	4b76      	ldr	r3, [pc, #472]	; (8007a44 <readSensor+0x1ec>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2200      	movs	r2, #0
 800786e:	625a      	str	r2, [r3, #36]	; 0x24
	//read DC value	
	LFSensor = read_LF_Sensor;	
 8007870:	2101      	movs	r1, #1
 8007872:	2000      	movs	r0, #0
 8007874:	f7ff fc8e 	bl	8007194 <readADC>
 8007878:	4603      	mov	r3, r0
 800787a:	461a      	mov	r2, r3
 800787c:	4b72      	ldr	r3, [pc, #456]	; (8007a48 <readSensor+0x1f0>)
 800787e:	601a      	str	r2, [r3, #0]
	RFSensor = read_RF_Sensor;	
 8007880:	2101      	movs	r1, #1
 8007882:	2001      	movs	r0, #1
 8007884:	f7ff fc86 	bl	8007194 <readADC>
 8007888:	4603      	mov	r3, r0
 800788a:	461a      	mov	r2, r3
 800788c:	4b6f      	ldr	r3, [pc, #444]	; (8007a4c <readSensor+0x1f4>)
 800788e:	601a      	str	r2, [r3, #0]
	DLSensor = read_DL_Sensor;
 8007890:	2101      	movs	r1, #1
 8007892:	2003      	movs	r0, #3
 8007894:	f7ff fc7e 	bl	8007194 <readADC>
 8007898:	4603      	mov	r3, r0
 800789a:	461a      	mov	r2, r3
 800789c:	4b6c      	ldr	r3, [pc, #432]	; (8007a50 <readSensor+0x1f8>)
 800789e:	601a      	str	r2, [r3, #0]
	DRSensor = read_DR_Sensor;	
 80078a0:	2101      	movs	r1, #1
 80078a2:	2002      	movs	r0, #2
 80078a4:	f7ff fc76 	bl	8007194 <readADC>
 80078a8:	4603      	mov	r3, r0
 80078aa:	461a      	mov	r2, r3
 80078ac:	4b69      	ldr	r3, [pc, #420]	; (8007a54 <readSensor+0x1fc>)
 80078ae:	601a      	str	r2, [r3, #0]
	
	
    //left front sensor
	LF_EM_ON;
 80078b0:	2201      	movs	r2, #1
 80078b2:	2180      	movs	r1, #128	; 0x80
 80078b4:	4868      	ldr	r0, [pc, #416]	; (8007a58 <readSensor+0x200>)
 80078b6:	f7fc f9bf 	bl	8003c38 <HAL_GPIO_WritePin>
	LFSensor = read_LF_Sensor - LFSensor;
 80078ba:	2101      	movs	r1, #1
 80078bc:	2000      	movs	r0, #0
 80078be:	f7ff fc69 	bl	8007194 <readADC>
 80078c2:	4603      	mov	r3, r0
 80078c4:	461a      	mov	r2, r3
 80078c6:	4b60      	ldr	r3, [pc, #384]	; (8007a48 <readSensor+0x1f0>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	4a5e      	ldr	r2, [pc, #376]	; (8007a48 <readSensor+0x1f0>)
 80078ce:	6013      	str	r3, [r2, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<60);
 80078d0:	bf00      	nop
 80078d2:	4b5c      	ldr	r3, [pc, #368]	; (8007a44 <readSensor+0x1ec>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	2b3b      	cmp	r3, #59	; 0x3b
 80078da:	d9fa      	bls.n	80078d2 <readSensor+0x7a>
	LF_EM_OFF;
 80078dc:	2200      	movs	r2, #0
 80078de:	2180      	movs	r1, #128	; 0x80
 80078e0:	485d      	ldr	r0, [pc, #372]	; (8007a58 <readSensor+0x200>)
 80078e2:	f7fc f9a9 	bl	8003c38 <HAL_GPIO_WritePin>
	if(LFSensor < 0)//error check
 80078e6:	4b58      	ldr	r3, [pc, #352]	; (8007a48 <readSensor+0x1f0>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	da02      	bge.n	80078f4 <readSensor+0x9c>
		LFSensor = 0;
 80078ee:	4b56      	ldr	r3, [pc, #344]	; (8007a48 <readSensor+0x1f0>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	601a      	str	r2, [r3, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<140);
 80078f4:	bf00      	nop
 80078f6:	4b53      	ldr	r3, [pc, #332]	; (8007a44 <readSensor+0x1ec>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	2b8b      	cmp	r3, #139	; 0x8b
 80078fe:	d9fa      	bls.n	80078f6 <readSensor+0x9e>

	//right front sensor
	RF_EM_ON;
 8007900:	2201      	movs	r2, #1
 8007902:	2102      	movs	r1, #2
 8007904:	4854      	ldr	r0, [pc, #336]	; (8007a58 <readSensor+0x200>)
 8007906:	f7fc f997 	bl	8003c38 <HAL_GPIO_WritePin>
	RFSensor = read_RF_Sensor - RFSensor;
 800790a:	2101      	movs	r1, #1
 800790c:	2001      	movs	r0, #1
 800790e:	f7ff fc41 	bl	8007194 <readADC>
 8007912:	4603      	mov	r3, r0
 8007914:	461a      	mov	r2, r3
 8007916:	4b4d      	ldr	r3, [pc, #308]	; (8007a4c <readSensor+0x1f4>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	4a4b      	ldr	r2, [pc, #300]	; (8007a4c <readSensor+0x1f4>)
 800791e:	6013      	str	r3, [r2, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<200);
 8007920:	bf00      	nop
 8007922:	4b48      	ldr	r3, [pc, #288]	; (8007a44 <readSensor+0x1ec>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	2bc7      	cmp	r3, #199	; 0xc7
 800792a:	d9fa      	bls.n	8007922 <readSensor+0xca>
	RF_EM_OFF;
 800792c:	2200      	movs	r2, #0
 800792e:	2102      	movs	r1, #2
 8007930:	4849      	ldr	r0, [pc, #292]	; (8007a58 <readSensor+0x200>)
 8007932:	f7fc f981 	bl	8003c38 <HAL_GPIO_WritePin>
	if(RFSensor < 0)
 8007936:	4b45      	ldr	r3, [pc, #276]	; (8007a4c <readSensor+0x1f4>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	da02      	bge.n	8007944 <readSensor+0xec>
		RFSensor = 0;
 800793e:	4b43      	ldr	r3, [pc, #268]	; (8007a4c <readSensor+0x1f4>)
 8007940:	2200      	movs	r2, #0
 8007942:	601a      	str	r2, [r3, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<280);
 8007944:	bf00      	nop
 8007946:	4b3f      	ldr	r3, [pc, #252]	; (8007a44 <readSensor+0x1ec>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8007950:	d3f9      	bcc.n	8007946 <readSensor+0xee>

    //diagonal sensors
	SIDE_EM_ON;
 8007952:	2201      	movs	r2, #1
 8007954:	2120      	movs	r1, #32
 8007956:	4840      	ldr	r0, [pc, #256]	; (8007a58 <readSensor+0x200>)
 8007958:	f7fc f96e 	bl	8003c38 <HAL_GPIO_WritePin>
	while(__HAL_TIM_GET_COUNTER(&htim1)<340);
 800795c:	bf00      	nop
 800795e:	4b39      	ldr	r3, [pc, #228]	; (8007a44 <readSensor+0x1ec>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007968:	d3f9      	bcc.n	800795e <readSensor+0x106>
	DLSensor = read_DL_Sensor - DLSensor;
 800796a:	2101      	movs	r1, #1
 800796c:	2003      	movs	r0, #3
 800796e:	f7ff fc11 	bl	8007194 <readADC>
 8007972:	4603      	mov	r3, r0
 8007974:	461a      	mov	r2, r3
 8007976:	4b36      	ldr	r3, [pc, #216]	; (8007a50 <readSensor+0x1f8>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	4a34      	ldr	r2, [pc, #208]	; (8007a50 <readSensor+0x1f8>)
 800797e:	6013      	str	r3, [r2, #0]
	DRSensor = read_DR_Sensor - DRSensor;
 8007980:	2101      	movs	r1, #1
 8007982:	2002      	movs	r0, #2
 8007984:	f7ff fc06 	bl	8007194 <readADC>
 8007988:	4603      	mov	r3, r0
 800798a:	461a      	mov	r2, r3
 800798c:	4b31      	ldr	r3, [pc, #196]	; (8007a54 <readSensor+0x1fc>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	4a30      	ldr	r2, [pc, #192]	; (8007a54 <readSensor+0x1fc>)
 8007994:	6013      	str	r3, [r2, #0]
    SIDE_EM_OFF;
 8007996:	2200      	movs	r2, #0
 8007998:	2120      	movs	r1, #32
 800799a:	482f      	ldr	r0, [pc, #188]	; (8007a58 <readSensor+0x200>)
 800799c:	f7fc f94c 	bl	8003c38 <HAL_GPIO_WritePin>
	if(DLSensor < 0)
 80079a0:	4b2b      	ldr	r3, [pc, #172]	; (8007a50 <readSensor+0x1f8>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	da02      	bge.n	80079ae <readSensor+0x156>
		DLSensor = 0;
 80079a8:	4b29      	ldr	r3, [pc, #164]	; (8007a50 <readSensor+0x1f8>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]
	if(DRSensor < 0)
 80079ae:	4b29      	ldr	r3, [pc, #164]	; (8007a54 <readSensor+0x1fc>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	da02      	bge.n	80079bc <readSensor+0x164>
		DRSensor = 0;
 80079b6:	4b27      	ldr	r3, [pc, #156]	; (8007a54 <readSensor+0x1fc>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	601a      	str	r2, [r3, #0]
	// while(__HAL_TIM_GET_COUNTER(&htim1)<500);
	
	readVolMeter();
 80079bc:	f000 f854 	bl	8007a68 <readVolMeter>
	
	LFSensor = LFSensor*reflectionRate/1000;
 80079c0:	4b21      	ldr	r3, [pc, #132]	; (8007a48 <readSensor+0x1f0>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a25      	ldr	r2, [pc, #148]	; (8007a5c <readSensor+0x204>)
 80079c6:	6812      	ldr	r2, [r2, #0]
 80079c8:	fb02 f303 	mul.w	r3, r2, r3
 80079cc:	4a24      	ldr	r2, [pc, #144]	; (8007a60 <readSensor+0x208>)
 80079ce:	fb82 1203 	smull	r1, r2, r2, r3
 80079d2:	1192      	asrs	r2, r2, #6
 80079d4:	17db      	asrs	r3, r3, #31
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	4a1b      	ldr	r2, [pc, #108]	; (8007a48 <readSensor+0x1f0>)
 80079da:	6013      	str	r3, [r2, #0]
	RFSensor = RFSensor*reflectionRate/1000;
 80079dc:	4b1b      	ldr	r3, [pc, #108]	; (8007a4c <readSensor+0x1f4>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a1e      	ldr	r2, [pc, #120]	; (8007a5c <readSensor+0x204>)
 80079e2:	6812      	ldr	r2, [r2, #0]
 80079e4:	fb02 f303 	mul.w	r3, r2, r3
 80079e8:	4a1d      	ldr	r2, [pc, #116]	; (8007a60 <readSensor+0x208>)
 80079ea:	fb82 1203 	smull	r1, r2, r2, r3
 80079ee:	1192      	asrs	r2, r2, #6
 80079f0:	17db      	asrs	r3, r3, #31
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	4a15      	ldr	r2, [pc, #84]	; (8007a4c <readSensor+0x1f4>)
 80079f6:	6013      	str	r3, [r2, #0]
	DLSensor = DLSensor*reflectionRate/1000;
 80079f8:	4b15      	ldr	r3, [pc, #84]	; (8007a50 <readSensor+0x1f8>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a17      	ldr	r2, [pc, #92]	; (8007a5c <readSensor+0x204>)
 80079fe:	6812      	ldr	r2, [r2, #0]
 8007a00:	fb02 f303 	mul.w	r3, r2, r3
 8007a04:	4a16      	ldr	r2, [pc, #88]	; (8007a60 <readSensor+0x208>)
 8007a06:	fb82 1203 	smull	r1, r2, r2, r3
 8007a0a:	1192      	asrs	r2, r2, #6
 8007a0c:	17db      	asrs	r3, r3, #31
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	4a0f      	ldr	r2, [pc, #60]	; (8007a50 <readSensor+0x1f8>)
 8007a12:	6013      	str	r3, [r2, #0]
	DRSensor = DRSensor*reflectionRate/1000;
 8007a14:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <readSensor+0x1fc>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a10      	ldr	r2, [pc, #64]	; (8007a5c <readSensor+0x204>)
 8007a1a:	6812      	ldr	r2, [r2, #0]
 8007a1c:	fb02 f303 	mul.w	r3, r2, r3
 8007a20:	4a0f      	ldr	r2, [pc, #60]	; (8007a60 <readSensor+0x208>)
 8007a22:	fb82 1203 	smull	r1, r2, r2, r3
 8007a26:	1192      	asrs	r2, r2, #6
 8007a28:	17db      	asrs	r3, r3, #31
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	4a09      	ldr	r2, [pc, #36]	; (8007a54 <readSensor+0x1fc>)
 8007a2e:	6013      	str	r3, [r2, #0]
	
	LED7_OFF;
 8007a30:	2200      	movs	r2, #0
 8007a32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a36:	4802      	ldr	r0, [pc, #8]	; (8007a40 <readSensor+0x1e8>)
 8007a38:	f7fc f8fe 	bl	8003c38 <HAL_GPIO_WritePin>
}
 8007a3c:	bf00      	nop
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	40020000 	.word	0x40020000
 8007a44:	2000037c 	.word	0x2000037c
 8007a48:	2000085c 	.word	0x2000085c
 8007a4c:	20000860 	.word	0x20000860
 8007a50:	20000864 	.word	0x20000864
 8007a54:	20000868 	.word	0x20000868
 8007a58:	40020800 	.word	0x40020800
 8007a5c:	2000002c 	.word	0x2000002c
 8007a60:	10624dd3 	.word	0x10624dd3
 8007a64:	00000000 	.word	0x00000000

08007a68 <readVolMeter>:



/*read voltage meter*/
void readVolMeter(void)
{          //3240 = 7.85V
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
	volMeter = read_Vol_Meter;//raw value
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	2004      	movs	r0, #4
 8007a70:	f7ff fb90 	bl	8007194 <readADC>
 8007a74:	4603      	mov	r3, r0
 8007a76:	461a      	mov	r2, r3
 8007a78:	4b1b      	ldr	r3, [pc, #108]	; (8007ae8 <readVolMeter+0x80>)
 8007a7a:	601a      	str	r2, [r3, #0]
	voltage = (volMeter*ADC_REF_VOL/4095)* 2.8;//actual voltage value  ex) 8.2V = 8200
 8007a7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ae8 <readVolMeter+0x80>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7f8 fd4f 	bl	8000524 <__aeabi_i2d>
 8007a86:	a312      	add	r3, pc, #72	; (adr r3, 8007ad0 <readVolMeter+0x68>)
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	f7f8 fdb4 	bl	80005f8 <__aeabi_dmul>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	4610      	mov	r0, r2
 8007a96:	4619      	mov	r1, r3
 8007a98:	a30f      	add	r3, pc, #60	; (adr r3, 8007ad8 <readVolMeter+0x70>)
 8007a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9e:	f7f8 fed5 	bl	800084c <__aeabi_ddiv>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	a30d      	add	r3, pc, #52	; (adr r3, 8007ae0 <readVolMeter+0x78>)
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	f7f8 fda2 	bl	80005f8 <__aeabi_dmul>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	4610      	mov	r0, r2
 8007aba:	4619      	mov	r1, r3
 8007abc:	f7f9 f874 	bl	8000ba8 <__aeabi_d2f>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	4a0a      	ldr	r2, [pc, #40]	; (8007aec <readVolMeter+0x84>)
 8007ac4:	6013      	str	r3, [r2, #0]
	// if (voltage<LOW_BAT_TH)
	// 	stop_it_all();
}
 8007ac6:	bf00      	nop
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	f3af 8000 	nop.w
 8007ad0:	bc6a7efa 	.word	0xbc6a7efa
 8007ad4:	400a9374 	.word	0x400a9374
 8007ad8:	00000000 	.word	0x00000000
 8007adc:	40affe00 	.word	0x40affe00
 8007ae0:	66666666 	.word	0x66666666
 8007ae4:	40066666 	.word	0x40066666
 8007ae8:	20000854 	.word	0x20000854
 8007aec:	20000858 	.word	0x20000858

08007af0 <cppmain>:
u32 i;
bool buttonPress = false;
int mouseState = 0;

int cppmain(void)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	af00      	add	r7, sp, #0
	initialization_block();
 8007af4:	f000 f82c 	bl	8007b50 <initialization_block>
	HAL_Delay(1000);
 8007af8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007afc:	f7fa fee0 	bl	80028c0 <HAL_Delay>
	disp_state = SENSOR_READ;
 8007b00:	4b0e      	ldr	r3, [pc, #56]	; (8007b3c <cppmain+0x4c>)
 8007b02:	2203      	movs	r2, #3
 8007b04:	701a      	strb	r2, [r3, #0]

	while (1)
	{
		if (pointTurnLR(-180))
 8007b06:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007b40 <cppmain+0x50>
 8007b0a:	f7ff fa5d 	bl	8006fc8 <pointTurnLR>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00d      	beq.n	8007b30 <cppmain+0x40>
		{
			STOP_ROBOT;
 8007b14:	4b0b      	ldr	r3, [pc, #44]	; (8007b44 <cppmain+0x54>)
 8007b16:	f04f 0200 	mov.w	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]
 8007b1c:	4b0a      	ldr	r3, [pc, #40]	; (8007b48 <cppmain+0x58>)
 8007b1e:	f04f 0200 	mov.w	r2, #0
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	f7ff fe80 	bl	8007828 <setWheels>
			HAL_Delay(3000);
 8007b28:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007b2c:	f7fa fec8 	bl	80028c0 <HAL_Delay>
		}
		i++;
 8007b30:	4b06      	ldr	r3, [pc, #24]	; (8007b4c <cppmain+0x5c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3301      	adds	r3, #1
 8007b36:	4a05      	ldr	r2, [pc, #20]	; (8007b4c <cppmain+0x5c>)
 8007b38:	6013      	str	r3, [r2, #0]
		if (pointTurnLR(-180))
 8007b3a:	e7e4      	b.n	8007b06 <cppmain+0x16>
 8007b3c:	20000848 	.word	0x20000848
 8007b40:	c3340000 	.word	0xc3340000
 8007b44:	2000084c 	.word	0x2000084c
 8007b48:	20000850 	.word	0x20000850
 8007b4c:	2000086c 	.word	0x2000086c

08007b50 <initialization_block>:
		// HAL_Delay(1);
	}
}

int initialization_block(void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
	ALL_LED_ON;
 8007b54:	2201      	movs	r2, #1
 8007b56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b5a:	484c      	ldr	r0, [pc, #304]	; (8007c8c <initialization_block+0x13c>)
 8007b5c:	f7fc f86c 	bl	8003c38 <HAL_GPIO_WritePin>
 8007b60:	2201      	movs	r2, #1
 8007b62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b66:	4849      	ldr	r0, [pc, #292]	; (8007c8c <initialization_block+0x13c>)
 8007b68:	f7fc f866 	bl	8003c38 <HAL_GPIO_WritePin>
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b72:	4847      	ldr	r0, [pc, #284]	; (8007c90 <initialization_block+0x140>)
 8007b74:	f7fc f860 	bl	8003c38 <HAL_GPIO_WritePin>
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b7e:	4844      	ldr	r0, [pc, #272]	; (8007c90 <initialization_block+0x140>)
 8007b80:	f7fc f85a 	bl	8003c38 <HAL_GPIO_WritePin>
 8007b84:	2201      	movs	r2, #1
 8007b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b8a:	4841      	ldr	r0, [pc, #260]	; (8007c90 <initialization_block+0x140>)
 8007b8c:	f7fc f854 	bl	8003c38 <HAL_GPIO_WritePin>
 8007b90:	2201      	movs	r2, #1
 8007b92:	2104      	movs	r1, #4
 8007b94:	483f      	ldr	r0, [pc, #252]	; (8007c94 <initialization_block+0x144>)
 8007b96:	f7fc f84f 	bl	8003c38 <HAL_GPIO_WritePin>
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ba0:	483a      	ldr	r0, [pc, #232]	; (8007c8c <initialization_block+0x13c>)
 8007ba2:	f7fc f849 	bl	8003c38 <HAL_GPIO_WritePin>
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	2110      	movs	r1, #16
 8007baa:	483b      	ldr	r0, [pc, #236]	; (8007c98 <initialization_block+0x148>)
 8007bac:	f7fc f844 	bl	8003c38 <HAL_GPIO_WritePin>
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007bb6:	4838      	ldr	r0, [pc, #224]	; (8007c98 <initialization_block+0x148>)
 8007bb8:	f7fc f83e 	bl	8003c38 <HAL_GPIO_WritePin>
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	4833      	ldr	r0, [pc, #204]	; (8007c90 <initialization_block+0x140>)
 8007bc2:	f7fc f839 	bl	8003c38 <HAL_GPIO_WritePin>
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bcc:	4832      	ldr	r0, [pc, #200]	; (8007c98 <initialization_block+0x148>)
 8007bce:	f7fc f833 	bl	8003c38 <HAL_GPIO_WritePin>
	TIM1_START; ////////////////// CRUCIAL PART DON"T OFFFFFFFFFFFFFFFF ///////////////////////////
 8007bd2:	4832      	ldr	r0, [pc, #200]	; (8007c9c <initialization_block+0x14c>)
 8007bd4:	f7fd fb3e 	bl	8005254 <HAL_TIM_Base_Start>
	TIM6_IT_START;
 8007bd8:	4831      	ldr	r0, [pc, #196]	; (8007ca0 <initialization_block+0x150>)
 8007bda:	f7fd fba3 	bl	8005324 <HAL_TIM_Base_Start_IT>

	motorInit();
 8007bde:	f7ff fd1b 	bl	8007618 <motorInit>
	encoderInit();
 8007be2:	f7ff fcf3 	bl	80075cc <encoderInit>
	gyroInit();
 8007be6:	f7fe ff7f 	bl	8006ae8 <gyroInit>
	displayInit();
 8007bea:	f7ff fb2b 	bl	8007244 <displayInit>
	// buzzerInit();

	ALL_LED_OFF;
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bf4:	4825      	ldr	r0, [pc, #148]	; (8007c8c <initialization_block+0x13c>)
 8007bf6:	f7fc f81f 	bl	8003c38 <HAL_GPIO_WritePin>
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c00:	4822      	ldr	r0, [pc, #136]	; (8007c8c <initialization_block+0x13c>)
 8007c02:	f7fc f819 	bl	8003c38 <HAL_GPIO_WritePin>
 8007c06:	2200      	movs	r2, #0
 8007c08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c0c:	4820      	ldr	r0, [pc, #128]	; (8007c90 <initialization_block+0x140>)
 8007c0e:	f7fc f813 	bl	8003c38 <HAL_GPIO_WritePin>
 8007c12:	2200      	movs	r2, #0
 8007c14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c18:	481d      	ldr	r0, [pc, #116]	; (8007c90 <initialization_block+0x140>)
 8007c1a:	f7fc f80d 	bl	8003c38 <HAL_GPIO_WritePin>
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c24:	481a      	ldr	r0, [pc, #104]	; (8007c90 <initialization_block+0x140>)
 8007c26:	f7fc f807 	bl	8003c38 <HAL_GPIO_WritePin>
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2104      	movs	r1, #4
 8007c2e:	4819      	ldr	r0, [pc, #100]	; (8007c94 <initialization_block+0x144>)
 8007c30:	f7fc f802 	bl	8003c38 <HAL_GPIO_WritePin>
 8007c34:	2200      	movs	r2, #0
 8007c36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c3a:	4814      	ldr	r0, [pc, #80]	; (8007c8c <initialization_block+0x13c>)
 8007c3c:	f7fb fffc 	bl	8003c38 <HAL_GPIO_WritePin>
 8007c40:	2200      	movs	r2, #0
 8007c42:	2110      	movs	r1, #16
 8007c44:	4814      	ldr	r0, [pc, #80]	; (8007c98 <initialization_block+0x148>)
 8007c46:	f7fb fff7 	bl	8003c38 <HAL_GPIO_WritePin>
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c50:	4811      	ldr	r0, [pc, #68]	; (8007c98 <initialization_block+0x148>)
 8007c52:	f7fb fff1 	bl	8003c38 <HAL_GPIO_WritePin>
 8007c56:	2200      	movs	r2, #0
 8007c58:	2101      	movs	r1, #1
 8007c5a:	480d      	ldr	r0, [pc, #52]	; (8007c90 <initialization_block+0x140>)
 8007c5c:	f7fb ffec 	bl	8003c38 <HAL_GPIO_WritePin>
 8007c60:	2200      	movs	r2, #0
 8007c62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c66:	480c      	ldr	r0, [pc, #48]	; (8007c98 <initialization_block+0x148>)
 8007c68:	f7fb ffe6 	bl	8003c38 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8007c6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c70:	f7fa fe26 	bl	80028c0 <HAL_Delay>
	gyroCalibration();
 8007c74:	f7ff f8c0 	bl	8006df8 <gyroCalibration>
	disp_state = DEFAULT;
 8007c78:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <initialization_block+0x154>)
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	701a      	strb	r2, [r3, #0]
	TIM13_IT_START;
 8007c7e:	480a      	ldr	r0, [pc, #40]	; (8007ca8 <initialization_block+0x158>)
 8007c80:	f7fd fb50 	bl	8005324 <HAL_TIM_Base_Start_IT>

	return 0;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	40020000 	.word	0x40020000
 8007c90:	40020800 	.word	0x40020800
 8007c94:	40020c00 	.word	0x40020c00
 8007c98:	40020400 	.word	0x40020400
 8007c9c:	2000037c 	.word	0x2000037c
 8007ca0:	2000049c 	.word	0x2000049c
 8007ca4:	20000848 	.word	0x20000848
 8007ca8:	2000052c 	.word	0x2000052c

08007cac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
	if (htim == &htim14)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a0c      	ldr	r2, [pc, #48]	; (8007ce8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d102      	bne.n	8007cc2 <HAL_TIM_PeriodElapsedCallback+0x16>
		readSensor();
 8007cbc:	f7ff fdcc 	bl	8007858 <readSensor>
	else if (htim == &htim13)
		gyroUpdate(),
			readSensor();
	else if (htim == &htim6)
		displayUpdate();
}
 8007cc0:	e00e      	b.n	8007ce0 <HAL_TIM_PeriodElapsedCallback+0x34>
	else if (htim == &htim13)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a09      	ldr	r2, [pc, #36]	; (8007cec <HAL_TIM_PeriodElapsedCallback+0x40>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d104      	bne.n	8007cd4 <HAL_TIM_PeriodElapsedCallback+0x28>
		gyroUpdate(),
 8007cca:	f7fe ffaf 	bl	8006c2c <gyroUpdate>
			readSensor();
 8007cce:	f7ff fdc3 	bl	8007858 <readSensor>
}
 8007cd2:	e005      	b.n	8007ce0 <HAL_TIM_PeriodElapsedCallback+0x34>
	else if (htim == &htim6)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a06      	ldr	r2, [pc, #24]	; (8007cf0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d101      	bne.n	8007ce0 <HAL_TIM_PeriodElapsedCallback+0x34>
		displayUpdate();
 8007cdc:	f7ff fb6c 	bl	80073b8 <displayUpdate>
}
 8007ce0:	bf00      	nop
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	20000574 	.word	0x20000574
 8007cec:	2000052c 	.word	0x2000052c
 8007cf0:	2000049c 	.word	0x2000049c

08007cf4 <pow>:
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	ed2d 8b02 	vpush	{d8}
 8007cfa:	eeb0 8a40 	vmov.f32	s16, s0
 8007cfe:	eef0 8a60 	vmov.f32	s17, s1
 8007d02:	ec55 4b11 	vmov	r4, r5, d1
 8007d06:	f000 f873 	bl	8007df0 <__ieee754_pow>
 8007d0a:	4622      	mov	r2, r4
 8007d0c:	462b      	mov	r3, r5
 8007d0e:	4620      	mov	r0, r4
 8007d10:	4629      	mov	r1, r5
 8007d12:	ec57 6b10 	vmov	r6, r7, d0
 8007d16:	f7f8 ff09 	bl	8000b2c <__aeabi_dcmpun>
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	d13b      	bne.n	8007d96 <pow+0xa2>
 8007d1e:	ec51 0b18 	vmov	r0, r1, d8
 8007d22:	2200      	movs	r2, #0
 8007d24:	2300      	movs	r3, #0
 8007d26:	f7f8 fecf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d2a:	b1b8      	cbz	r0, 8007d5c <pow+0x68>
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2300      	movs	r3, #0
 8007d30:	4620      	mov	r0, r4
 8007d32:	4629      	mov	r1, r5
 8007d34:	f7f8 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d146      	bne.n	8007dca <pow+0xd6>
 8007d3c:	ec45 4b10 	vmov	d0, r4, r5
 8007d40:	f000 f848 	bl	8007dd4 <finite>
 8007d44:	b338      	cbz	r0, 8007d96 <pow+0xa2>
 8007d46:	2200      	movs	r2, #0
 8007d48:	2300      	movs	r3, #0
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	f7f8 fec5 	bl	8000adc <__aeabi_dcmplt>
 8007d52:	b300      	cbz	r0, 8007d96 <pow+0xa2>
 8007d54:	f001 fe12 	bl	800997c <__errno>
 8007d58:	2322      	movs	r3, #34	; 0x22
 8007d5a:	e01b      	b.n	8007d94 <pow+0xa0>
 8007d5c:	ec47 6b10 	vmov	d0, r6, r7
 8007d60:	f000 f838 	bl	8007dd4 <finite>
 8007d64:	b9e0      	cbnz	r0, 8007da0 <pow+0xac>
 8007d66:	eeb0 0a48 	vmov.f32	s0, s16
 8007d6a:	eef0 0a68 	vmov.f32	s1, s17
 8007d6e:	f000 f831 	bl	8007dd4 <finite>
 8007d72:	b1a8      	cbz	r0, 8007da0 <pow+0xac>
 8007d74:	ec45 4b10 	vmov	d0, r4, r5
 8007d78:	f000 f82c 	bl	8007dd4 <finite>
 8007d7c:	b180      	cbz	r0, 8007da0 <pow+0xac>
 8007d7e:	4632      	mov	r2, r6
 8007d80:	463b      	mov	r3, r7
 8007d82:	4630      	mov	r0, r6
 8007d84:	4639      	mov	r1, r7
 8007d86:	f7f8 fed1 	bl	8000b2c <__aeabi_dcmpun>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d0e2      	beq.n	8007d54 <pow+0x60>
 8007d8e:	f001 fdf5 	bl	800997c <__errno>
 8007d92:	2321      	movs	r3, #33	; 0x21
 8007d94:	6003      	str	r3, [r0, #0]
 8007d96:	ecbd 8b02 	vpop	{d8}
 8007d9a:	ec47 6b10 	vmov	d0, r6, r7
 8007d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007da0:	2200      	movs	r2, #0
 8007da2:	2300      	movs	r3, #0
 8007da4:	4630      	mov	r0, r6
 8007da6:	4639      	mov	r1, r7
 8007da8:	f7f8 fe8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	d0f2      	beq.n	8007d96 <pow+0xa2>
 8007db0:	eeb0 0a48 	vmov.f32	s0, s16
 8007db4:	eef0 0a68 	vmov.f32	s1, s17
 8007db8:	f000 f80c 	bl	8007dd4 <finite>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	d0ea      	beq.n	8007d96 <pow+0xa2>
 8007dc0:	ec45 4b10 	vmov	d0, r4, r5
 8007dc4:	f000 f806 	bl	8007dd4 <finite>
 8007dc8:	e7c3      	b.n	8007d52 <pow+0x5e>
 8007dca:	4f01      	ldr	r7, [pc, #4]	; (8007dd0 <pow+0xdc>)
 8007dcc:	2600      	movs	r6, #0
 8007dce:	e7e2      	b.n	8007d96 <pow+0xa2>
 8007dd0:	3ff00000 	.word	0x3ff00000

08007dd4 <finite>:
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	ed8d 0b00 	vstr	d0, [sp]
 8007dda:	9801      	ldr	r0, [sp, #4]
 8007ddc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007de0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007de4:	0fc0      	lsrs	r0, r0, #31
 8007de6:	b002      	add	sp, #8
 8007de8:	4770      	bx	lr
 8007dea:	0000      	movs	r0, r0
 8007dec:	0000      	movs	r0, r0
	...

08007df0 <__ieee754_pow>:
 8007df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df4:	ed2d 8b06 	vpush	{d8-d10}
 8007df8:	b089      	sub	sp, #36	; 0x24
 8007dfa:	ed8d 1b00 	vstr	d1, [sp]
 8007dfe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007e02:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007e06:	ea58 0102 	orrs.w	r1, r8, r2
 8007e0a:	ec57 6b10 	vmov	r6, r7, d0
 8007e0e:	d115      	bne.n	8007e3c <__ieee754_pow+0x4c>
 8007e10:	19b3      	adds	r3, r6, r6
 8007e12:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007e16:	4152      	adcs	r2, r2
 8007e18:	4299      	cmp	r1, r3
 8007e1a:	4b89      	ldr	r3, [pc, #548]	; (8008040 <__ieee754_pow+0x250>)
 8007e1c:	4193      	sbcs	r3, r2
 8007e1e:	f080 84d1 	bcs.w	80087c4 <__ieee754_pow+0x9d4>
 8007e22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e26:	4630      	mov	r0, r6
 8007e28:	4639      	mov	r1, r7
 8007e2a:	f7f8 fa2f 	bl	800028c <__adddf3>
 8007e2e:	ec41 0b10 	vmov	d0, r0, r1
 8007e32:	b009      	add	sp, #36	; 0x24
 8007e34:	ecbd 8b06 	vpop	{d8-d10}
 8007e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3c:	4b81      	ldr	r3, [pc, #516]	; (8008044 <__ieee754_pow+0x254>)
 8007e3e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007e42:	429c      	cmp	r4, r3
 8007e44:	ee10 aa10 	vmov	sl, s0
 8007e48:	463d      	mov	r5, r7
 8007e4a:	dc06      	bgt.n	8007e5a <__ieee754_pow+0x6a>
 8007e4c:	d101      	bne.n	8007e52 <__ieee754_pow+0x62>
 8007e4e:	2e00      	cmp	r6, #0
 8007e50:	d1e7      	bne.n	8007e22 <__ieee754_pow+0x32>
 8007e52:	4598      	cmp	r8, r3
 8007e54:	dc01      	bgt.n	8007e5a <__ieee754_pow+0x6a>
 8007e56:	d10f      	bne.n	8007e78 <__ieee754_pow+0x88>
 8007e58:	b172      	cbz	r2, 8007e78 <__ieee754_pow+0x88>
 8007e5a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007e5e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007e62:	ea55 050a 	orrs.w	r5, r5, sl
 8007e66:	d1dc      	bne.n	8007e22 <__ieee754_pow+0x32>
 8007e68:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007e6c:	18db      	adds	r3, r3, r3
 8007e6e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007e72:	4152      	adcs	r2, r2
 8007e74:	429d      	cmp	r5, r3
 8007e76:	e7d0      	b.n	8007e1a <__ieee754_pow+0x2a>
 8007e78:	2d00      	cmp	r5, #0
 8007e7a:	da3b      	bge.n	8007ef4 <__ieee754_pow+0x104>
 8007e7c:	4b72      	ldr	r3, [pc, #456]	; (8008048 <__ieee754_pow+0x258>)
 8007e7e:	4598      	cmp	r8, r3
 8007e80:	dc51      	bgt.n	8007f26 <__ieee754_pow+0x136>
 8007e82:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007e86:	4598      	cmp	r8, r3
 8007e88:	f340 84ab 	ble.w	80087e2 <__ieee754_pow+0x9f2>
 8007e8c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007e90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007e94:	2b14      	cmp	r3, #20
 8007e96:	dd0f      	ble.n	8007eb8 <__ieee754_pow+0xc8>
 8007e98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007e9c:	fa22 f103 	lsr.w	r1, r2, r3
 8007ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	f040 849c 	bne.w	80087e2 <__ieee754_pow+0x9f2>
 8007eaa:	f001 0101 	and.w	r1, r1, #1
 8007eae:	f1c1 0302 	rsb	r3, r1, #2
 8007eb2:	9304      	str	r3, [sp, #16]
 8007eb4:	b182      	cbz	r2, 8007ed8 <__ieee754_pow+0xe8>
 8007eb6:	e05f      	b.n	8007f78 <__ieee754_pow+0x188>
 8007eb8:	2a00      	cmp	r2, #0
 8007eba:	d15b      	bne.n	8007f74 <__ieee754_pow+0x184>
 8007ebc:	f1c3 0314 	rsb	r3, r3, #20
 8007ec0:	fa48 f103 	asr.w	r1, r8, r3
 8007ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec8:	4543      	cmp	r3, r8
 8007eca:	f040 8487 	bne.w	80087dc <__ieee754_pow+0x9ec>
 8007ece:	f001 0101 	and.w	r1, r1, #1
 8007ed2:	f1c1 0302 	rsb	r3, r1, #2
 8007ed6:	9304      	str	r3, [sp, #16]
 8007ed8:	4b5c      	ldr	r3, [pc, #368]	; (800804c <__ieee754_pow+0x25c>)
 8007eda:	4598      	cmp	r8, r3
 8007edc:	d132      	bne.n	8007f44 <__ieee754_pow+0x154>
 8007ede:	f1b9 0f00 	cmp.w	r9, #0
 8007ee2:	f280 8477 	bge.w	80087d4 <__ieee754_pow+0x9e4>
 8007ee6:	4959      	ldr	r1, [pc, #356]	; (800804c <__ieee754_pow+0x25c>)
 8007ee8:	4632      	mov	r2, r6
 8007eea:	463b      	mov	r3, r7
 8007eec:	2000      	movs	r0, #0
 8007eee:	f7f8 fcad 	bl	800084c <__aeabi_ddiv>
 8007ef2:	e79c      	b.n	8007e2e <__ieee754_pow+0x3e>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	9304      	str	r3, [sp, #16]
 8007ef8:	2a00      	cmp	r2, #0
 8007efa:	d13d      	bne.n	8007f78 <__ieee754_pow+0x188>
 8007efc:	4b51      	ldr	r3, [pc, #324]	; (8008044 <__ieee754_pow+0x254>)
 8007efe:	4598      	cmp	r8, r3
 8007f00:	d1ea      	bne.n	8007ed8 <__ieee754_pow+0xe8>
 8007f02:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007f06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007f0a:	ea53 030a 	orrs.w	r3, r3, sl
 8007f0e:	f000 8459 	beq.w	80087c4 <__ieee754_pow+0x9d4>
 8007f12:	4b4f      	ldr	r3, [pc, #316]	; (8008050 <__ieee754_pow+0x260>)
 8007f14:	429c      	cmp	r4, r3
 8007f16:	dd08      	ble.n	8007f2a <__ieee754_pow+0x13a>
 8007f18:	f1b9 0f00 	cmp.w	r9, #0
 8007f1c:	f2c0 8456 	blt.w	80087cc <__ieee754_pow+0x9dc>
 8007f20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f24:	e783      	b.n	8007e2e <__ieee754_pow+0x3e>
 8007f26:	2302      	movs	r3, #2
 8007f28:	e7e5      	b.n	8007ef6 <__ieee754_pow+0x106>
 8007f2a:	f1b9 0f00 	cmp.w	r9, #0
 8007f2e:	f04f 0000 	mov.w	r0, #0
 8007f32:	f04f 0100 	mov.w	r1, #0
 8007f36:	f6bf af7a 	bge.w	8007e2e <__ieee754_pow+0x3e>
 8007f3a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007f3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007f42:	e774      	b.n	8007e2e <__ieee754_pow+0x3e>
 8007f44:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007f48:	d106      	bne.n	8007f58 <__ieee754_pow+0x168>
 8007f4a:	4632      	mov	r2, r6
 8007f4c:	463b      	mov	r3, r7
 8007f4e:	4630      	mov	r0, r6
 8007f50:	4639      	mov	r1, r7
 8007f52:	f7f8 fb51 	bl	80005f8 <__aeabi_dmul>
 8007f56:	e76a      	b.n	8007e2e <__ieee754_pow+0x3e>
 8007f58:	4b3e      	ldr	r3, [pc, #248]	; (8008054 <__ieee754_pow+0x264>)
 8007f5a:	4599      	cmp	r9, r3
 8007f5c:	d10c      	bne.n	8007f78 <__ieee754_pow+0x188>
 8007f5e:	2d00      	cmp	r5, #0
 8007f60:	db0a      	blt.n	8007f78 <__ieee754_pow+0x188>
 8007f62:	ec47 6b10 	vmov	d0, r6, r7
 8007f66:	b009      	add	sp, #36	; 0x24
 8007f68:	ecbd 8b06 	vpop	{d8-d10}
 8007f6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f70:	f000 bd20 	b.w	80089b4 <__ieee754_sqrt>
 8007f74:	2300      	movs	r3, #0
 8007f76:	9304      	str	r3, [sp, #16]
 8007f78:	ec47 6b10 	vmov	d0, r6, r7
 8007f7c:	f000 fc62 	bl	8008844 <fabs>
 8007f80:	ec51 0b10 	vmov	r0, r1, d0
 8007f84:	f1ba 0f00 	cmp.w	sl, #0
 8007f88:	d129      	bne.n	8007fde <__ieee754_pow+0x1ee>
 8007f8a:	b124      	cbz	r4, 8007f96 <__ieee754_pow+0x1a6>
 8007f8c:	4b2f      	ldr	r3, [pc, #188]	; (800804c <__ieee754_pow+0x25c>)
 8007f8e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d123      	bne.n	8007fde <__ieee754_pow+0x1ee>
 8007f96:	f1b9 0f00 	cmp.w	r9, #0
 8007f9a:	da05      	bge.n	8007fa8 <__ieee754_pow+0x1b8>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	492a      	ldr	r1, [pc, #168]	; (800804c <__ieee754_pow+0x25c>)
 8007fa4:	f7f8 fc52 	bl	800084c <__aeabi_ddiv>
 8007fa8:	2d00      	cmp	r5, #0
 8007faa:	f6bf af40 	bge.w	8007e2e <__ieee754_pow+0x3e>
 8007fae:	9b04      	ldr	r3, [sp, #16]
 8007fb0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007fb4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007fb8:	431c      	orrs	r4, r3
 8007fba:	d108      	bne.n	8007fce <__ieee754_pow+0x1de>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	f7f8 f960 	bl	8000288 <__aeabi_dsub>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	e78f      	b.n	8007eee <__ieee754_pow+0xfe>
 8007fce:	9b04      	ldr	r3, [sp, #16]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	f47f af2c 	bne.w	8007e2e <__ieee754_pow+0x3e>
 8007fd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fda:	4619      	mov	r1, r3
 8007fdc:	e727      	b.n	8007e2e <__ieee754_pow+0x3e>
 8007fde:	0feb      	lsrs	r3, r5, #31
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	9306      	str	r3, [sp, #24]
 8007fe4:	9a06      	ldr	r2, [sp, #24]
 8007fe6:	9b04      	ldr	r3, [sp, #16]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	d102      	bne.n	8007ff2 <__ieee754_pow+0x202>
 8007fec:	4632      	mov	r2, r6
 8007fee:	463b      	mov	r3, r7
 8007ff0:	e7e6      	b.n	8007fc0 <__ieee754_pow+0x1d0>
 8007ff2:	4b19      	ldr	r3, [pc, #100]	; (8008058 <__ieee754_pow+0x268>)
 8007ff4:	4598      	cmp	r8, r3
 8007ff6:	f340 80fb 	ble.w	80081f0 <__ieee754_pow+0x400>
 8007ffa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007ffe:	4598      	cmp	r8, r3
 8008000:	4b13      	ldr	r3, [pc, #76]	; (8008050 <__ieee754_pow+0x260>)
 8008002:	dd0c      	ble.n	800801e <__ieee754_pow+0x22e>
 8008004:	429c      	cmp	r4, r3
 8008006:	dc0f      	bgt.n	8008028 <__ieee754_pow+0x238>
 8008008:	f1b9 0f00 	cmp.w	r9, #0
 800800c:	da0f      	bge.n	800802e <__ieee754_pow+0x23e>
 800800e:	2000      	movs	r0, #0
 8008010:	b009      	add	sp, #36	; 0x24
 8008012:	ecbd 8b06 	vpop	{d8-d10}
 8008016:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801a:	f000 bcc2 	b.w	80089a2 <__math_oflow>
 800801e:	429c      	cmp	r4, r3
 8008020:	dbf2      	blt.n	8008008 <__ieee754_pow+0x218>
 8008022:	4b0a      	ldr	r3, [pc, #40]	; (800804c <__ieee754_pow+0x25c>)
 8008024:	429c      	cmp	r4, r3
 8008026:	dd19      	ble.n	800805c <__ieee754_pow+0x26c>
 8008028:	f1b9 0f00 	cmp.w	r9, #0
 800802c:	dcef      	bgt.n	800800e <__ieee754_pow+0x21e>
 800802e:	2000      	movs	r0, #0
 8008030:	b009      	add	sp, #36	; 0x24
 8008032:	ecbd 8b06 	vpop	{d8-d10}
 8008036:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803a:	f000 bca9 	b.w	8008990 <__math_uflow>
 800803e:	bf00      	nop
 8008040:	fff00000 	.word	0xfff00000
 8008044:	7ff00000 	.word	0x7ff00000
 8008048:	433fffff 	.word	0x433fffff
 800804c:	3ff00000 	.word	0x3ff00000
 8008050:	3fefffff 	.word	0x3fefffff
 8008054:	3fe00000 	.word	0x3fe00000
 8008058:	41e00000 	.word	0x41e00000
 800805c:	4b60      	ldr	r3, [pc, #384]	; (80081e0 <__ieee754_pow+0x3f0>)
 800805e:	2200      	movs	r2, #0
 8008060:	f7f8 f912 	bl	8000288 <__aeabi_dsub>
 8008064:	a354      	add	r3, pc, #336	; (adr r3, 80081b8 <__ieee754_pow+0x3c8>)
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	4604      	mov	r4, r0
 800806c:	460d      	mov	r5, r1
 800806e:	f7f8 fac3 	bl	80005f8 <__aeabi_dmul>
 8008072:	a353      	add	r3, pc, #332	; (adr r3, 80081c0 <__ieee754_pow+0x3d0>)
 8008074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008078:	4606      	mov	r6, r0
 800807a:	460f      	mov	r7, r1
 800807c:	4620      	mov	r0, r4
 800807e:	4629      	mov	r1, r5
 8008080:	f7f8 faba 	bl	80005f8 <__aeabi_dmul>
 8008084:	4b57      	ldr	r3, [pc, #348]	; (80081e4 <__ieee754_pow+0x3f4>)
 8008086:	4682      	mov	sl, r0
 8008088:	468b      	mov	fp, r1
 800808a:	2200      	movs	r2, #0
 800808c:	4620      	mov	r0, r4
 800808e:	4629      	mov	r1, r5
 8008090:	f7f8 fab2 	bl	80005f8 <__aeabi_dmul>
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	a14b      	add	r1, pc, #300	; (adr r1, 80081c8 <__ieee754_pow+0x3d8>)
 800809a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800809e:	f7f8 f8f3 	bl	8000288 <__aeabi_dsub>
 80080a2:	4622      	mov	r2, r4
 80080a4:	462b      	mov	r3, r5
 80080a6:	f7f8 faa7 	bl	80005f8 <__aeabi_dmul>
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	2000      	movs	r0, #0
 80080b0:	494d      	ldr	r1, [pc, #308]	; (80081e8 <__ieee754_pow+0x3f8>)
 80080b2:	f7f8 f8e9 	bl	8000288 <__aeabi_dsub>
 80080b6:	4622      	mov	r2, r4
 80080b8:	4680      	mov	r8, r0
 80080ba:	4689      	mov	r9, r1
 80080bc:	462b      	mov	r3, r5
 80080be:	4620      	mov	r0, r4
 80080c0:	4629      	mov	r1, r5
 80080c2:	f7f8 fa99 	bl	80005f8 <__aeabi_dmul>
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	4640      	mov	r0, r8
 80080cc:	4649      	mov	r1, r9
 80080ce:	f7f8 fa93 	bl	80005f8 <__aeabi_dmul>
 80080d2:	a33f      	add	r3, pc, #252	; (adr r3, 80081d0 <__ieee754_pow+0x3e0>)
 80080d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d8:	f7f8 fa8e 	bl	80005f8 <__aeabi_dmul>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	4650      	mov	r0, sl
 80080e2:	4659      	mov	r1, fp
 80080e4:	f7f8 f8d0 	bl	8000288 <__aeabi_dsub>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	4680      	mov	r8, r0
 80080ee:	4689      	mov	r9, r1
 80080f0:	4630      	mov	r0, r6
 80080f2:	4639      	mov	r1, r7
 80080f4:	f7f8 f8ca 	bl	800028c <__adddf3>
 80080f8:	2000      	movs	r0, #0
 80080fa:	4632      	mov	r2, r6
 80080fc:	463b      	mov	r3, r7
 80080fe:	4604      	mov	r4, r0
 8008100:	460d      	mov	r5, r1
 8008102:	f7f8 f8c1 	bl	8000288 <__aeabi_dsub>
 8008106:	4602      	mov	r2, r0
 8008108:	460b      	mov	r3, r1
 800810a:	4640      	mov	r0, r8
 800810c:	4649      	mov	r1, r9
 800810e:	f7f8 f8bb 	bl	8000288 <__aeabi_dsub>
 8008112:	9b04      	ldr	r3, [sp, #16]
 8008114:	9a06      	ldr	r2, [sp, #24]
 8008116:	3b01      	subs	r3, #1
 8008118:	4313      	orrs	r3, r2
 800811a:	4682      	mov	sl, r0
 800811c:	468b      	mov	fp, r1
 800811e:	f040 81e7 	bne.w	80084f0 <__ieee754_pow+0x700>
 8008122:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80081d8 <__ieee754_pow+0x3e8>
 8008126:	eeb0 8a47 	vmov.f32	s16, s14
 800812a:	eef0 8a67 	vmov.f32	s17, s15
 800812e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008132:	2600      	movs	r6, #0
 8008134:	4632      	mov	r2, r6
 8008136:	463b      	mov	r3, r7
 8008138:	e9dd 0100 	ldrd	r0, r1, [sp]
 800813c:	f7f8 f8a4 	bl	8000288 <__aeabi_dsub>
 8008140:	4622      	mov	r2, r4
 8008142:	462b      	mov	r3, r5
 8008144:	f7f8 fa58 	bl	80005f8 <__aeabi_dmul>
 8008148:	e9dd 2300 	ldrd	r2, r3, [sp]
 800814c:	4680      	mov	r8, r0
 800814e:	4689      	mov	r9, r1
 8008150:	4650      	mov	r0, sl
 8008152:	4659      	mov	r1, fp
 8008154:	f7f8 fa50 	bl	80005f8 <__aeabi_dmul>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	4640      	mov	r0, r8
 800815e:	4649      	mov	r1, r9
 8008160:	f7f8 f894 	bl	800028c <__adddf3>
 8008164:	4632      	mov	r2, r6
 8008166:	463b      	mov	r3, r7
 8008168:	4680      	mov	r8, r0
 800816a:	4689      	mov	r9, r1
 800816c:	4620      	mov	r0, r4
 800816e:	4629      	mov	r1, r5
 8008170:	f7f8 fa42 	bl	80005f8 <__aeabi_dmul>
 8008174:	460b      	mov	r3, r1
 8008176:	4604      	mov	r4, r0
 8008178:	460d      	mov	r5, r1
 800817a:	4602      	mov	r2, r0
 800817c:	4649      	mov	r1, r9
 800817e:	4640      	mov	r0, r8
 8008180:	f7f8 f884 	bl	800028c <__adddf3>
 8008184:	4b19      	ldr	r3, [pc, #100]	; (80081ec <__ieee754_pow+0x3fc>)
 8008186:	4299      	cmp	r1, r3
 8008188:	ec45 4b19 	vmov	d9, r4, r5
 800818c:	4606      	mov	r6, r0
 800818e:	460f      	mov	r7, r1
 8008190:	468b      	mov	fp, r1
 8008192:	f340 82f0 	ble.w	8008776 <__ieee754_pow+0x986>
 8008196:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800819a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800819e:	4303      	orrs	r3, r0
 80081a0:	f000 81e4 	beq.w	800856c <__ieee754_pow+0x77c>
 80081a4:	ec51 0b18 	vmov	r0, r1, d8
 80081a8:	2200      	movs	r2, #0
 80081aa:	2300      	movs	r3, #0
 80081ac:	f7f8 fc96 	bl	8000adc <__aeabi_dcmplt>
 80081b0:	3800      	subs	r0, #0
 80081b2:	bf18      	it	ne
 80081b4:	2001      	movne	r0, #1
 80081b6:	e72b      	b.n	8008010 <__ieee754_pow+0x220>
 80081b8:	60000000 	.word	0x60000000
 80081bc:	3ff71547 	.word	0x3ff71547
 80081c0:	f85ddf44 	.word	0xf85ddf44
 80081c4:	3e54ae0b 	.word	0x3e54ae0b
 80081c8:	55555555 	.word	0x55555555
 80081cc:	3fd55555 	.word	0x3fd55555
 80081d0:	652b82fe 	.word	0x652b82fe
 80081d4:	3ff71547 	.word	0x3ff71547
 80081d8:	00000000 	.word	0x00000000
 80081dc:	bff00000 	.word	0xbff00000
 80081e0:	3ff00000 	.word	0x3ff00000
 80081e4:	3fd00000 	.word	0x3fd00000
 80081e8:	3fe00000 	.word	0x3fe00000
 80081ec:	408fffff 	.word	0x408fffff
 80081f0:	4bd5      	ldr	r3, [pc, #852]	; (8008548 <__ieee754_pow+0x758>)
 80081f2:	402b      	ands	r3, r5
 80081f4:	2200      	movs	r2, #0
 80081f6:	b92b      	cbnz	r3, 8008204 <__ieee754_pow+0x414>
 80081f8:	4bd4      	ldr	r3, [pc, #848]	; (800854c <__ieee754_pow+0x75c>)
 80081fa:	f7f8 f9fd 	bl	80005f8 <__aeabi_dmul>
 80081fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008202:	460c      	mov	r4, r1
 8008204:	1523      	asrs	r3, r4, #20
 8008206:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800820a:	4413      	add	r3, r2
 800820c:	9305      	str	r3, [sp, #20]
 800820e:	4bd0      	ldr	r3, [pc, #832]	; (8008550 <__ieee754_pow+0x760>)
 8008210:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008214:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008218:	429c      	cmp	r4, r3
 800821a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800821e:	dd08      	ble.n	8008232 <__ieee754_pow+0x442>
 8008220:	4bcc      	ldr	r3, [pc, #816]	; (8008554 <__ieee754_pow+0x764>)
 8008222:	429c      	cmp	r4, r3
 8008224:	f340 8162 	ble.w	80084ec <__ieee754_pow+0x6fc>
 8008228:	9b05      	ldr	r3, [sp, #20]
 800822a:	3301      	adds	r3, #1
 800822c:	9305      	str	r3, [sp, #20]
 800822e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008232:	2400      	movs	r4, #0
 8008234:	00e3      	lsls	r3, r4, #3
 8008236:	9307      	str	r3, [sp, #28]
 8008238:	4bc7      	ldr	r3, [pc, #796]	; (8008558 <__ieee754_pow+0x768>)
 800823a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800823e:	ed93 7b00 	vldr	d7, [r3]
 8008242:	4629      	mov	r1, r5
 8008244:	ec53 2b17 	vmov	r2, r3, d7
 8008248:	eeb0 9a47 	vmov.f32	s18, s14
 800824c:	eef0 9a67 	vmov.f32	s19, s15
 8008250:	4682      	mov	sl, r0
 8008252:	f7f8 f819 	bl	8000288 <__aeabi_dsub>
 8008256:	4652      	mov	r2, sl
 8008258:	4606      	mov	r6, r0
 800825a:	460f      	mov	r7, r1
 800825c:	462b      	mov	r3, r5
 800825e:	ec51 0b19 	vmov	r0, r1, d9
 8008262:	f7f8 f813 	bl	800028c <__adddf3>
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	2000      	movs	r0, #0
 800826c:	49bb      	ldr	r1, [pc, #748]	; (800855c <__ieee754_pow+0x76c>)
 800826e:	f7f8 faed 	bl	800084c <__aeabi_ddiv>
 8008272:	ec41 0b1a 	vmov	d10, r0, r1
 8008276:	4602      	mov	r2, r0
 8008278:	460b      	mov	r3, r1
 800827a:	4630      	mov	r0, r6
 800827c:	4639      	mov	r1, r7
 800827e:	f7f8 f9bb 	bl	80005f8 <__aeabi_dmul>
 8008282:	2300      	movs	r3, #0
 8008284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008288:	9302      	str	r3, [sp, #8]
 800828a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800828e:	46ab      	mov	fp, r5
 8008290:	106d      	asrs	r5, r5, #1
 8008292:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008296:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800829a:	ec41 0b18 	vmov	d8, r0, r1
 800829e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80082a2:	2200      	movs	r2, #0
 80082a4:	4640      	mov	r0, r8
 80082a6:	4649      	mov	r1, r9
 80082a8:	4614      	mov	r4, r2
 80082aa:	461d      	mov	r5, r3
 80082ac:	f7f8 f9a4 	bl	80005f8 <__aeabi_dmul>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4630      	mov	r0, r6
 80082b6:	4639      	mov	r1, r7
 80082b8:	f7f7 ffe6 	bl	8000288 <__aeabi_dsub>
 80082bc:	ec53 2b19 	vmov	r2, r3, d9
 80082c0:	4606      	mov	r6, r0
 80082c2:	460f      	mov	r7, r1
 80082c4:	4620      	mov	r0, r4
 80082c6:	4629      	mov	r1, r5
 80082c8:	f7f7 ffde 	bl	8000288 <__aeabi_dsub>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	4650      	mov	r0, sl
 80082d2:	4659      	mov	r1, fp
 80082d4:	f7f7 ffd8 	bl	8000288 <__aeabi_dsub>
 80082d8:	4642      	mov	r2, r8
 80082da:	464b      	mov	r3, r9
 80082dc:	f7f8 f98c 	bl	80005f8 <__aeabi_dmul>
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	4630      	mov	r0, r6
 80082e6:	4639      	mov	r1, r7
 80082e8:	f7f7 ffce 	bl	8000288 <__aeabi_dsub>
 80082ec:	ec53 2b1a 	vmov	r2, r3, d10
 80082f0:	f7f8 f982 	bl	80005f8 <__aeabi_dmul>
 80082f4:	ec53 2b18 	vmov	r2, r3, d8
 80082f8:	ec41 0b19 	vmov	d9, r0, r1
 80082fc:	ec51 0b18 	vmov	r0, r1, d8
 8008300:	f7f8 f97a 	bl	80005f8 <__aeabi_dmul>
 8008304:	a37c      	add	r3, pc, #496	; (adr r3, 80084f8 <__ieee754_pow+0x708>)
 8008306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830a:	4604      	mov	r4, r0
 800830c:	460d      	mov	r5, r1
 800830e:	f7f8 f973 	bl	80005f8 <__aeabi_dmul>
 8008312:	a37b      	add	r3, pc, #492	; (adr r3, 8008500 <__ieee754_pow+0x710>)
 8008314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008318:	f7f7 ffb8 	bl	800028c <__adddf3>
 800831c:	4622      	mov	r2, r4
 800831e:	462b      	mov	r3, r5
 8008320:	f7f8 f96a 	bl	80005f8 <__aeabi_dmul>
 8008324:	a378      	add	r3, pc, #480	; (adr r3, 8008508 <__ieee754_pow+0x718>)
 8008326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832a:	f7f7 ffaf 	bl	800028c <__adddf3>
 800832e:	4622      	mov	r2, r4
 8008330:	462b      	mov	r3, r5
 8008332:	f7f8 f961 	bl	80005f8 <__aeabi_dmul>
 8008336:	a376      	add	r3, pc, #472	; (adr r3, 8008510 <__ieee754_pow+0x720>)
 8008338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833c:	f7f7 ffa6 	bl	800028c <__adddf3>
 8008340:	4622      	mov	r2, r4
 8008342:	462b      	mov	r3, r5
 8008344:	f7f8 f958 	bl	80005f8 <__aeabi_dmul>
 8008348:	a373      	add	r3, pc, #460	; (adr r3, 8008518 <__ieee754_pow+0x728>)
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	f7f7 ff9d 	bl	800028c <__adddf3>
 8008352:	4622      	mov	r2, r4
 8008354:	462b      	mov	r3, r5
 8008356:	f7f8 f94f 	bl	80005f8 <__aeabi_dmul>
 800835a:	a371      	add	r3, pc, #452	; (adr r3, 8008520 <__ieee754_pow+0x730>)
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	f7f7 ff94 	bl	800028c <__adddf3>
 8008364:	4622      	mov	r2, r4
 8008366:	4606      	mov	r6, r0
 8008368:	460f      	mov	r7, r1
 800836a:	462b      	mov	r3, r5
 800836c:	4620      	mov	r0, r4
 800836e:	4629      	mov	r1, r5
 8008370:	f7f8 f942 	bl	80005f8 <__aeabi_dmul>
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	4630      	mov	r0, r6
 800837a:	4639      	mov	r1, r7
 800837c:	f7f8 f93c 	bl	80005f8 <__aeabi_dmul>
 8008380:	4642      	mov	r2, r8
 8008382:	4604      	mov	r4, r0
 8008384:	460d      	mov	r5, r1
 8008386:	464b      	mov	r3, r9
 8008388:	ec51 0b18 	vmov	r0, r1, d8
 800838c:	f7f7 ff7e 	bl	800028c <__adddf3>
 8008390:	ec53 2b19 	vmov	r2, r3, d9
 8008394:	f7f8 f930 	bl	80005f8 <__aeabi_dmul>
 8008398:	4622      	mov	r2, r4
 800839a:	462b      	mov	r3, r5
 800839c:	f7f7 ff76 	bl	800028c <__adddf3>
 80083a0:	4642      	mov	r2, r8
 80083a2:	4682      	mov	sl, r0
 80083a4:	468b      	mov	fp, r1
 80083a6:	464b      	mov	r3, r9
 80083a8:	4640      	mov	r0, r8
 80083aa:	4649      	mov	r1, r9
 80083ac:	f7f8 f924 	bl	80005f8 <__aeabi_dmul>
 80083b0:	4b6b      	ldr	r3, [pc, #428]	; (8008560 <__ieee754_pow+0x770>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	4606      	mov	r6, r0
 80083b6:	460f      	mov	r7, r1
 80083b8:	f7f7 ff68 	bl	800028c <__adddf3>
 80083bc:	4652      	mov	r2, sl
 80083be:	465b      	mov	r3, fp
 80083c0:	f7f7 ff64 	bl	800028c <__adddf3>
 80083c4:	2000      	movs	r0, #0
 80083c6:	4604      	mov	r4, r0
 80083c8:	460d      	mov	r5, r1
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	4640      	mov	r0, r8
 80083d0:	4649      	mov	r1, r9
 80083d2:	f7f8 f911 	bl	80005f8 <__aeabi_dmul>
 80083d6:	4b62      	ldr	r3, [pc, #392]	; (8008560 <__ieee754_pow+0x770>)
 80083d8:	4680      	mov	r8, r0
 80083da:	4689      	mov	r9, r1
 80083dc:	2200      	movs	r2, #0
 80083de:	4620      	mov	r0, r4
 80083e0:	4629      	mov	r1, r5
 80083e2:	f7f7 ff51 	bl	8000288 <__aeabi_dsub>
 80083e6:	4632      	mov	r2, r6
 80083e8:	463b      	mov	r3, r7
 80083ea:	f7f7 ff4d 	bl	8000288 <__aeabi_dsub>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4650      	mov	r0, sl
 80083f4:	4659      	mov	r1, fp
 80083f6:	f7f7 ff47 	bl	8000288 <__aeabi_dsub>
 80083fa:	ec53 2b18 	vmov	r2, r3, d8
 80083fe:	f7f8 f8fb 	bl	80005f8 <__aeabi_dmul>
 8008402:	4622      	mov	r2, r4
 8008404:	4606      	mov	r6, r0
 8008406:	460f      	mov	r7, r1
 8008408:	462b      	mov	r3, r5
 800840a:	ec51 0b19 	vmov	r0, r1, d9
 800840e:	f7f8 f8f3 	bl	80005f8 <__aeabi_dmul>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	4630      	mov	r0, r6
 8008418:	4639      	mov	r1, r7
 800841a:	f7f7 ff37 	bl	800028c <__adddf3>
 800841e:	4606      	mov	r6, r0
 8008420:	460f      	mov	r7, r1
 8008422:	4602      	mov	r2, r0
 8008424:	460b      	mov	r3, r1
 8008426:	4640      	mov	r0, r8
 8008428:	4649      	mov	r1, r9
 800842a:	f7f7 ff2f 	bl	800028c <__adddf3>
 800842e:	a33e      	add	r3, pc, #248	; (adr r3, 8008528 <__ieee754_pow+0x738>)
 8008430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008434:	2000      	movs	r0, #0
 8008436:	4604      	mov	r4, r0
 8008438:	460d      	mov	r5, r1
 800843a:	f7f8 f8dd 	bl	80005f8 <__aeabi_dmul>
 800843e:	4642      	mov	r2, r8
 8008440:	ec41 0b18 	vmov	d8, r0, r1
 8008444:	464b      	mov	r3, r9
 8008446:	4620      	mov	r0, r4
 8008448:	4629      	mov	r1, r5
 800844a:	f7f7 ff1d 	bl	8000288 <__aeabi_dsub>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	4630      	mov	r0, r6
 8008454:	4639      	mov	r1, r7
 8008456:	f7f7 ff17 	bl	8000288 <__aeabi_dsub>
 800845a:	a335      	add	r3, pc, #212	; (adr r3, 8008530 <__ieee754_pow+0x740>)
 800845c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008460:	f7f8 f8ca 	bl	80005f8 <__aeabi_dmul>
 8008464:	a334      	add	r3, pc, #208	; (adr r3, 8008538 <__ieee754_pow+0x748>)
 8008466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846a:	4606      	mov	r6, r0
 800846c:	460f      	mov	r7, r1
 800846e:	4620      	mov	r0, r4
 8008470:	4629      	mov	r1, r5
 8008472:	f7f8 f8c1 	bl	80005f8 <__aeabi_dmul>
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	4630      	mov	r0, r6
 800847c:	4639      	mov	r1, r7
 800847e:	f7f7 ff05 	bl	800028c <__adddf3>
 8008482:	9a07      	ldr	r2, [sp, #28]
 8008484:	4b37      	ldr	r3, [pc, #220]	; (8008564 <__ieee754_pow+0x774>)
 8008486:	4413      	add	r3, r2
 8008488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848c:	f7f7 fefe 	bl	800028c <__adddf3>
 8008490:	4682      	mov	sl, r0
 8008492:	9805      	ldr	r0, [sp, #20]
 8008494:	468b      	mov	fp, r1
 8008496:	f7f8 f845 	bl	8000524 <__aeabi_i2d>
 800849a:	9a07      	ldr	r2, [sp, #28]
 800849c:	4b32      	ldr	r3, [pc, #200]	; (8008568 <__ieee754_pow+0x778>)
 800849e:	4413      	add	r3, r2
 80084a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084a4:	4606      	mov	r6, r0
 80084a6:	460f      	mov	r7, r1
 80084a8:	4652      	mov	r2, sl
 80084aa:	465b      	mov	r3, fp
 80084ac:	ec51 0b18 	vmov	r0, r1, d8
 80084b0:	f7f7 feec 	bl	800028c <__adddf3>
 80084b4:	4642      	mov	r2, r8
 80084b6:	464b      	mov	r3, r9
 80084b8:	f7f7 fee8 	bl	800028c <__adddf3>
 80084bc:	4632      	mov	r2, r6
 80084be:	463b      	mov	r3, r7
 80084c0:	f7f7 fee4 	bl	800028c <__adddf3>
 80084c4:	2000      	movs	r0, #0
 80084c6:	4632      	mov	r2, r6
 80084c8:	463b      	mov	r3, r7
 80084ca:	4604      	mov	r4, r0
 80084cc:	460d      	mov	r5, r1
 80084ce:	f7f7 fedb 	bl	8000288 <__aeabi_dsub>
 80084d2:	4642      	mov	r2, r8
 80084d4:	464b      	mov	r3, r9
 80084d6:	f7f7 fed7 	bl	8000288 <__aeabi_dsub>
 80084da:	ec53 2b18 	vmov	r2, r3, d8
 80084de:	f7f7 fed3 	bl	8000288 <__aeabi_dsub>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	4650      	mov	r0, sl
 80084e8:	4659      	mov	r1, fp
 80084ea:	e610      	b.n	800810e <__ieee754_pow+0x31e>
 80084ec:	2401      	movs	r4, #1
 80084ee:	e6a1      	b.n	8008234 <__ieee754_pow+0x444>
 80084f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008540 <__ieee754_pow+0x750>
 80084f4:	e617      	b.n	8008126 <__ieee754_pow+0x336>
 80084f6:	bf00      	nop
 80084f8:	4a454eef 	.word	0x4a454eef
 80084fc:	3fca7e28 	.word	0x3fca7e28
 8008500:	93c9db65 	.word	0x93c9db65
 8008504:	3fcd864a 	.word	0x3fcd864a
 8008508:	a91d4101 	.word	0xa91d4101
 800850c:	3fd17460 	.word	0x3fd17460
 8008510:	518f264d 	.word	0x518f264d
 8008514:	3fd55555 	.word	0x3fd55555
 8008518:	db6fabff 	.word	0xdb6fabff
 800851c:	3fdb6db6 	.word	0x3fdb6db6
 8008520:	33333303 	.word	0x33333303
 8008524:	3fe33333 	.word	0x3fe33333
 8008528:	e0000000 	.word	0xe0000000
 800852c:	3feec709 	.word	0x3feec709
 8008530:	dc3a03fd 	.word	0xdc3a03fd
 8008534:	3feec709 	.word	0x3feec709
 8008538:	145b01f5 	.word	0x145b01f5
 800853c:	be3e2fe0 	.word	0xbe3e2fe0
 8008540:	00000000 	.word	0x00000000
 8008544:	3ff00000 	.word	0x3ff00000
 8008548:	7ff00000 	.word	0x7ff00000
 800854c:	43400000 	.word	0x43400000
 8008550:	0003988e 	.word	0x0003988e
 8008554:	000bb679 	.word	0x000bb679
 8008558:	0800e5b8 	.word	0x0800e5b8
 800855c:	3ff00000 	.word	0x3ff00000
 8008560:	40080000 	.word	0x40080000
 8008564:	0800e5d8 	.word	0x0800e5d8
 8008568:	0800e5c8 	.word	0x0800e5c8
 800856c:	a3b3      	add	r3, pc, #716	; (adr r3, 800883c <__ieee754_pow+0xa4c>)
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	4640      	mov	r0, r8
 8008574:	4649      	mov	r1, r9
 8008576:	f7f7 fe89 	bl	800028c <__adddf3>
 800857a:	4622      	mov	r2, r4
 800857c:	ec41 0b1a 	vmov	d10, r0, r1
 8008580:	462b      	mov	r3, r5
 8008582:	4630      	mov	r0, r6
 8008584:	4639      	mov	r1, r7
 8008586:	f7f7 fe7f 	bl	8000288 <__aeabi_dsub>
 800858a:	4602      	mov	r2, r0
 800858c:	460b      	mov	r3, r1
 800858e:	ec51 0b1a 	vmov	r0, r1, d10
 8008592:	f7f8 fac1 	bl	8000b18 <__aeabi_dcmpgt>
 8008596:	2800      	cmp	r0, #0
 8008598:	f47f ae04 	bne.w	80081a4 <__ieee754_pow+0x3b4>
 800859c:	4aa2      	ldr	r2, [pc, #648]	; (8008828 <__ieee754_pow+0xa38>)
 800859e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80085a2:	4293      	cmp	r3, r2
 80085a4:	f340 8107 	ble.w	80087b6 <__ieee754_pow+0x9c6>
 80085a8:	151b      	asrs	r3, r3, #20
 80085aa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80085ae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80085b2:	fa4a fa03 	asr.w	sl, sl, r3
 80085b6:	44da      	add	sl, fp
 80085b8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80085bc:	489b      	ldr	r0, [pc, #620]	; (800882c <__ieee754_pow+0xa3c>)
 80085be:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80085c2:	4108      	asrs	r0, r1
 80085c4:	ea00 030a 	and.w	r3, r0, sl
 80085c8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80085cc:	f1c1 0114 	rsb	r1, r1, #20
 80085d0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80085d4:	fa4a fa01 	asr.w	sl, sl, r1
 80085d8:	f1bb 0f00 	cmp.w	fp, #0
 80085dc:	f04f 0200 	mov.w	r2, #0
 80085e0:	4620      	mov	r0, r4
 80085e2:	4629      	mov	r1, r5
 80085e4:	bfb8      	it	lt
 80085e6:	f1ca 0a00 	rsblt	sl, sl, #0
 80085ea:	f7f7 fe4d 	bl	8000288 <__aeabi_dsub>
 80085ee:	ec41 0b19 	vmov	d9, r0, r1
 80085f2:	4642      	mov	r2, r8
 80085f4:	464b      	mov	r3, r9
 80085f6:	ec51 0b19 	vmov	r0, r1, d9
 80085fa:	f7f7 fe47 	bl	800028c <__adddf3>
 80085fe:	a37a      	add	r3, pc, #488	; (adr r3, 80087e8 <__ieee754_pow+0x9f8>)
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	2000      	movs	r0, #0
 8008606:	4604      	mov	r4, r0
 8008608:	460d      	mov	r5, r1
 800860a:	f7f7 fff5 	bl	80005f8 <__aeabi_dmul>
 800860e:	ec53 2b19 	vmov	r2, r3, d9
 8008612:	4606      	mov	r6, r0
 8008614:	460f      	mov	r7, r1
 8008616:	4620      	mov	r0, r4
 8008618:	4629      	mov	r1, r5
 800861a:	f7f7 fe35 	bl	8000288 <__aeabi_dsub>
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	4640      	mov	r0, r8
 8008624:	4649      	mov	r1, r9
 8008626:	f7f7 fe2f 	bl	8000288 <__aeabi_dsub>
 800862a:	a371      	add	r3, pc, #452	; (adr r3, 80087f0 <__ieee754_pow+0xa00>)
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f7f7 ffe2 	bl	80005f8 <__aeabi_dmul>
 8008634:	a370      	add	r3, pc, #448	; (adr r3, 80087f8 <__ieee754_pow+0xa08>)
 8008636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863a:	4680      	mov	r8, r0
 800863c:	4689      	mov	r9, r1
 800863e:	4620      	mov	r0, r4
 8008640:	4629      	mov	r1, r5
 8008642:	f7f7 ffd9 	bl	80005f8 <__aeabi_dmul>
 8008646:	4602      	mov	r2, r0
 8008648:	460b      	mov	r3, r1
 800864a:	4640      	mov	r0, r8
 800864c:	4649      	mov	r1, r9
 800864e:	f7f7 fe1d 	bl	800028c <__adddf3>
 8008652:	4604      	mov	r4, r0
 8008654:	460d      	mov	r5, r1
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	4630      	mov	r0, r6
 800865c:	4639      	mov	r1, r7
 800865e:	f7f7 fe15 	bl	800028c <__adddf3>
 8008662:	4632      	mov	r2, r6
 8008664:	463b      	mov	r3, r7
 8008666:	4680      	mov	r8, r0
 8008668:	4689      	mov	r9, r1
 800866a:	f7f7 fe0d 	bl	8000288 <__aeabi_dsub>
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	4620      	mov	r0, r4
 8008674:	4629      	mov	r1, r5
 8008676:	f7f7 fe07 	bl	8000288 <__aeabi_dsub>
 800867a:	4642      	mov	r2, r8
 800867c:	4606      	mov	r6, r0
 800867e:	460f      	mov	r7, r1
 8008680:	464b      	mov	r3, r9
 8008682:	4640      	mov	r0, r8
 8008684:	4649      	mov	r1, r9
 8008686:	f7f7 ffb7 	bl	80005f8 <__aeabi_dmul>
 800868a:	a35d      	add	r3, pc, #372	; (adr r3, 8008800 <__ieee754_pow+0xa10>)
 800868c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008690:	4604      	mov	r4, r0
 8008692:	460d      	mov	r5, r1
 8008694:	f7f7 ffb0 	bl	80005f8 <__aeabi_dmul>
 8008698:	a35b      	add	r3, pc, #364	; (adr r3, 8008808 <__ieee754_pow+0xa18>)
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	f7f7 fdf3 	bl	8000288 <__aeabi_dsub>
 80086a2:	4622      	mov	r2, r4
 80086a4:	462b      	mov	r3, r5
 80086a6:	f7f7 ffa7 	bl	80005f8 <__aeabi_dmul>
 80086aa:	a359      	add	r3, pc, #356	; (adr r3, 8008810 <__ieee754_pow+0xa20>)
 80086ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b0:	f7f7 fdec 	bl	800028c <__adddf3>
 80086b4:	4622      	mov	r2, r4
 80086b6:	462b      	mov	r3, r5
 80086b8:	f7f7 ff9e 	bl	80005f8 <__aeabi_dmul>
 80086bc:	a356      	add	r3, pc, #344	; (adr r3, 8008818 <__ieee754_pow+0xa28>)
 80086be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c2:	f7f7 fde1 	bl	8000288 <__aeabi_dsub>
 80086c6:	4622      	mov	r2, r4
 80086c8:	462b      	mov	r3, r5
 80086ca:	f7f7 ff95 	bl	80005f8 <__aeabi_dmul>
 80086ce:	a354      	add	r3, pc, #336	; (adr r3, 8008820 <__ieee754_pow+0xa30>)
 80086d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d4:	f7f7 fdda 	bl	800028c <__adddf3>
 80086d8:	4622      	mov	r2, r4
 80086da:	462b      	mov	r3, r5
 80086dc:	f7f7 ff8c 	bl	80005f8 <__aeabi_dmul>
 80086e0:	4602      	mov	r2, r0
 80086e2:	460b      	mov	r3, r1
 80086e4:	4640      	mov	r0, r8
 80086e6:	4649      	mov	r1, r9
 80086e8:	f7f7 fdce 	bl	8000288 <__aeabi_dsub>
 80086ec:	4604      	mov	r4, r0
 80086ee:	460d      	mov	r5, r1
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	4640      	mov	r0, r8
 80086f6:	4649      	mov	r1, r9
 80086f8:	f7f7 ff7e 	bl	80005f8 <__aeabi_dmul>
 80086fc:	2200      	movs	r2, #0
 80086fe:	ec41 0b19 	vmov	d9, r0, r1
 8008702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008706:	4620      	mov	r0, r4
 8008708:	4629      	mov	r1, r5
 800870a:	f7f7 fdbd 	bl	8000288 <__aeabi_dsub>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	ec51 0b19 	vmov	r0, r1, d9
 8008716:	f7f8 f899 	bl	800084c <__aeabi_ddiv>
 800871a:	4632      	mov	r2, r6
 800871c:	4604      	mov	r4, r0
 800871e:	460d      	mov	r5, r1
 8008720:	463b      	mov	r3, r7
 8008722:	4640      	mov	r0, r8
 8008724:	4649      	mov	r1, r9
 8008726:	f7f7 ff67 	bl	80005f8 <__aeabi_dmul>
 800872a:	4632      	mov	r2, r6
 800872c:	463b      	mov	r3, r7
 800872e:	f7f7 fdad 	bl	800028c <__adddf3>
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	4620      	mov	r0, r4
 8008738:	4629      	mov	r1, r5
 800873a:	f7f7 fda5 	bl	8000288 <__aeabi_dsub>
 800873e:	4642      	mov	r2, r8
 8008740:	464b      	mov	r3, r9
 8008742:	f7f7 fda1 	bl	8000288 <__aeabi_dsub>
 8008746:	460b      	mov	r3, r1
 8008748:	4602      	mov	r2, r0
 800874a:	4939      	ldr	r1, [pc, #228]	; (8008830 <__ieee754_pow+0xa40>)
 800874c:	2000      	movs	r0, #0
 800874e:	f7f7 fd9b 	bl	8000288 <__aeabi_dsub>
 8008752:	ec41 0b10 	vmov	d0, r0, r1
 8008756:	ee10 3a90 	vmov	r3, s1
 800875a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800875e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008762:	da2b      	bge.n	80087bc <__ieee754_pow+0x9cc>
 8008764:	4650      	mov	r0, sl
 8008766:	f000 f877 	bl	8008858 <scalbn>
 800876a:	ec51 0b10 	vmov	r0, r1, d0
 800876e:	ec53 2b18 	vmov	r2, r3, d8
 8008772:	f7ff bbee 	b.w	8007f52 <__ieee754_pow+0x162>
 8008776:	4b2f      	ldr	r3, [pc, #188]	; (8008834 <__ieee754_pow+0xa44>)
 8008778:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800877c:	429e      	cmp	r6, r3
 800877e:	f77f af0d 	ble.w	800859c <__ieee754_pow+0x7ac>
 8008782:	4b2d      	ldr	r3, [pc, #180]	; (8008838 <__ieee754_pow+0xa48>)
 8008784:	440b      	add	r3, r1
 8008786:	4303      	orrs	r3, r0
 8008788:	d009      	beq.n	800879e <__ieee754_pow+0x9ae>
 800878a:	ec51 0b18 	vmov	r0, r1, d8
 800878e:	2200      	movs	r2, #0
 8008790:	2300      	movs	r3, #0
 8008792:	f7f8 f9a3 	bl	8000adc <__aeabi_dcmplt>
 8008796:	3800      	subs	r0, #0
 8008798:	bf18      	it	ne
 800879a:	2001      	movne	r0, #1
 800879c:	e448      	b.n	8008030 <__ieee754_pow+0x240>
 800879e:	4622      	mov	r2, r4
 80087a0:	462b      	mov	r3, r5
 80087a2:	f7f7 fd71 	bl	8000288 <__aeabi_dsub>
 80087a6:	4642      	mov	r2, r8
 80087a8:	464b      	mov	r3, r9
 80087aa:	f7f8 f9ab 	bl	8000b04 <__aeabi_dcmpge>
 80087ae:	2800      	cmp	r0, #0
 80087b0:	f43f aef4 	beq.w	800859c <__ieee754_pow+0x7ac>
 80087b4:	e7e9      	b.n	800878a <__ieee754_pow+0x99a>
 80087b6:	f04f 0a00 	mov.w	sl, #0
 80087ba:	e71a      	b.n	80085f2 <__ieee754_pow+0x802>
 80087bc:	ec51 0b10 	vmov	r0, r1, d0
 80087c0:	4619      	mov	r1, r3
 80087c2:	e7d4      	b.n	800876e <__ieee754_pow+0x97e>
 80087c4:	491a      	ldr	r1, [pc, #104]	; (8008830 <__ieee754_pow+0xa40>)
 80087c6:	2000      	movs	r0, #0
 80087c8:	f7ff bb31 	b.w	8007e2e <__ieee754_pow+0x3e>
 80087cc:	2000      	movs	r0, #0
 80087ce:	2100      	movs	r1, #0
 80087d0:	f7ff bb2d 	b.w	8007e2e <__ieee754_pow+0x3e>
 80087d4:	4630      	mov	r0, r6
 80087d6:	4639      	mov	r1, r7
 80087d8:	f7ff bb29 	b.w	8007e2e <__ieee754_pow+0x3e>
 80087dc:	9204      	str	r2, [sp, #16]
 80087de:	f7ff bb7b 	b.w	8007ed8 <__ieee754_pow+0xe8>
 80087e2:	2300      	movs	r3, #0
 80087e4:	f7ff bb65 	b.w	8007eb2 <__ieee754_pow+0xc2>
 80087e8:	00000000 	.word	0x00000000
 80087ec:	3fe62e43 	.word	0x3fe62e43
 80087f0:	fefa39ef 	.word	0xfefa39ef
 80087f4:	3fe62e42 	.word	0x3fe62e42
 80087f8:	0ca86c39 	.word	0x0ca86c39
 80087fc:	be205c61 	.word	0xbe205c61
 8008800:	72bea4d0 	.word	0x72bea4d0
 8008804:	3e663769 	.word	0x3e663769
 8008808:	c5d26bf1 	.word	0xc5d26bf1
 800880c:	3ebbbd41 	.word	0x3ebbbd41
 8008810:	af25de2c 	.word	0xaf25de2c
 8008814:	3f11566a 	.word	0x3f11566a
 8008818:	16bebd93 	.word	0x16bebd93
 800881c:	3f66c16c 	.word	0x3f66c16c
 8008820:	5555553e 	.word	0x5555553e
 8008824:	3fc55555 	.word	0x3fc55555
 8008828:	3fe00000 	.word	0x3fe00000
 800882c:	fff00000 	.word	0xfff00000
 8008830:	3ff00000 	.word	0x3ff00000
 8008834:	4090cbff 	.word	0x4090cbff
 8008838:	3f6f3400 	.word	0x3f6f3400
 800883c:	652b82fe 	.word	0x652b82fe
 8008840:	3c971547 	.word	0x3c971547

08008844 <fabs>:
 8008844:	ec51 0b10 	vmov	r0, r1, d0
 8008848:	ee10 2a10 	vmov	r2, s0
 800884c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008850:	ec43 2b10 	vmov	d0, r2, r3
 8008854:	4770      	bx	lr
	...

08008858 <scalbn>:
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	ec55 4b10 	vmov	r4, r5, d0
 800885e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008862:	4606      	mov	r6, r0
 8008864:	462b      	mov	r3, r5
 8008866:	b999      	cbnz	r1, 8008890 <scalbn+0x38>
 8008868:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800886c:	4323      	orrs	r3, r4
 800886e:	d03f      	beq.n	80088f0 <scalbn+0x98>
 8008870:	4b35      	ldr	r3, [pc, #212]	; (8008948 <scalbn+0xf0>)
 8008872:	4629      	mov	r1, r5
 8008874:	ee10 0a10 	vmov	r0, s0
 8008878:	2200      	movs	r2, #0
 800887a:	f7f7 febd 	bl	80005f8 <__aeabi_dmul>
 800887e:	4b33      	ldr	r3, [pc, #204]	; (800894c <scalbn+0xf4>)
 8008880:	429e      	cmp	r6, r3
 8008882:	4604      	mov	r4, r0
 8008884:	460d      	mov	r5, r1
 8008886:	da10      	bge.n	80088aa <scalbn+0x52>
 8008888:	a327      	add	r3, pc, #156	; (adr r3, 8008928 <scalbn+0xd0>)
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	e01f      	b.n	80088d0 <scalbn+0x78>
 8008890:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008894:	4291      	cmp	r1, r2
 8008896:	d10c      	bne.n	80088b2 <scalbn+0x5a>
 8008898:	ee10 2a10 	vmov	r2, s0
 800889c:	4620      	mov	r0, r4
 800889e:	4629      	mov	r1, r5
 80088a0:	f7f7 fcf4 	bl	800028c <__adddf3>
 80088a4:	4604      	mov	r4, r0
 80088a6:	460d      	mov	r5, r1
 80088a8:	e022      	b.n	80088f0 <scalbn+0x98>
 80088aa:	460b      	mov	r3, r1
 80088ac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80088b0:	3936      	subs	r1, #54	; 0x36
 80088b2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80088b6:	4296      	cmp	r6, r2
 80088b8:	dd0d      	ble.n	80088d6 <scalbn+0x7e>
 80088ba:	2d00      	cmp	r5, #0
 80088bc:	a11c      	add	r1, pc, #112	; (adr r1, 8008930 <scalbn+0xd8>)
 80088be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088c2:	da02      	bge.n	80088ca <scalbn+0x72>
 80088c4:	a11c      	add	r1, pc, #112	; (adr r1, 8008938 <scalbn+0xe0>)
 80088c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088ca:	a319      	add	r3, pc, #100	; (adr r3, 8008930 <scalbn+0xd8>)
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	f7f7 fe92 	bl	80005f8 <__aeabi_dmul>
 80088d4:	e7e6      	b.n	80088a4 <scalbn+0x4c>
 80088d6:	1872      	adds	r2, r6, r1
 80088d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80088dc:	428a      	cmp	r2, r1
 80088de:	dcec      	bgt.n	80088ba <scalbn+0x62>
 80088e0:	2a00      	cmp	r2, #0
 80088e2:	dd08      	ble.n	80088f6 <scalbn+0x9e>
 80088e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80088e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80088ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80088f0:	ec45 4b10 	vmov	d0, r4, r5
 80088f4:	bd70      	pop	{r4, r5, r6, pc}
 80088f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80088fa:	da08      	bge.n	800890e <scalbn+0xb6>
 80088fc:	2d00      	cmp	r5, #0
 80088fe:	a10a      	add	r1, pc, #40	; (adr r1, 8008928 <scalbn+0xd0>)
 8008900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008904:	dac0      	bge.n	8008888 <scalbn+0x30>
 8008906:	a10e      	add	r1, pc, #56	; (adr r1, 8008940 <scalbn+0xe8>)
 8008908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800890c:	e7bc      	b.n	8008888 <scalbn+0x30>
 800890e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008912:	3236      	adds	r2, #54	; 0x36
 8008914:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008918:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800891c:	4620      	mov	r0, r4
 800891e:	4b0c      	ldr	r3, [pc, #48]	; (8008950 <scalbn+0xf8>)
 8008920:	2200      	movs	r2, #0
 8008922:	e7d5      	b.n	80088d0 <scalbn+0x78>
 8008924:	f3af 8000 	nop.w
 8008928:	c2f8f359 	.word	0xc2f8f359
 800892c:	01a56e1f 	.word	0x01a56e1f
 8008930:	8800759c 	.word	0x8800759c
 8008934:	7e37e43c 	.word	0x7e37e43c
 8008938:	8800759c 	.word	0x8800759c
 800893c:	fe37e43c 	.word	0xfe37e43c
 8008940:	c2f8f359 	.word	0xc2f8f359
 8008944:	81a56e1f 	.word	0x81a56e1f
 8008948:	43500000 	.word	0x43500000
 800894c:	ffff3cb0 	.word	0xffff3cb0
 8008950:	3c900000 	.word	0x3c900000

08008954 <with_errno>:
 8008954:	b570      	push	{r4, r5, r6, lr}
 8008956:	4604      	mov	r4, r0
 8008958:	460d      	mov	r5, r1
 800895a:	4616      	mov	r6, r2
 800895c:	f001 f80e 	bl	800997c <__errno>
 8008960:	4629      	mov	r1, r5
 8008962:	6006      	str	r6, [r0, #0]
 8008964:	4620      	mov	r0, r4
 8008966:	bd70      	pop	{r4, r5, r6, pc}

08008968 <xflow>:
 8008968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800896a:	4614      	mov	r4, r2
 800896c:	461d      	mov	r5, r3
 800896e:	b108      	cbz	r0, 8008974 <xflow+0xc>
 8008970:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008974:	e9cd 2300 	strd	r2, r3, [sp]
 8008978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800897c:	4620      	mov	r0, r4
 800897e:	4629      	mov	r1, r5
 8008980:	f7f7 fe3a 	bl	80005f8 <__aeabi_dmul>
 8008984:	2222      	movs	r2, #34	; 0x22
 8008986:	b003      	add	sp, #12
 8008988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800898c:	f7ff bfe2 	b.w	8008954 <with_errno>

08008990 <__math_uflow>:
 8008990:	b508      	push	{r3, lr}
 8008992:	2200      	movs	r2, #0
 8008994:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008998:	f7ff ffe6 	bl	8008968 <xflow>
 800899c:	ec41 0b10 	vmov	d0, r0, r1
 80089a0:	bd08      	pop	{r3, pc}

080089a2 <__math_oflow>:
 80089a2:	b508      	push	{r3, lr}
 80089a4:	2200      	movs	r2, #0
 80089a6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80089aa:	f7ff ffdd 	bl	8008968 <xflow>
 80089ae:	ec41 0b10 	vmov	d0, r0, r1
 80089b2:	bd08      	pop	{r3, pc}

080089b4 <__ieee754_sqrt>:
 80089b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b8:	ec55 4b10 	vmov	r4, r5, d0
 80089bc:	4e67      	ldr	r6, [pc, #412]	; (8008b5c <__ieee754_sqrt+0x1a8>)
 80089be:	43ae      	bics	r6, r5
 80089c0:	ee10 0a10 	vmov	r0, s0
 80089c4:	ee10 2a10 	vmov	r2, s0
 80089c8:	4629      	mov	r1, r5
 80089ca:	462b      	mov	r3, r5
 80089cc:	d10d      	bne.n	80089ea <__ieee754_sqrt+0x36>
 80089ce:	f7f7 fe13 	bl	80005f8 <__aeabi_dmul>
 80089d2:	4602      	mov	r2, r0
 80089d4:	460b      	mov	r3, r1
 80089d6:	4620      	mov	r0, r4
 80089d8:	4629      	mov	r1, r5
 80089da:	f7f7 fc57 	bl	800028c <__adddf3>
 80089de:	4604      	mov	r4, r0
 80089e0:	460d      	mov	r5, r1
 80089e2:	ec45 4b10 	vmov	d0, r4, r5
 80089e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ea:	2d00      	cmp	r5, #0
 80089ec:	dc0b      	bgt.n	8008a06 <__ieee754_sqrt+0x52>
 80089ee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80089f2:	4326      	orrs	r6, r4
 80089f4:	d0f5      	beq.n	80089e2 <__ieee754_sqrt+0x2e>
 80089f6:	b135      	cbz	r5, 8008a06 <__ieee754_sqrt+0x52>
 80089f8:	f7f7 fc46 	bl	8000288 <__aeabi_dsub>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	f7f7 ff24 	bl	800084c <__aeabi_ddiv>
 8008a04:	e7eb      	b.n	80089de <__ieee754_sqrt+0x2a>
 8008a06:	1509      	asrs	r1, r1, #20
 8008a08:	f000 808d 	beq.w	8008b26 <__ieee754_sqrt+0x172>
 8008a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a10:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008a14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a18:	07c9      	lsls	r1, r1, #31
 8008a1a:	bf5c      	itt	pl
 8008a1c:	005b      	lslpl	r3, r3, #1
 8008a1e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008a22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a26:	bf58      	it	pl
 8008a28:	0052      	lslpl	r2, r2, #1
 8008a2a:	2500      	movs	r5, #0
 8008a2c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008a30:	1076      	asrs	r6, r6, #1
 8008a32:	0052      	lsls	r2, r2, #1
 8008a34:	f04f 0e16 	mov.w	lr, #22
 8008a38:	46ac      	mov	ip, r5
 8008a3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a3e:	eb0c 0001 	add.w	r0, ip, r1
 8008a42:	4298      	cmp	r0, r3
 8008a44:	bfde      	ittt	le
 8008a46:	1a1b      	suble	r3, r3, r0
 8008a48:	eb00 0c01 	addle.w	ip, r0, r1
 8008a4c:	186d      	addle	r5, r5, r1
 8008a4e:	005b      	lsls	r3, r3, #1
 8008a50:	f1be 0e01 	subs.w	lr, lr, #1
 8008a54:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008a58:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008a5c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008a60:	d1ed      	bne.n	8008a3e <__ieee754_sqrt+0x8a>
 8008a62:	4674      	mov	r4, lr
 8008a64:	2720      	movs	r7, #32
 8008a66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008a6a:	4563      	cmp	r3, ip
 8008a6c:	eb01 000e 	add.w	r0, r1, lr
 8008a70:	dc02      	bgt.n	8008a78 <__ieee754_sqrt+0xc4>
 8008a72:	d113      	bne.n	8008a9c <__ieee754_sqrt+0xe8>
 8008a74:	4290      	cmp	r0, r2
 8008a76:	d811      	bhi.n	8008a9c <__ieee754_sqrt+0xe8>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	eb00 0e01 	add.w	lr, r0, r1
 8008a7e:	da57      	bge.n	8008b30 <__ieee754_sqrt+0x17c>
 8008a80:	f1be 0f00 	cmp.w	lr, #0
 8008a84:	db54      	blt.n	8008b30 <__ieee754_sqrt+0x17c>
 8008a86:	f10c 0801 	add.w	r8, ip, #1
 8008a8a:	eba3 030c 	sub.w	r3, r3, ip
 8008a8e:	4290      	cmp	r0, r2
 8008a90:	bf88      	it	hi
 8008a92:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008a96:	1a12      	subs	r2, r2, r0
 8008a98:	440c      	add	r4, r1
 8008a9a:	46c4      	mov	ip, r8
 8008a9c:	005b      	lsls	r3, r3, #1
 8008a9e:	3f01      	subs	r7, #1
 8008aa0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008aa4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008aa8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008aac:	d1dd      	bne.n	8008a6a <__ieee754_sqrt+0xb6>
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	d01b      	beq.n	8008aea <__ieee754_sqrt+0x136>
 8008ab2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008b60 <__ieee754_sqrt+0x1ac>
 8008ab6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008b64 <__ieee754_sqrt+0x1b0>
 8008aba:	e9da 0100 	ldrd	r0, r1, [sl]
 8008abe:	e9db 2300 	ldrd	r2, r3, [fp]
 8008ac2:	f7f7 fbe1 	bl	8000288 <__aeabi_dsub>
 8008ac6:	e9da 8900 	ldrd	r8, r9, [sl]
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	4640      	mov	r0, r8
 8008ad0:	4649      	mov	r1, r9
 8008ad2:	f7f8 f80d 	bl	8000af0 <__aeabi_dcmple>
 8008ad6:	b140      	cbz	r0, 8008aea <__ieee754_sqrt+0x136>
 8008ad8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008adc:	e9da 0100 	ldrd	r0, r1, [sl]
 8008ae0:	e9db 2300 	ldrd	r2, r3, [fp]
 8008ae4:	d126      	bne.n	8008b34 <__ieee754_sqrt+0x180>
 8008ae6:	3501      	adds	r5, #1
 8008ae8:	463c      	mov	r4, r7
 8008aea:	106a      	asrs	r2, r5, #1
 8008aec:	0863      	lsrs	r3, r4, #1
 8008aee:	07e9      	lsls	r1, r5, #31
 8008af0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008af4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008af8:	bf48      	it	mi
 8008afa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008afe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8008b02:	461c      	mov	r4, r3
 8008b04:	e76d      	b.n	80089e2 <__ieee754_sqrt+0x2e>
 8008b06:	0ad3      	lsrs	r3, r2, #11
 8008b08:	3815      	subs	r0, #21
 8008b0a:	0552      	lsls	r2, r2, #21
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d0fa      	beq.n	8008b06 <__ieee754_sqrt+0x152>
 8008b10:	02dc      	lsls	r4, r3, #11
 8008b12:	d50a      	bpl.n	8008b2a <__ieee754_sqrt+0x176>
 8008b14:	f1c1 0420 	rsb	r4, r1, #32
 8008b18:	fa22 f404 	lsr.w	r4, r2, r4
 8008b1c:	1e4d      	subs	r5, r1, #1
 8008b1e:	408a      	lsls	r2, r1
 8008b20:	4323      	orrs	r3, r4
 8008b22:	1b41      	subs	r1, r0, r5
 8008b24:	e772      	b.n	8008a0c <__ieee754_sqrt+0x58>
 8008b26:	4608      	mov	r0, r1
 8008b28:	e7f0      	b.n	8008b0c <__ieee754_sqrt+0x158>
 8008b2a:	005b      	lsls	r3, r3, #1
 8008b2c:	3101      	adds	r1, #1
 8008b2e:	e7ef      	b.n	8008b10 <__ieee754_sqrt+0x15c>
 8008b30:	46e0      	mov	r8, ip
 8008b32:	e7aa      	b.n	8008a8a <__ieee754_sqrt+0xd6>
 8008b34:	f7f7 fbaa 	bl	800028c <__adddf3>
 8008b38:	e9da 8900 	ldrd	r8, r9, [sl]
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4640      	mov	r0, r8
 8008b42:	4649      	mov	r1, r9
 8008b44:	f7f7 ffca 	bl	8000adc <__aeabi_dcmplt>
 8008b48:	b120      	cbz	r0, 8008b54 <__ieee754_sqrt+0x1a0>
 8008b4a:	1ca0      	adds	r0, r4, #2
 8008b4c:	bf08      	it	eq
 8008b4e:	3501      	addeq	r5, #1
 8008b50:	3402      	adds	r4, #2
 8008b52:	e7ca      	b.n	8008aea <__ieee754_sqrt+0x136>
 8008b54:	3401      	adds	r4, #1
 8008b56:	f024 0401 	bic.w	r4, r4, #1
 8008b5a:	e7c6      	b.n	8008aea <__ieee754_sqrt+0x136>
 8008b5c:	7ff00000 	.word	0x7ff00000
 8008b60:	20000030 	.word	0x20000030
 8008b64:	20000038 	.word	0x20000038

08008b68 <abort>:
 8008b68:	b508      	push	{r3, lr}
 8008b6a:	2006      	movs	r0, #6
 8008b6c:	f000 fe90 	bl	8009890 <raise>
 8008b70:	2001      	movs	r0, #1
 8008b72:	f7f9 fa73 	bl	800205c <_exit>
	...

08008b78 <malloc>:
 8008b78:	4b02      	ldr	r3, [pc, #8]	; (8008b84 <malloc+0xc>)
 8008b7a:	4601      	mov	r1, r0
 8008b7c:	6818      	ldr	r0, [r3, #0]
 8008b7e:	f000 b823 	b.w	8008bc8 <_malloc_r>
 8008b82:	bf00      	nop
 8008b84:	20000098 	.word	0x20000098

08008b88 <sbrk_aligned>:
 8008b88:	b570      	push	{r4, r5, r6, lr}
 8008b8a:	4e0e      	ldr	r6, [pc, #56]	; (8008bc4 <sbrk_aligned+0x3c>)
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	6831      	ldr	r1, [r6, #0]
 8008b90:	4605      	mov	r5, r0
 8008b92:	b911      	cbnz	r1, 8008b9a <sbrk_aligned+0x12>
 8008b94:	f000 fed0 	bl	8009938 <_sbrk_r>
 8008b98:	6030      	str	r0, [r6, #0]
 8008b9a:	4621      	mov	r1, r4
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	f000 fecb 	bl	8009938 <_sbrk_r>
 8008ba2:	1c43      	adds	r3, r0, #1
 8008ba4:	d00a      	beq.n	8008bbc <sbrk_aligned+0x34>
 8008ba6:	1cc4      	adds	r4, r0, #3
 8008ba8:	f024 0403 	bic.w	r4, r4, #3
 8008bac:	42a0      	cmp	r0, r4
 8008bae:	d007      	beq.n	8008bc0 <sbrk_aligned+0x38>
 8008bb0:	1a21      	subs	r1, r4, r0
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	f000 fec0 	bl	8009938 <_sbrk_r>
 8008bb8:	3001      	adds	r0, #1
 8008bba:	d101      	bne.n	8008bc0 <sbrk_aligned+0x38>
 8008bbc:	f04f 34ff 	mov.w	r4, #4294967295
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	bd70      	pop	{r4, r5, r6, pc}
 8008bc4:	20000874 	.word	0x20000874

08008bc8 <_malloc_r>:
 8008bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bcc:	1ccd      	adds	r5, r1, #3
 8008bce:	f025 0503 	bic.w	r5, r5, #3
 8008bd2:	3508      	adds	r5, #8
 8008bd4:	2d0c      	cmp	r5, #12
 8008bd6:	bf38      	it	cc
 8008bd8:	250c      	movcc	r5, #12
 8008bda:	2d00      	cmp	r5, #0
 8008bdc:	4607      	mov	r7, r0
 8008bde:	db01      	blt.n	8008be4 <_malloc_r+0x1c>
 8008be0:	42a9      	cmp	r1, r5
 8008be2:	d905      	bls.n	8008bf0 <_malloc_r+0x28>
 8008be4:	230c      	movs	r3, #12
 8008be6:	603b      	str	r3, [r7, #0]
 8008be8:	2600      	movs	r6, #0
 8008bea:	4630      	mov	r0, r6
 8008bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bf0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008cc4 <_malloc_r+0xfc>
 8008bf4:	f000 f868 	bl	8008cc8 <__malloc_lock>
 8008bf8:	f8d8 3000 	ldr.w	r3, [r8]
 8008bfc:	461c      	mov	r4, r3
 8008bfe:	bb5c      	cbnz	r4, 8008c58 <_malloc_r+0x90>
 8008c00:	4629      	mov	r1, r5
 8008c02:	4638      	mov	r0, r7
 8008c04:	f7ff ffc0 	bl	8008b88 <sbrk_aligned>
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	d155      	bne.n	8008cba <_malloc_r+0xf2>
 8008c0e:	f8d8 4000 	ldr.w	r4, [r8]
 8008c12:	4626      	mov	r6, r4
 8008c14:	2e00      	cmp	r6, #0
 8008c16:	d145      	bne.n	8008ca4 <_malloc_r+0xdc>
 8008c18:	2c00      	cmp	r4, #0
 8008c1a:	d048      	beq.n	8008cae <_malloc_r+0xe6>
 8008c1c:	6823      	ldr	r3, [r4, #0]
 8008c1e:	4631      	mov	r1, r6
 8008c20:	4638      	mov	r0, r7
 8008c22:	eb04 0903 	add.w	r9, r4, r3
 8008c26:	f000 fe87 	bl	8009938 <_sbrk_r>
 8008c2a:	4581      	cmp	r9, r0
 8008c2c:	d13f      	bne.n	8008cae <_malloc_r+0xe6>
 8008c2e:	6821      	ldr	r1, [r4, #0]
 8008c30:	1a6d      	subs	r5, r5, r1
 8008c32:	4629      	mov	r1, r5
 8008c34:	4638      	mov	r0, r7
 8008c36:	f7ff ffa7 	bl	8008b88 <sbrk_aligned>
 8008c3a:	3001      	adds	r0, #1
 8008c3c:	d037      	beq.n	8008cae <_malloc_r+0xe6>
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	442b      	add	r3, r5
 8008c42:	6023      	str	r3, [r4, #0]
 8008c44:	f8d8 3000 	ldr.w	r3, [r8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d038      	beq.n	8008cbe <_malloc_r+0xf6>
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	42a2      	cmp	r2, r4
 8008c50:	d12b      	bne.n	8008caa <_malloc_r+0xe2>
 8008c52:	2200      	movs	r2, #0
 8008c54:	605a      	str	r2, [r3, #4]
 8008c56:	e00f      	b.n	8008c78 <_malloc_r+0xb0>
 8008c58:	6822      	ldr	r2, [r4, #0]
 8008c5a:	1b52      	subs	r2, r2, r5
 8008c5c:	d41f      	bmi.n	8008c9e <_malloc_r+0xd6>
 8008c5e:	2a0b      	cmp	r2, #11
 8008c60:	d917      	bls.n	8008c92 <_malloc_r+0xca>
 8008c62:	1961      	adds	r1, r4, r5
 8008c64:	42a3      	cmp	r3, r4
 8008c66:	6025      	str	r5, [r4, #0]
 8008c68:	bf18      	it	ne
 8008c6a:	6059      	strne	r1, [r3, #4]
 8008c6c:	6863      	ldr	r3, [r4, #4]
 8008c6e:	bf08      	it	eq
 8008c70:	f8c8 1000 	streq.w	r1, [r8]
 8008c74:	5162      	str	r2, [r4, r5]
 8008c76:	604b      	str	r3, [r1, #4]
 8008c78:	4638      	mov	r0, r7
 8008c7a:	f104 060b 	add.w	r6, r4, #11
 8008c7e:	f000 f829 	bl	8008cd4 <__malloc_unlock>
 8008c82:	f026 0607 	bic.w	r6, r6, #7
 8008c86:	1d23      	adds	r3, r4, #4
 8008c88:	1af2      	subs	r2, r6, r3
 8008c8a:	d0ae      	beq.n	8008bea <_malloc_r+0x22>
 8008c8c:	1b9b      	subs	r3, r3, r6
 8008c8e:	50a3      	str	r3, [r4, r2]
 8008c90:	e7ab      	b.n	8008bea <_malloc_r+0x22>
 8008c92:	42a3      	cmp	r3, r4
 8008c94:	6862      	ldr	r2, [r4, #4]
 8008c96:	d1dd      	bne.n	8008c54 <_malloc_r+0x8c>
 8008c98:	f8c8 2000 	str.w	r2, [r8]
 8008c9c:	e7ec      	b.n	8008c78 <_malloc_r+0xb0>
 8008c9e:	4623      	mov	r3, r4
 8008ca0:	6864      	ldr	r4, [r4, #4]
 8008ca2:	e7ac      	b.n	8008bfe <_malloc_r+0x36>
 8008ca4:	4634      	mov	r4, r6
 8008ca6:	6876      	ldr	r6, [r6, #4]
 8008ca8:	e7b4      	b.n	8008c14 <_malloc_r+0x4c>
 8008caa:	4613      	mov	r3, r2
 8008cac:	e7cc      	b.n	8008c48 <_malloc_r+0x80>
 8008cae:	230c      	movs	r3, #12
 8008cb0:	603b      	str	r3, [r7, #0]
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	f000 f80e 	bl	8008cd4 <__malloc_unlock>
 8008cb8:	e797      	b.n	8008bea <_malloc_r+0x22>
 8008cba:	6025      	str	r5, [r4, #0]
 8008cbc:	e7dc      	b.n	8008c78 <_malloc_r+0xb0>
 8008cbe:	605b      	str	r3, [r3, #4]
 8008cc0:	deff      	udf	#255	; 0xff
 8008cc2:	bf00      	nop
 8008cc4:	20000870 	.word	0x20000870

08008cc8 <__malloc_lock>:
 8008cc8:	4801      	ldr	r0, [pc, #4]	; (8008cd0 <__malloc_lock+0x8>)
 8008cca:	f000 be81 	b.w	80099d0 <__retarget_lock_acquire_recursive>
 8008cce:	bf00      	nop
 8008cd0:	200009b8 	.word	0x200009b8

08008cd4 <__malloc_unlock>:
 8008cd4:	4801      	ldr	r0, [pc, #4]	; (8008cdc <__malloc_unlock+0x8>)
 8008cd6:	f000 be7c 	b.w	80099d2 <__retarget_lock_release_recursive>
 8008cda:	bf00      	nop
 8008cdc:	200009b8 	.word	0x200009b8

08008ce0 <__cvt>:
 8008ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce4:	ec55 4b10 	vmov	r4, r5, d0
 8008ce8:	2d00      	cmp	r5, #0
 8008cea:	460e      	mov	r6, r1
 8008cec:	4619      	mov	r1, r3
 8008cee:	462b      	mov	r3, r5
 8008cf0:	bfbb      	ittet	lt
 8008cf2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008cf6:	461d      	movlt	r5, r3
 8008cf8:	2300      	movge	r3, #0
 8008cfa:	232d      	movlt	r3, #45	; 0x2d
 8008cfc:	700b      	strb	r3, [r1, #0]
 8008cfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d04:	4691      	mov	r9, r2
 8008d06:	f023 0820 	bic.w	r8, r3, #32
 8008d0a:	bfbc      	itt	lt
 8008d0c:	4622      	movlt	r2, r4
 8008d0e:	4614      	movlt	r4, r2
 8008d10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d14:	d005      	beq.n	8008d22 <__cvt+0x42>
 8008d16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d1a:	d100      	bne.n	8008d1e <__cvt+0x3e>
 8008d1c:	3601      	adds	r6, #1
 8008d1e:	2102      	movs	r1, #2
 8008d20:	e000      	b.n	8008d24 <__cvt+0x44>
 8008d22:	2103      	movs	r1, #3
 8008d24:	ab03      	add	r3, sp, #12
 8008d26:	9301      	str	r3, [sp, #4]
 8008d28:	ab02      	add	r3, sp, #8
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	ec45 4b10 	vmov	d0, r4, r5
 8008d30:	4653      	mov	r3, sl
 8008d32:	4632      	mov	r2, r6
 8008d34:	f000 fee4 	bl	8009b00 <_dtoa_r>
 8008d38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d3c:	4607      	mov	r7, r0
 8008d3e:	d102      	bne.n	8008d46 <__cvt+0x66>
 8008d40:	f019 0f01 	tst.w	r9, #1
 8008d44:	d022      	beq.n	8008d8c <__cvt+0xac>
 8008d46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d4a:	eb07 0906 	add.w	r9, r7, r6
 8008d4e:	d110      	bne.n	8008d72 <__cvt+0x92>
 8008d50:	783b      	ldrb	r3, [r7, #0]
 8008d52:	2b30      	cmp	r3, #48	; 0x30
 8008d54:	d10a      	bne.n	8008d6c <__cvt+0x8c>
 8008d56:	2200      	movs	r2, #0
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	f7f7 feb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d62:	b918      	cbnz	r0, 8008d6c <__cvt+0x8c>
 8008d64:	f1c6 0601 	rsb	r6, r6, #1
 8008d68:	f8ca 6000 	str.w	r6, [sl]
 8008d6c:	f8da 3000 	ldr.w	r3, [sl]
 8008d70:	4499      	add	r9, r3
 8008d72:	2200      	movs	r2, #0
 8008d74:	2300      	movs	r3, #0
 8008d76:	4620      	mov	r0, r4
 8008d78:	4629      	mov	r1, r5
 8008d7a:	f7f7 fea5 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d7e:	b108      	cbz	r0, 8008d84 <__cvt+0xa4>
 8008d80:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d84:	2230      	movs	r2, #48	; 0x30
 8008d86:	9b03      	ldr	r3, [sp, #12]
 8008d88:	454b      	cmp	r3, r9
 8008d8a:	d307      	bcc.n	8008d9c <__cvt+0xbc>
 8008d8c:	9b03      	ldr	r3, [sp, #12]
 8008d8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d90:	1bdb      	subs	r3, r3, r7
 8008d92:	4638      	mov	r0, r7
 8008d94:	6013      	str	r3, [r2, #0]
 8008d96:	b004      	add	sp, #16
 8008d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d9c:	1c59      	adds	r1, r3, #1
 8008d9e:	9103      	str	r1, [sp, #12]
 8008da0:	701a      	strb	r2, [r3, #0]
 8008da2:	e7f0      	b.n	8008d86 <__cvt+0xa6>

08008da4 <__exponent>:
 8008da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008da6:	4603      	mov	r3, r0
 8008da8:	2900      	cmp	r1, #0
 8008daa:	bfb8      	it	lt
 8008dac:	4249      	neglt	r1, r1
 8008dae:	f803 2b02 	strb.w	r2, [r3], #2
 8008db2:	bfb4      	ite	lt
 8008db4:	222d      	movlt	r2, #45	; 0x2d
 8008db6:	222b      	movge	r2, #43	; 0x2b
 8008db8:	2909      	cmp	r1, #9
 8008dba:	7042      	strb	r2, [r0, #1]
 8008dbc:	dd2a      	ble.n	8008e14 <__exponent+0x70>
 8008dbe:	f10d 0207 	add.w	r2, sp, #7
 8008dc2:	4617      	mov	r7, r2
 8008dc4:	260a      	movs	r6, #10
 8008dc6:	4694      	mov	ip, r2
 8008dc8:	fb91 f5f6 	sdiv	r5, r1, r6
 8008dcc:	fb06 1415 	mls	r4, r6, r5, r1
 8008dd0:	3430      	adds	r4, #48	; 0x30
 8008dd2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	2c63      	cmp	r4, #99	; 0x63
 8008dda:	f102 32ff 	add.w	r2, r2, #4294967295
 8008dde:	4629      	mov	r1, r5
 8008de0:	dcf1      	bgt.n	8008dc6 <__exponent+0x22>
 8008de2:	3130      	adds	r1, #48	; 0x30
 8008de4:	f1ac 0402 	sub.w	r4, ip, #2
 8008de8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008dec:	1c41      	adds	r1, r0, #1
 8008dee:	4622      	mov	r2, r4
 8008df0:	42ba      	cmp	r2, r7
 8008df2:	d30a      	bcc.n	8008e0a <__exponent+0x66>
 8008df4:	f10d 0209 	add.w	r2, sp, #9
 8008df8:	eba2 020c 	sub.w	r2, r2, ip
 8008dfc:	42bc      	cmp	r4, r7
 8008dfe:	bf88      	it	hi
 8008e00:	2200      	movhi	r2, #0
 8008e02:	4413      	add	r3, r2
 8008e04:	1a18      	subs	r0, r3, r0
 8008e06:	b003      	add	sp, #12
 8008e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e0a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008e0e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008e12:	e7ed      	b.n	8008df0 <__exponent+0x4c>
 8008e14:	2330      	movs	r3, #48	; 0x30
 8008e16:	3130      	adds	r1, #48	; 0x30
 8008e18:	7083      	strb	r3, [r0, #2]
 8008e1a:	70c1      	strb	r1, [r0, #3]
 8008e1c:	1d03      	adds	r3, r0, #4
 8008e1e:	e7f1      	b.n	8008e04 <__exponent+0x60>

08008e20 <_printf_float>:
 8008e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e24:	ed2d 8b02 	vpush	{d8}
 8008e28:	b08d      	sub	sp, #52	; 0x34
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e30:	4616      	mov	r6, r2
 8008e32:	461f      	mov	r7, r3
 8008e34:	4605      	mov	r5, r0
 8008e36:	f000 fd33 	bl	80098a0 <_localeconv_r>
 8008e3a:	f8d0 a000 	ldr.w	sl, [r0]
 8008e3e:	4650      	mov	r0, sl
 8008e40:	f7f7 fa16 	bl	8000270 <strlen>
 8008e44:	2300      	movs	r3, #0
 8008e46:	930a      	str	r3, [sp, #40]	; 0x28
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	9305      	str	r3, [sp, #20]
 8008e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e54:	3307      	adds	r3, #7
 8008e56:	f023 0307 	bic.w	r3, r3, #7
 8008e5a:	f103 0208 	add.w	r2, r3, #8
 8008e5e:	f8c8 2000 	str.w	r2, [r8]
 8008e62:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e6a:	9307      	str	r3, [sp, #28]
 8008e6c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e70:	ee08 0a10 	vmov	s16, r0
 8008e74:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008e78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e7c:	4b9e      	ldr	r3, [pc, #632]	; (80090f8 <_printf_float+0x2d8>)
 8008e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e82:	f7f7 fe53 	bl	8000b2c <__aeabi_dcmpun>
 8008e86:	bb88      	cbnz	r0, 8008eec <_printf_float+0xcc>
 8008e88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e8c:	4b9a      	ldr	r3, [pc, #616]	; (80090f8 <_printf_float+0x2d8>)
 8008e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e92:	f7f7 fe2d 	bl	8000af0 <__aeabi_dcmple>
 8008e96:	bb48      	cbnz	r0, 8008eec <_printf_float+0xcc>
 8008e98:	2200      	movs	r2, #0
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	4640      	mov	r0, r8
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	f7f7 fe1c 	bl	8000adc <__aeabi_dcmplt>
 8008ea4:	b110      	cbz	r0, 8008eac <_printf_float+0x8c>
 8008ea6:	232d      	movs	r3, #45	; 0x2d
 8008ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eac:	4a93      	ldr	r2, [pc, #588]	; (80090fc <_printf_float+0x2dc>)
 8008eae:	4b94      	ldr	r3, [pc, #592]	; (8009100 <_printf_float+0x2e0>)
 8008eb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008eb4:	bf94      	ite	ls
 8008eb6:	4690      	movls	r8, r2
 8008eb8:	4698      	movhi	r8, r3
 8008eba:	2303      	movs	r3, #3
 8008ebc:	6123      	str	r3, [r4, #16]
 8008ebe:	9b05      	ldr	r3, [sp, #20]
 8008ec0:	f023 0304 	bic.w	r3, r3, #4
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	f04f 0900 	mov.w	r9, #0
 8008eca:	9700      	str	r7, [sp, #0]
 8008ecc:	4633      	mov	r3, r6
 8008ece:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	f000 f9da 	bl	800928c <_printf_common>
 8008ed8:	3001      	adds	r0, #1
 8008eda:	f040 8090 	bne.w	8008ffe <_printf_float+0x1de>
 8008ede:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee2:	b00d      	add	sp, #52	; 0x34
 8008ee4:	ecbd 8b02 	vpop	{d8}
 8008ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eec:	4642      	mov	r2, r8
 8008eee:	464b      	mov	r3, r9
 8008ef0:	4640      	mov	r0, r8
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	f7f7 fe1a 	bl	8000b2c <__aeabi_dcmpun>
 8008ef8:	b140      	cbz	r0, 8008f0c <_printf_float+0xec>
 8008efa:	464b      	mov	r3, r9
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	bfbc      	itt	lt
 8008f00:	232d      	movlt	r3, #45	; 0x2d
 8008f02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f06:	4a7f      	ldr	r2, [pc, #508]	; (8009104 <_printf_float+0x2e4>)
 8008f08:	4b7f      	ldr	r3, [pc, #508]	; (8009108 <_printf_float+0x2e8>)
 8008f0a:	e7d1      	b.n	8008eb0 <_printf_float+0x90>
 8008f0c:	6863      	ldr	r3, [r4, #4]
 8008f0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008f12:	9206      	str	r2, [sp, #24]
 8008f14:	1c5a      	adds	r2, r3, #1
 8008f16:	d13f      	bne.n	8008f98 <_printf_float+0x178>
 8008f18:	2306      	movs	r3, #6
 8008f1a:	6063      	str	r3, [r4, #4]
 8008f1c:	9b05      	ldr	r3, [sp, #20]
 8008f1e:	6861      	ldr	r1, [r4, #4]
 8008f20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f24:	2300      	movs	r3, #0
 8008f26:	9303      	str	r3, [sp, #12]
 8008f28:	ab0a      	add	r3, sp, #40	; 0x28
 8008f2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f2e:	ab09      	add	r3, sp, #36	; 0x24
 8008f30:	ec49 8b10 	vmov	d0, r8, r9
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	6022      	str	r2, [r4, #0]
 8008f38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f7ff fecf 	bl	8008ce0 <__cvt>
 8008f42:	9b06      	ldr	r3, [sp, #24]
 8008f44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f46:	2b47      	cmp	r3, #71	; 0x47
 8008f48:	4680      	mov	r8, r0
 8008f4a:	d108      	bne.n	8008f5e <_printf_float+0x13e>
 8008f4c:	1cc8      	adds	r0, r1, #3
 8008f4e:	db02      	blt.n	8008f56 <_printf_float+0x136>
 8008f50:	6863      	ldr	r3, [r4, #4]
 8008f52:	4299      	cmp	r1, r3
 8008f54:	dd41      	ble.n	8008fda <_printf_float+0x1ba>
 8008f56:	f1ab 0302 	sub.w	r3, fp, #2
 8008f5a:	fa5f fb83 	uxtb.w	fp, r3
 8008f5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f62:	d820      	bhi.n	8008fa6 <_printf_float+0x186>
 8008f64:	3901      	subs	r1, #1
 8008f66:	465a      	mov	r2, fp
 8008f68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f6c:	9109      	str	r1, [sp, #36]	; 0x24
 8008f6e:	f7ff ff19 	bl	8008da4 <__exponent>
 8008f72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f74:	1813      	adds	r3, r2, r0
 8008f76:	2a01      	cmp	r2, #1
 8008f78:	4681      	mov	r9, r0
 8008f7a:	6123      	str	r3, [r4, #16]
 8008f7c:	dc02      	bgt.n	8008f84 <_printf_float+0x164>
 8008f7e:	6822      	ldr	r2, [r4, #0]
 8008f80:	07d2      	lsls	r2, r2, #31
 8008f82:	d501      	bpl.n	8008f88 <_printf_float+0x168>
 8008f84:	3301      	adds	r3, #1
 8008f86:	6123      	str	r3, [r4, #16]
 8008f88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d09c      	beq.n	8008eca <_printf_float+0xaa>
 8008f90:	232d      	movs	r3, #45	; 0x2d
 8008f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f96:	e798      	b.n	8008eca <_printf_float+0xaa>
 8008f98:	9a06      	ldr	r2, [sp, #24]
 8008f9a:	2a47      	cmp	r2, #71	; 0x47
 8008f9c:	d1be      	bne.n	8008f1c <_printf_float+0xfc>
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1bc      	bne.n	8008f1c <_printf_float+0xfc>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e7b9      	b.n	8008f1a <_printf_float+0xfa>
 8008fa6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008faa:	d118      	bne.n	8008fde <_printf_float+0x1be>
 8008fac:	2900      	cmp	r1, #0
 8008fae:	6863      	ldr	r3, [r4, #4]
 8008fb0:	dd0b      	ble.n	8008fca <_printf_float+0x1aa>
 8008fb2:	6121      	str	r1, [r4, #16]
 8008fb4:	b913      	cbnz	r3, 8008fbc <_printf_float+0x19c>
 8008fb6:	6822      	ldr	r2, [r4, #0]
 8008fb8:	07d0      	lsls	r0, r2, #31
 8008fba:	d502      	bpl.n	8008fc2 <_printf_float+0x1a2>
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	440b      	add	r3, r1
 8008fc0:	6123      	str	r3, [r4, #16]
 8008fc2:	65a1      	str	r1, [r4, #88]	; 0x58
 8008fc4:	f04f 0900 	mov.w	r9, #0
 8008fc8:	e7de      	b.n	8008f88 <_printf_float+0x168>
 8008fca:	b913      	cbnz	r3, 8008fd2 <_printf_float+0x1b2>
 8008fcc:	6822      	ldr	r2, [r4, #0]
 8008fce:	07d2      	lsls	r2, r2, #31
 8008fd0:	d501      	bpl.n	8008fd6 <_printf_float+0x1b6>
 8008fd2:	3302      	adds	r3, #2
 8008fd4:	e7f4      	b.n	8008fc0 <_printf_float+0x1a0>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e7f2      	b.n	8008fc0 <_printf_float+0x1a0>
 8008fda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fe0:	4299      	cmp	r1, r3
 8008fe2:	db05      	blt.n	8008ff0 <_printf_float+0x1d0>
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	6121      	str	r1, [r4, #16]
 8008fe8:	07d8      	lsls	r0, r3, #31
 8008fea:	d5ea      	bpl.n	8008fc2 <_printf_float+0x1a2>
 8008fec:	1c4b      	adds	r3, r1, #1
 8008fee:	e7e7      	b.n	8008fc0 <_printf_float+0x1a0>
 8008ff0:	2900      	cmp	r1, #0
 8008ff2:	bfd4      	ite	le
 8008ff4:	f1c1 0202 	rsble	r2, r1, #2
 8008ff8:	2201      	movgt	r2, #1
 8008ffa:	4413      	add	r3, r2
 8008ffc:	e7e0      	b.n	8008fc0 <_printf_float+0x1a0>
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	055a      	lsls	r2, r3, #21
 8009002:	d407      	bmi.n	8009014 <_printf_float+0x1f4>
 8009004:	6923      	ldr	r3, [r4, #16]
 8009006:	4642      	mov	r2, r8
 8009008:	4631      	mov	r1, r6
 800900a:	4628      	mov	r0, r5
 800900c:	47b8      	blx	r7
 800900e:	3001      	adds	r0, #1
 8009010:	d12c      	bne.n	800906c <_printf_float+0x24c>
 8009012:	e764      	b.n	8008ede <_printf_float+0xbe>
 8009014:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009018:	f240 80e0 	bls.w	80091dc <_printf_float+0x3bc>
 800901c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009020:	2200      	movs	r2, #0
 8009022:	2300      	movs	r3, #0
 8009024:	f7f7 fd50 	bl	8000ac8 <__aeabi_dcmpeq>
 8009028:	2800      	cmp	r0, #0
 800902a:	d034      	beq.n	8009096 <_printf_float+0x276>
 800902c:	4a37      	ldr	r2, [pc, #220]	; (800910c <_printf_float+0x2ec>)
 800902e:	2301      	movs	r3, #1
 8009030:	4631      	mov	r1, r6
 8009032:	4628      	mov	r0, r5
 8009034:	47b8      	blx	r7
 8009036:	3001      	adds	r0, #1
 8009038:	f43f af51 	beq.w	8008ede <_printf_float+0xbe>
 800903c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009040:	429a      	cmp	r2, r3
 8009042:	db02      	blt.n	800904a <_printf_float+0x22a>
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	07d8      	lsls	r0, r3, #31
 8009048:	d510      	bpl.n	800906c <_printf_float+0x24c>
 800904a:	ee18 3a10 	vmov	r3, s16
 800904e:	4652      	mov	r2, sl
 8009050:	4631      	mov	r1, r6
 8009052:	4628      	mov	r0, r5
 8009054:	47b8      	blx	r7
 8009056:	3001      	adds	r0, #1
 8009058:	f43f af41 	beq.w	8008ede <_printf_float+0xbe>
 800905c:	f04f 0800 	mov.w	r8, #0
 8009060:	f104 091a 	add.w	r9, r4, #26
 8009064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009066:	3b01      	subs	r3, #1
 8009068:	4543      	cmp	r3, r8
 800906a:	dc09      	bgt.n	8009080 <_printf_float+0x260>
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	079b      	lsls	r3, r3, #30
 8009070:	f100 8107 	bmi.w	8009282 <_printf_float+0x462>
 8009074:	68e0      	ldr	r0, [r4, #12]
 8009076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009078:	4298      	cmp	r0, r3
 800907a:	bfb8      	it	lt
 800907c:	4618      	movlt	r0, r3
 800907e:	e730      	b.n	8008ee2 <_printf_float+0xc2>
 8009080:	2301      	movs	r3, #1
 8009082:	464a      	mov	r2, r9
 8009084:	4631      	mov	r1, r6
 8009086:	4628      	mov	r0, r5
 8009088:	47b8      	blx	r7
 800908a:	3001      	adds	r0, #1
 800908c:	f43f af27 	beq.w	8008ede <_printf_float+0xbe>
 8009090:	f108 0801 	add.w	r8, r8, #1
 8009094:	e7e6      	b.n	8009064 <_printf_float+0x244>
 8009096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009098:	2b00      	cmp	r3, #0
 800909a:	dc39      	bgt.n	8009110 <_printf_float+0x2f0>
 800909c:	4a1b      	ldr	r2, [pc, #108]	; (800910c <_printf_float+0x2ec>)
 800909e:	2301      	movs	r3, #1
 80090a0:	4631      	mov	r1, r6
 80090a2:	4628      	mov	r0, r5
 80090a4:	47b8      	blx	r7
 80090a6:	3001      	adds	r0, #1
 80090a8:	f43f af19 	beq.w	8008ede <_printf_float+0xbe>
 80090ac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80090b0:	4313      	orrs	r3, r2
 80090b2:	d102      	bne.n	80090ba <_printf_float+0x29a>
 80090b4:	6823      	ldr	r3, [r4, #0]
 80090b6:	07d9      	lsls	r1, r3, #31
 80090b8:	d5d8      	bpl.n	800906c <_printf_float+0x24c>
 80090ba:	ee18 3a10 	vmov	r3, s16
 80090be:	4652      	mov	r2, sl
 80090c0:	4631      	mov	r1, r6
 80090c2:	4628      	mov	r0, r5
 80090c4:	47b8      	blx	r7
 80090c6:	3001      	adds	r0, #1
 80090c8:	f43f af09 	beq.w	8008ede <_printf_float+0xbe>
 80090cc:	f04f 0900 	mov.w	r9, #0
 80090d0:	f104 0a1a 	add.w	sl, r4, #26
 80090d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d6:	425b      	negs	r3, r3
 80090d8:	454b      	cmp	r3, r9
 80090da:	dc01      	bgt.n	80090e0 <_printf_float+0x2c0>
 80090dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090de:	e792      	b.n	8009006 <_printf_float+0x1e6>
 80090e0:	2301      	movs	r3, #1
 80090e2:	4652      	mov	r2, sl
 80090e4:	4631      	mov	r1, r6
 80090e6:	4628      	mov	r0, r5
 80090e8:	47b8      	blx	r7
 80090ea:	3001      	adds	r0, #1
 80090ec:	f43f aef7 	beq.w	8008ede <_printf_float+0xbe>
 80090f0:	f109 0901 	add.w	r9, r9, #1
 80090f4:	e7ee      	b.n	80090d4 <_printf_float+0x2b4>
 80090f6:	bf00      	nop
 80090f8:	7fefffff 	.word	0x7fefffff
 80090fc:	0800e5e8 	.word	0x0800e5e8
 8009100:	0800e5ec 	.word	0x0800e5ec
 8009104:	0800e5f0 	.word	0x0800e5f0
 8009108:	0800e5f4 	.word	0x0800e5f4
 800910c:	0800e5f8 	.word	0x0800e5f8
 8009110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009112:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009114:	429a      	cmp	r2, r3
 8009116:	bfa8      	it	ge
 8009118:	461a      	movge	r2, r3
 800911a:	2a00      	cmp	r2, #0
 800911c:	4691      	mov	r9, r2
 800911e:	dc37      	bgt.n	8009190 <_printf_float+0x370>
 8009120:	f04f 0b00 	mov.w	fp, #0
 8009124:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009128:	f104 021a 	add.w	r2, r4, #26
 800912c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800912e:	9305      	str	r3, [sp, #20]
 8009130:	eba3 0309 	sub.w	r3, r3, r9
 8009134:	455b      	cmp	r3, fp
 8009136:	dc33      	bgt.n	80091a0 <_printf_float+0x380>
 8009138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800913c:	429a      	cmp	r2, r3
 800913e:	db3b      	blt.n	80091b8 <_printf_float+0x398>
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	07da      	lsls	r2, r3, #31
 8009144:	d438      	bmi.n	80091b8 <_printf_float+0x398>
 8009146:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800914a:	eba2 0903 	sub.w	r9, r2, r3
 800914e:	9b05      	ldr	r3, [sp, #20]
 8009150:	1ad2      	subs	r2, r2, r3
 8009152:	4591      	cmp	r9, r2
 8009154:	bfa8      	it	ge
 8009156:	4691      	movge	r9, r2
 8009158:	f1b9 0f00 	cmp.w	r9, #0
 800915c:	dc35      	bgt.n	80091ca <_printf_float+0x3aa>
 800915e:	f04f 0800 	mov.w	r8, #0
 8009162:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009166:	f104 0a1a 	add.w	sl, r4, #26
 800916a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800916e:	1a9b      	subs	r3, r3, r2
 8009170:	eba3 0309 	sub.w	r3, r3, r9
 8009174:	4543      	cmp	r3, r8
 8009176:	f77f af79 	ble.w	800906c <_printf_float+0x24c>
 800917a:	2301      	movs	r3, #1
 800917c:	4652      	mov	r2, sl
 800917e:	4631      	mov	r1, r6
 8009180:	4628      	mov	r0, r5
 8009182:	47b8      	blx	r7
 8009184:	3001      	adds	r0, #1
 8009186:	f43f aeaa 	beq.w	8008ede <_printf_float+0xbe>
 800918a:	f108 0801 	add.w	r8, r8, #1
 800918e:	e7ec      	b.n	800916a <_printf_float+0x34a>
 8009190:	4613      	mov	r3, r2
 8009192:	4631      	mov	r1, r6
 8009194:	4642      	mov	r2, r8
 8009196:	4628      	mov	r0, r5
 8009198:	47b8      	blx	r7
 800919a:	3001      	adds	r0, #1
 800919c:	d1c0      	bne.n	8009120 <_printf_float+0x300>
 800919e:	e69e      	b.n	8008ede <_printf_float+0xbe>
 80091a0:	2301      	movs	r3, #1
 80091a2:	4631      	mov	r1, r6
 80091a4:	4628      	mov	r0, r5
 80091a6:	9205      	str	r2, [sp, #20]
 80091a8:	47b8      	blx	r7
 80091aa:	3001      	adds	r0, #1
 80091ac:	f43f ae97 	beq.w	8008ede <_printf_float+0xbe>
 80091b0:	9a05      	ldr	r2, [sp, #20]
 80091b2:	f10b 0b01 	add.w	fp, fp, #1
 80091b6:	e7b9      	b.n	800912c <_printf_float+0x30c>
 80091b8:	ee18 3a10 	vmov	r3, s16
 80091bc:	4652      	mov	r2, sl
 80091be:	4631      	mov	r1, r6
 80091c0:	4628      	mov	r0, r5
 80091c2:	47b8      	blx	r7
 80091c4:	3001      	adds	r0, #1
 80091c6:	d1be      	bne.n	8009146 <_printf_float+0x326>
 80091c8:	e689      	b.n	8008ede <_printf_float+0xbe>
 80091ca:	9a05      	ldr	r2, [sp, #20]
 80091cc:	464b      	mov	r3, r9
 80091ce:	4442      	add	r2, r8
 80091d0:	4631      	mov	r1, r6
 80091d2:	4628      	mov	r0, r5
 80091d4:	47b8      	blx	r7
 80091d6:	3001      	adds	r0, #1
 80091d8:	d1c1      	bne.n	800915e <_printf_float+0x33e>
 80091da:	e680      	b.n	8008ede <_printf_float+0xbe>
 80091dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091de:	2a01      	cmp	r2, #1
 80091e0:	dc01      	bgt.n	80091e6 <_printf_float+0x3c6>
 80091e2:	07db      	lsls	r3, r3, #31
 80091e4:	d53a      	bpl.n	800925c <_printf_float+0x43c>
 80091e6:	2301      	movs	r3, #1
 80091e8:	4642      	mov	r2, r8
 80091ea:	4631      	mov	r1, r6
 80091ec:	4628      	mov	r0, r5
 80091ee:	47b8      	blx	r7
 80091f0:	3001      	adds	r0, #1
 80091f2:	f43f ae74 	beq.w	8008ede <_printf_float+0xbe>
 80091f6:	ee18 3a10 	vmov	r3, s16
 80091fa:	4652      	mov	r2, sl
 80091fc:	4631      	mov	r1, r6
 80091fe:	4628      	mov	r0, r5
 8009200:	47b8      	blx	r7
 8009202:	3001      	adds	r0, #1
 8009204:	f43f ae6b 	beq.w	8008ede <_printf_float+0xbe>
 8009208:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800920c:	2200      	movs	r2, #0
 800920e:	2300      	movs	r3, #0
 8009210:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009214:	f7f7 fc58 	bl	8000ac8 <__aeabi_dcmpeq>
 8009218:	b9d8      	cbnz	r0, 8009252 <_printf_float+0x432>
 800921a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800921e:	f108 0201 	add.w	r2, r8, #1
 8009222:	4631      	mov	r1, r6
 8009224:	4628      	mov	r0, r5
 8009226:	47b8      	blx	r7
 8009228:	3001      	adds	r0, #1
 800922a:	d10e      	bne.n	800924a <_printf_float+0x42a>
 800922c:	e657      	b.n	8008ede <_printf_float+0xbe>
 800922e:	2301      	movs	r3, #1
 8009230:	4652      	mov	r2, sl
 8009232:	4631      	mov	r1, r6
 8009234:	4628      	mov	r0, r5
 8009236:	47b8      	blx	r7
 8009238:	3001      	adds	r0, #1
 800923a:	f43f ae50 	beq.w	8008ede <_printf_float+0xbe>
 800923e:	f108 0801 	add.w	r8, r8, #1
 8009242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009244:	3b01      	subs	r3, #1
 8009246:	4543      	cmp	r3, r8
 8009248:	dcf1      	bgt.n	800922e <_printf_float+0x40e>
 800924a:	464b      	mov	r3, r9
 800924c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009250:	e6da      	b.n	8009008 <_printf_float+0x1e8>
 8009252:	f04f 0800 	mov.w	r8, #0
 8009256:	f104 0a1a 	add.w	sl, r4, #26
 800925a:	e7f2      	b.n	8009242 <_printf_float+0x422>
 800925c:	2301      	movs	r3, #1
 800925e:	4642      	mov	r2, r8
 8009260:	e7df      	b.n	8009222 <_printf_float+0x402>
 8009262:	2301      	movs	r3, #1
 8009264:	464a      	mov	r2, r9
 8009266:	4631      	mov	r1, r6
 8009268:	4628      	mov	r0, r5
 800926a:	47b8      	blx	r7
 800926c:	3001      	adds	r0, #1
 800926e:	f43f ae36 	beq.w	8008ede <_printf_float+0xbe>
 8009272:	f108 0801 	add.w	r8, r8, #1
 8009276:	68e3      	ldr	r3, [r4, #12]
 8009278:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800927a:	1a5b      	subs	r3, r3, r1
 800927c:	4543      	cmp	r3, r8
 800927e:	dcf0      	bgt.n	8009262 <_printf_float+0x442>
 8009280:	e6f8      	b.n	8009074 <_printf_float+0x254>
 8009282:	f04f 0800 	mov.w	r8, #0
 8009286:	f104 0919 	add.w	r9, r4, #25
 800928a:	e7f4      	b.n	8009276 <_printf_float+0x456>

0800928c <_printf_common>:
 800928c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009290:	4616      	mov	r6, r2
 8009292:	4699      	mov	r9, r3
 8009294:	688a      	ldr	r2, [r1, #8]
 8009296:	690b      	ldr	r3, [r1, #16]
 8009298:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800929c:	4293      	cmp	r3, r2
 800929e:	bfb8      	it	lt
 80092a0:	4613      	movlt	r3, r2
 80092a2:	6033      	str	r3, [r6, #0]
 80092a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092a8:	4607      	mov	r7, r0
 80092aa:	460c      	mov	r4, r1
 80092ac:	b10a      	cbz	r2, 80092b2 <_printf_common+0x26>
 80092ae:	3301      	adds	r3, #1
 80092b0:	6033      	str	r3, [r6, #0]
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	0699      	lsls	r1, r3, #26
 80092b6:	bf42      	ittt	mi
 80092b8:	6833      	ldrmi	r3, [r6, #0]
 80092ba:	3302      	addmi	r3, #2
 80092bc:	6033      	strmi	r3, [r6, #0]
 80092be:	6825      	ldr	r5, [r4, #0]
 80092c0:	f015 0506 	ands.w	r5, r5, #6
 80092c4:	d106      	bne.n	80092d4 <_printf_common+0x48>
 80092c6:	f104 0a19 	add.w	sl, r4, #25
 80092ca:	68e3      	ldr	r3, [r4, #12]
 80092cc:	6832      	ldr	r2, [r6, #0]
 80092ce:	1a9b      	subs	r3, r3, r2
 80092d0:	42ab      	cmp	r3, r5
 80092d2:	dc26      	bgt.n	8009322 <_printf_common+0x96>
 80092d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092d8:	1e13      	subs	r3, r2, #0
 80092da:	6822      	ldr	r2, [r4, #0]
 80092dc:	bf18      	it	ne
 80092de:	2301      	movne	r3, #1
 80092e0:	0692      	lsls	r2, r2, #26
 80092e2:	d42b      	bmi.n	800933c <_printf_common+0xb0>
 80092e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092e8:	4649      	mov	r1, r9
 80092ea:	4638      	mov	r0, r7
 80092ec:	47c0      	blx	r8
 80092ee:	3001      	adds	r0, #1
 80092f0:	d01e      	beq.n	8009330 <_printf_common+0xa4>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	6922      	ldr	r2, [r4, #16]
 80092f6:	f003 0306 	and.w	r3, r3, #6
 80092fa:	2b04      	cmp	r3, #4
 80092fc:	bf02      	ittt	eq
 80092fe:	68e5      	ldreq	r5, [r4, #12]
 8009300:	6833      	ldreq	r3, [r6, #0]
 8009302:	1aed      	subeq	r5, r5, r3
 8009304:	68a3      	ldr	r3, [r4, #8]
 8009306:	bf0c      	ite	eq
 8009308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800930c:	2500      	movne	r5, #0
 800930e:	4293      	cmp	r3, r2
 8009310:	bfc4      	itt	gt
 8009312:	1a9b      	subgt	r3, r3, r2
 8009314:	18ed      	addgt	r5, r5, r3
 8009316:	2600      	movs	r6, #0
 8009318:	341a      	adds	r4, #26
 800931a:	42b5      	cmp	r5, r6
 800931c:	d11a      	bne.n	8009354 <_printf_common+0xc8>
 800931e:	2000      	movs	r0, #0
 8009320:	e008      	b.n	8009334 <_printf_common+0xa8>
 8009322:	2301      	movs	r3, #1
 8009324:	4652      	mov	r2, sl
 8009326:	4649      	mov	r1, r9
 8009328:	4638      	mov	r0, r7
 800932a:	47c0      	blx	r8
 800932c:	3001      	adds	r0, #1
 800932e:	d103      	bne.n	8009338 <_printf_common+0xac>
 8009330:	f04f 30ff 	mov.w	r0, #4294967295
 8009334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009338:	3501      	adds	r5, #1
 800933a:	e7c6      	b.n	80092ca <_printf_common+0x3e>
 800933c:	18e1      	adds	r1, r4, r3
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	2030      	movs	r0, #48	; 0x30
 8009342:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009346:	4422      	add	r2, r4
 8009348:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800934c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009350:	3302      	adds	r3, #2
 8009352:	e7c7      	b.n	80092e4 <_printf_common+0x58>
 8009354:	2301      	movs	r3, #1
 8009356:	4622      	mov	r2, r4
 8009358:	4649      	mov	r1, r9
 800935a:	4638      	mov	r0, r7
 800935c:	47c0      	blx	r8
 800935e:	3001      	adds	r0, #1
 8009360:	d0e6      	beq.n	8009330 <_printf_common+0xa4>
 8009362:	3601      	adds	r6, #1
 8009364:	e7d9      	b.n	800931a <_printf_common+0x8e>
	...

08009368 <_printf_i>:
 8009368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800936c:	7e0f      	ldrb	r7, [r1, #24]
 800936e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009370:	2f78      	cmp	r7, #120	; 0x78
 8009372:	4691      	mov	r9, r2
 8009374:	4680      	mov	r8, r0
 8009376:	460c      	mov	r4, r1
 8009378:	469a      	mov	sl, r3
 800937a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800937e:	d807      	bhi.n	8009390 <_printf_i+0x28>
 8009380:	2f62      	cmp	r7, #98	; 0x62
 8009382:	d80a      	bhi.n	800939a <_printf_i+0x32>
 8009384:	2f00      	cmp	r7, #0
 8009386:	f000 80d4 	beq.w	8009532 <_printf_i+0x1ca>
 800938a:	2f58      	cmp	r7, #88	; 0x58
 800938c:	f000 80c0 	beq.w	8009510 <_printf_i+0x1a8>
 8009390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009394:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009398:	e03a      	b.n	8009410 <_printf_i+0xa8>
 800939a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800939e:	2b15      	cmp	r3, #21
 80093a0:	d8f6      	bhi.n	8009390 <_printf_i+0x28>
 80093a2:	a101      	add	r1, pc, #4	; (adr r1, 80093a8 <_printf_i+0x40>)
 80093a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093a8:	08009401 	.word	0x08009401
 80093ac:	08009415 	.word	0x08009415
 80093b0:	08009391 	.word	0x08009391
 80093b4:	08009391 	.word	0x08009391
 80093b8:	08009391 	.word	0x08009391
 80093bc:	08009391 	.word	0x08009391
 80093c0:	08009415 	.word	0x08009415
 80093c4:	08009391 	.word	0x08009391
 80093c8:	08009391 	.word	0x08009391
 80093cc:	08009391 	.word	0x08009391
 80093d0:	08009391 	.word	0x08009391
 80093d4:	08009519 	.word	0x08009519
 80093d8:	08009441 	.word	0x08009441
 80093dc:	080094d3 	.word	0x080094d3
 80093e0:	08009391 	.word	0x08009391
 80093e4:	08009391 	.word	0x08009391
 80093e8:	0800953b 	.word	0x0800953b
 80093ec:	08009391 	.word	0x08009391
 80093f0:	08009441 	.word	0x08009441
 80093f4:	08009391 	.word	0x08009391
 80093f8:	08009391 	.word	0x08009391
 80093fc:	080094db 	.word	0x080094db
 8009400:	682b      	ldr	r3, [r5, #0]
 8009402:	1d1a      	adds	r2, r3, #4
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	602a      	str	r2, [r5, #0]
 8009408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800940c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009410:	2301      	movs	r3, #1
 8009412:	e09f      	b.n	8009554 <_printf_i+0x1ec>
 8009414:	6820      	ldr	r0, [r4, #0]
 8009416:	682b      	ldr	r3, [r5, #0]
 8009418:	0607      	lsls	r7, r0, #24
 800941a:	f103 0104 	add.w	r1, r3, #4
 800941e:	6029      	str	r1, [r5, #0]
 8009420:	d501      	bpl.n	8009426 <_printf_i+0xbe>
 8009422:	681e      	ldr	r6, [r3, #0]
 8009424:	e003      	b.n	800942e <_printf_i+0xc6>
 8009426:	0646      	lsls	r6, r0, #25
 8009428:	d5fb      	bpl.n	8009422 <_printf_i+0xba>
 800942a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800942e:	2e00      	cmp	r6, #0
 8009430:	da03      	bge.n	800943a <_printf_i+0xd2>
 8009432:	232d      	movs	r3, #45	; 0x2d
 8009434:	4276      	negs	r6, r6
 8009436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800943a:	485a      	ldr	r0, [pc, #360]	; (80095a4 <_printf_i+0x23c>)
 800943c:	230a      	movs	r3, #10
 800943e:	e012      	b.n	8009466 <_printf_i+0xfe>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	6820      	ldr	r0, [r4, #0]
 8009444:	1d19      	adds	r1, r3, #4
 8009446:	6029      	str	r1, [r5, #0]
 8009448:	0605      	lsls	r5, r0, #24
 800944a:	d501      	bpl.n	8009450 <_printf_i+0xe8>
 800944c:	681e      	ldr	r6, [r3, #0]
 800944e:	e002      	b.n	8009456 <_printf_i+0xee>
 8009450:	0641      	lsls	r1, r0, #25
 8009452:	d5fb      	bpl.n	800944c <_printf_i+0xe4>
 8009454:	881e      	ldrh	r6, [r3, #0]
 8009456:	4853      	ldr	r0, [pc, #332]	; (80095a4 <_printf_i+0x23c>)
 8009458:	2f6f      	cmp	r7, #111	; 0x6f
 800945a:	bf0c      	ite	eq
 800945c:	2308      	moveq	r3, #8
 800945e:	230a      	movne	r3, #10
 8009460:	2100      	movs	r1, #0
 8009462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009466:	6865      	ldr	r5, [r4, #4]
 8009468:	60a5      	str	r5, [r4, #8]
 800946a:	2d00      	cmp	r5, #0
 800946c:	bfa2      	ittt	ge
 800946e:	6821      	ldrge	r1, [r4, #0]
 8009470:	f021 0104 	bicge.w	r1, r1, #4
 8009474:	6021      	strge	r1, [r4, #0]
 8009476:	b90e      	cbnz	r6, 800947c <_printf_i+0x114>
 8009478:	2d00      	cmp	r5, #0
 800947a:	d04b      	beq.n	8009514 <_printf_i+0x1ac>
 800947c:	4615      	mov	r5, r2
 800947e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009482:	fb03 6711 	mls	r7, r3, r1, r6
 8009486:	5dc7      	ldrb	r7, [r0, r7]
 8009488:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800948c:	4637      	mov	r7, r6
 800948e:	42bb      	cmp	r3, r7
 8009490:	460e      	mov	r6, r1
 8009492:	d9f4      	bls.n	800947e <_printf_i+0x116>
 8009494:	2b08      	cmp	r3, #8
 8009496:	d10b      	bne.n	80094b0 <_printf_i+0x148>
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	07de      	lsls	r6, r3, #31
 800949c:	d508      	bpl.n	80094b0 <_printf_i+0x148>
 800949e:	6923      	ldr	r3, [r4, #16]
 80094a0:	6861      	ldr	r1, [r4, #4]
 80094a2:	4299      	cmp	r1, r3
 80094a4:	bfde      	ittt	le
 80094a6:	2330      	movle	r3, #48	; 0x30
 80094a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094b0:	1b52      	subs	r2, r2, r5
 80094b2:	6122      	str	r2, [r4, #16]
 80094b4:	f8cd a000 	str.w	sl, [sp]
 80094b8:	464b      	mov	r3, r9
 80094ba:	aa03      	add	r2, sp, #12
 80094bc:	4621      	mov	r1, r4
 80094be:	4640      	mov	r0, r8
 80094c0:	f7ff fee4 	bl	800928c <_printf_common>
 80094c4:	3001      	adds	r0, #1
 80094c6:	d14a      	bne.n	800955e <_printf_i+0x1f6>
 80094c8:	f04f 30ff 	mov.w	r0, #4294967295
 80094cc:	b004      	add	sp, #16
 80094ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	f043 0320 	orr.w	r3, r3, #32
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	4833      	ldr	r0, [pc, #204]	; (80095a8 <_printf_i+0x240>)
 80094dc:	2778      	movs	r7, #120	; 0x78
 80094de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094e2:	6823      	ldr	r3, [r4, #0]
 80094e4:	6829      	ldr	r1, [r5, #0]
 80094e6:	061f      	lsls	r7, r3, #24
 80094e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80094ec:	d402      	bmi.n	80094f4 <_printf_i+0x18c>
 80094ee:	065f      	lsls	r7, r3, #25
 80094f0:	bf48      	it	mi
 80094f2:	b2b6      	uxthmi	r6, r6
 80094f4:	07df      	lsls	r7, r3, #31
 80094f6:	bf48      	it	mi
 80094f8:	f043 0320 	orrmi.w	r3, r3, #32
 80094fc:	6029      	str	r1, [r5, #0]
 80094fe:	bf48      	it	mi
 8009500:	6023      	strmi	r3, [r4, #0]
 8009502:	b91e      	cbnz	r6, 800950c <_printf_i+0x1a4>
 8009504:	6823      	ldr	r3, [r4, #0]
 8009506:	f023 0320 	bic.w	r3, r3, #32
 800950a:	6023      	str	r3, [r4, #0]
 800950c:	2310      	movs	r3, #16
 800950e:	e7a7      	b.n	8009460 <_printf_i+0xf8>
 8009510:	4824      	ldr	r0, [pc, #144]	; (80095a4 <_printf_i+0x23c>)
 8009512:	e7e4      	b.n	80094de <_printf_i+0x176>
 8009514:	4615      	mov	r5, r2
 8009516:	e7bd      	b.n	8009494 <_printf_i+0x12c>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	6826      	ldr	r6, [r4, #0]
 800951c:	6961      	ldr	r1, [r4, #20]
 800951e:	1d18      	adds	r0, r3, #4
 8009520:	6028      	str	r0, [r5, #0]
 8009522:	0635      	lsls	r5, r6, #24
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	d501      	bpl.n	800952c <_printf_i+0x1c4>
 8009528:	6019      	str	r1, [r3, #0]
 800952a:	e002      	b.n	8009532 <_printf_i+0x1ca>
 800952c:	0670      	lsls	r0, r6, #25
 800952e:	d5fb      	bpl.n	8009528 <_printf_i+0x1c0>
 8009530:	8019      	strh	r1, [r3, #0]
 8009532:	2300      	movs	r3, #0
 8009534:	6123      	str	r3, [r4, #16]
 8009536:	4615      	mov	r5, r2
 8009538:	e7bc      	b.n	80094b4 <_printf_i+0x14c>
 800953a:	682b      	ldr	r3, [r5, #0]
 800953c:	1d1a      	adds	r2, r3, #4
 800953e:	602a      	str	r2, [r5, #0]
 8009540:	681d      	ldr	r5, [r3, #0]
 8009542:	6862      	ldr	r2, [r4, #4]
 8009544:	2100      	movs	r1, #0
 8009546:	4628      	mov	r0, r5
 8009548:	f7f6 fe42 	bl	80001d0 <memchr>
 800954c:	b108      	cbz	r0, 8009552 <_printf_i+0x1ea>
 800954e:	1b40      	subs	r0, r0, r5
 8009550:	6060      	str	r0, [r4, #4]
 8009552:	6863      	ldr	r3, [r4, #4]
 8009554:	6123      	str	r3, [r4, #16]
 8009556:	2300      	movs	r3, #0
 8009558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800955c:	e7aa      	b.n	80094b4 <_printf_i+0x14c>
 800955e:	6923      	ldr	r3, [r4, #16]
 8009560:	462a      	mov	r2, r5
 8009562:	4649      	mov	r1, r9
 8009564:	4640      	mov	r0, r8
 8009566:	47d0      	blx	sl
 8009568:	3001      	adds	r0, #1
 800956a:	d0ad      	beq.n	80094c8 <_printf_i+0x160>
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	079b      	lsls	r3, r3, #30
 8009570:	d413      	bmi.n	800959a <_printf_i+0x232>
 8009572:	68e0      	ldr	r0, [r4, #12]
 8009574:	9b03      	ldr	r3, [sp, #12]
 8009576:	4298      	cmp	r0, r3
 8009578:	bfb8      	it	lt
 800957a:	4618      	movlt	r0, r3
 800957c:	e7a6      	b.n	80094cc <_printf_i+0x164>
 800957e:	2301      	movs	r3, #1
 8009580:	4632      	mov	r2, r6
 8009582:	4649      	mov	r1, r9
 8009584:	4640      	mov	r0, r8
 8009586:	47d0      	blx	sl
 8009588:	3001      	adds	r0, #1
 800958a:	d09d      	beq.n	80094c8 <_printf_i+0x160>
 800958c:	3501      	adds	r5, #1
 800958e:	68e3      	ldr	r3, [r4, #12]
 8009590:	9903      	ldr	r1, [sp, #12]
 8009592:	1a5b      	subs	r3, r3, r1
 8009594:	42ab      	cmp	r3, r5
 8009596:	dcf2      	bgt.n	800957e <_printf_i+0x216>
 8009598:	e7eb      	b.n	8009572 <_printf_i+0x20a>
 800959a:	2500      	movs	r5, #0
 800959c:	f104 0619 	add.w	r6, r4, #25
 80095a0:	e7f5      	b.n	800958e <_printf_i+0x226>
 80095a2:	bf00      	nop
 80095a4:	0800e5fa 	.word	0x0800e5fa
 80095a8:	0800e60b 	.word	0x0800e60b

080095ac <std>:
 80095ac:	2300      	movs	r3, #0
 80095ae:	b510      	push	{r4, lr}
 80095b0:	4604      	mov	r4, r0
 80095b2:	e9c0 3300 	strd	r3, r3, [r0]
 80095b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095ba:	6083      	str	r3, [r0, #8]
 80095bc:	8181      	strh	r1, [r0, #12]
 80095be:	6643      	str	r3, [r0, #100]	; 0x64
 80095c0:	81c2      	strh	r2, [r0, #14]
 80095c2:	6183      	str	r3, [r0, #24]
 80095c4:	4619      	mov	r1, r3
 80095c6:	2208      	movs	r2, #8
 80095c8:	305c      	adds	r0, #92	; 0x5c
 80095ca:	f000 f930 	bl	800982e <memset>
 80095ce:	4b05      	ldr	r3, [pc, #20]	; (80095e4 <std+0x38>)
 80095d0:	6263      	str	r3, [r4, #36]	; 0x24
 80095d2:	4b05      	ldr	r3, [pc, #20]	; (80095e8 <std+0x3c>)
 80095d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80095d6:	4b05      	ldr	r3, [pc, #20]	; (80095ec <std+0x40>)
 80095d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095da:	4b05      	ldr	r3, [pc, #20]	; (80095f0 <std+0x44>)
 80095dc:	6224      	str	r4, [r4, #32]
 80095de:	6323      	str	r3, [r4, #48]	; 0x30
 80095e0:	bd10      	pop	{r4, pc}
 80095e2:	bf00      	nop
 80095e4:	08009775 	.word	0x08009775
 80095e8:	08009797 	.word	0x08009797
 80095ec:	080097cf 	.word	0x080097cf
 80095f0:	080097f3 	.word	0x080097f3

080095f4 <stdio_exit_handler>:
 80095f4:	4a02      	ldr	r2, [pc, #8]	; (8009600 <stdio_exit_handler+0xc>)
 80095f6:	4903      	ldr	r1, [pc, #12]	; (8009604 <stdio_exit_handler+0x10>)
 80095f8:	4803      	ldr	r0, [pc, #12]	; (8009608 <stdio_exit_handler+0x14>)
 80095fa:	f000 b869 	b.w	80096d0 <_fwalk_sglue>
 80095fe:	bf00      	nop
 8009600:	20000040 	.word	0x20000040
 8009604:	0800b231 	.word	0x0800b231
 8009608:	2000004c 	.word	0x2000004c

0800960c <cleanup_stdio>:
 800960c:	6841      	ldr	r1, [r0, #4]
 800960e:	4b0c      	ldr	r3, [pc, #48]	; (8009640 <cleanup_stdio+0x34>)
 8009610:	4299      	cmp	r1, r3
 8009612:	b510      	push	{r4, lr}
 8009614:	4604      	mov	r4, r0
 8009616:	d001      	beq.n	800961c <cleanup_stdio+0x10>
 8009618:	f001 fe0a 	bl	800b230 <_fflush_r>
 800961c:	68a1      	ldr	r1, [r4, #8]
 800961e:	4b09      	ldr	r3, [pc, #36]	; (8009644 <cleanup_stdio+0x38>)
 8009620:	4299      	cmp	r1, r3
 8009622:	d002      	beq.n	800962a <cleanup_stdio+0x1e>
 8009624:	4620      	mov	r0, r4
 8009626:	f001 fe03 	bl	800b230 <_fflush_r>
 800962a:	68e1      	ldr	r1, [r4, #12]
 800962c:	4b06      	ldr	r3, [pc, #24]	; (8009648 <cleanup_stdio+0x3c>)
 800962e:	4299      	cmp	r1, r3
 8009630:	d004      	beq.n	800963c <cleanup_stdio+0x30>
 8009632:	4620      	mov	r0, r4
 8009634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009638:	f001 bdfa 	b.w	800b230 <_fflush_r>
 800963c:	bd10      	pop	{r4, pc}
 800963e:	bf00      	nop
 8009640:	20000878 	.word	0x20000878
 8009644:	200008e0 	.word	0x200008e0
 8009648:	20000948 	.word	0x20000948

0800964c <global_stdio_init.part.0>:
 800964c:	b510      	push	{r4, lr}
 800964e:	4b0b      	ldr	r3, [pc, #44]	; (800967c <global_stdio_init.part.0+0x30>)
 8009650:	4c0b      	ldr	r4, [pc, #44]	; (8009680 <global_stdio_init.part.0+0x34>)
 8009652:	4a0c      	ldr	r2, [pc, #48]	; (8009684 <global_stdio_init.part.0+0x38>)
 8009654:	601a      	str	r2, [r3, #0]
 8009656:	4620      	mov	r0, r4
 8009658:	2200      	movs	r2, #0
 800965a:	2104      	movs	r1, #4
 800965c:	f7ff ffa6 	bl	80095ac <std>
 8009660:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009664:	2201      	movs	r2, #1
 8009666:	2109      	movs	r1, #9
 8009668:	f7ff ffa0 	bl	80095ac <std>
 800966c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009670:	2202      	movs	r2, #2
 8009672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009676:	2112      	movs	r1, #18
 8009678:	f7ff bf98 	b.w	80095ac <std>
 800967c:	200009b0 	.word	0x200009b0
 8009680:	20000878 	.word	0x20000878
 8009684:	080095f5 	.word	0x080095f5

08009688 <__sfp_lock_acquire>:
 8009688:	4801      	ldr	r0, [pc, #4]	; (8009690 <__sfp_lock_acquire+0x8>)
 800968a:	f000 b9a1 	b.w	80099d0 <__retarget_lock_acquire_recursive>
 800968e:	bf00      	nop
 8009690:	200009b9 	.word	0x200009b9

08009694 <__sfp_lock_release>:
 8009694:	4801      	ldr	r0, [pc, #4]	; (800969c <__sfp_lock_release+0x8>)
 8009696:	f000 b99c 	b.w	80099d2 <__retarget_lock_release_recursive>
 800969a:	bf00      	nop
 800969c:	200009b9 	.word	0x200009b9

080096a0 <__sinit>:
 80096a0:	b510      	push	{r4, lr}
 80096a2:	4604      	mov	r4, r0
 80096a4:	f7ff fff0 	bl	8009688 <__sfp_lock_acquire>
 80096a8:	6a23      	ldr	r3, [r4, #32]
 80096aa:	b11b      	cbz	r3, 80096b4 <__sinit+0x14>
 80096ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096b0:	f7ff bff0 	b.w	8009694 <__sfp_lock_release>
 80096b4:	4b04      	ldr	r3, [pc, #16]	; (80096c8 <__sinit+0x28>)
 80096b6:	6223      	str	r3, [r4, #32]
 80096b8:	4b04      	ldr	r3, [pc, #16]	; (80096cc <__sinit+0x2c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1f5      	bne.n	80096ac <__sinit+0xc>
 80096c0:	f7ff ffc4 	bl	800964c <global_stdio_init.part.0>
 80096c4:	e7f2      	b.n	80096ac <__sinit+0xc>
 80096c6:	bf00      	nop
 80096c8:	0800960d 	.word	0x0800960d
 80096cc:	200009b0 	.word	0x200009b0

080096d0 <_fwalk_sglue>:
 80096d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096d4:	4607      	mov	r7, r0
 80096d6:	4688      	mov	r8, r1
 80096d8:	4614      	mov	r4, r2
 80096da:	2600      	movs	r6, #0
 80096dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096e0:	f1b9 0901 	subs.w	r9, r9, #1
 80096e4:	d505      	bpl.n	80096f2 <_fwalk_sglue+0x22>
 80096e6:	6824      	ldr	r4, [r4, #0]
 80096e8:	2c00      	cmp	r4, #0
 80096ea:	d1f7      	bne.n	80096dc <_fwalk_sglue+0xc>
 80096ec:	4630      	mov	r0, r6
 80096ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096f2:	89ab      	ldrh	r3, [r5, #12]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d907      	bls.n	8009708 <_fwalk_sglue+0x38>
 80096f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096fc:	3301      	adds	r3, #1
 80096fe:	d003      	beq.n	8009708 <_fwalk_sglue+0x38>
 8009700:	4629      	mov	r1, r5
 8009702:	4638      	mov	r0, r7
 8009704:	47c0      	blx	r8
 8009706:	4306      	orrs	r6, r0
 8009708:	3568      	adds	r5, #104	; 0x68
 800970a:	e7e9      	b.n	80096e0 <_fwalk_sglue+0x10>

0800970c <sniprintf>:
 800970c:	b40c      	push	{r2, r3}
 800970e:	b530      	push	{r4, r5, lr}
 8009710:	4b17      	ldr	r3, [pc, #92]	; (8009770 <sniprintf+0x64>)
 8009712:	1e0c      	subs	r4, r1, #0
 8009714:	681d      	ldr	r5, [r3, #0]
 8009716:	b09d      	sub	sp, #116	; 0x74
 8009718:	da08      	bge.n	800972c <sniprintf+0x20>
 800971a:	238b      	movs	r3, #139	; 0x8b
 800971c:	602b      	str	r3, [r5, #0]
 800971e:	f04f 30ff 	mov.w	r0, #4294967295
 8009722:	b01d      	add	sp, #116	; 0x74
 8009724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009728:	b002      	add	sp, #8
 800972a:	4770      	bx	lr
 800972c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009730:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009734:	bf14      	ite	ne
 8009736:	f104 33ff 	addne.w	r3, r4, #4294967295
 800973a:	4623      	moveq	r3, r4
 800973c:	9304      	str	r3, [sp, #16]
 800973e:	9307      	str	r3, [sp, #28]
 8009740:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009744:	9002      	str	r0, [sp, #8]
 8009746:	9006      	str	r0, [sp, #24]
 8009748:	f8ad 3016 	strh.w	r3, [sp, #22]
 800974c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800974e:	ab21      	add	r3, sp, #132	; 0x84
 8009750:	a902      	add	r1, sp, #8
 8009752:	4628      	mov	r0, r5
 8009754:	9301      	str	r3, [sp, #4]
 8009756:	f001 fbe7 	bl	800af28 <_svfiprintf_r>
 800975a:	1c43      	adds	r3, r0, #1
 800975c:	bfbc      	itt	lt
 800975e:	238b      	movlt	r3, #139	; 0x8b
 8009760:	602b      	strlt	r3, [r5, #0]
 8009762:	2c00      	cmp	r4, #0
 8009764:	d0dd      	beq.n	8009722 <sniprintf+0x16>
 8009766:	9b02      	ldr	r3, [sp, #8]
 8009768:	2200      	movs	r2, #0
 800976a:	701a      	strb	r2, [r3, #0]
 800976c:	e7d9      	b.n	8009722 <sniprintf+0x16>
 800976e:	bf00      	nop
 8009770:	20000098 	.word	0x20000098

08009774 <__sread>:
 8009774:	b510      	push	{r4, lr}
 8009776:	460c      	mov	r4, r1
 8009778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800977c:	f000 f8b6 	bl	80098ec <_read_r>
 8009780:	2800      	cmp	r0, #0
 8009782:	bfab      	itete	ge
 8009784:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009786:	89a3      	ldrhlt	r3, [r4, #12]
 8009788:	181b      	addge	r3, r3, r0
 800978a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800978e:	bfac      	ite	ge
 8009790:	6563      	strge	r3, [r4, #84]	; 0x54
 8009792:	81a3      	strhlt	r3, [r4, #12]
 8009794:	bd10      	pop	{r4, pc}

08009796 <__swrite>:
 8009796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800979a:	461f      	mov	r7, r3
 800979c:	898b      	ldrh	r3, [r1, #12]
 800979e:	05db      	lsls	r3, r3, #23
 80097a0:	4605      	mov	r5, r0
 80097a2:	460c      	mov	r4, r1
 80097a4:	4616      	mov	r6, r2
 80097a6:	d505      	bpl.n	80097b4 <__swrite+0x1e>
 80097a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ac:	2302      	movs	r3, #2
 80097ae:	2200      	movs	r2, #0
 80097b0:	f000 f88a 	bl	80098c8 <_lseek_r>
 80097b4:	89a3      	ldrh	r3, [r4, #12]
 80097b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097be:	81a3      	strh	r3, [r4, #12]
 80097c0:	4632      	mov	r2, r6
 80097c2:	463b      	mov	r3, r7
 80097c4:	4628      	mov	r0, r5
 80097c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ca:	f000 b8c5 	b.w	8009958 <_write_r>

080097ce <__sseek>:
 80097ce:	b510      	push	{r4, lr}
 80097d0:	460c      	mov	r4, r1
 80097d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d6:	f000 f877 	bl	80098c8 <_lseek_r>
 80097da:	1c43      	adds	r3, r0, #1
 80097dc:	89a3      	ldrh	r3, [r4, #12]
 80097de:	bf15      	itete	ne
 80097e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80097e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097ea:	81a3      	strheq	r3, [r4, #12]
 80097ec:	bf18      	it	ne
 80097ee:	81a3      	strhne	r3, [r4, #12]
 80097f0:	bd10      	pop	{r4, pc}

080097f2 <__sclose>:
 80097f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f6:	f000 b857 	b.w	80098a8 <_close_r>

080097fa <memmove>:
 80097fa:	4288      	cmp	r0, r1
 80097fc:	b510      	push	{r4, lr}
 80097fe:	eb01 0402 	add.w	r4, r1, r2
 8009802:	d902      	bls.n	800980a <memmove+0x10>
 8009804:	4284      	cmp	r4, r0
 8009806:	4623      	mov	r3, r4
 8009808:	d807      	bhi.n	800981a <memmove+0x20>
 800980a:	1e43      	subs	r3, r0, #1
 800980c:	42a1      	cmp	r1, r4
 800980e:	d008      	beq.n	8009822 <memmove+0x28>
 8009810:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009814:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009818:	e7f8      	b.n	800980c <memmove+0x12>
 800981a:	4402      	add	r2, r0
 800981c:	4601      	mov	r1, r0
 800981e:	428a      	cmp	r2, r1
 8009820:	d100      	bne.n	8009824 <memmove+0x2a>
 8009822:	bd10      	pop	{r4, pc}
 8009824:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009828:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800982c:	e7f7      	b.n	800981e <memmove+0x24>

0800982e <memset>:
 800982e:	4402      	add	r2, r0
 8009830:	4603      	mov	r3, r0
 8009832:	4293      	cmp	r3, r2
 8009834:	d100      	bne.n	8009838 <memset+0xa>
 8009836:	4770      	bx	lr
 8009838:	f803 1b01 	strb.w	r1, [r3], #1
 800983c:	e7f9      	b.n	8009832 <memset+0x4>

0800983e <_raise_r>:
 800983e:	291f      	cmp	r1, #31
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	4604      	mov	r4, r0
 8009844:	460d      	mov	r5, r1
 8009846:	d904      	bls.n	8009852 <_raise_r+0x14>
 8009848:	2316      	movs	r3, #22
 800984a:	6003      	str	r3, [r0, #0]
 800984c:	f04f 30ff 	mov.w	r0, #4294967295
 8009850:	bd38      	pop	{r3, r4, r5, pc}
 8009852:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009854:	b112      	cbz	r2, 800985c <_raise_r+0x1e>
 8009856:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800985a:	b94b      	cbnz	r3, 8009870 <_raise_r+0x32>
 800985c:	4620      	mov	r0, r4
 800985e:	f000 f869 	bl	8009934 <_getpid_r>
 8009862:	462a      	mov	r2, r5
 8009864:	4601      	mov	r1, r0
 8009866:	4620      	mov	r0, r4
 8009868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800986c:	f000 b850 	b.w	8009910 <_kill_r>
 8009870:	2b01      	cmp	r3, #1
 8009872:	d00a      	beq.n	800988a <_raise_r+0x4c>
 8009874:	1c59      	adds	r1, r3, #1
 8009876:	d103      	bne.n	8009880 <_raise_r+0x42>
 8009878:	2316      	movs	r3, #22
 800987a:	6003      	str	r3, [r0, #0]
 800987c:	2001      	movs	r0, #1
 800987e:	e7e7      	b.n	8009850 <_raise_r+0x12>
 8009880:	2400      	movs	r4, #0
 8009882:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009886:	4628      	mov	r0, r5
 8009888:	4798      	blx	r3
 800988a:	2000      	movs	r0, #0
 800988c:	e7e0      	b.n	8009850 <_raise_r+0x12>
	...

08009890 <raise>:
 8009890:	4b02      	ldr	r3, [pc, #8]	; (800989c <raise+0xc>)
 8009892:	4601      	mov	r1, r0
 8009894:	6818      	ldr	r0, [r3, #0]
 8009896:	f7ff bfd2 	b.w	800983e <_raise_r>
 800989a:	bf00      	nop
 800989c:	20000098 	.word	0x20000098

080098a0 <_localeconv_r>:
 80098a0:	4800      	ldr	r0, [pc, #0]	; (80098a4 <_localeconv_r+0x4>)
 80098a2:	4770      	bx	lr
 80098a4:	2000018c 	.word	0x2000018c

080098a8 <_close_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4d06      	ldr	r5, [pc, #24]	; (80098c4 <_close_r+0x1c>)
 80098ac:	2300      	movs	r3, #0
 80098ae:	4604      	mov	r4, r0
 80098b0:	4608      	mov	r0, r1
 80098b2:	602b      	str	r3, [r5, #0]
 80098b4:	f7f8 fc15 	bl	80020e2 <_close>
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	d102      	bne.n	80098c2 <_close_r+0x1a>
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	b103      	cbz	r3, 80098c2 <_close_r+0x1a>
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
 80098c4:	200009b4 	.word	0x200009b4

080098c8 <_lseek_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	4d07      	ldr	r5, [pc, #28]	; (80098e8 <_lseek_r+0x20>)
 80098cc:	4604      	mov	r4, r0
 80098ce:	4608      	mov	r0, r1
 80098d0:	4611      	mov	r1, r2
 80098d2:	2200      	movs	r2, #0
 80098d4:	602a      	str	r2, [r5, #0]
 80098d6:	461a      	mov	r2, r3
 80098d8:	f7f8 fc2a 	bl	8002130 <_lseek>
 80098dc:	1c43      	adds	r3, r0, #1
 80098de:	d102      	bne.n	80098e6 <_lseek_r+0x1e>
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	b103      	cbz	r3, 80098e6 <_lseek_r+0x1e>
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	200009b4 	.word	0x200009b4

080098ec <_read_r>:
 80098ec:	b538      	push	{r3, r4, r5, lr}
 80098ee:	4d07      	ldr	r5, [pc, #28]	; (800990c <_read_r+0x20>)
 80098f0:	4604      	mov	r4, r0
 80098f2:	4608      	mov	r0, r1
 80098f4:	4611      	mov	r1, r2
 80098f6:	2200      	movs	r2, #0
 80098f8:	602a      	str	r2, [r5, #0]
 80098fa:	461a      	mov	r2, r3
 80098fc:	f7f8 fbb8 	bl	8002070 <_read>
 8009900:	1c43      	adds	r3, r0, #1
 8009902:	d102      	bne.n	800990a <_read_r+0x1e>
 8009904:	682b      	ldr	r3, [r5, #0]
 8009906:	b103      	cbz	r3, 800990a <_read_r+0x1e>
 8009908:	6023      	str	r3, [r4, #0]
 800990a:	bd38      	pop	{r3, r4, r5, pc}
 800990c:	200009b4 	.word	0x200009b4

08009910 <_kill_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	4d07      	ldr	r5, [pc, #28]	; (8009930 <_kill_r+0x20>)
 8009914:	2300      	movs	r3, #0
 8009916:	4604      	mov	r4, r0
 8009918:	4608      	mov	r0, r1
 800991a:	4611      	mov	r1, r2
 800991c:	602b      	str	r3, [r5, #0]
 800991e:	f7f8 fb8d 	bl	800203c <_kill>
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	d102      	bne.n	800992c <_kill_r+0x1c>
 8009926:	682b      	ldr	r3, [r5, #0]
 8009928:	b103      	cbz	r3, 800992c <_kill_r+0x1c>
 800992a:	6023      	str	r3, [r4, #0]
 800992c:	bd38      	pop	{r3, r4, r5, pc}
 800992e:	bf00      	nop
 8009930:	200009b4 	.word	0x200009b4

08009934 <_getpid_r>:
 8009934:	f7f8 bb7a 	b.w	800202c <_getpid>

08009938 <_sbrk_r>:
 8009938:	b538      	push	{r3, r4, r5, lr}
 800993a:	4d06      	ldr	r5, [pc, #24]	; (8009954 <_sbrk_r+0x1c>)
 800993c:	2300      	movs	r3, #0
 800993e:	4604      	mov	r4, r0
 8009940:	4608      	mov	r0, r1
 8009942:	602b      	str	r3, [r5, #0]
 8009944:	f7f8 fc02 	bl	800214c <_sbrk>
 8009948:	1c43      	adds	r3, r0, #1
 800994a:	d102      	bne.n	8009952 <_sbrk_r+0x1a>
 800994c:	682b      	ldr	r3, [r5, #0]
 800994e:	b103      	cbz	r3, 8009952 <_sbrk_r+0x1a>
 8009950:	6023      	str	r3, [r4, #0]
 8009952:	bd38      	pop	{r3, r4, r5, pc}
 8009954:	200009b4 	.word	0x200009b4

08009958 <_write_r>:
 8009958:	b538      	push	{r3, r4, r5, lr}
 800995a:	4d07      	ldr	r5, [pc, #28]	; (8009978 <_write_r+0x20>)
 800995c:	4604      	mov	r4, r0
 800995e:	4608      	mov	r0, r1
 8009960:	4611      	mov	r1, r2
 8009962:	2200      	movs	r2, #0
 8009964:	602a      	str	r2, [r5, #0]
 8009966:	461a      	mov	r2, r3
 8009968:	f7f8 fb9f 	bl	80020aa <_write>
 800996c:	1c43      	adds	r3, r0, #1
 800996e:	d102      	bne.n	8009976 <_write_r+0x1e>
 8009970:	682b      	ldr	r3, [r5, #0]
 8009972:	b103      	cbz	r3, 8009976 <_write_r+0x1e>
 8009974:	6023      	str	r3, [r4, #0]
 8009976:	bd38      	pop	{r3, r4, r5, pc}
 8009978:	200009b4 	.word	0x200009b4

0800997c <__errno>:
 800997c:	4b01      	ldr	r3, [pc, #4]	; (8009984 <__errno+0x8>)
 800997e:	6818      	ldr	r0, [r3, #0]
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	20000098 	.word	0x20000098

08009988 <__libc_init_array>:
 8009988:	b570      	push	{r4, r5, r6, lr}
 800998a:	4d0d      	ldr	r5, [pc, #52]	; (80099c0 <__libc_init_array+0x38>)
 800998c:	4c0d      	ldr	r4, [pc, #52]	; (80099c4 <__libc_init_array+0x3c>)
 800998e:	1b64      	subs	r4, r4, r5
 8009990:	10a4      	asrs	r4, r4, #2
 8009992:	2600      	movs	r6, #0
 8009994:	42a6      	cmp	r6, r4
 8009996:	d109      	bne.n	80099ac <__libc_init_array+0x24>
 8009998:	4d0b      	ldr	r5, [pc, #44]	; (80099c8 <__libc_init_array+0x40>)
 800999a:	4c0c      	ldr	r4, [pc, #48]	; (80099cc <__libc_init_array+0x44>)
 800999c:	f001 ff6a 	bl	800b874 <_init>
 80099a0:	1b64      	subs	r4, r4, r5
 80099a2:	10a4      	asrs	r4, r4, #2
 80099a4:	2600      	movs	r6, #0
 80099a6:	42a6      	cmp	r6, r4
 80099a8:	d105      	bne.n	80099b6 <__libc_init_array+0x2e>
 80099aa:	bd70      	pop	{r4, r5, r6, pc}
 80099ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80099b0:	4798      	blx	r3
 80099b2:	3601      	adds	r6, #1
 80099b4:	e7ee      	b.n	8009994 <__libc_init_array+0xc>
 80099b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ba:	4798      	blx	r3
 80099bc:	3601      	adds	r6, #1
 80099be:	e7f2      	b.n	80099a6 <__libc_init_array+0x1e>
 80099c0:	0800e964 	.word	0x0800e964
 80099c4:	0800e964 	.word	0x0800e964
 80099c8:	0800e964 	.word	0x0800e964
 80099cc:	0800e968 	.word	0x0800e968

080099d0 <__retarget_lock_acquire_recursive>:
 80099d0:	4770      	bx	lr

080099d2 <__retarget_lock_release_recursive>:
 80099d2:	4770      	bx	lr

080099d4 <memcpy>:
 80099d4:	440a      	add	r2, r1
 80099d6:	4291      	cmp	r1, r2
 80099d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80099dc:	d100      	bne.n	80099e0 <memcpy+0xc>
 80099de:	4770      	bx	lr
 80099e0:	b510      	push	{r4, lr}
 80099e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099ea:	4291      	cmp	r1, r2
 80099ec:	d1f9      	bne.n	80099e2 <memcpy+0xe>
 80099ee:	bd10      	pop	{r4, pc}

080099f0 <quorem>:
 80099f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f4:	6903      	ldr	r3, [r0, #16]
 80099f6:	690c      	ldr	r4, [r1, #16]
 80099f8:	42a3      	cmp	r3, r4
 80099fa:	4607      	mov	r7, r0
 80099fc:	db7e      	blt.n	8009afc <quorem+0x10c>
 80099fe:	3c01      	subs	r4, #1
 8009a00:	f101 0814 	add.w	r8, r1, #20
 8009a04:	f100 0514 	add.w	r5, r0, #20
 8009a08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a0c:	9301      	str	r3, [sp, #4]
 8009a0e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a16:	3301      	adds	r3, #1
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009a1e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a22:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a26:	d331      	bcc.n	8009a8c <quorem+0x9c>
 8009a28:	f04f 0e00 	mov.w	lr, #0
 8009a2c:	4640      	mov	r0, r8
 8009a2e:	46ac      	mov	ip, r5
 8009a30:	46f2      	mov	sl, lr
 8009a32:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a36:	b293      	uxth	r3, r2
 8009a38:	fb06 e303 	mla	r3, r6, r3, lr
 8009a3c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a40:	0c1a      	lsrs	r2, r3, #16
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	ebaa 0303 	sub.w	r3, sl, r3
 8009a48:	f8dc a000 	ldr.w	sl, [ip]
 8009a4c:	fa13 f38a 	uxtah	r3, r3, sl
 8009a50:	fb06 220e 	mla	r2, r6, lr, r2
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	9b00      	ldr	r3, [sp, #0]
 8009a58:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a5c:	b292      	uxth	r2, r2
 8009a5e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009a62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a66:	f8bd 3000 	ldrh.w	r3, [sp]
 8009a6a:	4581      	cmp	r9, r0
 8009a6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a70:	f84c 3b04 	str.w	r3, [ip], #4
 8009a74:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009a78:	d2db      	bcs.n	8009a32 <quorem+0x42>
 8009a7a:	f855 300b 	ldr.w	r3, [r5, fp]
 8009a7e:	b92b      	cbnz	r3, 8009a8c <quorem+0x9c>
 8009a80:	9b01      	ldr	r3, [sp, #4]
 8009a82:	3b04      	subs	r3, #4
 8009a84:	429d      	cmp	r5, r3
 8009a86:	461a      	mov	r2, r3
 8009a88:	d32c      	bcc.n	8009ae4 <quorem+0xf4>
 8009a8a:	613c      	str	r4, [r7, #16]
 8009a8c:	4638      	mov	r0, r7
 8009a8e:	f001 f8f1 	bl	800ac74 <__mcmp>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	db22      	blt.n	8009adc <quorem+0xec>
 8009a96:	3601      	adds	r6, #1
 8009a98:	4629      	mov	r1, r5
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009aa0:	f8d1 c000 	ldr.w	ip, [r1]
 8009aa4:	b293      	uxth	r3, r2
 8009aa6:	1ac3      	subs	r3, r0, r3
 8009aa8:	0c12      	lsrs	r2, r2, #16
 8009aaa:	fa13 f38c 	uxtah	r3, r3, ip
 8009aae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009ab2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009abc:	45c1      	cmp	r9, r8
 8009abe:	f841 3b04 	str.w	r3, [r1], #4
 8009ac2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ac6:	d2e9      	bcs.n	8009a9c <quorem+0xac>
 8009ac8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009acc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ad0:	b922      	cbnz	r2, 8009adc <quorem+0xec>
 8009ad2:	3b04      	subs	r3, #4
 8009ad4:	429d      	cmp	r5, r3
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	d30a      	bcc.n	8009af0 <quorem+0x100>
 8009ada:	613c      	str	r4, [r7, #16]
 8009adc:	4630      	mov	r0, r6
 8009ade:	b003      	add	sp, #12
 8009ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae4:	6812      	ldr	r2, [r2, #0]
 8009ae6:	3b04      	subs	r3, #4
 8009ae8:	2a00      	cmp	r2, #0
 8009aea:	d1ce      	bne.n	8009a8a <quorem+0x9a>
 8009aec:	3c01      	subs	r4, #1
 8009aee:	e7c9      	b.n	8009a84 <quorem+0x94>
 8009af0:	6812      	ldr	r2, [r2, #0]
 8009af2:	3b04      	subs	r3, #4
 8009af4:	2a00      	cmp	r2, #0
 8009af6:	d1f0      	bne.n	8009ada <quorem+0xea>
 8009af8:	3c01      	subs	r4, #1
 8009afa:	e7eb      	b.n	8009ad4 <quorem+0xe4>
 8009afc:	2000      	movs	r0, #0
 8009afe:	e7ee      	b.n	8009ade <quorem+0xee>

08009b00 <_dtoa_r>:
 8009b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	ed2d 8b04 	vpush	{d8-d9}
 8009b08:	69c5      	ldr	r5, [r0, #28]
 8009b0a:	b093      	sub	sp, #76	; 0x4c
 8009b0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009b10:	ec57 6b10 	vmov	r6, r7, d0
 8009b14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b18:	9107      	str	r1, [sp, #28]
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	920a      	str	r2, [sp, #40]	; 0x28
 8009b1e:	930d      	str	r3, [sp, #52]	; 0x34
 8009b20:	b975      	cbnz	r5, 8009b40 <_dtoa_r+0x40>
 8009b22:	2010      	movs	r0, #16
 8009b24:	f7ff f828 	bl	8008b78 <malloc>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	61e0      	str	r0, [r4, #28]
 8009b2c:	b920      	cbnz	r0, 8009b38 <_dtoa_r+0x38>
 8009b2e:	4bae      	ldr	r3, [pc, #696]	; (8009de8 <_dtoa_r+0x2e8>)
 8009b30:	21ef      	movs	r1, #239	; 0xef
 8009b32:	48ae      	ldr	r0, [pc, #696]	; (8009dec <_dtoa_r+0x2ec>)
 8009b34:	f001 fba4 	bl	800b280 <__assert_func>
 8009b38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b3c:	6005      	str	r5, [r0, #0]
 8009b3e:	60c5      	str	r5, [r0, #12]
 8009b40:	69e3      	ldr	r3, [r4, #28]
 8009b42:	6819      	ldr	r1, [r3, #0]
 8009b44:	b151      	cbz	r1, 8009b5c <_dtoa_r+0x5c>
 8009b46:	685a      	ldr	r2, [r3, #4]
 8009b48:	604a      	str	r2, [r1, #4]
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	4093      	lsls	r3, r2
 8009b4e:	608b      	str	r3, [r1, #8]
 8009b50:	4620      	mov	r0, r4
 8009b52:	f000 fe53 	bl	800a7fc <_Bfree>
 8009b56:	69e3      	ldr	r3, [r4, #28]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	1e3b      	subs	r3, r7, #0
 8009b5e:	bfbb      	ittet	lt
 8009b60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b64:	9303      	strlt	r3, [sp, #12]
 8009b66:	2300      	movge	r3, #0
 8009b68:	2201      	movlt	r2, #1
 8009b6a:	bfac      	ite	ge
 8009b6c:	f8c8 3000 	strge.w	r3, [r8]
 8009b70:	f8c8 2000 	strlt.w	r2, [r8]
 8009b74:	4b9e      	ldr	r3, [pc, #632]	; (8009df0 <_dtoa_r+0x2f0>)
 8009b76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009b7a:	ea33 0308 	bics.w	r3, r3, r8
 8009b7e:	d11b      	bne.n	8009bb8 <_dtoa_r+0xb8>
 8009b80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b82:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b86:	6013      	str	r3, [r2, #0]
 8009b88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009b8c:	4333      	orrs	r3, r6
 8009b8e:	f000 8593 	beq.w	800a6b8 <_dtoa_r+0xbb8>
 8009b92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b94:	b963      	cbnz	r3, 8009bb0 <_dtoa_r+0xb0>
 8009b96:	4b97      	ldr	r3, [pc, #604]	; (8009df4 <_dtoa_r+0x2f4>)
 8009b98:	e027      	b.n	8009bea <_dtoa_r+0xea>
 8009b9a:	4b97      	ldr	r3, [pc, #604]	; (8009df8 <_dtoa_r+0x2f8>)
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	3308      	adds	r3, #8
 8009ba0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ba2:	6013      	str	r3, [r2, #0]
 8009ba4:	9800      	ldr	r0, [sp, #0]
 8009ba6:	b013      	add	sp, #76	; 0x4c
 8009ba8:	ecbd 8b04 	vpop	{d8-d9}
 8009bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb0:	4b90      	ldr	r3, [pc, #576]	; (8009df4 <_dtoa_r+0x2f4>)
 8009bb2:	9300      	str	r3, [sp, #0]
 8009bb4:	3303      	adds	r3, #3
 8009bb6:	e7f3      	b.n	8009ba0 <_dtoa_r+0xa0>
 8009bb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	ec51 0b17 	vmov	r0, r1, d7
 8009bc2:	eeb0 8a47 	vmov.f32	s16, s14
 8009bc6:	eef0 8a67 	vmov.f32	s17, s15
 8009bca:	2300      	movs	r3, #0
 8009bcc:	f7f6 ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bd0:	4681      	mov	r9, r0
 8009bd2:	b160      	cbz	r0, 8009bee <_dtoa_r+0xee>
 8009bd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	6013      	str	r3, [r2, #0]
 8009bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 8568 	beq.w	800a6b2 <_dtoa_r+0xbb2>
 8009be2:	4b86      	ldr	r3, [pc, #536]	; (8009dfc <_dtoa_r+0x2fc>)
 8009be4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009be6:	6013      	str	r3, [r2, #0]
 8009be8:	3b01      	subs	r3, #1
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	e7da      	b.n	8009ba4 <_dtoa_r+0xa4>
 8009bee:	aa10      	add	r2, sp, #64	; 0x40
 8009bf0:	a911      	add	r1, sp, #68	; 0x44
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	eeb0 0a48 	vmov.f32	s0, s16
 8009bf8:	eef0 0a68 	vmov.f32	s1, s17
 8009bfc:	f001 f8e0 	bl	800adc0 <__d2b>
 8009c00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009c04:	4682      	mov	sl, r0
 8009c06:	2d00      	cmp	r5, #0
 8009c08:	d07f      	beq.n	8009d0a <_dtoa_r+0x20a>
 8009c0a:	ee18 3a90 	vmov	r3, s17
 8009c0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009c16:	ec51 0b18 	vmov	r0, r1, d8
 8009c1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009c1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c22:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009c26:	4619      	mov	r1, r3
 8009c28:	2200      	movs	r2, #0
 8009c2a:	4b75      	ldr	r3, [pc, #468]	; (8009e00 <_dtoa_r+0x300>)
 8009c2c:	f7f6 fb2c 	bl	8000288 <__aeabi_dsub>
 8009c30:	a367      	add	r3, pc, #412	; (adr r3, 8009dd0 <_dtoa_r+0x2d0>)
 8009c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c36:	f7f6 fcdf 	bl	80005f8 <__aeabi_dmul>
 8009c3a:	a367      	add	r3, pc, #412	; (adr r3, 8009dd8 <_dtoa_r+0x2d8>)
 8009c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c40:	f7f6 fb24 	bl	800028c <__adddf3>
 8009c44:	4606      	mov	r6, r0
 8009c46:	4628      	mov	r0, r5
 8009c48:	460f      	mov	r7, r1
 8009c4a:	f7f6 fc6b 	bl	8000524 <__aeabi_i2d>
 8009c4e:	a364      	add	r3, pc, #400	; (adr r3, 8009de0 <_dtoa_r+0x2e0>)
 8009c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c54:	f7f6 fcd0 	bl	80005f8 <__aeabi_dmul>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	4639      	mov	r1, r7
 8009c60:	f7f6 fb14 	bl	800028c <__adddf3>
 8009c64:	4606      	mov	r6, r0
 8009c66:	460f      	mov	r7, r1
 8009c68:	f7f6 ff76 	bl	8000b58 <__aeabi_d2iz>
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	4683      	mov	fp, r0
 8009c70:	2300      	movs	r3, #0
 8009c72:	4630      	mov	r0, r6
 8009c74:	4639      	mov	r1, r7
 8009c76:	f7f6 ff31 	bl	8000adc <__aeabi_dcmplt>
 8009c7a:	b148      	cbz	r0, 8009c90 <_dtoa_r+0x190>
 8009c7c:	4658      	mov	r0, fp
 8009c7e:	f7f6 fc51 	bl	8000524 <__aeabi_i2d>
 8009c82:	4632      	mov	r2, r6
 8009c84:	463b      	mov	r3, r7
 8009c86:	f7f6 ff1f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c8a:	b908      	cbnz	r0, 8009c90 <_dtoa_r+0x190>
 8009c8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009c90:	f1bb 0f16 	cmp.w	fp, #22
 8009c94:	d857      	bhi.n	8009d46 <_dtoa_r+0x246>
 8009c96:	4b5b      	ldr	r3, [pc, #364]	; (8009e04 <_dtoa_r+0x304>)
 8009c98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca0:	ec51 0b18 	vmov	r0, r1, d8
 8009ca4:	f7f6 ff1a 	bl	8000adc <__aeabi_dcmplt>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	d04e      	beq.n	8009d4a <_dtoa_r+0x24a>
 8009cac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	930c      	str	r3, [sp, #48]	; 0x30
 8009cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cb6:	1b5b      	subs	r3, r3, r5
 8009cb8:	1e5a      	subs	r2, r3, #1
 8009cba:	bf45      	ittet	mi
 8009cbc:	f1c3 0301 	rsbmi	r3, r3, #1
 8009cc0:	9305      	strmi	r3, [sp, #20]
 8009cc2:	2300      	movpl	r3, #0
 8009cc4:	2300      	movmi	r3, #0
 8009cc6:	9206      	str	r2, [sp, #24]
 8009cc8:	bf54      	ite	pl
 8009cca:	9305      	strpl	r3, [sp, #20]
 8009ccc:	9306      	strmi	r3, [sp, #24]
 8009cce:	f1bb 0f00 	cmp.w	fp, #0
 8009cd2:	db3c      	blt.n	8009d4e <_dtoa_r+0x24e>
 8009cd4:	9b06      	ldr	r3, [sp, #24]
 8009cd6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009cda:	445b      	add	r3, fp
 8009cdc:	9306      	str	r3, [sp, #24]
 8009cde:	2300      	movs	r3, #0
 8009ce0:	9308      	str	r3, [sp, #32]
 8009ce2:	9b07      	ldr	r3, [sp, #28]
 8009ce4:	2b09      	cmp	r3, #9
 8009ce6:	d868      	bhi.n	8009dba <_dtoa_r+0x2ba>
 8009ce8:	2b05      	cmp	r3, #5
 8009cea:	bfc4      	itt	gt
 8009cec:	3b04      	subgt	r3, #4
 8009cee:	9307      	strgt	r3, [sp, #28]
 8009cf0:	9b07      	ldr	r3, [sp, #28]
 8009cf2:	f1a3 0302 	sub.w	r3, r3, #2
 8009cf6:	bfcc      	ite	gt
 8009cf8:	2500      	movgt	r5, #0
 8009cfa:	2501      	movle	r5, #1
 8009cfc:	2b03      	cmp	r3, #3
 8009cfe:	f200 8085 	bhi.w	8009e0c <_dtoa_r+0x30c>
 8009d02:	e8df f003 	tbb	[pc, r3]
 8009d06:	3b2e      	.short	0x3b2e
 8009d08:	5839      	.short	0x5839
 8009d0a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009d0e:	441d      	add	r5, r3
 8009d10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009d14:	2b20      	cmp	r3, #32
 8009d16:	bfc1      	itttt	gt
 8009d18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009d1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009d20:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009d24:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009d28:	bfd6      	itet	le
 8009d2a:	f1c3 0320 	rsble	r3, r3, #32
 8009d2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009d32:	fa06 f003 	lslle.w	r0, r6, r3
 8009d36:	f7f6 fbe5 	bl	8000504 <__aeabi_ui2d>
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009d40:	3d01      	subs	r5, #1
 8009d42:	920e      	str	r2, [sp, #56]	; 0x38
 8009d44:	e76f      	b.n	8009c26 <_dtoa_r+0x126>
 8009d46:	2301      	movs	r3, #1
 8009d48:	e7b3      	b.n	8009cb2 <_dtoa_r+0x1b2>
 8009d4a:	900c      	str	r0, [sp, #48]	; 0x30
 8009d4c:	e7b2      	b.n	8009cb4 <_dtoa_r+0x1b4>
 8009d4e:	9b05      	ldr	r3, [sp, #20]
 8009d50:	eba3 030b 	sub.w	r3, r3, fp
 8009d54:	9305      	str	r3, [sp, #20]
 8009d56:	f1cb 0300 	rsb	r3, fp, #0
 8009d5a:	9308      	str	r3, [sp, #32]
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d60:	e7bf      	b.n	8009ce2 <_dtoa_r+0x1e2>
 8009d62:	2300      	movs	r3, #0
 8009d64:	9309      	str	r3, [sp, #36]	; 0x24
 8009d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	dc52      	bgt.n	8009e12 <_dtoa_r+0x312>
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	9301      	str	r3, [sp, #4]
 8009d70:	9304      	str	r3, [sp, #16]
 8009d72:	461a      	mov	r2, r3
 8009d74:	920a      	str	r2, [sp, #40]	; 0x28
 8009d76:	e00b      	b.n	8009d90 <_dtoa_r+0x290>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e7f3      	b.n	8009d64 <_dtoa_r+0x264>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d82:	445b      	add	r3, fp
 8009d84:	9301      	str	r3, [sp, #4]
 8009d86:	3301      	adds	r3, #1
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	9304      	str	r3, [sp, #16]
 8009d8c:	bfb8      	it	lt
 8009d8e:	2301      	movlt	r3, #1
 8009d90:	69e0      	ldr	r0, [r4, #28]
 8009d92:	2100      	movs	r1, #0
 8009d94:	2204      	movs	r2, #4
 8009d96:	f102 0614 	add.w	r6, r2, #20
 8009d9a:	429e      	cmp	r6, r3
 8009d9c:	d93d      	bls.n	8009e1a <_dtoa_r+0x31a>
 8009d9e:	6041      	str	r1, [r0, #4]
 8009da0:	4620      	mov	r0, r4
 8009da2:	f000 fceb 	bl	800a77c <_Balloc>
 8009da6:	9000      	str	r0, [sp, #0]
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d139      	bne.n	8009e20 <_dtoa_r+0x320>
 8009dac:	4b16      	ldr	r3, [pc, #88]	; (8009e08 <_dtoa_r+0x308>)
 8009dae:	4602      	mov	r2, r0
 8009db0:	f240 11af 	movw	r1, #431	; 0x1af
 8009db4:	e6bd      	b.n	8009b32 <_dtoa_r+0x32>
 8009db6:	2301      	movs	r3, #1
 8009db8:	e7e1      	b.n	8009d7e <_dtoa_r+0x27e>
 8009dba:	2501      	movs	r5, #1
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	9307      	str	r3, [sp, #28]
 8009dc0:	9509      	str	r5, [sp, #36]	; 0x24
 8009dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8009dc6:	9301      	str	r3, [sp, #4]
 8009dc8:	9304      	str	r3, [sp, #16]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	2312      	movs	r3, #18
 8009dce:	e7d1      	b.n	8009d74 <_dtoa_r+0x274>
 8009dd0:	636f4361 	.word	0x636f4361
 8009dd4:	3fd287a7 	.word	0x3fd287a7
 8009dd8:	8b60c8b3 	.word	0x8b60c8b3
 8009ddc:	3fc68a28 	.word	0x3fc68a28
 8009de0:	509f79fb 	.word	0x509f79fb
 8009de4:	3fd34413 	.word	0x3fd34413
 8009de8:	0800e629 	.word	0x0800e629
 8009dec:	0800e640 	.word	0x0800e640
 8009df0:	7ff00000 	.word	0x7ff00000
 8009df4:	0800e625 	.word	0x0800e625
 8009df8:	0800e61c 	.word	0x0800e61c
 8009dfc:	0800e5f9 	.word	0x0800e5f9
 8009e00:	3ff80000 	.word	0x3ff80000
 8009e04:	0800e730 	.word	0x0800e730
 8009e08:	0800e698 	.word	0x0800e698
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e10:	e7d7      	b.n	8009dc2 <_dtoa_r+0x2c2>
 8009e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e14:	9301      	str	r3, [sp, #4]
 8009e16:	9304      	str	r3, [sp, #16]
 8009e18:	e7ba      	b.n	8009d90 <_dtoa_r+0x290>
 8009e1a:	3101      	adds	r1, #1
 8009e1c:	0052      	lsls	r2, r2, #1
 8009e1e:	e7ba      	b.n	8009d96 <_dtoa_r+0x296>
 8009e20:	69e3      	ldr	r3, [r4, #28]
 8009e22:	9a00      	ldr	r2, [sp, #0]
 8009e24:	601a      	str	r2, [r3, #0]
 8009e26:	9b04      	ldr	r3, [sp, #16]
 8009e28:	2b0e      	cmp	r3, #14
 8009e2a:	f200 80a8 	bhi.w	8009f7e <_dtoa_r+0x47e>
 8009e2e:	2d00      	cmp	r5, #0
 8009e30:	f000 80a5 	beq.w	8009f7e <_dtoa_r+0x47e>
 8009e34:	f1bb 0f00 	cmp.w	fp, #0
 8009e38:	dd38      	ble.n	8009eac <_dtoa_r+0x3ac>
 8009e3a:	4bc0      	ldr	r3, [pc, #768]	; (800a13c <_dtoa_r+0x63c>)
 8009e3c:	f00b 020f 	and.w	r2, fp, #15
 8009e40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009e48:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009e4c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009e50:	d019      	beq.n	8009e86 <_dtoa_r+0x386>
 8009e52:	4bbb      	ldr	r3, [pc, #748]	; (800a140 <_dtoa_r+0x640>)
 8009e54:	ec51 0b18 	vmov	r0, r1, d8
 8009e58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e5c:	f7f6 fcf6 	bl	800084c <__aeabi_ddiv>
 8009e60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e64:	f008 080f 	and.w	r8, r8, #15
 8009e68:	2503      	movs	r5, #3
 8009e6a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a140 <_dtoa_r+0x640>
 8009e6e:	f1b8 0f00 	cmp.w	r8, #0
 8009e72:	d10a      	bne.n	8009e8a <_dtoa_r+0x38a>
 8009e74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e78:	4632      	mov	r2, r6
 8009e7a:	463b      	mov	r3, r7
 8009e7c:	f7f6 fce6 	bl	800084c <__aeabi_ddiv>
 8009e80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e84:	e02b      	b.n	8009ede <_dtoa_r+0x3de>
 8009e86:	2502      	movs	r5, #2
 8009e88:	e7ef      	b.n	8009e6a <_dtoa_r+0x36a>
 8009e8a:	f018 0f01 	tst.w	r8, #1
 8009e8e:	d008      	beq.n	8009ea2 <_dtoa_r+0x3a2>
 8009e90:	4630      	mov	r0, r6
 8009e92:	4639      	mov	r1, r7
 8009e94:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009e98:	f7f6 fbae 	bl	80005f8 <__aeabi_dmul>
 8009e9c:	3501      	adds	r5, #1
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	460f      	mov	r7, r1
 8009ea2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009ea6:	f109 0908 	add.w	r9, r9, #8
 8009eaa:	e7e0      	b.n	8009e6e <_dtoa_r+0x36e>
 8009eac:	f000 809f 	beq.w	8009fee <_dtoa_r+0x4ee>
 8009eb0:	f1cb 0600 	rsb	r6, fp, #0
 8009eb4:	4ba1      	ldr	r3, [pc, #644]	; (800a13c <_dtoa_r+0x63c>)
 8009eb6:	4fa2      	ldr	r7, [pc, #648]	; (800a140 <_dtoa_r+0x640>)
 8009eb8:	f006 020f 	and.w	r2, r6, #15
 8009ebc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	ec51 0b18 	vmov	r0, r1, d8
 8009ec8:	f7f6 fb96 	bl	80005f8 <__aeabi_dmul>
 8009ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ed0:	1136      	asrs	r6, r6, #4
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	2502      	movs	r5, #2
 8009ed6:	2e00      	cmp	r6, #0
 8009ed8:	d17e      	bne.n	8009fd8 <_dtoa_r+0x4d8>
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1d0      	bne.n	8009e80 <_dtoa_r+0x380>
 8009ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ee0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f000 8084 	beq.w	8009ff2 <_dtoa_r+0x4f2>
 8009eea:	4b96      	ldr	r3, [pc, #600]	; (800a144 <_dtoa_r+0x644>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	4640      	mov	r0, r8
 8009ef0:	4649      	mov	r1, r9
 8009ef2:	f7f6 fdf3 	bl	8000adc <__aeabi_dcmplt>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	d07b      	beq.n	8009ff2 <_dtoa_r+0x4f2>
 8009efa:	9b04      	ldr	r3, [sp, #16]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d078      	beq.n	8009ff2 <_dtoa_r+0x4f2>
 8009f00:	9b01      	ldr	r3, [sp, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	dd39      	ble.n	8009f7a <_dtoa_r+0x47a>
 8009f06:	4b90      	ldr	r3, [pc, #576]	; (800a148 <_dtoa_r+0x648>)
 8009f08:	2200      	movs	r2, #0
 8009f0a:	4640      	mov	r0, r8
 8009f0c:	4649      	mov	r1, r9
 8009f0e:	f7f6 fb73 	bl	80005f8 <__aeabi_dmul>
 8009f12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f16:	9e01      	ldr	r6, [sp, #4]
 8009f18:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009f1c:	3501      	adds	r5, #1
 8009f1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009f22:	4628      	mov	r0, r5
 8009f24:	f7f6 fafe 	bl	8000524 <__aeabi_i2d>
 8009f28:	4642      	mov	r2, r8
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	f7f6 fb64 	bl	80005f8 <__aeabi_dmul>
 8009f30:	4b86      	ldr	r3, [pc, #536]	; (800a14c <_dtoa_r+0x64c>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	f7f6 f9aa 	bl	800028c <__adddf3>
 8009f38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009f3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f40:	9303      	str	r3, [sp, #12]
 8009f42:	2e00      	cmp	r6, #0
 8009f44:	d158      	bne.n	8009ff8 <_dtoa_r+0x4f8>
 8009f46:	4b82      	ldr	r3, [pc, #520]	; (800a150 <_dtoa_r+0x650>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	f7f6 f99b 	bl	8000288 <__aeabi_dsub>
 8009f52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f56:	4680      	mov	r8, r0
 8009f58:	4689      	mov	r9, r1
 8009f5a:	f7f6 fddd 	bl	8000b18 <__aeabi_dcmpgt>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	f040 8296 	bne.w	800a490 <_dtoa_r+0x990>
 8009f64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009f68:	4640      	mov	r0, r8
 8009f6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f6e:	4649      	mov	r1, r9
 8009f70:	f7f6 fdb4 	bl	8000adc <__aeabi_dcmplt>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	f040 8289 	bne.w	800a48c <_dtoa_r+0x98c>
 8009f7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009f7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f2c0 814e 	blt.w	800a222 <_dtoa_r+0x722>
 8009f86:	f1bb 0f0e 	cmp.w	fp, #14
 8009f8a:	f300 814a 	bgt.w	800a222 <_dtoa_r+0x722>
 8009f8e:	4b6b      	ldr	r3, [pc, #428]	; (800a13c <_dtoa_r+0x63c>)
 8009f90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009f94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f280 80dc 	bge.w	800a158 <_dtoa_r+0x658>
 8009fa0:	9b04      	ldr	r3, [sp, #16]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f300 80d8 	bgt.w	800a158 <_dtoa_r+0x658>
 8009fa8:	f040 826f 	bne.w	800a48a <_dtoa_r+0x98a>
 8009fac:	4b68      	ldr	r3, [pc, #416]	; (800a150 <_dtoa_r+0x650>)
 8009fae:	2200      	movs	r2, #0
 8009fb0:	4640      	mov	r0, r8
 8009fb2:	4649      	mov	r1, r9
 8009fb4:	f7f6 fb20 	bl	80005f8 <__aeabi_dmul>
 8009fb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fbc:	f7f6 fda2 	bl	8000b04 <__aeabi_dcmpge>
 8009fc0:	9e04      	ldr	r6, [sp, #16]
 8009fc2:	4637      	mov	r7, r6
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	f040 8245 	bne.w	800a454 <_dtoa_r+0x954>
 8009fca:	9d00      	ldr	r5, [sp, #0]
 8009fcc:	2331      	movs	r3, #49	; 0x31
 8009fce:	f805 3b01 	strb.w	r3, [r5], #1
 8009fd2:	f10b 0b01 	add.w	fp, fp, #1
 8009fd6:	e241      	b.n	800a45c <_dtoa_r+0x95c>
 8009fd8:	07f2      	lsls	r2, r6, #31
 8009fda:	d505      	bpl.n	8009fe8 <_dtoa_r+0x4e8>
 8009fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fe0:	f7f6 fb0a 	bl	80005f8 <__aeabi_dmul>
 8009fe4:	3501      	adds	r5, #1
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	1076      	asrs	r6, r6, #1
 8009fea:	3708      	adds	r7, #8
 8009fec:	e773      	b.n	8009ed6 <_dtoa_r+0x3d6>
 8009fee:	2502      	movs	r5, #2
 8009ff0:	e775      	b.n	8009ede <_dtoa_r+0x3de>
 8009ff2:	9e04      	ldr	r6, [sp, #16]
 8009ff4:	465f      	mov	r7, fp
 8009ff6:	e792      	b.n	8009f1e <_dtoa_r+0x41e>
 8009ff8:	9900      	ldr	r1, [sp, #0]
 8009ffa:	4b50      	ldr	r3, [pc, #320]	; (800a13c <_dtoa_r+0x63c>)
 8009ffc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a000:	4431      	add	r1, r6
 800a002:	9102      	str	r1, [sp, #8]
 800a004:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a006:	eeb0 9a47 	vmov.f32	s18, s14
 800a00a:	eef0 9a67 	vmov.f32	s19, s15
 800a00e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a012:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a016:	2900      	cmp	r1, #0
 800a018:	d044      	beq.n	800a0a4 <_dtoa_r+0x5a4>
 800a01a:	494e      	ldr	r1, [pc, #312]	; (800a154 <_dtoa_r+0x654>)
 800a01c:	2000      	movs	r0, #0
 800a01e:	f7f6 fc15 	bl	800084c <__aeabi_ddiv>
 800a022:	ec53 2b19 	vmov	r2, r3, d9
 800a026:	f7f6 f92f 	bl	8000288 <__aeabi_dsub>
 800a02a:	9d00      	ldr	r5, [sp, #0]
 800a02c:	ec41 0b19 	vmov	d9, r0, r1
 800a030:	4649      	mov	r1, r9
 800a032:	4640      	mov	r0, r8
 800a034:	f7f6 fd90 	bl	8000b58 <__aeabi_d2iz>
 800a038:	4606      	mov	r6, r0
 800a03a:	f7f6 fa73 	bl	8000524 <__aeabi_i2d>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	4640      	mov	r0, r8
 800a044:	4649      	mov	r1, r9
 800a046:	f7f6 f91f 	bl	8000288 <__aeabi_dsub>
 800a04a:	3630      	adds	r6, #48	; 0x30
 800a04c:	f805 6b01 	strb.w	r6, [r5], #1
 800a050:	ec53 2b19 	vmov	r2, r3, d9
 800a054:	4680      	mov	r8, r0
 800a056:	4689      	mov	r9, r1
 800a058:	f7f6 fd40 	bl	8000adc <__aeabi_dcmplt>
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d164      	bne.n	800a12a <_dtoa_r+0x62a>
 800a060:	4642      	mov	r2, r8
 800a062:	464b      	mov	r3, r9
 800a064:	4937      	ldr	r1, [pc, #220]	; (800a144 <_dtoa_r+0x644>)
 800a066:	2000      	movs	r0, #0
 800a068:	f7f6 f90e 	bl	8000288 <__aeabi_dsub>
 800a06c:	ec53 2b19 	vmov	r2, r3, d9
 800a070:	f7f6 fd34 	bl	8000adc <__aeabi_dcmplt>
 800a074:	2800      	cmp	r0, #0
 800a076:	f040 80b6 	bne.w	800a1e6 <_dtoa_r+0x6e6>
 800a07a:	9b02      	ldr	r3, [sp, #8]
 800a07c:	429d      	cmp	r5, r3
 800a07e:	f43f af7c 	beq.w	8009f7a <_dtoa_r+0x47a>
 800a082:	4b31      	ldr	r3, [pc, #196]	; (800a148 <_dtoa_r+0x648>)
 800a084:	ec51 0b19 	vmov	r0, r1, d9
 800a088:	2200      	movs	r2, #0
 800a08a:	f7f6 fab5 	bl	80005f8 <__aeabi_dmul>
 800a08e:	4b2e      	ldr	r3, [pc, #184]	; (800a148 <_dtoa_r+0x648>)
 800a090:	ec41 0b19 	vmov	d9, r0, r1
 800a094:	2200      	movs	r2, #0
 800a096:	4640      	mov	r0, r8
 800a098:	4649      	mov	r1, r9
 800a09a:	f7f6 faad 	bl	80005f8 <__aeabi_dmul>
 800a09e:	4680      	mov	r8, r0
 800a0a0:	4689      	mov	r9, r1
 800a0a2:	e7c5      	b.n	800a030 <_dtoa_r+0x530>
 800a0a4:	ec51 0b17 	vmov	r0, r1, d7
 800a0a8:	f7f6 faa6 	bl	80005f8 <__aeabi_dmul>
 800a0ac:	9b02      	ldr	r3, [sp, #8]
 800a0ae:	9d00      	ldr	r5, [sp, #0]
 800a0b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0b2:	ec41 0b19 	vmov	d9, r0, r1
 800a0b6:	4649      	mov	r1, r9
 800a0b8:	4640      	mov	r0, r8
 800a0ba:	f7f6 fd4d 	bl	8000b58 <__aeabi_d2iz>
 800a0be:	4606      	mov	r6, r0
 800a0c0:	f7f6 fa30 	bl	8000524 <__aeabi_i2d>
 800a0c4:	3630      	adds	r6, #48	; 0x30
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	4649      	mov	r1, r9
 800a0ce:	f7f6 f8db 	bl	8000288 <__aeabi_dsub>
 800a0d2:	f805 6b01 	strb.w	r6, [r5], #1
 800a0d6:	9b02      	ldr	r3, [sp, #8]
 800a0d8:	429d      	cmp	r5, r3
 800a0da:	4680      	mov	r8, r0
 800a0dc:	4689      	mov	r9, r1
 800a0de:	f04f 0200 	mov.w	r2, #0
 800a0e2:	d124      	bne.n	800a12e <_dtoa_r+0x62e>
 800a0e4:	4b1b      	ldr	r3, [pc, #108]	; (800a154 <_dtoa_r+0x654>)
 800a0e6:	ec51 0b19 	vmov	r0, r1, d9
 800a0ea:	f7f6 f8cf 	bl	800028c <__adddf3>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	4640      	mov	r0, r8
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	f7f6 fd0f 	bl	8000b18 <__aeabi_dcmpgt>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d173      	bne.n	800a1e6 <_dtoa_r+0x6e6>
 800a0fe:	ec53 2b19 	vmov	r2, r3, d9
 800a102:	4914      	ldr	r1, [pc, #80]	; (800a154 <_dtoa_r+0x654>)
 800a104:	2000      	movs	r0, #0
 800a106:	f7f6 f8bf 	bl	8000288 <__aeabi_dsub>
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	4640      	mov	r0, r8
 800a110:	4649      	mov	r1, r9
 800a112:	f7f6 fce3 	bl	8000adc <__aeabi_dcmplt>
 800a116:	2800      	cmp	r0, #0
 800a118:	f43f af2f 	beq.w	8009f7a <_dtoa_r+0x47a>
 800a11c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a11e:	1e6b      	subs	r3, r5, #1
 800a120:	930f      	str	r3, [sp, #60]	; 0x3c
 800a122:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a126:	2b30      	cmp	r3, #48	; 0x30
 800a128:	d0f8      	beq.n	800a11c <_dtoa_r+0x61c>
 800a12a:	46bb      	mov	fp, r7
 800a12c:	e04a      	b.n	800a1c4 <_dtoa_r+0x6c4>
 800a12e:	4b06      	ldr	r3, [pc, #24]	; (800a148 <_dtoa_r+0x648>)
 800a130:	f7f6 fa62 	bl	80005f8 <__aeabi_dmul>
 800a134:	4680      	mov	r8, r0
 800a136:	4689      	mov	r9, r1
 800a138:	e7bd      	b.n	800a0b6 <_dtoa_r+0x5b6>
 800a13a:	bf00      	nop
 800a13c:	0800e730 	.word	0x0800e730
 800a140:	0800e708 	.word	0x0800e708
 800a144:	3ff00000 	.word	0x3ff00000
 800a148:	40240000 	.word	0x40240000
 800a14c:	401c0000 	.word	0x401c0000
 800a150:	40140000 	.word	0x40140000
 800a154:	3fe00000 	.word	0x3fe00000
 800a158:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a15c:	9d00      	ldr	r5, [sp, #0]
 800a15e:	4642      	mov	r2, r8
 800a160:	464b      	mov	r3, r9
 800a162:	4630      	mov	r0, r6
 800a164:	4639      	mov	r1, r7
 800a166:	f7f6 fb71 	bl	800084c <__aeabi_ddiv>
 800a16a:	f7f6 fcf5 	bl	8000b58 <__aeabi_d2iz>
 800a16e:	9001      	str	r0, [sp, #4]
 800a170:	f7f6 f9d8 	bl	8000524 <__aeabi_i2d>
 800a174:	4642      	mov	r2, r8
 800a176:	464b      	mov	r3, r9
 800a178:	f7f6 fa3e 	bl	80005f8 <__aeabi_dmul>
 800a17c:	4602      	mov	r2, r0
 800a17e:	460b      	mov	r3, r1
 800a180:	4630      	mov	r0, r6
 800a182:	4639      	mov	r1, r7
 800a184:	f7f6 f880 	bl	8000288 <__aeabi_dsub>
 800a188:	9e01      	ldr	r6, [sp, #4]
 800a18a:	9f04      	ldr	r7, [sp, #16]
 800a18c:	3630      	adds	r6, #48	; 0x30
 800a18e:	f805 6b01 	strb.w	r6, [r5], #1
 800a192:	9e00      	ldr	r6, [sp, #0]
 800a194:	1bae      	subs	r6, r5, r6
 800a196:	42b7      	cmp	r7, r6
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	d134      	bne.n	800a208 <_dtoa_r+0x708>
 800a19e:	f7f6 f875 	bl	800028c <__adddf3>
 800a1a2:	4642      	mov	r2, r8
 800a1a4:	464b      	mov	r3, r9
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	460f      	mov	r7, r1
 800a1aa:	f7f6 fcb5 	bl	8000b18 <__aeabi_dcmpgt>
 800a1ae:	b9c8      	cbnz	r0, 800a1e4 <_dtoa_r+0x6e4>
 800a1b0:	4642      	mov	r2, r8
 800a1b2:	464b      	mov	r3, r9
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	4639      	mov	r1, r7
 800a1b8:	f7f6 fc86 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1bc:	b110      	cbz	r0, 800a1c4 <_dtoa_r+0x6c4>
 800a1be:	9b01      	ldr	r3, [sp, #4]
 800a1c0:	07db      	lsls	r3, r3, #31
 800a1c2:	d40f      	bmi.n	800a1e4 <_dtoa_r+0x6e4>
 800a1c4:	4651      	mov	r1, sl
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f000 fb18 	bl	800a7fc <_Bfree>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1d0:	702b      	strb	r3, [r5, #0]
 800a1d2:	f10b 0301 	add.w	r3, fp, #1
 800a1d6:	6013      	str	r3, [r2, #0]
 800a1d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f43f ace2 	beq.w	8009ba4 <_dtoa_r+0xa4>
 800a1e0:	601d      	str	r5, [r3, #0]
 800a1e2:	e4df      	b.n	8009ba4 <_dtoa_r+0xa4>
 800a1e4:	465f      	mov	r7, fp
 800a1e6:	462b      	mov	r3, r5
 800a1e8:	461d      	mov	r5, r3
 800a1ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1ee:	2a39      	cmp	r2, #57	; 0x39
 800a1f0:	d106      	bne.n	800a200 <_dtoa_r+0x700>
 800a1f2:	9a00      	ldr	r2, [sp, #0]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d1f7      	bne.n	800a1e8 <_dtoa_r+0x6e8>
 800a1f8:	9900      	ldr	r1, [sp, #0]
 800a1fa:	2230      	movs	r2, #48	; 0x30
 800a1fc:	3701      	adds	r7, #1
 800a1fe:	700a      	strb	r2, [r1, #0]
 800a200:	781a      	ldrb	r2, [r3, #0]
 800a202:	3201      	adds	r2, #1
 800a204:	701a      	strb	r2, [r3, #0]
 800a206:	e790      	b.n	800a12a <_dtoa_r+0x62a>
 800a208:	4ba3      	ldr	r3, [pc, #652]	; (800a498 <_dtoa_r+0x998>)
 800a20a:	2200      	movs	r2, #0
 800a20c:	f7f6 f9f4 	bl	80005f8 <__aeabi_dmul>
 800a210:	2200      	movs	r2, #0
 800a212:	2300      	movs	r3, #0
 800a214:	4606      	mov	r6, r0
 800a216:	460f      	mov	r7, r1
 800a218:	f7f6 fc56 	bl	8000ac8 <__aeabi_dcmpeq>
 800a21c:	2800      	cmp	r0, #0
 800a21e:	d09e      	beq.n	800a15e <_dtoa_r+0x65e>
 800a220:	e7d0      	b.n	800a1c4 <_dtoa_r+0x6c4>
 800a222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a224:	2a00      	cmp	r2, #0
 800a226:	f000 80ca 	beq.w	800a3be <_dtoa_r+0x8be>
 800a22a:	9a07      	ldr	r2, [sp, #28]
 800a22c:	2a01      	cmp	r2, #1
 800a22e:	f300 80ad 	bgt.w	800a38c <_dtoa_r+0x88c>
 800a232:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a234:	2a00      	cmp	r2, #0
 800a236:	f000 80a5 	beq.w	800a384 <_dtoa_r+0x884>
 800a23a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a23e:	9e08      	ldr	r6, [sp, #32]
 800a240:	9d05      	ldr	r5, [sp, #20]
 800a242:	9a05      	ldr	r2, [sp, #20]
 800a244:	441a      	add	r2, r3
 800a246:	9205      	str	r2, [sp, #20]
 800a248:	9a06      	ldr	r2, [sp, #24]
 800a24a:	2101      	movs	r1, #1
 800a24c:	441a      	add	r2, r3
 800a24e:	4620      	mov	r0, r4
 800a250:	9206      	str	r2, [sp, #24]
 800a252:	f000 fb89 	bl	800a968 <__i2b>
 800a256:	4607      	mov	r7, r0
 800a258:	b165      	cbz	r5, 800a274 <_dtoa_r+0x774>
 800a25a:	9b06      	ldr	r3, [sp, #24]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	dd09      	ble.n	800a274 <_dtoa_r+0x774>
 800a260:	42ab      	cmp	r3, r5
 800a262:	9a05      	ldr	r2, [sp, #20]
 800a264:	bfa8      	it	ge
 800a266:	462b      	movge	r3, r5
 800a268:	1ad2      	subs	r2, r2, r3
 800a26a:	9205      	str	r2, [sp, #20]
 800a26c:	9a06      	ldr	r2, [sp, #24]
 800a26e:	1aed      	subs	r5, r5, r3
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	9306      	str	r3, [sp, #24]
 800a274:	9b08      	ldr	r3, [sp, #32]
 800a276:	b1f3      	cbz	r3, 800a2b6 <_dtoa_r+0x7b6>
 800a278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f000 80a3 	beq.w	800a3c6 <_dtoa_r+0x8c6>
 800a280:	2e00      	cmp	r6, #0
 800a282:	dd10      	ble.n	800a2a6 <_dtoa_r+0x7a6>
 800a284:	4639      	mov	r1, r7
 800a286:	4632      	mov	r2, r6
 800a288:	4620      	mov	r0, r4
 800a28a:	f000 fc2d 	bl	800aae8 <__pow5mult>
 800a28e:	4652      	mov	r2, sl
 800a290:	4601      	mov	r1, r0
 800a292:	4607      	mov	r7, r0
 800a294:	4620      	mov	r0, r4
 800a296:	f000 fb7d 	bl	800a994 <__multiply>
 800a29a:	4651      	mov	r1, sl
 800a29c:	4680      	mov	r8, r0
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f000 faac 	bl	800a7fc <_Bfree>
 800a2a4:	46c2      	mov	sl, r8
 800a2a6:	9b08      	ldr	r3, [sp, #32]
 800a2a8:	1b9a      	subs	r2, r3, r6
 800a2aa:	d004      	beq.n	800a2b6 <_dtoa_r+0x7b6>
 800a2ac:	4651      	mov	r1, sl
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f000 fc1a 	bl	800aae8 <__pow5mult>
 800a2b4:	4682      	mov	sl, r0
 800a2b6:	2101      	movs	r1, #1
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	f000 fb55 	bl	800a968 <__i2b>
 800a2be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	f340 8081 	ble.w	800a3ca <_dtoa_r+0x8ca>
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	4601      	mov	r1, r0
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f000 fc0b 	bl	800aae8 <__pow5mult>
 800a2d2:	9b07      	ldr	r3, [sp, #28]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	dd7a      	ble.n	800a3d0 <_dtoa_r+0x8d0>
 800a2da:	f04f 0800 	mov.w	r8, #0
 800a2de:	6933      	ldr	r3, [r6, #16]
 800a2e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a2e4:	6918      	ldr	r0, [r3, #16]
 800a2e6:	f000 faf1 	bl	800a8cc <__hi0bits>
 800a2ea:	f1c0 0020 	rsb	r0, r0, #32
 800a2ee:	9b06      	ldr	r3, [sp, #24]
 800a2f0:	4418      	add	r0, r3
 800a2f2:	f010 001f 	ands.w	r0, r0, #31
 800a2f6:	f000 8094 	beq.w	800a422 <_dtoa_r+0x922>
 800a2fa:	f1c0 0320 	rsb	r3, r0, #32
 800a2fe:	2b04      	cmp	r3, #4
 800a300:	f340 8085 	ble.w	800a40e <_dtoa_r+0x90e>
 800a304:	9b05      	ldr	r3, [sp, #20]
 800a306:	f1c0 001c 	rsb	r0, r0, #28
 800a30a:	4403      	add	r3, r0
 800a30c:	9305      	str	r3, [sp, #20]
 800a30e:	9b06      	ldr	r3, [sp, #24]
 800a310:	4403      	add	r3, r0
 800a312:	4405      	add	r5, r0
 800a314:	9306      	str	r3, [sp, #24]
 800a316:	9b05      	ldr	r3, [sp, #20]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	dd05      	ble.n	800a328 <_dtoa_r+0x828>
 800a31c:	4651      	mov	r1, sl
 800a31e:	461a      	mov	r2, r3
 800a320:	4620      	mov	r0, r4
 800a322:	f000 fc3b 	bl	800ab9c <__lshift>
 800a326:	4682      	mov	sl, r0
 800a328:	9b06      	ldr	r3, [sp, #24]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	dd05      	ble.n	800a33a <_dtoa_r+0x83a>
 800a32e:	4631      	mov	r1, r6
 800a330:	461a      	mov	r2, r3
 800a332:	4620      	mov	r0, r4
 800a334:	f000 fc32 	bl	800ab9c <__lshift>
 800a338:	4606      	mov	r6, r0
 800a33a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d072      	beq.n	800a426 <_dtoa_r+0x926>
 800a340:	4631      	mov	r1, r6
 800a342:	4650      	mov	r0, sl
 800a344:	f000 fc96 	bl	800ac74 <__mcmp>
 800a348:	2800      	cmp	r0, #0
 800a34a:	da6c      	bge.n	800a426 <_dtoa_r+0x926>
 800a34c:	2300      	movs	r3, #0
 800a34e:	4651      	mov	r1, sl
 800a350:	220a      	movs	r2, #10
 800a352:	4620      	mov	r0, r4
 800a354:	f000 fa74 	bl	800a840 <__multadd>
 800a358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a35a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a35e:	4682      	mov	sl, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	f000 81b0 	beq.w	800a6c6 <_dtoa_r+0xbc6>
 800a366:	2300      	movs	r3, #0
 800a368:	4639      	mov	r1, r7
 800a36a:	220a      	movs	r2, #10
 800a36c:	4620      	mov	r0, r4
 800a36e:	f000 fa67 	bl	800a840 <__multadd>
 800a372:	9b01      	ldr	r3, [sp, #4]
 800a374:	2b00      	cmp	r3, #0
 800a376:	4607      	mov	r7, r0
 800a378:	f300 8096 	bgt.w	800a4a8 <_dtoa_r+0x9a8>
 800a37c:	9b07      	ldr	r3, [sp, #28]
 800a37e:	2b02      	cmp	r3, #2
 800a380:	dc59      	bgt.n	800a436 <_dtoa_r+0x936>
 800a382:	e091      	b.n	800a4a8 <_dtoa_r+0x9a8>
 800a384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a386:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a38a:	e758      	b.n	800a23e <_dtoa_r+0x73e>
 800a38c:	9b04      	ldr	r3, [sp, #16]
 800a38e:	1e5e      	subs	r6, r3, #1
 800a390:	9b08      	ldr	r3, [sp, #32]
 800a392:	42b3      	cmp	r3, r6
 800a394:	bfbf      	itttt	lt
 800a396:	9b08      	ldrlt	r3, [sp, #32]
 800a398:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a39a:	9608      	strlt	r6, [sp, #32]
 800a39c:	1af3      	sublt	r3, r6, r3
 800a39e:	bfb4      	ite	lt
 800a3a0:	18d2      	addlt	r2, r2, r3
 800a3a2:	1b9e      	subge	r6, r3, r6
 800a3a4:	9b04      	ldr	r3, [sp, #16]
 800a3a6:	bfbc      	itt	lt
 800a3a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a3aa:	2600      	movlt	r6, #0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	bfb7      	itett	lt
 800a3b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a3b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a3b8:	1a9d      	sublt	r5, r3, r2
 800a3ba:	2300      	movlt	r3, #0
 800a3bc:	e741      	b.n	800a242 <_dtoa_r+0x742>
 800a3be:	9e08      	ldr	r6, [sp, #32]
 800a3c0:	9d05      	ldr	r5, [sp, #20]
 800a3c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a3c4:	e748      	b.n	800a258 <_dtoa_r+0x758>
 800a3c6:	9a08      	ldr	r2, [sp, #32]
 800a3c8:	e770      	b.n	800a2ac <_dtoa_r+0x7ac>
 800a3ca:	9b07      	ldr	r3, [sp, #28]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	dc19      	bgt.n	800a404 <_dtoa_r+0x904>
 800a3d0:	9b02      	ldr	r3, [sp, #8]
 800a3d2:	b9bb      	cbnz	r3, 800a404 <_dtoa_r+0x904>
 800a3d4:	9b03      	ldr	r3, [sp, #12]
 800a3d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3da:	b99b      	cbnz	r3, 800a404 <_dtoa_r+0x904>
 800a3dc:	9b03      	ldr	r3, [sp, #12]
 800a3de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3e2:	0d1b      	lsrs	r3, r3, #20
 800a3e4:	051b      	lsls	r3, r3, #20
 800a3e6:	b183      	cbz	r3, 800a40a <_dtoa_r+0x90a>
 800a3e8:	9b05      	ldr	r3, [sp, #20]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	9305      	str	r3, [sp, #20]
 800a3ee:	9b06      	ldr	r3, [sp, #24]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	9306      	str	r3, [sp, #24]
 800a3f4:	f04f 0801 	mov.w	r8, #1
 800a3f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f47f af6f 	bne.w	800a2de <_dtoa_r+0x7de>
 800a400:	2001      	movs	r0, #1
 800a402:	e774      	b.n	800a2ee <_dtoa_r+0x7ee>
 800a404:	f04f 0800 	mov.w	r8, #0
 800a408:	e7f6      	b.n	800a3f8 <_dtoa_r+0x8f8>
 800a40a:	4698      	mov	r8, r3
 800a40c:	e7f4      	b.n	800a3f8 <_dtoa_r+0x8f8>
 800a40e:	d082      	beq.n	800a316 <_dtoa_r+0x816>
 800a410:	9a05      	ldr	r2, [sp, #20]
 800a412:	331c      	adds	r3, #28
 800a414:	441a      	add	r2, r3
 800a416:	9205      	str	r2, [sp, #20]
 800a418:	9a06      	ldr	r2, [sp, #24]
 800a41a:	441a      	add	r2, r3
 800a41c:	441d      	add	r5, r3
 800a41e:	9206      	str	r2, [sp, #24]
 800a420:	e779      	b.n	800a316 <_dtoa_r+0x816>
 800a422:	4603      	mov	r3, r0
 800a424:	e7f4      	b.n	800a410 <_dtoa_r+0x910>
 800a426:	9b04      	ldr	r3, [sp, #16]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	dc37      	bgt.n	800a49c <_dtoa_r+0x99c>
 800a42c:	9b07      	ldr	r3, [sp, #28]
 800a42e:	2b02      	cmp	r3, #2
 800a430:	dd34      	ble.n	800a49c <_dtoa_r+0x99c>
 800a432:	9b04      	ldr	r3, [sp, #16]
 800a434:	9301      	str	r3, [sp, #4]
 800a436:	9b01      	ldr	r3, [sp, #4]
 800a438:	b963      	cbnz	r3, 800a454 <_dtoa_r+0x954>
 800a43a:	4631      	mov	r1, r6
 800a43c:	2205      	movs	r2, #5
 800a43e:	4620      	mov	r0, r4
 800a440:	f000 f9fe 	bl	800a840 <__multadd>
 800a444:	4601      	mov	r1, r0
 800a446:	4606      	mov	r6, r0
 800a448:	4650      	mov	r0, sl
 800a44a:	f000 fc13 	bl	800ac74 <__mcmp>
 800a44e:	2800      	cmp	r0, #0
 800a450:	f73f adbb 	bgt.w	8009fca <_dtoa_r+0x4ca>
 800a454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a456:	9d00      	ldr	r5, [sp, #0]
 800a458:	ea6f 0b03 	mvn.w	fp, r3
 800a45c:	f04f 0800 	mov.w	r8, #0
 800a460:	4631      	mov	r1, r6
 800a462:	4620      	mov	r0, r4
 800a464:	f000 f9ca 	bl	800a7fc <_Bfree>
 800a468:	2f00      	cmp	r7, #0
 800a46a:	f43f aeab 	beq.w	800a1c4 <_dtoa_r+0x6c4>
 800a46e:	f1b8 0f00 	cmp.w	r8, #0
 800a472:	d005      	beq.n	800a480 <_dtoa_r+0x980>
 800a474:	45b8      	cmp	r8, r7
 800a476:	d003      	beq.n	800a480 <_dtoa_r+0x980>
 800a478:	4641      	mov	r1, r8
 800a47a:	4620      	mov	r0, r4
 800a47c:	f000 f9be 	bl	800a7fc <_Bfree>
 800a480:	4639      	mov	r1, r7
 800a482:	4620      	mov	r0, r4
 800a484:	f000 f9ba 	bl	800a7fc <_Bfree>
 800a488:	e69c      	b.n	800a1c4 <_dtoa_r+0x6c4>
 800a48a:	2600      	movs	r6, #0
 800a48c:	4637      	mov	r7, r6
 800a48e:	e7e1      	b.n	800a454 <_dtoa_r+0x954>
 800a490:	46bb      	mov	fp, r7
 800a492:	4637      	mov	r7, r6
 800a494:	e599      	b.n	8009fca <_dtoa_r+0x4ca>
 800a496:	bf00      	nop
 800a498:	40240000 	.word	0x40240000
 800a49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f000 80c8 	beq.w	800a634 <_dtoa_r+0xb34>
 800a4a4:	9b04      	ldr	r3, [sp, #16]
 800a4a6:	9301      	str	r3, [sp, #4]
 800a4a8:	2d00      	cmp	r5, #0
 800a4aa:	dd05      	ble.n	800a4b8 <_dtoa_r+0x9b8>
 800a4ac:	4639      	mov	r1, r7
 800a4ae:	462a      	mov	r2, r5
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f000 fb73 	bl	800ab9c <__lshift>
 800a4b6:	4607      	mov	r7, r0
 800a4b8:	f1b8 0f00 	cmp.w	r8, #0
 800a4bc:	d05b      	beq.n	800a576 <_dtoa_r+0xa76>
 800a4be:	6879      	ldr	r1, [r7, #4]
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f000 f95b 	bl	800a77c <_Balloc>
 800a4c6:	4605      	mov	r5, r0
 800a4c8:	b928      	cbnz	r0, 800a4d6 <_dtoa_r+0x9d6>
 800a4ca:	4b83      	ldr	r3, [pc, #524]	; (800a6d8 <_dtoa_r+0xbd8>)
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a4d2:	f7ff bb2e 	b.w	8009b32 <_dtoa_r+0x32>
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	3202      	adds	r2, #2
 800a4da:	0092      	lsls	r2, r2, #2
 800a4dc:	f107 010c 	add.w	r1, r7, #12
 800a4e0:	300c      	adds	r0, #12
 800a4e2:	f7ff fa77 	bl	80099d4 <memcpy>
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	4629      	mov	r1, r5
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f000 fb56 	bl	800ab9c <__lshift>
 800a4f0:	9b00      	ldr	r3, [sp, #0]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	9304      	str	r3, [sp, #16]
 800a4f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	9308      	str	r3, [sp, #32]
 800a4fe:	9b02      	ldr	r3, [sp, #8]
 800a500:	f003 0301 	and.w	r3, r3, #1
 800a504:	46b8      	mov	r8, r7
 800a506:	9306      	str	r3, [sp, #24]
 800a508:	4607      	mov	r7, r0
 800a50a:	9b04      	ldr	r3, [sp, #16]
 800a50c:	4631      	mov	r1, r6
 800a50e:	3b01      	subs	r3, #1
 800a510:	4650      	mov	r0, sl
 800a512:	9301      	str	r3, [sp, #4]
 800a514:	f7ff fa6c 	bl	80099f0 <quorem>
 800a518:	4641      	mov	r1, r8
 800a51a:	9002      	str	r0, [sp, #8]
 800a51c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a520:	4650      	mov	r0, sl
 800a522:	f000 fba7 	bl	800ac74 <__mcmp>
 800a526:	463a      	mov	r2, r7
 800a528:	9005      	str	r0, [sp, #20]
 800a52a:	4631      	mov	r1, r6
 800a52c:	4620      	mov	r0, r4
 800a52e:	f000 fbbd 	bl	800acac <__mdiff>
 800a532:	68c2      	ldr	r2, [r0, #12]
 800a534:	4605      	mov	r5, r0
 800a536:	bb02      	cbnz	r2, 800a57a <_dtoa_r+0xa7a>
 800a538:	4601      	mov	r1, r0
 800a53a:	4650      	mov	r0, sl
 800a53c:	f000 fb9a 	bl	800ac74 <__mcmp>
 800a540:	4602      	mov	r2, r0
 800a542:	4629      	mov	r1, r5
 800a544:	4620      	mov	r0, r4
 800a546:	9209      	str	r2, [sp, #36]	; 0x24
 800a548:	f000 f958 	bl	800a7fc <_Bfree>
 800a54c:	9b07      	ldr	r3, [sp, #28]
 800a54e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a550:	9d04      	ldr	r5, [sp, #16]
 800a552:	ea43 0102 	orr.w	r1, r3, r2
 800a556:	9b06      	ldr	r3, [sp, #24]
 800a558:	4319      	orrs	r1, r3
 800a55a:	d110      	bne.n	800a57e <_dtoa_r+0xa7e>
 800a55c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a560:	d029      	beq.n	800a5b6 <_dtoa_r+0xab6>
 800a562:	9b05      	ldr	r3, [sp, #20]
 800a564:	2b00      	cmp	r3, #0
 800a566:	dd02      	ble.n	800a56e <_dtoa_r+0xa6e>
 800a568:	9b02      	ldr	r3, [sp, #8]
 800a56a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a56e:	9b01      	ldr	r3, [sp, #4]
 800a570:	f883 9000 	strb.w	r9, [r3]
 800a574:	e774      	b.n	800a460 <_dtoa_r+0x960>
 800a576:	4638      	mov	r0, r7
 800a578:	e7ba      	b.n	800a4f0 <_dtoa_r+0x9f0>
 800a57a:	2201      	movs	r2, #1
 800a57c:	e7e1      	b.n	800a542 <_dtoa_r+0xa42>
 800a57e:	9b05      	ldr	r3, [sp, #20]
 800a580:	2b00      	cmp	r3, #0
 800a582:	db04      	blt.n	800a58e <_dtoa_r+0xa8e>
 800a584:	9907      	ldr	r1, [sp, #28]
 800a586:	430b      	orrs	r3, r1
 800a588:	9906      	ldr	r1, [sp, #24]
 800a58a:	430b      	orrs	r3, r1
 800a58c:	d120      	bne.n	800a5d0 <_dtoa_r+0xad0>
 800a58e:	2a00      	cmp	r2, #0
 800a590:	dded      	ble.n	800a56e <_dtoa_r+0xa6e>
 800a592:	4651      	mov	r1, sl
 800a594:	2201      	movs	r2, #1
 800a596:	4620      	mov	r0, r4
 800a598:	f000 fb00 	bl	800ab9c <__lshift>
 800a59c:	4631      	mov	r1, r6
 800a59e:	4682      	mov	sl, r0
 800a5a0:	f000 fb68 	bl	800ac74 <__mcmp>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	dc03      	bgt.n	800a5b0 <_dtoa_r+0xab0>
 800a5a8:	d1e1      	bne.n	800a56e <_dtoa_r+0xa6e>
 800a5aa:	f019 0f01 	tst.w	r9, #1
 800a5ae:	d0de      	beq.n	800a56e <_dtoa_r+0xa6e>
 800a5b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a5b4:	d1d8      	bne.n	800a568 <_dtoa_r+0xa68>
 800a5b6:	9a01      	ldr	r2, [sp, #4]
 800a5b8:	2339      	movs	r3, #57	; 0x39
 800a5ba:	7013      	strb	r3, [r2, #0]
 800a5bc:	462b      	mov	r3, r5
 800a5be:	461d      	mov	r5, r3
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a5c6:	2a39      	cmp	r2, #57	; 0x39
 800a5c8:	d06c      	beq.n	800a6a4 <_dtoa_r+0xba4>
 800a5ca:	3201      	adds	r2, #1
 800a5cc:	701a      	strb	r2, [r3, #0]
 800a5ce:	e747      	b.n	800a460 <_dtoa_r+0x960>
 800a5d0:	2a00      	cmp	r2, #0
 800a5d2:	dd07      	ble.n	800a5e4 <_dtoa_r+0xae4>
 800a5d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a5d8:	d0ed      	beq.n	800a5b6 <_dtoa_r+0xab6>
 800a5da:	9a01      	ldr	r2, [sp, #4]
 800a5dc:	f109 0301 	add.w	r3, r9, #1
 800a5e0:	7013      	strb	r3, [r2, #0]
 800a5e2:	e73d      	b.n	800a460 <_dtoa_r+0x960>
 800a5e4:	9b04      	ldr	r3, [sp, #16]
 800a5e6:	9a08      	ldr	r2, [sp, #32]
 800a5e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d043      	beq.n	800a678 <_dtoa_r+0xb78>
 800a5f0:	4651      	mov	r1, sl
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	220a      	movs	r2, #10
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f000 f922 	bl	800a840 <__multadd>
 800a5fc:	45b8      	cmp	r8, r7
 800a5fe:	4682      	mov	sl, r0
 800a600:	f04f 0300 	mov.w	r3, #0
 800a604:	f04f 020a 	mov.w	r2, #10
 800a608:	4641      	mov	r1, r8
 800a60a:	4620      	mov	r0, r4
 800a60c:	d107      	bne.n	800a61e <_dtoa_r+0xb1e>
 800a60e:	f000 f917 	bl	800a840 <__multadd>
 800a612:	4680      	mov	r8, r0
 800a614:	4607      	mov	r7, r0
 800a616:	9b04      	ldr	r3, [sp, #16]
 800a618:	3301      	adds	r3, #1
 800a61a:	9304      	str	r3, [sp, #16]
 800a61c:	e775      	b.n	800a50a <_dtoa_r+0xa0a>
 800a61e:	f000 f90f 	bl	800a840 <__multadd>
 800a622:	4639      	mov	r1, r7
 800a624:	4680      	mov	r8, r0
 800a626:	2300      	movs	r3, #0
 800a628:	220a      	movs	r2, #10
 800a62a:	4620      	mov	r0, r4
 800a62c:	f000 f908 	bl	800a840 <__multadd>
 800a630:	4607      	mov	r7, r0
 800a632:	e7f0      	b.n	800a616 <_dtoa_r+0xb16>
 800a634:	9b04      	ldr	r3, [sp, #16]
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	9d00      	ldr	r5, [sp, #0]
 800a63a:	4631      	mov	r1, r6
 800a63c:	4650      	mov	r0, sl
 800a63e:	f7ff f9d7 	bl	80099f0 <quorem>
 800a642:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a646:	9b00      	ldr	r3, [sp, #0]
 800a648:	f805 9b01 	strb.w	r9, [r5], #1
 800a64c:	1aea      	subs	r2, r5, r3
 800a64e:	9b01      	ldr	r3, [sp, #4]
 800a650:	4293      	cmp	r3, r2
 800a652:	dd07      	ble.n	800a664 <_dtoa_r+0xb64>
 800a654:	4651      	mov	r1, sl
 800a656:	2300      	movs	r3, #0
 800a658:	220a      	movs	r2, #10
 800a65a:	4620      	mov	r0, r4
 800a65c:	f000 f8f0 	bl	800a840 <__multadd>
 800a660:	4682      	mov	sl, r0
 800a662:	e7ea      	b.n	800a63a <_dtoa_r+0xb3a>
 800a664:	9b01      	ldr	r3, [sp, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	bfc8      	it	gt
 800a66a:	461d      	movgt	r5, r3
 800a66c:	9b00      	ldr	r3, [sp, #0]
 800a66e:	bfd8      	it	le
 800a670:	2501      	movle	r5, #1
 800a672:	441d      	add	r5, r3
 800a674:	f04f 0800 	mov.w	r8, #0
 800a678:	4651      	mov	r1, sl
 800a67a:	2201      	movs	r2, #1
 800a67c:	4620      	mov	r0, r4
 800a67e:	f000 fa8d 	bl	800ab9c <__lshift>
 800a682:	4631      	mov	r1, r6
 800a684:	4682      	mov	sl, r0
 800a686:	f000 faf5 	bl	800ac74 <__mcmp>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	dc96      	bgt.n	800a5bc <_dtoa_r+0xabc>
 800a68e:	d102      	bne.n	800a696 <_dtoa_r+0xb96>
 800a690:	f019 0f01 	tst.w	r9, #1
 800a694:	d192      	bne.n	800a5bc <_dtoa_r+0xabc>
 800a696:	462b      	mov	r3, r5
 800a698:	461d      	mov	r5, r3
 800a69a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a69e:	2a30      	cmp	r2, #48	; 0x30
 800a6a0:	d0fa      	beq.n	800a698 <_dtoa_r+0xb98>
 800a6a2:	e6dd      	b.n	800a460 <_dtoa_r+0x960>
 800a6a4:	9a00      	ldr	r2, [sp, #0]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d189      	bne.n	800a5be <_dtoa_r+0xabe>
 800a6aa:	f10b 0b01 	add.w	fp, fp, #1
 800a6ae:	2331      	movs	r3, #49	; 0x31
 800a6b0:	e796      	b.n	800a5e0 <_dtoa_r+0xae0>
 800a6b2:	4b0a      	ldr	r3, [pc, #40]	; (800a6dc <_dtoa_r+0xbdc>)
 800a6b4:	f7ff ba99 	b.w	8009bea <_dtoa_r+0xea>
 800a6b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f47f aa6d 	bne.w	8009b9a <_dtoa_r+0x9a>
 800a6c0:	4b07      	ldr	r3, [pc, #28]	; (800a6e0 <_dtoa_r+0xbe0>)
 800a6c2:	f7ff ba92 	b.w	8009bea <_dtoa_r+0xea>
 800a6c6:	9b01      	ldr	r3, [sp, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	dcb5      	bgt.n	800a638 <_dtoa_r+0xb38>
 800a6cc:	9b07      	ldr	r3, [sp, #28]
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	f73f aeb1 	bgt.w	800a436 <_dtoa_r+0x936>
 800a6d4:	e7b0      	b.n	800a638 <_dtoa_r+0xb38>
 800a6d6:	bf00      	nop
 800a6d8:	0800e698 	.word	0x0800e698
 800a6dc:	0800e5f8 	.word	0x0800e5f8
 800a6e0:	0800e61c 	.word	0x0800e61c

0800a6e4 <_free_r>:
 800a6e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6e6:	2900      	cmp	r1, #0
 800a6e8:	d044      	beq.n	800a774 <_free_r+0x90>
 800a6ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6ee:	9001      	str	r0, [sp, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f1a1 0404 	sub.w	r4, r1, #4
 800a6f6:	bfb8      	it	lt
 800a6f8:	18e4      	addlt	r4, r4, r3
 800a6fa:	f7fe fae5 	bl	8008cc8 <__malloc_lock>
 800a6fe:	4a1e      	ldr	r2, [pc, #120]	; (800a778 <_free_r+0x94>)
 800a700:	9801      	ldr	r0, [sp, #4]
 800a702:	6813      	ldr	r3, [r2, #0]
 800a704:	b933      	cbnz	r3, 800a714 <_free_r+0x30>
 800a706:	6063      	str	r3, [r4, #4]
 800a708:	6014      	str	r4, [r2, #0]
 800a70a:	b003      	add	sp, #12
 800a70c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a710:	f7fe bae0 	b.w	8008cd4 <__malloc_unlock>
 800a714:	42a3      	cmp	r3, r4
 800a716:	d908      	bls.n	800a72a <_free_r+0x46>
 800a718:	6825      	ldr	r5, [r4, #0]
 800a71a:	1961      	adds	r1, r4, r5
 800a71c:	428b      	cmp	r3, r1
 800a71e:	bf01      	itttt	eq
 800a720:	6819      	ldreq	r1, [r3, #0]
 800a722:	685b      	ldreq	r3, [r3, #4]
 800a724:	1949      	addeq	r1, r1, r5
 800a726:	6021      	streq	r1, [r4, #0]
 800a728:	e7ed      	b.n	800a706 <_free_r+0x22>
 800a72a:	461a      	mov	r2, r3
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	b10b      	cbz	r3, 800a734 <_free_r+0x50>
 800a730:	42a3      	cmp	r3, r4
 800a732:	d9fa      	bls.n	800a72a <_free_r+0x46>
 800a734:	6811      	ldr	r1, [r2, #0]
 800a736:	1855      	adds	r5, r2, r1
 800a738:	42a5      	cmp	r5, r4
 800a73a:	d10b      	bne.n	800a754 <_free_r+0x70>
 800a73c:	6824      	ldr	r4, [r4, #0]
 800a73e:	4421      	add	r1, r4
 800a740:	1854      	adds	r4, r2, r1
 800a742:	42a3      	cmp	r3, r4
 800a744:	6011      	str	r1, [r2, #0]
 800a746:	d1e0      	bne.n	800a70a <_free_r+0x26>
 800a748:	681c      	ldr	r4, [r3, #0]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	6053      	str	r3, [r2, #4]
 800a74e:	440c      	add	r4, r1
 800a750:	6014      	str	r4, [r2, #0]
 800a752:	e7da      	b.n	800a70a <_free_r+0x26>
 800a754:	d902      	bls.n	800a75c <_free_r+0x78>
 800a756:	230c      	movs	r3, #12
 800a758:	6003      	str	r3, [r0, #0]
 800a75a:	e7d6      	b.n	800a70a <_free_r+0x26>
 800a75c:	6825      	ldr	r5, [r4, #0]
 800a75e:	1961      	adds	r1, r4, r5
 800a760:	428b      	cmp	r3, r1
 800a762:	bf04      	itt	eq
 800a764:	6819      	ldreq	r1, [r3, #0]
 800a766:	685b      	ldreq	r3, [r3, #4]
 800a768:	6063      	str	r3, [r4, #4]
 800a76a:	bf04      	itt	eq
 800a76c:	1949      	addeq	r1, r1, r5
 800a76e:	6021      	streq	r1, [r4, #0]
 800a770:	6054      	str	r4, [r2, #4]
 800a772:	e7ca      	b.n	800a70a <_free_r+0x26>
 800a774:	b003      	add	sp, #12
 800a776:	bd30      	pop	{r4, r5, pc}
 800a778:	20000870 	.word	0x20000870

0800a77c <_Balloc>:
 800a77c:	b570      	push	{r4, r5, r6, lr}
 800a77e:	69c6      	ldr	r6, [r0, #28]
 800a780:	4604      	mov	r4, r0
 800a782:	460d      	mov	r5, r1
 800a784:	b976      	cbnz	r6, 800a7a4 <_Balloc+0x28>
 800a786:	2010      	movs	r0, #16
 800a788:	f7fe f9f6 	bl	8008b78 <malloc>
 800a78c:	4602      	mov	r2, r0
 800a78e:	61e0      	str	r0, [r4, #28]
 800a790:	b920      	cbnz	r0, 800a79c <_Balloc+0x20>
 800a792:	4b18      	ldr	r3, [pc, #96]	; (800a7f4 <_Balloc+0x78>)
 800a794:	4818      	ldr	r0, [pc, #96]	; (800a7f8 <_Balloc+0x7c>)
 800a796:	216b      	movs	r1, #107	; 0x6b
 800a798:	f000 fd72 	bl	800b280 <__assert_func>
 800a79c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7a0:	6006      	str	r6, [r0, #0]
 800a7a2:	60c6      	str	r6, [r0, #12]
 800a7a4:	69e6      	ldr	r6, [r4, #28]
 800a7a6:	68f3      	ldr	r3, [r6, #12]
 800a7a8:	b183      	cbz	r3, 800a7cc <_Balloc+0x50>
 800a7aa:	69e3      	ldr	r3, [r4, #28]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7b2:	b9b8      	cbnz	r0, 800a7e4 <_Balloc+0x68>
 800a7b4:	2101      	movs	r1, #1
 800a7b6:	fa01 f605 	lsl.w	r6, r1, r5
 800a7ba:	1d72      	adds	r2, r6, #5
 800a7bc:	0092      	lsls	r2, r2, #2
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f000 fd7c 	bl	800b2bc <_calloc_r>
 800a7c4:	b160      	cbz	r0, 800a7e0 <_Balloc+0x64>
 800a7c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7ca:	e00e      	b.n	800a7ea <_Balloc+0x6e>
 800a7cc:	2221      	movs	r2, #33	; 0x21
 800a7ce:	2104      	movs	r1, #4
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	f000 fd73 	bl	800b2bc <_calloc_r>
 800a7d6:	69e3      	ldr	r3, [r4, #28]
 800a7d8:	60f0      	str	r0, [r6, #12]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d1e4      	bne.n	800a7aa <_Balloc+0x2e>
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	bd70      	pop	{r4, r5, r6, pc}
 800a7e4:	6802      	ldr	r2, [r0, #0]
 800a7e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7f0:	e7f7      	b.n	800a7e2 <_Balloc+0x66>
 800a7f2:	bf00      	nop
 800a7f4:	0800e629 	.word	0x0800e629
 800a7f8:	0800e6a9 	.word	0x0800e6a9

0800a7fc <_Bfree>:
 800a7fc:	b570      	push	{r4, r5, r6, lr}
 800a7fe:	69c6      	ldr	r6, [r0, #28]
 800a800:	4605      	mov	r5, r0
 800a802:	460c      	mov	r4, r1
 800a804:	b976      	cbnz	r6, 800a824 <_Bfree+0x28>
 800a806:	2010      	movs	r0, #16
 800a808:	f7fe f9b6 	bl	8008b78 <malloc>
 800a80c:	4602      	mov	r2, r0
 800a80e:	61e8      	str	r0, [r5, #28]
 800a810:	b920      	cbnz	r0, 800a81c <_Bfree+0x20>
 800a812:	4b09      	ldr	r3, [pc, #36]	; (800a838 <_Bfree+0x3c>)
 800a814:	4809      	ldr	r0, [pc, #36]	; (800a83c <_Bfree+0x40>)
 800a816:	218f      	movs	r1, #143	; 0x8f
 800a818:	f000 fd32 	bl	800b280 <__assert_func>
 800a81c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a820:	6006      	str	r6, [r0, #0]
 800a822:	60c6      	str	r6, [r0, #12]
 800a824:	b13c      	cbz	r4, 800a836 <_Bfree+0x3a>
 800a826:	69eb      	ldr	r3, [r5, #28]
 800a828:	6862      	ldr	r2, [r4, #4]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a830:	6021      	str	r1, [r4, #0]
 800a832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a836:	bd70      	pop	{r4, r5, r6, pc}
 800a838:	0800e629 	.word	0x0800e629
 800a83c:	0800e6a9 	.word	0x0800e6a9

0800a840 <__multadd>:
 800a840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a844:	690d      	ldr	r5, [r1, #16]
 800a846:	4607      	mov	r7, r0
 800a848:	460c      	mov	r4, r1
 800a84a:	461e      	mov	r6, r3
 800a84c:	f101 0c14 	add.w	ip, r1, #20
 800a850:	2000      	movs	r0, #0
 800a852:	f8dc 3000 	ldr.w	r3, [ip]
 800a856:	b299      	uxth	r1, r3
 800a858:	fb02 6101 	mla	r1, r2, r1, r6
 800a85c:	0c1e      	lsrs	r6, r3, #16
 800a85e:	0c0b      	lsrs	r3, r1, #16
 800a860:	fb02 3306 	mla	r3, r2, r6, r3
 800a864:	b289      	uxth	r1, r1
 800a866:	3001      	adds	r0, #1
 800a868:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a86c:	4285      	cmp	r5, r0
 800a86e:	f84c 1b04 	str.w	r1, [ip], #4
 800a872:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a876:	dcec      	bgt.n	800a852 <__multadd+0x12>
 800a878:	b30e      	cbz	r6, 800a8be <__multadd+0x7e>
 800a87a:	68a3      	ldr	r3, [r4, #8]
 800a87c:	42ab      	cmp	r3, r5
 800a87e:	dc19      	bgt.n	800a8b4 <__multadd+0x74>
 800a880:	6861      	ldr	r1, [r4, #4]
 800a882:	4638      	mov	r0, r7
 800a884:	3101      	adds	r1, #1
 800a886:	f7ff ff79 	bl	800a77c <_Balloc>
 800a88a:	4680      	mov	r8, r0
 800a88c:	b928      	cbnz	r0, 800a89a <__multadd+0x5a>
 800a88e:	4602      	mov	r2, r0
 800a890:	4b0c      	ldr	r3, [pc, #48]	; (800a8c4 <__multadd+0x84>)
 800a892:	480d      	ldr	r0, [pc, #52]	; (800a8c8 <__multadd+0x88>)
 800a894:	21ba      	movs	r1, #186	; 0xba
 800a896:	f000 fcf3 	bl	800b280 <__assert_func>
 800a89a:	6922      	ldr	r2, [r4, #16]
 800a89c:	3202      	adds	r2, #2
 800a89e:	f104 010c 	add.w	r1, r4, #12
 800a8a2:	0092      	lsls	r2, r2, #2
 800a8a4:	300c      	adds	r0, #12
 800a8a6:	f7ff f895 	bl	80099d4 <memcpy>
 800a8aa:	4621      	mov	r1, r4
 800a8ac:	4638      	mov	r0, r7
 800a8ae:	f7ff ffa5 	bl	800a7fc <_Bfree>
 800a8b2:	4644      	mov	r4, r8
 800a8b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8b8:	3501      	adds	r5, #1
 800a8ba:	615e      	str	r6, [r3, #20]
 800a8bc:	6125      	str	r5, [r4, #16]
 800a8be:	4620      	mov	r0, r4
 800a8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c4:	0800e698 	.word	0x0800e698
 800a8c8:	0800e6a9 	.word	0x0800e6a9

0800a8cc <__hi0bits>:
 800a8cc:	0c03      	lsrs	r3, r0, #16
 800a8ce:	041b      	lsls	r3, r3, #16
 800a8d0:	b9d3      	cbnz	r3, 800a908 <__hi0bits+0x3c>
 800a8d2:	0400      	lsls	r0, r0, #16
 800a8d4:	2310      	movs	r3, #16
 800a8d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a8da:	bf04      	itt	eq
 800a8dc:	0200      	lsleq	r0, r0, #8
 800a8de:	3308      	addeq	r3, #8
 800a8e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a8e4:	bf04      	itt	eq
 800a8e6:	0100      	lsleq	r0, r0, #4
 800a8e8:	3304      	addeq	r3, #4
 800a8ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a8ee:	bf04      	itt	eq
 800a8f0:	0080      	lsleq	r0, r0, #2
 800a8f2:	3302      	addeq	r3, #2
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	db05      	blt.n	800a904 <__hi0bits+0x38>
 800a8f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a8fc:	f103 0301 	add.w	r3, r3, #1
 800a900:	bf08      	it	eq
 800a902:	2320      	moveq	r3, #32
 800a904:	4618      	mov	r0, r3
 800a906:	4770      	bx	lr
 800a908:	2300      	movs	r3, #0
 800a90a:	e7e4      	b.n	800a8d6 <__hi0bits+0xa>

0800a90c <__lo0bits>:
 800a90c:	6803      	ldr	r3, [r0, #0]
 800a90e:	f013 0207 	ands.w	r2, r3, #7
 800a912:	d00c      	beq.n	800a92e <__lo0bits+0x22>
 800a914:	07d9      	lsls	r1, r3, #31
 800a916:	d422      	bmi.n	800a95e <__lo0bits+0x52>
 800a918:	079a      	lsls	r2, r3, #30
 800a91a:	bf49      	itett	mi
 800a91c:	085b      	lsrmi	r3, r3, #1
 800a91e:	089b      	lsrpl	r3, r3, #2
 800a920:	6003      	strmi	r3, [r0, #0]
 800a922:	2201      	movmi	r2, #1
 800a924:	bf5c      	itt	pl
 800a926:	6003      	strpl	r3, [r0, #0]
 800a928:	2202      	movpl	r2, #2
 800a92a:	4610      	mov	r0, r2
 800a92c:	4770      	bx	lr
 800a92e:	b299      	uxth	r1, r3
 800a930:	b909      	cbnz	r1, 800a936 <__lo0bits+0x2a>
 800a932:	0c1b      	lsrs	r3, r3, #16
 800a934:	2210      	movs	r2, #16
 800a936:	b2d9      	uxtb	r1, r3
 800a938:	b909      	cbnz	r1, 800a93e <__lo0bits+0x32>
 800a93a:	3208      	adds	r2, #8
 800a93c:	0a1b      	lsrs	r3, r3, #8
 800a93e:	0719      	lsls	r1, r3, #28
 800a940:	bf04      	itt	eq
 800a942:	091b      	lsreq	r3, r3, #4
 800a944:	3204      	addeq	r2, #4
 800a946:	0799      	lsls	r1, r3, #30
 800a948:	bf04      	itt	eq
 800a94a:	089b      	lsreq	r3, r3, #2
 800a94c:	3202      	addeq	r2, #2
 800a94e:	07d9      	lsls	r1, r3, #31
 800a950:	d403      	bmi.n	800a95a <__lo0bits+0x4e>
 800a952:	085b      	lsrs	r3, r3, #1
 800a954:	f102 0201 	add.w	r2, r2, #1
 800a958:	d003      	beq.n	800a962 <__lo0bits+0x56>
 800a95a:	6003      	str	r3, [r0, #0]
 800a95c:	e7e5      	b.n	800a92a <__lo0bits+0x1e>
 800a95e:	2200      	movs	r2, #0
 800a960:	e7e3      	b.n	800a92a <__lo0bits+0x1e>
 800a962:	2220      	movs	r2, #32
 800a964:	e7e1      	b.n	800a92a <__lo0bits+0x1e>
	...

0800a968 <__i2b>:
 800a968:	b510      	push	{r4, lr}
 800a96a:	460c      	mov	r4, r1
 800a96c:	2101      	movs	r1, #1
 800a96e:	f7ff ff05 	bl	800a77c <_Balloc>
 800a972:	4602      	mov	r2, r0
 800a974:	b928      	cbnz	r0, 800a982 <__i2b+0x1a>
 800a976:	4b05      	ldr	r3, [pc, #20]	; (800a98c <__i2b+0x24>)
 800a978:	4805      	ldr	r0, [pc, #20]	; (800a990 <__i2b+0x28>)
 800a97a:	f240 1145 	movw	r1, #325	; 0x145
 800a97e:	f000 fc7f 	bl	800b280 <__assert_func>
 800a982:	2301      	movs	r3, #1
 800a984:	6144      	str	r4, [r0, #20]
 800a986:	6103      	str	r3, [r0, #16]
 800a988:	bd10      	pop	{r4, pc}
 800a98a:	bf00      	nop
 800a98c:	0800e698 	.word	0x0800e698
 800a990:	0800e6a9 	.word	0x0800e6a9

0800a994 <__multiply>:
 800a994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a998:	4691      	mov	r9, r2
 800a99a:	690a      	ldr	r2, [r1, #16]
 800a99c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	bfb8      	it	lt
 800a9a4:	460b      	movlt	r3, r1
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	bfbc      	itt	lt
 800a9aa:	464c      	movlt	r4, r9
 800a9ac:	4699      	movlt	r9, r3
 800a9ae:	6927      	ldr	r7, [r4, #16]
 800a9b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a9b4:	68a3      	ldr	r3, [r4, #8]
 800a9b6:	6861      	ldr	r1, [r4, #4]
 800a9b8:	eb07 060a 	add.w	r6, r7, sl
 800a9bc:	42b3      	cmp	r3, r6
 800a9be:	b085      	sub	sp, #20
 800a9c0:	bfb8      	it	lt
 800a9c2:	3101      	addlt	r1, #1
 800a9c4:	f7ff feda 	bl	800a77c <_Balloc>
 800a9c8:	b930      	cbnz	r0, 800a9d8 <__multiply+0x44>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	4b44      	ldr	r3, [pc, #272]	; (800aae0 <__multiply+0x14c>)
 800a9ce:	4845      	ldr	r0, [pc, #276]	; (800aae4 <__multiply+0x150>)
 800a9d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a9d4:	f000 fc54 	bl	800b280 <__assert_func>
 800a9d8:	f100 0514 	add.w	r5, r0, #20
 800a9dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a9e0:	462b      	mov	r3, r5
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	4543      	cmp	r3, r8
 800a9e6:	d321      	bcc.n	800aa2c <__multiply+0x98>
 800a9e8:	f104 0314 	add.w	r3, r4, #20
 800a9ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a9f0:	f109 0314 	add.w	r3, r9, #20
 800a9f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a9f8:	9202      	str	r2, [sp, #8]
 800a9fa:	1b3a      	subs	r2, r7, r4
 800a9fc:	3a15      	subs	r2, #21
 800a9fe:	f022 0203 	bic.w	r2, r2, #3
 800aa02:	3204      	adds	r2, #4
 800aa04:	f104 0115 	add.w	r1, r4, #21
 800aa08:	428f      	cmp	r7, r1
 800aa0a:	bf38      	it	cc
 800aa0c:	2204      	movcc	r2, #4
 800aa0e:	9201      	str	r2, [sp, #4]
 800aa10:	9a02      	ldr	r2, [sp, #8]
 800aa12:	9303      	str	r3, [sp, #12]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d80c      	bhi.n	800aa32 <__multiply+0x9e>
 800aa18:	2e00      	cmp	r6, #0
 800aa1a:	dd03      	ble.n	800aa24 <__multiply+0x90>
 800aa1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d05b      	beq.n	800aadc <__multiply+0x148>
 800aa24:	6106      	str	r6, [r0, #16]
 800aa26:	b005      	add	sp, #20
 800aa28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa2c:	f843 2b04 	str.w	r2, [r3], #4
 800aa30:	e7d8      	b.n	800a9e4 <__multiply+0x50>
 800aa32:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa36:	f1ba 0f00 	cmp.w	sl, #0
 800aa3a:	d024      	beq.n	800aa86 <__multiply+0xf2>
 800aa3c:	f104 0e14 	add.w	lr, r4, #20
 800aa40:	46a9      	mov	r9, r5
 800aa42:	f04f 0c00 	mov.w	ip, #0
 800aa46:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aa4a:	f8d9 1000 	ldr.w	r1, [r9]
 800aa4e:	fa1f fb82 	uxth.w	fp, r2
 800aa52:	b289      	uxth	r1, r1
 800aa54:	fb0a 110b 	mla	r1, sl, fp, r1
 800aa58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aa5c:	f8d9 2000 	ldr.w	r2, [r9]
 800aa60:	4461      	add	r1, ip
 800aa62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aa66:	fb0a c20b 	mla	r2, sl, fp, ip
 800aa6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aa6e:	b289      	uxth	r1, r1
 800aa70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aa74:	4577      	cmp	r7, lr
 800aa76:	f849 1b04 	str.w	r1, [r9], #4
 800aa7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aa7e:	d8e2      	bhi.n	800aa46 <__multiply+0xb2>
 800aa80:	9a01      	ldr	r2, [sp, #4]
 800aa82:	f845 c002 	str.w	ip, [r5, r2]
 800aa86:	9a03      	ldr	r2, [sp, #12]
 800aa88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	f1b9 0f00 	cmp.w	r9, #0
 800aa92:	d021      	beq.n	800aad8 <__multiply+0x144>
 800aa94:	6829      	ldr	r1, [r5, #0]
 800aa96:	f104 0c14 	add.w	ip, r4, #20
 800aa9a:	46ae      	mov	lr, r5
 800aa9c:	f04f 0a00 	mov.w	sl, #0
 800aaa0:	f8bc b000 	ldrh.w	fp, [ip]
 800aaa4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aaa8:	fb09 220b 	mla	r2, r9, fp, r2
 800aaac:	4452      	add	r2, sl
 800aaae:	b289      	uxth	r1, r1
 800aab0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aab4:	f84e 1b04 	str.w	r1, [lr], #4
 800aab8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800aabc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aac0:	f8be 1000 	ldrh.w	r1, [lr]
 800aac4:	fb09 110a 	mla	r1, r9, sl, r1
 800aac8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800aacc:	4567      	cmp	r7, ip
 800aace:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aad2:	d8e5      	bhi.n	800aaa0 <__multiply+0x10c>
 800aad4:	9a01      	ldr	r2, [sp, #4]
 800aad6:	50a9      	str	r1, [r5, r2]
 800aad8:	3504      	adds	r5, #4
 800aada:	e799      	b.n	800aa10 <__multiply+0x7c>
 800aadc:	3e01      	subs	r6, #1
 800aade:	e79b      	b.n	800aa18 <__multiply+0x84>
 800aae0:	0800e698 	.word	0x0800e698
 800aae4:	0800e6a9 	.word	0x0800e6a9

0800aae8 <__pow5mult>:
 800aae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaec:	4615      	mov	r5, r2
 800aaee:	f012 0203 	ands.w	r2, r2, #3
 800aaf2:	4606      	mov	r6, r0
 800aaf4:	460f      	mov	r7, r1
 800aaf6:	d007      	beq.n	800ab08 <__pow5mult+0x20>
 800aaf8:	4c25      	ldr	r4, [pc, #148]	; (800ab90 <__pow5mult+0xa8>)
 800aafa:	3a01      	subs	r2, #1
 800aafc:	2300      	movs	r3, #0
 800aafe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab02:	f7ff fe9d 	bl	800a840 <__multadd>
 800ab06:	4607      	mov	r7, r0
 800ab08:	10ad      	asrs	r5, r5, #2
 800ab0a:	d03d      	beq.n	800ab88 <__pow5mult+0xa0>
 800ab0c:	69f4      	ldr	r4, [r6, #28]
 800ab0e:	b97c      	cbnz	r4, 800ab30 <__pow5mult+0x48>
 800ab10:	2010      	movs	r0, #16
 800ab12:	f7fe f831 	bl	8008b78 <malloc>
 800ab16:	4602      	mov	r2, r0
 800ab18:	61f0      	str	r0, [r6, #28]
 800ab1a:	b928      	cbnz	r0, 800ab28 <__pow5mult+0x40>
 800ab1c:	4b1d      	ldr	r3, [pc, #116]	; (800ab94 <__pow5mult+0xac>)
 800ab1e:	481e      	ldr	r0, [pc, #120]	; (800ab98 <__pow5mult+0xb0>)
 800ab20:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ab24:	f000 fbac 	bl	800b280 <__assert_func>
 800ab28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab2c:	6004      	str	r4, [r0, #0]
 800ab2e:	60c4      	str	r4, [r0, #12]
 800ab30:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ab34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab38:	b94c      	cbnz	r4, 800ab4e <__pow5mult+0x66>
 800ab3a:	f240 2171 	movw	r1, #625	; 0x271
 800ab3e:	4630      	mov	r0, r6
 800ab40:	f7ff ff12 	bl	800a968 <__i2b>
 800ab44:	2300      	movs	r3, #0
 800ab46:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	6003      	str	r3, [r0, #0]
 800ab4e:	f04f 0900 	mov.w	r9, #0
 800ab52:	07eb      	lsls	r3, r5, #31
 800ab54:	d50a      	bpl.n	800ab6c <__pow5mult+0x84>
 800ab56:	4639      	mov	r1, r7
 800ab58:	4622      	mov	r2, r4
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f7ff ff1a 	bl	800a994 <__multiply>
 800ab60:	4639      	mov	r1, r7
 800ab62:	4680      	mov	r8, r0
 800ab64:	4630      	mov	r0, r6
 800ab66:	f7ff fe49 	bl	800a7fc <_Bfree>
 800ab6a:	4647      	mov	r7, r8
 800ab6c:	106d      	asrs	r5, r5, #1
 800ab6e:	d00b      	beq.n	800ab88 <__pow5mult+0xa0>
 800ab70:	6820      	ldr	r0, [r4, #0]
 800ab72:	b938      	cbnz	r0, 800ab84 <__pow5mult+0x9c>
 800ab74:	4622      	mov	r2, r4
 800ab76:	4621      	mov	r1, r4
 800ab78:	4630      	mov	r0, r6
 800ab7a:	f7ff ff0b 	bl	800a994 <__multiply>
 800ab7e:	6020      	str	r0, [r4, #0]
 800ab80:	f8c0 9000 	str.w	r9, [r0]
 800ab84:	4604      	mov	r4, r0
 800ab86:	e7e4      	b.n	800ab52 <__pow5mult+0x6a>
 800ab88:	4638      	mov	r0, r7
 800ab8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab8e:	bf00      	nop
 800ab90:	0800e7f8 	.word	0x0800e7f8
 800ab94:	0800e629 	.word	0x0800e629
 800ab98:	0800e6a9 	.word	0x0800e6a9

0800ab9c <__lshift>:
 800ab9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aba0:	460c      	mov	r4, r1
 800aba2:	6849      	ldr	r1, [r1, #4]
 800aba4:	6923      	ldr	r3, [r4, #16]
 800aba6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abaa:	68a3      	ldr	r3, [r4, #8]
 800abac:	4607      	mov	r7, r0
 800abae:	4691      	mov	r9, r2
 800abb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abb4:	f108 0601 	add.w	r6, r8, #1
 800abb8:	42b3      	cmp	r3, r6
 800abba:	db0b      	blt.n	800abd4 <__lshift+0x38>
 800abbc:	4638      	mov	r0, r7
 800abbe:	f7ff fddd 	bl	800a77c <_Balloc>
 800abc2:	4605      	mov	r5, r0
 800abc4:	b948      	cbnz	r0, 800abda <__lshift+0x3e>
 800abc6:	4602      	mov	r2, r0
 800abc8:	4b28      	ldr	r3, [pc, #160]	; (800ac6c <__lshift+0xd0>)
 800abca:	4829      	ldr	r0, [pc, #164]	; (800ac70 <__lshift+0xd4>)
 800abcc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800abd0:	f000 fb56 	bl	800b280 <__assert_func>
 800abd4:	3101      	adds	r1, #1
 800abd6:	005b      	lsls	r3, r3, #1
 800abd8:	e7ee      	b.n	800abb8 <__lshift+0x1c>
 800abda:	2300      	movs	r3, #0
 800abdc:	f100 0114 	add.w	r1, r0, #20
 800abe0:	f100 0210 	add.w	r2, r0, #16
 800abe4:	4618      	mov	r0, r3
 800abe6:	4553      	cmp	r3, sl
 800abe8:	db33      	blt.n	800ac52 <__lshift+0xb6>
 800abea:	6920      	ldr	r0, [r4, #16]
 800abec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abf0:	f104 0314 	add.w	r3, r4, #20
 800abf4:	f019 091f 	ands.w	r9, r9, #31
 800abf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac00:	d02b      	beq.n	800ac5a <__lshift+0xbe>
 800ac02:	f1c9 0e20 	rsb	lr, r9, #32
 800ac06:	468a      	mov	sl, r1
 800ac08:	2200      	movs	r2, #0
 800ac0a:	6818      	ldr	r0, [r3, #0]
 800ac0c:	fa00 f009 	lsl.w	r0, r0, r9
 800ac10:	4310      	orrs	r0, r2
 800ac12:	f84a 0b04 	str.w	r0, [sl], #4
 800ac16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac1a:	459c      	cmp	ip, r3
 800ac1c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac20:	d8f3      	bhi.n	800ac0a <__lshift+0x6e>
 800ac22:	ebac 0304 	sub.w	r3, ip, r4
 800ac26:	3b15      	subs	r3, #21
 800ac28:	f023 0303 	bic.w	r3, r3, #3
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	f104 0015 	add.w	r0, r4, #21
 800ac32:	4584      	cmp	ip, r0
 800ac34:	bf38      	it	cc
 800ac36:	2304      	movcc	r3, #4
 800ac38:	50ca      	str	r2, [r1, r3]
 800ac3a:	b10a      	cbz	r2, 800ac40 <__lshift+0xa4>
 800ac3c:	f108 0602 	add.w	r6, r8, #2
 800ac40:	3e01      	subs	r6, #1
 800ac42:	4638      	mov	r0, r7
 800ac44:	612e      	str	r6, [r5, #16]
 800ac46:	4621      	mov	r1, r4
 800ac48:	f7ff fdd8 	bl	800a7fc <_Bfree>
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac52:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac56:	3301      	adds	r3, #1
 800ac58:	e7c5      	b.n	800abe6 <__lshift+0x4a>
 800ac5a:	3904      	subs	r1, #4
 800ac5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac60:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac64:	459c      	cmp	ip, r3
 800ac66:	d8f9      	bhi.n	800ac5c <__lshift+0xc0>
 800ac68:	e7ea      	b.n	800ac40 <__lshift+0xa4>
 800ac6a:	bf00      	nop
 800ac6c:	0800e698 	.word	0x0800e698
 800ac70:	0800e6a9 	.word	0x0800e6a9

0800ac74 <__mcmp>:
 800ac74:	b530      	push	{r4, r5, lr}
 800ac76:	6902      	ldr	r2, [r0, #16]
 800ac78:	690c      	ldr	r4, [r1, #16]
 800ac7a:	1b12      	subs	r2, r2, r4
 800ac7c:	d10e      	bne.n	800ac9c <__mcmp+0x28>
 800ac7e:	f100 0314 	add.w	r3, r0, #20
 800ac82:	3114      	adds	r1, #20
 800ac84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ac88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac94:	42a5      	cmp	r5, r4
 800ac96:	d003      	beq.n	800aca0 <__mcmp+0x2c>
 800ac98:	d305      	bcc.n	800aca6 <__mcmp+0x32>
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	bd30      	pop	{r4, r5, pc}
 800aca0:	4283      	cmp	r3, r0
 800aca2:	d3f3      	bcc.n	800ac8c <__mcmp+0x18>
 800aca4:	e7fa      	b.n	800ac9c <__mcmp+0x28>
 800aca6:	f04f 32ff 	mov.w	r2, #4294967295
 800acaa:	e7f7      	b.n	800ac9c <__mcmp+0x28>

0800acac <__mdiff>:
 800acac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb0:	460c      	mov	r4, r1
 800acb2:	4606      	mov	r6, r0
 800acb4:	4611      	mov	r1, r2
 800acb6:	4620      	mov	r0, r4
 800acb8:	4690      	mov	r8, r2
 800acba:	f7ff ffdb 	bl	800ac74 <__mcmp>
 800acbe:	1e05      	subs	r5, r0, #0
 800acc0:	d110      	bne.n	800ace4 <__mdiff+0x38>
 800acc2:	4629      	mov	r1, r5
 800acc4:	4630      	mov	r0, r6
 800acc6:	f7ff fd59 	bl	800a77c <_Balloc>
 800acca:	b930      	cbnz	r0, 800acda <__mdiff+0x2e>
 800accc:	4b3a      	ldr	r3, [pc, #232]	; (800adb8 <__mdiff+0x10c>)
 800acce:	4602      	mov	r2, r0
 800acd0:	f240 2137 	movw	r1, #567	; 0x237
 800acd4:	4839      	ldr	r0, [pc, #228]	; (800adbc <__mdiff+0x110>)
 800acd6:	f000 fad3 	bl	800b280 <__assert_func>
 800acda:	2301      	movs	r3, #1
 800acdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ace0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace4:	bfa4      	itt	ge
 800ace6:	4643      	movge	r3, r8
 800ace8:	46a0      	movge	r8, r4
 800acea:	4630      	mov	r0, r6
 800acec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800acf0:	bfa6      	itte	ge
 800acf2:	461c      	movge	r4, r3
 800acf4:	2500      	movge	r5, #0
 800acf6:	2501      	movlt	r5, #1
 800acf8:	f7ff fd40 	bl	800a77c <_Balloc>
 800acfc:	b920      	cbnz	r0, 800ad08 <__mdiff+0x5c>
 800acfe:	4b2e      	ldr	r3, [pc, #184]	; (800adb8 <__mdiff+0x10c>)
 800ad00:	4602      	mov	r2, r0
 800ad02:	f240 2145 	movw	r1, #581	; 0x245
 800ad06:	e7e5      	b.n	800acd4 <__mdiff+0x28>
 800ad08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad0c:	6926      	ldr	r6, [r4, #16]
 800ad0e:	60c5      	str	r5, [r0, #12]
 800ad10:	f104 0914 	add.w	r9, r4, #20
 800ad14:	f108 0514 	add.w	r5, r8, #20
 800ad18:	f100 0e14 	add.w	lr, r0, #20
 800ad1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ad20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ad24:	f108 0210 	add.w	r2, r8, #16
 800ad28:	46f2      	mov	sl, lr
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad34:	fa11 f88b 	uxtah	r8, r1, fp
 800ad38:	b299      	uxth	r1, r3
 800ad3a:	0c1b      	lsrs	r3, r3, #16
 800ad3c:	eba8 0801 	sub.w	r8, r8, r1
 800ad40:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad44:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad48:	fa1f f888 	uxth.w	r8, r8
 800ad4c:	1419      	asrs	r1, r3, #16
 800ad4e:	454e      	cmp	r6, r9
 800ad50:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad54:	f84a 3b04 	str.w	r3, [sl], #4
 800ad58:	d8e8      	bhi.n	800ad2c <__mdiff+0x80>
 800ad5a:	1b33      	subs	r3, r6, r4
 800ad5c:	3b15      	subs	r3, #21
 800ad5e:	f023 0303 	bic.w	r3, r3, #3
 800ad62:	3304      	adds	r3, #4
 800ad64:	3415      	adds	r4, #21
 800ad66:	42a6      	cmp	r6, r4
 800ad68:	bf38      	it	cc
 800ad6a:	2304      	movcc	r3, #4
 800ad6c:	441d      	add	r5, r3
 800ad6e:	4473      	add	r3, lr
 800ad70:	469e      	mov	lr, r3
 800ad72:	462e      	mov	r6, r5
 800ad74:	4566      	cmp	r6, ip
 800ad76:	d30e      	bcc.n	800ad96 <__mdiff+0xea>
 800ad78:	f10c 0203 	add.w	r2, ip, #3
 800ad7c:	1b52      	subs	r2, r2, r5
 800ad7e:	f022 0203 	bic.w	r2, r2, #3
 800ad82:	3d03      	subs	r5, #3
 800ad84:	45ac      	cmp	ip, r5
 800ad86:	bf38      	it	cc
 800ad88:	2200      	movcc	r2, #0
 800ad8a:	4413      	add	r3, r2
 800ad8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ad90:	b17a      	cbz	r2, 800adb2 <__mdiff+0x106>
 800ad92:	6107      	str	r7, [r0, #16]
 800ad94:	e7a4      	b.n	800ace0 <__mdiff+0x34>
 800ad96:	f856 8b04 	ldr.w	r8, [r6], #4
 800ad9a:	fa11 f288 	uxtah	r2, r1, r8
 800ad9e:	1414      	asrs	r4, r2, #16
 800ada0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ada4:	b292      	uxth	r2, r2
 800ada6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800adaa:	f84e 2b04 	str.w	r2, [lr], #4
 800adae:	1421      	asrs	r1, r4, #16
 800adb0:	e7e0      	b.n	800ad74 <__mdiff+0xc8>
 800adb2:	3f01      	subs	r7, #1
 800adb4:	e7ea      	b.n	800ad8c <__mdiff+0xe0>
 800adb6:	bf00      	nop
 800adb8:	0800e698 	.word	0x0800e698
 800adbc:	0800e6a9 	.word	0x0800e6a9

0800adc0 <__d2b>:
 800adc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adc4:	460f      	mov	r7, r1
 800adc6:	2101      	movs	r1, #1
 800adc8:	ec59 8b10 	vmov	r8, r9, d0
 800adcc:	4616      	mov	r6, r2
 800adce:	f7ff fcd5 	bl	800a77c <_Balloc>
 800add2:	4604      	mov	r4, r0
 800add4:	b930      	cbnz	r0, 800ade4 <__d2b+0x24>
 800add6:	4602      	mov	r2, r0
 800add8:	4b24      	ldr	r3, [pc, #144]	; (800ae6c <__d2b+0xac>)
 800adda:	4825      	ldr	r0, [pc, #148]	; (800ae70 <__d2b+0xb0>)
 800addc:	f240 310f 	movw	r1, #783	; 0x30f
 800ade0:	f000 fa4e 	bl	800b280 <__assert_func>
 800ade4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ade8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800adec:	bb2d      	cbnz	r5, 800ae3a <__d2b+0x7a>
 800adee:	9301      	str	r3, [sp, #4]
 800adf0:	f1b8 0300 	subs.w	r3, r8, #0
 800adf4:	d026      	beq.n	800ae44 <__d2b+0x84>
 800adf6:	4668      	mov	r0, sp
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	f7ff fd87 	bl	800a90c <__lo0bits>
 800adfe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae02:	b1e8      	cbz	r0, 800ae40 <__d2b+0x80>
 800ae04:	f1c0 0320 	rsb	r3, r0, #32
 800ae08:	fa02 f303 	lsl.w	r3, r2, r3
 800ae0c:	430b      	orrs	r3, r1
 800ae0e:	40c2      	lsrs	r2, r0
 800ae10:	6163      	str	r3, [r4, #20]
 800ae12:	9201      	str	r2, [sp, #4]
 800ae14:	9b01      	ldr	r3, [sp, #4]
 800ae16:	61a3      	str	r3, [r4, #24]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	bf14      	ite	ne
 800ae1c:	2202      	movne	r2, #2
 800ae1e:	2201      	moveq	r2, #1
 800ae20:	6122      	str	r2, [r4, #16]
 800ae22:	b1bd      	cbz	r5, 800ae54 <__d2b+0x94>
 800ae24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae28:	4405      	add	r5, r0
 800ae2a:	603d      	str	r5, [r7, #0]
 800ae2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae30:	6030      	str	r0, [r6, #0]
 800ae32:	4620      	mov	r0, r4
 800ae34:	b003      	add	sp, #12
 800ae36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae3e:	e7d6      	b.n	800adee <__d2b+0x2e>
 800ae40:	6161      	str	r1, [r4, #20]
 800ae42:	e7e7      	b.n	800ae14 <__d2b+0x54>
 800ae44:	a801      	add	r0, sp, #4
 800ae46:	f7ff fd61 	bl	800a90c <__lo0bits>
 800ae4a:	9b01      	ldr	r3, [sp, #4]
 800ae4c:	6163      	str	r3, [r4, #20]
 800ae4e:	3020      	adds	r0, #32
 800ae50:	2201      	movs	r2, #1
 800ae52:	e7e5      	b.n	800ae20 <__d2b+0x60>
 800ae54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae5c:	6038      	str	r0, [r7, #0]
 800ae5e:	6918      	ldr	r0, [r3, #16]
 800ae60:	f7ff fd34 	bl	800a8cc <__hi0bits>
 800ae64:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae68:	e7e2      	b.n	800ae30 <__d2b+0x70>
 800ae6a:	bf00      	nop
 800ae6c:	0800e698 	.word	0x0800e698
 800ae70:	0800e6a9 	.word	0x0800e6a9

0800ae74 <__ssputs_r>:
 800ae74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae78:	688e      	ldr	r6, [r1, #8]
 800ae7a:	461f      	mov	r7, r3
 800ae7c:	42be      	cmp	r6, r7
 800ae7e:	680b      	ldr	r3, [r1, #0]
 800ae80:	4682      	mov	sl, r0
 800ae82:	460c      	mov	r4, r1
 800ae84:	4690      	mov	r8, r2
 800ae86:	d82c      	bhi.n	800aee2 <__ssputs_r+0x6e>
 800ae88:	898a      	ldrh	r2, [r1, #12]
 800ae8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae8e:	d026      	beq.n	800aede <__ssputs_r+0x6a>
 800ae90:	6965      	ldr	r5, [r4, #20]
 800ae92:	6909      	ldr	r1, [r1, #16]
 800ae94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae98:	eba3 0901 	sub.w	r9, r3, r1
 800ae9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aea0:	1c7b      	adds	r3, r7, #1
 800aea2:	444b      	add	r3, r9
 800aea4:	106d      	asrs	r5, r5, #1
 800aea6:	429d      	cmp	r5, r3
 800aea8:	bf38      	it	cc
 800aeaa:	461d      	movcc	r5, r3
 800aeac:	0553      	lsls	r3, r2, #21
 800aeae:	d527      	bpl.n	800af00 <__ssputs_r+0x8c>
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	f7fd fe89 	bl	8008bc8 <_malloc_r>
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	b360      	cbz	r0, 800af14 <__ssputs_r+0xa0>
 800aeba:	6921      	ldr	r1, [r4, #16]
 800aebc:	464a      	mov	r2, r9
 800aebe:	f7fe fd89 	bl	80099d4 <memcpy>
 800aec2:	89a3      	ldrh	r3, [r4, #12]
 800aec4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aecc:	81a3      	strh	r3, [r4, #12]
 800aece:	6126      	str	r6, [r4, #16]
 800aed0:	6165      	str	r5, [r4, #20]
 800aed2:	444e      	add	r6, r9
 800aed4:	eba5 0509 	sub.w	r5, r5, r9
 800aed8:	6026      	str	r6, [r4, #0]
 800aeda:	60a5      	str	r5, [r4, #8]
 800aedc:	463e      	mov	r6, r7
 800aede:	42be      	cmp	r6, r7
 800aee0:	d900      	bls.n	800aee4 <__ssputs_r+0x70>
 800aee2:	463e      	mov	r6, r7
 800aee4:	6820      	ldr	r0, [r4, #0]
 800aee6:	4632      	mov	r2, r6
 800aee8:	4641      	mov	r1, r8
 800aeea:	f7fe fc86 	bl	80097fa <memmove>
 800aeee:	68a3      	ldr	r3, [r4, #8]
 800aef0:	1b9b      	subs	r3, r3, r6
 800aef2:	60a3      	str	r3, [r4, #8]
 800aef4:	6823      	ldr	r3, [r4, #0]
 800aef6:	4433      	add	r3, r6
 800aef8:	6023      	str	r3, [r4, #0]
 800aefa:	2000      	movs	r0, #0
 800aefc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af00:	462a      	mov	r2, r5
 800af02:	f000 fa03 	bl	800b30c <_realloc_r>
 800af06:	4606      	mov	r6, r0
 800af08:	2800      	cmp	r0, #0
 800af0a:	d1e0      	bne.n	800aece <__ssputs_r+0x5a>
 800af0c:	6921      	ldr	r1, [r4, #16]
 800af0e:	4650      	mov	r0, sl
 800af10:	f7ff fbe8 	bl	800a6e4 <_free_r>
 800af14:	230c      	movs	r3, #12
 800af16:	f8ca 3000 	str.w	r3, [sl]
 800af1a:	89a3      	ldrh	r3, [r4, #12]
 800af1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af20:	81a3      	strh	r3, [r4, #12]
 800af22:	f04f 30ff 	mov.w	r0, #4294967295
 800af26:	e7e9      	b.n	800aefc <__ssputs_r+0x88>

0800af28 <_svfiprintf_r>:
 800af28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af2c:	4698      	mov	r8, r3
 800af2e:	898b      	ldrh	r3, [r1, #12]
 800af30:	061b      	lsls	r3, r3, #24
 800af32:	b09d      	sub	sp, #116	; 0x74
 800af34:	4607      	mov	r7, r0
 800af36:	460d      	mov	r5, r1
 800af38:	4614      	mov	r4, r2
 800af3a:	d50e      	bpl.n	800af5a <_svfiprintf_r+0x32>
 800af3c:	690b      	ldr	r3, [r1, #16]
 800af3e:	b963      	cbnz	r3, 800af5a <_svfiprintf_r+0x32>
 800af40:	2140      	movs	r1, #64	; 0x40
 800af42:	f7fd fe41 	bl	8008bc8 <_malloc_r>
 800af46:	6028      	str	r0, [r5, #0]
 800af48:	6128      	str	r0, [r5, #16]
 800af4a:	b920      	cbnz	r0, 800af56 <_svfiprintf_r+0x2e>
 800af4c:	230c      	movs	r3, #12
 800af4e:	603b      	str	r3, [r7, #0]
 800af50:	f04f 30ff 	mov.w	r0, #4294967295
 800af54:	e0d0      	b.n	800b0f8 <_svfiprintf_r+0x1d0>
 800af56:	2340      	movs	r3, #64	; 0x40
 800af58:	616b      	str	r3, [r5, #20]
 800af5a:	2300      	movs	r3, #0
 800af5c:	9309      	str	r3, [sp, #36]	; 0x24
 800af5e:	2320      	movs	r3, #32
 800af60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af64:	f8cd 800c 	str.w	r8, [sp, #12]
 800af68:	2330      	movs	r3, #48	; 0x30
 800af6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b110 <_svfiprintf_r+0x1e8>
 800af6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af72:	f04f 0901 	mov.w	r9, #1
 800af76:	4623      	mov	r3, r4
 800af78:	469a      	mov	sl, r3
 800af7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af7e:	b10a      	cbz	r2, 800af84 <_svfiprintf_r+0x5c>
 800af80:	2a25      	cmp	r2, #37	; 0x25
 800af82:	d1f9      	bne.n	800af78 <_svfiprintf_r+0x50>
 800af84:	ebba 0b04 	subs.w	fp, sl, r4
 800af88:	d00b      	beq.n	800afa2 <_svfiprintf_r+0x7a>
 800af8a:	465b      	mov	r3, fp
 800af8c:	4622      	mov	r2, r4
 800af8e:	4629      	mov	r1, r5
 800af90:	4638      	mov	r0, r7
 800af92:	f7ff ff6f 	bl	800ae74 <__ssputs_r>
 800af96:	3001      	adds	r0, #1
 800af98:	f000 80a9 	beq.w	800b0ee <_svfiprintf_r+0x1c6>
 800af9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af9e:	445a      	add	r2, fp
 800afa0:	9209      	str	r2, [sp, #36]	; 0x24
 800afa2:	f89a 3000 	ldrb.w	r3, [sl]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 80a1 	beq.w	800b0ee <_svfiprintf_r+0x1c6>
 800afac:	2300      	movs	r3, #0
 800afae:	f04f 32ff 	mov.w	r2, #4294967295
 800afb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afb6:	f10a 0a01 	add.w	sl, sl, #1
 800afba:	9304      	str	r3, [sp, #16]
 800afbc:	9307      	str	r3, [sp, #28]
 800afbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afc2:	931a      	str	r3, [sp, #104]	; 0x68
 800afc4:	4654      	mov	r4, sl
 800afc6:	2205      	movs	r2, #5
 800afc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afcc:	4850      	ldr	r0, [pc, #320]	; (800b110 <_svfiprintf_r+0x1e8>)
 800afce:	f7f5 f8ff 	bl	80001d0 <memchr>
 800afd2:	9a04      	ldr	r2, [sp, #16]
 800afd4:	b9d8      	cbnz	r0, 800b00e <_svfiprintf_r+0xe6>
 800afd6:	06d0      	lsls	r0, r2, #27
 800afd8:	bf44      	itt	mi
 800afda:	2320      	movmi	r3, #32
 800afdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afe0:	0711      	lsls	r1, r2, #28
 800afe2:	bf44      	itt	mi
 800afe4:	232b      	movmi	r3, #43	; 0x2b
 800afe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afea:	f89a 3000 	ldrb.w	r3, [sl]
 800afee:	2b2a      	cmp	r3, #42	; 0x2a
 800aff0:	d015      	beq.n	800b01e <_svfiprintf_r+0xf6>
 800aff2:	9a07      	ldr	r2, [sp, #28]
 800aff4:	4654      	mov	r4, sl
 800aff6:	2000      	movs	r0, #0
 800aff8:	f04f 0c0a 	mov.w	ip, #10
 800affc:	4621      	mov	r1, r4
 800affe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b002:	3b30      	subs	r3, #48	; 0x30
 800b004:	2b09      	cmp	r3, #9
 800b006:	d94d      	bls.n	800b0a4 <_svfiprintf_r+0x17c>
 800b008:	b1b0      	cbz	r0, 800b038 <_svfiprintf_r+0x110>
 800b00a:	9207      	str	r2, [sp, #28]
 800b00c:	e014      	b.n	800b038 <_svfiprintf_r+0x110>
 800b00e:	eba0 0308 	sub.w	r3, r0, r8
 800b012:	fa09 f303 	lsl.w	r3, r9, r3
 800b016:	4313      	orrs	r3, r2
 800b018:	9304      	str	r3, [sp, #16]
 800b01a:	46a2      	mov	sl, r4
 800b01c:	e7d2      	b.n	800afc4 <_svfiprintf_r+0x9c>
 800b01e:	9b03      	ldr	r3, [sp, #12]
 800b020:	1d19      	adds	r1, r3, #4
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	9103      	str	r1, [sp, #12]
 800b026:	2b00      	cmp	r3, #0
 800b028:	bfbb      	ittet	lt
 800b02a:	425b      	neglt	r3, r3
 800b02c:	f042 0202 	orrlt.w	r2, r2, #2
 800b030:	9307      	strge	r3, [sp, #28]
 800b032:	9307      	strlt	r3, [sp, #28]
 800b034:	bfb8      	it	lt
 800b036:	9204      	strlt	r2, [sp, #16]
 800b038:	7823      	ldrb	r3, [r4, #0]
 800b03a:	2b2e      	cmp	r3, #46	; 0x2e
 800b03c:	d10c      	bne.n	800b058 <_svfiprintf_r+0x130>
 800b03e:	7863      	ldrb	r3, [r4, #1]
 800b040:	2b2a      	cmp	r3, #42	; 0x2a
 800b042:	d134      	bne.n	800b0ae <_svfiprintf_r+0x186>
 800b044:	9b03      	ldr	r3, [sp, #12]
 800b046:	1d1a      	adds	r2, r3, #4
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	9203      	str	r2, [sp, #12]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	bfb8      	it	lt
 800b050:	f04f 33ff 	movlt.w	r3, #4294967295
 800b054:	3402      	adds	r4, #2
 800b056:	9305      	str	r3, [sp, #20]
 800b058:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b120 <_svfiprintf_r+0x1f8>
 800b05c:	7821      	ldrb	r1, [r4, #0]
 800b05e:	2203      	movs	r2, #3
 800b060:	4650      	mov	r0, sl
 800b062:	f7f5 f8b5 	bl	80001d0 <memchr>
 800b066:	b138      	cbz	r0, 800b078 <_svfiprintf_r+0x150>
 800b068:	9b04      	ldr	r3, [sp, #16]
 800b06a:	eba0 000a 	sub.w	r0, r0, sl
 800b06e:	2240      	movs	r2, #64	; 0x40
 800b070:	4082      	lsls	r2, r0
 800b072:	4313      	orrs	r3, r2
 800b074:	3401      	adds	r4, #1
 800b076:	9304      	str	r3, [sp, #16]
 800b078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b07c:	4825      	ldr	r0, [pc, #148]	; (800b114 <_svfiprintf_r+0x1ec>)
 800b07e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b082:	2206      	movs	r2, #6
 800b084:	f7f5 f8a4 	bl	80001d0 <memchr>
 800b088:	2800      	cmp	r0, #0
 800b08a:	d038      	beq.n	800b0fe <_svfiprintf_r+0x1d6>
 800b08c:	4b22      	ldr	r3, [pc, #136]	; (800b118 <_svfiprintf_r+0x1f0>)
 800b08e:	bb1b      	cbnz	r3, 800b0d8 <_svfiprintf_r+0x1b0>
 800b090:	9b03      	ldr	r3, [sp, #12]
 800b092:	3307      	adds	r3, #7
 800b094:	f023 0307 	bic.w	r3, r3, #7
 800b098:	3308      	adds	r3, #8
 800b09a:	9303      	str	r3, [sp, #12]
 800b09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b09e:	4433      	add	r3, r6
 800b0a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b0a2:	e768      	b.n	800af76 <_svfiprintf_r+0x4e>
 800b0a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0a8:	460c      	mov	r4, r1
 800b0aa:	2001      	movs	r0, #1
 800b0ac:	e7a6      	b.n	800affc <_svfiprintf_r+0xd4>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	3401      	adds	r4, #1
 800b0b2:	9305      	str	r3, [sp, #20]
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	f04f 0c0a 	mov.w	ip, #10
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0c0:	3a30      	subs	r2, #48	; 0x30
 800b0c2:	2a09      	cmp	r2, #9
 800b0c4:	d903      	bls.n	800b0ce <_svfiprintf_r+0x1a6>
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d0c6      	beq.n	800b058 <_svfiprintf_r+0x130>
 800b0ca:	9105      	str	r1, [sp, #20]
 800b0cc:	e7c4      	b.n	800b058 <_svfiprintf_r+0x130>
 800b0ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	e7f0      	b.n	800b0ba <_svfiprintf_r+0x192>
 800b0d8:	ab03      	add	r3, sp, #12
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	462a      	mov	r2, r5
 800b0de:	4b0f      	ldr	r3, [pc, #60]	; (800b11c <_svfiprintf_r+0x1f4>)
 800b0e0:	a904      	add	r1, sp, #16
 800b0e2:	4638      	mov	r0, r7
 800b0e4:	f7fd fe9c 	bl	8008e20 <_printf_float>
 800b0e8:	1c42      	adds	r2, r0, #1
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	d1d6      	bne.n	800b09c <_svfiprintf_r+0x174>
 800b0ee:	89ab      	ldrh	r3, [r5, #12]
 800b0f0:	065b      	lsls	r3, r3, #25
 800b0f2:	f53f af2d 	bmi.w	800af50 <_svfiprintf_r+0x28>
 800b0f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0f8:	b01d      	add	sp, #116	; 0x74
 800b0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fe:	ab03      	add	r3, sp, #12
 800b100:	9300      	str	r3, [sp, #0]
 800b102:	462a      	mov	r2, r5
 800b104:	4b05      	ldr	r3, [pc, #20]	; (800b11c <_svfiprintf_r+0x1f4>)
 800b106:	a904      	add	r1, sp, #16
 800b108:	4638      	mov	r0, r7
 800b10a:	f7fe f92d 	bl	8009368 <_printf_i>
 800b10e:	e7eb      	b.n	800b0e8 <_svfiprintf_r+0x1c0>
 800b110:	0800e804 	.word	0x0800e804
 800b114:	0800e80e 	.word	0x0800e80e
 800b118:	08008e21 	.word	0x08008e21
 800b11c:	0800ae75 	.word	0x0800ae75
 800b120:	0800e80a 	.word	0x0800e80a

0800b124 <__sflush_r>:
 800b124:	898a      	ldrh	r2, [r1, #12]
 800b126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b12a:	4605      	mov	r5, r0
 800b12c:	0710      	lsls	r0, r2, #28
 800b12e:	460c      	mov	r4, r1
 800b130:	d458      	bmi.n	800b1e4 <__sflush_r+0xc0>
 800b132:	684b      	ldr	r3, [r1, #4]
 800b134:	2b00      	cmp	r3, #0
 800b136:	dc05      	bgt.n	800b144 <__sflush_r+0x20>
 800b138:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	dc02      	bgt.n	800b144 <__sflush_r+0x20>
 800b13e:	2000      	movs	r0, #0
 800b140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b146:	2e00      	cmp	r6, #0
 800b148:	d0f9      	beq.n	800b13e <__sflush_r+0x1a>
 800b14a:	2300      	movs	r3, #0
 800b14c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b150:	682f      	ldr	r7, [r5, #0]
 800b152:	6a21      	ldr	r1, [r4, #32]
 800b154:	602b      	str	r3, [r5, #0]
 800b156:	d032      	beq.n	800b1be <__sflush_r+0x9a>
 800b158:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b15a:	89a3      	ldrh	r3, [r4, #12]
 800b15c:	075a      	lsls	r2, r3, #29
 800b15e:	d505      	bpl.n	800b16c <__sflush_r+0x48>
 800b160:	6863      	ldr	r3, [r4, #4]
 800b162:	1ac0      	subs	r0, r0, r3
 800b164:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b166:	b10b      	cbz	r3, 800b16c <__sflush_r+0x48>
 800b168:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b16a:	1ac0      	subs	r0, r0, r3
 800b16c:	2300      	movs	r3, #0
 800b16e:	4602      	mov	r2, r0
 800b170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b172:	6a21      	ldr	r1, [r4, #32]
 800b174:	4628      	mov	r0, r5
 800b176:	47b0      	blx	r6
 800b178:	1c43      	adds	r3, r0, #1
 800b17a:	89a3      	ldrh	r3, [r4, #12]
 800b17c:	d106      	bne.n	800b18c <__sflush_r+0x68>
 800b17e:	6829      	ldr	r1, [r5, #0]
 800b180:	291d      	cmp	r1, #29
 800b182:	d82b      	bhi.n	800b1dc <__sflush_r+0xb8>
 800b184:	4a29      	ldr	r2, [pc, #164]	; (800b22c <__sflush_r+0x108>)
 800b186:	410a      	asrs	r2, r1
 800b188:	07d6      	lsls	r6, r2, #31
 800b18a:	d427      	bmi.n	800b1dc <__sflush_r+0xb8>
 800b18c:	2200      	movs	r2, #0
 800b18e:	6062      	str	r2, [r4, #4]
 800b190:	04d9      	lsls	r1, r3, #19
 800b192:	6922      	ldr	r2, [r4, #16]
 800b194:	6022      	str	r2, [r4, #0]
 800b196:	d504      	bpl.n	800b1a2 <__sflush_r+0x7e>
 800b198:	1c42      	adds	r2, r0, #1
 800b19a:	d101      	bne.n	800b1a0 <__sflush_r+0x7c>
 800b19c:	682b      	ldr	r3, [r5, #0]
 800b19e:	b903      	cbnz	r3, 800b1a2 <__sflush_r+0x7e>
 800b1a0:	6560      	str	r0, [r4, #84]	; 0x54
 800b1a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1a4:	602f      	str	r7, [r5, #0]
 800b1a6:	2900      	cmp	r1, #0
 800b1a8:	d0c9      	beq.n	800b13e <__sflush_r+0x1a>
 800b1aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1ae:	4299      	cmp	r1, r3
 800b1b0:	d002      	beq.n	800b1b8 <__sflush_r+0x94>
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	f7ff fa96 	bl	800a6e4 <_free_r>
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	6360      	str	r0, [r4, #52]	; 0x34
 800b1bc:	e7c0      	b.n	800b140 <__sflush_r+0x1c>
 800b1be:	2301      	movs	r3, #1
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	47b0      	blx	r6
 800b1c4:	1c41      	adds	r1, r0, #1
 800b1c6:	d1c8      	bne.n	800b15a <__sflush_r+0x36>
 800b1c8:	682b      	ldr	r3, [r5, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d0c5      	beq.n	800b15a <__sflush_r+0x36>
 800b1ce:	2b1d      	cmp	r3, #29
 800b1d0:	d001      	beq.n	800b1d6 <__sflush_r+0xb2>
 800b1d2:	2b16      	cmp	r3, #22
 800b1d4:	d101      	bne.n	800b1da <__sflush_r+0xb6>
 800b1d6:	602f      	str	r7, [r5, #0]
 800b1d8:	e7b1      	b.n	800b13e <__sflush_r+0x1a>
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1e0:	81a3      	strh	r3, [r4, #12]
 800b1e2:	e7ad      	b.n	800b140 <__sflush_r+0x1c>
 800b1e4:	690f      	ldr	r7, [r1, #16]
 800b1e6:	2f00      	cmp	r7, #0
 800b1e8:	d0a9      	beq.n	800b13e <__sflush_r+0x1a>
 800b1ea:	0793      	lsls	r3, r2, #30
 800b1ec:	680e      	ldr	r6, [r1, #0]
 800b1ee:	bf08      	it	eq
 800b1f0:	694b      	ldreq	r3, [r1, #20]
 800b1f2:	600f      	str	r7, [r1, #0]
 800b1f4:	bf18      	it	ne
 800b1f6:	2300      	movne	r3, #0
 800b1f8:	eba6 0807 	sub.w	r8, r6, r7
 800b1fc:	608b      	str	r3, [r1, #8]
 800b1fe:	f1b8 0f00 	cmp.w	r8, #0
 800b202:	dd9c      	ble.n	800b13e <__sflush_r+0x1a>
 800b204:	6a21      	ldr	r1, [r4, #32]
 800b206:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b208:	4643      	mov	r3, r8
 800b20a:	463a      	mov	r2, r7
 800b20c:	4628      	mov	r0, r5
 800b20e:	47b0      	blx	r6
 800b210:	2800      	cmp	r0, #0
 800b212:	dc06      	bgt.n	800b222 <__sflush_r+0xfe>
 800b214:	89a3      	ldrh	r3, [r4, #12]
 800b216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b21a:	81a3      	strh	r3, [r4, #12]
 800b21c:	f04f 30ff 	mov.w	r0, #4294967295
 800b220:	e78e      	b.n	800b140 <__sflush_r+0x1c>
 800b222:	4407      	add	r7, r0
 800b224:	eba8 0800 	sub.w	r8, r8, r0
 800b228:	e7e9      	b.n	800b1fe <__sflush_r+0xda>
 800b22a:	bf00      	nop
 800b22c:	dfbffffe 	.word	0xdfbffffe

0800b230 <_fflush_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	690b      	ldr	r3, [r1, #16]
 800b234:	4605      	mov	r5, r0
 800b236:	460c      	mov	r4, r1
 800b238:	b913      	cbnz	r3, 800b240 <_fflush_r+0x10>
 800b23a:	2500      	movs	r5, #0
 800b23c:	4628      	mov	r0, r5
 800b23e:	bd38      	pop	{r3, r4, r5, pc}
 800b240:	b118      	cbz	r0, 800b24a <_fflush_r+0x1a>
 800b242:	6a03      	ldr	r3, [r0, #32]
 800b244:	b90b      	cbnz	r3, 800b24a <_fflush_r+0x1a>
 800b246:	f7fe fa2b 	bl	80096a0 <__sinit>
 800b24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d0f3      	beq.n	800b23a <_fflush_r+0xa>
 800b252:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b254:	07d0      	lsls	r0, r2, #31
 800b256:	d404      	bmi.n	800b262 <_fflush_r+0x32>
 800b258:	0599      	lsls	r1, r3, #22
 800b25a:	d402      	bmi.n	800b262 <_fflush_r+0x32>
 800b25c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b25e:	f7fe fbb7 	bl	80099d0 <__retarget_lock_acquire_recursive>
 800b262:	4628      	mov	r0, r5
 800b264:	4621      	mov	r1, r4
 800b266:	f7ff ff5d 	bl	800b124 <__sflush_r>
 800b26a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b26c:	07da      	lsls	r2, r3, #31
 800b26e:	4605      	mov	r5, r0
 800b270:	d4e4      	bmi.n	800b23c <_fflush_r+0xc>
 800b272:	89a3      	ldrh	r3, [r4, #12]
 800b274:	059b      	lsls	r3, r3, #22
 800b276:	d4e1      	bmi.n	800b23c <_fflush_r+0xc>
 800b278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b27a:	f7fe fbaa 	bl	80099d2 <__retarget_lock_release_recursive>
 800b27e:	e7dd      	b.n	800b23c <_fflush_r+0xc>

0800b280 <__assert_func>:
 800b280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b282:	4614      	mov	r4, r2
 800b284:	461a      	mov	r2, r3
 800b286:	4b09      	ldr	r3, [pc, #36]	; (800b2ac <__assert_func+0x2c>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4605      	mov	r5, r0
 800b28c:	68d8      	ldr	r0, [r3, #12]
 800b28e:	b14c      	cbz	r4, 800b2a4 <__assert_func+0x24>
 800b290:	4b07      	ldr	r3, [pc, #28]	; (800b2b0 <__assert_func+0x30>)
 800b292:	9100      	str	r1, [sp, #0]
 800b294:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b298:	4906      	ldr	r1, [pc, #24]	; (800b2b4 <__assert_func+0x34>)
 800b29a:	462b      	mov	r3, r5
 800b29c:	f000 f872 	bl	800b384 <fiprintf>
 800b2a0:	f7fd fc62 	bl	8008b68 <abort>
 800b2a4:	4b04      	ldr	r3, [pc, #16]	; (800b2b8 <__assert_func+0x38>)
 800b2a6:	461c      	mov	r4, r3
 800b2a8:	e7f3      	b.n	800b292 <__assert_func+0x12>
 800b2aa:	bf00      	nop
 800b2ac:	20000098 	.word	0x20000098
 800b2b0:	0800e81f 	.word	0x0800e81f
 800b2b4:	0800e82c 	.word	0x0800e82c
 800b2b8:	0800e85a 	.word	0x0800e85a

0800b2bc <_calloc_r>:
 800b2bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2be:	fba1 2402 	umull	r2, r4, r1, r2
 800b2c2:	b94c      	cbnz	r4, 800b2d8 <_calloc_r+0x1c>
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	9201      	str	r2, [sp, #4]
 800b2c8:	f7fd fc7e 	bl	8008bc8 <_malloc_r>
 800b2cc:	9a01      	ldr	r2, [sp, #4]
 800b2ce:	4605      	mov	r5, r0
 800b2d0:	b930      	cbnz	r0, 800b2e0 <_calloc_r+0x24>
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	b003      	add	sp, #12
 800b2d6:	bd30      	pop	{r4, r5, pc}
 800b2d8:	220c      	movs	r2, #12
 800b2da:	6002      	str	r2, [r0, #0]
 800b2dc:	2500      	movs	r5, #0
 800b2de:	e7f8      	b.n	800b2d2 <_calloc_r+0x16>
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	f7fe faa4 	bl	800982e <memset>
 800b2e6:	e7f4      	b.n	800b2d2 <_calloc_r+0x16>

0800b2e8 <__ascii_mbtowc>:
 800b2e8:	b082      	sub	sp, #8
 800b2ea:	b901      	cbnz	r1, 800b2ee <__ascii_mbtowc+0x6>
 800b2ec:	a901      	add	r1, sp, #4
 800b2ee:	b142      	cbz	r2, 800b302 <__ascii_mbtowc+0x1a>
 800b2f0:	b14b      	cbz	r3, 800b306 <__ascii_mbtowc+0x1e>
 800b2f2:	7813      	ldrb	r3, [r2, #0]
 800b2f4:	600b      	str	r3, [r1, #0]
 800b2f6:	7812      	ldrb	r2, [r2, #0]
 800b2f8:	1e10      	subs	r0, r2, #0
 800b2fa:	bf18      	it	ne
 800b2fc:	2001      	movne	r0, #1
 800b2fe:	b002      	add	sp, #8
 800b300:	4770      	bx	lr
 800b302:	4610      	mov	r0, r2
 800b304:	e7fb      	b.n	800b2fe <__ascii_mbtowc+0x16>
 800b306:	f06f 0001 	mvn.w	r0, #1
 800b30a:	e7f8      	b.n	800b2fe <__ascii_mbtowc+0x16>

0800b30c <_realloc_r>:
 800b30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b310:	4680      	mov	r8, r0
 800b312:	4614      	mov	r4, r2
 800b314:	460e      	mov	r6, r1
 800b316:	b921      	cbnz	r1, 800b322 <_realloc_r+0x16>
 800b318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b31c:	4611      	mov	r1, r2
 800b31e:	f7fd bc53 	b.w	8008bc8 <_malloc_r>
 800b322:	b92a      	cbnz	r2, 800b330 <_realloc_r+0x24>
 800b324:	f7ff f9de 	bl	800a6e4 <_free_r>
 800b328:	4625      	mov	r5, r4
 800b32a:	4628      	mov	r0, r5
 800b32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b330:	f000 f83a 	bl	800b3a8 <_malloc_usable_size_r>
 800b334:	4284      	cmp	r4, r0
 800b336:	4607      	mov	r7, r0
 800b338:	d802      	bhi.n	800b340 <_realloc_r+0x34>
 800b33a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b33e:	d812      	bhi.n	800b366 <_realloc_r+0x5a>
 800b340:	4621      	mov	r1, r4
 800b342:	4640      	mov	r0, r8
 800b344:	f7fd fc40 	bl	8008bc8 <_malloc_r>
 800b348:	4605      	mov	r5, r0
 800b34a:	2800      	cmp	r0, #0
 800b34c:	d0ed      	beq.n	800b32a <_realloc_r+0x1e>
 800b34e:	42bc      	cmp	r4, r7
 800b350:	4622      	mov	r2, r4
 800b352:	4631      	mov	r1, r6
 800b354:	bf28      	it	cs
 800b356:	463a      	movcs	r2, r7
 800b358:	f7fe fb3c 	bl	80099d4 <memcpy>
 800b35c:	4631      	mov	r1, r6
 800b35e:	4640      	mov	r0, r8
 800b360:	f7ff f9c0 	bl	800a6e4 <_free_r>
 800b364:	e7e1      	b.n	800b32a <_realloc_r+0x1e>
 800b366:	4635      	mov	r5, r6
 800b368:	e7df      	b.n	800b32a <_realloc_r+0x1e>

0800b36a <__ascii_wctomb>:
 800b36a:	b149      	cbz	r1, 800b380 <__ascii_wctomb+0x16>
 800b36c:	2aff      	cmp	r2, #255	; 0xff
 800b36e:	bf85      	ittet	hi
 800b370:	238a      	movhi	r3, #138	; 0x8a
 800b372:	6003      	strhi	r3, [r0, #0]
 800b374:	700a      	strbls	r2, [r1, #0]
 800b376:	f04f 30ff 	movhi.w	r0, #4294967295
 800b37a:	bf98      	it	ls
 800b37c:	2001      	movls	r0, #1
 800b37e:	4770      	bx	lr
 800b380:	4608      	mov	r0, r1
 800b382:	4770      	bx	lr

0800b384 <fiprintf>:
 800b384:	b40e      	push	{r1, r2, r3}
 800b386:	b503      	push	{r0, r1, lr}
 800b388:	4601      	mov	r1, r0
 800b38a:	ab03      	add	r3, sp, #12
 800b38c:	4805      	ldr	r0, [pc, #20]	; (800b3a4 <fiprintf+0x20>)
 800b38e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b392:	6800      	ldr	r0, [r0, #0]
 800b394:	9301      	str	r3, [sp, #4]
 800b396:	f000 f839 	bl	800b40c <_vfiprintf_r>
 800b39a:	b002      	add	sp, #8
 800b39c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3a0:	b003      	add	sp, #12
 800b3a2:	4770      	bx	lr
 800b3a4:	20000098 	.word	0x20000098

0800b3a8 <_malloc_usable_size_r>:
 800b3a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3ac:	1f18      	subs	r0, r3, #4
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	bfbc      	itt	lt
 800b3b2:	580b      	ldrlt	r3, [r1, r0]
 800b3b4:	18c0      	addlt	r0, r0, r3
 800b3b6:	4770      	bx	lr

0800b3b8 <__sfputc_r>:
 800b3b8:	6893      	ldr	r3, [r2, #8]
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	b410      	push	{r4}
 800b3c0:	6093      	str	r3, [r2, #8]
 800b3c2:	da08      	bge.n	800b3d6 <__sfputc_r+0x1e>
 800b3c4:	6994      	ldr	r4, [r2, #24]
 800b3c6:	42a3      	cmp	r3, r4
 800b3c8:	db01      	blt.n	800b3ce <__sfputc_r+0x16>
 800b3ca:	290a      	cmp	r1, #10
 800b3cc:	d103      	bne.n	800b3d6 <__sfputc_r+0x1e>
 800b3ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3d2:	f000 b935 	b.w	800b640 <__swbuf_r>
 800b3d6:	6813      	ldr	r3, [r2, #0]
 800b3d8:	1c58      	adds	r0, r3, #1
 800b3da:	6010      	str	r0, [r2, #0]
 800b3dc:	7019      	strb	r1, [r3, #0]
 800b3de:	4608      	mov	r0, r1
 800b3e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <__sfputs_r>:
 800b3e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e8:	4606      	mov	r6, r0
 800b3ea:	460f      	mov	r7, r1
 800b3ec:	4614      	mov	r4, r2
 800b3ee:	18d5      	adds	r5, r2, r3
 800b3f0:	42ac      	cmp	r4, r5
 800b3f2:	d101      	bne.n	800b3f8 <__sfputs_r+0x12>
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	e007      	b.n	800b408 <__sfputs_r+0x22>
 800b3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3fc:	463a      	mov	r2, r7
 800b3fe:	4630      	mov	r0, r6
 800b400:	f7ff ffda 	bl	800b3b8 <__sfputc_r>
 800b404:	1c43      	adds	r3, r0, #1
 800b406:	d1f3      	bne.n	800b3f0 <__sfputs_r+0xa>
 800b408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b40c <_vfiprintf_r>:
 800b40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b410:	460d      	mov	r5, r1
 800b412:	b09d      	sub	sp, #116	; 0x74
 800b414:	4614      	mov	r4, r2
 800b416:	4698      	mov	r8, r3
 800b418:	4606      	mov	r6, r0
 800b41a:	b118      	cbz	r0, 800b424 <_vfiprintf_r+0x18>
 800b41c:	6a03      	ldr	r3, [r0, #32]
 800b41e:	b90b      	cbnz	r3, 800b424 <_vfiprintf_r+0x18>
 800b420:	f7fe f93e 	bl	80096a0 <__sinit>
 800b424:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b426:	07d9      	lsls	r1, r3, #31
 800b428:	d405      	bmi.n	800b436 <_vfiprintf_r+0x2a>
 800b42a:	89ab      	ldrh	r3, [r5, #12]
 800b42c:	059a      	lsls	r2, r3, #22
 800b42e:	d402      	bmi.n	800b436 <_vfiprintf_r+0x2a>
 800b430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b432:	f7fe facd 	bl	80099d0 <__retarget_lock_acquire_recursive>
 800b436:	89ab      	ldrh	r3, [r5, #12]
 800b438:	071b      	lsls	r3, r3, #28
 800b43a:	d501      	bpl.n	800b440 <_vfiprintf_r+0x34>
 800b43c:	692b      	ldr	r3, [r5, #16]
 800b43e:	b99b      	cbnz	r3, 800b468 <_vfiprintf_r+0x5c>
 800b440:	4629      	mov	r1, r5
 800b442:	4630      	mov	r0, r6
 800b444:	f000 f93a 	bl	800b6bc <__swsetup_r>
 800b448:	b170      	cbz	r0, 800b468 <_vfiprintf_r+0x5c>
 800b44a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b44c:	07dc      	lsls	r4, r3, #31
 800b44e:	d504      	bpl.n	800b45a <_vfiprintf_r+0x4e>
 800b450:	f04f 30ff 	mov.w	r0, #4294967295
 800b454:	b01d      	add	sp, #116	; 0x74
 800b456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b45a:	89ab      	ldrh	r3, [r5, #12]
 800b45c:	0598      	lsls	r0, r3, #22
 800b45e:	d4f7      	bmi.n	800b450 <_vfiprintf_r+0x44>
 800b460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b462:	f7fe fab6 	bl	80099d2 <__retarget_lock_release_recursive>
 800b466:	e7f3      	b.n	800b450 <_vfiprintf_r+0x44>
 800b468:	2300      	movs	r3, #0
 800b46a:	9309      	str	r3, [sp, #36]	; 0x24
 800b46c:	2320      	movs	r3, #32
 800b46e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b472:	f8cd 800c 	str.w	r8, [sp, #12]
 800b476:	2330      	movs	r3, #48	; 0x30
 800b478:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b62c <_vfiprintf_r+0x220>
 800b47c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b480:	f04f 0901 	mov.w	r9, #1
 800b484:	4623      	mov	r3, r4
 800b486:	469a      	mov	sl, r3
 800b488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b48c:	b10a      	cbz	r2, 800b492 <_vfiprintf_r+0x86>
 800b48e:	2a25      	cmp	r2, #37	; 0x25
 800b490:	d1f9      	bne.n	800b486 <_vfiprintf_r+0x7a>
 800b492:	ebba 0b04 	subs.w	fp, sl, r4
 800b496:	d00b      	beq.n	800b4b0 <_vfiprintf_r+0xa4>
 800b498:	465b      	mov	r3, fp
 800b49a:	4622      	mov	r2, r4
 800b49c:	4629      	mov	r1, r5
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f7ff ffa1 	bl	800b3e6 <__sfputs_r>
 800b4a4:	3001      	adds	r0, #1
 800b4a6:	f000 80a9 	beq.w	800b5fc <_vfiprintf_r+0x1f0>
 800b4aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4ac:	445a      	add	r2, fp
 800b4ae:	9209      	str	r2, [sp, #36]	; 0x24
 800b4b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f000 80a1 	beq.w	800b5fc <_vfiprintf_r+0x1f0>
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4c4:	f10a 0a01 	add.w	sl, sl, #1
 800b4c8:	9304      	str	r3, [sp, #16]
 800b4ca:	9307      	str	r3, [sp, #28]
 800b4cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4d0:	931a      	str	r3, [sp, #104]	; 0x68
 800b4d2:	4654      	mov	r4, sl
 800b4d4:	2205      	movs	r2, #5
 800b4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4da:	4854      	ldr	r0, [pc, #336]	; (800b62c <_vfiprintf_r+0x220>)
 800b4dc:	f7f4 fe78 	bl	80001d0 <memchr>
 800b4e0:	9a04      	ldr	r2, [sp, #16]
 800b4e2:	b9d8      	cbnz	r0, 800b51c <_vfiprintf_r+0x110>
 800b4e4:	06d1      	lsls	r1, r2, #27
 800b4e6:	bf44      	itt	mi
 800b4e8:	2320      	movmi	r3, #32
 800b4ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ee:	0713      	lsls	r3, r2, #28
 800b4f0:	bf44      	itt	mi
 800b4f2:	232b      	movmi	r3, #43	; 0x2b
 800b4f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b4fc:	2b2a      	cmp	r3, #42	; 0x2a
 800b4fe:	d015      	beq.n	800b52c <_vfiprintf_r+0x120>
 800b500:	9a07      	ldr	r2, [sp, #28]
 800b502:	4654      	mov	r4, sl
 800b504:	2000      	movs	r0, #0
 800b506:	f04f 0c0a 	mov.w	ip, #10
 800b50a:	4621      	mov	r1, r4
 800b50c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b510:	3b30      	subs	r3, #48	; 0x30
 800b512:	2b09      	cmp	r3, #9
 800b514:	d94d      	bls.n	800b5b2 <_vfiprintf_r+0x1a6>
 800b516:	b1b0      	cbz	r0, 800b546 <_vfiprintf_r+0x13a>
 800b518:	9207      	str	r2, [sp, #28]
 800b51a:	e014      	b.n	800b546 <_vfiprintf_r+0x13a>
 800b51c:	eba0 0308 	sub.w	r3, r0, r8
 800b520:	fa09 f303 	lsl.w	r3, r9, r3
 800b524:	4313      	orrs	r3, r2
 800b526:	9304      	str	r3, [sp, #16]
 800b528:	46a2      	mov	sl, r4
 800b52a:	e7d2      	b.n	800b4d2 <_vfiprintf_r+0xc6>
 800b52c:	9b03      	ldr	r3, [sp, #12]
 800b52e:	1d19      	adds	r1, r3, #4
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	9103      	str	r1, [sp, #12]
 800b534:	2b00      	cmp	r3, #0
 800b536:	bfbb      	ittet	lt
 800b538:	425b      	neglt	r3, r3
 800b53a:	f042 0202 	orrlt.w	r2, r2, #2
 800b53e:	9307      	strge	r3, [sp, #28]
 800b540:	9307      	strlt	r3, [sp, #28]
 800b542:	bfb8      	it	lt
 800b544:	9204      	strlt	r2, [sp, #16]
 800b546:	7823      	ldrb	r3, [r4, #0]
 800b548:	2b2e      	cmp	r3, #46	; 0x2e
 800b54a:	d10c      	bne.n	800b566 <_vfiprintf_r+0x15a>
 800b54c:	7863      	ldrb	r3, [r4, #1]
 800b54e:	2b2a      	cmp	r3, #42	; 0x2a
 800b550:	d134      	bne.n	800b5bc <_vfiprintf_r+0x1b0>
 800b552:	9b03      	ldr	r3, [sp, #12]
 800b554:	1d1a      	adds	r2, r3, #4
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	9203      	str	r2, [sp, #12]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	bfb8      	it	lt
 800b55e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b562:	3402      	adds	r4, #2
 800b564:	9305      	str	r3, [sp, #20]
 800b566:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b63c <_vfiprintf_r+0x230>
 800b56a:	7821      	ldrb	r1, [r4, #0]
 800b56c:	2203      	movs	r2, #3
 800b56e:	4650      	mov	r0, sl
 800b570:	f7f4 fe2e 	bl	80001d0 <memchr>
 800b574:	b138      	cbz	r0, 800b586 <_vfiprintf_r+0x17a>
 800b576:	9b04      	ldr	r3, [sp, #16]
 800b578:	eba0 000a 	sub.w	r0, r0, sl
 800b57c:	2240      	movs	r2, #64	; 0x40
 800b57e:	4082      	lsls	r2, r0
 800b580:	4313      	orrs	r3, r2
 800b582:	3401      	adds	r4, #1
 800b584:	9304      	str	r3, [sp, #16]
 800b586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b58a:	4829      	ldr	r0, [pc, #164]	; (800b630 <_vfiprintf_r+0x224>)
 800b58c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b590:	2206      	movs	r2, #6
 800b592:	f7f4 fe1d 	bl	80001d0 <memchr>
 800b596:	2800      	cmp	r0, #0
 800b598:	d03f      	beq.n	800b61a <_vfiprintf_r+0x20e>
 800b59a:	4b26      	ldr	r3, [pc, #152]	; (800b634 <_vfiprintf_r+0x228>)
 800b59c:	bb1b      	cbnz	r3, 800b5e6 <_vfiprintf_r+0x1da>
 800b59e:	9b03      	ldr	r3, [sp, #12]
 800b5a0:	3307      	adds	r3, #7
 800b5a2:	f023 0307 	bic.w	r3, r3, #7
 800b5a6:	3308      	adds	r3, #8
 800b5a8:	9303      	str	r3, [sp, #12]
 800b5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ac:	443b      	add	r3, r7
 800b5ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b5b0:	e768      	b.n	800b484 <_vfiprintf_r+0x78>
 800b5b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	2001      	movs	r0, #1
 800b5ba:	e7a6      	b.n	800b50a <_vfiprintf_r+0xfe>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	3401      	adds	r4, #1
 800b5c0:	9305      	str	r3, [sp, #20]
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	f04f 0c0a 	mov.w	ip, #10
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5ce:	3a30      	subs	r2, #48	; 0x30
 800b5d0:	2a09      	cmp	r2, #9
 800b5d2:	d903      	bls.n	800b5dc <_vfiprintf_r+0x1d0>
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d0c6      	beq.n	800b566 <_vfiprintf_r+0x15a>
 800b5d8:	9105      	str	r1, [sp, #20]
 800b5da:	e7c4      	b.n	800b566 <_vfiprintf_r+0x15a>
 800b5dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e7f0      	b.n	800b5c8 <_vfiprintf_r+0x1bc>
 800b5e6:	ab03      	add	r3, sp, #12
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	462a      	mov	r2, r5
 800b5ec:	4b12      	ldr	r3, [pc, #72]	; (800b638 <_vfiprintf_r+0x22c>)
 800b5ee:	a904      	add	r1, sp, #16
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f7fd fc15 	bl	8008e20 <_printf_float>
 800b5f6:	4607      	mov	r7, r0
 800b5f8:	1c78      	adds	r0, r7, #1
 800b5fa:	d1d6      	bne.n	800b5aa <_vfiprintf_r+0x19e>
 800b5fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5fe:	07d9      	lsls	r1, r3, #31
 800b600:	d405      	bmi.n	800b60e <_vfiprintf_r+0x202>
 800b602:	89ab      	ldrh	r3, [r5, #12]
 800b604:	059a      	lsls	r2, r3, #22
 800b606:	d402      	bmi.n	800b60e <_vfiprintf_r+0x202>
 800b608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b60a:	f7fe f9e2 	bl	80099d2 <__retarget_lock_release_recursive>
 800b60e:	89ab      	ldrh	r3, [r5, #12]
 800b610:	065b      	lsls	r3, r3, #25
 800b612:	f53f af1d 	bmi.w	800b450 <_vfiprintf_r+0x44>
 800b616:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b618:	e71c      	b.n	800b454 <_vfiprintf_r+0x48>
 800b61a:	ab03      	add	r3, sp, #12
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	462a      	mov	r2, r5
 800b620:	4b05      	ldr	r3, [pc, #20]	; (800b638 <_vfiprintf_r+0x22c>)
 800b622:	a904      	add	r1, sp, #16
 800b624:	4630      	mov	r0, r6
 800b626:	f7fd fe9f 	bl	8009368 <_printf_i>
 800b62a:	e7e4      	b.n	800b5f6 <_vfiprintf_r+0x1ea>
 800b62c:	0800e804 	.word	0x0800e804
 800b630:	0800e80e 	.word	0x0800e80e
 800b634:	08008e21 	.word	0x08008e21
 800b638:	0800b3e7 	.word	0x0800b3e7
 800b63c:	0800e80a 	.word	0x0800e80a

0800b640 <__swbuf_r>:
 800b640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b642:	460e      	mov	r6, r1
 800b644:	4614      	mov	r4, r2
 800b646:	4605      	mov	r5, r0
 800b648:	b118      	cbz	r0, 800b652 <__swbuf_r+0x12>
 800b64a:	6a03      	ldr	r3, [r0, #32]
 800b64c:	b90b      	cbnz	r3, 800b652 <__swbuf_r+0x12>
 800b64e:	f7fe f827 	bl	80096a0 <__sinit>
 800b652:	69a3      	ldr	r3, [r4, #24]
 800b654:	60a3      	str	r3, [r4, #8]
 800b656:	89a3      	ldrh	r3, [r4, #12]
 800b658:	071a      	lsls	r2, r3, #28
 800b65a:	d525      	bpl.n	800b6a8 <__swbuf_r+0x68>
 800b65c:	6923      	ldr	r3, [r4, #16]
 800b65e:	b31b      	cbz	r3, 800b6a8 <__swbuf_r+0x68>
 800b660:	6823      	ldr	r3, [r4, #0]
 800b662:	6922      	ldr	r2, [r4, #16]
 800b664:	1a98      	subs	r0, r3, r2
 800b666:	6963      	ldr	r3, [r4, #20]
 800b668:	b2f6      	uxtb	r6, r6
 800b66a:	4283      	cmp	r3, r0
 800b66c:	4637      	mov	r7, r6
 800b66e:	dc04      	bgt.n	800b67a <__swbuf_r+0x3a>
 800b670:	4621      	mov	r1, r4
 800b672:	4628      	mov	r0, r5
 800b674:	f7ff fddc 	bl	800b230 <_fflush_r>
 800b678:	b9e0      	cbnz	r0, 800b6b4 <__swbuf_r+0x74>
 800b67a:	68a3      	ldr	r3, [r4, #8]
 800b67c:	3b01      	subs	r3, #1
 800b67e:	60a3      	str	r3, [r4, #8]
 800b680:	6823      	ldr	r3, [r4, #0]
 800b682:	1c5a      	adds	r2, r3, #1
 800b684:	6022      	str	r2, [r4, #0]
 800b686:	701e      	strb	r6, [r3, #0]
 800b688:	6962      	ldr	r2, [r4, #20]
 800b68a:	1c43      	adds	r3, r0, #1
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d004      	beq.n	800b69a <__swbuf_r+0x5a>
 800b690:	89a3      	ldrh	r3, [r4, #12]
 800b692:	07db      	lsls	r3, r3, #31
 800b694:	d506      	bpl.n	800b6a4 <__swbuf_r+0x64>
 800b696:	2e0a      	cmp	r6, #10
 800b698:	d104      	bne.n	800b6a4 <__swbuf_r+0x64>
 800b69a:	4621      	mov	r1, r4
 800b69c:	4628      	mov	r0, r5
 800b69e:	f7ff fdc7 	bl	800b230 <_fflush_r>
 800b6a2:	b938      	cbnz	r0, 800b6b4 <__swbuf_r+0x74>
 800b6a4:	4638      	mov	r0, r7
 800b6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6a8:	4621      	mov	r1, r4
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	f000 f806 	bl	800b6bc <__swsetup_r>
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	d0d5      	beq.n	800b660 <__swbuf_r+0x20>
 800b6b4:	f04f 37ff 	mov.w	r7, #4294967295
 800b6b8:	e7f4      	b.n	800b6a4 <__swbuf_r+0x64>
	...

0800b6bc <__swsetup_r>:
 800b6bc:	b538      	push	{r3, r4, r5, lr}
 800b6be:	4b2a      	ldr	r3, [pc, #168]	; (800b768 <__swsetup_r+0xac>)
 800b6c0:	4605      	mov	r5, r0
 800b6c2:	6818      	ldr	r0, [r3, #0]
 800b6c4:	460c      	mov	r4, r1
 800b6c6:	b118      	cbz	r0, 800b6d0 <__swsetup_r+0x14>
 800b6c8:	6a03      	ldr	r3, [r0, #32]
 800b6ca:	b90b      	cbnz	r3, 800b6d0 <__swsetup_r+0x14>
 800b6cc:	f7fd ffe8 	bl	80096a0 <__sinit>
 800b6d0:	89a3      	ldrh	r3, [r4, #12]
 800b6d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6d6:	0718      	lsls	r0, r3, #28
 800b6d8:	d422      	bmi.n	800b720 <__swsetup_r+0x64>
 800b6da:	06d9      	lsls	r1, r3, #27
 800b6dc:	d407      	bmi.n	800b6ee <__swsetup_r+0x32>
 800b6de:	2309      	movs	r3, #9
 800b6e0:	602b      	str	r3, [r5, #0]
 800b6e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6e6:	81a3      	strh	r3, [r4, #12]
 800b6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ec:	e034      	b.n	800b758 <__swsetup_r+0x9c>
 800b6ee:	0758      	lsls	r0, r3, #29
 800b6f0:	d512      	bpl.n	800b718 <__swsetup_r+0x5c>
 800b6f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6f4:	b141      	cbz	r1, 800b708 <__swsetup_r+0x4c>
 800b6f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6fa:	4299      	cmp	r1, r3
 800b6fc:	d002      	beq.n	800b704 <__swsetup_r+0x48>
 800b6fe:	4628      	mov	r0, r5
 800b700:	f7fe fff0 	bl	800a6e4 <_free_r>
 800b704:	2300      	movs	r3, #0
 800b706:	6363      	str	r3, [r4, #52]	; 0x34
 800b708:	89a3      	ldrh	r3, [r4, #12]
 800b70a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b70e:	81a3      	strh	r3, [r4, #12]
 800b710:	2300      	movs	r3, #0
 800b712:	6063      	str	r3, [r4, #4]
 800b714:	6923      	ldr	r3, [r4, #16]
 800b716:	6023      	str	r3, [r4, #0]
 800b718:	89a3      	ldrh	r3, [r4, #12]
 800b71a:	f043 0308 	orr.w	r3, r3, #8
 800b71e:	81a3      	strh	r3, [r4, #12]
 800b720:	6923      	ldr	r3, [r4, #16]
 800b722:	b94b      	cbnz	r3, 800b738 <__swsetup_r+0x7c>
 800b724:	89a3      	ldrh	r3, [r4, #12]
 800b726:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b72a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b72e:	d003      	beq.n	800b738 <__swsetup_r+0x7c>
 800b730:	4621      	mov	r1, r4
 800b732:	4628      	mov	r0, r5
 800b734:	f000 f840 	bl	800b7b8 <__smakebuf_r>
 800b738:	89a0      	ldrh	r0, [r4, #12]
 800b73a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b73e:	f010 0301 	ands.w	r3, r0, #1
 800b742:	d00a      	beq.n	800b75a <__swsetup_r+0x9e>
 800b744:	2300      	movs	r3, #0
 800b746:	60a3      	str	r3, [r4, #8]
 800b748:	6963      	ldr	r3, [r4, #20]
 800b74a:	425b      	negs	r3, r3
 800b74c:	61a3      	str	r3, [r4, #24]
 800b74e:	6923      	ldr	r3, [r4, #16]
 800b750:	b943      	cbnz	r3, 800b764 <__swsetup_r+0xa8>
 800b752:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b756:	d1c4      	bne.n	800b6e2 <__swsetup_r+0x26>
 800b758:	bd38      	pop	{r3, r4, r5, pc}
 800b75a:	0781      	lsls	r1, r0, #30
 800b75c:	bf58      	it	pl
 800b75e:	6963      	ldrpl	r3, [r4, #20]
 800b760:	60a3      	str	r3, [r4, #8]
 800b762:	e7f4      	b.n	800b74e <__swsetup_r+0x92>
 800b764:	2000      	movs	r0, #0
 800b766:	e7f7      	b.n	800b758 <__swsetup_r+0x9c>
 800b768:	20000098 	.word	0x20000098

0800b76c <__swhatbuf_r>:
 800b76c:	b570      	push	{r4, r5, r6, lr}
 800b76e:	460c      	mov	r4, r1
 800b770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b774:	2900      	cmp	r1, #0
 800b776:	b096      	sub	sp, #88	; 0x58
 800b778:	4615      	mov	r5, r2
 800b77a:	461e      	mov	r6, r3
 800b77c:	da0d      	bge.n	800b79a <__swhatbuf_r+0x2e>
 800b77e:	89a3      	ldrh	r3, [r4, #12]
 800b780:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b784:	f04f 0100 	mov.w	r1, #0
 800b788:	bf0c      	ite	eq
 800b78a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b78e:	2340      	movne	r3, #64	; 0x40
 800b790:	2000      	movs	r0, #0
 800b792:	6031      	str	r1, [r6, #0]
 800b794:	602b      	str	r3, [r5, #0]
 800b796:	b016      	add	sp, #88	; 0x58
 800b798:	bd70      	pop	{r4, r5, r6, pc}
 800b79a:	466a      	mov	r2, sp
 800b79c:	f000 f848 	bl	800b830 <_fstat_r>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	dbec      	blt.n	800b77e <__swhatbuf_r+0x12>
 800b7a4:	9901      	ldr	r1, [sp, #4]
 800b7a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b7aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b7ae:	4259      	negs	r1, r3
 800b7b0:	4159      	adcs	r1, r3
 800b7b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7b6:	e7eb      	b.n	800b790 <__swhatbuf_r+0x24>

0800b7b8 <__smakebuf_r>:
 800b7b8:	898b      	ldrh	r3, [r1, #12]
 800b7ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7bc:	079d      	lsls	r5, r3, #30
 800b7be:	4606      	mov	r6, r0
 800b7c0:	460c      	mov	r4, r1
 800b7c2:	d507      	bpl.n	800b7d4 <__smakebuf_r+0x1c>
 800b7c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7c8:	6023      	str	r3, [r4, #0]
 800b7ca:	6123      	str	r3, [r4, #16]
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	6163      	str	r3, [r4, #20]
 800b7d0:	b002      	add	sp, #8
 800b7d2:	bd70      	pop	{r4, r5, r6, pc}
 800b7d4:	ab01      	add	r3, sp, #4
 800b7d6:	466a      	mov	r2, sp
 800b7d8:	f7ff ffc8 	bl	800b76c <__swhatbuf_r>
 800b7dc:	9900      	ldr	r1, [sp, #0]
 800b7de:	4605      	mov	r5, r0
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f7fd f9f1 	bl	8008bc8 <_malloc_r>
 800b7e6:	b948      	cbnz	r0, 800b7fc <__smakebuf_r+0x44>
 800b7e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ec:	059a      	lsls	r2, r3, #22
 800b7ee:	d4ef      	bmi.n	800b7d0 <__smakebuf_r+0x18>
 800b7f0:	f023 0303 	bic.w	r3, r3, #3
 800b7f4:	f043 0302 	orr.w	r3, r3, #2
 800b7f8:	81a3      	strh	r3, [r4, #12]
 800b7fa:	e7e3      	b.n	800b7c4 <__smakebuf_r+0xc>
 800b7fc:	89a3      	ldrh	r3, [r4, #12]
 800b7fe:	6020      	str	r0, [r4, #0]
 800b800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b804:	81a3      	strh	r3, [r4, #12]
 800b806:	9b00      	ldr	r3, [sp, #0]
 800b808:	6163      	str	r3, [r4, #20]
 800b80a:	9b01      	ldr	r3, [sp, #4]
 800b80c:	6120      	str	r0, [r4, #16]
 800b80e:	b15b      	cbz	r3, 800b828 <__smakebuf_r+0x70>
 800b810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b814:	4630      	mov	r0, r6
 800b816:	f000 f81d 	bl	800b854 <_isatty_r>
 800b81a:	b128      	cbz	r0, 800b828 <__smakebuf_r+0x70>
 800b81c:	89a3      	ldrh	r3, [r4, #12]
 800b81e:	f023 0303 	bic.w	r3, r3, #3
 800b822:	f043 0301 	orr.w	r3, r3, #1
 800b826:	81a3      	strh	r3, [r4, #12]
 800b828:	89a3      	ldrh	r3, [r4, #12]
 800b82a:	431d      	orrs	r5, r3
 800b82c:	81a5      	strh	r5, [r4, #12]
 800b82e:	e7cf      	b.n	800b7d0 <__smakebuf_r+0x18>

0800b830 <_fstat_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	4d07      	ldr	r5, [pc, #28]	; (800b850 <_fstat_r+0x20>)
 800b834:	2300      	movs	r3, #0
 800b836:	4604      	mov	r4, r0
 800b838:	4608      	mov	r0, r1
 800b83a:	4611      	mov	r1, r2
 800b83c:	602b      	str	r3, [r5, #0]
 800b83e:	f7f6 fc5c 	bl	80020fa <_fstat>
 800b842:	1c43      	adds	r3, r0, #1
 800b844:	d102      	bne.n	800b84c <_fstat_r+0x1c>
 800b846:	682b      	ldr	r3, [r5, #0]
 800b848:	b103      	cbz	r3, 800b84c <_fstat_r+0x1c>
 800b84a:	6023      	str	r3, [r4, #0]
 800b84c:	bd38      	pop	{r3, r4, r5, pc}
 800b84e:	bf00      	nop
 800b850:	200009b4 	.word	0x200009b4

0800b854 <_isatty_r>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	4d06      	ldr	r5, [pc, #24]	; (800b870 <_isatty_r+0x1c>)
 800b858:	2300      	movs	r3, #0
 800b85a:	4604      	mov	r4, r0
 800b85c:	4608      	mov	r0, r1
 800b85e:	602b      	str	r3, [r5, #0]
 800b860:	f7f6 fc5b 	bl	800211a <_isatty>
 800b864:	1c43      	adds	r3, r0, #1
 800b866:	d102      	bne.n	800b86e <_isatty_r+0x1a>
 800b868:	682b      	ldr	r3, [r5, #0]
 800b86a:	b103      	cbz	r3, 800b86e <_isatty_r+0x1a>
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	bd38      	pop	{r3, r4, r5, pc}
 800b870:	200009b4 	.word	0x200009b4

0800b874 <_init>:
 800b874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b876:	bf00      	nop
 800b878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b87a:	bc08      	pop	{r3}
 800b87c:	469e      	mov	lr, r3
 800b87e:	4770      	bx	lr

0800b880 <_fini>:
 800b880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b882:	bf00      	nop
 800b884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b886:	bc08      	pop	{r3}
 800b888:	469e      	mov	lr, r3
 800b88a:	4770      	bx	lr
