
MicromouseFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  08006fdc  08006fdc  00016fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075f8  080075f8  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080075f8  080075f8  000175f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007600  08007600  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007600  08007600  00017600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007604  08007604  00017604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08007608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          000015d4  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200015f8  200015f8  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014cb5  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003191  00000000  00000000  00034d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001190  00000000  00000000  00037ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000da1  00000000  00000000  00039070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025afd  00000000  00000000  00039e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018427  00000000  00000000  0005f90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d2b18  00000000  00000000  00077d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004890  00000000  00000000  0014a850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0014f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006fc4 	.word	0x08006fc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08006fc4 	.word	0x08006fc4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f001 facc 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f838 	bl	8000540 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 80004d0:	4b18      	ldr	r3, [pc, #96]	; (8000534 <main+0x70>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 fbdd 	bl	8000c94 <MX_GPIO_Init>
  MX_DMA_Init();
 80004da:	f000 fbbb 	bl	8000c54 <MX_DMA_Init>
  MX_SPI1_Init();
 80004de:	f000 f8eb 	bl	80006b8 <MX_SPI1_Init>
  MX_TIM4_Init();
 80004e2:	f000 fa23 	bl	800092c <MX_TIM4_Init>
  MX_ADC1_Init();
 80004e6:	f000 f895 	bl	8000614 <MX_ADC1_Init>
  MX_SPI2_Init();
 80004ea:	f000 f91b 	bl	8000724 <MX_SPI2_Init>
  MX_TIM2_Init();
 80004ee:	f000 f9a1 	bl	8000834 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004f2:	f000 fb85 	bl	8000c00 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80004f6:	f000 fb05 	bl	8000b04 <MX_TIM6_Init>
  MX_TIM14_Init();
 80004fa:	f000 fb5d 	bl	8000bb8 <MX_TIM14_Init>
  MX_TIM5_Init();
 80004fe:	f000 faad 	bl	8000a5c <MX_TIM5_Init>
  MX_TIM13_Init();
 8000502:	f000 fb35 	bl	8000b70 <MX_TIM13_Init>
  MX_TIM1_Init();
 8000506:	f000 f945 	bl	8000794 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(2000);
 800050a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800050e:	f001 fb1b 	bl	8001b48 <HAL_Delay>
  L3GD20_Init();
 8000512:	f005 fc2d 	bl	8005d70 <L3GD20_Init>
  ITM_Port32(31) = 2;
 8000516:	4b07      	ldr	r3, [pc, #28]	; (8000534 <main+0x70>)
 8000518:	2202      	movs	r2, #2
 800051a:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim1);
 800051c:	4806      	ldr	r0, [pc, #24]	; (8000538 <main+0x74>)
 800051e:	f003 ffb9 	bl	8004494 <HAL_TIM_Base_Start>
  TIM14_IT_START;
 8000522:	4806      	ldr	r0, [pc, #24]	; (800053c <main+0x78>)
 8000524:	f004 f81e 	bl	8004564 <HAL_TIM_Base_Start_IT>

  cppmain();
 8000528:	f006 fc3c 	bl	8006da4 <cppmain>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  return -1;
 800052c:	f04f 33ff 	mov.w	r3, #4294967295
  }
  /* USER CODE END 3 */
}
 8000530:	4618      	mov	r0, r3
 8000532:	bd80      	pop	{r7, pc}
 8000534:	e000007c 	.word	0xe000007c
 8000538:	20000198 	.word	0x20000198
 800053c:	20000348 	.word	0x20000348

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f006 fd0c 	bl	8006f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a27      	ldr	r2, [pc, #156]	; (800060c <SystemClock_Config+0xcc>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b25      	ldr	r3, [pc, #148]	; (800060c <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b22      	ldr	r3, [pc, #136]	; (8000610 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a21      	ldr	r2, [pc, #132]	; (8000610 <SystemClock_Config+0xd0>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005b4:	2332      	movs	r3, #50	; 0x32
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005bc:	2304      	movs	r3, #4
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fcaf 	bl	8002f28 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d0:	f000 fc38 	bl	8000e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2101      	movs	r1, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 ff11 	bl	8003418 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005fc:	f000 fc22 	bl	8000e44 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000600:	f002 fff0 	bl	80035e4 <HAL_RCC_EnableCSS>
}
 8000604:	bf00      	nop
 8000606:	3750      	adds	r7, #80	; 0x50
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061a:	463b      	mov	r3, r7
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000626:	4b21      	ldr	r3, [pc, #132]	; (80006ac <MX_ADC1_Init+0x98>)
 8000628:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <MX_ADC1_Init+0x9c>)
 800062a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <MX_ADC1_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_ADC1_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_ADC1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <MX_ADC1_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_ADC1_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_ADC1_Init+0x98>)
 8000654:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <MX_ADC1_Init+0xa0>)
 8000656:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_ADC1_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_ADC1_Init+0x98>)
 8000660:	2201      	movs	r2, #1
 8000662:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_ADC1_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_ADC1_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000672:	480e      	ldr	r0, [pc, #56]	; (80006ac <MX_ADC1_Init+0x98>)
 8000674:	f001 fa8c 	bl	8001b90 <HAL_ADC_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800067e:	f000 fbe1 	bl	8000e44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000682:	2304      	movs	r3, #4
 8000684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800068a:	2304      	movs	r3, #4
 800068c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068e:	463b      	mov	r3, r7
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	; (80006ac <MX_ADC1_Init+0x98>)
 8000694:	f001 fc5e 	bl	8001f54 <HAL_ADC_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800069e:	f000 fbd1 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000040 	.word	0x20000040
 80006b0:	40012000 	.word	0x40012000
 80006b4:	0f000001 	.word	0x0f000001

080006b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_SPI1_Init+0x64>)
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <MX_SPI1_Init+0x68>)
 80006c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_SPI1_Init+0x64>)
 80006c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_SPI1_Init+0x64>)
 80006e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_SPI1_Init+0x64>)
 80006ec:	2218      	movs	r2, #24
 80006ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_SPI1_Init+0x64>)
 8000704:	220a      	movs	r2, #10
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_SPI1_Init+0x64>)
 800070a:	f003 f8ca 	bl	80038a2 <HAL_SPI_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000714:	f000 fb96 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000e8 	.word	0x200000e8
 8000720:	40013000 	.word	0x40013000

08000724 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_SPI2_Init+0x68>)
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <MX_SPI2_Init+0x6c>)
 800072c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_SPI2_Init+0x68>)
 8000730:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000734:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_SPI2_Init+0x68>)
 8000738:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800073c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_SPI2_Init+0x68>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI2_Init+0x68>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_SPI2_Init+0x68>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI2_Init+0x68>)
 8000752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000756:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI2_Init+0x68>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_SPI2_Init+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI2_Init+0x68>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_SPI2_Init+0x68>)
 800076c:	2200      	movs	r2, #0
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI2_Init+0x68>)
 8000772:	220a      	movs	r2, #10
 8000774:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_SPI2_Init+0x68>)
 8000778:	f003 f893 	bl	80038a2 <HAL_SPI_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000782:	f000 fb5f 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000140 	.word	0x20000140
 8000790:	40003800 	.word	0x40003800

08000794 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	463b      	mov	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_TIM1_Init+0x98>)
 80007b2:	4a1f      	ldr	r2, [pc, #124]	; (8000830 <MX_TIM1_Init+0x9c>)
 80007b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_TIM1_Init+0x98>)
 80007b8:	2231      	movs	r2, #49	; 0x31
 80007ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_TIM1_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_TIM1_Init+0x98>)
 80007c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80007c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_TIM1_Init+0x98>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_TIM1_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_TIM1_Init+0x98>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007dc:	4813      	ldr	r0, [pc, #76]	; (800082c <MX_TIM1_Init+0x98>)
 80007de:	f003 fe09 	bl	80043f4 <HAL_TIM_Base_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80007e8:	f000 fb2c 	bl	8000e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	4619      	mov	r1, r3
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <MX_TIM1_Init+0x98>)
 80007fa:	f004 fb67 	bl	8004ecc <HAL_TIM_ConfigClockSource>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000804:	f000 fb1e 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_TIM1_Init+0x98>)
 8000816:	f004 ff59 	bl	80056cc <HAL_TIMEx_MasterConfigSynchronization>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000820:	f000 fb10 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000198 	.word	0x20000198
 8000830:	40010000 	.word	0x40010000

08000834 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b092      	sub	sp, #72	; 0x48
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	2224      	movs	r2, #36	; 0x24
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f006 fb92 	bl	8006f6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000852:	463b      	mov	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000864:	4b30      	ldr	r3, [pc, #192]	; (8000928 <MX_TIM2_Init+0xf4>)
 8000866:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800086a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800086c:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <MX_TIM2_Init+0xf4>)
 800086e:	2200      	movs	r2, #0
 8000870:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000872:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <MX_TIM2_Init+0xf4>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000878:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <MX_TIM2_Init+0xf4>)
 800087a:	f04f 32ff 	mov.w	r2, #4294967295
 800087e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000880:	4b29      	ldr	r3, [pc, #164]	; (8000928 <MX_TIM2_Init+0xf4>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <MX_TIM2_Init+0xf4>)
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800088c:	4826      	ldr	r0, [pc, #152]	; (8000928 <MX_TIM2_Init+0xf4>)
 800088e:	f003 ff08 	bl	80046a2 <HAL_TIM_PWM_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000898:	f000 fad4 	bl	8000e44 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800089c:	2301      	movs	r3, #1
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008a4:	2301      	movs	r3, #1
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC1Filter = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008b0:	2300      	movs	r3, #0
 80008b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008b4:	2301      	movs	r3, #1
 80008b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.IC2Filter = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80008c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c4:	4619      	mov	r1, r3
 80008c6:	4818      	ldr	r0, [pc, #96]	; (8000928 <MX_TIM2_Init+0xf4>)
 80008c8:	f004 f802 	bl	80048d0 <HAL_TIM_Encoder_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80008d2:	f000 fab7 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4810      	ldr	r0, [pc, #64]	; (8000928 <MX_TIM2_Init+0xf4>)
 80008e6:	f004 fef1 	bl	80056cc <HAL_TIMEx_MasterConfigSynchronization>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 80008f0:	f000 faa8 	bl	8000e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f4:	2360      	movs	r3, #96	; 0x60
 80008f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	2208      	movs	r2, #8
 8000908:	4619      	mov	r1, r3
 800090a:	4807      	ldr	r0, [pc, #28]	; (8000928 <MX_TIM2_Init+0xf4>)
 800090c:	f004 fa1c 	bl	8004d48 <HAL_TIM_PWM_ConfigChannel>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000916:	f000 fa95 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800091a:	4803      	ldr	r0, [pc, #12]	; (8000928 <MX_TIM2_Init+0xf4>)
 800091c:	f000 fd24 	bl	8001368 <HAL_TIM_MspPostInit>

}
 8000920:	bf00      	nop
 8000922:	3748      	adds	r7, #72	; 0x48
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200001e0 	.word	0x200001e0

0800092c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	; 0x38
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]
 800095a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800095c:	4b3d      	ldr	r3, [pc, #244]	; (8000a54 <MX_TIM4_Init+0x128>)
 800095e:	4a3e      	ldr	r2, [pc, #248]	; (8000a58 <MX_TIM4_Init+0x12c>)
 8000960:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000962:	4b3c      	ldr	r3, [pc, #240]	; (8000a54 <MX_TIM4_Init+0x128>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b3a      	ldr	r3, [pc, #232]	; (8000a54 <MX_TIM4_Init+0x128>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800096e:	4b39      	ldr	r3, [pc, #228]	; (8000a54 <MX_TIM4_Init+0x128>)
 8000970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000974:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b37      	ldr	r3, [pc, #220]	; (8000a54 <MX_TIM4_Init+0x128>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <MX_TIM4_Init+0x128>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000982:	4834      	ldr	r0, [pc, #208]	; (8000a54 <MX_TIM4_Init+0x128>)
 8000984:	f003 fd36 	bl	80043f4 <HAL_TIM_Base_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800098e:	f000 fa59 	bl	8000e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099c:	4619      	mov	r1, r3
 800099e:	482d      	ldr	r0, [pc, #180]	; (8000a54 <MX_TIM4_Init+0x128>)
 80009a0:	f004 fa94 	bl	8004ecc <HAL_TIM_ConfigClockSource>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80009aa:	f000 fa4b 	bl	8000e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009ae:	4829      	ldr	r0, [pc, #164]	; (8000a54 <MX_TIM4_Init+0x128>)
 80009b0:	f003 fe77 	bl	80046a2 <HAL_TIM_PWM_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80009ba:	f000 fa43 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	4619      	mov	r1, r3
 80009cc:	4821      	ldr	r0, [pc, #132]	; (8000a54 <MX_TIM4_Init+0x128>)
 80009ce:	f004 fe7d 	bl	80056cc <HAL_TIMEx_MasterConfigSynchronization>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80009d8:	f000 fa34 	bl	8000e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009dc:	2360      	movs	r3, #96	; 0x60
 80009de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	4619      	mov	r1, r3
 80009f2:	4818      	ldr	r0, [pc, #96]	; (8000a54 <MX_TIM4_Init+0x128>)
 80009f4:	f004 f9a8 	bl	8004d48 <HAL_TIM_PWM_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80009fe:	f000 fa21 	bl	8000e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2204      	movs	r2, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4812      	ldr	r0, [pc, #72]	; (8000a54 <MX_TIM4_Init+0x128>)
 8000a0a:	f004 f99d 	bl	8004d48 <HAL_TIM_PWM_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000a14:	f000 fa16 	bl	8000e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2208      	movs	r2, #8
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480d      	ldr	r0, [pc, #52]	; (8000a54 <MX_TIM4_Init+0x128>)
 8000a20:	f004 f992 	bl	8004d48 <HAL_TIM_PWM_ConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000a2a:	f000 fa0b 	bl	8000e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	220c      	movs	r2, #12
 8000a32:	4619      	mov	r1, r3
 8000a34:	4807      	ldr	r0, [pc, #28]	; (8000a54 <MX_TIM4_Init+0x128>)
 8000a36:	f004 f987 	bl	8004d48 <HAL_TIM_PWM_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000a40:	f000 fa00 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <MX_TIM4_Init+0x128>)
 8000a46:	f000 fc8f 	bl	8001368 <HAL_TIM_MspPostInit>

}
 8000a4a:	bf00      	nop
 8000a4c:	3738      	adds	r7, #56	; 0x38
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000228 	.word	0x20000228
 8000a58:	40000800 	.word	0x40000800

08000a5c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	; 0x30
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	2224      	movs	r2, #36	; 0x24
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f006 fa7e 	bl	8006f6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <MX_TIM5_Init+0xa0>)
 8000a7a:	4a21      	ldr	r2, [pc, #132]	; (8000b00 <MX_TIM5_Init+0xa4>)
 8000a7c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <MX_TIM5_Init+0xa0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a84:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <MX_TIM5_Init+0xa0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <MX_TIM5_Init+0xa0>)
 8000a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a90:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_TIM5_Init+0xa0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_TIM5_Init+0xa0>)
 8000a9a:	2280      	movs	r2, #128	; 0x80
 8000a9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <MX_TIM5_Init+0xa0>)
 8000aca:	f003 ff01 	bl	80048d0 <HAL_TIM_Encoder_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000ad4:	f000 f9b6 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_TIM5_Init+0xa0>)
 8000ae6:	f004 fdf1 	bl	80056cc <HAL_TIMEx_MasterConfigSynchronization>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000af0:	f000 f9a8 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	3730      	adds	r7, #48	; 0x30
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000270 	.word	0x20000270
 8000b00:	40000c00 	.word	0x40000c00

08000b04 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_TIM6_Init+0x64>)
 8000b14:	4a15      	ldr	r2, [pc, #84]	; (8000b6c <MX_TIM6_Init+0x68>)
 8000b16:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <MX_TIM6_Init+0x64>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_TIM6_Init+0x64>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_TIM6_Init+0x64>)
 8000b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b2a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_TIM6_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b32:	480d      	ldr	r0, [pc, #52]	; (8000b68 <MX_TIM6_Init+0x64>)
 8000b34:	f003 fc5e 	bl	80043f4 <HAL_TIM_Base_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000b3e:	f000 f981 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <MX_TIM6_Init+0x64>)
 8000b50:	f004 fdbc 	bl	80056cc <HAL_TIMEx_MasterConfigSynchronization>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000b5a:	f000 f973 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200002b8 	.word	0x200002b8
 8000b6c:	40001000 	.word	0x40001000

08000b70 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_TIM13_Init+0x40>)
 8000b76:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <MX_TIM13_Init+0x44>)
 8000b78:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <MX_TIM13_Init+0x40>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_TIM13_Init+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 50000;
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <MX_TIM13_Init+0x40>)
 8000b88:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000b8c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_TIM13_Init+0x40>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_TIM13_Init+0x40>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_TIM13_Init+0x40>)
 8000b9c:	f003 fc2a 	bl	80043f4 <HAL_TIM_Base_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000ba6:	f000 f94d 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000300 	.word	0x20000300
 8000bb4:	40001c00 	.word	0x40001c00

08000bb8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_TIM14_Init+0x40>)
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <MX_TIM14_Init+0x44>)
 8000bc0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <MX_TIM14_Init+0x40>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_TIM14_Init+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50000;
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <MX_TIM14_Init+0x40>)
 8000bd0:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000bd4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_TIM14_Init+0x40>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_TIM14_Init+0x40>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_TIM14_Init+0x40>)
 8000be4:	f003 fc06 	bl	80043f4 <HAL_TIM_Base_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000bee:	f000 f929 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000348 	.word	0x20000348
 8000bfc:	40002000 	.word	0x40002000

08000c00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <MX_USART1_UART_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c38:	f004 fdd8 	bl	80057ec <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c42:	f000 f8ff 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000390 	.word	0x20000390
 8000c50:	40011000 	.word	0x40011000

08000c54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_DMA_Init+0x3c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <MX_DMA_Init+0x3c>)
 8000c64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_DMA_Init+0x3c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2038      	movs	r0, #56	; 0x38
 8000c7c:	f001 fc63 	bl	8002546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c80:	2038      	movs	r0, #56	; 0x38
 8000c82:	f001 fc7c 	bl	800257e <HAL_NVIC_EnableIRQ>

}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800

08000c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b60      	ldr	r3, [pc, #384]	; (8000e30 <MX_GPIO_Init+0x19c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a5f      	ldr	r2, [pc, #380]	; (8000e30 <MX_GPIO_Init+0x19c>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b5d      	ldr	r3, [pc, #372]	; (8000e30 <MX_GPIO_Init+0x19c>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b59      	ldr	r3, [pc, #356]	; (8000e30 <MX_GPIO_Init+0x19c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a58      	ldr	r2, [pc, #352]	; (8000e30 <MX_GPIO_Init+0x19c>)
 8000cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b56      	ldr	r3, [pc, #344]	; (8000e30 <MX_GPIO_Init+0x19c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	4b52      	ldr	r3, [pc, #328]	; (8000e30 <MX_GPIO_Init+0x19c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a51      	ldr	r2, [pc, #324]	; (8000e30 <MX_GPIO_Init+0x19c>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b4f      	ldr	r3, [pc, #316]	; (8000e30 <MX_GPIO_Init+0x19c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4b4b      	ldr	r3, [pc, #300]	; (8000e30 <MX_GPIO_Init+0x19c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a4a      	ldr	r2, [pc, #296]	; (8000e30 <MX_GPIO_Init+0x19c>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b48      	ldr	r3, [pc, #288]	; (8000e30 <MX_GPIO_Init+0x19c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	4b44      	ldr	r3, [pc, #272]	; (8000e30 <MX_GPIO_Init+0x19c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a43      	ldr	r2, [pc, #268]	; (8000e30 <MX_GPIO_Init+0x19c>)
 8000d24:	f043 0308 	orr.w	r3, r3, #8
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b41      	ldr	r3, [pc, #260]	; (8000e30 <MX_GPIO_Init+0x19c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED10_Pin|RF_EMITTER_Pin|D_C_Pin|DIAGONAL_EMITTER_Pin
 8000d36:	2200      	movs	r2, #0
 8000d38:	f641 51e7 	movw	r1, #7655	; 0x1de7
 8000d3c:	483d      	ldr	r0, [pc, #244]	; (8000e34 <MX_GPIO_Init+0x1a0>)
 8000d3e:	f002 f8bf 	bl	8002ec0 <HAL_GPIO_WritePin>
                          |CE_Pin|LF_EMITTER_Pin|CS_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED11_Pin|LED9_Pin|LED8_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f641 0110 	movw	r1, #6160	; 0x1810
 8000d48:	483b      	ldr	r0, [pc, #236]	; (8000e38 <MX_GPIO_Init+0x1a4>)
 8000d4a:	f002 f8b9 	bl	8002ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED7_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8000d54:	4839      	ldr	r0, [pc, #228]	; (8000e3c <MX_GPIO_Init+0x1a8>)
 8000d56:	f002 f8b3 	bl	8002ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2104      	movs	r1, #4
 8000d5e:	4838      	ldr	r0, [pc, #224]	; (8000e40 <MX_GPIO_Init+0x1ac>)
 8000d60:	f002 f8ae 	bl	8002ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TB1_Pin */
  GPIO_InitStruct.Pin = TB1_Pin;
 8000d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TB1_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	482e      	ldr	r0, [pc, #184]	; (8000e34 <MX_GPIO_Init+0x1a0>)
 8000d7a:	f001 ff05 	bl	8002b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED10_Pin RF_EMITTER_Pin D_C_Pin DIAGONAL_EMITTER_Pin
                           CE_Pin LF_EMITTER_Pin CS_Pin LED3_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED10_Pin|RF_EMITTER_Pin|D_C_Pin|DIAGONAL_EMITTER_Pin
 8000d7e:	f641 53e7 	movw	r3, #7655	; 0x1de7
 8000d82:	617b      	str	r3, [r7, #20]
                          |CE_Pin|LF_EMITTER_Pin|CS_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	4827      	ldr	r0, [pc, #156]	; (8000e34 <MX_GPIO_Init+0x1a0>)
 8000d98:	f001 fef6 	bl	8002b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin;
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRDY_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4823      	ldr	r0, [pc, #140]	; (8000e3c <MX_GPIO_Init+0x1a8>)
 8000db0:	f001 feea 	bl	8002b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 INT_Pin MISO_Pin BOOT0_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|INT_Pin|MISO_Pin|BOOT0_Pin;
 8000db4:	f244 4324 	movw	r3, #17444	; 0x4424
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	481b      	ldr	r0, [pc, #108]	; (8000e38 <MX_GPIO_Init+0x1a4>)
 8000dca:	f001 fedd 	bl	8002b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED11_Pin LED9_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED11_Pin|LED9_Pin|LED8_Pin;
 8000dce:	f641 0310 	movw	r3, #6160	; 0x1810
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	4814      	ldr	r0, [pc, #80]	; (8000e38 <MX_GPIO_Init+0x1a4>)
 8000de8:	f001 fece 	bl	8002b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED7_Pin|LED1_Pin|LED2_Pin;
 8000dec:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <MX_GPIO_Init+0x1a8>)
 8000e06:	f001 febf 	bl	8002b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4807      	ldr	r0, [pc, #28]	; (8000e40 <MX_GPIO_Init+0x1ac>)
 8000e22:	f001 feb1 	bl	8002b88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020800 	.word	0x40020800
 8000e38:	40020400 	.word	0x40020400
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	40020c00 	.word	0x40020c00

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <Error_Handler+0x8>
	...

08000e50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a49      	ldr	r2, [pc, #292]	; (8000fe4 <HAL_ADC_MspInit+0x144>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	f040 808b 	bne.w	8000fda <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
 8000ec8:	4b47      	ldr	r3, [pc, #284]	; (8000fe8 <HAL_ADC_MspInit+0x148>)
 8000eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ecc:	4a46      	ldr	r2, [pc, #280]	; (8000fe8 <HAL_ADC_MspInit+0x148>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed4:	4b44      	ldr	r3, [pc, #272]	; (8000fe8 <HAL_ADC_MspInit+0x148>)
 8000ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000edc:	61bb      	str	r3, [r7, #24]
 8000ede:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	4b40      	ldr	r3, [pc, #256]	; (8000fe8 <HAL_ADC_MspInit+0x148>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	4a3f      	ldr	r2, [pc, #252]	; (8000fe8 <HAL_ADC_MspInit+0x148>)
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef0:	4b3d      	ldr	r3, [pc, #244]	; (8000fe8 <HAL_ADC_MspInit+0x148>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	4b39      	ldr	r3, [pc, #228]	; (8000fe8 <HAL_ADC_MspInit+0x148>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	4a38      	ldr	r2, [pc, #224]	; (8000fe8 <HAL_ADC_MspInit+0x148>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0c:	4b36      	ldr	r3, [pc, #216]	; (8000fe8 <HAL_ADC_MspInit+0x148>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	4b32      	ldr	r3, [pc, #200]	; (8000fe8 <HAL_ADC_MspInit+0x148>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	4a31      	ldr	r2, [pc, #196]	; (8000fe8 <HAL_ADC_MspInit+0x148>)
 8000f22:	f043 0302 	orr.w	r3, r3, #2
 8000f26:	6313      	str	r3, [r2, #48]	; 0x30
 8000f28:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <HAL_ADC_MspInit+0x148>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VOL_METER_Pin|R_RECEIVER_Pin;
 8000f34:	2318      	movs	r3, #24
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	4829      	ldr	r0, [pc, #164]	; (8000fec <HAL_ADC_MspInit+0x14c>)
 8000f48:	f001 fe1e 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_RECEIVER_Pin;
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f50:	2303      	movs	r3, #3
 8000f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RF_RECEIVER_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4824      	ldr	r0, [pc, #144]	; (8000ff0 <HAL_ADC_MspInit+0x150>)
 8000f60:	f001 fe12 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L_RECEIVER_Pin|LF_RECEIVER_Pin;
 8000f64:	2303      	movs	r3, #3
 8000f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	4619      	mov	r1, r3
 8000f76:	481f      	ldr	r0, [pc, #124]	; (8000ff4 <HAL_ADC_MspInit+0x154>)
 8000f78:	f001 fe06 	bl	8002b88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <HAL_ADC_MspInit+0x158>)
 8000f7e:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <HAL_ADC_MspInit+0x15c>)
 8000f80:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <HAL_ADC_MspInit+0x158>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <HAL_ADC_MspInit+0x158>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <HAL_ADC_MspInit+0x158>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_ADC_MspInit+0x158>)
 8000f96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f9a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_ADC_MspInit+0x158>)
 8000f9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <HAL_ADC_MspInit+0x158>)
 8000fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000faa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_ADC_MspInit+0x158>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_ADC_MspInit+0x158>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_ADC_MspInit+0x158>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fbe:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <HAL_ADC_MspInit+0x158>)
 8000fc0:	f001 faf8 	bl	80025b4 <HAL_DMA_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8000fca:	f7ff ff3b 	bl	8000e44 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a09      	ldr	r2, [pc, #36]	; (8000ff8 <HAL_ADC_MspInit+0x158>)
 8000fd2:	639a      	str	r2, [r3, #56]	; 0x38
 8000fd4:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <HAL_ADC_MspInit+0x158>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	3730      	adds	r7, #48	; 0x30
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40012000 	.word	0x40012000
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020800 	.word	0x40020800
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	20000088 	.word	0x20000088
 8000ffc:	40026410 	.word	0x40026410

08001000 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08c      	sub	sp, #48	; 0x30
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a32      	ldr	r2, [pc, #200]	; (80010e8 <HAL_SPI_MspInit+0xe8>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d12c      	bne.n	800107c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	4b31      	ldr	r3, [pc, #196]	; (80010ec <HAL_SPI_MspInit+0xec>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a30      	ldr	r2, [pc, #192]	; (80010ec <HAL_SPI_MspInit+0xec>)
 800102c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <HAL_SPI_MspInit+0xec>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <HAL_SPI_MspInit+0xec>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a29      	ldr	r2, [pc, #164]	; (80010ec <HAL_SPI_MspInit+0xec>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b27      	ldr	r3, [pc, #156]	; (80010ec <HAL_SPI_MspInit+0xec>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDI_Pin;
 800105a:	23e0      	movs	r3, #224	; 0xe0
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800106a:	2305      	movs	r3, #5
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	481e      	ldr	r0, [pc, #120]	; (80010f0 <HAL_SPI_MspInit+0xf0>)
 8001076:	f001 fd87 	bl	8002b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800107a:	e031      	b.n	80010e0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <HAL_SPI_MspInit+0xf4>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d12c      	bne.n	80010e0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <HAL_SPI_MspInit+0xec>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a17      	ldr	r2, [pc, #92]	; (80010ec <HAL_SPI_MspInit+0xec>)
 8001090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_SPI_MspInit+0xec>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <HAL_SPI_MspInit+0xec>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a10      	ldr	r2, [pc, #64]	; (80010ec <HAL_SPI_MspInit+0xec>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_SPI_MspInit+0xec>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CLK_Pin|DATA_IN_Pin;
 80010be:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010d0:	2305      	movs	r3, #5
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	4807      	ldr	r0, [pc, #28]	; (80010f8 <HAL_SPI_MspInit+0xf8>)
 80010dc:	f001 fd54 	bl	8002b88 <HAL_GPIO_Init>
}
 80010e0:	bf00      	nop
 80010e2:	3730      	adds	r7, #48	; 0x30
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40013000 	.word	0x40013000
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020000 	.word	0x40020000
 80010f4:	40003800 	.word	0x40003800
 80010f8:	40020400 	.word	0x40020400

080010fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a3a      	ldr	r2, [pc, #232]	; (80011f4 <HAL_TIM_Base_MspInit+0xf8>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d10e      	bne.n	800112c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	4b39      	ldr	r3, [pc, #228]	; (80011f8 <HAL_TIM_Base_MspInit+0xfc>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	4a38      	ldr	r2, [pc, #224]	; (80011f8 <HAL_TIM_Base_MspInit+0xfc>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6453      	str	r3, [r2, #68]	; 0x44
 800111e:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <HAL_TIM_Base_MspInit+0xfc>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800112a:	e05e      	b.n	80011ea <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM4)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a32      	ldr	r2, [pc, #200]	; (80011fc <HAL_TIM_Base_MspInit+0x100>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d10e      	bne.n	8001154 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <HAL_TIM_Base_MspInit+0xfc>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a2e      	ldr	r2, [pc, #184]	; (80011f8 <HAL_TIM_Base_MspInit+0xfc>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b2c      	ldr	r3, [pc, #176]	; (80011f8 <HAL_TIM_Base_MspInit+0xfc>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	69bb      	ldr	r3, [r7, #24]
}
 8001152:	e04a      	b.n	80011ea <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM6)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a29      	ldr	r2, [pc, #164]	; (8001200 <HAL_TIM_Base_MspInit+0x104>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d10e      	bne.n	800117c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <HAL_TIM_Base_MspInit+0xfc>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	4a24      	ldr	r2, [pc, #144]	; (80011f8 <HAL_TIM_Base_MspInit+0xfc>)
 8001168:	f043 0310 	orr.w	r3, r3, #16
 800116c:	6413      	str	r3, [r2, #64]	; 0x40
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <HAL_TIM_Base_MspInit+0xfc>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f003 0310 	and.w	r3, r3, #16
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697b      	ldr	r3, [r7, #20]
}
 800117a:	e036      	b.n	80011ea <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM13)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a20      	ldr	r2, [pc, #128]	; (8001204 <HAL_TIM_Base_MspInit+0x108>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d116      	bne.n	80011b4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <HAL_TIM_Base_MspInit+0xfc>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a1a      	ldr	r2, [pc, #104]	; (80011f8 <HAL_TIM_Base_MspInit+0xfc>)
 8001190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_TIM_Base_MspInit+0xfc>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	202c      	movs	r0, #44	; 0x2c
 80011a8:	f001 f9cd 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80011ac:	202c      	movs	r0, #44	; 0x2c
 80011ae:	f001 f9e6 	bl	800257e <HAL_NVIC_EnableIRQ>
}
 80011b2:	e01a      	b.n	80011ea <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM14)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a13      	ldr	r2, [pc, #76]	; (8001208 <HAL_TIM_Base_MspInit+0x10c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d115      	bne.n	80011ea <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <HAL_TIM_Base_MspInit+0xfc>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <HAL_TIM_Base_MspInit+0xfc>)
 80011c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_TIM_Base_MspInit+0xfc>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	202d      	movs	r0, #45	; 0x2d
 80011e0:	f001 f9b1 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80011e4:	202d      	movs	r0, #45	; 0x2d
 80011e6:	f001 f9ca 	bl	800257e <HAL_NVIC_EnableIRQ>
}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40010000 	.word	0x40010000
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40000800 	.word	0x40000800
 8001200:	40001000 	.word	0x40001000
 8001204:	40001c00 	.word	0x40001c00
 8001208:	40002000 	.word	0x40002000

0800120c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800122c:	d14a      	bne.n	80012c4 <HAL_TIM_PWM_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <HAL_TIM_PWM_MspInit+0xc0>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	4a25      	ldr	r2, [pc, #148]	; (80012cc <HAL_TIM_PWM_MspInit+0xc0>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6413      	str	r3, [r2, #64]	; 0x40
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_TIM_PWM_MspInit+0xc0>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <HAL_TIM_PWM_MspInit+0xc0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <HAL_TIM_PWM_MspInit+0xc0>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_TIM_PWM_MspInit+0xc0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <HAL_TIM_PWM_MspInit+0xc0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a17      	ldr	r2, [pc, #92]	; (80012cc <HAL_TIM_PWM_MspInit+0xc0>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_TIM_PWM_MspInit+0xc0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001294:	2301      	movs	r3, #1
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	480c      	ldr	r0, [pc, #48]	; (80012d0 <HAL_TIM_PWM_MspInit+0xc4>)
 80012a0:	f001 fc72 	bl	8002b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012a4:	2308      	movs	r3, #8
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012b4:	2301      	movs	r3, #1
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <HAL_TIM_PWM_MspInit+0xc8>)
 80012c0:	f001 fc62 	bl	8002b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	; 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020400 	.word	0x40020400

080012d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <HAL_TIM_Encoder_MspInit+0x84>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d12b      	bne.n	8001352 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_TIM_Encoder_MspInit+0x88>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a17      	ldr	r2, [pc, #92]	; (8001360 <HAL_TIM_Encoder_MspInit+0x88>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_TIM_Encoder_MspInit+0x88>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_TIM_Encoder_MspInit+0x88>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <HAL_TIM_Encoder_MspInit+0x88>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_TIM_Encoder_MspInit+0x88>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001332:	2303      	movs	r3, #3
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001342:	2302      	movs	r3, #2
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_TIM_Encoder_MspInit+0x8c>)
 800134e:	f001 fc1b 	bl	8002b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	3728      	adds	r7, #40	; 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40000c00 	.word	0x40000c00
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000

08001368 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001388:	d11e      	bne.n	80013c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_TIM_MspPostInit+0xb0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a21      	ldr	r2, [pc, #132]	; (8001418 <HAL_TIM_MspPostInit+0xb0>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <HAL_TIM_MspPostInit+0xb0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80013a6:	2304      	movs	r3, #4
 80013a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013b6:	2301      	movs	r3, #1
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4816      	ldr	r0, [pc, #88]	; (800141c <HAL_TIM_MspPostInit+0xb4>)
 80013c2:	f001 fbe1 	bl	8002b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013c6:	e023      	b.n	8001410 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a14      	ldr	r2, [pc, #80]	; (8001420 <HAL_TIM_MspPostInit+0xb8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d11e      	bne.n	8001410 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_TIM_MspPostInit+0xb0>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <HAL_TIM_MspPostInit+0xb0>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <HAL_TIM_MspPostInit+0xb0>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LPWMA_Pin|LPWMB_Pin|RPWMA_Pin|RPWMB_Pin;
 80013ee:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001400:	2302      	movs	r3, #2
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4806      	ldr	r0, [pc, #24]	; (8001424 <HAL_TIM_MspPostInit+0xbc>)
 800140c:	f001 fbbc 	bl	8002b88 <HAL_GPIO_Init>
}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	; 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000
 8001420:	40000800 	.word	0x40000800
 8001424:	40020400 	.word	0x40020400

08001428 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a19      	ldr	r2, [pc, #100]	; (80014ac <HAL_UART_MspInit+0x84>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d12c      	bne.n	80014a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_UART_MspInit+0x88>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a17      	ldr	r2, [pc, #92]	; (80014b0 <HAL_UART_MspInit+0x88>)
 8001454:	f043 0310 	orr.w	r3, r3, #16
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_UART_MspInit+0x88>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_UART_MspInit+0x88>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <HAL_UART_MspInit+0x88>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_UART_MspInit+0x88>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001482:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001494:	2307      	movs	r3, #7
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <HAL_UART_MspInit+0x8c>)
 80014a0:	f001 fb72 	bl	8002b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40011000 	.word	0x40011000
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020000 	.word	0x40020000

080014b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80014bc:	f002 f9d6 	bl	800386c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <NMI_Handler+0x8>

080014c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <HardFault_Handler+0x4>

080014c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <MemManage_Handler+0x4>

080014ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <BusFault_Handler+0x4>

080014d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <UsageFault_Handler+0x4>

080014da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001508:	f000 fafe 	bl	8001b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001516:	f003 fb0f 	bl	8004b38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000300 	.word	0x20000300

08001524 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800152a:	f003 fb05 	bl	8004b38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000348 	.word	0x20000348

08001538 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <DMA2_Stream0_IRQHandler+0x10>)
 800153e:	f001 f8e7 	bl	8002710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000088 	.word	0x20000088

0800154c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <SystemInit+0x20>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <SystemInit+0x20>)
 8001558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800155c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001574:	480d      	ldr	r0, [pc, #52]	; (80015ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001576:	490e      	ldr	r1, [pc, #56]	; (80015b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001578:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800158c:	4c0b      	ldr	r4, [pc, #44]	; (80015bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800159a:	f7ff ffd7 	bl	800154c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159e:	f005 fced 	bl	8006f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a2:	f7fe ff8f 	bl	80004c4 <main>
  bx  lr    
 80015a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80015b4:	08007608 	.word	0x08007608
  ldr r2, =_sbss
 80015b8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80015bc:	200015f8 	.word	0x200015f8

080015c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC_IRQHandler>

080015c2 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 80015c2:	b580      	push	{r7, lr}
 80015c4:	af00      	add	r7, sp, #0
//
//    // Reset the OLED
//    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
//    HAL_Delay(10);
//    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
    HAL_Delay(10);
 80015c6:	200a      	movs	r0, #10
 80015c8:	f000 fabe 	bl	8001b48 <HAL_Delay>
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80015da:	2200      	movs	r2, #0
 80015dc:	2140      	movs	r1, #64	; 0x40
 80015de:	480c      	ldr	r0, [pc, #48]	; (8001610 <ssd1306_WriteCommand+0x40>)
 80015e0:	f001 fc6e 	bl	8002ec0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 80015e4:	2200      	movs	r2, #0
 80015e6:	2104      	movs	r1, #4
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <ssd1306_WriteCommand+0x40>)
 80015ea:	f001 fc69 	bl	8002ec0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 80015ee:	1df9      	adds	r1, r7, #7
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295
 80015f4:	2201      	movs	r2, #1
 80015f6:	4807      	ldr	r0, [pc, #28]	; (8001614 <ssd1306_WriteCommand+0x44>)
 80015f8:	f002 f9dc 	bl	80039b4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80015fc:	2201      	movs	r2, #1
 80015fe:	2140      	movs	r1, #64	; 0x40
 8001600:	4803      	ldr	r0, [pc, #12]	; (8001610 <ssd1306_WriteCommand+0x40>)
 8001602:	f001 fc5d 	bl	8002ec0 <HAL_GPIO_WritePin>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40020800 	.word	0x40020800
 8001614:	20000140 	.word	0x20000140

08001618 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001622:	2200      	movs	r2, #0
 8001624:	2140      	movs	r1, #64	; 0x40
 8001626:	480c      	ldr	r0, [pc, #48]	; (8001658 <ssd1306_WriteData+0x40>)
 8001628:	f001 fc4a 	bl	8002ec0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 800162c:	2201      	movs	r2, #1
 800162e:	2104      	movs	r1, #4
 8001630:	4809      	ldr	r0, [pc, #36]	; (8001658 <ssd1306_WriteData+0x40>)
 8001632:	f001 fc45 	bl	8002ec0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b29a      	uxth	r2, r3
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4806      	ldr	r0, [pc, #24]	; (800165c <ssd1306_WriteData+0x44>)
 8001642:	f002 f9b7 	bl	80039b4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001646:	2201      	movs	r2, #1
 8001648:	2140      	movs	r1, #64	; 0x40
 800164a:	4803      	ldr	r0, [pc, #12]	; (8001658 <ssd1306_WriteData+0x40>)
 800164c:	f001 fc38 	bl	8002ec0 <HAL_GPIO_WritePin>
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40020800 	.word	0x40020800
 800165c:	20000140 	.word	0x20000140

08001660 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001664:	f7ff ffad 	bl	80015c2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001668:	2064      	movs	r0, #100	; 0x64
 800166a:	f000 fa6d 	bl	8001b48 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800166e:	2000      	movs	r0, #0
 8001670:	f000 f9da 	bl	8001a28 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001674:	2020      	movs	r0, #32
 8001676:	f7ff ffab 	bl	80015d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800167a:	2000      	movs	r0, #0
 800167c:	f7ff ffa8 	bl	80015d0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001680:	20b0      	movs	r0, #176	; 0xb0
 8001682:	f7ff ffa5 	bl	80015d0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001686:	20c8      	movs	r0, #200	; 0xc8
 8001688:	f7ff ffa2 	bl	80015d0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff ff9f 	bl	80015d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001692:	2010      	movs	r0, #16
 8001694:	f7ff ff9c 	bl	80015d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001698:	2040      	movs	r0, #64	; 0x40
 800169a:	f7ff ff99 	bl	80015d0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800169e:	20ff      	movs	r0, #255	; 0xff
 80016a0:	f000 f9ae 	bl	8001a00 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80016a4:	20a1      	movs	r0, #161	; 0xa1
 80016a6:	f7ff ff93 	bl	80015d0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80016aa:	20a6      	movs	r0, #166	; 0xa6
 80016ac:	f7ff ff90 	bl	80015d0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80016b0:	20a8      	movs	r0, #168	; 0xa8
 80016b2:	f7ff ff8d 	bl	80015d0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 80016b6:	201f      	movs	r0, #31
 80016b8:	f7ff ff8a 	bl	80015d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80016bc:	20a4      	movs	r0, #164	; 0xa4
 80016be:	f7ff ff87 	bl	80015d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80016c2:	20d3      	movs	r0, #211	; 0xd3
 80016c4:	f7ff ff84 	bl	80015d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80016c8:	2000      	movs	r0, #0
 80016ca:	f7ff ff81 	bl	80015d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80016ce:	20d5      	movs	r0, #213	; 0xd5
 80016d0:	f7ff ff7e 	bl	80015d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80016d4:	20f0      	movs	r0, #240	; 0xf0
 80016d6:	f7ff ff7b 	bl	80015d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80016da:	20d9      	movs	r0, #217	; 0xd9
 80016dc:	f7ff ff78 	bl	80015d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80016e0:	2022      	movs	r0, #34	; 0x22
 80016e2:	f7ff ff75 	bl	80015d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80016e6:	20da      	movs	r0, #218	; 0xda
 80016e8:	f7ff ff72 	bl	80015d0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80016ec:	2002      	movs	r0, #2
 80016ee:	f7ff ff6f 	bl	80015d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80016f2:	20db      	movs	r0, #219	; 0xdb
 80016f4:	f7ff ff6c 	bl	80015d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80016f8:	2020      	movs	r0, #32
 80016fa:	f7ff ff69 	bl	80015d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80016fe:	208d      	movs	r0, #141	; 0x8d
 8001700:	f7ff ff66 	bl	80015d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001704:	2014      	movs	r0, #20
 8001706:	f7ff ff63 	bl	80015d0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800170a:	2001      	movs	r0, #1
 800170c:	f000 f98c 	bl	8001a28 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001710:	2000      	movs	r0, #0
 8001712:	f000 f80f 	bl	8001734 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001716:	f000 f831 	bl	800177c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <ssd1306_Init+0xd0>)
 800171c:	2200      	movs	r2, #0
 800171e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <ssd1306_Init+0xd0>)
 8001722:	2200      	movs	r2, #0
 8001724:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001726:	4b02      	ldr	r3, [pc, #8]	; (8001730 <ssd1306_Init+0xd0>)
 8001728:	2201      	movs	r2, #1
 800172a:	711a      	strb	r2, [r3, #4]
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200005d4 	.word	0x200005d4

08001734 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	e00d      	b.n	8001760 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <ssd1306_Fill+0x1a>
 800174a:	2100      	movs	r1, #0
 800174c:	e000      	b.n	8001750 <ssd1306_Fill+0x1c>
 800174e:	21ff      	movs	r1, #255	; 0xff
 8001750:	4a09      	ldr	r2, [pc, #36]	; (8001778 <ssd1306_Fill+0x44>)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4413      	add	r3, r2
 8001756:	460a      	mov	r2, r1
 8001758:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	3301      	adds	r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001766:	d3ed      	bcc.n	8001744 <ssd1306_Fill+0x10>
    }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	200003d4 	.word	0x200003d4

0800177c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001782:	2300      	movs	r3, #0
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	e016      	b.n	80017b6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	3b50      	subs	r3, #80	; 0x50
 800178c:	b2db      	uxtb	r3, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ff1e 	bl	80015d0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001794:	2000      	movs	r0, #0
 8001796:	f7ff ff1b 	bl	80015d0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800179a:	2010      	movs	r0, #16
 800179c:	f7ff ff18 	bl	80015d0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	01db      	lsls	r3, r3, #7
 80017a4:	4a08      	ldr	r2, [pc, #32]	; (80017c8 <ssd1306_UpdateScreen+0x4c>)
 80017a6:	4413      	add	r3, r2
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff34 	bl	8001618 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	3301      	adds	r3, #1
 80017b4:	71fb      	strb	r3, [r7, #7]
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d9e5      	bls.n	8001788 <ssd1306_UpdateScreen+0xc>
    }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200003d4 	.word	0x200003d4

080017cc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
 80017d6:	460b      	mov	r3, r1
 80017d8:	71bb      	strb	r3, [r7, #6]
 80017da:	4613      	mov	r3, r2
 80017dc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db3d      	blt.n	8001862 <ssd1306_DrawPixel+0x96>
 80017e6:	79bb      	ldrb	r3, [r7, #6]
 80017e8:	2b1f      	cmp	r3, #31
 80017ea:	d83a      	bhi.n	8001862 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 80017ec:	797b      	ldrb	r3, [r7, #5]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d11a      	bne.n	8001828 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80017f2:	79fa      	ldrb	r2, [r7, #7]
 80017f4:	79bb      	ldrb	r3, [r7, #6]
 80017f6:	08db      	lsrs	r3, r3, #3
 80017f8:	b2d8      	uxtb	r0, r3
 80017fa:	4603      	mov	r3, r0
 80017fc:	01db      	lsls	r3, r3, #7
 80017fe:	4413      	add	r3, r2
 8001800:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <ssd1306_DrawPixel+0xa4>)
 8001802:	5cd3      	ldrb	r3, [r2, r3]
 8001804:	b25a      	sxtb	r2, r3
 8001806:	79bb      	ldrb	r3, [r7, #6]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	2101      	movs	r1, #1
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	b25b      	sxtb	r3, r3
 8001814:	4313      	orrs	r3, r2
 8001816:	b259      	sxtb	r1, r3
 8001818:	79fa      	ldrb	r2, [r7, #7]
 800181a:	4603      	mov	r3, r0
 800181c:	01db      	lsls	r3, r3, #7
 800181e:	4413      	add	r3, r2
 8001820:	b2c9      	uxtb	r1, r1
 8001822:	4a13      	ldr	r2, [pc, #76]	; (8001870 <ssd1306_DrawPixel+0xa4>)
 8001824:	54d1      	strb	r1, [r2, r3]
 8001826:	e01d      	b.n	8001864 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001828:	79fa      	ldrb	r2, [r7, #7]
 800182a:	79bb      	ldrb	r3, [r7, #6]
 800182c:	08db      	lsrs	r3, r3, #3
 800182e:	b2d8      	uxtb	r0, r3
 8001830:	4603      	mov	r3, r0
 8001832:	01db      	lsls	r3, r3, #7
 8001834:	4413      	add	r3, r2
 8001836:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <ssd1306_DrawPixel+0xa4>)
 8001838:	5cd3      	ldrb	r3, [r2, r3]
 800183a:	b25a      	sxtb	r2, r3
 800183c:	79bb      	ldrb	r3, [r7, #6]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	2101      	movs	r1, #1
 8001844:	fa01 f303 	lsl.w	r3, r1, r3
 8001848:	b25b      	sxtb	r3, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	b25b      	sxtb	r3, r3
 800184e:	4013      	ands	r3, r2
 8001850:	b259      	sxtb	r1, r3
 8001852:	79fa      	ldrb	r2, [r7, #7]
 8001854:	4603      	mov	r3, r0
 8001856:	01db      	lsls	r3, r3, #7
 8001858:	4413      	add	r3, r2
 800185a:	b2c9      	uxtb	r1, r1
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <ssd1306_DrawPixel+0xa4>)
 800185e:	54d1      	strb	r1, [r2, r3]
 8001860:	e000      	b.n	8001864 <ssd1306_DrawPixel+0x98>
        return;
 8001862:	bf00      	nop
    }
}
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	200003d4 	.word	0x200003d4

08001874 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	4604      	mov	r4, r0
 800187c:	1d38      	adds	r0, r7, #4
 800187e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001882:	461a      	mov	r2, r3
 8001884:	4623      	mov	r3, r4
 8001886:	73fb      	strb	r3, [r7, #15]
 8001888:	4613      	mov	r3, r2
 800188a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	2b1f      	cmp	r3, #31
 8001890:	d902      	bls.n	8001898 <ssd1306_WriteChar+0x24>
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	2b7e      	cmp	r3, #126	; 0x7e
 8001896:	d901      	bls.n	800189c <ssd1306_WriteChar+0x28>
        return 0;
 8001898:	2300      	movs	r3, #0
 800189a:	e06d      	b.n	8001978 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800189c:	4b38      	ldr	r3, [pc, #224]	; (8001980 <ssd1306_WriteChar+0x10c>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	793b      	ldrb	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	2b80      	cmp	r3, #128	; 0x80
 80018a8:	dc06      	bgt.n	80018b8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80018aa:	4b35      	ldr	r3, [pc, #212]	; (8001980 <ssd1306_WriteChar+0x10c>)
 80018ac:	885b      	ldrh	r3, [r3, #2]
 80018ae:	461a      	mov	r2, r3
 80018b0:	797b      	ldrb	r3, [r7, #5]
 80018b2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80018b4:	2b20      	cmp	r3, #32
 80018b6:	dd01      	ble.n	80018bc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	e05d      	b.n	8001978 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	e04c      	b.n	800195c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	3b20      	subs	r3, #32
 80018c8:	7979      	ldrb	r1, [r7, #5]
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	4619      	mov	r1, r3
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	440b      	add	r3, r1
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80018dc:	2300      	movs	r3, #0
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	e034      	b.n	800194c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d012      	beq.n	8001918 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80018f2:	4b23      	ldr	r3, [pc, #140]	; (8001980 <ssd1306_WriteChar+0x10c>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	b2d8      	uxtb	r0, r3
 8001900:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <ssd1306_WriteChar+0x10c>)
 8001902:	885b      	ldrh	r3, [r3, #2]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	4413      	add	r3, r2
 800190c:	b2db      	uxtb	r3, r3
 800190e:	7bba      	ldrb	r2, [r7, #14]
 8001910:	4619      	mov	r1, r3
 8001912:	f7ff ff5b 	bl	80017cc <ssd1306_DrawPixel>
 8001916:	e016      	b.n	8001946 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <ssd1306_WriteChar+0x10c>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4413      	add	r3, r2
 8001924:	b2d8      	uxtb	r0, r3
 8001926:	4b16      	ldr	r3, [pc, #88]	; (8001980 <ssd1306_WriteChar+0x10c>)
 8001928:	885b      	ldrh	r3, [r3, #2]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	4413      	add	r3, r2
 8001932:	b2d9      	uxtb	r1, r3
 8001934:	7bbb      	ldrb	r3, [r7, #14]
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf0c      	ite	eq
 800193a:	2301      	moveq	r3, #1
 800193c:	2300      	movne	r3, #0
 800193e:	b2db      	uxtb	r3, r3
 8001940:	461a      	mov	r2, r3
 8001942:	f7ff ff43 	bl	80017cc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	3301      	adds	r3, #1
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	793b      	ldrb	r3, [r7, #4]
 800194e:	461a      	mov	r2, r3
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	4293      	cmp	r3, r2
 8001954:	d3c5      	bcc.n	80018e2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3301      	adds	r3, #1
 800195a:	61fb      	str	r3, [r7, #28]
 800195c:	797b      	ldrb	r3, [r7, #5]
 800195e:	461a      	mov	r2, r3
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	4293      	cmp	r3, r2
 8001964:	d3ad      	bcc.n	80018c2 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <ssd1306_WriteChar+0x10c>)
 8001968:	881a      	ldrh	r2, [r3, #0]
 800196a:	793b      	ldrb	r3, [r7, #4]
 800196c:	b29b      	uxth	r3, r3
 800196e:	4413      	add	r3, r2
 8001970:	b29a      	uxth	r2, r3
 8001972:	4b03      	ldr	r3, [pc, #12]	; (8001980 <ssd1306_WriteChar+0x10c>)
 8001974:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3724      	adds	r7, #36	; 0x24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd90      	pop	{r4, r7, pc}
 8001980:	200005d4 	.word	0x200005d4

08001984 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	1d38      	adds	r0, r7, #4
 800198e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001992:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001994:	e012      	b.n	80019bc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	7818      	ldrb	r0, [r3, #0]
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	1d3a      	adds	r2, r7, #4
 800199e:	ca06      	ldmia	r2, {r1, r2}
 80019a0:	f7ff ff68 	bl	8001874 <ssd1306_WriteChar>
 80019a4:	4603      	mov	r3, r0
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d002      	beq.n	80019b6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	e008      	b.n	80019c8 <ssd1306_WriteString+0x44>
        }
        str++;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3301      	adds	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1e8      	bne.n	8001996 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	781b      	ldrb	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	460a      	mov	r2, r1
 80019da:	71fb      	strb	r3, [r7, #7]
 80019dc:	4613      	mov	r3, r2
 80019de:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <ssd1306_SetCursor+0x2c>)
 80019e6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80019e8:	79bb      	ldrb	r3, [r7, #6]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <ssd1306_SetCursor+0x2c>)
 80019ee:	805a      	strh	r2, [r3, #2]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	200005d4 	.word	0x200005d4

08001a00 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001a0a:	2381      	movs	r3, #129	; 0x81
 8001a0c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fddd 	bl	80015d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fdd9 	bl	80015d0 <ssd1306_WriteCommand>
}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001a38:	23af      	movs	r3, #175	; 0xaf
 8001a3a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <ssd1306_SetDisplayOn+0x38>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	715a      	strb	r2, [r3, #5]
 8001a42:	e004      	b.n	8001a4e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001a44:	23ae      	movs	r3, #174	; 0xae
 8001a46:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <ssd1306_SetDisplayOn+0x38>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fdbd 	bl	80015d0 <ssd1306_WriteCommand>
}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200005d4 	.word	0x200005d4

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <HAL_Init+0x40>)
 8001a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_Init+0x40>)
 8001a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_Init+0x40>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 fd4f 	bl	8002530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a92:	200f      	movs	r0, #15
 8001a94:	f000 f808 	bl	8001aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f7ff f9da 	bl	8000e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023c00 	.word	0x40023c00

08001aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_InitTick+0x54>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_InitTick+0x58>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 fd67 	bl	800259a <HAL_SYSTICK_Config>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00e      	b.n	8001af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b0f      	cmp	r3, #15
 8001ada:	d80a      	bhi.n	8001af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001adc:	2200      	movs	r2, #0
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f000 fd2f 	bl	8002546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae8:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <HAL_InitTick+0x5c>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000010 	.word	0x20000010
 8001b04:	2000000c 	.word	0x2000000c

08001b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x20>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_IncTick+0x24>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <HAL_IncTick+0x24>)
 8001b1a:	6013      	str	r3, [r2, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000010 	.word	0x20000010
 8001b2c:	200005dc 	.word	0x200005dc

08001b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return uwTick;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_GetTick+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	200005dc 	.word	0x200005dc

08001b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b50:	f7ff ffee 	bl	8001b30 <HAL_GetTick>
 8001b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b60:	d005      	beq.n	8001b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_Delay+0x44>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b6e:	bf00      	nop
 8001b70:	f7ff ffde 	bl	8001b30 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d8f7      	bhi.n	8001b70 <HAL_Delay+0x28>
  {
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000010 	.word	0x20000010

08001b90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e033      	b.n	8001c0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d109      	bne.n	8001bc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff f976 	bl	8000ea0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d118      	bne.n	8001c00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bd6:	f023 0302 	bic.w	r3, r3, #2
 8001bda:	f043 0202 	orr.w	r2, r3, #2
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 fad8 	bl	8002198 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f023 0303 	bic.w	r3, r3, #3
 8001bf6:	f043 0201 	orr.w	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8001bfe:	e001      	b.n	8001c04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_Start+0x1a>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e0b2      	b.n	8001d98 <HAL_ADC_Start+0x180>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d018      	beq.n	8001c7a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c58:	4b52      	ldr	r3, [pc, #328]	; (8001da4 <HAL_ADC_Start+0x18c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <HAL_ADC_Start+0x190>)
 8001c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c62:	0c9a      	lsrs	r2, r3, #18
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c6c:	e002      	b.n	8001c74 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f9      	bne.n	8001c6e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d17a      	bne.n	8001d7e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c90:	f023 0301 	bic.w	r3, r3, #1
 8001c94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cc6:	d106      	bne.n	8001cd6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ccc:	f023 0206 	bic.w	r2, r3, #6
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	645a      	str	r2, [r3, #68]	; 0x44
 8001cd4:	e002      	b.n	8001cdc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ce4:	4b31      	ldr	r3, [pc, #196]	; (8001dac <HAL_ADC_Start+0x194>)
 8001ce6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cf0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d12a      	bne.n	8001d54 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a2b      	ldr	r2, [pc, #172]	; (8001db0 <HAL_ADC_Start+0x198>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d015      	beq.n	8001d34 <HAL_ADC_Start+0x11c>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a29      	ldr	r2, [pc, #164]	; (8001db4 <HAL_ADC_Start+0x19c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d105      	bne.n	8001d1e <HAL_ADC_Start+0x106>
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <HAL_ADC_Start+0x194>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00a      	beq.n	8001d34 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a25      	ldr	r2, [pc, #148]	; (8001db8 <HAL_ADC_Start+0x1a0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d136      	bne.n	8001d96 <HAL_ADC_Start+0x17e>
 8001d28:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_ADC_Start+0x194>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d130      	bne.n	8001d96 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d129      	bne.n	8001d96 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	e020      	b.n	8001d96 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <HAL_ADC_Start+0x198>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d11b      	bne.n	8001d96 <HAL_ADC_Start+0x17e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d114      	bne.n	8001d96 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	e00b      	b.n	8001d96 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f043 0210 	orr.w	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f043 0201 	orr.w	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	20000000 	.word	0x20000000
 8001da8:	431bde83 	.word	0x431bde83
 8001dac:	40012300 	.word	0x40012300
 8001db0:	40012000 	.word	0x40012000
 8001db4:	40012100 	.word	0x40012100
 8001db8:	40012200 	.word	0x40012200

08001dbc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_Stop+0x16>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e021      	b.n	8001e16 <HAL_ADC_Stop+0x5a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0201 	bic.w	r2, r2, #1
 8001de8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d109      	bne.n	8001e0c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e3e:	d113      	bne.n	8001e68 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e4e:	d10b      	bne.n	8001e68 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	f043 0220 	orr.w	r2, r3, #32
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e063      	b.n	8001f30 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e68:	f7ff fe62 	bl	8001b30 <HAL_GetTick>
 8001e6c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e6e:	e021      	b.n	8001eb4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e76:	d01d      	beq.n	8001eb4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <HAL_ADC_PollForConversion+0x6c>
 8001e7e:	f7ff fe57 	bl	8001b30 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d212      	bcs.n	8001eb4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d00b      	beq.n	8001eb4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	f043 0204 	orr.w	r2, r3, #4
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e03d      	b.n	8001f30 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d1d6      	bne.n	8001e70 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f06f 0212 	mvn.w	r2, #18
 8001eca:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d123      	bne.n	8001f2e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d11f      	bne.n	8001f2e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d006      	beq.n	8001f0a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d111      	bne.n	8001f2e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d105      	bne.n	8001f2e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x1c>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e105      	b.n	800217c <HAL_ADC_ConfigChannel+0x228>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b09      	cmp	r3, #9
 8001f7e:	d925      	bls.n	8001fcc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68d9      	ldr	r1, [r3, #12]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	3b1e      	subs	r3, #30
 8001f96:	2207      	movs	r2, #7
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43da      	mvns	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	400a      	ands	r2, r1
 8001fa4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68d9      	ldr	r1, [r3, #12]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	4603      	mov	r3, r0
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4403      	add	r3, r0
 8001fbe:	3b1e      	subs	r3, #30
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	e022      	b.n	8002012 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6919      	ldr	r1, [r3, #16]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	400a      	ands	r2, r1
 8001fee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6919      	ldr	r1, [r3, #16]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	4618      	mov	r0, r3
 8002002:	4603      	mov	r3, r0
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4403      	add	r3, r0
 8002008:	409a      	lsls	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b06      	cmp	r3, #6
 8002018:	d824      	bhi.n	8002064 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	3b05      	subs	r3, #5
 800202c:	221f      	movs	r2, #31
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43da      	mvns	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	400a      	ands	r2, r1
 800203a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	4618      	mov	r0, r3
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	3b05      	subs	r3, #5
 8002056:	fa00 f203 	lsl.w	r2, r0, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	635a      	str	r2, [r3, #52]	; 0x34
 8002062:	e04c      	b.n	80020fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b0c      	cmp	r3, #12
 800206a:	d824      	bhi.n	80020b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	3b23      	subs	r3, #35	; 0x23
 800207e:	221f      	movs	r2, #31
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43da      	mvns	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	400a      	ands	r2, r1
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	4618      	mov	r0, r3
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	3b23      	subs	r3, #35	; 0x23
 80020a8:	fa00 f203 	lsl.w	r2, r0, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30
 80020b4:	e023      	b.n	80020fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	3b41      	subs	r3, #65	; 0x41
 80020c8:	221f      	movs	r2, #31
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	400a      	ands	r2, r1
 80020d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	4618      	mov	r0, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	3b41      	subs	r3, #65	; 0x41
 80020f2:	fa00 f203 	lsl.w	r2, r0, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020fe:	4b22      	ldr	r3, [pc, #136]	; (8002188 <HAL_ADC_ConfigChannel+0x234>)
 8002100:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a21      	ldr	r2, [pc, #132]	; (800218c <HAL_ADC_ConfigChannel+0x238>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d109      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x1cc>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b12      	cmp	r3, #18
 8002112:	d105      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a19      	ldr	r2, [pc, #100]	; (800218c <HAL_ADC_ConfigChannel+0x238>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d123      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x21e>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b10      	cmp	r3, #16
 8002130:	d003      	beq.n	800213a <HAL_ADC_ConfigChannel+0x1e6>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b11      	cmp	r3, #17
 8002138:	d11b      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b10      	cmp	r3, #16
 800214c:	d111      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <HAL_ADC_ConfigChannel+0x23c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a10      	ldr	r2, [pc, #64]	; (8002194 <HAL_ADC_ConfigChannel+0x240>)
 8002154:	fba2 2303 	umull	r2, r3, r2, r3
 8002158:	0c9a      	lsrs	r2, r3, #18
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002164:	e002      	b.n	800216c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	3b01      	subs	r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f9      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	40012300 	.word	0x40012300
 800218c:	40012000 	.word	0x40012000
 8002190:	20000000 	.word	0x20000000
 8002194:	431bde83 	.word	0x431bde83

08002198 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021a0:	4b79      	ldr	r3, [pc, #484]	; (8002388 <ADC_Init+0x1f0>)
 80021a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	021a      	lsls	r2, r3, #8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6859      	ldr	r1, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002212:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6899      	ldr	r1, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	4a58      	ldr	r2, [pc, #352]	; (800238c <ADC_Init+0x1f4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d022      	beq.n	8002276 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800223e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6899      	ldr	r1, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6899      	ldr	r1, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	e00f      	b.n	8002296 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002284:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002294:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0202 	bic.w	r2, r2, #2
 80022a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6899      	ldr	r1, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7e1b      	ldrb	r3, [r3, #24]
 80022b0:	005a      	lsls	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d01b      	beq.n	80022fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6859      	ldr	r1, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	3b01      	subs	r3, #1
 80022f0:	035a      	lsls	r2, r3, #13
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	e007      	b.n	800230c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800230a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	3b01      	subs	r3, #1
 8002328:	051a      	lsls	r2, r3, #20
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002340:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6899      	ldr	r1, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800234e:	025a      	lsls	r2, r3, #9
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002366:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6899      	ldr	r1, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	029a      	lsls	r2, r3, #10
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	609a      	str	r2, [r3, #8]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40012300 	.word	0x40012300
 800238c:	0f000001 	.word	0x0f000001

08002390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023ac:	4013      	ands	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023c2:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	60d3      	str	r3, [r2, #12]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <__NVIC_GetPriorityGrouping+0x18>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	f003 0307 	and.w	r3, r3, #7
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	2b00      	cmp	r3, #0
 8002404:	db0b      	blt.n	800241e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	4907      	ldr	r1, [pc, #28]	; (800242c <__NVIC_EnableIRQ+0x38>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2001      	movs	r0, #1
 8002416:	fa00 f202 	lsl.w	r2, r0, r2
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000e100 	.word	0xe000e100

08002430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	6039      	str	r1, [r7, #0]
 800243a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	2b00      	cmp	r3, #0
 8002442:	db0a      	blt.n	800245a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	490c      	ldr	r1, [pc, #48]	; (800247c <__NVIC_SetPriority+0x4c>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	0112      	lsls	r2, r2, #4
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	440b      	add	r3, r1
 8002454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002458:	e00a      	b.n	8002470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4908      	ldr	r1, [pc, #32]	; (8002480 <__NVIC_SetPriority+0x50>)
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	3b04      	subs	r3, #4
 8002468:	0112      	lsls	r2, r2, #4
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	440b      	add	r3, r1
 800246e:	761a      	strb	r2, [r3, #24]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000e100 	.word	0xe000e100
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	; 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f1c3 0307 	rsb	r3, r3, #7
 800249e:	2b04      	cmp	r3, #4
 80024a0:	bf28      	it	cs
 80024a2:	2304      	movcs	r3, #4
 80024a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	d902      	bls.n	80024b4 <NVIC_EncodePriority+0x30>
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3b03      	subs	r3, #3
 80024b2:	e000      	b.n	80024b6 <NVIC_EncodePriority+0x32>
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	f04f 32ff 	mov.w	r2, #4294967295
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43da      	mvns	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	401a      	ands	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa01 f303 	lsl.w	r3, r1, r3
 80024d6:	43d9      	mvns	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	4313      	orrs	r3, r2
         );
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3724      	adds	r7, #36	; 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024fc:	d301      	bcc.n	8002502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fe:	2301      	movs	r3, #1
 8002500:	e00f      	b.n	8002522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <SysTick_Config+0x40>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250a:	210f      	movs	r1, #15
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f7ff ff8e 	bl	8002430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <SysTick_Config+0x40>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251a:	4b04      	ldr	r3, [pc, #16]	; (800252c <SysTick_Config+0x40>)
 800251c:	2207      	movs	r2, #7
 800251e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	e000e010 	.word	0xe000e010

08002530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff29 	bl	8002390 <__NVIC_SetPriorityGrouping>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002558:	f7ff ff3e 	bl	80023d8 <__NVIC_GetPriorityGrouping>
 800255c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	6978      	ldr	r0, [r7, #20]
 8002564:	f7ff ff8e 	bl	8002484 <NVIC_EncodePriority>
 8002568:	4602      	mov	r2, r0
 800256a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff5d 	bl	8002430 <__NVIC_SetPriority>
}
 8002576:	bf00      	nop
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff31 	bl	80023f4 <__NVIC_EnableIRQ>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ffa2 	bl	80024ec <SysTick_Config>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7ff fab6 	bl	8001b30 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e099      	b.n	8002704 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f0:	e00f      	b.n	8002612 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025f2:	f7ff fa9d 	bl	8001b30 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d908      	bls.n	8002612 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2220      	movs	r2, #32
 8002604:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2203      	movs	r2, #3
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e078      	b.n	8002704 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1e8      	bne.n	80025f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	4b38      	ldr	r3, [pc, #224]	; (800270c <HAL_DMA_Init+0x158>)
 800262c:	4013      	ands	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800263e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800264a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002656:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4313      	orrs	r3, r2
 8002662:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	2b04      	cmp	r3, #4
 800266a:	d107      	bne.n	800267c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	4313      	orrs	r3, r2
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f023 0307 	bic.w	r3, r3, #7
 8002692:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	4313      	orrs	r3, r2
 800269c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d117      	bne.n	80026d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00e      	beq.n	80026d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f9e9 	bl	8002a90 <DMA_CheckFifoParam>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2240      	movs	r2, #64	; 0x40
 80026c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026d2:	2301      	movs	r3, #1
 80026d4:	e016      	b.n	8002704 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f9a0 	bl	8002a24 <DMA_CalcBaseAndBitshift>
 80026e4:	4603      	mov	r3, r0
 80026e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ec:	223f      	movs	r2, #63	; 0x3f
 80026ee:	409a      	lsls	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	f010803f 	.word	0xf010803f

08002710 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800271c:	4b8e      	ldr	r3, [pc, #568]	; (8002958 <HAL_DMA_IRQHandler+0x248>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a8e      	ldr	r2, [pc, #568]	; (800295c <HAL_DMA_IRQHandler+0x24c>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	0a9b      	lsrs	r3, r3, #10
 8002728:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273a:	2208      	movs	r2, #8
 800273c:	409a      	lsls	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4013      	ands	r3, r2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d01a      	beq.n	800277c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d013      	beq.n	800277c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0204 	bic.w	r2, r2, #4
 8002762:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	2208      	movs	r2, #8
 800276a:	409a      	lsls	r2, r3
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002774:	f043 0201 	orr.w	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002780:	2201      	movs	r2, #1
 8002782:	409a      	lsls	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d012      	beq.n	80027b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279e:	2201      	movs	r2, #1
 80027a0:	409a      	lsls	r2, r3
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	f043 0202 	orr.w	r2, r3, #2
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b6:	2204      	movs	r2, #4
 80027b8:	409a      	lsls	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d012      	beq.n	80027e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00b      	beq.n	80027e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	2204      	movs	r2, #4
 80027d6:	409a      	lsls	r2, r3
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	f043 0204 	orr.w	r2, r3, #4
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ec:	2210      	movs	r2, #16
 80027ee:	409a      	lsls	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d043      	beq.n	8002880 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d03c      	beq.n	8002880 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280a:	2210      	movs	r2, #16
 800280c:	409a      	lsls	r2, r3
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d018      	beq.n	8002852 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d108      	bne.n	8002840 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d024      	beq.n	8002880 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	4798      	blx	r3
 800283e:	e01f      	b.n	8002880 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01b      	beq.n	8002880 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	4798      	blx	r3
 8002850:	e016      	b.n	8002880 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d107      	bne.n	8002870 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0208 	bic.w	r2, r2, #8
 800286e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002884:	2220      	movs	r2, #32
 8002886:	409a      	lsls	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 808f 	beq.w	80029b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 8087 	beq.w	80029b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a6:	2220      	movs	r2, #32
 80028a8:	409a      	lsls	r2, r3
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b05      	cmp	r3, #5
 80028b8:	d136      	bne.n	8002928 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0216 	bic.w	r2, r2, #22
 80028c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695a      	ldr	r2, [r3, #20]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d103      	bne.n	80028ea <HAL_DMA_IRQHandler+0x1da>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d007      	beq.n	80028fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0208 	bic.w	r2, r2, #8
 80028f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	223f      	movs	r2, #63	; 0x3f
 8002900:	409a      	lsls	r2, r3
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800291a:	2b00      	cmp	r3, #0
 800291c:	d07e      	beq.n	8002a1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	4798      	blx	r3
        }
        return;
 8002926:	e079      	b.n	8002a1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d01d      	beq.n	8002972 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10d      	bne.n	8002960 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002948:	2b00      	cmp	r3, #0
 800294a:	d031      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
 8002954:	e02c      	b.n	80029b0 <HAL_DMA_IRQHandler+0x2a0>
 8002956:	bf00      	nop
 8002958:	20000000 	.word	0x20000000
 800295c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002964:	2b00      	cmp	r3, #0
 8002966:	d023      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	4798      	blx	r3
 8002970:	e01e      	b.n	80029b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10f      	bne.n	80029a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0210 	bic.w	r2, r2, #16
 800298e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d032      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d022      	beq.n	8002a0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2205      	movs	r2, #5
 80029c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0201 	bic.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	3301      	adds	r3, #1
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d307      	bcc.n	80029f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f2      	bne.n	80029dc <HAL_DMA_IRQHandler+0x2cc>
 80029f6:	e000      	b.n	80029fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
 8002a1a:	e000      	b.n	8002a1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a1c:	bf00      	nop
    }
  }
}
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	3b10      	subs	r3, #16
 8002a34:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <DMA_CalcBaseAndBitshift+0x64>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a3e:	4a13      	ldr	r2, [pc, #76]	; (8002a8c <DMA_CalcBaseAndBitshift+0x68>)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4413      	add	r3, r2
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d909      	bls.n	8002a66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a5a:	f023 0303 	bic.w	r3, r3, #3
 8002a5e:	1d1a      	adds	r2, r3, #4
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	659a      	str	r2, [r3, #88]	; 0x58
 8002a64:	e007      	b.n	8002a76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a6e:	f023 0303 	bic.w	r3, r3, #3
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	aaaaaaab 	.word	0xaaaaaaab
 8002a8c:	080075f0 	.word	0x080075f0

08002a90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d11f      	bne.n	8002aea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d856      	bhi.n	8002b5e <DMA_CheckFifoParam+0xce>
 8002ab0:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <DMA_CheckFifoParam+0x28>)
 8002ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab6:	bf00      	nop
 8002ab8:	08002ac9 	.word	0x08002ac9
 8002abc:	08002adb 	.word	0x08002adb
 8002ac0:	08002ac9 	.word	0x08002ac9
 8002ac4:	08002b5f 	.word	0x08002b5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d046      	beq.n	8002b62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad8:	e043      	b.n	8002b62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ae2:	d140      	bne.n	8002b66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae8:	e03d      	b.n	8002b66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af2:	d121      	bne.n	8002b38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d837      	bhi.n	8002b6a <DMA_CheckFifoParam+0xda>
 8002afa:	a201      	add	r2, pc, #4	; (adr r2, 8002b00 <DMA_CheckFifoParam+0x70>)
 8002afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b00:	08002b11 	.word	0x08002b11
 8002b04:	08002b17 	.word	0x08002b17
 8002b08:	08002b11 	.word	0x08002b11
 8002b0c:	08002b29 	.word	0x08002b29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
      break;
 8002b14:	e030      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d025      	beq.n	8002b6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b26:	e022      	b.n	8002b6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b30:	d11f      	bne.n	8002b72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b36:	e01c      	b.n	8002b72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d903      	bls.n	8002b46 <DMA_CheckFifoParam+0xb6>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d003      	beq.n	8002b4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b44:	e018      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4a:	e015      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00e      	beq.n	8002b76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b5c:	e00b      	b.n	8002b76 <DMA_CheckFifoParam+0xe6>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e00a      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      break;
 8002b62:	bf00      	nop
 8002b64:	e008      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      break;
 8002b66:	bf00      	nop
 8002b68:	e006      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e004      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6e:	bf00      	nop
 8002b70:	e002      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b72:	bf00      	nop
 8002b74:	e000      	b.n	8002b78 <DMA_CheckFifoParam+0xe8>
      break;
 8002b76:	bf00      	nop
    }
  } 
  
  return status; 
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop

08002b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b089      	sub	sp, #36	; 0x24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	e16b      	b.n	8002e7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	f040 815a 	bne.w	8002e76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d005      	beq.n	8002bda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d130      	bne.n	8002c3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	2203      	movs	r2, #3
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c10:	2201      	movs	r2, #1
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 0201 	and.w	r2, r3, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d017      	beq.n	8002c78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	2203      	movs	r2, #3
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d123      	bne.n	8002ccc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	08da      	lsrs	r2, r3, #3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3208      	adds	r2, #8
 8002c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	220f      	movs	r2, #15
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	08da      	lsrs	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3208      	adds	r2, #8
 8002cc6:	69b9      	ldr	r1, [r7, #24]
 8002cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0203 	and.w	r2, r3, #3
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80b4 	beq.w	8002e76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	4b60      	ldr	r3, [pc, #384]	; (8002e94 <HAL_GPIO_Init+0x30c>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	4a5f      	ldr	r2, [pc, #380]	; (8002e94 <HAL_GPIO_Init+0x30c>)
 8002d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1e:	4b5d      	ldr	r3, [pc, #372]	; (8002e94 <HAL_GPIO_Init+0x30c>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d2a:	4a5b      	ldr	r2, [pc, #364]	; (8002e98 <HAL_GPIO_Init+0x310>)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	089b      	lsrs	r3, r3, #2
 8002d30:	3302      	adds	r3, #2
 8002d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	220f      	movs	r2, #15
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a52      	ldr	r2, [pc, #328]	; (8002e9c <HAL_GPIO_Init+0x314>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d02b      	beq.n	8002dae <HAL_GPIO_Init+0x226>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a51      	ldr	r2, [pc, #324]	; (8002ea0 <HAL_GPIO_Init+0x318>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d025      	beq.n	8002daa <HAL_GPIO_Init+0x222>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a50      	ldr	r2, [pc, #320]	; (8002ea4 <HAL_GPIO_Init+0x31c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01f      	beq.n	8002da6 <HAL_GPIO_Init+0x21e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4f      	ldr	r2, [pc, #316]	; (8002ea8 <HAL_GPIO_Init+0x320>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d019      	beq.n	8002da2 <HAL_GPIO_Init+0x21a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4e      	ldr	r2, [pc, #312]	; (8002eac <HAL_GPIO_Init+0x324>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_GPIO_Init+0x216>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4d      	ldr	r2, [pc, #308]	; (8002eb0 <HAL_GPIO_Init+0x328>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00d      	beq.n	8002d9a <HAL_GPIO_Init+0x212>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4c      	ldr	r2, [pc, #304]	; (8002eb4 <HAL_GPIO_Init+0x32c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d007      	beq.n	8002d96 <HAL_GPIO_Init+0x20e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4b      	ldr	r2, [pc, #300]	; (8002eb8 <HAL_GPIO_Init+0x330>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d101      	bne.n	8002d92 <HAL_GPIO_Init+0x20a>
 8002d8e:	2307      	movs	r3, #7
 8002d90:	e00e      	b.n	8002db0 <HAL_GPIO_Init+0x228>
 8002d92:	2308      	movs	r3, #8
 8002d94:	e00c      	b.n	8002db0 <HAL_GPIO_Init+0x228>
 8002d96:	2306      	movs	r3, #6
 8002d98:	e00a      	b.n	8002db0 <HAL_GPIO_Init+0x228>
 8002d9a:	2305      	movs	r3, #5
 8002d9c:	e008      	b.n	8002db0 <HAL_GPIO_Init+0x228>
 8002d9e:	2304      	movs	r3, #4
 8002da0:	e006      	b.n	8002db0 <HAL_GPIO_Init+0x228>
 8002da2:	2303      	movs	r3, #3
 8002da4:	e004      	b.n	8002db0 <HAL_GPIO_Init+0x228>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e002      	b.n	8002db0 <HAL_GPIO_Init+0x228>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <HAL_GPIO_Init+0x228>
 8002dae:	2300      	movs	r3, #0
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	f002 0203 	and.w	r2, r2, #3
 8002db6:	0092      	lsls	r2, r2, #2
 8002db8:	4093      	lsls	r3, r2
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dc0:	4935      	ldr	r1, [pc, #212]	; (8002e98 <HAL_GPIO_Init+0x310>)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	089b      	lsrs	r3, r3, #2
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dce:	4b3b      	ldr	r3, [pc, #236]	; (8002ebc <HAL_GPIO_Init+0x334>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002df2:	4a32      	ldr	r2, [pc, #200]	; (8002ebc <HAL_GPIO_Init+0x334>)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002df8:	4b30      	ldr	r3, [pc, #192]	; (8002ebc <HAL_GPIO_Init+0x334>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e1c:	4a27      	ldr	r2, [pc, #156]	; (8002ebc <HAL_GPIO_Init+0x334>)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e22:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <HAL_GPIO_Init+0x334>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e46:	4a1d      	ldr	r2, [pc, #116]	; (8002ebc <HAL_GPIO_Init+0x334>)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <HAL_GPIO_Init+0x334>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e70:	4a12      	ldr	r2, [pc, #72]	; (8002ebc <HAL_GPIO_Init+0x334>)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	61fb      	str	r3, [r7, #28]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	2b0f      	cmp	r3, #15
 8002e80:	f67f ae90 	bls.w	8002ba4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	3724      	adds	r7, #36	; 0x24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40013800 	.word	0x40013800
 8002e9c:	40020000 	.word	0x40020000
 8002ea0:	40020400 	.word	0x40020400
 8002ea4:	40020800 	.word	0x40020800
 8002ea8:	40020c00 	.word	0x40020c00
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40021400 	.word	0x40021400
 8002eb4:	40021800 	.word	0x40021800
 8002eb8:	40021c00 	.word	0x40021c00
 8002ebc:	40013c00 	.word	0x40013c00

08002ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	807b      	strh	r3, [r7, #2]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ed0:	787b      	ldrb	r3, [r7, #1]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ed6:	887a      	ldrh	r2, [r7, #2]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002edc:	e003      	b.n	8002ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ede:	887b      	ldrh	r3, [r7, #2]
 8002ee0:	041a      	lsls	r2, r3, #16
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	619a      	str	r2, [r3, #24]
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b085      	sub	sp, #20
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	460b      	mov	r3, r1
 8002efc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f04:	887a      	ldrh	r2, [r7, #2]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	041a      	lsls	r2, r3, #16
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	43d9      	mvns	r1, r3
 8002f10:	887b      	ldrh	r3, [r7, #2]
 8002f12:	400b      	ands	r3, r1
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	619a      	str	r2, [r3, #24]
}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e267      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d075      	beq.n	8003032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f46:	4b88      	ldr	r3, [pc, #544]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d00c      	beq.n	8002f6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f52:	4b85      	ldr	r3, [pc, #532]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d112      	bne.n	8002f84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f5e:	4b82      	ldr	r3, [pc, #520]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f6a:	d10b      	bne.n	8002f84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6c:	4b7e      	ldr	r3, [pc, #504]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d05b      	beq.n	8003030 <HAL_RCC_OscConfig+0x108>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d157      	bne.n	8003030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e242      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8c:	d106      	bne.n	8002f9c <HAL_RCC_OscConfig+0x74>
 8002f8e:	4b76      	ldr	r3, [pc, #472]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a75      	ldr	r2, [pc, #468]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e01d      	b.n	8002fd8 <HAL_RCC_OscConfig+0xb0>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x98>
 8002fa6:	4b70      	ldr	r3, [pc, #448]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a6f      	ldr	r2, [pc, #444]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	4b6d      	ldr	r3, [pc, #436]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a6c      	ldr	r2, [pc, #432]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	e00b      	b.n	8002fd8 <HAL_RCC_OscConfig+0xb0>
 8002fc0:	4b69      	ldr	r3, [pc, #420]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a68      	ldr	r2, [pc, #416]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b66      	ldr	r3, [pc, #408]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a65      	ldr	r2, [pc, #404]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d013      	beq.n	8003008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fda6 	bl	8001b30 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7fe fda2 	bl	8001b30 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	; 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e207      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	4b5b      	ldr	r3, [pc, #364]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xc0>
 8003006:	e014      	b.n	8003032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fe fd92 	bl	8001b30 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe fd8e 	bl	8001b30 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1f3      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003022:	4b51      	ldr	r3, [pc, #324]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0xe8>
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d063      	beq.n	8003106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800303e:	4b4a      	ldr	r3, [pc, #296]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800304a:	4b47      	ldr	r3, [pc, #284]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003052:	2b08      	cmp	r3, #8
 8003054:	d11c      	bne.n	8003090 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003056:	4b44      	ldr	r3, [pc, #272]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d116      	bne.n	8003090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	4b41      	ldr	r3, [pc, #260]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_RCC_OscConfig+0x152>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d001      	beq.n	800307a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e1c7      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307a:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4937      	ldr	r1, [pc, #220]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308e:	e03a      	b.n	8003106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d020      	beq.n	80030da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003098:	4b34      	ldr	r3, [pc, #208]	; (800316c <HAL_RCC_OscConfig+0x244>)
 800309a:	2201      	movs	r2, #1
 800309c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fe fd47 	bl	8001b30 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a6:	f7fe fd43 	bl	8001b30 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e1a8      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b8:	4b2b      	ldr	r3, [pc, #172]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c4:	4b28      	ldr	r3, [pc, #160]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4925      	ldr	r1, [pc, #148]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]
 80030d8:	e015      	b.n	8003106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030da:	4b24      	ldr	r3, [pc, #144]	; (800316c <HAL_RCC_OscConfig+0x244>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe fd26 	bl	8001b30 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e8:	f7fe fd22 	bl	8001b30 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e187      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d036      	beq.n	8003180 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d016      	beq.n	8003148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311a:	4b15      	ldr	r3, [pc, #84]	; (8003170 <HAL_RCC_OscConfig+0x248>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7fe fd06 	bl	8001b30 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003128:	f7fe fd02 	bl	8001b30 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e167      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 800313c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x200>
 8003146:	e01b      	b.n	8003180 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HAL_RCC_OscConfig+0x248>)
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314e:	f7fe fcef 	bl	8001b30 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003154:	e00e      	b.n	8003174 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003156:	f7fe fceb 	bl	8001b30 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d907      	bls.n	8003174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e150      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
 8003168:	40023800 	.word	0x40023800
 800316c:	42470000 	.word	0x42470000
 8003170:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003174:	4b88      	ldr	r3, [pc, #544]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1ea      	bne.n	8003156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8097 	beq.w	80032bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003192:	4b81      	ldr	r3, [pc, #516]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10f      	bne.n	80031be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	4b7d      	ldr	r3, [pc, #500]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	4a7c      	ldr	r2, [pc, #496]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ac:	6413      	str	r3, [r2, #64]	; 0x40
 80031ae:	4b7a      	ldr	r3, [pc, #488]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	4b77      	ldr	r3, [pc, #476]	; (800339c <HAL_RCC_OscConfig+0x474>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d118      	bne.n	80031fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ca:	4b74      	ldr	r3, [pc, #464]	; (800339c <HAL_RCC_OscConfig+0x474>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a73      	ldr	r2, [pc, #460]	; (800339c <HAL_RCC_OscConfig+0x474>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d6:	f7fe fcab 	bl	8001b30 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031de:	f7fe fca7 	bl	8001b30 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e10c      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	4b6a      	ldr	r3, [pc, #424]	; (800339c <HAL_RCC_OscConfig+0x474>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x2ea>
 8003204:	4b64      	ldr	r3, [pc, #400]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	4a63      	ldr	r2, [pc, #396]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6713      	str	r3, [r2, #112]	; 0x70
 8003210:	e01c      	b.n	800324c <HAL_RCC_OscConfig+0x324>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b05      	cmp	r3, #5
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x30c>
 800321a:	4b5f      	ldr	r3, [pc, #380]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	4a5e      	ldr	r2, [pc, #376]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003220:	f043 0304 	orr.w	r3, r3, #4
 8003224:	6713      	str	r3, [r2, #112]	; 0x70
 8003226:	4b5c      	ldr	r3, [pc, #368]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	4a5b      	ldr	r2, [pc, #364]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6713      	str	r3, [r2, #112]	; 0x70
 8003232:	e00b      	b.n	800324c <HAL_RCC_OscConfig+0x324>
 8003234:	4b58      	ldr	r3, [pc, #352]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	4a57      	ldr	r2, [pc, #348]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	6713      	str	r3, [r2, #112]	; 0x70
 8003240:	4b55      	ldr	r3, [pc, #340]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	4a54      	ldr	r2, [pc, #336]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003246:	f023 0304 	bic.w	r3, r3, #4
 800324a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d015      	beq.n	8003280 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7fe fc6c 	bl	8001b30 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325a:	e00a      	b.n	8003272 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800325c:	f7fe fc68 	bl	8001b30 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	; 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e0cb      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003272:	4b49      	ldr	r3, [pc, #292]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0ee      	beq.n	800325c <HAL_RCC_OscConfig+0x334>
 800327e:	e014      	b.n	80032aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003280:	f7fe fc56 	bl	8001b30 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003286:	e00a      	b.n	800329e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003288:	f7fe fc52 	bl	8001b30 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	; 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e0b5      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329e:	4b3e      	ldr	r3, [pc, #248]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1ee      	bne.n	8003288 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d105      	bne.n	80032bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b0:	4b39      	ldr	r3, [pc, #228]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	4a38      	ldr	r2, [pc, #224]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 80032b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80a1 	beq.w	8003408 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032c6:	4b34      	ldr	r3, [pc, #208]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d05c      	beq.n	800338c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d141      	bne.n	800335e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032da:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <HAL_RCC_OscConfig+0x478>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fe fc26 	bl	8001b30 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fe fc22 	bl	8001b30 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e087      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	4b27      	ldr	r3, [pc, #156]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69da      	ldr	r2, [r3, #28]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	019b      	lsls	r3, r3, #6
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	3b01      	subs	r3, #1
 8003320:	041b      	lsls	r3, r3, #16
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	061b      	lsls	r3, r3, #24
 800332a:	491b      	ldr	r1, [pc, #108]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003330:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <HAL_RCC_OscConfig+0x478>)
 8003332:	2201      	movs	r2, #1
 8003334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003336:	f7fe fbfb 	bl	8001b30 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333e:	f7fe fbf7 	bl	8001b30 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e05c      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003350:	4b11      	ldr	r3, [pc, #68]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x416>
 800335c:	e054      	b.n	8003408 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <HAL_RCC_OscConfig+0x478>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fe fbe4 	bl	8001b30 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe fbe0 	bl	8001b30 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e045      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x444>
 800338a:	e03d      	b.n	8003408 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e038      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
 8003398:	40023800 	.word	0x40023800
 800339c:	40007000 	.word	0x40007000
 80033a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033a4:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <HAL_RCC_OscConfig+0x4ec>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d028      	beq.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d121      	bne.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d11a      	bne.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033d4:	4013      	ands	r3, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033dc:	4293      	cmp	r3, r2
 80033de:	d111      	bne.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	085b      	lsrs	r3, r3, #1
 80033ec:	3b01      	subs	r3, #1
 80033ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d107      	bne.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800

08003418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0cc      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800342c:	4b68      	ldr	r3, [pc, #416]	; (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d90c      	bls.n	8003454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b65      	ldr	r3, [pc, #404]	; (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b63      	ldr	r3, [pc, #396]	; (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0b8      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d020      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800346c:	4b59      	ldr	r3, [pc, #356]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4a58      	ldr	r2, [pc, #352]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003476:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003484:	4b53      	ldr	r3, [pc, #332]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4a52      	ldr	r2, [pc, #328]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800348e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003490:	4b50      	ldr	r3, [pc, #320]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	494d      	ldr	r1, [pc, #308]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d044      	beq.n	8003538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d107      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	4b47      	ldr	r3, [pc, #284]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d119      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e07f      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d003      	beq.n	80034d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d107      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d6:	4b3f      	ldr	r3, [pc, #252]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e06f      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e6:	4b3b      	ldr	r3, [pc, #236]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e067      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f6:	4b37      	ldr	r3, [pc, #220]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f023 0203 	bic.w	r2, r3, #3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4934      	ldr	r1, [pc, #208]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003508:	f7fe fb12 	bl	8001b30 <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350e:	e00a      	b.n	8003526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003510:	f7fe fb0e 	bl	8001b30 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f241 3288 	movw	r2, #5000	; 0x1388
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e04f      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003526:	4b2b      	ldr	r3, [pc, #172]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 020c 	and.w	r2, r3, #12
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	429a      	cmp	r2, r3
 8003536:	d1eb      	bne.n	8003510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003538:	4b25      	ldr	r3, [pc, #148]	; (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d20c      	bcs.n	8003560 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003546:	4b22      	ldr	r3, [pc, #136]	; (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800354e:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d001      	beq.n	8003560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e032      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d008      	beq.n	800357e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800356c:	4b19      	ldr	r3, [pc, #100]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4916      	ldr	r1, [pc, #88]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	4313      	orrs	r3, r2
 800357c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d009      	beq.n	800359e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800358a:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	490e      	ldr	r1, [pc, #56]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	4313      	orrs	r3, r2
 800359c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800359e:	f000 f82d 	bl	80035fc <HAL_RCC_GetSysClockFreq>
 80035a2:	4602      	mov	r2, r0
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	490a      	ldr	r1, [pc, #40]	; (80035d8 <HAL_RCC_ClockConfig+0x1c0>)
 80035b0:	5ccb      	ldrb	r3, [r1, r3]
 80035b2:	fa22 f303 	lsr.w	r3, r2, r3
 80035b6:	4a09      	ldr	r2, [pc, #36]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 80035b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035ba:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe fa72 	bl	8001aa8 <HAL_InitTick>

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40023c00 	.word	0x40023c00
 80035d4:	40023800 	.word	0x40023800
 80035d8:	08006fe8 	.word	0x08006fe8
 80035dc:	20000000 	.word	0x20000000
 80035e0:	2000000c 	.word	0x2000000c

080035e4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80035e8:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <HAL_RCC_EnableCSS+0x14>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
}
 80035ee:	bf00      	nop
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	4247004c 	.word	0x4247004c

080035fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003600:	b094      	sub	sp, #80	; 0x50
 8003602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	647b      	str	r3, [r7, #68]	; 0x44
 8003608:	2300      	movs	r3, #0
 800360a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800360c:	2300      	movs	r3, #0
 800360e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003614:	4b79      	ldr	r3, [pc, #484]	; (80037fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 030c 	and.w	r3, r3, #12
 800361c:	2b08      	cmp	r3, #8
 800361e:	d00d      	beq.n	800363c <HAL_RCC_GetSysClockFreq+0x40>
 8003620:	2b08      	cmp	r3, #8
 8003622:	f200 80e1 	bhi.w	80037e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_RCC_GetSysClockFreq+0x34>
 800362a:	2b04      	cmp	r3, #4
 800362c:	d003      	beq.n	8003636 <HAL_RCC_GetSysClockFreq+0x3a>
 800362e:	e0db      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003630:	4b73      	ldr	r3, [pc, #460]	; (8003800 <HAL_RCC_GetSysClockFreq+0x204>)
 8003632:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003634:	e0db      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003636:	4b72      	ldr	r3, [pc, #456]	; (8003800 <HAL_RCC_GetSysClockFreq+0x204>)
 8003638:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800363a:	e0d8      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800363c:	4b6f      	ldr	r3, [pc, #444]	; (80037fc <HAL_RCC_GetSysClockFreq+0x200>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003644:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003646:	4b6d      	ldr	r3, [pc, #436]	; (80037fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d063      	beq.n	800371a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003652:	4b6a      	ldr	r3, [pc, #424]	; (80037fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	099b      	lsrs	r3, r3, #6
 8003658:	2200      	movs	r2, #0
 800365a:	63bb      	str	r3, [r7, #56]	; 0x38
 800365c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003664:	633b      	str	r3, [r7, #48]	; 0x30
 8003666:	2300      	movs	r3, #0
 8003668:	637b      	str	r3, [r7, #52]	; 0x34
 800366a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800366e:	4622      	mov	r2, r4
 8003670:	462b      	mov	r3, r5
 8003672:	f04f 0000 	mov.w	r0, #0
 8003676:	f04f 0100 	mov.w	r1, #0
 800367a:	0159      	lsls	r1, r3, #5
 800367c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003680:	0150      	lsls	r0, r2, #5
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4621      	mov	r1, r4
 8003688:	1a51      	subs	r1, r2, r1
 800368a:	6139      	str	r1, [r7, #16]
 800368c:	4629      	mov	r1, r5
 800368e:	eb63 0301 	sbc.w	r3, r3, r1
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036a0:	4659      	mov	r1, fp
 80036a2:	018b      	lsls	r3, r1, #6
 80036a4:	4651      	mov	r1, sl
 80036a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036aa:	4651      	mov	r1, sl
 80036ac:	018a      	lsls	r2, r1, #6
 80036ae:	4651      	mov	r1, sl
 80036b0:	ebb2 0801 	subs.w	r8, r2, r1
 80036b4:	4659      	mov	r1, fp
 80036b6:	eb63 0901 	sbc.w	r9, r3, r1
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ce:	4690      	mov	r8, r2
 80036d0:	4699      	mov	r9, r3
 80036d2:	4623      	mov	r3, r4
 80036d4:	eb18 0303 	adds.w	r3, r8, r3
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	462b      	mov	r3, r5
 80036dc:	eb49 0303 	adc.w	r3, r9, r3
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036ee:	4629      	mov	r1, r5
 80036f0:	028b      	lsls	r3, r1, #10
 80036f2:	4621      	mov	r1, r4
 80036f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036f8:	4621      	mov	r1, r4
 80036fa:	028a      	lsls	r2, r1, #10
 80036fc:	4610      	mov	r0, r2
 80036fe:	4619      	mov	r1, r3
 8003700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003702:	2200      	movs	r2, #0
 8003704:	62bb      	str	r3, [r7, #40]	; 0x28
 8003706:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003708:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800370c:	f7fc fd5c 	bl	80001c8 <__aeabi_uldivmod>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4613      	mov	r3, r2
 8003716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003718:	e058      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371a:	4b38      	ldr	r3, [pc, #224]	; (80037fc <HAL_RCC_GetSysClockFreq+0x200>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	099b      	lsrs	r3, r3, #6
 8003720:	2200      	movs	r2, #0
 8003722:	4618      	mov	r0, r3
 8003724:	4611      	mov	r1, r2
 8003726:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	2300      	movs	r3, #0
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
 8003730:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003734:	4642      	mov	r2, r8
 8003736:	464b      	mov	r3, r9
 8003738:	f04f 0000 	mov.w	r0, #0
 800373c:	f04f 0100 	mov.w	r1, #0
 8003740:	0159      	lsls	r1, r3, #5
 8003742:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003746:	0150      	lsls	r0, r2, #5
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4641      	mov	r1, r8
 800374e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003752:	4649      	mov	r1, r9
 8003754:	eb63 0b01 	sbc.w	fp, r3, r1
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003764:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003768:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800376c:	ebb2 040a 	subs.w	r4, r2, sl
 8003770:	eb63 050b 	sbc.w	r5, r3, fp
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	00eb      	lsls	r3, r5, #3
 800377e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003782:	00e2      	lsls	r2, r4, #3
 8003784:	4614      	mov	r4, r2
 8003786:	461d      	mov	r5, r3
 8003788:	4643      	mov	r3, r8
 800378a:	18e3      	adds	r3, r4, r3
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	464b      	mov	r3, r9
 8003790:	eb45 0303 	adc.w	r3, r5, r3
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037a2:	4629      	mov	r1, r5
 80037a4:	028b      	lsls	r3, r1, #10
 80037a6:	4621      	mov	r1, r4
 80037a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037ac:	4621      	mov	r1, r4
 80037ae:	028a      	lsls	r2, r1, #10
 80037b0:	4610      	mov	r0, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b6:	2200      	movs	r2, #0
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	61fa      	str	r2, [r7, #28]
 80037bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c0:	f7fc fd02 	bl	80001c8 <__aeabi_uldivmod>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4613      	mov	r3, r2
 80037ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_GetSysClockFreq+0x200>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	0c1b      	lsrs	r3, r3, #16
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	3301      	adds	r3, #1
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80037dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037e6:	e002      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3750      	adds	r7, #80	; 0x50
 80037f4:	46bd      	mov	sp, r7
 80037f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800
 8003800:	00f42400 	.word	0x00f42400

08003804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <HAL_RCC_GetHCLKFreq+0x14>)
 800380a:	681b      	ldr	r3, [r3, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20000000 	.word	0x20000000

0800381c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003820:	f7ff fff0 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 8003824:	4602      	mov	r2, r0
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	0a9b      	lsrs	r3, r3, #10
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	4903      	ldr	r1, [pc, #12]	; (8003840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003832:	5ccb      	ldrb	r3, [r1, r3]
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40023800 	.word	0x40023800
 8003840:	08006ff8 	.word	0x08006ff8

08003844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003848:	f7ff ffdc 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	0b5b      	lsrs	r3, r3, #13
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4903      	ldr	r1, [pc, #12]	; (8003868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	08006ff8 	.word	0x08006ff8

0800386c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <HAL_RCC_NMI_IRQHandler+0x20>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003878:	2b80      	cmp	r3, #128	; 0x80
 800387a:	d104      	bne.n	8003886 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800387c:	f000 f80a 	bl	8003894 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003882:	2280      	movs	r2, #128	; 0x80
 8003884:	701a      	strb	r2, [r3, #0]
  }
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	4002380e 	.word	0x4002380e

08003894 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e07b      	b.n	80039ac <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d108      	bne.n	80038ce <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038c4:	d009      	beq.n	80038da <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	61da      	str	r2, [r3, #28]
 80038cc:	e005      	b.n	80038da <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7fd fb83 	bl	8001000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003910:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800392c:	431a      	orrs	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	ea42 0103 	orr.w	r1, r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003966:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	0c1b      	lsrs	r3, r3, #16
 8003978:	f003 0104 	and.w	r1, r3, #4
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	f003 0210 	and.w	r2, r3, #16
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69da      	ldr	r2, [r3, #28]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800399a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	4613      	mov	r3, r2
 80039c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_SPI_Transmit+0x22>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e126      	b.n	8003c24 <HAL_SPI_Transmit+0x270>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039de:	f7fe f8a7 	bl	8001b30 <HAL_GetTick>
 80039e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d002      	beq.n	80039fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039f4:	2302      	movs	r3, #2
 80039f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039f8:	e10b      	b.n	8003c12 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_SPI_Transmit+0x52>
 8003a00:	88fb      	ldrh	r3, [r7, #6]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d102      	bne.n	8003a0c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a0a:	e102      	b.n	8003c12 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2203      	movs	r2, #3
 8003a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	88fa      	ldrh	r2, [r7, #6]
 8003a24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	88fa      	ldrh	r2, [r7, #6]
 8003a2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a52:	d10f      	bne.n	8003a74 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7e:	2b40      	cmp	r3, #64	; 0x40
 8003a80:	d007      	beq.n	8003a92 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a9a:	d14b      	bne.n	8003b34 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_SPI_Transmit+0xf6>
 8003aa4:	8afb      	ldrh	r3, [r7, #22]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d13e      	bne.n	8003b28 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	881a      	ldrh	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	1c9a      	adds	r2, r3, #2
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ace:	e02b      	b.n	8003b28 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d112      	bne.n	8003b04 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	881a      	ldrh	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	1c9a      	adds	r2, r3, #2
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b02:	e011      	b.n	8003b28 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b04:	f7fe f814 	bl	8001b30 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d803      	bhi.n	8003b1c <HAL_SPI_Transmit+0x168>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1a:	d102      	bne.n	8003b22 <HAL_SPI_Transmit+0x16e>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d102      	bne.n	8003b28 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b26:	e074      	b.n	8003c12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1ce      	bne.n	8003ad0 <HAL_SPI_Transmit+0x11c>
 8003b32:	e04c      	b.n	8003bce <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <HAL_SPI_Transmit+0x18e>
 8003b3c:	8afb      	ldrh	r3, [r7, #22]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d140      	bne.n	8003bc4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	330c      	adds	r3, #12
 8003b4c:	7812      	ldrb	r2, [r2, #0]
 8003b4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b68:	e02c      	b.n	8003bc4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d113      	bne.n	8003ba0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	330c      	adds	r3, #12
 8003b82:	7812      	ldrb	r2, [r2, #0]
 8003b84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b9e:	e011      	b.n	8003bc4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ba0:	f7fd ffc6 	bl	8001b30 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d803      	bhi.n	8003bb8 <HAL_SPI_Transmit+0x204>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	d102      	bne.n	8003bbe <HAL_SPI_Transmit+0x20a>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d102      	bne.n	8003bc4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bc2:	e026      	b.n	8003c12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1cd      	bne.n	8003b6a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	6839      	ldr	r1, [r7, #0]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fbcc 	bl	8004370 <SPI_EndRxTxTransaction>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10a      	bne.n	8003c02 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bec:	2300      	movs	r3, #0
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	77fb      	strb	r3, [r7, #31]
 8003c0e:	e000      	b.n	8003c12 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003c10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c22:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3720      	adds	r7, #32
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c48:	d112      	bne.n	8003c70 <HAL_SPI_Receive+0x44>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10e      	bne.n	8003c70 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2204      	movs	r2, #4
 8003c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	4613      	mov	r3, r2
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f8f1 	bl	8003e4e <HAL_SPI_TransmitReceive>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	e0ea      	b.n	8003e46 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_SPI_Receive+0x52>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e0e3      	b.n	8003e46 <HAL_SPI_Receive+0x21a>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c86:	f7fd ff53 	bl	8001b30 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d002      	beq.n	8003c9e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c9c:	e0ca      	b.n	8003e34 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_SPI_Receive+0x7e>
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003cae:	e0c1      	b.n	8003e34 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2204      	movs	r2, #4
 8003cb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	88fa      	ldrh	r2, [r7, #6]
 8003cc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	88fa      	ldrh	r2, [r7, #6]
 8003cce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf6:	d10f      	bne.n	8003d18 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d16:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d22:	2b40      	cmp	r3, #64	; 0x40
 8003d24:	d007      	beq.n	8003d36 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d162      	bne.n	8003e04 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d3e:	e02e      	b.n	8003d9e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d115      	bne.n	8003d7a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f103 020c 	add.w	r2, r3, #12
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	7812      	ldrb	r2, [r2, #0]
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d78:	e011      	b.n	8003d9e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d7a:	f7fd fed9 	bl	8001b30 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d803      	bhi.n	8003d92 <HAL_SPI_Receive+0x166>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d90:	d102      	bne.n	8003d98 <HAL_SPI_Receive+0x16c>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d9c:	e04a      	b.n	8003e34 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1cb      	bne.n	8003d40 <HAL_SPI_Receive+0x114>
 8003da8:	e031      	b.n	8003e0e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d113      	bne.n	8003de0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	b292      	uxth	r2, r2
 8003dc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	1c9a      	adds	r2, r3, #2
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dde:	e011      	b.n	8003e04 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003de0:	f7fd fea6 	bl	8001b30 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d803      	bhi.n	8003df8 <HAL_SPI_Receive+0x1cc>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df6:	d102      	bne.n	8003dfe <HAL_SPI_Receive+0x1d2>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e02:	e017      	b.n	8003e34 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1cd      	bne.n	8003daa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	6839      	ldr	r1, [r7, #0]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fa46 	bl	80042a4 <SPI_EndRxTransaction>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2220      	movs	r2, #32
 8003e22:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	75fb      	strb	r3, [r7, #23]
 8003e30:	e000      	b.n	8003e34 <HAL_SPI_Receive+0x208>
  }

error :
 8003e32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b08c      	sub	sp, #48	; 0x30
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_SPI_TransmitReceive+0x26>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e18a      	b.n	800418a <HAL_SPI_TransmitReceive+0x33c>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e7c:	f7fd fe58 	bl	8001b30 <HAL_GetTick>
 8003e80:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e92:	887b      	ldrh	r3, [r7, #2]
 8003e94:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d00f      	beq.n	8003ebe <HAL_SPI_TransmitReceive+0x70>
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea4:	d107      	bne.n	8003eb6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d103      	bne.n	8003eb6 <HAL_SPI_TransmitReceive+0x68>
 8003eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d003      	beq.n	8003ebe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ebc:	e15b      	b.n	8004176 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_SPI_TransmitReceive+0x82>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_SPI_TransmitReceive+0x82>
 8003eca:	887b      	ldrh	r3, [r7, #2]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d103      	bne.n	8003ed8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ed6:	e14e      	b.n	8004176 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d003      	beq.n	8003eec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2205      	movs	r2, #5
 8003ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	887a      	ldrh	r2, [r7, #2]
 8003efc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	887a      	ldrh	r2, [r7, #2]
 8003f02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	887a      	ldrh	r2, [r7, #2]
 8003f0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	887a      	ldrh	r2, [r7, #2]
 8003f14:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d007      	beq.n	8003f40 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f48:	d178      	bne.n	800403c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_SPI_TransmitReceive+0x10a>
 8003f52:	8b7b      	ldrh	r3, [r7, #26]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d166      	bne.n	8004026 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	881a      	ldrh	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	1c9a      	adds	r2, r3, #2
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f7c:	e053      	b.n	8004026 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d11b      	bne.n	8003fc4 <HAL_SPI_TransmitReceive+0x176>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d016      	beq.n	8003fc4 <HAL_SPI_TransmitReceive+0x176>
 8003f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d113      	bne.n	8003fc4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	881a      	ldrh	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	1c9a      	adds	r2, r3, #2
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d119      	bne.n	8004006 <HAL_SPI_TransmitReceive+0x1b8>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d014      	beq.n	8004006 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	b292      	uxth	r2, r2
 8003fe8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	1c9a      	adds	r2, r3, #2
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004002:	2301      	movs	r3, #1
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004006:	f7fd fd93 	bl	8001b30 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004012:	429a      	cmp	r2, r3
 8004014:	d807      	bhi.n	8004026 <HAL_SPI_TransmitReceive+0x1d8>
 8004016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401c:	d003      	beq.n	8004026 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004024:	e0a7      	b.n	8004176 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1a6      	bne.n	8003f7e <HAL_SPI_TransmitReceive+0x130>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1a1      	bne.n	8003f7e <HAL_SPI_TransmitReceive+0x130>
 800403a:	e07c      	b.n	8004136 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_SPI_TransmitReceive+0x1fc>
 8004044:	8b7b      	ldrh	r3, [r7, #26]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d16b      	bne.n	8004122 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	7812      	ldrb	r2, [r2, #0]
 8004056:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004070:	e057      	b.n	8004122 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b02      	cmp	r3, #2
 800407e:	d11c      	bne.n	80040ba <HAL_SPI_TransmitReceive+0x26c>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d017      	beq.n	80040ba <HAL_SPI_TransmitReceive+0x26c>
 800408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408c:	2b01      	cmp	r3, #1
 800408e:	d114      	bne.n	80040ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	330c      	adds	r3, #12
 800409a:	7812      	ldrb	r2, [r2, #0]
 800409c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d119      	bne.n	80040fc <HAL_SPI_TransmitReceive+0x2ae>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d014      	beq.n	80040fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040f8:	2301      	movs	r3, #1
 80040fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040fc:	f7fd fd18 	bl	8001b30 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004108:	429a      	cmp	r2, r3
 800410a:	d803      	bhi.n	8004114 <HAL_SPI_TransmitReceive+0x2c6>
 800410c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d102      	bne.n	800411a <HAL_SPI_TransmitReceive+0x2cc>
 8004114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004116:	2b00      	cmp	r3, #0
 8004118:	d103      	bne.n	8004122 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004120:	e029      	b.n	8004176 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1a2      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x224>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d19d      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004138:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f918 	bl	8004370 <SPI_EndRxTxTransaction>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d006      	beq.n	8004154 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004152:	e010      	b.n	8004176 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10b      	bne.n	8004174 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	e000      	b.n	8004176 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004174:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004186:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800418a:	4618      	mov	r0, r3
 800418c:	3730      	adds	r7, #48	; 0x30
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	4613      	mov	r3, r2
 80041a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041a4:	f7fd fcc4 	bl	8001b30 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	4413      	add	r3, r2
 80041b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041b4:	f7fd fcbc 	bl	8001b30 <HAL_GetTick>
 80041b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041ba:	4b39      	ldr	r3, [pc, #228]	; (80042a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	015b      	lsls	r3, r3, #5
 80041c0:	0d1b      	lsrs	r3, r3, #20
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	fb02 f303 	mul.w	r3, r2, r3
 80041c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ca:	e054      	b.n	8004276 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	d050      	beq.n	8004276 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041d4:	f7fd fcac 	bl	8001b30 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d902      	bls.n	80041ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d13d      	bne.n	8004266 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004202:	d111      	bne.n	8004228 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800420c:	d004      	beq.n	8004218 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004216:	d107      	bne.n	8004228 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004230:	d10f      	bne.n	8004252 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e017      	b.n	8004296 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	3b01      	subs	r3, #1
 8004274:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4013      	ands	r3, r2
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	429a      	cmp	r2, r3
 8004284:	bf0c      	ite	eq
 8004286:	2301      	moveq	r3, #1
 8004288:	2300      	movne	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	461a      	mov	r2, r3
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	429a      	cmp	r2, r3
 8004292:	d19b      	bne.n	80041cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000000 	.word	0x20000000

080042a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b8:	d111      	bne.n	80042de <SPI_EndRxTransaction+0x3a>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c2:	d004      	beq.n	80042ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042cc:	d107      	bne.n	80042de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042dc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042e6:	d12a      	bne.n	800433e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f0:	d012      	beq.n	8004318 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2200      	movs	r2, #0
 80042fa:	2180      	movs	r1, #128	; 0x80
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f7ff ff49 	bl	8004194 <SPI_WaitFlagStateUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d02d      	beq.n	8004364 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	f043 0220 	orr.w	r2, r3, #32
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e026      	b.n	8004366 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2200      	movs	r2, #0
 8004320:	2101      	movs	r1, #1
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f7ff ff36 	bl	8004194 <SPI_WaitFlagStateUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d01a      	beq.n	8004364 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004332:	f043 0220 	orr.w	r2, r3, #32
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e013      	b.n	8004366 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2200      	movs	r2, #0
 8004346:	2101      	movs	r1, #1
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7ff ff23 	bl	8004194 <SPI_WaitFlagStateUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	f043 0220 	orr.w	r2, r3, #32
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e000      	b.n	8004366 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800437c:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <SPI_EndRxTxTransaction+0x7c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a1b      	ldr	r2, [pc, #108]	; (80043f0 <SPI_EndRxTxTransaction+0x80>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	0d5b      	lsrs	r3, r3, #21
 8004388:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800438c:	fb02 f303 	mul.w	r3, r2, r3
 8004390:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800439a:	d112      	bne.n	80043c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2200      	movs	r2, #0
 80043a4:	2180      	movs	r1, #128	; 0x80
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f7ff fef4 	bl	8004194 <SPI_WaitFlagStateUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d016      	beq.n	80043e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b6:	f043 0220 	orr.w	r2, r3, #32
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e00f      	b.n	80043e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b80      	cmp	r3, #128	; 0x80
 80043da:	d0f2      	beq.n	80043c2 <SPI_EndRxTxTransaction+0x52>
 80043dc:	e000      	b.n	80043e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80043de:	bf00      	nop
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000000 	.word	0x20000000
 80043f0:	165e9f81 	.word	0x165e9f81

080043f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e041      	b.n	800448a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fc fe6e 	bl	80010fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3304      	adds	r3, #4
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f000 fe3a 	bl	80050ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d001      	beq.n	80044ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e046      	b.n	800453a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a23      	ldr	r2, [pc, #140]	; (8004548 <HAL_TIM_Base_Start+0xb4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d022      	beq.n	8004504 <HAL_TIM_Base_Start+0x70>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c6:	d01d      	beq.n	8004504 <HAL_TIM_Base_Start+0x70>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1f      	ldr	r2, [pc, #124]	; (800454c <HAL_TIM_Base_Start+0xb8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d018      	beq.n	8004504 <HAL_TIM_Base_Start+0x70>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1e      	ldr	r2, [pc, #120]	; (8004550 <HAL_TIM_Base_Start+0xbc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <HAL_TIM_Base_Start+0x70>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1c      	ldr	r2, [pc, #112]	; (8004554 <HAL_TIM_Base_Start+0xc0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00e      	beq.n	8004504 <HAL_TIM_Base_Start+0x70>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1b      	ldr	r2, [pc, #108]	; (8004558 <HAL_TIM_Base_Start+0xc4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_TIM_Base_Start+0x70>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a19      	ldr	r2, [pc, #100]	; (800455c <HAL_TIM_Base_Start+0xc8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_TIM_Base_Start+0x70>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a18      	ldr	r2, [pc, #96]	; (8004560 <HAL_TIM_Base_Start+0xcc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d111      	bne.n	8004528 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b06      	cmp	r3, #6
 8004514:	d010      	beq.n	8004538 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004526:	e007      	b.n	8004538 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40010000 	.word	0x40010000
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40010400 	.word	0x40010400
 800455c:	40014000 	.word	0x40014000
 8004560:	40001800 	.word	0x40001800

08004564 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b01      	cmp	r3, #1
 8004576:	d001      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e04e      	b.n	800461a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a23      	ldr	r2, [pc, #140]	; (8004628 <HAL_TIM_Base_Start_IT+0xc4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d022      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x80>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a6:	d01d      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x80>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1f      	ldr	r2, [pc, #124]	; (800462c <HAL_TIM_Base_Start_IT+0xc8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d018      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x80>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1e      	ldr	r2, [pc, #120]	; (8004630 <HAL_TIM_Base_Start_IT+0xcc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d013      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x80>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1c      	ldr	r2, [pc, #112]	; (8004634 <HAL_TIM_Base_Start_IT+0xd0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00e      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x80>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1b      	ldr	r2, [pc, #108]	; (8004638 <HAL_TIM_Base_Start_IT+0xd4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d009      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x80>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a19      	ldr	r2, [pc, #100]	; (800463c <HAL_TIM_Base_Start_IT+0xd8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d004      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x80>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a18      	ldr	r2, [pc, #96]	; (8004640 <HAL_TIM_Base_Start_IT+0xdc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d111      	bne.n	8004608 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b06      	cmp	r3, #6
 80045f4:	d010      	beq.n	8004618 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0201 	orr.w	r2, r2, #1
 8004604:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004606:	e007      	b.n	8004618 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40010000 	.word	0x40010000
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800
 8004634:	40000c00 	.word	0x40000c00
 8004638:	40010400 	.word	0x40010400
 800463c:	40014000 	.word	0x40014000
 8004640:	40001800 	.word	0x40001800

08004644 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0201 	bic.w	r2, r2, #1
 800465a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6a1a      	ldr	r2, [r3, #32]
 8004662:	f241 1311 	movw	r3, #4369	; 0x1111
 8004666:	4013      	ands	r3, r2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10f      	bne.n	800468c <HAL_TIM_Base_Stop_IT+0x48>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6a1a      	ldr	r2, [r3, #32]
 8004672:	f240 4344 	movw	r3, #1092	; 0x444
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d107      	bne.n	800468c <HAL_TIM_Base_Stop_IT+0x48>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0201 	bic.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e041      	b.n	8004738 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d106      	bne.n	80046ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7fc fd9f 	bl	800120c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2202      	movs	r2, #2
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3304      	adds	r3, #4
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f000 fce3 	bl	80050ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d109      	bne.n	8004764 <HAL_TIM_PWM_Start+0x24>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	bf14      	ite	ne
 800475c:	2301      	movne	r3, #1
 800475e:	2300      	moveq	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	e022      	b.n	80047aa <HAL_TIM_PWM_Start+0x6a>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b04      	cmp	r3, #4
 8004768:	d109      	bne.n	800477e <HAL_TIM_PWM_Start+0x3e>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b01      	cmp	r3, #1
 8004774:	bf14      	ite	ne
 8004776:	2301      	movne	r3, #1
 8004778:	2300      	moveq	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	e015      	b.n	80047aa <HAL_TIM_PWM_Start+0x6a>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b08      	cmp	r3, #8
 8004782:	d109      	bne.n	8004798 <HAL_TIM_PWM_Start+0x58>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b01      	cmp	r3, #1
 800478e:	bf14      	ite	ne
 8004790:	2301      	movne	r3, #1
 8004792:	2300      	moveq	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	e008      	b.n	80047aa <HAL_TIM_PWM_Start+0x6a>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e07c      	b.n	80048ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d104      	bne.n	80047c2 <HAL_TIM_PWM_Start+0x82>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c0:	e013      	b.n	80047ea <HAL_TIM_PWM_Start+0xaa>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d104      	bne.n	80047d2 <HAL_TIM_PWM_Start+0x92>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d0:	e00b      	b.n	80047ea <HAL_TIM_PWM_Start+0xaa>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d104      	bne.n	80047e2 <HAL_TIM_PWM_Start+0xa2>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047e0:	e003      	b.n	80047ea <HAL_TIM_PWM_Start+0xaa>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2202      	movs	r2, #2
 80047e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2201      	movs	r2, #1
 80047f0:	6839      	ldr	r1, [r7, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 ff44 	bl	8005680 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a2d      	ldr	r2, [pc, #180]	; (80048b4 <HAL_TIM_PWM_Start+0x174>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d004      	beq.n	800480c <HAL_TIM_PWM_Start+0xcc>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a2c      	ldr	r2, [pc, #176]	; (80048b8 <HAL_TIM_PWM_Start+0x178>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d101      	bne.n	8004810 <HAL_TIM_PWM_Start+0xd0>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <HAL_TIM_PWM_Start+0xd2>
 8004810:	2300      	movs	r3, #0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d007      	beq.n	8004826 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004824:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a22      	ldr	r2, [pc, #136]	; (80048b4 <HAL_TIM_PWM_Start+0x174>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d022      	beq.n	8004876 <HAL_TIM_PWM_Start+0x136>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004838:	d01d      	beq.n	8004876 <HAL_TIM_PWM_Start+0x136>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1f      	ldr	r2, [pc, #124]	; (80048bc <HAL_TIM_PWM_Start+0x17c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d018      	beq.n	8004876 <HAL_TIM_PWM_Start+0x136>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1d      	ldr	r2, [pc, #116]	; (80048c0 <HAL_TIM_PWM_Start+0x180>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <HAL_TIM_PWM_Start+0x136>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1c      	ldr	r2, [pc, #112]	; (80048c4 <HAL_TIM_PWM_Start+0x184>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00e      	beq.n	8004876 <HAL_TIM_PWM_Start+0x136>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a16      	ldr	r2, [pc, #88]	; (80048b8 <HAL_TIM_PWM_Start+0x178>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d009      	beq.n	8004876 <HAL_TIM_PWM_Start+0x136>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a18      	ldr	r2, [pc, #96]	; (80048c8 <HAL_TIM_PWM_Start+0x188>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d004      	beq.n	8004876 <HAL_TIM_PWM_Start+0x136>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a16      	ldr	r2, [pc, #88]	; (80048cc <HAL_TIM_PWM_Start+0x18c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d111      	bne.n	800489a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b06      	cmp	r3, #6
 8004886:	d010      	beq.n	80048aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004898:	e007      	b.n	80048aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f042 0201 	orr.w	r2, r2, #1
 80048a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40010000 	.word	0x40010000
 80048b8:	40010400 	.word	0x40010400
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40000800 	.word	0x40000800
 80048c4:	40000c00 	.word	0x40000c00
 80048c8:	40014000 	.word	0x40014000
 80048cc:	40001800 	.word	0x40001800

080048d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e097      	b.n	8004a14 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d106      	bne.n	80048fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7fc fced 	bl	80012d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2202      	movs	r2, #2
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6812      	ldr	r2, [r2, #0]
 8004910:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004914:	f023 0307 	bic.w	r3, r3, #7
 8004918:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3304      	adds	r3, #4
 8004922:	4619      	mov	r1, r3
 8004924:	4610      	mov	r0, r2
 8004926:	f000 fbc1 	bl	80050ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004952:	f023 0303 	bic.w	r3, r3, #3
 8004956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	021b      	lsls	r3, r3, #8
 8004962:	4313      	orrs	r3, r2
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004970:	f023 030c 	bic.w	r3, r3, #12
 8004974:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800497c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004980:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	021b      	lsls	r3, r3, #8
 800498c:	4313      	orrs	r3, r2
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	011a      	lsls	r2, r3, #4
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	031b      	lsls	r3, r3, #12
 80049a0:	4313      	orrs	r3, r2
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80049ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80049b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	4313      	orrs	r3, r2
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a2c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a34:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a3c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a44:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d110      	bne.n	8004a6e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d102      	bne.n	8004a58 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a52:	7b7b      	ldrb	r3, [r7, #13]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d001      	beq.n	8004a5c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e069      	b.n	8004b30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a6c:	e031      	b.n	8004ad2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d110      	bne.n	8004a96 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a74:	7bbb      	ldrb	r3, [r7, #14]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d102      	bne.n	8004a80 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a7a:	7b3b      	ldrb	r3, [r7, #12]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d001      	beq.n	8004a84 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e055      	b.n	8004b30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a94:	e01d      	b.n	8004ad2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d108      	bne.n	8004aae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a9c:	7bbb      	ldrb	r3, [r7, #14]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d105      	bne.n	8004aae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004aa2:	7b7b      	ldrb	r3, [r7, #13]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d102      	bne.n	8004aae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004aa8:	7b3b      	ldrb	r3, [r7, #12]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d001      	beq.n	8004ab2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e03e      	b.n	8004b30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2202      	movs	r2, #2
 8004abe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2202      	movs	r2, #2
 8004ace:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_TIM_Encoder_Start+0xc4>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d008      	beq.n	8004af0 <HAL_TIM_Encoder_Start+0xd4>
 8004ade:	e00f      	b.n	8004b00 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fdc9 	bl	8005680 <TIM_CCxChannelCmd>
      break;
 8004aee:	e016      	b.n	8004b1e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2201      	movs	r2, #1
 8004af6:	2104      	movs	r1, #4
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fdc1 	bl	8005680 <TIM_CCxChannelCmd>
      break;
 8004afe:	e00e      	b.n	8004b1e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2201      	movs	r2, #1
 8004b06:	2100      	movs	r1, #0
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 fdb9 	bl	8005680 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2201      	movs	r2, #1
 8004b14:	2104      	movs	r1, #4
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fdb2 	bl	8005680 <TIM_CCxChannelCmd>
      break;
 8004b1c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0201 	orr.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d122      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d11b      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0202 	mvn.w	r2, #2
 8004b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fa77 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004b80:	e005      	b.n	8004b8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fa69 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fa7a 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d122      	bne.n	8004be8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d11b      	bne.n	8004be8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0204 	mvn.w	r2, #4
 8004bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fa4d 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004bd4:	e005      	b.n	8004be2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fa3f 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fa50 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d122      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d11b      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0208 	mvn.w	r2, #8
 8004c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2204      	movs	r2, #4
 8004c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fa23 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004c28:	e005      	b.n	8004c36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fa15 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fa26 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	2b10      	cmp	r3, #16
 8004c48:	d122      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b10      	cmp	r3, #16
 8004c56:	d11b      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f06f 0210 	mvn.w	r2, #16
 8004c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2208      	movs	r2, #8
 8004c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f9f9 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004c7c:	e005      	b.n	8004c8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f9eb 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f9fc 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d10e      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d107      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0201 	mvn.w	r2, #1
 8004cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f002 f82e 	bl	8006d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc6:	2b80      	cmp	r3, #128	; 0x80
 8004cc8:	d10e      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd4:	2b80      	cmp	r3, #128	; 0x80
 8004cd6:	d107      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fd78 	bl	80057d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf2:	2b40      	cmp	r3, #64	; 0x40
 8004cf4:	d10e      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d00:	2b40      	cmp	r3, #64	; 0x40
 8004d02:	d107      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f9c1 	bl	8005096 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d10e      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d107      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0220 	mvn.w	r2, #32
 8004d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fd42 	bl	80057c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d62:	2302      	movs	r3, #2
 8004d64:	e0ae      	b.n	8004ec4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b0c      	cmp	r3, #12
 8004d72:	f200 809f 	bhi.w	8004eb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d76:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004db1 	.word	0x08004db1
 8004d80:	08004eb5 	.word	0x08004eb5
 8004d84:	08004eb5 	.word	0x08004eb5
 8004d88:	08004eb5 	.word	0x08004eb5
 8004d8c:	08004df1 	.word	0x08004df1
 8004d90:	08004eb5 	.word	0x08004eb5
 8004d94:	08004eb5 	.word	0x08004eb5
 8004d98:	08004eb5 	.word	0x08004eb5
 8004d9c:	08004e33 	.word	0x08004e33
 8004da0:	08004eb5 	.word	0x08004eb5
 8004da4:	08004eb5 	.word	0x08004eb5
 8004da8:	08004eb5 	.word	0x08004eb5
 8004dac:	08004e73 	.word	0x08004e73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fa18 	bl	80051ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0208 	orr.w	r2, r2, #8
 8004dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699a      	ldr	r2, [r3, #24]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0204 	bic.w	r2, r2, #4
 8004dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6999      	ldr	r1, [r3, #24]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	619a      	str	r2, [r3, #24]
      break;
 8004dee:	e064      	b.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fa68 	bl	80052cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6999      	ldr	r1, [r3, #24]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	021a      	lsls	r2, r3, #8
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	619a      	str	r2, [r3, #24]
      break;
 8004e30:	e043      	b.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 fabd 	bl	80053b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0208 	orr.w	r2, r2, #8
 8004e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69da      	ldr	r2, [r3, #28]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0204 	bic.w	r2, r2, #4
 8004e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69d9      	ldr	r1, [r3, #28]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	61da      	str	r2, [r3, #28]
      break;
 8004e70:	e023      	b.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fb11 	bl	80054a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69d9      	ldr	r1, [r3, #28]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	021a      	lsls	r2, r3, #8
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	61da      	str	r2, [r3, #28]
      break;
 8004eb2:	e002      	b.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e0b4      	b.n	8005052 <HAL_TIM_ConfigClockSource+0x186>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f20:	d03e      	beq.n	8004fa0 <HAL_TIM_ConfigClockSource+0xd4>
 8004f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f26:	f200 8087 	bhi.w	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2e:	f000 8086 	beq.w	800503e <HAL_TIM_ConfigClockSource+0x172>
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f36:	d87f      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f38:	2b70      	cmp	r3, #112	; 0x70
 8004f3a:	d01a      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0xa6>
 8004f3c:	2b70      	cmp	r3, #112	; 0x70
 8004f3e:	d87b      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f40:	2b60      	cmp	r3, #96	; 0x60
 8004f42:	d050      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x11a>
 8004f44:	2b60      	cmp	r3, #96	; 0x60
 8004f46:	d877      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f48:	2b50      	cmp	r3, #80	; 0x50
 8004f4a:	d03c      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0xfa>
 8004f4c:	2b50      	cmp	r3, #80	; 0x50
 8004f4e:	d873      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f50:	2b40      	cmp	r3, #64	; 0x40
 8004f52:	d058      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0x13a>
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	d86f      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f58:	2b30      	cmp	r3, #48	; 0x30
 8004f5a:	d064      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f5c:	2b30      	cmp	r3, #48	; 0x30
 8004f5e:	d86b      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d060      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d867      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d05c      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d05a      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f70:	e062      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	6899      	ldr	r1, [r3, #8]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f000 fb5d 	bl	8005640 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	609a      	str	r2, [r3, #8]
      break;
 8004f9e:	e04f      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	6899      	ldr	r1, [r3, #8]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f000 fb46 	bl	8005640 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fc2:	609a      	str	r2, [r3, #8]
      break;
 8004fc4:	e03c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6859      	ldr	r1, [r3, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f000 faba 	bl	800554c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2150      	movs	r1, #80	; 0x50
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fb13 	bl	800560a <TIM_ITRx_SetConfig>
      break;
 8004fe4:	e02c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6859      	ldr	r1, [r3, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f000 fad9 	bl	80055aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2160      	movs	r1, #96	; 0x60
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fb03 	bl	800560a <TIM_ITRx_SetConfig>
      break;
 8005004:	e01c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6859      	ldr	r1, [r3, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	461a      	mov	r2, r3
 8005014:	f000 fa9a 	bl	800554c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2140      	movs	r1, #64	; 0x40
 800501e:	4618      	mov	r0, r3
 8005020:	f000 faf3 	bl	800560a <TIM_ITRx_SetConfig>
      break;
 8005024:	e00c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f000 faea 	bl	800560a <TIM_ITRx_SetConfig>
      break;
 8005036:	e003      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
      break;
 800503c:	e000      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800503e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005050:	7bfb      	ldrb	r3, [r7, #15]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
	...

080050ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a40      	ldr	r2, [pc, #256]	; (80051c0 <TIM_Base_SetConfig+0x114>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d013      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ca:	d00f      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a3d      	ldr	r2, [pc, #244]	; (80051c4 <TIM_Base_SetConfig+0x118>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00b      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a3c      	ldr	r2, [pc, #240]	; (80051c8 <TIM_Base_SetConfig+0x11c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d007      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a3b      	ldr	r2, [pc, #236]	; (80051cc <TIM_Base_SetConfig+0x120>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a3a      	ldr	r2, [pc, #232]	; (80051d0 <TIM_Base_SetConfig+0x124>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d108      	bne.n	80050fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2f      	ldr	r2, [pc, #188]	; (80051c0 <TIM_Base_SetConfig+0x114>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d02b      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510c:	d027      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a2c      	ldr	r2, [pc, #176]	; (80051c4 <TIM_Base_SetConfig+0x118>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d023      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a2b      	ldr	r2, [pc, #172]	; (80051c8 <TIM_Base_SetConfig+0x11c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d01f      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a2a      	ldr	r2, [pc, #168]	; (80051cc <TIM_Base_SetConfig+0x120>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d01b      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a29      	ldr	r2, [pc, #164]	; (80051d0 <TIM_Base_SetConfig+0x124>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d017      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a28      	ldr	r2, [pc, #160]	; (80051d4 <TIM_Base_SetConfig+0x128>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a27      	ldr	r2, [pc, #156]	; (80051d8 <TIM_Base_SetConfig+0x12c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00f      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a26      	ldr	r2, [pc, #152]	; (80051dc <TIM_Base_SetConfig+0x130>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00b      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a25      	ldr	r2, [pc, #148]	; (80051e0 <TIM_Base_SetConfig+0x134>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d007      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a24      	ldr	r2, [pc, #144]	; (80051e4 <TIM_Base_SetConfig+0x138>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d003      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a23      	ldr	r2, [pc, #140]	; (80051e8 <TIM_Base_SetConfig+0x13c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d108      	bne.n	8005170 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <TIM_Base_SetConfig+0x114>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <TIM_Base_SetConfig+0xf8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a0c      	ldr	r2, [pc, #48]	; (80051d0 <TIM_Base_SetConfig+0x124>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d103      	bne.n	80051ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	615a      	str	r2, [r3, #20]
}
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40010000 	.word	0x40010000
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000800 	.word	0x40000800
 80051cc:	40000c00 	.word	0x40000c00
 80051d0:	40010400 	.word	0x40010400
 80051d4:	40014000 	.word	0x40014000
 80051d8:	40014400 	.word	0x40014400
 80051dc:	40014800 	.word	0x40014800
 80051e0:	40001800 	.word	0x40001800
 80051e4:	40001c00 	.word	0x40001c00
 80051e8:	40002000 	.word	0x40002000

080051ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f023 0201 	bic.w	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0303 	bic.w	r3, r3, #3
 8005222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f023 0302 	bic.w	r3, r3, #2
 8005234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a20      	ldr	r2, [pc, #128]	; (80052c4 <TIM_OC1_SetConfig+0xd8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d003      	beq.n	8005250 <TIM_OC1_SetConfig+0x64>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a1f      	ldr	r2, [pc, #124]	; (80052c8 <TIM_OC1_SetConfig+0xdc>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d10c      	bne.n	800526a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f023 0308 	bic.w	r3, r3, #8
 8005256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f023 0304 	bic.w	r3, r3, #4
 8005268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a15      	ldr	r2, [pc, #84]	; (80052c4 <TIM_OC1_SetConfig+0xd8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d003      	beq.n	800527a <TIM_OC1_SetConfig+0x8e>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a14      	ldr	r2, [pc, #80]	; (80052c8 <TIM_OC1_SetConfig+0xdc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d111      	bne.n	800529e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	621a      	str	r2, [r3, #32]
}
 80052b8:	bf00      	nop
 80052ba:	371c      	adds	r7, #28
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	40010000 	.word	0x40010000
 80052c8:	40010400 	.word	0x40010400

080052cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f023 0210 	bic.w	r2, r3, #16
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	021b      	lsls	r3, r3, #8
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f023 0320 	bic.w	r3, r3, #32
 8005316:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a22      	ldr	r2, [pc, #136]	; (80053b0 <TIM_OC2_SetConfig+0xe4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d003      	beq.n	8005334 <TIM_OC2_SetConfig+0x68>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a21      	ldr	r2, [pc, #132]	; (80053b4 <TIM_OC2_SetConfig+0xe8>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d10d      	bne.n	8005350 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800533a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800534e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a17      	ldr	r2, [pc, #92]	; (80053b0 <TIM_OC2_SetConfig+0xe4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d003      	beq.n	8005360 <TIM_OC2_SetConfig+0x94>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a16      	ldr	r2, [pc, #88]	; (80053b4 <TIM_OC2_SetConfig+0xe8>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d113      	bne.n	8005388 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005366:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800536e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	621a      	str	r2, [r3, #32]
}
 80053a2:	bf00      	nop
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40010000 	.word	0x40010000
 80053b4:	40010400 	.word	0x40010400

080053b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0303 	bic.w	r3, r3, #3
 80053ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	021b      	lsls	r3, r3, #8
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a21      	ldr	r2, [pc, #132]	; (8005498 <TIM_OC3_SetConfig+0xe0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_OC3_SetConfig+0x66>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a20      	ldr	r2, [pc, #128]	; (800549c <TIM_OC3_SetConfig+0xe4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d10d      	bne.n	800543a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005424:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	021b      	lsls	r3, r3, #8
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a16      	ldr	r2, [pc, #88]	; (8005498 <TIM_OC3_SetConfig+0xe0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d003      	beq.n	800544a <TIM_OC3_SetConfig+0x92>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a15      	ldr	r2, [pc, #84]	; (800549c <TIM_OC3_SetConfig+0xe4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d113      	bne.n	8005472 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	011b      	lsls	r3, r3, #4
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	621a      	str	r2, [r3, #32]
}
 800548c:	bf00      	nop
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	40010000 	.word	0x40010000
 800549c:	40010400 	.word	0x40010400

080054a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	031b      	lsls	r3, r3, #12
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a12      	ldr	r2, [pc, #72]	; (8005544 <TIM_OC4_SetConfig+0xa4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_OC4_SetConfig+0x68>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a11      	ldr	r2, [pc, #68]	; (8005548 <TIM_OC4_SetConfig+0xa8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d109      	bne.n	800551c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800550e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	019b      	lsls	r3, r3, #6
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40010000 	.word	0x40010000
 8005548:	40010400 	.word	0x40010400

0800554c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	f023 0201 	bic.w	r2, r3, #1
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f023 030a 	bic.w	r3, r3, #10
 8005588:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b087      	sub	sp, #28
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	f023 0210 	bic.w	r2, r3, #16
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	031b      	lsls	r3, r3, #12
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	621a      	str	r2, [r3, #32]
}
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800560a:	b480      	push	{r7}
 800560c:	b085      	sub	sp, #20
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005620:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	f043 0307 	orr.w	r3, r3, #7
 800562c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	609a      	str	r2, [r3, #8]
}
 8005634:	bf00      	nop
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800565a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	021a      	lsls	r2, r3, #8
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	431a      	orrs	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4313      	orrs	r3, r2
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	609a      	str	r2, [r3, #8]
}
 8005674:	bf00      	nop
 8005676:	371c      	adds	r7, #28
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f003 031f 	and.w	r3, r3, #31
 8005692:	2201      	movs	r2, #1
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a1a      	ldr	r2, [r3, #32]
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	43db      	mvns	r3, r3
 80056a2:	401a      	ands	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a1a      	ldr	r2, [r3, #32]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	fa01 f303 	lsl.w	r3, r1, r3
 80056b8:	431a      	orrs	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	621a      	str	r2, [r3, #32]
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e05a      	b.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a21      	ldr	r2, [pc, #132]	; (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d022      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005730:	d01d      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1d      	ldr	r2, [pc, #116]	; (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d018      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a1b      	ldr	r2, [pc, #108]	; (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d013      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a1a      	ldr	r2, [pc, #104]	; (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d00e      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a18      	ldr	r2, [pc, #96]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d009      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a17      	ldr	r2, [pc, #92]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d004      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a15      	ldr	r2, [pc, #84]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d10c      	bne.n	8005788 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	4313      	orrs	r3, r2
 800577e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40010000 	.word	0x40010000
 80057ac:	40000400 	.word	0x40000400
 80057b0:	40000800 	.word	0x40000800
 80057b4:	40000c00 	.word	0x40000c00
 80057b8:	40010400 	.word	0x40010400
 80057bc:	40014000 	.word	0x40014000
 80057c0:	40001800 	.word	0x40001800

080057c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e03f      	b.n	800587e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fb fe08 	bl	8001428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2224      	movs	r2, #36	; 0x24
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800582e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f829 	bl	8005888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	695a      	ldr	r2, [r3, #20]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800588c:	b0c0      	sub	sp, #256	; 0x100
 800588e:	af00      	add	r7, sp, #0
 8005890:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a4:	68d9      	ldr	r1, [r3, #12]
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	ea40 0301 	orr.w	r3, r0, r1
 80058b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	431a      	orrs	r2, r3
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058e0:	f021 010c 	bic.w	r1, r1, #12
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058ee:	430b      	orrs	r3, r1
 80058f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005902:	6999      	ldr	r1, [r3, #24]
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	ea40 0301 	orr.w	r3, r0, r1
 800590e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	4b8f      	ldr	r3, [pc, #572]	; (8005b54 <UART_SetConfig+0x2cc>)
 8005918:	429a      	cmp	r2, r3
 800591a:	d005      	beq.n	8005928 <UART_SetConfig+0xa0>
 800591c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4b8d      	ldr	r3, [pc, #564]	; (8005b58 <UART_SetConfig+0x2d0>)
 8005924:	429a      	cmp	r2, r3
 8005926:	d104      	bne.n	8005932 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005928:	f7fd ff8c 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 800592c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005930:	e003      	b.n	800593a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005932:	f7fd ff73 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 8005936:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800593a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005944:	f040 810c 	bne.w	8005b60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800594c:	2200      	movs	r2, #0
 800594e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005952:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005956:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800595a:	4622      	mov	r2, r4
 800595c:	462b      	mov	r3, r5
 800595e:	1891      	adds	r1, r2, r2
 8005960:	65b9      	str	r1, [r7, #88]	; 0x58
 8005962:	415b      	adcs	r3, r3
 8005964:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005966:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800596a:	4621      	mov	r1, r4
 800596c:	eb12 0801 	adds.w	r8, r2, r1
 8005970:	4629      	mov	r1, r5
 8005972:	eb43 0901 	adc.w	r9, r3, r1
 8005976:	f04f 0200 	mov.w	r2, #0
 800597a:	f04f 0300 	mov.w	r3, #0
 800597e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800598a:	4690      	mov	r8, r2
 800598c:	4699      	mov	r9, r3
 800598e:	4623      	mov	r3, r4
 8005990:	eb18 0303 	adds.w	r3, r8, r3
 8005994:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005998:	462b      	mov	r3, r5
 800599a:	eb49 0303 	adc.w	r3, r9, r3
 800599e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80059b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059b6:	460b      	mov	r3, r1
 80059b8:	18db      	adds	r3, r3, r3
 80059ba:	653b      	str	r3, [r7, #80]	; 0x50
 80059bc:	4613      	mov	r3, r2
 80059be:	eb42 0303 	adc.w	r3, r2, r3
 80059c2:	657b      	str	r3, [r7, #84]	; 0x54
 80059c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80059c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80059cc:	f7fa fbfc 	bl	80001c8 <__aeabi_uldivmod>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4b61      	ldr	r3, [pc, #388]	; (8005b5c <UART_SetConfig+0x2d4>)
 80059d6:	fba3 2302 	umull	r2, r3, r3, r2
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	011c      	lsls	r4, r3, #4
 80059de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80059ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80059f0:	4642      	mov	r2, r8
 80059f2:	464b      	mov	r3, r9
 80059f4:	1891      	adds	r1, r2, r2
 80059f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80059f8:	415b      	adcs	r3, r3
 80059fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a00:	4641      	mov	r1, r8
 8005a02:	eb12 0a01 	adds.w	sl, r2, r1
 8005a06:	4649      	mov	r1, r9
 8005a08:	eb43 0b01 	adc.w	fp, r3, r1
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a20:	4692      	mov	sl, r2
 8005a22:	469b      	mov	fp, r3
 8005a24:	4643      	mov	r3, r8
 8005a26:	eb1a 0303 	adds.w	r3, sl, r3
 8005a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a2e:	464b      	mov	r3, r9
 8005a30:	eb4b 0303 	adc.w	r3, fp, r3
 8005a34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	18db      	adds	r3, r3, r3
 8005a50:	643b      	str	r3, [r7, #64]	; 0x40
 8005a52:	4613      	mov	r3, r2
 8005a54:	eb42 0303 	adc.w	r3, r2, r3
 8005a58:	647b      	str	r3, [r7, #68]	; 0x44
 8005a5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a62:	f7fa fbb1 	bl	80001c8 <__aeabi_uldivmod>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	4b3b      	ldr	r3, [pc, #236]	; (8005b5c <UART_SetConfig+0x2d4>)
 8005a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	2264      	movs	r2, #100	; 0x64
 8005a76:	fb02 f303 	mul.w	r3, r2, r3
 8005a7a:	1acb      	subs	r3, r1, r3
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a82:	4b36      	ldr	r3, [pc, #216]	; (8005b5c <UART_SetConfig+0x2d4>)
 8005a84:	fba3 2302 	umull	r2, r3, r3, r2
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a90:	441c      	add	r4, r3
 8005a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005aa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005aa4:	4642      	mov	r2, r8
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	1891      	adds	r1, r2, r2
 8005aaa:	63b9      	str	r1, [r7, #56]	; 0x38
 8005aac:	415b      	adcs	r3, r3
 8005aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ab0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ab4:	4641      	mov	r1, r8
 8005ab6:	1851      	adds	r1, r2, r1
 8005ab8:	6339      	str	r1, [r7, #48]	; 0x30
 8005aba:	4649      	mov	r1, r9
 8005abc:	414b      	adcs	r3, r1
 8005abe:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005acc:	4659      	mov	r1, fp
 8005ace:	00cb      	lsls	r3, r1, #3
 8005ad0:	4651      	mov	r1, sl
 8005ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ad6:	4651      	mov	r1, sl
 8005ad8:	00ca      	lsls	r2, r1, #3
 8005ada:	4610      	mov	r0, r2
 8005adc:	4619      	mov	r1, r3
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4642      	mov	r2, r8
 8005ae2:	189b      	adds	r3, r3, r2
 8005ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ae8:	464b      	mov	r3, r9
 8005aea:	460a      	mov	r2, r1
 8005aec:	eb42 0303 	adc.w	r3, r2, r3
 8005af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b08:	460b      	mov	r3, r1
 8005b0a:	18db      	adds	r3, r3, r3
 8005b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b0e:	4613      	mov	r3, r2
 8005b10:	eb42 0303 	adc.w	r3, r2, r3
 8005b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b1e:	f7fa fb53 	bl	80001c8 <__aeabi_uldivmod>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4b0d      	ldr	r3, [pc, #52]	; (8005b5c <UART_SetConfig+0x2d4>)
 8005b28:	fba3 1302 	umull	r1, r3, r3, r2
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	2164      	movs	r1, #100	; 0x64
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	3332      	adds	r3, #50	; 0x32
 8005b3a:	4a08      	ldr	r2, [pc, #32]	; (8005b5c <UART_SetConfig+0x2d4>)
 8005b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	f003 0207 	and.w	r2, r3, #7
 8005b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4422      	add	r2, r4
 8005b4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b50:	e106      	b.n	8005d60 <UART_SetConfig+0x4d8>
 8005b52:	bf00      	nop
 8005b54:	40011000 	.word	0x40011000
 8005b58:	40011400 	.word	0x40011400
 8005b5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b64:	2200      	movs	r2, #0
 8005b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b72:	4642      	mov	r2, r8
 8005b74:	464b      	mov	r3, r9
 8005b76:	1891      	adds	r1, r2, r2
 8005b78:	6239      	str	r1, [r7, #32]
 8005b7a:	415b      	adcs	r3, r3
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b82:	4641      	mov	r1, r8
 8005b84:	1854      	adds	r4, r2, r1
 8005b86:	4649      	mov	r1, r9
 8005b88:	eb43 0501 	adc.w	r5, r3, r1
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	f04f 0300 	mov.w	r3, #0
 8005b94:	00eb      	lsls	r3, r5, #3
 8005b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b9a:	00e2      	lsls	r2, r4, #3
 8005b9c:	4614      	mov	r4, r2
 8005b9e:	461d      	mov	r5, r3
 8005ba0:	4643      	mov	r3, r8
 8005ba2:	18e3      	adds	r3, r4, r3
 8005ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ba8:	464b      	mov	r3, r9
 8005baa:	eb45 0303 	adc.w	r3, r5, r3
 8005bae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	f04f 0300 	mov.w	r3, #0
 8005bca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005bce:	4629      	mov	r1, r5
 8005bd0:	008b      	lsls	r3, r1, #2
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bd8:	4621      	mov	r1, r4
 8005bda:	008a      	lsls	r2, r1, #2
 8005bdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005be0:	f7fa faf2 	bl	80001c8 <__aeabi_uldivmod>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4b60      	ldr	r3, [pc, #384]	; (8005d6c <UART_SetConfig+0x4e4>)
 8005bea:	fba3 2302 	umull	r2, r3, r3, r2
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	011c      	lsls	r4, r3, #4
 8005bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c04:	4642      	mov	r2, r8
 8005c06:	464b      	mov	r3, r9
 8005c08:	1891      	adds	r1, r2, r2
 8005c0a:	61b9      	str	r1, [r7, #24]
 8005c0c:	415b      	adcs	r3, r3
 8005c0e:	61fb      	str	r3, [r7, #28]
 8005c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c14:	4641      	mov	r1, r8
 8005c16:	1851      	adds	r1, r2, r1
 8005c18:	6139      	str	r1, [r7, #16]
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	414b      	adcs	r3, r1
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c2c:	4659      	mov	r1, fp
 8005c2e:	00cb      	lsls	r3, r1, #3
 8005c30:	4651      	mov	r1, sl
 8005c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c36:	4651      	mov	r1, sl
 8005c38:	00ca      	lsls	r2, r1, #3
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4603      	mov	r3, r0
 8005c40:	4642      	mov	r2, r8
 8005c42:	189b      	adds	r3, r3, r2
 8005c44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c48:	464b      	mov	r3, r9
 8005c4a:	460a      	mov	r2, r1
 8005c4c:	eb42 0303 	adc.w	r3, r2, r3
 8005c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c60:	f04f 0200 	mov.w	r2, #0
 8005c64:	f04f 0300 	mov.w	r3, #0
 8005c68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	008b      	lsls	r3, r1, #2
 8005c70:	4641      	mov	r1, r8
 8005c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c76:	4641      	mov	r1, r8
 8005c78:	008a      	lsls	r2, r1, #2
 8005c7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c7e:	f7fa faa3 	bl	80001c8 <__aeabi_uldivmod>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4611      	mov	r1, r2
 8005c88:	4b38      	ldr	r3, [pc, #224]	; (8005d6c <UART_SetConfig+0x4e4>)
 8005c8a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	2264      	movs	r2, #100	; 0x64
 8005c92:	fb02 f303 	mul.w	r3, r2, r3
 8005c96:	1acb      	subs	r3, r1, r3
 8005c98:	011b      	lsls	r3, r3, #4
 8005c9a:	3332      	adds	r3, #50	; 0x32
 8005c9c:	4a33      	ldr	r2, [pc, #204]	; (8005d6c <UART_SetConfig+0x4e4>)
 8005c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca2:	095b      	lsrs	r3, r3, #5
 8005ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ca8:	441c      	add	r4, r3
 8005caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cae:	2200      	movs	r2, #0
 8005cb0:	673b      	str	r3, [r7, #112]	; 0x70
 8005cb2:	677a      	str	r2, [r7, #116]	; 0x74
 8005cb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005cb8:	4642      	mov	r2, r8
 8005cba:	464b      	mov	r3, r9
 8005cbc:	1891      	adds	r1, r2, r2
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	415b      	adcs	r3, r3
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cc8:	4641      	mov	r1, r8
 8005cca:	1851      	adds	r1, r2, r1
 8005ccc:	6039      	str	r1, [r7, #0]
 8005cce:	4649      	mov	r1, r9
 8005cd0:	414b      	adcs	r3, r1
 8005cd2:	607b      	str	r3, [r7, #4]
 8005cd4:	f04f 0200 	mov.w	r2, #0
 8005cd8:	f04f 0300 	mov.w	r3, #0
 8005cdc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ce0:	4659      	mov	r1, fp
 8005ce2:	00cb      	lsls	r3, r1, #3
 8005ce4:	4651      	mov	r1, sl
 8005ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cea:	4651      	mov	r1, sl
 8005cec:	00ca      	lsls	r2, r1, #3
 8005cee:	4610      	mov	r0, r2
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	4642      	mov	r2, r8
 8005cf6:	189b      	adds	r3, r3, r2
 8005cf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cfa:	464b      	mov	r3, r9
 8005cfc:	460a      	mov	r2, r1
 8005cfe:	eb42 0303 	adc.w	r3, r2, r3
 8005d02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	663b      	str	r3, [r7, #96]	; 0x60
 8005d0e:	667a      	str	r2, [r7, #100]	; 0x64
 8005d10:	f04f 0200 	mov.w	r2, #0
 8005d14:	f04f 0300 	mov.w	r3, #0
 8005d18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d1c:	4649      	mov	r1, r9
 8005d1e:	008b      	lsls	r3, r1, #2
 8005d20:	4641      	mov	r1, r8
 8005d22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d26:	4641      	mov	r1, r8
 8005d28:	008a      	lsls	r2, r1, #2
 8005d2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d2e:	f7fa fa4b 	bl	80001c8 <__aeabi_uldivmod>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <UART_SetConfig+0x4e4>)
 8005d38:	fba3 1302 	umull	r1, r3, r3, r2
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	2164      	movs	r1, #100	; 0x64
 8005d40:	fb01 f303 	mul.w	r3, r1, r3
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	3332      	adds	r3, #50	; 0x32
 8005d4a:	4a08      	ldr	r2, [pc, #32]	; (8005d6c <UART_SetConfig+0x4e4>)
 8005d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	f003 020f 	and.w	r2, r3, #15
 8005d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4422      	add	r2, r4
 8005d5e:	609a      	str	r2, [r3, #8]
}
 8005d60:	bf00      	nop
 8005d62:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d66:	46bd      	mov	sp, r7
 8005d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d6c:	51eb851f 	.word	0x51eb851f

08005d70 <L3GD20_Init>:
int ss;

volatile int16_t Raw_z = 0;

void L3GD20_Init(void)
{	LED9_ON;LED10_ON;LED11_ON;
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	; 0x28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	2201      	movs	r2, #1
 8005d78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d7c:	48ac      	ldr	r0, [pc, #688]	; (8006030 <L3GD20_Init+0x2c0>)
 8005d7e:	f7fd f89f 	bl	8002ec0 <HAL_GPIO_WritePin>
 8005d82:	2201      	movs	r2, #1
 8005d84:	2101      	movs	r1, #1
 8005d86:	48ab      	ldr	r0, [pc, #684]	; (8006034 <L3GD20_Init+0x2c4>)
 8005d88:	f7fd f89a 	bl	8002ec0 <HAL_GPIO_WritePin>
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005d92:	48a7      	ldr	r0, [pc, #668]	; (8006030 <L3GD20_Init+0x2c0>)
 8005d94:	f7fd f894 	bl	8002ec0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d9e:	48a5      	ldr	r0, [pc, #660]	; (8006034 <L3GD20_Init+0x2c4>)
 8005da0:	f7fd f88e 	bl	8002ec0 <HAL_GPIO_WritePin>
	spiTxBuf[0] = 0x0F; // who i am register address
 8005da4:	4ba4      	ldr	r3, [pc, #656]	; (8006038 <L3GD20_Init+0x2c8>)
 8005da6:	220f      	movs	r2, #15
 8005da8:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8005daa:	2332      	movs	r3, #50	; 0x32
 8005dac:	2201      	movs	r2, #1
 8005dae:	49a2      	ldr	r1, [pc, #648]	; (8006038 <L3GD20_Init+0x2c8>)
 8005db0:	48a2      	ldr	r0, [pc, #648]	; (800603c <L3GD20_Init+0x2cc>)
 8005db2:	f7fd fdff 	bl	80039b4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &spiRxBuf[1], 1, 50);
 8005db6:	2332      	movs	r3, #50	; 0x32
 8005db8:	2201      	movs	r2, #1
 8005dba:	49a1      	ldr	r1, [pc, #644]	; (8006040 <L3GD20_Init+0x2d0>)
 8005dbc:	489f      	ldr	r0, [pc, #636]	; (800603c <L3GD20_Init+0x2cc>)
 8005dbe:	f7fd ff35 	bl	8003c2c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dc8:	489a      	ldr	r0, [pc, #616]	; (8006034 <L3GD20_Init+0x2c4>)
 8005dca:	f7fd f879 	bl	8002ec0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dd4:	4897      	ldr	r0, [pc, #604]	; (8006034 <L3GD20_Init+0x2c4>)
 8005dd6:	f7fd f873 	bl	8002ec0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005dda:	2014      	movs	r0, #20
 8005ddc:	f7fb feb4 	bl	8001b48 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005de0:	2200      	movs	r2, #0
 8005de2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005de6:	4893      	ldr	r0, [pc, #588]	; (8006034 <L3GD20_Init+0x2c4>)
 8005de8:	f7fd f86a 	bl	8002ec0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005dec:	2014      	movs	r0, #20
 8005dee:	f7fb feab 	bl	8001b48 <HAL_Delay>
	spiTxBuf[0] = 0x20;
 8005df2:	4b91      	ldr	r3, [pc, #580]	; (8006038 <L3GD20_Init+0x2c8>)
 8005df4:	2220      	movs	r2, #32
 8005df6:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0xff;
 8005df8:	4b8f      	ldr	r3, [pc, #572]	; (8006038 <L3GD20_Init+0x2c8>)
 8005dfa:	22ff      	movs	r2, #255	; 0xff
 8005dfc:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8005dfe:	2332      	movs	r3, #50	; 0x32
 8005e00:	2202      	movs	r2, #2
 8005e02:	498d      	ldr	r1, [pc, #564]	; (8006038 <L3GD20_Init+0x2c8>)
 8005e04:	488d      	ldr	r0, [pc, #564]	; (800603c <L3GD20_Init+0x2cc>)
 8005e06:	f7fd fdd5 	bl	80039b4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e10:	4888      	ldr	r0, [pc, #544]	; (8006034 <L3GD20_Init+0x2c4>)
 8005e12:	f7fd f855 	bl	8002ec0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005e16:	2014      	movs	r0, #20
 8005e18:	f7fb fe96 	bl	8001b48 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e22:	4884      	ldr	r0, [pc, #528]	; (8006034 <L3GD20_Init+0x2c4>)
 8005e24:	f7fd f84c 	bl	8002ec0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005e28:	2014      	movs	r0, #20
 8005e2a:	f7fb fe8d 	bl	8001b48 <HAL_Delay>
	spiTxBuf[0] = 0x21;
 8005e2e:	4b82      	ldr	r3, [pc, #520]	; (8006038 <L3GD20_Init+0x2c8>)
 8005e30:	2221      	movs	r2, #33	; 0x21
 8005e32:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x00;
 8005e34:	4b80      	ldr	r3, [pc, #512]	; (8006038 <L3GD20_Init+0x2c8>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8005e3a:	2332      	movs	r3, #50	; 0x32
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	497e      	ldr	r1, [pc, #504]	; (8006038 <L3GD20_Init+0x2c8>)
 8005e40:	487e      	ldr	r0, [pc, #504]	; (800603c <L3GD20_Init+0x2cc>)
 8005e42:	f7fd fdb7 	bl	80039b4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005e46:	2201      	movs	r2, #1
 8005e48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e4c:	4879      	ldr	r0, [pc, #484]	; (8006034 <L3GD20_Init+0x2c4>)
 8005e4e:	f7fd f837 	bl	8002ec0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005e52:	2014      	movs	r0, #20
 8005e54:	f7fb fe78 	bl	8001b48 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e5e:	4875      	ldr	r0, [pc, #468]	; (8006034 <L3GD20_Init+0x2c4>)
 8005e60:	f7fd f82e 	bl	8002ec0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005e64:	2014      	movs	r0, #20
 8005e66:	f7fb fe6f 	bl	8001b48 <HAL_Delay>
	spiTxBuf[0] = 0x22;
 8005e6a:	4b73      	ldr	r3, [pc, #460]	; (8006038 <L3GD20_Init+0x2c8>)
 8005e6c:	2222      	movs	r2, #34	; 0x22
 8005e6e:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x00;
 8005e70:	4b71      	ldr	r3, [pc, #452]	; (8006038 <L3GD20_Init+0x2c8>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8005e76:	2332      	movs	r3, #50	; 0x32
 8005e78:	2202      	movs	r2, #2
 8005e7a:	496f      	ldr	r1, [pc, #444]	; (8006038 <L3GD20_Init+0x2c8>)
 8005e7c:	486f      	ldr	r0, [pc, #444]	; (800603c <L3GD20_Init+0x2cc>)
 8005e7e:	f7fd fd99 	bl	80039b4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005e82:	2201      	movs	r2, #1
 8005e84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e88:	486a      	ldr	r0, [pc, #424]	; (8006034 <L3GD20_Init+0x2c4>)
 8005e8a:	f7fd f819 	bl	8002ec0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005e8e:	2014      	movs	r0, #20
 8005e90:	f7fb fe5a 	bl	8001b48 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005e94:	2200      	movs	r2, #0
 8005e96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e9a:	4866      	ldr	r0, [pc, #408]	; (8006034 <L3GD20_Init+0x2c4>)
 8005e9c:	f7fd f810 	bl	8002ec0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005ea0:	2014      	movs	r0, #20
 8005ea2:	f7fb fe51 	bl	8001b48 <HAL_Delay>
	spiTxBuf[0] = 0x23;
 8005ea6:	4b64      	ldr	r3, [pc, #400]	; (8006038 <L3GD20_Init+0x2c8>)
 8005ea8:	2223      	movs	r2, #35	; 0x23
 8005eaa:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x20;
 8005eac:	4b62      	ldr	r3, [pc, #392]	; (8006038 <L3GD20_Init+0x2c8>)
 8005eae:	2220      	movs	r2, #32
 8005eb0:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8005eb2:	2332      	movs	r3, #50	; 0x32
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	4960      	ldr	r1, [pc, #384]	; (8006038 <L3GD20_Init+0x2c8>)
 8005eb8:	4860      	ldr	r0, [pc, #384]	; (800603c <L3GD20_Init+0x2cc>)
 8005eba:	f7fd fd7b 	bl	80039b4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ec4:	485b      	ldr	r0, [pc, #364]	; (8006034 <L3GD20_Init+0x2c4>)
 8005ec6:	f7fc fffb 	bl	8002ec0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005eca:	2014      	movs	r0, #20
 8005ecc:	f7fb fe3c 	bl	8001b48 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ed6:	4857      	ldr	r0, [pc, #348]	; (8006034 <L3GD20_Init+0x2c4>)
 8005ed8:	f7fc fff2 	bl	8002ec0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005edc:	2014      	movs	r0, #20
 8005ede:	f7fb fe33 	bl	8001b48 <HAL_Delay>
	spiTxBuf[0] = 0x24;
 8005ee2:	4b55      	ldr	r3, [pc, #340]	; (8006038 <L3GD20_Init+0x2c8>)
 8005ee4:	2224      	movs	r2, #36	; 0x24
 8005ee6:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x10;
 8005ee8:	4b53      	ldr	r3, [pc, #332]	; (8006038 <L3GD20_Init+0x2c8>)
 8005eea:	2210      	movs	r2, #16
 8005eec:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8005eee:	2332      	movs	r3, #50	; 0x32
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	4951      	ldr	r1, [pc, #324]	; (8006038 <L3GD20_Init+0x2c8>)
 8005ef4:	4851      	ldr	r0, [pc, #324]	; (800603c <L3GD20_Init+0x2cc>)
 8005ef6:	f7fd fd5d 	bl	80039b4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005efa:	2201      	movs	r2, #1
 8005efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f00:	484c      	ldr	r0, [pc, #304]	; (8006034 <L3GD20_Init+0x2c4>)
 8005f02:	f7fc ffdd 	bl	8002ec0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005f06:	2014      	movs	r0, #20
 8005f08:	f7fb fe1e 	bl	8001b48 <HAL_Delay>

	Raw_z = 0;
 8005f0c:	4b4d      	ldr	r3, [pc, #308]	; (8006044 <L3GD20_Init+0x2d4>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	801a      	strh	r2, [r3, #0]


	int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 8005f12:	1d3b      	adds	r3, r7, #4
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	60da      	str	r2, [r3, #12]
 8005f1e:	611a      	str	r2, [r3, #16]

	uint32_t windowPosition = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t tempSum_Z = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	623b      	str	r3, [r7, #32]

	while (1)
	{
		switch (currentState)
 8005f28:	4b47      	ldr	r3, [pc, #284]	; (8006048 <L3GD20_Init+0x2d8>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <L3GD20_Init+0x1c6>
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d042      	beq.n	8005fba <L3GD20_Init+0x24a>
 8005f34:	e11e      	b.n	8006174 <L3GD20_Init+0x404>
		{
		case (L3GD20_fisrt):
			if (dataReadyFlag == L3GD20_DATA_READY)
 8005f36:	4b45      	ldr	r3, [pc, #276]	; (800604c <L3GD20_Init+0x2dc>)
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	f040 811e 	bne.w	800617c <L3GD20_Init+0x40c>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005f40:	2200      	movs	r2, #0
 8005f42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f46:	483b      	ldr	r0, [pc, #236]	; (8006034 <L3GD20_Init+0x2c4>)
 8005f48:	f7fc ffba 	bl	8002ec0 <HAL_GPIO_WritePin>
				spiTxBuf[0] = 0x2c | 0x80;
 8005f4c:	4b3a      	ldr	r3, [pc, #232]	; (8006038 <L3GD20_Init+0x2c8>)
 8005f4e:	22ac      	movs	r2, #172	; 0xac
 8005f50:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8005f52:	2332      	movs	r3, #50	; 0x32
 8005f54:	2201      	movs	r2, #1
 8005f56:	4938      	ldr	r1, [pc, #224]	; (8006038 <L3GD20_Init+0x2c8>)
 8005f58:	4838      	ldr	r0, [pc, #224]	; (800603c <L3GD20_Init+0x2cc>)
 8005f5a:	f7fd fd2b 	bl	80039b4 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi1, &spiRxBuf[5], 1, 50);
 8005f5e:	2332      	movs	r3, #50	; 0x32
 8005f60:	2201      	movs	r2, #1
 8005f62:	493b      	ldr	r1, [pc, #236]	; (8006050 <L3GD20_Init+0x2e0>)
 8005f64:	4835      	ldr	r0, [pc, #212]	; (800603c <L3GD20_Init+0x2cc>)
 8005f66:	f7fd fe61 	bl	8003c2c <HAL_SPI_Receive>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f70:	4830      	ldr	r0, [pc, #192]	; (8006034 <L3GD20_Init+0x2c4>)
 8005f72:	f7fc ffa5 	bl	8002ec0 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005f76:	2200      	movs	r2, #0
 8005f78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f7c:	482d      	ldr	r0, [pc, #180]	; (8006034 <L3GD20_Init+0x2c4>)
 8005f7e:	f7fc ff9f 	bl	8002ec0 <HAL_GPIO_WritePin>
				spiTxBuf[0] = 0x2d | 0x80;
 8005f82:	4b2d      	ldr	r3, [pc, #180]	; (8006038 <L3GD20_Init+0x2c8>)
 8005f84:	22ad      	movs	r2, #173	; 0xad
 8005f86:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8005f88:	2332      	movs	r3, #50	; 0x32
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	492a      	ldr	r1, [pc, #168]	; (8006038 <L3GD20_Init+0x2c8>)
 8005f8e:	482b      	ldr	r0, [pc, #172]	; (800603c <L3GD20_Init+0x2cc>)
 8005f90:	f7fd fd10 	bl	80039b4 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi1, &spiRxBuf[6], 1, 50);
 8005f94:	2332      	movs	r3, #50	; 0x32
 8005f96:	2201      	movs	r2, #1
 8005f98:	492e      	ldr	r1, [pc, #184]	; (8006054 <L3GD20_Init+0x2e4>)
 8005f9a:	4828      	ldr	r0, [pc, #160]	; (800603c <L3GD20_Init+0x2cc>)
 8005f9c:	f7fd fe46 	bl	8003c2c <HAL_SPI_Receive>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fa6:	4823      	ldr	r0, [pc, #140]	; (8006034 <L3GD20_Init+0x2c4>)
 8005fa8:	f7fc ff8a 	bl	8002ec0 <HAL_GPIO_WritePin>

				currentState = L3GD20_second;
 8005fac:	4b26      	ldr	r3, [pc, #152]	; (8006048 <L3GD20_Init+0x2d8>)
 8005fae:	2201      	movs	r2, #1
 8005fb0:	701a      	strb	r2, [r3, #0]
				dataReadyFlag = L3GD20_DATA_NOT_READY;
 8005fb2:	4b26      	ldr	r3, [pc, #152]	; (800604c <L3GD20_Init+0x2dc>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	701a      	strb	r2, [r3, #0]
			}
			else
			{
			}
			break;
 8005fb8:	e0e0      	b.n	800617c <L3GD20_Init+0x40c>

		case (L3GD20_second):
			Raw_z = (spiRxBuf[6] << 8) | spiRxBuf[5];
 8005fba:	4b27      	ldr	r3, [pc, #156]	; (8006058 <L3GD20_Init+0x2e8>)
 8005fbc:	799b      	ldrb	r3, [r3, #6]
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	b21a      	sxth	r2, r3
 8005fc2:	4b25      	ldr	r3, [pc, #148]	; (8006058 <L3GD20_Init+0x2e8>)
 8005fc4:	795b      	ldrb	r3, [r3, #5]
 8005fc6:	b21b      	sxth	r3, r3
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	b21a      	sxth	r2, r3
 8005fcc:	4b1d      	ldr	r3, [pc, #116]	; (8006044 <L3GD20_Init+0x2d4>)
 8005fce:	801a      	strh	r2, [r3, #0]

			if (currentcalistate == L3GD20_calibrated)
 8005fd0:	4b22      	ldr	r3, [pc, #136]	; (800605c <L3GD20_Init+0x2ec>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	f000 80d3 	beq.w	8006180 <L3GD20_Init+0x410>
			{
				break;
			}
			else
			{
				switch (currentcalistate)
 8005fda:	4b20      	ldr	r3, [pc, #128]	; (800605c <L3GD20_Init+0x2ec>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	f000 80bf 	beq.w	8006162 <L3GD20_Init+0x3f2>
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	f300 80b8 	bgt.w	800615a <L3GD20_Init+0x3ea>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <L3GD20_Init+0x284>
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d01a      	beq.n	8006028 <L3GD20_Init+0x2b8>
 8005ff2:	e0b2      	b.n	800615a <L3GD20_Init+0x3ea>
				{
				//---------------------------------------------------------------------------------------------------------
				case (L3GD20_collect_calibration_samples):
					calibrationBuffer_Z[caliCounter] = Raw_z;
 8005ff4:	4b1a      	ldr	r3, [pc, #104]	; (8006060 <L3GD20_Init+0x2f0>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a12      	ldr	r2, [pc, #72]	; (8006044 <L3GD20_Init+0x2d4>)
 8005ffa:	8812      	ldrh	r2, [r2, #0]
 8005ffc:	b211      	sxth	r1, r2
 8005ffe:	4a19      	ldr	r2, [pc, #100]	; (8006064 <L3GD20_Init+0x2f4>)
 8006000:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					caliCounter++;
 8006004:	4b16      	ldr	r3, [pc, #88]	; (8006060 <L3GD20_Init+0x2f0>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3301      	adds	r3, #1
 800600a:	4a15      	ldr	r2, [pc, #84]	; (8006060 <L3GD20_Init+0x2f0>)
 800600c:	6013      	str	r3, [r2, #0]

					if (caliCounter >= CALIBRATION_BUFFER_LENGTH)
 800600e:	4b14      	ldr	r3, [pc, #80]	; (8006060 <L3GD20_Init+0x2f0>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006016:	f0c0 80a6 	bcc.w	8006166 <L3GD20_Init+0x3f6>
					{
						caliCounter = 0;
 800601a:	4b11      	ldr	r3, [pc, #68]	; (8006060 <L3GD20_Init+0x2f0>)
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]

						currentcalistate = L3GD20_process_calibration_samples;
 8006020:	4b0e      	ldr	r3, [pc, #56]	; (800605c <L3GD20_Init+0x2ec>)
 8006022:	2201      	movs	r2, #1
 8006024:	701a      	strb	r2, [r3, #0]
					}
					else
					{
					}
					break;
 8006026:	e09e      	b.n	8006166 <L3GD20_Init+0x3f6>
					//----------------------------------------------------------------------------------------------------------
				case (L3GD20_process_calibration_samples):
					for (uint32_t idx = 0; idx < CALIBRATION_BUFFER_LENGTH;
 8006028:	2300      	movs	r3, #0
 800602a:	61fb      	str	r3, [r7, #28]
 800602c:	e049      	b.n	80060c2 <L3GD20_Init+0x352>
 800602e:	bf00      	nop
 8006030:	40020400 	.word	0x40020400
 8006034:	40020800 	.word	0x40020800
 8006038:	200015a0 	.word	0x200015a0
 800603c:	200000e8 	.word	0x200000e8
 8006040:	200015a5 	.word	0x200015a5
 8006044:	200015b0 	.word	0x200015b0
 8006048:	200005e1 	.word	0x200005e1
 800604c:	20000011 	.word	0x20000011
 8006050:	200015a9 	.word	0x200015a9
 8006054:	200015aa 	.word	0x200015aa
 8006058:	200015a4 	.word	0x200015a4
 800605c:	200005e0 	.word	0x200005e0
 8006060:	200005fc 	.word	0x200005fc
 8006064:	20000600 	.word	0x20000600
						 idx++)
					{
						tempSum_Z = tempSum_Z - averageWindow_Z[windowPosition] + calibrationBuffer_Z[idx];
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	3328      	adds	r3, #40	; 0x28
 800606e:	443b      	add	r3, r7
 8006070:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8006074:	461a      	mov	r2, r3
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	1a9b      	subs	r3, r3, r2
 800607a:	4951      	ldr	r1, [pc, #324]	; (80061c0 <L3GD20_Init+0x450>)
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8006082:	4413      	add	r3, r2
 8006084:	623b      	str	r3, [r7, #32]

						averageWindow_Z[windowPosition] = calibrationBuffer_Z[idx];
 8006086:	4a4e      	ldr	r2, [pc, #312]	; (80061c0 <L3GD20_Init+0x450>)
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	3328      	adds	r3, #40	; 0x28
 8006094:	443b      	add	r3, r7
 8006096:	f823 2c24 	strh.w	r2, [r3, #-36]

						offset_z = tempSum_Z / (int32_t)AVERAGE_WINDOW_SIZE;
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	4a49      	ldr	r2, [pc, #292]	; (80061c4 <L3GD20_Init+0x454>)
 800609e:	fb82 1203 	smull	r1, r2, r2, r3
 80060a2:	1092      	asrs	r2, r2, #2
 80060a4:	17db      	asrs	r3, r3, #31
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	4a47      	ldr	r2, [pc, #284]	; (80061c8 <L3GD20_Init+0x458>)
 80060aa:	6013      	str	r3, [r2, #0]

						windowPosition++;
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	3301      	adds	r3, #1
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24

						if (windowPosition >= AVERAGE_WINDOW_SIZE)
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	2b09      	cmp	r3, #9
 80060b6:	d901      	bls.n	80060bc <L3GD20_Init+0x34c>
						{
							windowPosition = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
						 idx++)
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	3301      	adds	r3, #1
 80060c0:	61fb      	str	r3, [r7, #28]
					for (uint32_t idx = 0; idx < CALIBRATION_BUFFER_LENGTH;
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80060c8:	d3ce      	bcc.n	8006068 <L3GD20_Init+0x2f8>
						}
						else
						{
						}
					}
					for (uint32_t idx = 0; idx < CALIBRATION_BUFFER_LENGTH; idx++)
 80060ca:	2300      	movs	r3, #0
 80060cc:	61bb      	str	r3, [r7, #24]
 80060ce:	e02f      	b.n	8006130 <L3GD20_Init+0x3c0>
						if (((int32_t)calibrationBuffer_Z[idx] - offset_z) > TempNoise_Z)
 80060d0:	4a3b      	ldr	r2, [pc, #236]	; (80061c0 <L3GD20_Init+0x450>)
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80060d8:	461a      	mov	r2, r3
 80060da:	4b3b      	ldr	r3, [pc, #236]	; (80061c8 <L3GD20_Init+0x458>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	1ad2      	subs	r2, r2, r3
 80060e0:	4b3a      	ldr	r3, [pc, #232]	; (80061cc <L3GD20_Init+0x45c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	dd0a      	ble.n	80060fe <L3GD20_Init+0x38e>
							TempNoise_Z = (int32_t)calibrationBuffer_Z[idx] - offset_z;
 80060e8:	4a35      	ldr	r2, [pc, #212]	; (80061c0 <L3GD20_Init+0x450>)
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80060f0:	461a      	mov	r2, r3
 80060f2:	4b35      	ldr	r3, [pc, #212]	; (80061c8 <L3GD20_Init+0x458>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	4a34      	ldr	r2, [pc, #208]	; (80061cc <L3GD20_Init+0x45c>)
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	e015      	b.n	800612a <L3GD20_Init+0x3ba>
						else if (((int32_t)calibrationBuffer_Z[idx] - offset_z) < -TempNoise_Z)
 80060fe:	4a30      	ldr	r2, [pc, #192]	; (80061c0 <L3GD20_Init+0x450>)
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8006106:	461a      	mov	r2, r3
 8006108:	4b2f      	ldr	r3, [pc, #188]	; (80061c8 <L3GD20_Init+0x458>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	1ad2      	subs	r2, r2, r3
 800610e:	4b2f      	ldr	r3, [pc, #188]	; (80061cc <L3GD20_Init+0x45c>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	425b      	negs	r3, r3
 8006114:	429a      	cmp	r2, r3
 8006116:	da08      	bge.n	800612a <L3GD20_Init+0x3ba>
							TempNoise_Z = -((int32_t)calibrationBuffer_Z[idx] - offset_z);
 8006118:	4b2b      	ldr	r3, [pc, #172]	; (80061c8 <L3GD20_Init+0x458>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4928      	ldr	r1, [pc, #160]	; (80061c0 <L3GD20_Init+0x450>)
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8006124:	1a9b      	subs	r3, r3, r2
 8006126:	4a29      	ldr	r2, [pc, #164]	; (80061cc <L3GD20_Init+0x45c>)
 8006128:	6013      	str	r3, [r2, #0]
					for (uint32_t idx = 0; idx < CALIBRATION_BUFFER_LENGTH; idx++)
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	3301      	adds	r3, #1
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006136:	d3cb      	bcc.n	80060d0 <L3GD20_Init+0x360>

					Noise_Z = (float)TempNoise_Z * GYRO_SENSITIVITY;
 8006138:	4b24      	ldr	r3, [pc, #144]	; (80061cc <L3GD20_Init+0x45c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	ee07 3a90 	vmov	s15, r3
 8006140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006144:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80061d0 <L3GD20_Init+0x460>
 8006148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800614c:	4b21      	ldr	r3, [pc, #132]	; (80061d4 <L3GD20_Init+0x464>)
 800614e:	edc3 7a00 	vstr	s15, [r3]

					currentcalistate = L3GD20_calibrated;
 8006152:	4b21      	ldr	r3, [pc, #132]	; (80061d8 <L3GD20_Init+0x468>)
 8006154:	2202      	movs	r2, #2
 8006156:	701a      	strb	r2, [r3, #0]
					break;
 8006158:	e006      	b.n	8006168 <L3GD20_Init+0x3f8>

				case (L3GD20_calibrated):
					break;

				default:
					currentcalistate = L3GD20_collect_calibration_samples;
 800615a:	4b1f      	ldr	r3, [pc, #124]	; (80061d8 <L3GD20_Init+0x468>)
 800615c:	2200      	movs	r2, #0
 800615e:	701a      	strb	r2, [r3, #0]
					break;
 8006160:	e002      	b.n	8006168 <L3GD20_Init+0x3f8>
					break;
 8006162:	bf00      	nop
 8006164:	e000      	b.n	8006168 <L3GD20_Init+0x3f8>
					break;
 8006166:	bf00      	nop
				}
			}
			currentState = L3GD20_fisrt;
 8006168:	4b1c      	ldr	r3, [pc, #112]	; (80061dc <L3GD20_Init+0x46c>)
 800616a:	2200      	movs	r2, #0
 800616c:	701a      	strb	r2, [r3, #0]
			dataReadyFlag = L3GD20_DATA_READY;
 800616e:	4b1c      	ldr	r3, [pc, #112]	; (80061e0 <L3GD20_Init+0x470>)
 8006170:	2201      	movs	r2, #1
 8006172:	701a      	strb	r2, [r3, #0]

		default:
			currentState = L3GD20_fisrt;
 8006174:	4b19      	ldr	r3, [pc, #100]	; (80061dc <L3GD20_Init+0x46c>)
 8006176:	2200      	movs	r2, #0
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	e002      	b.n	8006182 <L3GD20_Init+0x412>
			break;
 800617c:	bf00      	nop
 800617e:	e000      	b.n	8006182 <L3GD20_Init+0x412>
				break;
 8006180:	bf00      	nop
		}
		if (currentcalistate == L3GD20_calibrated)
 8006182:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <L3GD20_Init+0x468>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b02      	cmp	r3, #2
 8006188:	d003      	beq.n	8006192 <L3GD20_Init+0x422>
		{
			break;
		}

		HAL_Delay(1);
 800618a:	2001      	movs	r0, #1
 800618c:	f7fb fcdc 	bl	8001b48 <HAL_Delay>
		switch (currentState)
 8006190:	e6ca      	b.n	8005f28 <L3GD20_Init+0x1b8>
			break;
 8006192:	bf00      	nop
	}
	LED9_OFF;LED10_OFF;LED11_OFF;
 8006194:	2200      	movs	r2, #0
 8006196:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800619a:	4812      	ldr	r0, [pc, #72]	; (80061e4 <L3GD20_Init+0x474>)
 800619c:	f7fc fe90 	bl	8002ec0 <HAL_GPIO_WritePin>
 80061a0:	2200      	movs	r2, #0
 80061a2:	2101      	movs	r1, #1
 80061a4:	4810      	ldr	r0, [pc, #64]	; (80061e8 <L3GD20_Init+0x478>)
 80061a6:	f7fc fe8b 	bl	8002ec0 <HAL_GPIO_WritePin>
 80061aa:	2200      	movs	r2, #0
 80061ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80061b0:	480c      	ldr	r0, [pc, #48]	; (80061e4 <L3GD20_Init+0x474>)
 80061b2:	f7fc fe85 	bl	8002ec0 <HAL_GPIO_WritePin>
}
 80061b6:	bf00      	nop
 80061b8:	3728      	adds	r7, #40	; 0x28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000600 	.word	0x20000600
 80061c4:	66666667 	.word	0x66666667
 80061c8:	200005e8 	.word	0x200005e8
 80061cc:	200005f8 	.word	0x200005f8
 80061d0:	3e0b5dcc 	.word	0x3e0b5dcc
 80061d4:	200005ec 	.word	0x200005ec
 80061d8:	200005e0 	.word	0x200005e0
 80061dc:	200005e1 	.word	0x200005e1
 80061e0:	20000011 	.word	0x20000011
 80061e4:	40020400 	.word	0x40020400
 80061e8:	40020800 	.word	0x40020800

080061ec <L3GD20_loop>:

void L3GD20_loop(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
	Noise_Z = (Noise_Z>GYRO_NOISE_THRESHOLD)? GYRO_NOISE_THRESHOLD:Noise_Z;
 80061f0:	4b55      	ldr	r3, [pc, #340]	; (8006348 <L3GD20_loop+0x15c>)
 80061f2:	edd3 7a00 	vldr	s15, [r3]
 80061f6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800634c <L3GD20_loop+0x160>
 80061fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006202:	dd01      	ble.n	8006208 <L3GD20_loop+0x1c>
 8006204:	4b52      	ldr	r3, [pc, #328]	; (8006350 <L3GD20_loop+0x164>)
 8006206:	e001      	b.n	800620c <L3GD20_loop+0x20>
 8006208:	4b4f      	ldr	r3, [pc, #316]	; (8006348 <L3GD20_loop+0x15c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a4e      	ldr	r2, [pc, #312]	; (8006348 <L3GD20_loop+0x15c>)
 800620e:	6013      	str	r3, [r2, #0]
	Raw_z = 0;
 8006210:	4b50      	ldr	r3, [pc, #320]	; (8006354 <L3GD20_loop+0x168>)
 8006212:	2200      	movs	r2, #0
 8006214:	801a      	strh	r2, [r3, #0]

	if (dataReadyFlag == L3GD20_DATA_READY)
 8006216:	4b50      	ldr	r3, [pc, #320]	; (8006358 <L3GD20_loop+0x16c>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d139      	bne.n	8006292 <L3GD20_loop+0xa6>
	{

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800621e:	2200      	movs	r2, #0
 8006220:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006224:	484d      	ldr	r0, [pc, #308]	; (800635c <L3GD20_loop+0x170>)
 8006226:	f7fc fe4b 	bl	8002ec0 <HAL_GPIO_WritePin>
		spiTxBuf[0] = 0x2c | 0x80;
 800622a:	4b4d      	ldr	r3, [pc, #308]	; (8006360 <L3GD20_loop+0x174>)
 800622c:	22ac      	movs	r2, #172	; 0xac
 800622e:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8006230:	2332      	movs	r3, #50	; 0x32
 8006232:	2201      	movs	r2, #1
 8006234:	494a      	ldr	r1, [pc, #296]	; (8006360 <L3GD20_loop+0x174>)
 8006236:	484b      	ldr	r0, [pc, #300]	; (8006364 <L3GD20_loop+0x178>)
 8006238:	f7fd fbbc 	bl	80039b4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &spiRxBuf[5], 1, 50);
 800623c:	2332      	movs	r3, #50	; 0x32
 800623e:	2201      	movs	r2, #1
 8006240:	4949      	ldr	r1, [pc, #292]	; (8006368 <L3GD20_loop+0x17c>)
 8006242:	4848      	ldr	r0, [pc, #288]	; (8006364 <L3GD20_loop+0x178>)
 8006244:	f7fd fcf2 	bl	8003c2c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006248:	2201      	movs	r2, #1
 800624a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800624e:	4843      	ldr	r0, [pc, #268]	; (800635c <L3GD20_loop+0x170>)
 8006250:	f7fc fe36 	bl	8002ec0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006254:	2200      	movs	r2, #0
 8006256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800625a:	4840      	ldr	r0, [pc, #256]	; (800635c <L3GD20_loop+0x170>)
 800625c:	f7fc fe30 	bl	8002ec0 <HAL_GPIO_WritePin>
		spiTxBuf[0] = 0x2d | 0x80;
 8006260:	4b3f      	ldr	r3, [pc, #252]	; (8006360 <L3GD20_loop+0x174>)
 8006262:	22ad      	movs	r2, #173	; 0xad
 8006264:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8006266:	2332      	movs	r3, #50	; 0x32
 8006268:	2201      	movs	r2, #1
 800626a:	493d      	ldr	r1, [pc, #244]	; (8006360 <L3GD20_loop+0x174>)
 800626c:	483d      	ldr	r0, [pc, #244]	; (8006364 <L3GD20_loop+0x178>)
 800626e:	f7fd fba1 	bl	80039b4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &spiRxBuf[6], 1, 50);
 8006272:	2332      	movs	r3, #50	; 0x32
 8006274:	2201      	movs	r2, #1
 8006276:	493d      	ldr	r1, [pc, #244]	; (800636c <L3GD20_loop+0x180>)
 8006278:	483a      	ldr	r0, [pc, #232]	; (8006364 <L3GD20_loop+0x178>)
 800627a:	f7fd fcd7 	bl	8003c2c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800627e:	2201      	movs	r2, #1
 8006280:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006284:	4835      	ldr	r0, [pc, #212]	; (800635c <L3GD20_loop+0x170>)
 8006286:	f7fc fe1b 	bl	8002ec0 <HAL_GPIO_WritePin>

		dataReadyFlag = L3GD20_DATA_NOT_READY;
 800628a:	4b33      	ldr	r3, [pc, #204]	; (8006358 <L3GD20_loop+0x16c>)
 800628c:	2200      	movs	r2, #0
 800628e:	701a      	strb	r2, [r3, #0]
			LastAngleRate_Z = angleRate_z;
		}
		else;
		dataReadyFlag = L3GD20_DATA_READY;
	}
}
 8006290:	e057      	b.n	8006342 <L3GD20_loop+0x156>
		Raw_z = (spiRxBuf[6] << 8) | spiRxBuf[5];
 8006292:	4b37      	ldr	r3, [pc, #220]	; (8006370 <L3GD20_loop+0x184>)
 8006294:	799b      	ldrb	r3, [r3, #6]
 8006296:	021b      	lsls	r3, r3, #8
 8006298:	b21a      	sxth	r2, r3
 800629a:	4b35      	ldr	r3, [pc, #212]	; (8006370 <L3GD20_loop+0x184>)
 800629c:	795b      	ldrb	r3, [r3, #5]
 800629e:	b21b      	sxth	r3, r3
 80062a0:	4313      	orrs	r3, r2
 80062a2:	b21a      	sxth	r2, r3
 80062a4:	4b2b      	ldr	r3, [pc, #172]	; (8006354 <L3GD20_loop+0x168>)
 80062a6:	801a      	strh	r2, [r3, #0]
		angleRate_z = (float)(Raw_z - (offset_z)) * GYRO_SENSITIVITY;
 80062a8:	4b2a      	ldr	r3, [pc, #168]	; (8006354 <L3GD20_loop+0x168>)
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	b21b      	sxth	r3, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	4b30      	ldr	r3, [pc, #192]	; (8006374 <L3GD20_loop+0x188>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	ee07 3a90 	vmov	s15, r3
 80062ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062be:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8006378 <L3GD20_loop+0x18c>
 80062c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062c6:	4b2d      	ldr	r3, [pc, #180]	; (800637c <L3GD20_loop+0x190>)
 80062c8:	edc3 7a00 	vstr	s15, [r3]
		timeDifference = 0.001;
 80062cc:	4b2c      	ldr	r3, [pc, #176]	; (8006380 <L3GD20_loop+0x194>)
 80062ce:	4a2d      	ldr	r2, [pc, #180]	; (8006384 <L3GD20_loop+0x198>)
 80062d0:	601a      	str	r2, [r3, #0]
		if ((angleRate_z > Noise_Z) || (angleRate_z < -Noise_Z))
 80062d2:	4b2a      	ldr	r3, [pc, #168]	; (800637c <L3GD20_loop+0x190>)
 80062d4:	ed93 7a00 	vldr	s14, [r3]
 80062d8:	4b1b      	ldr	r3, [pc, #108]	; (8006348 <L3GD20_loop+0x15c>)
 80062da:	edd3 7a00 	vldr	s15, [r3]
 80062de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e6:	dc0c      	bgt.n	8006302 <L3GD20_loop+0x116>
 80062e8:	4b17      	ldr	r3, [pc, #92]	; (8006348 <L3GD20_loop+0x15c>)
 80062ea:	edd3 7a00 	vldr	s15, [r3]
 80062ee:	eeb1 7a67 	vneg.f32	s14, s15
 80062f2:	4b22      	ldr	r3, [pc, #136]	; (800637c <L3GD20_loop+0x190>)
 80062f4:	edd3 7a00 	vldr	s15, [r3]
 80062f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006300:	dd1c      	ble.n	800633c <L3GD20_loop+0x150>
			Angle_Z += ((angleRate_z + LastAngleRate_Z) * timeDifference) / (2.0f);
 8006302:	4b1e      	ldr	r3, [pc, #120]	; (800637c <L3GD20_loop+0x190>)
 8006304:	ed93 7a00 	vldr	s14, [r3]
 8006308:	4b1f      	ldr	r3, [pc, #124]	; (8006388 <L3GD20_loop+0x19c>)
 800630a:	edd3 7a00 	vldr	s15, [r3]
 800630e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006312:	4b1b      	ldr	r3, [pc, #108]	; (8006380 <L3GD20_loop+0x194>)
 8006314:	edd3 7a00 	vldr	s15, [r3]
 8006318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006320:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006324:	4b19      	ldr	r3, [pc, #100]	; (800638c <L3GD20_loop+0x1a0>)
 8006326:	edd3 7a00 	vldr	s15, [r3]
 800632a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800632e:	4b17      	ldr	r3, [pc, #92]	; (800638c <L3GD20_loop+0x1a0>)
 8006330:	edc3 7a00 	vstr	s15, [r3]
			LastAngleRate_Z = angleRate_z;
 8006334:	4b11      	ldr	r3, [pc, #68]	; (800637c <L3GD20_loop+0x190>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a13      	ldr	r2, [pc, #76]	; (8006388 <L3GD20_loop+0x19c>)
 800633a:	6013      	str	r3, [r2, #0]
		dataReadyFlag = L3GD20_DATA_READY;
 800633c:	4b06      	ldr	r3, [pc, #24]	; (8006358 <L3GD20_loop+0x16c>)
 800633e:	2201      	movs	r2, #1
 8006340:	701a      	strb	r2, [r3, #0]
}
 8006342:	bf00      	nop
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	200005ec 	.word	0x200005ec
 800634c:	3f733333 	.word	0x3f733333
 8006350:	3f733333 	.word	0x3f733333
 8006354:	200015b0 	.word	0x200015b0
 8006358:	20000011 	.word	0x20000011
 800635c:	40020800 	.word	0x40020800
 8006360:	200015a0 	.word	0x200015a0
 8006364:	200000e8 	.word	0x200000e8
 8006368:	200015a9 	.word	0x200015a9
 800636c:	200015aa 	.word	0x200015aa
 8006370:	200015a4 	.word	0x200015a4
 8006374:	200005e8 	.word	0x200005e8
 8006378:	3e0b5dcc 	.word	0x3e0b5dcc
 800637c:	200005e4 	.word	0x200005e4
 8006380:	200015ac 	.word	0x200015ac
 8006384:	3a83126f 	.word	0x3a83126f
 8006388:	200005f4 	.word	0x200005f4
 800638c:	200005f0 	.word	0x200005f0

08006390 <readADC>:
#include "adc.h"



uint16_t readADC(adc_channels channel, uint8_t timeout)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af00      	add	r7, sp, #0
 8006396:	4603      	mov	r3, r0
 8006398:	460a      	mov	r2, r1
 800639a:	71fb      	strb	r3, [r7, #7]
 800639c:	4613      	mov	r3, r2
 800639e:	71bb      	strb	r3, [r7, #6]
    ADC_ChannelConfTypeDef sConfig = {0};
 80063a0:	f107 030c 	add.w	r3, r7, #12
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	605a      	str	r2, [r3, #4]
 80063aa:	609a      	str	r2, [r3, #8]
 80063ac:	60da      	str	r2, [r3, #12]
    uint16_t adc_val = 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	83fb      	strh	r3, [r7, #30]
    switch (channel)
 80063b2:	79fb      	ldrb	r3, [r7, #7]
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d81c      	bhi.n	80063f2 <readADC+0x62>
 80063b8:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <readADC+0x30>)
 80063ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063be:	bf00      	nop
 80063c0:	080063e1 	.word	0x080063e1
 80063c4:	080063d5 	.word	0x080063d5
 80063c8:	080063ed 	.word	0x080063ed
 80063cc:	080063db 	.word	0x080063db
 80063d0:	080063e7 	.word	0x080063e7
    {
        case RF_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_4;
 80063d4:	2304      	movs	r3, #4
 80063d6:	60fb      	str	r3, [r7, #12]
            break;
 80063d8:	e00b      	b.n	80063f2 <readADC+0x62>

        case DL_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_8;
 80063da:	2308      	movs	r3, #8
 80063dc:	60fb      	str	r3, [r7, #12]
            break;
 80063de:	e008      	b.n	80063f2 <readADC+0x62>

        case LF_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_9;
 80063e0:	2309      	movs	r3, #9
 80063e2:	60fb      	str	r3, [r7, #12]
            break;
 80063e4:	e005      	b.n	80063f2 <readADC+0x62>

        case BAT_VOL:
        	sConfig.Channel = ADC_CHANNEL_13;
 80063e6:	230d      	movs	r3, #13
 80063e8:	60fb      	str	r3, [r7, #12]
            break;
 80063ea:	e002      	b.n	80063f2 <readADC+0x62>
        
        case DR_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_14;
 80063ec:	230e      	movs	r3, #14
 80063ee:	60fb      	str	r3, [r7, #12]
            break;
 80063f0:	bf00      	nop
    }


    sConfig.Rank = 1;
 80063f2:	2301      	movs	r3, #1
 80063f4:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80063f6:	2304      	movs	r3, #4
 80063f8:	617b      	str	r3, [r7, #20]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80063fa:	f107 030c 	add.w	r3, r7, #12
 80063fe:	4619      	mov	r1, r3
 8006400:	480e      	ldr	r0, [pc, #56]	; (800643c <readADC+0xac>)
 8006402:	f7fb fda7 	bl	8001f54 <HAL_ADC_ConfigChannel>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <readADC+0x80>
    {
      Error_Handler();
 800640c:	f7fa fd1a 	bl	8000e44 <Error_Handler>
    }

    HAL_ADC_Start(&hadc1);
 8006410:	480a      	ldr	r0, [pc, #40]	; (800643c <readADC+0xac>)
 8006412:	f7fb fc01 	bl	8001c18 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1,timeout);
 8006416:	79bb      	ldrb	r3, [r7, #6]
 8006418:	4619      	mov	r1, r3
 800641a:	4808      	ldr	r0, [pc, #32]	; (800643c <readADC+0xac>)
 800641c:	f7fb fd01 	bl	8001e22 <HAL_ADC_PollForConversion>
    adc_val = HAL_ADC_GetValue(&hadc1);
 8006420:	4806      	ldr	r0, [pc, #24]	; (800643c <readADC+0xac>)
 8006422:	f7fb fd89 	bl	8001f38 <HAL_ADC_GetValue>
 8006426:	4603      	mov	r3, r0
 8006428:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(&hadc1);
 800642a:	4804      	ldr	r0, [pc, #16]	; (800643c <readADC+0xac>)
 800642c:	f7fb fcc6 	bl	8001dbc <HAL_ADC_Stop>

    return adc_val;
 8006430:	8bfb      	ldrh	r3, [r7, #30]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3720      	adds	r7, #32
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	20000040 	.word	0x20000040

08006440 <encoderInit>:
#include "encoder.h"


// FUCTION: INTIALIZATION OF ENCODER RELATED HARDWARE
void encoderInit(void){
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
	// LEFT ENCODER
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8006444:	213c      	movs	r1, #60	; 0x3c
 8006446:	4804      	ldr	r0, [pc, #16]	; (8006458 <encoderInit+0x18>)
 8006448:	f7fe fae8 	bl	8004a1c <HAL_TIM_Encoder_Start>

	// RIGHT ENCODER
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800644c:	213c      	movs	r1, #60	; 0x3c
 800644e:	4803      	ldr	r0, [pc, #12]	; (800645c <encoderInit+0x1c>)
 8006450:	f7fe fae4 	bl	8004a1c <HAL_TIM_Encoder_Start>
}
 8006454:	bf00      	nop
 8006456:	bd80      	pop	{r7, pc}
 8006458:	200001e0 	.word	0x200001e0
 800645c:	20000270 	.word	0x20000270

08006460 <resetEncoder>:

void resetEncoder(void){
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
	TIM2->CNT = _ENCODER_START;
 8006464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006468:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800646c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM5->CNT = u32_max-_ENCODER_START;
 800646e:	4b04      	ldr	r3, [pc, #16]	; (8006480 <resetEncoder+0x20>)
 8006470:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006474:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006476:	bf00      	nop
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	40000c00 	.word	0x40000c00

08006484 <min>:
int cnt = 0;
float correction = 0;
float run_speed_l;
float run_speed_r;

float min(float a, float b){
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	ed87 0a01 	vstr	s0, [r7, #4]
 800648e:	edc7 0a00 	vstr	s1, [r7]
	return (a>b)? b:a;
 8006492:	ed97 7a01 	vldr	s14, [r7, #4]
 8006496:	edd7 7a00 	vldr	s15, [r7]
 800649a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800649e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a2:	dd01      	ble.n	80064a8 <min+0x24>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	e000      	b.n	80064aa <min+0x26>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	ee07 3a90 	vmov	s15, r3
}
 80064ae:	eeb0 0a67 	vmov.f32	s0, s15
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <max>:
float max(float a, float b){
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80064c6:	edc7 0a00 	vstr	s1, [r7]
	return (a>b)? a:b;
 80064ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80064ce:	edd7 7a00 	vldr	s15, [r7]
 80064d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064da:	dd01      	ble.n	80064e0 <max+0x24>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	e000      	b.n	80064e2 <max+0x26>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	ee07 3a90 	vmov	s15, r3
}
 80064e6:	eeb0 0a67 	vmov.f32	s0, s15
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <motorInit>:


// INITIALIZATIONS
void motorInit(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
	// Start PWM for TIM4 channels (you may need to adjust this based on your application)
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // LPWMA
 80064f8:	2100      	movs	r1, #0
 80064fa:	480b      	ldr	r0, [pc, #44]	; (8006528 <motorInit+0x34>)
 80064fc:	f7fe f920 	bl	8004740 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // LPWMB
 8006500:	2104      	movs	r1, #4
 8006502:	4809      	ldr	r0, [pc, #36]	; (8006528 <motorInit+0x34>)
 8006504:	f7fe f91c 	bl	8004740 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // RPWMA
 8006508:	2108      	movs	r1, #8
 800650a:	4807      	ldr	r0, [pc, #28]	; (8006528 <motorInit+0x34>)
 800650c:	f7fe f918 	bl	8004740 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // RPWMB
 8006510:	210c      	movs	r1, #12
 8006512:	4805      	ldr	r0, [pc, #20]	; (8006528 <motorInit+0x34>)
 8006514:	f7fe f914 	bl	8004740 <HAL_TIM_PWM_Start>
	setWheels(0, 0);
 8006518:	eddf 0a04 	vldr	s1, [pc, #16]	; 800652c <motorInit+0x38>
 800651c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800652c <motorInit+0x38>
 8006520:	f000 f8fa 	bl	8006718 <setWheels>
}
 8006524:	bf00      	nop
 8006526:	bd80      	pop	{r7, pc}
 8006528:	20000228 	.word	0x20000228
 800652c:	00000000 	.word	0x00000000

08006530 <setLeftWheel>:

// LEFT WHEEL PLANNER
void setLeftWheel(float l_speed)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t l_pwma, l_pwmb;

	l_speed = (l_speed == 0)? 0:((l_speed>0) ? min(l_speed,base_speed_l):max(l_speed,-base_speed_l));
 800653a:	edd7 7a01 	vldr	s15, [r7, #4]
 800653e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006546:	d020      	beq.n	800658a <setLeftWheel+0x5a>
 8006548:	edd7 7a01 	vldr	s15, [r7, #4]
 800654c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006554:	dd0b      	ble.n	800656e <setLeftWheel+0x3e>
 8006556:	4b2f      	ldr	r3, [pc, #188]	; (8006614 <setLeftWheel+0xe4>)
 8006558:	edd3 7a00 	vldr	s15, [r3]
 800655c:	eef0 0a67 	vmov.f32	s1, s15
 8006560:	ed97 0a01 	vldr	s0, [r7, #4]
 8006564:	f7ff ff8e 	bl	8006484 <min>
 8006568:	eef0 7a40 	vmov.f32	s15, s0
 800656c:	e00f      	b.n	800658e <setLeftWheel+0x5e>
 800656e:	4b29      	ldr	r3, [pc, #164]	; (8006614 <setLeftWheel+0xe4>)
 8006570:	edd3 7a00 	vldr	s15, [r3]
 8006574:	eef1 7a67 	vneg.f32	s15, s15
 8006578:	eef0 0a67 	vmov.f32	s1, s15
 800657c:	ed97 0a01 	vldr	s0, [r7, #4]
 8006580:	f7ff ff9c 	bl	80064bc <max>
 8006584:	eef0 7a40 	vmov.f32	s15, s0
 8006588:	e001      	b.n	800658e <setLeftWheel+0x5e>
 800658a:	eddf 7a23 	vldr	s15, [pc, #140]	; 8006618 <setLeftWheel+0xe8>
 800658e:	edc7 7a01 	vstr	s15, [r7, #4]
	l_pwma = (l_speed >= 0) ? l_speed * max_limit : 0;
 8006592:	edd7 7a01 	vldr	s15, [r7, #4]
 8006596:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800659a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800659e:	db0f      	blt.n	80065c0 <setLeftWheel+0x90>
 80065a0:	4b1e      	ldr	r3, [pc, #120]	; (800661c <setLeftWheel+0xec>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	ee07 3a90 	vmov	s15, r3
 80065a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80065b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065b8:	ee17 3a90 	vmov	r3, s15
 80065bc:	b29b      	uxth	r3, r3
 80065be:	e000      	b.n	80065c2 <setLeftWheel+0x92>
 80065c0:	2300      	movs	r3, #0
 80065c2:	81fb      	strh	r3, [r7, #14]
	l_pwmb = (l_speed < 0) ? (-l_speed) * max_limit : 0;
 80065c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80065c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d0:	d511      	bpl.n	80065f6 <setLeftWheel+0xc6>
 80065d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80065d6:	eeb1 7a67 	vneg.f32	s14, s15
 80065da:	4b10      	ldr	r3, [pc, #64]	; (800661c <setLeftWheel+0xec>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	ee07 3a90 	vmov	s15, r3
 80065e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ee:	ee17 3a90 	vmov	r3, s15
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	e000      	b.n	80065f8 <setLeftWheel+0xc8>
 80065f6:	2300      	movs	r3, #0
 80065f8:	81bb      	strh	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, l_pwma); // LPWMA
 80065fa:	4b09      	ldr	r3, [pc, #36]	; (8006620 <setLeftWheel+0xf0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	89fa      	ldrh	r2, [r7, #14]
 8006600:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, l_pwmb); // LPWMB
 8006602:	4b07      	ldr	r3, [pc, #28]	; (8006620 <setLeftWheel+0xf0>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	89ba      	ldrh	r2, [r7, #12]
 8006608:	635a      	str	r2, [r3, #52]	; 0x34
}
 800660a:	bf00      	nop
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	20000018 	.word	0x20000018
 8006618:	00000000 	.word	0x00000000
 800661c:	20000014 	.word	0x20000014
 8006620:	20000228 	.word	0x20000228

08006624 <setRightWheel>:

void setRightWheel(float r_speed)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t r_pwma, r_pwmb;

	r_speed = (r_speed==0)? 0: ((r_speed>0) ? min(r_speed,base_speed_r):max(r_speed,-base_speed_r));
 800662e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006632:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800663a:	d020      	beq.n	800667e <setRightWheel+0x5a>
 800663c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006640:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006648:	dd0b      	ble.n	8006662 <setRightWheel+0x3e>
 800664a:	4b2f      	ldr	r3, [pc, #188]	; (8006708 <setRightWheel+0xe4>)
 800664c:	edd3 7a00 	vldr	s15, [r3]
 8006650:	eef0 0a67 	vmov.f32	s1, s15
 8006654:	ed97 0a01 	vldr	s0, [r7, #4]
 8006658:	f7ff ff14 	bl	8006484 <min>
 800665c:	eef0 7a40 	vmov.f32	s15, s0
 8006660:	e00f      	b.n	8006682 <setRightWheel+0x5e>
 8006662:	4b29      	ldr	r3, [pc, #164]	; (8006708 <setRightWheel+0xe4>)
 8006664:	edd3 7a00 	vldr	s15, [r3]
 8006668:	eef1 7a67 	vneg.f32	s15, s15
 800666c:	eef0 0a67 	vmov.f32	s1, s15
 8006670:	ed97 0a01 	vldr	s0, [r7, #4]
 8006674:	f7ff ff22 	bl	80064bc <max>
 8006678:	eef0 7a40 	vmov.f32	s15, s0
 800667c:	e001      	b.n	8006682 <setRightWheel+0x5e>
 800667e:	eddf 7a23 	vldr	s15, [pc, #140]	; 800670c <setRightWheel+0xe8>
 8006682:	edc7 7a01 	vstr	s15, [r7, #4]
	r_pwma = (r_speed >= 0) ? r_speed * max_limit : 0;
 8006686:	edd7 7a01 	vldr	s15, [r7, #4]
 800668a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800668e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006692:	db0f      	blt.n	80066b4 <setRightWheel+0x90>
 8006694:	4b1e      	ldr	r3, [pc, #120]	; (8006710 <setRightWheel+0xec>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	ee07 3a90 	vmov	s15, r3
 800669c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80066a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ac:	ee17 3a90 	vmov	r3, s15
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	e000      	b.n	80066b6 <setRightWheel+0x92>
 80066b4:	2300      	movs	r3, #0
 80066b6:	81fb      	strh	r3, [r7, #14]
	r_pwmb = (r_speed < 0) ? (-r_speed) * max_limit : 0;
 80066b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80066bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80066c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c4:	d511      	bpl.n	80066ea <setRightWheel+0xc6>
 80066c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80066ca:	eeb1 7a67 	vneg.f32	s14, s15
 80066ce:	4b10      	ldr	r3, [pc, #64]	; (8006710 <setRightWheel+0xec>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	ee07 3a90 	vmov	s15, r3
 80066d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066e2:	ee17 3a90 	vmov	r3, s15
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	e000      	b.n	80066ec <setRightWheel+0xc8>
 80066ea:	2300      	movs	r3, #0
 80066ec:	81bb      	strh	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, r_pwma); // RPWMA
 80066ee:	4b09      	ldr	r3, [pc, #36]	; (8006714 <setRightWheel+0xf0>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	89fa      	ldrh	r2, [r7, #14]
 80066f4:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, r_pwmb); // RPWMB
 80066f6:	4b07      	ldr	r3, [pc, #28]	; (8006714 <setRightWheel+0xf0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	89ba      	ldrh	r2, [r7, #12]
 80066fc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80066fe:	bf00      	nop
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	2000001c 	.word	0x2000001c
 800670c:	00000000 	.word	0x00000000
 8006710:	20000014 	.word	0x20000014
 8006714:	20000228 	.word	0x20000228

08006718 <setWheels>:

void setWheels(float l_speed, float r_speed)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	ed87 0a01 	vstr	s0, [r7, #4]
 8006722:	edc7 0a00 	vstr	s1, [r7]
	setLeftWheel(l_speed);
 8006726:	ed97 0a01 	vldr	s0, [r7, #4]
 800672a:	f7ff ff01 	bl	8006530 <setLeftWheel>
	setRightWheel(r_speed);
 800672e:	ed97 0a00 	vldr	s0, [r7]
 8006732:	f7ff ff77 	bl	8006624 <setRightWheel>
}
 8006736:	bf00      	nop
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
	...

08006740 <straightCountsPID>:



void straightCountsPID(int count)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]

	l_start = l_position;
 8006748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674e:	461a      	mov	r2, r3
 8006750:	4b42      	ldr	r3, [pc, #264]	; (800685c <straightCountsPID+0x11c>)
 8006752:	601a      	str	r2, [r3, #0]
	r_start = r_position;
 8006754:	4b42      	ldr	r3, [pc, #264]	; (8006860 <straightCountsPID+0x120>)
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	43db      	mvns	r3, r3
 800675a:	4a42      	ldr	r2, [pc, #264]	; (8006864 <straightCountsPID+0x124>)
 800675c:	6013      	str	r3, [r2, #0]

	while (1)
	{
		l_dist =  l_position - l_start;
 800675e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	4a3d      	ldr	r2, [pc, #244]	; (800685c <straightCountsPID+0x11c>)
 8006766:	6812      	ldr	r2, [r2, #0]
 8006768:	1a9b      	subs	r3, r3, r2
 800676a:	461a      	mov	r2, r3
 800676c:	4b3e      	ldr	r3, [pc, #248]	; (8006868 <straightCountsPID+0x128>)
 800676e:	601a      	str	r2, [r3, #0]
		r_dist =  r_position - r_start ;
 8006770:	4b3b      	ldr	r3, [pc, #236]	; (8006860 <straightCountsPID+0x120>)
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	43db      	mvns	r3, r3
 8006776:	4a3b      	ldr	r2, [pc, #236]	; (8006864 <straightCountsPID+0x124>)
 8006778:	6812      	ldr	r2, [r2, #0]
 800677a:	1a9b      	subs	r3, r3, r2
 800677c:	461a      	mov	r2, r3
 800677e:	4b3b      	ldr	r3, [pc, #236]	; (800686c <straightCountsPID+0x12c>)
 8006780:	601a      	str	r2, [r3, #0]

		error = l_dist - r_dist;
 8006782:	4b39      	ldr	r3, [pc, #228]	; (8006868 <straightCountsPID+0x128>)
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	4b39      	ldr	r3, [pc, #228]	; (800686c <straightCountsPID+0x12c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	4a38      	ldr	r2, [pc, #224]	; (8006870 <straightCountsPID+0x130>)
 800678e:	6013      	str	r3, [r2, #0]
		I = I + error;
 8006790:	4b38      	ldr	r3, [pc, #224]	; (8006874 <straightCountsPID+0x134>)
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	4b36      	ldr	r3, [pc, #216]	; (8006870 <straightCountsPID+0x130>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4413      	add	r3, r2
 800679a:	4a36      	ldr	r2, [pc, #216]	; (8006874 <straightCountsPID+0x134>)
 800679c:	6013      	str	r3, [r2, #0]

		correction = (float)(error * StKp + I * StKi + (error - lastErr) * StKd) / 50.0;
 800679e:	4b34      	ldr	r3, [pc, #208]	; (8006870 <straightCountsPID+0x130>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80067b2:	4b30      	ldr	r3, [pc, #192]	; (8006874 <straightCountsPID+0x134>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067be:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8006878 <straightCountsPID+0x138>
 80067c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80067c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80067ca:	4b29      	ldr	r3, [pc, #164]	; (8006870 <straightCountsPID+0x130>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	4b2b      	ldr	r3, [pc, #172]	; (800687c <straightCountsPID+0x13c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	ee07 3a90 	vmov	s15, r3
 80067d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067dc:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006878 <straightCountsPID+0x138>
 80067e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80067e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80067e8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006880 <straightCountsPID+0x140>
 80067ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067f0:	4b24      	ldr	r3, [pc, #144]	; (8006884 <straightCountsPID+0x144>)
 80067f2:	edc3 7a00 	vstr	s15, [r3]
		lastErr = error;
 80067f6:	4b1e      	ldr	r3, [pc, #120]	; (8006870 <straightCountsPID+0x130>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a20      	ldr	r2, [pc, #128]	; (800687c <straightCountsPID+0x13c>)
 80067fc:	6013      	str	r3, [r2, #0]

		if (l_dist < count && r_dist < count)
 80067fe:	4b1a      	ldr	r3, [pc, #104]	; (8006868 <straightCountsPID+0x128>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	429a      	cmp	r2, r3
 8006806:	dd1d      	ble.n	8006844 <straightCountsPID+0x104>
 8006808:	4b18      	ldr	r3, [pc, #96]	; (800686c <straightCountsPID+0x12c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	429a      	cmp	r2, r3
 8006810:	dd18      	ble.n	8006844 <straightCountsPID+0x104>
		{
			setLeftWheel(base_speed_l - correction);
 8006812:	4b1d      	ldr	r3, [pc, #116]	; (8006888 <straightCountsPID+0x148>)
 8006814:	ed93 7a00 	vldr	s14, [r3]
 8006818:	4b1a      	ldr	r3, [pc, #104]	; (8006884 <straightCountsPID+0x144>)
 800681a:	edd3 7a00 	vldr	s15, [r3]
 800681e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006822:	eeb0 0a67 	vmov.f32	s0, s15
 8006826:	f7ff fe83 	bl	8006530 <setLeftWheel>
			setRightWheel(base_speed_r + correction);
 800682a:	4b18      	ldr	r3, [pc, #96]	; (800688c <straightCountsPID+0x14c>)
 800682c:	ed93 7a00 	vldr	s14, [r3]
 8006830:	4b14      	ldr	r3, [pc, #80]	; (8006884 <straightCountsPID+0x144>)
 8006832:	edd3 7a00 	vldr	s15, [r3]
 8006836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800683a:	eeb0 0a67 	vmov.f32	s0, s15
 800683e:	f7ff fef1 	bl	8006624 <setRightWheel>
		l_dist =  l_position - l_start;
 8006842:	e78c      	b.n	800675e <straightCountsPID+0x1e>

		}
		else
		{
			STOP_ROBOT;
 8006844:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8006878 <straightCountsPID+0x138>
 8006848:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8006878 <straightCountsPID+0x138>
 800684c:	f7ff ff64 	bl	8006718 <setWheels>
			break;
 8006850:	bf00      	nop
		}
	}
	//	return true;
}
 8006852:	bf00      	nop
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	200015b4 	.word	0x200015b4
 8006860:	40000c00 	.word	0x40000c00
 8006864:	200015b8 	.word	0x200015b8
 8006868:	200015bc 	.word	0x200015bc
 800686c:	200015c0 	.word	0x200015c0
 8006870:	200015c4 	.word	0x200015c4
 8006874:	200015cc 	.word	0x200015cc
 8006878:	00000000 	.word	0x00000000
 800687c:	200015c8 	.word	0x200015c8
 8006880:	42480000 	.word	0x42480000
 8006884:	200015d0 	.word	0x200015d0
 8006888:	20000018 	.word	0x20000018
 800688c:	2000001c 	.word	0x2000001c

08006890 <turnGyroLR>:
	}
}

// TURN USING GYRO
void turnGyroLR(float angle)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	ed87 0a01 	vstr	s0, [r7, #4]
	bool thres = true;
 800689a:	2301      	movs	r3, #1
 800689c:	73fb      	strb	r3, [r7, #15]
	TIM13_IT_START;
 800689e:	488e      	ldr	r0, [pc, #568]	; (8006ad8 <turnGyroLR+0x248>)
 80068a0:	f7fd fe60 	bl	8004564 <HAL_TIM_Base_Start_IT>
	LED6_ON;
 80068a4:	2201      	movs	r2, #1
 80068a6:	2104      	movs	r1, #4
 80068a8:	488c      	ldr	r0, [pc, #560]	; (8006adc <turnGyroLR+0x24c>)
 80068aa:	f7fc fb09 	bl	8002ec0 <HAL_GPIO_WritePin>

	Angle_Z = 0;
 80068ae:	4b8c      	ldr	r3, [pc, #560]	; (8006ae0 <turnGyroLR+0x250>)
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
	l_start = l_position;
 80068b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	461a      	mov	r2, r3
 80068be:	4b89      	ldr	r3, [pc, #548]	; (8006ae4 <turnGyroLR+0x254>)
 80068c0:	601a      	str	r2, [r3, #0]
	r_start = r_position;
 80068c2:	4b89      	ldr	r3, [pc, #548]	; (8006ae8 <turnGyroLR+0x258>)
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	43db      	mvns	r3, r3
 80068c8:	4a88      	ldr	r2, [pc, #544]	; (8006aec <turnGyroLR+0x25c>)
 80068ca:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if (thres && (abs(Angle_Z-angle) >  10.0))
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d079      	beq.n	80069c6 <turnGyroLR+0x136>
 80068d2:	4b83      	ldr	r3, [pc, #524]	; (8006ae0 <turnGyroLR+0x250>)
 80068d4:	ed93 7a00 	vldr	s14, [r3]
 80068d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80068dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068e4:	ee17 3a90 	vmov	r3, s15
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	bfb8      	it	lt
 80068ec:	425b      	neglt	r3, r3
 80068ee:	2b0a      	cmp	r3, #10
 80068f0:	dd69      	ble.n	80069c6 <turnGyroLR+0x136>
		{
			l_dist = l_start - l_position;
 80068f2:	4b7c      	ldr	r3, [pc, #496]	; (8006ae4 <turnGyroLR+0x254>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	461a      	mov	r2, r3
 8006902:	4b7b      	ldr	r3, [pc, #492]	; (8006af0 <turnGyroLR+0x260>)
 8006904:	601a      	str	r2, [r3, #0]
			r_dist = -r_start + r_position;
 8006906:	4b79      	ldr	r3, [pc, #484]	; (8006aec <turnGyroLR+0x25c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	43da      	mvns	r2, r3
 800690c:	4b76      	ldr	r3, [pc, #472]	; (8006ae8 <turnGyroLR+0x258>)
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	461a      	mov	r2, r3
 8006914:	4b77      	ldr	r3, [pc, #476]	; (8006af4 <turnGyroLR+0x264>)
 8006916:	601a      	str	r2, [r3, #0]

			error = l_dist - r_dist;
 8006918:	4b75      	ldr	r3, [pc, #468]	; (8006af0 <turnGyroLR+0x260>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	4b75      	ldr	r3, [pc, #468]	; (8006af4 <turnGyroLR+0x264>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	4a75      	ldr	r2, [pc, #468]	; (8006af8 <turnGyroLR+0x268>)
 8006924:	6013      	str	r3, [r2, #0]
			I = I + error;
 8006926:	4b75      	ldr	r3, [pc, #468]	; (8006afc <turnGyroLR+0x26c>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	4b73      	ldr	r3, [pc, #460]	; (8006af8 <turnGyroLR+0x268>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4413      	add	r3, r2
 8006930:	4a72      	ldr	r2, [pc, #456]	; (8006afc <turnGyroLR+0x26c>)
 8006932:	6013      	str	r3, [r2, #0]

			correction = (float)(error * StKp + I * StKi + (error - lastErr) * StKd) / 50.0;
 8006934:	4b70      	ldr	r3, [pc, #448]	; (8006af8 <turnGyroLR+0x268>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	ee07 3a90 	vmov	s15, r3
 800693c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006944:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006948:	4b6c      	ldr	r3, [pc, #432]	; (8006afc <turnGyroLR+0x26c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	ee07 3a90 	vmov	s15, r3
 8006950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006954:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8006b00 <turnGyroLR+0x270>
 8006958:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800695c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006960:	4b65      	ldr	r3, [pc, #404]	; (8006af8 <turnGyroLR+0x268>)
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	4b67      	ldr	r3, [pc, #412]	; (8006b04 <turnGyroLR+0x274>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006972:	eddf 6a63 	vldr	s13, [pc, #396]	; 8006b00 <turnGyroLR+0x270>
 8006976:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800697a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800697e:	eddf 6a62 	vldr	s13, [pc, #392]	; 8006b08 <turnGyroLR+0x278>
 8006982:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006986:	4b61      	ldr	r3, [pc, #388]	; (8006b0c <turnGyroLR+0x27c>)
 8006988:	edc3 7a00 	vstr	s15, [r3]
			lastErr = error;
 800698c:	4b5a      	ldr	r3, [pc, #360]	; (8006af8 <turnGyroLR+0x268>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a5c      	ldr	r2, [pc, #368]	; (8006b04 <turnGyroLR+0x274>)
 8006992:	6013      	str	r3, [r2, #0]

			setWheels(-(base_speed_l - correction), base_speed_r + correction );
 8006994:	4b5e      	ldr	r3, [pc, #376]	; (8006b10 <turnGyroLR+0x280>)
 8006996:	ed93 7a00 	vldr	s14, [r3]
 800699a:	4b5c      	ldr	r3, [pc, #368]	; (8006b0c <turnGyroLR+0x27c>)
 800699c:	edd3 7a00 	vldr	s15, [r3]
 80069a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069a4:	eef1 6a67 	vneg.f32	s13, s15
 80069a8:	4b5a      	ldr	r3, [pc, #360]	; (8006b14 <turnGyroLR+0x284>)
 80069aa:	ed93 7a00 	vldr	s14, [r3]
 80069ae:	4b57      	ldr	r3, [pc, #348]	; (8006b0c <turnGyroLR+0x27c>)
 80069b0:	edd3 7a00 	vldr	s15, [r3]
 80069b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069b8:	eef0 0a67 	vmov.f32	s1, s15
 80069bc:	eeb0 0a66 	vmov.f32	s0, s13
 80069c0:	f7ff feaa 	bl	8006718 <setWheels>
 80069c4:	e07b      	b.n	8006abe <turnGyroLR+0x22e>
		}
		else
		{
			thres = false;
 80069c6:	2300      	movs	r3, #0
 80069c8:	73fb      	strb	r3, [r7, #15]
			correction = .002;
 80069ca:	4b50      	ldr	r3, [pc, #320]	; (8006b0c <turnGyroLR+0x27c>)
 80069cc:	4a52      	ldr	r2, [pc, #328]	; (8006b18 <turnGyroLR+0x288>)
 80069ce:	601a      	str	r2, [r3, #0]
			if (abs(correction)>.001 )
 80069d0:	4b4e      	ldr	r3, [pc, #312]	; (8006b0c <turnGyroLR+0x27c>)
 80069d2:	edd3 7a00 	vldr	s15, [r3]
 80069d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069da:	ee17 3a90 	vmov	r3, s15
 80069de:	2b00      	cmp	r3, #0
 80069e0:	bfb8      	it	lt
 80069e2:	425b      	neglt	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	dd63      	ble.n	8006ab0 <turnGyroLR+0x220>
			{
				error = Angle_Z - angle;
 80069e8:	4b3d      	ldr	r3, [pc, #244]	; (8006ae0 <turnGyroLR+0x250>)
 80069ea:	ed93 7a00 	vldr	s14, [r3]
 80069ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80069f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069fa:	ee17 2a90 	vmov	r2, s15
 80069fe:	4b3e      	ldr	r3, [pc, #248]	; (8006af8 <turnGyroLR+0x268>)
 8006a00:	601a      	str	r2, [r3, #0]
				I = I + error;
 8006a02:	4b3e      	ldr	r3, [pc, #248]	; (8006afc <turnGyroLR+0x26c>)
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	4b3c      	ldr	r3, [pc, #240]	; (8006af8 <turnGyroLR+0x268>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	4a3b      	ldr	r2, [pc, #236]	; (8006afc <turnGyroLR+0x26c>)
 8006a0e:	6013      	str	r3, [r2, #0]

				correction = (float)(error * RTKp + I * RTKi + (error - lastErr) * RTKd) / 10;
 8006a10:	4b39      	ldr	r3, [pc, #228]	; (8006af8 <turnGyroLR+0x268>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	ee07 3a90 	vmov	s15, r3
 8006a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006a24:	4b35      	ldr	r3, [pc, #212]	; (8006afc <turnGyroLR+0x26c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	ee07 3a90 	vmov	s15, r3
 8006a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a30:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8006b1c <turnGyroLR+0x28c>
 8006a34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006a38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a3c:	4b2e      	ldr	r3, [pc, #184]	; (8006af8 <turnGyroLR+0x268>)
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	4b30      	ldr	r3, [pc, #192]	; (8006b04 <turnGyroLR+0x274>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a4e:	eddf 6a34 	vldr	s13, [pc, #208]	; 8006b20 <turnGyroLR+0x290>
 8006a52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006a56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a5a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006a5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a62:	4b2a      	ldr	r3, [pc, #168]	; (8006b0c <turnGyroLR+0x27c>)
 8006a64:	edc3 7a00 	vstr	s15, [r3]
				correction = (correction > base_speed_l) ? .2 : base_speed_l;
 8006a68:	4b28      	ldr	r3, [pc, #160]	; (8006b0c <turnGyroLR+0x27c>)
 8006a6a:	ed93 7a00 	vldr	s14, [r3]
 8006a6e:	4b28      	ldr	r3, [pc, #160]	; (8006b10 <turnGyroLR+0x280>)
 8006a70:	edd3 7a00 	vldr	s15, [r3]
 8006a74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a7c:	dd01      	ble.n	8006a82 <turnGyroLR+0x1f2>
 8006a7e:	4b29      	ldr	r3, [pc, #164]	; (8006b24 <turnGyroLR+0x294>)
 8006a80:	e001      	b.n	8006a86 <turnGyroLR+0x1f6>
 8006a82:	4b23      	ldr	r3, [pc, #140]	; (8006b10 <turnGyroLR+0x280>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a21      	ldr	r2, [pc, #132]	; (8006b0c <turnGyroLR+0x27c>)
 8006a88:	6013      	str	r3, [r2, #0]
				lastErr = error;
 8006a8a:	4b1b      	ldr	r3, [pc, #108]	; (8006af8 <turnGyroLR+0x268>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a1d      	ldr	r2, [pc, #116]	; (8006b04 <turnGyroLR+0x274>)
 8006a90:	6013      	str	r3, [r2, #0]

				setWheels(-correction, correction);
 8006a92:	4b1e      	ldr	r3, [pc, #120]	; (8006b0c <turnGyroLR+0x27c>)
 8006a94:	edd3 7a00 	vldr	s15, [r3]
 8006a98:	eef1 7a67 	vneg.f32	s15, s15
 8006a9c:	4b1b      	ldr	r3, [pc, #108]	; (8006b0c <turnGyroLR+0x27c>)
 8006a9e:	ed93 7a00 	vldr	s14, [r3]
 8006aa2:	eef0 0a47 	vmov.f32	s1, s14
 8006aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8006aaa:	f7ff fe35 	bl	8006718 <setWheels>
 8006aae:	e70d      	b.n	80068cc <turnGyroLR+0x3c>
			}
			else
			{
				STOP_ROBOT;
 8006ab0:	eddf 0a13 	vldr	s1, [pc, #76]	; 8006b00 <turnGyroLR+0x270>
 8006ab4:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8006b00 <turnGyroLR+0x270>
 8006ab8:	f7ff fe2e 	bl	8006718 <setWheels>
				break;
 8006abc:	e000      	b.n	8006ac0 <turnGyroLR+0x230>
		if (thres && (abs(Angle_Z-angle) >  10.0))
 8006abe:	e705      	b.n	80068cc <turnGyroLR+0x3c>
			}
		}
	}
	TIM13_IT_STOP;
 8006ac0:	4805      	ldr	r0, [pc, #20]	; (8006ad8 <turnGyroLR+0x248>)
 8006ac2:	f7fd fdbf 	bl	8004644 <HAL_TIM_Base_Stop_IT>
	LED6_OFF;
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2104      	movs	r1, #4
 8006aca:	4804      	ldr	r0, [pc, #16]	; (8006adc <turnGyroLR+0x24c>)
 8006acc:	f7fc f9f8 	bl	8002ec0 <HAL_GPIO_WritePin>
}
 8006ad0:	bf00      	nop
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	20000300 	.word	0x20000300
 8006adc:	40020c00 	.word	0x40020c00
 8006ae0:	200005f0 	.word	0x200005f0
 8006ae4:	200015b4 	.word	0x200015b4
 8006ae8:	40000c00 	.word	0x40000c00
 8006aec:	200015b8 	.word	0x200015b8
 8006af0:	200015bc 	.word	0x200015bc
 8006af4:	200015c0 	.word	0x200015c0
 8006af8:	200015c4 	.word	0x200015c4
 8006afc:	200015cc 	.word	0x200015cc
 8006b00:	00000000 	.word	0x00000000
 8006b04:	200015c8 	.word	0x200015c8
 8006b08:	42480000 	.word	0x42480000
 8006b0c:	200015d0 	.word	0x200015d0
 8006b10:	20000018 	.word	0x20000018
 8006b14:	2000001c 	.word	0x2000001c
 8006b18:	3b03126f 	.word	0x3b03126f
 8006b1c:	3dcccccd 	.word	0x3dcccccd
 8006b20:	3f19999a 	.word	0x3f19999a
 8006b24:	3e4ccccd 	.word	0x3e4ccccd

08006b28 <readSensor>:
bool R = false;
bool F = false;

/*read IR sensors*/
void readSensor(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8006b2c:	4b72      	ldr	r3, [pc, #456]	; (8006cf8 <readSensor+0x1d0>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2200      	movs	r2, #0
 8006b32:	625a      	str	r2, [r3, #36]	; 0x24
	//read DC value	
	LFSensor = read_LF_Sensor;	
 8006b34:	2101      	movs	r1, #1
 8006b36:	2000      	movs	r0, #0
 8006b38:	f7ff fc2a 	bl	8006390 <readADC>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	461a      	mov	r2, r3
 8006b40:	4b6e      	ldr	r3, [pc, #440]	; (8006cfc <readSensor+0x1d4>)
 8006b42:	601a      	str	r2, [r3, #0]
	RFSensor = read_RF_Sensor;	
 8006b44:	2101      	movs	r1, #1
 8006b46:	2001      	movs	r0, #1
 8006b48:	f7ff fc22 	bl	8006390 <readADC>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	461a      	mov	r2, r3
 8006b50:	4b6b      	ldr	r3, [pc, #428]	; (8006d00 <readSensor+0x1d8>)
 8006b52:	601a      	str	r2, [r3, #0]
	DLSensor = read_DL_Sensor;
 8006b54:	2101      	movs	r1, #1
 8006b56:	2003      	movs	r0, #3
 8006b58:	f7ff fc1a 	bl	8006390 <readADC>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	461a      	mov	r2, r3
 8006b60:	4b68      	ldr	r3, [pc, #416]	; (8006d04 <readSensor+0x1dc>)
 8006b62:	601a      	str	r2, [r3, #0]
	DRSensor = read_DR_Sensor;	
 8006b64:	2101      	movs	r1, #1
 8006b66:	2002      	movs	r0, #2
 8006b68:	f7ff fc12 	bl	8006390 <readADC>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	461a      	mov	r2, r3
 8006b70:	4b65      	ldr	r3, [pc, #404]	; (8006d08 <readSensor+0x1e0>)
 8006b72:	601a      	str	r2, [r3, #0]
	
	
    //left front sensor
	LF_EM_ON;
 8006b74:	2201      	movs	r2, #1
 8006b76:	2180      	movs	r1, #128	; 0x80
 8006b78:	4864      	ldr	r0, [pc, #400]	; (8006d0c <readSensor+0x1e4>)
 8006b7a:	f7fc f9a1 	bl	8002ec0 <HAL_GPIO_WritePin>
	LFSensor = read_LF_Sensor - LFSensor;
 8006b7e:	2101      	movs	r1, #1
 8006b80:	2000      	movs	r0, #0
 8006b82:	f7ff fc05 	bl	8006390 <readADC>
 8006b86:	4603      	mov	r3, r0
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4b5c      	ldr	r3, [pc, #368]	; (8006cfc <readSensor+0x1d4>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	4a5a      	ldr	r2, [pc, #360]	; (8006cfc <readSensor+0x1d4>)
 8006b92:	6013      	str	r3, [r2, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<60);
 8006b94:	bf00      	nop
 8006b96:	4b58      	ldr	r3, [pc, #352]	; (8006cf8 <readSensor+0x1d0>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	2b3b      	cmp	r3, #59	; 0x3b
 8006b9e:	d9fa      	bls.n	8006b96 <readSensor+0x6e>
	LF_EM_OFF;
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2180      	movs	r1, #128	; 0x80
 8006ba4:	4859      	ldr	r0, [pc, #356]	; (8006d0c <readSensor+0x1e4>)
 8006ba6:	f7fc f98b 	bl	8002ec0 <HAL_GPIO_WritePin>
	if(LFSensor < 0)//error check
 8006baa:	4b54      	ldr	r3, [pc, #336]	; (8006cfc <readSensor+0x1d4>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	da02      	bge.n	8006bb8 <readSensor+0x90>
		LFSensor = 0;
 8006bb2:	4b52      	ldr	r3, [pc, #328]	; (8006cfc <readSensor+0x1d4>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<140);
 8006bb8:	bf00      	nop
 8006bba:	4b4f      	ldr	r3, [pc, #316]	; (8006cf8 <readSensor+0x1d0>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	2b8b      	cmp	r3, #139	; 0x8b
 8006bc2:	d9fa      	bls.n	8006bba <readSensor+0x92>

	//right front sensor
	RF_EM_ON;
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	2102      	movs	r1, #2
 8006bc8:	4850      	ldr	r0, [pc, #320]	; (8006d0c <readSensor+0x1e4>)
 8006bca:	f7fc f979 	bl	8002ec0 <HAL_GPIO_WritePin>
	RFSensor = read_RF_Sensor - RFSensor;
 8006bce:	2101      	movs	r1, #1
 8006bd0:	2001      	movs	r0, #1
 8006bd2:	f7ff fbdd 	bl	8006390 <readADC>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4b49      	ldr	r3, [pc, #292]	; (8006d00 <readSensor+0x1d8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	4a47      	ldr	r2, [pc, #284]	; (8006d00 <readSensor+0x1d8>)
 8006be2:	6013      	str	r3, [r2, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<200);
 8006be4:	bf00      	nop
 8006be6:	4b44      	ldr	r3, [pc, #272]	; (8006cf8 <readSensor+0x1d0>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	2bc7      	cmp	r3, #199	; 0xc7
 8006bee:	d9fa      	bls.n	8006be6 <readSensor+0xbe>
	RF_EM_OFF;
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2102      	movs	r1, #2
 8006bf4:	4845      	ldr	r0, [pc, #276]	; (8006d0c <readSensor+0x1e4>)
 8006bf6:	f7fc f963 	bl	8002ec0 <HAL_GPIO_WritePin>
	if(RFSensor < 0)
 8006bfa:	4b41      	ldr	r3, [pc, #260]	; (8006d00 <readSensor+0x1d8>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	da02      	bge.n	8006c08 <readSensor+0xe0>
		RFSensor = 0;
 8006c02:	4b3f      	ldr	r3, [pc, #252]	; (8006d00 <readSensor+0x1d8>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	601a      	str	r2, [r3, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<280);
 8006c08:	bf00      	nop
 8006c0a:	4b3b      	ldr	r3, [pc, #236]	; (8006cf8 <readSensor+0x1d0>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8006c14:	d3f9      	bcc.n	8006c0a <readSensor+0xe2>

    //diagonal sensors
	SIDE_EM_ON;
 8006c16:	2201      	movs	r2, #1
 8006c18:	2120      	movs	r1, #32
 8006c1a:	483c      	ldr	r0, [pc, #240]	; (8006d0c <readSensor+0x1e4>)
 8006c1c:	f7fc f950 	bl	8002ec0 <HAL_GPIO_WritePin>
	while(__HAL_TIM_GET_COUNTER(&htim1)<340);
 8006c20:	bf00      	nop
 8006c22:	4b35      	ldr	r3, [pc, #212]	; (8006cf8 <readSensor+0x1d0>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006c2c:	d3f9      	bcc.n	8006c22 <readSensor+0xfa>
	DLSensor = read_DL_Sensor - DLSensor;
 8006c2e:	2101      	movs	r1, #1
 8006c30:	2003      	movs	r0, #3
 8006c32:	f7ff fbad 	bl	8006390 <readADC>
 8006c36:	4603      	mov	r3, r0
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4b32      	ldr	r3, [pc, #200]	; (8006d04 <readSensor+0x1dc>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	4a30      	ldr	r2, [pc, #192]	; (8006d04 <readSensor+0x1dc>)
 8006c42:	6013      	str	r3, [r2, #0]
	DRSensor = read_DR_Sensor - DRSensor;
 8006c44:	2101      	movs	r1, #1
 8006c46:	2002      	movs	r0, #2
 8006c48:	f7ff fba2 	bl	8006390 <readADC>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	461a      	mov	r2, r3
 8006c50:	4b2d      	ldr	r3, [pc, #180]	; (8006d08 <readSensor+0x1e0>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	4a2c      	ldr	r2, [pc, #176]	; (8006d08 <readSensor+0x1e0>)
 8006c58:	6013      	str	r3, [r2, #0]
    SIDE_EM_OFF;
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2120      	movs	r1, #32
 8006c5e:	482b      	ldr	r0, [pc, #172]	; (8006d0c <readSensor+0x1e4>)
 8006c60:	f7fc f92e 	bl	8002ec0 <HAL_GPIO_WritePin>
	if(DLSensor < 0)
 8006c64:	4b27      	ldr	r3, [pc, #156]	; (8006d04 <readSensor+0x1dc>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	da02      	bge.n	8006c72 <readSensor+0x14a>
		DLSensor = 0;
 8006c6c:	4b25      	ldr	r3, [pc, #148]	; (8006d04 <readSensor+0x1dc>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	601a      	str	r2, [r3, #0]
	if(DRSensor < 0)
 8006c72:	4b25      	ldr	r3, [pc, #148]	; (8006d08 <readSensor+0x1e0>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	da02      	bge.n	8006c80 <readSensor+0x158>
		DRSensor = 0;
 8006c7a:	4b23      	ldr	r3, [pc, #140]	; (8006d08 <readSensor+0x1e0>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]
	// while(__HAL_TIM_GET_COUNTER(&htim1)<500);
	
	readVolMeter();
 8006c80:	f000 f86e 	bl	8006d60 <readVolMeter>
	
	LFSensor = LFSensor*reflectionRate/1000;
 8006c84:	4b1d      	ldr	r3, [pc, #116]	; (8006cfc <readSensor+0x1d4>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a21      	ldr	r2, [pc, #132]	; (8006d10 <readSensor+0x1e8>)
 8006c8a:	6812      	ldr	r2, [r2, #0]
 8006c8c:	fb02 f303 	mul.w	r3, r2, r3
 8006c90:	4a20      	ldr	r2, [pc, #128]	; (8006d14 <readSensor+0x1ec>)
 8006c92:	fb82 1203 	smull	r1, r2, r2, r3
 8006c96:	1192      	asrs	r2, r2, #6
 8006c98:	17db      	asrs	r3, r3, #31
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	4a17      	ldr	r2, [pc, #92]	; (8006cfc <readSensor+0x1d4>)
 8006c9e:	6013      	str	r3, [r2, #0]
	RFSensor = RFSensor*reflectionRate/1000;
 8006ca0:	4b17      	ldr	r3, [pc, #92]	; (8006d00 <readSensor+0x1d8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a1a      	ldr	r2, [pc, #104]	; (8006d10 <readSensor+0x1e8>)
 8006ca6:	6812      	ldr	r2, [r2, #0]
 8006ca8:	fb02 f303 	mul.w	r3, r2, r3
 8006cac:	4a19      	ldr	r2, [pc, #100]	; (8006d14 <readSensor+0x1ec>)
 8006cae:	fb82 1203 	smull	r1, r2, r2, r3
 8006cb2:	1192      	asrs	r2, r2, #6
 8006cb4:	17db      	asrs	r3, r3, #31
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	4a11      	ldr	r2, [pc, #68]	; (8006d00 <readSensor+0x1d8>)
 8006cba:	6013      	str	r3, [r2, #0]
	DLSensor = DLSensor*reflectionRate/1000;
 8006cbc:	4b11      	ldr	r3, [pc, #68]	; (8006d04 <readSensor+0x1dc>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a13      	ldr	r2, [pc, #76]	; (8006d10 <readSensor+0x1e8>)
 8006cc2:	6812      	ldr	r2, [r2, #0]
 8006cc4:	fb02 f303 	mul.w	r3, r2, r3
 8006cc8:	4a12      	ldr	r2, [pc, #72]	; (8006d14 <readSensor+0x1ec>)
 8006cca:	fb82 1203 	smull	r1, r2, r2, r3
 8006cce:	1192      	asrs	r2, r2, #6
 8006cd0:	17db      	asrs	r3, r3, #31
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	4a0b      	ldr	r2, [pc, #44]	; (8006d04 <readSensor+0x1dc>)
 8006cd6:	6013      	str	r3, [r2, #0]
	DRSensor = DRSensor*reflectionRate/1000;
 8006cd8:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <readSensor+0x1e0>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a0c      	ldr	r2, [pc, #48]	; (8006d10 <readSensor+0x1e8>)
 8006cde:	6812      	ldr	r2, [r2, #0]
 8006ce0:	fb02 f303 	mul.w	r3, r2, r3
 8006ce4:	4a0b      	ldr	r2, [pc, #44]	; (8006d14 <readSensor+0x1ec>)
 8006ce6:	fb82 1203 	smull	r1, r2, r2, r3
 8006cea:	1192      	asrs	r2, r2, #6
 8006cec:	17db      	asrs	r3, r3, #31
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	4a05      	ldr	r2, [pc, #20]	; (8006d08 <readSensor+0x1e0>)
 8006cf2:	6013      	str	r3, [r2, #0]
	
}
 8006cf4:	bf00      	nop
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	20000198 	.word	0x20000198
 8006cfc:	200015dc 	.word	0x200015dc
 8006d00:	200015e0 	.word	0x200015e0
 8006d04:	200015e4 	.word	0x200015e4
 8006d08:	200015e8 	.word	0x200015e8
 8006d0c:	40020800 	.word	0x40020800
 8006d10:	20000020 	.word	0x20000020
 8006d14:	10624dd3 	.word	0x10624dd3

08006d18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  if (htim == &htim14 )
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a0c      	ldr	r2, [pc, #48]	; (8006d54 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d106      	bne.n	8006d36 <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
    readSensor();
 8006d28:	f7ff fefe 	bl	8006b28 <readSensor>
	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8006d2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d30:	4809      	ldr	r0, [pc, #36]	; (8006d58 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8006d32:	f7fc f8de 	bl	8002ef2 <HAL_GPIO_TogglePin>
  }
  if (htim == &htim13)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a08      	ldr	r2, [pc, #32]	; (8006d5c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d106      	bne.n	8006d4c <HAL_TIM_PeriodElapsedCallback+0x34>
  {
	HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8006d3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d42:	4805      	ldr	r0, [pc, #20]	; (8006d58 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8006d44:	f7fc f8d5 	bl	8002ef2 <HAL_GPIO_TogglePin>
	L3GD20_loop();
 8006d48:	f7ff fa50 	bl	80061ec <L3GD20_loop>
  }
}
 8006d4c:	bf00      	nop
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20000348 	.word	0x20000348
 8006d58:	40020000 	.word	0x40020000
 8006d5c:	20000300 	.word	0x20000300

08006d60 <readVolMeter>:



/*read voltage meter*/
void readVolMeter(void)
{          //3240 = 7.85V
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
	volMeter = read_Vol_Meter;//raw value
 8006d64:	2101      	movs	r1, #1
 8006d66:	2004      	movs	r0, #4
 8006d68:	f7ff fb12 	bl	8006390 <readADC>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	461a      	mov	r2, r3
 8006d70:	4b09      	ldr	r3, [pc, #36]	; (8006d98 <readVolMeter+0x38>)
 8006d72:	601a      	str	r2, [r3, #0]
	voltage = volMeter*809/3248;//actual voltage value  ex) 8.2V = 8200
 8006d74:	4b08      	ldr	r3, [pc, #32]	; (8006d98 <readVolMeter+0x38>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f240 3229 	movw	r2, #809	; 0x329
 8006d7c:	fb02 f303 	mul.w	r3, r2, r3
 8006d80:	4a06      	ldr	r2, [pc, #24]	; (8006d9c <readVolMeter+0x3c>)
 8006d82:	fb82 1203 	smull	r1, r2, r2, r3
 8006d86:	441a      	add	r2, r3
 8006d88:	12d2      	asrs	r2, r2, #11
 8006d8a:	17db      	asrs	r3, r3, #31
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	4a04      	ldr	r2, [pc, #16]	; (8006da0 <readVolMeter+0x40>)
 8006d90:	6013      	str	r3, [r2, #0]
}
 8006d92:	bf00      	nop
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	200015d4 	.word	0x200015d4
 8006d9c:	a16b312f 	.word	0xa16b312f
 8006da0:	200015d8 	.word	0x200015d8

08006da4 <cppmain>:
bool buttonPress = false;

int mouseState = 2;


void cppmain(void) {
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
	LED1_ON;
 8006daa:	2201      	movs	r2, #1
 8006dac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006db0:	4863      	ldr	r0, [pc, #396]	; (8006f40 <cppmain+0x19c>)
 8006db2:	f7fc f885 	bl	8002ec0 <HAL_GPIO_WritePin>

	// INITIALIZATION OF HARDWARES
	motorInit();
 8006db6:	f7ff fb9d 	bl	80064f4 <motorInit>
	encoderInit();
 8006dba:	f7ff fb41 	bl	8006440 <encoderInit>
	resetEncoder();
 8006dbe:	f7ff fb4f 	bl	8006460 <resetEncoder>
	ssd1306_Init();
 8006dc2:	f7fa fc4d 	bl	8001660 <ssd1306_Init>


	int dist = 170;
 8006dc6:	23aa      	movs	r3, #170	; 0xaa
 8006dc8:	607b      	str	r3, [r7, #4]
	ALL_LED_ON;
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006dd0:	485b      	ldr	r0, [pc, #364]	; (8006f40 <cppmain+0x19c>)
 8006dd2:	f7fc f875 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ddc:	4858      	ldr	r0, [pc, #352]	; (8006f40 <cppmain+0x19c>)
 8006dde:	f7fc f86f 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006de2:	2201      	movs	r2, #1
 8006de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006de8:	4856      	ldr	r0, [pc, #344]	; (8006f44 <cppmain+0x1a0>)
 8006dea:	f7fc f869 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006dee:	2201      	movs	r2, #1
 8006df0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006df4:	4853      	ldr	r0, [pc, #332]	; (8006f44 <cppmain+0x1a0>)
 8006df6:	f7fc f863 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e00:	4850      	ldr	r0, [pc, #320]	; (8006f44 <cppmain+0x1a0>)
 8006e02:	f7fc f85d 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006e06:	2201      	movs	r2, #1
 8006e08:	2104      	movs	r1, #4
 8006e0a:	484f      	ldr	r0, [pc, #316]	; (8006f48 <cppmain+0x1a4>)
 8006e0c:	f7fc f858 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006e10:	2201      	movs	r2, #1
 8006e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e16:	484a      	ldr	r0, [pc, #296]	; (8006f40 <cppmain+0x19c>)
 8006e18:	f7fc f852 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	2110      	movs	r1, #16
 8006e20:	484a      	ldr	r0, [pc, #296]	; (8006f4c <cppmain+0x1a8>)
 8006e22:	f7fc f84d 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006e26:	2201      	movs	r2, #1
 8006e28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e2c:	4847      	ldr	r0, [pc, #284]	; (8006f4c <cppmain+0x1a8>)
 8006e2e:	f7fc f847 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006e32:	2201      	movs	r2, #1
 8006e34:	2101      	movs	r1, #1
 8006e36:	4843      	ldr	r0, [pc, #268]	; (8006f44 <cppmain+0x1a0>)
 8006e38:	f7fc f842 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e42:	4842      	ldr	r0, [pc, #264]	; (8006f4c <cppmain+0x1a8>)
 8006e44:	f7fc f83c 	bl	8002ec0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8006e48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e4c:	f7fa fe7c 	bl	8001b48 <HAL_Delay>
	ALL_LED_OFF;
 8006e50:	2200      	movs	r2, #0
 8006e52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e56:	483a      	ldr	r0, [pc, #232]	; (8006f40 <cppmain+0x19c>)
 8006e58:	f7fc f832 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e62:	4837      	ldr	r0, [pc, #220]	; (8006f40 <cppmain+0x19c>)
 8006e64:	f7fc f82c 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e6e:	4835      	ldr	r0, [pc, #212]	; (8006f44 <cppmain+0x1a0>)
 8006e70:	f7fc f826 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006e74:	2200      	movs	r2, #0
 8006e76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e7a:	4832      	ldr	r0, [pc, #200]	; (8006f44 <cppmain+0x1a0>)
 8006e7c:	f7fc f820 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006e80:	2200      	movs	r2, #0
 8006e82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e86:	482f      	ldr	r0, [pc, #188]	; (8006f44 <cppmain+0x1a0>)
 8006e88:	f7fc f81a 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2104      	movs	r1, #4
 8006e90:	482d      	ldr	r0, [pc, #180]	; (8006f48 <cppmain+0x1a4>)
 8006e92:	f7fc f815 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006e96:	2200      	movs	r2, #0
 8006e98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e9c:	4828      	ldr	r0, [pc, #160]	; (8006f40 <cppmain+0x19c>)
 8006e9e:	f7fc f80f 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2110      	movs	r1, #16
 8006ea6:	4829      	ldr	r0, [pc, #164]	; (8006f4c <cppmain+0x1a8>)
 8006ea8:	f7fc f80a 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006eac:	2200      	movs	r2, #0
 8006eae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006eb2:	4826      	ldr	r0, [pc, #152]	; (8006f4c <cppmain+0x1a8>)
 8006eb4:	f7fc f804 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2101      	movs	r1, #1
 8006ebc:	4821      	ldr	r0, [pc, #132]	; (8006f44 <cppmain+0x1a0>)
 8006ebe:	f7fb ffff 	bl	8002ec0 <HAL_GPIO_WritePin>
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ec8:	4820      	ldr	r0, [pc, #128]	; (8006f4c <cppmain+0x1a8>)
 8006eca:	f7fb fff9 	bl	8002ec0 <HAL_GPIO_WritePin>
	ssd1306_Fill(Black);
 8006ece:	2000      	movs	r0, #0
 8006ed0:	f7fa fc30 	bl	8001734 <ssd1306_Fill>
	ssd1306_SetCursor(2, 2);
 8006ed4:	2102      	movs	r1, #2
 8006ed6:	2002      	movs	r0, #2
 8006ed8:	f7fa fd7a 	bl	80019d0 <ssd1306_SetCursor>
	
    ssd1306_WriteString("INIT...!!!", Font_6x8, White);
 8006edc:	4a1c      	ldr	r2, [pc, #112]	; (8006f50 <cppmain+0x1ac>)
 8006ede:	2301      	movs	r3, #1
 8006ee0:	ca06      	ldmia	r2, {r1, r2}
 8006ee2:	481c      	ldr	r0, [pc, #112]	; (8006f54 <cppmain+0x1b0>)
 8006ee4:	f7fa fd4e 	bl	8001984 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8006ee8:	f7fa fc48 	bl	800177c <ssd1306_UpdateScreen>

//	straightCountsPID(dist);

	while (1) {
	
		l_pos = l_position;
 8006eec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	4a19      	ldr	r2, [pc, #100]	; (8006f58 <cppmain+0x1b4>)
 8006ef4:	6013      	str	r3, [r2, #0]
		r_pos = r_position;
 8006ef6:	4b19      	ldr	r3, [pc, #100]	; (8006f5c <cppmain+0x1b8>)
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	43db      	mvns	r3, r3
 8006efc:	4a18      	ldr	r2, [pc, #96]	; (8006f60 <cppmain+0x1bc>)
 8006efe:	6013      	str	r3, [r2, #0]
		
		HAL_Delay(2000);
 8006f00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006f04:	f7fa fe20 	bl	8001b48 <HAL_Delay>
		straightCountsPID(176);
 8006f08:	20b0      	movs	r0, #176	; 0xb0
 8006f0a:	f7ff fc19 	bl	8006740 <straightCountsPID>
		HAL_Delay(1000);
 8006f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f12:	f7fa fe19 	bl	8001b48 <HAL_Delay>
		turnGyroLR(90);
 8006f16:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8006f64 <cppmain+0x1c0>
 8006f1a:	f7ff fcb9 	bl	8006890 <turnGyroLR>
		HAL_Delay(1000);
 8006f1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f22:	f7fa fe11 	bl	8001b48 <HAL_Delay>
		straightCountsPID(176);
 8006f26:	20b0      	movs	r0, #176	; 0xb0
 8006f28:	f7ff fc0a 	bl	8006740 <straightCountsPID>
		HAL_Delay(2000);
 8006f2c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006f30:	f7fa fe0a 	bl	8001b48 <HAL_Delay>
//		l_value = adcResultsDMA[0];
//		r_value = adcResultsDMA[1];


//		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adcResultsDMA, adcChannelCount);
		i++;
 8006f34:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <cppmain+0x1c4>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	4a0b      	ldr	r2, [pc, #44]	; (8006f68 <cppmain+0x1c4>)
 8006f3c:	6013      	str	r3, [r2, #0]
		l_pos = l_position;
 8006f3e:	e7d5      	b.n	8006eec <cppmain+0x148>
 8006f40:	40020000 	.word	0x40020000
 8006f44:	40020800 	.word	0x40020800
 8006f48:	40020c00 	.word	0x40020c00
 8006f4c:	40020400 	.word	0x40020400
 8006f50:	20000004 	.word	0x20000004
 8006f54:	08006fdc 	.word	0x08006fdc
 8006f58:	200015f4 	.word	0x200015f4
 8006f5c:	40000c00 	.word	0x40000c00
 8006f60:	200015f0 	.word	0x200015f0
 8006f64:	42b40000 	.word	0x42b40000
 8006f68:	200015ec 	.word	0x200015ec

08006f6c <memset>:
 8006f6c:	4402      	add	r2, r0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d100      	bne.n	8006f76 <memset+0xa>
 8006f74:	4770      	bx	lr
 8006f76:	f803 1b01 	strb.w	r1, [r3], #1
 8006f7a:	e7f9      	b.n	8006f70 <memset+0x4>

08006f7c <__libc_init_array>:
 8006f7c:	b570      	push	{r4, r5, r6, lr}
 8006f7e:	4d0d      	ldr	r5, [pc, #52]	; (8006fb4 <__libc_init_array+0x38>)
 8006f80:	4c0d      	ldr	r4, [pc, #52]	; (8006fb8 <__libc_init_array+0x3c>)
 8006f82:	1b64      	subs	r4, r4, r5
 8006f84:	10a4      	asrs	r4, r4, #2
 8006f86:	2600      	movs	r6, #0
 8006f88:	42a6      	cmp	r6, r4
 8006f8a:	d109      	bne.n	8006fa0 <__libc_init_array+0x24>
 8006f8c:	4d0b      	ldr	r5, [pc, #44]	; (8006fbc <__libc_init_array+0x40>)
 8006f8e:	4c0c      	ldr	r4, [pc, #48]	; (8006fc0 <__libc_init_array+0x44>)
 8006f90:	f000 f818 	bl	8006fc4 <_init>
 8006f94:	1b64      	subs	r4, r4, r5
 8006f96:	10a4      	asrs	r4, r4, #2
 8006f98:	2600      	movs	r6, #0
 8006f9a:	42a6      	cmp	r6, r4
 8006f9c:	d105      	bne.n	8006faa <__libc_init_array+0x2e>
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa4:	4798      	blx	r3
 8006fa6:	3601      	adds	r6, #1
 8006fa8:	e7ee      	b.n	8006f88 <__libc_init_array+0xc>
 8006faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fae:	4798      	blx	r3
 8006fb0:	3601      	adds	r6, #1
 8006fb2:	e7f2      	b.n	8006f9a <__libc_init_array+0x1e>
 8006fb4:	08007600 	.word	0x08007600
 8006fb8:	08007600 	.word	0x08007600
 8006fbc:	08007600 	.word	0x08007600
 8006fc0:	08007604 	.word	0x08007604

08006fc4 <_init>:
 8006fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc6:	bf00      	nop
 8006fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fca:	bc08      	pop	{r3}
 8006fcc:	469e      	mov	lr, r3
 8006fce:	4770      	bx	lr

08006fd0 <_fini>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	bf00      	nop
 8006fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd6:	bc08      	pop	{r3}
 8006fd8:	469e      	mov	lr, r3
 8006fda:	4770      	bx	lr
