
MicromouseFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b72c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030cc  0800b8c0  0800b8c0  0001b8c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e98c  0800e98c  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800e98c  0800e98c  0001e98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e994  0800e994  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e994  0800e994  0001e994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e998  0800e998  0001e998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800e99c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020208  2**0
                  CONTENTS
 10 .bss          000007a8  20000208  20000208  00020208  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009b0  200009b0  00020208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017a7f  00000000  00000000  0002027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000038a7  00000000  00000000  00037cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012d8  00000000  00000000  0003b5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e87  00000000  00000000  0003c880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000281c3  00000000  00000000  0003d707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ad7f  00000000  00000000  000658ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5e19  00000000  00000000  00080649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006134  00000000  00000000  00156464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0015c598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8a4 	.word	0x0800b8a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800b8a4 	.word	0x0800b8a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <main>:
static void MX_TIM9_Init(void);           // BUZZER SOUND GENERATION
static void MX_TIM13_Init(void);          // INTERRUPT GYRO UPDATE
static void MX_TIM14_Init(void);          // INTERRUPT ADC UPDATE: IR

int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  HAL_Init();
 8000f48:	f001 fc40 	bl	80027cc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000f4c:	f000 f82a 	bl	8000fa4 <SystemClock_Config>

  ITM_Port32(31) = 1;
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <main+0x5c>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f56:	f000 fbef 	bl	8001738 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f5a:	f000 fbcd 	bl	80016f8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000f5e:	f000 f8c3 	bl	80010e8 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000f62:	f000 f9d3 	bl	800130c <MX_TIM4_Init>
  MX_ADC1_Init();
 8000f66:	f000 f887 	bl	8001078 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000f6a:	f000 f8f3 	bl	8001154 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000f6e:	f000 fb99 	bl	80016a4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000f72:	f000 f927 	bl	80011c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f76:	f000 f975 	bl	8001264 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f7a:	f000 fa5f 	bl	800143c <MX_TIM5_Init>
  MX_TIM6_Init();
 8000f7e:	f000 fab1 	bl	80014e4 <MX_TIM6_Init>
  MX_TIM9_Init();
 8000f82:	f000 fae5 	bl	8001550 <MX_TIM9_Init>
  MX_TIM13_Init();
 8000f86:	f000 fb45 	bl	8001614 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000f8a:	f000 fb67 	bl	800165c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  

  ITM_Port32(31) = 2;
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <main+0x5c>)
 8000f90:	2202      	movs	r2, #2
 8000f92:	601a      	str	r2, [r3, #0]

  // TRANSFERRING THE CONTROL TO OUR LOOP
  cppmain();
 8000f94:	f006 fdd0 	bl	8007b38 <cppmain>

  while (1)
  {
	  return 0;
 8000f98:	2300      	movs	r3, #0
  }
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000007c 	.word	0xe000007c

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b094      	sub	sp, #80	; 0x50
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0320 	add.w	r3, r7, #32
 8000fae:	2230      	movs	r2, #48	; 0x30
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f008 fc53 	bl	800985e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b28      	ldr	r3, [pc, #160]	; (8001070 <SystemClock_Config+0xcc>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	4a27      	ldr	r2, [pc, #156]	; (8001070 <SystemClock_Config+0xcc>)
 8000fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd8:	4b25      	ldr	r3, [pc, #148]	; (8001070 <SystemClock_Config+0xcc>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	4b22      	ldr	r3, [pc, #136]	; (8001074 <SystemClock_Config+0xd0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a21      	ldr	r2, [pc, #132]	; (8001074 <SystemClock_Config+0xd0>)
 8000fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <SystemClock_Config+0xd0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure.  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001000:	2301      	movs	r3, #1
 8001002:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001004:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100a:	2302      	movs	r3, #2
 800100c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001012:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001014:	2308      	movs	r3, #8
 8001016:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001018:	2332      	movs	r3, #50	; 0x32
 800101a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800101c:	2302      	movs	r3, #2
 800101e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001020:	2304      	movs	r3, #4
 8001022:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001024:	f107 0320 	add.w	r3, r7, #32
 8001028:	4618      	mov	r0, r3
 800102a:	f002 fe31 	bl	8003c90 <HAL_RCC_OscConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001034:	f000 fc58 	bl	80018e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001038:	230f      	movs	r3, #15
 800103a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103c:	2302      	movs	r3, #2
 800103e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001048:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2101      	movs	r1, #1
 8001054:	4618      	mov	r0, r3
 8001056:	f003 f893 	bl	8004180 <HAL_RCC_ClockConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001060:	f000 fc42 	bl	80018e8 <Error_Handler>
  }

  /** Enables the Clock Security System*/
  HAL_RCC_EnableCSS();
 8001064:	f003 f972 	bl	800434c <HAL_RCC_EnableCSS>
}
 8001068:	bf00      	nop
 800106a:	3750      	adds	r7, #80	; 0x50
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023800 	.word	0x40023800
 8001074:	40007000 	.word	0x40007000

08001078 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) */
  hadc1.Instance = ADC1;
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <MX_ADC1_Init+0x64>)
 800107e:	4a18      	ldr	r2, [pc, #96]	; (80010e0 <MX_ADC1_Init+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <MX_ADC1_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <MX_ADC1_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <MX_ADC1_Init+0x64>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_ADC1_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <MX_ADC1_Init+0x64>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_ADC1_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_ADC1_Init+0x64>)
 80010aa:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <MX_ADC1_Init+0x6c>)
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <MX_ADC1_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_ADC1_Init+0x64>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <MX_ADC1_Init+0x64>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_ADC1_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_ADC1_Init+0x64>)
 80010ca:	f001 fc15 	bl	80028f8 <HAL_ADC_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 80010d4:	f000 fc08 	bl	80018e8 <Error_Handler>
  }
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000224 	.word	0x20000224
 80010e0:	40012000 	.word	0x40012000
 80010e4:	0f000001 	.word	0x0f000001

080010e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_SPI1_Init+0x64>)
 80010ee:	4a18      	ldr	r2, [pc, #96]	; (8001150 <MX_SPI1_Init+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_SPI1_Init+0x64>)
 80010f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_SPI1_Init+0x64>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_SPI1_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_SPI1_Init+0x64>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_SPI1_Init+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_SPI1_Init+0x64>)
 8001114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001118:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_SPI1_Init+0x64>)
 800111c:	2218      	movs	r2, #24
 800111e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <MX_SPI1_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_SPI1_Init+0x64>)
 8001128:	2200      	movs	r2, #0
 800112a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <MX_SPI1_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_SPI1_Init+0x64>)
 8001134:	220a      	movs	r2, #10
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_SPI1_Init+0x64>)
 800113a:	f003 fa66 	bl	800460a <HAL_SPI_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001144:	f000 fbd0 	bl	80018e8 <Error_Handler>
  }
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200002cc 	.word	0x200002cc
 8001150:	40013000 	.word	0x40013000

08001154 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <MX_SPI2_Init+0x68>)
 800115a:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <MX_SPI2_Init+0x6c>)
 800115c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <MX_SPI2_Init+0x68>)
 8001160:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001164:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <MX_SPI2_Init+0x68>)
 8001168:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800116c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800116e:	4b13      	ldr	r3, [pc, #76]	; (80011bc <MX_SPI2_Init+0x68>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_SPI2_Init+0x68>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <MX_SPI2_Init+0x68>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_SPI2_Init+0x68>)
 8001182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001186:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_SPI2_Init+0x68>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_SPI2_Init+0x68>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_SPI2_Init+0x68>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <MX_SPI2_Init+0x68>)
 800119c:	2200      	movs	r2, #0
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_SPI2_Init+0x68>)
 80011a2:	220a      	movs	r2, #10
 80011a4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_SPI2_Init+0x68>)
 80011a8:	f003 fa2f 	bl	800460a <HAL_SPI_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80011b2:	f000 fb99 	bl	80018e8 <Error_Handler>
  }
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000324 	.word	0x20000324
 80011c0:	40003800 	.word	0x40003800

080011c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MX_TIM1_Init+0x98>)
 80011e2:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <MX_TIM1_Init+0x9c>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <MX_TIM1_Init+0x98>)
 80011e8:	2231      	movs	r2, #49	; 0x31
 80011ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_TIM1_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <MX_TIM1_Init+0x98>)
 80011f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_TIM1_Init+0x98>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_TIM1_Init+0x98>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_TIM1_Init+0x98>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800120c:	4813      	ldr	r0, [pc, #76]	; (800125c <MX_TIM1_Init+0x98>)
 800120e:	f003 ffa5 	bl	800515c <HAL_TIM_Base_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x58>
    Error_Handler();
 8001218:	f000 fb66 	bl	80018e8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001220:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	4619      	mov	r1, r3
 8001228:	480c      	ldr	r0, [pc, #48]	; (800125c <MX_TIM1_Init+0x98>)
 800122a:	f004 fd0d 	bl	8005c48 <HAL_TIM_ConfigClockSource>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM1_Init+0x74>
    Error_Handler();
 8001234:	f000 fb58 	bl	80018e8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_TIM1_Init+0x98>)
 8001246:	f005 f8ff 	bl	8006448 <HAL_TIMEx_MasterConfigSynchronization>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0x90>
    Error_Handler();
 8001250:	f000 fb4a 	bl	80018e8 <Error_Handler>
}
 8001254:	bf00      	nop
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000037c 	.word	0x2000037c
 8001260:	40010000 	.word	0x40010000

08001264 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	; 0x30
 8001268:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	2224      	movs	r2, #36	; 0x24
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f008 faf3 	bl	800985e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001280:	4b21      	ldr	r3, [pc, #132]	; (8001308 <MX_TIM2_Init+0xa4>)
 8001282:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001286:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001288:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MX_TIM2_Init+0xa4>)
 800128a:	2200      	movs	r2, #0
 800128c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <MX_TIM2_Init+0xa4>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <MX_TIM2_Init+0xa4>)
 8001296:	f04f 32ff 	mov.w	r2, #4294967295
 800129a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <MX_TIM2_Init+0xa4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_TIM2_Init+0xa4>)
 80012a4:	2280      	movs	r2, #128	; 0x80
 80012a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012b0:	2301      	movs	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012c0:	2301      	movs	r3, #1
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	4619      	mov	r1, r3
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <MX_TIM2_Init+0xa4>)
 80012d4:	f004 f9ba 	bl	800564c <HAL_TIM_Encoder_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM2_Init+0x7e>
    Error_Handler();
 80012de:	f000 fb03 	bl	80018e8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	4806      	ldr	r0, [pc, #24]	; (8001308 <MX_TIM2_Init+0xa4>)
 80012f0:	f005 f8aa 	bl	8006448 <HAL_TIMEx_MasterConfigSynchronization>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0x9a>
    Error_Handler();
 80012fa:	f000 faf5 	bl	80018e8 <Error_Handler>
}
 80012fe:	bf00      	nop
 8001300:	3730      	adds	r7, #48	; 0x30
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200003c4 	.word	0x200003c4

0800130c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08e      	sub	sp, #56	; 0x38
 8001310:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	615a      	str	r2, [r3, #20]
 800133a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800133c:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <MX_TIM4_Init+0x128>)
 800133e:	4a3e      	ldr	r2, [pc, #248]	; (8001438 <MX_TIM4_Init+0x12c>)
 8001340:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001342:	4b3c      	ldr	r3, [pc, #240]	; (8001434 <MX_TIM4_Init+0x128>)
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <MX_TIM4_Init+0x128>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4095;
 800134e:	4b39      	ldr	r3, [pc, #228]	; (8001434 <MX_TIM4_Init+0x128>)
 8001350:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001354:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	4b37      	ldr	r3, [pc, #220]	; (8001434 <MX_TIM4_Init+0x128>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135c:	4b35      	ldr	r3, [pc, #212]	; (8001434 <MX_TIM4_Init+0x128>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001362:	4834      	ldr	r0, [pc, #208]	; (8001434 <MX_TIM4_Init+0x128>)
 8001364:	f003 fefa 	bl	800515c <HAL_TIM_Base_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM4_Init+0x66>
    Error_Handler();
 800136e:	f000 fabb 	bl	80018e8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001378:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800137c:	4619      	mov	r1, r3
 800137e:	482d      	ldr	r0, [pc, #180]	; (8001434 <MX_TIM4_Init+0x128>)
 8001380:	f004 fc62 	bl	8005c48 <HAL_TIM_ConfigClockSource>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM4_Init+0x82>
    Error_Handler();
 800138a:	f000 faad 	bl	80018e8 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800138e:	4829      	ldr	r0, [pc, #164]	; (8001434 <MX_TIM4_Init+0x128>)
 8001390:	f004 f83b 	bl	800540a <HAL_TIM_PWM_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM4_Init+0x92>
    Error_Handler();
 800139a:	f000 faa5 	bl	80018e8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013a6:	f107 0320 	add.w	r3, r7, #32
 80013aa:	4619      	mov	r1, r3
 80013ac:	4821      	ldr	r0, [pc, #132]	; (8001434 <MX_TIM4_Init+0x128>)
 80013ae:	f005 f84b 	bl	8006448 <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM4_Init+0xb0>
    Error_Handler();
 80013b8:	f000 fa96 	bl	80018e8 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013bc:	2360      	movs	r3, #96	; 0x60
 80013be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	4619      	mov	r1, r3
 80013d2:	4818      	ldr	r0, [pc, #96]	; (8001434 <MX_TIM4_Init+0x128>)
 80013d4:	f004 fb76 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM4_Init+0xd6>
    Error_Handler();
 80013de:	f000 fa83 	bl	80018e8 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2204      	movs	r2, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	4812      	ldr	r0, [pc, #72]	; (8001434 <MX_TIM4_Init+0x128>)
 80013ea:	f004 fb6b 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM4_Init+0xec>
    Error_Handler();
 80013f4:	f000 fa78 	bl	80018e8 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2208      	movs	r2, #8
 80013fc:	4619      	mov	r1, r3
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <MX_TIM4_Init+0x128>)
 8001400:	f004 fb60 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM4_Init+0x102>
    Error_Handler();
 800140a:	f000 fa6d 	bl	80018e8 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	220c      	movs	r2, #12
 8001412:	4619      	mov	r1, r3
 8001414:	4807      	ldr	r0, [pc, #28]	; (8001434 <MX_TIM4_Init+0x128>)
 8001416:	f004 fb55 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM4_Init+0x118>
    Error_Handler();
 8001420:	f000 fa62 	bl	80018e8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8001424:	4803      	ldr	r0, [pc, #12]	; (8001434 <MX_TIM4_Init+0x128>)
 8001426:	f000 fcfb 	bl	8001e20 <HAL_TIM_MspPostInit>
}
 800142a:	bf00      	nop
 800142c:	3738      	adds	r7, #56	; 0x38
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000040c 	.word	0x2000040c
 8001438:	40000800 	.word	0x40000800

0800143c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	; 0x30
 8001440:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	2224      	movs	r2, #36	; 0x24
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f008 fa07 	bl	800985e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
  htim5.Instance = TIM5;
 8001458:	4b20      	ldr	r3, [pc, #128]	; (80014dc <MX_TIM5_Init+0xa0>)
 800145a:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <MX_TIM5_Init+0xa4>)
 800145c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <MX_TIM5_Init+0xa0>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <MX_TIM5_Init+0xa0>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <MX_TIM5_Init+0xa0>)
 800146c:	f04f 32ff 	mov.w	r2, #4294967295
 8001470:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <MX_TIM5_Init+0xa0>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <MX_TIM5_Init+0xa0>)
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 800147e:	2302      	movs	r3, #2
 8001480:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001486:	2301      	movs	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001496:	2301      	movs	r3, #1
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <MX_TIM5_Init+0xa0>)
 80014aa:	f004 f8cf 	bl	800564c <HAL_TIM_Encoder_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM5_Init+0x7c>
    Error_Handler();
 80014b4:	f000 fa18 	bl	80018e8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_TIM5_Init+0xa0>)
 80014c6:	f004 ffbf 	bl	8006448 <HAL_TIMEx_MasterConfigSynchronization>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM5_Init+0x98>
    Error_Handler();
 80014d0:	f000 fa0a 	bl	80018e8 <Error_Handler>
}
 80014d4:	bf00      	nop
 80014d6:	3730      	adds	r7, #48	; 0x30
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000454 	.word	0x20000454
 80014e0:	40000c00 	.word	0x40000c00

080014e4 <MX_TIM6_Init>:


static void MX_TIM6_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ea:	463b      	mov	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <MX_TIM6_Init+0x64>)
 80014f4:	4a15      	ldr	r2, [pc, #84]	; (800154c <MX_TIM6_Init+0x68>)
 80014f6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1999;
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <MX_TIM6_Init+0x64>)
 80014fa:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80014fe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_TIM6_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000/(2*FPS);
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <MX_TIM6_Init+0x64>)
 8001508:	f243 02d4 	movw	r2, #12500	; 0x30d4
 800150c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_TIM6_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001514:	480c      	ldr	r0, [pc, #48]	; (8001548 <MX_TIM6_Init+0x64>)
 8001516:	f003 fe21 	bl	800515c <HAL_TIM_Base_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001520:	f000 f9e2 	bl	80018e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800152c:	463b      	mov	r3, r7
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_TIM6_Init+0x64>)
 8001532:	f004 ff89 	bl	8006448 <HAL_TIMEx_MasterConfigSynchronization>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800153c:	f000 f9d4 	bl	80018e8 <Error_Handler>
  }
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	2000049c 	.word	0x2000049c
 800154c:	40001000 	.word	0x40001000

08001550 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08c      	sub	sp, #48	; 0x30
 8001554:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	615a      	str	r2, [r3, #20]
 8001574:	619a      	str	r2, [r3, #24]
  htim9.Instance = TIM9;
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <MX_TIM9_Init+0xbc>)
 8001578:	4a25      	ldr	r2, [pc, #148]	; (8001610 <MX_TIM9_Init+0xc0>)
 800157a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99; // 50 000 000 --> 500 000
 800157c:	4b23      	ldr	r3, [pc, #140]	; (800160c <MX_TIM9_Init+0xbc>)
 800157e:	2263      	movs	r2, #99	; 0x63
 8001580:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <MX_TIM9_Init+0xbc>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;  // 500 000 --> 500
 8001588:	4b20      	ldr	r3, [pc, #128]	; (800160c <MX_TIM9_Init+0xbc>)
 800158a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800158e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <MX_TIM9_Init+0xbc>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_TIM9_Init+0xbc>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800159c:	481b      	ldr	r0, [pc, #108]	; (800160c <MX_TIM9_Init+0xbc>)
 800159e:	f003 fddd 	bl	800515c <HAL_TIM_Base_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM9_Init+0x5c>
    Error_Handler();
 80015a8:	f000 f99e 	bl	80018e8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80015b2:	f107 0320 	add.w	r3, r7, #32
 80015b6:	4619      	mov	r1, r3
 80015b8:	4814      	ldr	r0, [pc, #80]	; (800160c <MX_TIM9_Init+0xbc>)
 80015ba:	f004 fb45 	bl	8005c48 <HAL_TIM_ConfigClockSource>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM9_Init+0x78>
    Error_Handler();
 80015c4:	f000 f990 	bl	80018e8 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80015c8:	4810      	ldr	r0, [pc, #64]	; (800160c <MX_TIM9_Init+0xbc>)
 80015ca:	f003 ff1e 	bl	800540a <HAL_TIM_PWM_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM9_Init+0x88>
    Error_Handler();
 80015d4:	f000 f988 	bl	80018e8 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d8:	2360      	movs	r3, #96	; 0x60
 80015da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	4807      	ldr	r0, [pc, #28]	; (800160c <MX_TIM9_Init+0xbc>)
 80015f0:	f004 fa68 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM9_Init+0xae>
    Error_Handler();
 80015fa:	f000 f975 	bl	80018e8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim9);
 80015fe:	4803      	ldr	r0, [pc, #12]	; (800160c <MX_TIM9_Init+0xbc>)
 8001600:	f000 fc0e 	bl	8001e20 <HAL_TIM_MspPostInit>
}
 8001604:	bf00      	nop
 8001606:	3730      	adds	r7, #48	; 0x30
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200004e4 	.word	0x200004e4
 8001610:	40014000 	.word	0x40014000

08001614 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  htim13.Instance = TIM13;
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_TIM13_Init+0x40>)
 800161a:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <MX_TIM13_Init+0x44>)
 800161c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 1;
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <MX_TIM13_Init+0x40>)
 8001620:	2201      	movs	r2, #1
 8001622:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_TIM13_Init+0x40>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 50000;
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <MX_TIM13_Init+0x40>)
 800162c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001630:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MX_TIM13_Init+0x40>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_TIM13_Init+0x40>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_TIM13_Init+0x40>)
 8001640:	f003 fd8c 	bl	800515c <HAL_TIM_Base_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM13_Init+0x3a>
    Error_Handler();
 800164a:	f000 f94d 	bl	80018e8 <Error_Handler>
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000052c 	.word	0x2000052c
 8001658:	40001c00 	.word	0x40001c00

0800165c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  htim14.Instance = TIM14;
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_TIM14_Init+0x40>)
 8001662:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <MX_TIM14_Init+0x44>)
 8001664:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1;
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <MX_TIM14_Init+0x40>)
 8001668:	2201      	movs	r2, #1
 800166a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_TIM14_Init+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50000;
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <MX_TIM14_Init+0x40>)
 8001674:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001678:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_TIM14_Init+0x40>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_TIM14_Init+0x40>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_TIM14_Init+0x40>)
 8001688:	f003 fd68 	bl	800515c <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001692:	f000 f929 	bl	80018e8 <Error_Handler>
  }
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000574 	.word	0x20000574
 80016a0:	40002000 	.word	0x40002000

080016a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_USART1_UART_Init+0x4c>)
 80016aa:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <MX_USART1_UART_Init+0x50>)
 80016ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <MX_USART1_UART_Init+0x4c>)
 80016b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_USART1_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_USART1_UART_Init+0x4c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <MX_USART1_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_USART1_UART_Init+0x4c>)
 80016ca:	220c      	movs	r2, #12
 80016cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <MX_USART1_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_USART1_UART_Init+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_USART1_UART_Init+0x4c>)
 80016dc:	f004 ff44 	bl	8006568 <HAL_UART_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016e6:	f000 f8ff 	bl	80018e8 <Error_Handler>
  }
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200005bc 	.word	0x200005bc
 80016f4:	40011000 	.word	0x40011000

080016f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_DMA_Init+0x3c>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <MX_DMA_Init+0x3c>)
 8001708:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_DMA_Init+0x3c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	2038      	movs	r0, #56	; 0x38
 8001720:	f001 fdc5 	bl	80032ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001724:	2038      	movs	r0, #56	; 0x38
 8001726:	f001 fdde 	bl	80032e6 <HAL_NVIC_EnableIRQ>

}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800

08001738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	4b60      	ldr	r3, [pc, #384]	; (80018d4 <MX_GPIO_Init+0x19c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a5f      	ldr	r2, [pc, #380]	; (80018d4 <MX_GPIO_Init+0x19c>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b5d      	ldr	r3, [pc, #372]	; (80018d4 <MX_GPIO_Init+0x19c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b59      	ldr	r3, [pc, #356]	; (80018d4 <MX_GPIO_Init+0x19c>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a58      	ldr	r2, [pc, #352]	; (80018d4 <MX_GPIO_Init+0x19c>)
 8001774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b56      	ldr	r3, [pc, #344]	; (80018d4 <MX_GPIO_Init+0x19c>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	4b52      	ldr	r3, [pc, #328]	; (80018d4 <MX_GPIO_Init+0x19c>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a51      	ldr	r2, [pc, #324]	; (80018d4 <MX_GPIO_Init+0x19c>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b4f      	ldr	r3, [pc, #316]	; (80018d4 <MX_GPIO_Init+0x19c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	4b4b      	ldr	r3, [pc, #300]	; (80018d4 <MX_GPIO_Init+0x19c>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a4a      	ldr	r2, [pc, #296]	; (80018d4 <MX_GPIO_Init+0x19c>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b48      	ldr	r3, [pc, #288]	; (80018d4 <MX_GPIO_Init+0x19c>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	4b44      	ldr	r3, [pc, #272]	; (80018d4 <MX_GPIO_Init+0x19c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a43      	ldr	r2, [pc, #268]	; (80018d4 <MX_GPIO_Init+0x19c>)
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <MX_GPIO_Init+0x19c>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED10_Pin|RF_EMITTER_Pin|D_C_Pin|DIAGONAL_EMITTER_Pin
 80017da:	2200      	movs	r2, #0
 80017dc:	f641 51e7 	movw	r1, #7655	; 0x1de7
 80017e0:	483d      	ldr	r0, [pc, #244]	; (80018d8 <MX_GPIO_Init+0x1a0>)
 80017e2:	f002 fa21 	bl	8003c28 <HAL_GPIO_WritePin>
                          |CE_Pin|LF_EMITTER_Pin|CS_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED11_Pin|LED9_Pin|LED8_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	f641 0110 	movw	r1, #6160	; 0x1810
 80017ec:	483b      	ldr	r0, [pc, #236]	; (80018dc <MX_GPIO_Init+0x1a4>)
 80017ee:	f002 fa1b 	bl	8003c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED7_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80017f8:	4839      	ldr	r0, [pc, #228]	; (80018e0 <MX_GPIO_Init+0x1a8>)
 80017fa:	f002 fa15 	bl	8003c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	2104      	movs	r1, #4
 8001802:	4838      	ldr	r0, [pc, #224]	; (80018e4 <MX_GPIO_Init+0x1ac>)
 8001804:	f002 fa10 	bl	8003c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TB1_Pin */
  GPIO_InitStruct.Pin = TB1_Pin;
 8001808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800180c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TB1_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	482e      	ldr	r0, [pc, #184]	; (80018d8 <MX_GPIO_Init+0x1a0>)
 800181e:	f002 f867 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED10_Pin RF_EMITTER_Pin D_C_Pin DIAGONAL_EMITTER_Pin
                           CE_Pin LF_EMITTER_Pin CS_Pin LED3_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED10_Pin|RF_EMITTER_Pin|D_C_Pin|DIAGONAL_EMITTER_Pin
 8001822:	f641 53e7 	movw	r3, #7655	; 0x1de7
 8001826:	617b      	str	r3, [r7, #20]
                          |CE_Pin|LF_EMITTER_Pin|CS_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	4827      	ldr	r0, [pc, #156]	; (80018d8 <MX_GPIO_Init+0x1a0>)
 800183c:	f002 f858 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin;
 8001840:	2308      	movs	r3, #8
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRDY_GPIO_Port, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	4823      	ldr	r0, [pc, #140]	; (80018e0 <MX_GPIO_Init+0x1a8>)
 8001854:	f002 f84c 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 INT_Pin MISO_Pin BOOT0_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|INT_Pin|MISO_Pin|BOOT0_Pin;
 8001858:	f244 4324 	movw	r3, #17444	; 0x4424
 800185c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	481b      	ldr	r0, [pc, #108]	; (80018dc <MX_GPIO_Init+0x1a4>)
 800186e:	f002 f83f 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED11_Pin LED9_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED11_Pin|LED9_Pin|LED8_Pin;
 8001872:	f641 0310 	movw	r3, #6160	; 0x1810
 8001876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001878:	2301      	movs	r3, #1
 800187a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4814      	ldr	r0, [pc, #80]	; (80018dc <MX_GPIO_Init+0x1a4>)
 800188c:	f002 f830 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED7_Pin|LED1_Pin|LED2_Pin;
 8001890:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	2301      	movs	r3, #1
 8001898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	480d      	ldr	r0, [pc, #52]	; (80018e0 <MX_GPIO_Init+0x1a8>)
 80018aa:	f002 f821 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 80018ae:	2304      	movs	r3, #4
 80018b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	4807      	ldr	r0, [pc, #28]	; (80018e4 <MX_GPIO_Init+0x1ac>)
 80018c6:	f002 f813 	bl	80038f0 <HAL_GPIO_Init>
}
 80018ca:	bf00      	nop
 80018cc:	3728      	adds	r7, #40	; 0x28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020800 	.word	0x40020800
 80018dc:	40020400 	.word	0x40020400
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020c00 	.word	0x40020c00

080018e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ec:	b672      	cpsid	i
}
 80018ee:	bf00      	nop
  __disable_irq();
  while (1);
 80018f0:	e7fe      	b.n	80018f0 <Error_Handler+0x8>
	...

080018f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_MspInit+0x4c>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <HAL_MspInit+0x4c>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_MspInit+0x4c>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_MspInit+0x4c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a08      	ldr	r2, [pc, #32]	; (8001940 <HAL_MspInit+0x4c>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_MspInit+0x4c>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800

08001944 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08c      	sub	sp, #48	; 0x30
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a49      	ldr	r2, [pc, #292]	; (8001a88 <HAL_ADC_MspInit+0x144>)
 8001962:	4293      	cmp	r3, r2
 8001964:	f040 808b 	bne.w	8001a7e <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
 800196c:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 800196e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001970:	4a46      	ldr	r2, [pc, #280]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001976:	6453      	str	r3, [r2, #68]	; 0x44
 8001978:	4b44      	ldr	r3, [pc, #272]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 800197a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	4b40      	ldr	r3, [pc, #256]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	4a3f      	ldr	r2, [pc, #252]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	6313      	str	r3, [r2, #48]	; 0x30
 8001994:	4b3d      	ldr	r3, [pc, #244]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	4b39      	ldr	r3, [pc, #228]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	4a38      	ldr	r2, [pc, #224]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6313      	str	r3, [r2, #48]	; 0x30
 80019b0:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	4b32      	ldr	r3, [pc, #200]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	4a31      	ldr	r2, [pc, #196]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 80019c6:	f043 0302 	orr.w	r3, r3, #2
 80019ca:	6313      	str	r3, [r2, #48]	; 0x30
 80019cc:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <HAL_ADC_MspInit+0x148>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VOL_METER_Pin|R_RECEIVER_Pin;
 80019d8:	2318      	movs	r3, #24
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019dc:	2303      	movs	r3, #3
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	4829      	ldr	r0, [pc, #164]	; (8001a90 <HAL_ADC_MspInit+0x14c>)
 80019ec:	f001 ff80 	bl	80038f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_RECEIVER_Pin;
 80019f0:	2310      	movs	r3, #16
 80019f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f4:	2303      	movs	r3, #3
 80019f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RF_RECEIVER_GPIO_Port, &GPIO_InitStruct);
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	4619      	mov	r1, r3
 8001a02:	4824      	ldr	r0, [pc, #144]	; (8001a94 <HAL_ADC_MspInit+0x150>)
 8001a04:	f001 ff74 	bl	80038f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L_RECEIVER_Pin|LF_RECEIVER_Pin;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	481f      	ldr	r0, [pc, #124]	; (8001a98 <HAL_ADC_MspInit+0x154>)
 8001a1c:	f001 ff68 	bl	80038f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a22:	4a1f      	ldr	r2, [pc, #124]	; (8001aa0 <HAL_ADC_MspInit+0x15c>)
 8001a24:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a4e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a62:	480e      	ldr	r0, [pc, #56]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a64:	f001 fc5a 	bl	800331c <HAL_DMA_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8001a6e:	f7ff ff3b 	bl	80018e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a76:	639a      	str	r2, [r3, #56]	; 0x38
 8001a78:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <HAL_ADC_MspInit+0x158>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a7e:	bf00      	nop
 8001a80:	3730      	adds	r7, #48	; 0x30
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40012000 	.word	0x40012000
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020800 	.word	0x40020800
 8001a94:	40020000 	.word	0x40020000
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	2000026c 	.word	0x2000026c
 8001aa0:	40026410 	.word	0x40026410

08001aa4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08c      	sub	sp, #48	; 0x30
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 031c 	add.w	r3, r7, #28
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a32      	ldr	r2, [pc, #200]	; (8001b8c <HAL_SPI_MspInit+0xe8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d12c      	bne.n	8001b20 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	4a30      	ldr	r2, [pc, #192]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001ad0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad6:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ade:	61bb      	str	r3, [r7, #24]
 8001ae0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a29      	ldr	r2, [pc, #164]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDI_Pin;
 8001afe:	23e0      	movs	r3, #224	; 0xe0
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b0e:	2305      	movs	r3, #5
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	481e      	ldr	r0, [pc, #120]	; (8001b94 <HAL_SPI_MspInit+0xf0>)
 8001b1a:	f001 fee9 	bl	80038f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b1e:	e031      	b.n	8001b84 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1c      	ldr	r2, [pc, #112]	; (8001b98 <HAL_SPI_MspInit+0xf4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d12c      	bne.n	8001b84 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a17      	ldr	r2, [pc, #92]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CLK_Pin|DATA_IN_Pin;
 8001b62:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b74:	2305      	movs	r3, #5
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4807      	ldr	r0, [pc, #28]	; (8001b9c <HAL_SPI_MspInit+0xf8>)
 8001b80:	f001 feb6 	bl	80038f0 <HAL_GPIO_Init>
}
 8001b84:	bf00      	nop
 8001b86:	3730      	adds	r7, #48	; 0x30
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40013000 	.word	0x40013000
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40003800 	.word	0x40003800
 8001b9c:	40020400 	.word	0x40020400

08001ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a48      	ldr	r2, [pc, #288]	; (8001cd0 <HAL_TIM_Base_MspInit+0x130>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d10e      	bne.n	8001bd0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a46      	ldr	r2, [pc, #280]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc2:	4b44      	ldr	r3, [pc, #272]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	61fb      	str	r3, [r7, #28]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001bce:	e07a      	b.n	8001cc6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM4)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a40      	ldr	r2, [pc, #256]	; (8001cd8 <HAL_TIM_Base_MspInit+0x138>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d10e      	bne.n	8001bf8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a3c      	ldr	r2, [pc, #240]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	61bb      	str	r3, [r7, #24]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
}
 8001bf6:	e066      	b.n	8001cc6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM6)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a37      	ldr	r2, [pc, #220]	; (8001cdc <HAL_TIM_Base_MspInit+0x13c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d116      	bne.n	8001c30 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	4b33      	ldr	r3, [pc, #204]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a32      	ldr	r2, [pc, #200]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c0c:	f043 0310 	orr.w	r3, r3, #16
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
 8001c12:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	2036      	movs	r0, #54	; 0x36
 8001c24:	f001 fb43 	bl	80032ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c28:	2036      	movs	r0, #54	; 0x36
 8001c2a:	f001 fb5c 	bl	80032e6 <HAL_NVIC_EnableIRQ>
}
 8001c2e:	e04a      	b.n	8001cc6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM9)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a2a      	ldr	r2, [pc, #168]	; (8001ce0 <HAL_TIM_Base_MspInit+0x140>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d10e      	bne.n	8001c58 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a24      	ldr	r2, [pc, #144]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
}
 8001c56:	e036      	b.n	8001cc6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM13)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a21      	ldr	r2, [pc, #132]	; (8001ce4 <HAL_TIM_Base_MspInit+0x144>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d116      	bne.n	8001c90 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a1a      	ldr	r2, [pc, #104]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	202c      	movs	r0, #44	; 0x2c
 8001c84:	f001 fb13 	bl	80032ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001c88:	202c      	movs	r0, #44	; 0x2c
 8001c8a:	f001 fb2c 	bl	80032e6 <HAL_NVIC_EnableIRQ>
}
 8001c8e:	e01a      	b.n	8001cc6 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM14)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <HAL_TIM_Base_MspInit+0x148>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d115      	bne.n	8001cc6 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	4a0c      	ldr	r2, [pc, #48]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_TIM_Base_MspInit+0x134>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	202d      	movs	r0, #45	; 0x2d
 8001cbc:	f001 faf7 	bl	80032ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001cc0:	202d      	movs	r0, #45	; 0x2d
 8001cc2:	f001 fb10 	bl	80032e6 <HAL_NVIC_EnableIRQ>
}
 8001cc6:	bf00      	nop
 8001cc8:	3720      	adds	r7, #32
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40000800 	.word	0x40000800
 8001cdc:	40001000 	.word	0x40001000
 8001ce0:	40014000 	.word	0x40014000
 8001ce4:	40001c00 	.word	0x40001c00
 8001ce8:	40002000 	.word	0x40002000

08001cec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08c      	sub	sp, #48	; 0x30
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d0c:	d14b      	bne.n	8001da6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	4b3f      	ldr	r3, [pc, #252]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a3e      	ldr	r2, [pc, #248]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b3c      	ldr	r3, [pc, #240]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	61bb      	str	r3, [r7, #24]
 8001d28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	4b38      	ldr	r3, [pc, #224]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a37      	ldr	r2, [pc, #220]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b35      	ldr	r3, [pc, #212]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a30      	ldr	r2, [pc, #192]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d74:	2301      	movs	r3, #1
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4825      	ldr	r0, [pc, #148]	; (8001e14 <HAL_TIM_Encoder_MspInit+0x128>)
 8001d80:	f001 fdb6 	bl	80038f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d84:	2308      	movs	r3, #8
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d94:	2301      	movs	r3, #1
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	481e      	ldr	r0, [pc, #120]	; (8001e18 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001da0:	f001 fda6 	bl	80038f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001da4:	e030      	b.n	8001e08 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM5)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a1c      	ldr	r2, [pc, #112]	; (8001e1c <HAL_TIM_Encoder_MspInit+0x130>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d12b      	bne.n	8001e08 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	4a15      	ldr	r2, [pc, #84]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dba:	f043 0308 	orr.w	r3, r3, #8
 8001dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6313      	str	r3, [r2, #48]	; 0x30
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001de8:	2303      	movs	r3, #3
 8001dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	4619      	mov	r1, r3
 8001e02:	4804      	ldr	r0, [pc, #16]	; (8001e14 <HAL_TIM_Encoder_MspInit+0x128>)
 8001e04:	f001 fd74 	bl	80038f0 <HAL_GPIO_Init>
}
 8001e08:	bf00      	nop
 8001e0a:	3730      	adds	r7, #48	; 0x30
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020000 	.word	0x40020000
 8001e18:	40020400 	.word	0x40020400
 8001e1c:	40000c00 	.word	0x40000c00

08001e20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a24      	ldr	r2, [pc, #144]	; (8001ed0 <HAL_TIM_MspPostInit+0xb0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d11f      	bne.n	8001e82 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <HAL_TIM_MspPostInit+0xb4>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a22      	ldr	r2, [pc, #136]	; (8001ed4 <HAL_TIM_MspPostInit+0xb4>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <HAL_TIM_MspPostInit+0xb4>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = LPWMA_Pin|LPWMB_Pin|RPWMA_Pin|RPWMB_Pin;
 8001e5e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e70:	2302      	movs	r3, #2
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4817      	ldr	r0, [pc, #92]	; (8001ed8 <HAL_TIM_MspPostInit+0xb8>)
 8001e7c:	f001 fd38 	bl	80038f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001e80:	e022      	b.n	8001ec8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a15      	ldr	r2, [pc, #84]	; (8001edc <HAL_TIM_MspPostInit+0xbc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d11d      	bne.n	8001ec8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_TIM_MspPostInit+0xb4>)
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <HAL_TIM_MspPostInit+0xb4>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_TIM_MspPostInit+0xb4>)
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ea8:	2304      	movs	r3, #4
 8001eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <HAL_TIM_MspPostInit+0xc0>)
 8001ec4:	f001 fd14 	bl	80038f0 <HAL_GPIO_Init>
}
 8001ec8:	bf00      	nop
 8001eca:	3728      	adds	r7, #40	; 0x28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40000800 	.word	0x40000800
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020400 	.word	0x40020400
 8001edc:	40014000 	.word	0x40014000
 8001ee0:	40020000 	.word	0x40020000

08001ee4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <HAL_UART_MspInit+0x84>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d12c      	bne.n	8001f60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <HAL_UART_MspInit+0x88>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <HAL_UART_MspInit+0x88>)
 8001f10:	f043 0310 	orr.w	r3, r3, #16
 8001f14:	6453      	str	r3, [r2, #68]	; 0x44
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_UART_MspInit+0x88>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_UART_MspInit+0x88>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <HAL_UART_MspInit+0x88>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <HAL_UART_MspInit+0x88>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001f3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f50:	2307      	movs	r3, #7
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <HAL_UART_MspInit+0x8c>)
 8001f5c:	f001 fcc8 	bl	80038f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f60:	bf00      	nop
 8001f62:	3728      	adds	r7, #40	; 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40011000 	.word	0x40011000
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020000 	.word	0x40020000

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001f78:	f002 fb2c 	bl	80045d4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <NMI_Handler+0x8>

08001f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <HardFault_Handler+0x4>

08001f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <MemManage_Handler+0x4>

08001f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8e:	e7fe      	b.n	8001f8e <BusFault_Handler+0x4>

08001f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <UsageFault_Handler+0x4>

08001f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc4:	f000 fc54 	bl	8002870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001fd0:	4802      	ldr	r0, [pc, #8]	; (8001fdc <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001fd2:	f003 fc6f 	bl	80058b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	2000052c 	.word	0x2000052c

08001fe0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001fe4:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001fe6:	f003 fc65 	bl	80058b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000574 	.word	0x20000574

08001ff4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <TIM6_DAC_IRQHandler+0x10>)
 8001ffa:	f003 fc5b 	bl	80058b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	2000049c 	.word	0x2000049c

08002008 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <DMA2_Stream0_IRQHandler+0x10>)
 800200e:	f001 fa33 	bl	8003478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	2000026c 	.word	0x2000026c

0800201c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return 1;
 8002020:	2301      	movs	r3, #1
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <_kill>:

int _kill(int pid, int sig)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002036:	f007 fcb9 	bl	80099ac <__errno>
 800203a:	4603      	mov	r3, r0
 800203c:	2216      	movs	r2, #22
 800203e:	601a      	str	r2, [r3, #0]
  return -1;
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <_exit>:

void _exit (int status)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ffe7 	bl	800202c <_kill>
  while (1) {}    /* Make sure we hang here */
 800205e:	e7fe      	b.n	800205e <_exit+0x12>

08002060 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	e00a      	b.n	8002088 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002072:	f3af 8000 	nop.w
 8002076:	4601      	mov	r1, r0
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	60ba      	str	r2, [r7, #8]
 800207e:	b2ca      	uxtb	r2, r1
 8002080:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3301      	adds	r3, #1
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	429a      	cmp	r2, r3
 800208e:	dbf0      	blt.n	8002072 <_read+0x12>
  }

  return len;
 8002090:	687b      	ldr	r3, [r7, #4]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	e009      	b.n	80020c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	60ba      	str	r2, [r7, #8]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3301      	adds	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	dbf1      	blt.n	80020ac <_write+0x12>
  }
  return len;
 80020c8:	687b      	ldr	r3, [r7, #4]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <_close>:

int _close(int file)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020fa:	605a      	str	r2, [r3, #4]
  return 0;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <_isatty>:

int _isatty(int file)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002112:	2301      	movs	r3, #1
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002144:	4a14      	ldr	r2, [pc, #80]	; (8002198 <_sbrk+0x5c>)
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <_sbrk+0x60>)
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <_sbrk+0x64>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d102      	bne.n	800215e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <_sbrk+0x64>)
 800215a:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <_sbrk+0x68>)
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <_sbrk+0x64>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	429a      	cmp	r2, r3
 800216a:	d207      	bcs.n	800217c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800216c:	f007 fc1e 	bl	80099ac <__errno>
 8002170:	4603      	mov	r3, r0
 8002172:	220c      	movs	r2, #12
 8002174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
 800217a:	e009      	b.n	8002190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <_sbrk+0x64>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <_sbrk+0x64>)
 800218c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800218e:	68fb      	ldr	r3, [r7, #12]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20020000 	.word	0x20020000
 800219c:	00000400 	.word	0x00000400
 80021a0:	20000600 	.word	0x20000600
 80021a4:	200009b0 	.word	0x200009b0

080021a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <SystemInit+0x20>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <SystemInit+0x20>)
 80021b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002204 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021d0:	480d      	ldr	r0, [pc, #52]	; (8002208 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021d2:	490e      	ldr	r1, [pc, #56]	; (800220c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021d4:	4a0e      	ldr	r2, [pc, #56]	; (8002210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d8:	e002      	b.n	80021e0 <LoopCopyDataInit>

080021da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021de:	3304      	adds	r3, #4

080021e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e4:	d3f9      	bcc.n	80021da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e6:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021e8:	4c0b      	ldr	r4, [pc, #44]	; (8002218 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ec:	e001      	b.n	80021f2 <LoopFillZerobss>

080021ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f0:	3204      	adds	r2, #4

080021f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f4:	d3fb      	bcc.n	80021ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021f6:	f7ff ffd7 	bl	80021a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021fa:	f007 fbdd 	bl	80099b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021fe:	f7fe fea1 	bl	8000f44 <main>
  bx  lr    
 8002202:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002204:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800220c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002210:	0800e99c 	.word	0x0800e99c
  ldr r2, =_sbss
 8002214:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002218:	200009b0 	.word	0x200009b0

0800221c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800221c:	e7fe      	b.n	800221c <ADC_IRQHandler>

0800221e <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 800221e:	b580      	push	{r7, lr}
 8002220:	af00      	add	r7, sp, #0
//
//    // Reset the OLED
//    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
//    HAL_Delay(10);
//    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
    HAL_Delay(10);
 8002222:	200a      	movs	r0, #10
 8002224:	f000 fb44 	bl	80028b0 <HAL_Delay>
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}

0800222c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002236:	2200      	movs	r2, #0
 8002238:	2140      	movs	r1, #64	; 0x40
 800223a:	480c      	ldr	r0, [pc, #48]	; (800226c <ssd1306_WriteCommand+0x40>)
 800223c:	f001 fcf4 	bl	8003c28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8002240:	2200      	movs	r2, #0
 8002242:	2104      	movs	r1, #4
 8002244:	4809      	ldr	r0, [pc, #36]	; (800226c <ssd1306_WriteCommand+0x40>)
 8002246:	f001 fcef 	bl	8003c28 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 800224a:	1df9      	adds	r1, r7, #7
 800224c:	f04f 33ff 	mov.w	r3, #4294967295
 8002250:	2201      	movs	r2, #1
 8002252:	4807      	ldr	r0, [pc, #28]	; (8002270 <ssd1306_WriteCommand+0x44>)
 8002254:	f002 fa62 	bl	800471c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8002258:	2201      	movs	r2, #1
 800225a:	2140      	movs	r1, #64	; 0x40
 800225c:	4803      	ldr	r0, [pc, #12]	; (800226c <ssd1306_WriteCommand+0x40>)
 800225e:	f001 fce3 	bl	8003c28 <HAL_GPIO_WritePin>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40020800 	.word	0x40020800
 8002270:	20000324 	.word	0x20000324

08002274 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800227e:	2200      	movs	r2, #0
 8002280:	2140      	movs	r1, #64	; 0x40
 8002282:	480c      	ldr	r0, [pc, #48]	; (80022b4 <ssd1306_WriteData+0x40>)
 8002284:	f001 fcd0 	bl	8003c28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8002288:	2201      	movs	r2, #1
 800228a:	2104      	movs	r1, #4
 800228c:	4809      	ldr	r0, [pc, #36]	; (80022b4 <ssd1306_WriteData+0x40>)
 800228e:	f001 fccb 	bl	8003c28 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	b29a      	uxth	r2, r3
 8002296:	f04f 33ff 	mov.w	r3, #4294967295
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4806      	ldr	r0, [pc, #24]	; (80022b8 <ssd1306_WriteData+0x44>)
 800229e:	f002 fa3d 	bl	800471c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80022a2:	2201      	movs	r2, #1
 80022a4:	2140      	movs	r1, #64	; 0x40
 80022a6:	4803      	ldr	r0, [pc, #12]	; (80022b4 <ssd1306_WriteData+0x40>)
 80022a8:	f001 fcbe 	bl	8003c28 <HAL_GPIO_WritePin>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40020800 	.word	0x40020800
 80022b8:	20000324 	.word	0x20000324

080022bc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80022c0:	f7ff ffad 	bl	800221e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80022c4:	2064      	movs	r0, #100	; 0x64
 80022c6:	f000 faf3 	bl	80028b0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80022ca:	2000      	movs	r0, #0
 80022cc:	f000 fa60 	bl	8002790 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80022d0:	2020      	movs	r0, #32
 80022d2:	f7ff ffab 	bl	800222c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80022d6:	2000      	movs	r0, #0
 80022d8:	f7ff ffa8 	bl	800222c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80022dc:	20b0      	movs	r0, #176	; 0xb0
 80022de:	f7ff ffa5 	bl	800222c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80022e2:	20c8      	movs	r0, #200	; 0xc8
 80022e4:	f7ff ffa2 	bl	800222c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7ff ff9f 	bl	800222c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80022ee:	2010      	movs	r0, #16
 80022f0:	f7ff ff9c 	bl	800222c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80022f4:	2040      	movs	r0, #64	; 0x40
 80022f6:	f7ff ff99 	bl	800222c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80022fa:	20ff      	movs	r0, #255	; 0xff
 80022fc:	f000 fa35 	bl	800276a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002300:	20a1      	movs	r0, #161	; 0xa1
 8002302:	f7ff ff93 	bl	800222c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002306:	20a6      	movs	r0, #166	; 0xa6
 8002308:	f7ff ff90 	bl	800222c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800230c:	20a8      	movs	r0, #168	; 0xa8
 800230e:	f7ff ff8d 	bl	800222c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8002312:	201f      	movs	r0, #31
 8002314:	f7ff ff8a 	bl	800222c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002318:	20a4      	movs	r0, #164	; 0xa4
 800231a:	f7ff ff87 	bl	800222c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800231e:	20d3      	movs	r0, #211	; 0xd3
 8002320:	f7ff ff84 	bl	800222c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002324:	2000      	movs	r0, #0
 8002326:	f7ff ff81 	bl	800222c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800232a:	20d5      	movs	r0, #213	; 0xd5
 800232c:	f7ff ff7e 	bl	800222c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002330:	20f0      	movs	r0, #240	; 0xf0
 8002332:	f7ff ff7b 	bl	800222c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002336:	20d9      	movs	r0, #217	; 0xd9
 8002338:	f7ff ff78 	bl	800222c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800233c:	2022      	movs	r0, #34	; 0x22
 800233e:	f7ff ff75 	bl	800222c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002342:	20da      	movs	r0, #218	; 0xda
 8002344:	f7ff ff72 	bl	800222c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8002348:	2002      	movs	r0, #2
 800234a:	f7ff ff6f 	bl	800222c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800234e:	20db      	movs	r0, #219	; 0xdb
 8002350:	f7ff ff6c 	bl	800222c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002354:	2020      	movs	r0, #32
 8002356:	f7ff ff69 	bl	800222c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800235a:	208d      	movs	r0, #141	; 0x8d
 800235c:	f7ff ff66 	bl	800222c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002360:	2014      	movs	r0, #20
 8002362:	f7ff ff63 	bl	800222c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002366:	2001      	movs	r0, #1
 8002368:	f000 fa12 	bl	8002790 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800236c:	2000      	movs	r0, #0
 800236e:	f000 f80f 	bl	8002390 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002372:	f000 f831 	bl	80023d8 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <ssd1306_Init+0xd0>)
 8002378:	2200      	movs	r2, #0
 800237a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <ssd1306_Init+0xd0>)
 800237e:	2200      	movs	r2, #0
 8002380:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8002382:	4b02      	ldr	r3, [pc, #8]	; (800238c <ssd1306_Init+0xd0>)
 8002384:	2201      	movs	r2, #1
 8002386:	711a      	strb	r2, [r3, #4]
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000804 	.word	0x20000804

08002390 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	e00d      	b.n	80023bc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <ssd1306_Fill+0x1a>
 80023a6:	2100      	movs	r1, #0
 80023a8:	e000      	b.n	80023ac <ssd1306_Fill+0x1c>
 80023aa:	21ff      	movs	r1, #255	; 0xff
 80023ac:	4a09      	ldr	r2, [pc, #36]	; (80023d4 <ssd1306_Fill+0x44>)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4413      	add	r3, r2
 80023b2:	460a      	mov	r2, r1
 80023b4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	3301      	adds	r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c2:	d3ed      	bcc.n	80023a0 <ssd1306_Fill+0x10>
    }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000604 	.word	0x20000604

080023d8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80023de:	2300      	movs	r3, #0
 80023e0:	71fb      	strb	r3, [r7, #7]
 80023e2:	e016      	b.n	8002412 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	3b50      	subs	r3, #80	; 0x50
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ff1e 	bl	800222c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7ff ff1b 	bl	800222c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80023f6:	2010      	movs	r0, #16
 80023f8:	f7ff ff18 	bl	800222c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	01db      	lsls	r3, r3, #7
 8002400:	4a08      	ldr	r2, [pc, #32]	; (8002424 <ssd1306_UpdateScreen+0x4c>)
 8002402:	4413      	add	r3, r2
 8002404:	2180      	movs	r1, #128	; 0x80
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ff34 	bl	8002274 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	3301      	adds	r3, #1
 8002410:	71fb      	strb	r3, [r7, #7]
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d9e5      	bls.n	80023e4 <ssd1306_UpdateScreen+0xc>
    }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000604 	.word	0x20000604

08002428 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
 8002432:	460b      	mov	r3, r1
 8002434:	71bb      	strb	r3, [r7, #6]
 8002436:	4613      	mov	r3, r2
 8002438:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	2b00      	cmp	r3, #0
 8002440:	db3d      	blt.n	80024be <ssd1306_DrawPixel+0x96>
 8002442:	79bb      	ldrb	r3, [r7, #6]
 8002444:	2b1f      	cmp	r3, #31
 8002446:	d83a      	bhi.n	80024be <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8002448:	797b      	ldrb	r3, [r7, #5]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d11a      	bne.n	8002484 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800244e:	79fa      	ldrb	r2, [r7, #7]
 8002450:	79bb      	ldrb	r3, [r7, #6]
 8002452:	08db      	lsrs	r3, r3, #3
 8002454:	b2d8      	uxtb	r0, r3
 8002456:	4603      	mov	r3, r0
 8002458:	01db      	lsls	r3, r3, #7
 800245a:	4413      	add	r3, r2
 800245c:	4a1b      	ldr	r2, [pc, #108]	; (80024cc <ssd1306_DrawPixel+0xa4>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	b25a      	sxtb	r2, r3
 8002462:	79bb      	ldrb	r3, [r7, #6]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	b25b      	sxtb	r3, r3
 8002470:	4313      	orrs	r3, r2
 8002472:	b259      	sxtb	r1, r3
 8002474:	79fa      	ldrb	r2, [r7, #7]
 8002476:	4603      	mov	r3, r0
 8002478:	01db      	lsls	r3, r3, #7
 800247a:	4413      	add	r3, r2
 800247c:	b2c9      	uxtb	r1, r1
 800247e:	4a13      	ldr	r2, [pc, #76]	; (80024cc <ssd1306_DrawPixel+0xa4>)
 8002480:	54d1      	strb	r1, [r2, r3]
 8002482:	e01d      	b.n	80024c0 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002484:	79fa      	ldrb	r2, [r7, #7]
 8002486:	79bb      	ldrb	r3, [r7, #6]
 8002488:	08db      	lsrs	r3, r3, #3
 800248a:	b2d8      	uxtb	r0, r3
 800248c:	4603      	mov	r3, r0
 800248e:	01db      	lsls	r3, r3, #7
 8002490:	4413      	add	r3, r2
 8002492:	4a0e      	ldr	r2, [pc, #56]	; (80024cc <ssd1306_DrawPixel+0xa4>)
 8002494:	5cd3      	ldrb	r3, [r2, r3]
 8002496:	b25a      	sxtb	r2, r3
 8002498:	79bb      	ldrb	r3, [r7, #6]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	2101      	movs	r1, #1
 80024a0:	fa01 f303 	lsl.w	r3, r1, r3
 80024a4:	b25b      	sxtb	r3, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	b25b      	sxtb	r3, r3
 80024aa:	4013      	ands	r3, r2
 80024ac:	b259      	sxtb	r1, r3
 80024ae:	79fa      	ldrb	r2, [r7, #7]
 80024b0:	4603      	mov	r3, r0
 80024b2:	01db      	lsls	r3, r3, #7
 80024b4:	4413      	add	r3, r2
 80024b6:	b2c9      	uxtb	r1, r1
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <ssd1306_DrawPixel+0xa4>)
 80024ba:	54d1      	strb	r1, [r2, r3]
 80024bc:	e000      	b.n	80024c0 <ssd1306_DrawPixel+0x98>
        return;
 80024be:	bf00      	nop
    }
}
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20000604 	.word	0x20000604

080024d0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4604      	mov	r4, r0
 80024d8:	1d38      	adds	r0, r7, #4
 80024da:	e880 0006 	stmia.w	r0, {r1, r2}
 80024de:	461a      	mov	r2, r3
 80024e0:	4623      	mov	r3, r4
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	4613      	mov	r3, r2
 80024e6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	2b1f      	cmp	r3, #31
 80024ec:	d902      	bls.n	80024f4 <ssd1306_WriteChar+0x24>
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	2b7e      	cmp	r3, #126	; 0x7e
 80024f2:	d901      	bls.n	80024f8 <ssd1306_WriteChar+0x28>
        return 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	e06d      	b.n	80025d4 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80024f8:	4b38      	ldr	r3, [pc, #224]	; (80025dc <ssd1306_WriteChar+0x10c>)
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	793b      	ldrb	r3, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	2b80      	cmp	r3, #128	; 0x80
 8002504:	dc06      	bgt.n	8002514 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002506:	4b35      	ldr	r3, [pc, #212]	; (80025dc <ssd1306_WriteChar+0x10c>)
 8002508:	885b      	ldrh	r3, [r3, #2]
 800250a:	461a      	mov	r2, r3
 800250c:	797b      	ldrb	r3, [r7, #5]
 800250e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002510:	2b20      	cmp	r3, #32
 8002512:	dd01      	ble.n	8002518 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002514:	2300      	movs	r3, #0
 8002516:	e05d      	b.n	80025d4 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	e04c      	b.n	80025b8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	3b20      	subs	r3, #32
 8002524:	7979      	ldrb	r1, [r7, #5]
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4619      	mov	r1, r3
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	440b      	add	r3, r1
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	e034      	b.n	80025a8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d012      	beq.n	8002574 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800254e:	4b23      	ldr	r3, [pc, #140]	; (80025dc <ssd1306_WriteChar+0x10c>)
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	4413      	add	r3, r2
 800255a:	b2d8      	uxtb	r0, r3
 800255c:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <ssd1306_WriteChar+0x10c>)
 800255e:	885b      	ldrh	r3, [r3, #2]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	4413      	add	r3, r2
 8002568:	b2db      	uxtb	r3, r3
 800256a:	7bba      	ldrb	r2, [r7, #14]
 800256c:	4619      	mov	r1, r3
 800256e:	f7ff ff5b 	bl	8002428 <ssd1306_DrawPixel>
 8002572:	e016      	b.n	80025a2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002574:	4b19      	ldr	r3, [pc, #100]	; (80025dc <ssd1306_WriteChar+0x10c>)
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	4413      	add	r3, r2
 8002580:	b2d8      	uxtb	r0, r3
 8002582:	4b16      	ldr	r3, [pc, #88]	; (80025dc <ssd1306_WriteChar+0x10c>)
 8002584:	885b      	ldrh	r3, [r3, #2]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	4413      	add	r3, r2
 800258e:	b2d9      	uxtb	r1, r3
 8002590:	7bbb      	ldrb	r3, [r7, #14]
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	f7ff ff43 	bl	8002428 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	3301      	adds	r3, #1
 80025a6:	61bb      	str	r3, [r7, #24]
 80025a8:	793b      	ldrb	r3, [r7, #4]
 80025aa:	461a      	mov	r2, r3
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d3c5      	bcc.n	800253e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3301      	adds	r3, #1
 80025b6:	61fb      	str	r3, [r7, #28]
 80025b8:	797b      	ldrb	r3, [r7, #5]
 80025ba:	461a      	mov	r2, r3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	4293      	cmp	r3, r2
 80025c0:	d3ad      	bcc.n	800251e <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <ssd1306_WriteChar+0x10c>)
 80025c4:	881a      	ldrh	r2, [r3, #0]
 80025c6:	793b      	ldrb	r3, [r7, #4]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	4b03      	ldr	r3, [pc, #12]	; (80025dc <ssd1306_WriteChar+0x10c>)
 80025d0:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3724      	adds	r7, #36	; 0x24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd90      	pop	{r4, r7, pc}
 80025dc:	20000804 	.word	0x20000804

080025e0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	1d38      	adds	r0, r7, #4
 80025ea:	e880 0006 	stmia.w	r0, {r1, r2}
 80025ee:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80025f0:	e012      	b.n	8002618 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	7818      	ldrb	r0, [r3, #0]
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	1d3a      	adds	r2, r7, #4
 80025fa:	ca06      	ldmia	r2, {r1, r2}
 80025fc:	f7ff ff68 	bl	80024d0 <ssd1306_WriteChar>
 8002600:	4603      	mov	r3, r0
 8002602:	461a      	mov	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d002      	beq.n	8002612 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	e008      	b.n	8002624 <ssd1306_WriteString+0x44>
        }
        str++;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3301      	adds	r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1e8      	bne.n	80025f2 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	781b      	ldrb	r3, [r3, #0]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	460a      	mov	r2, r1
 8002636:	71fb      	strb	r3, [r7, #7]
 8002638:	4613      	mov	r3, r2
 800263a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	b29a      	uxth	r2, r3
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <ssd1306_SetCursor+0x2c>)
 8002642:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002644:	79bb      	ldrb	r3, [r7, #6]
 8002646:	b29a      	uxth	r2, r3
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <ssd1306_SetCursor+0x2c>)
 800264a:	805a      	strh	r2, [r3, #2]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	20000804 	.word	0x20000804

0800265c <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	4604      	mov	r4, r0
 8002664:	4608      	mov	r0, r1
 8002666:	4611      	mov	r1, r2
 8002668:	461a      	mov	r2, r3
 800266a:	4623      	mov	r3, r4
 800266c:	71fb      	strb	r3, [r7, #7]
 800266e:	4603      	mov	r3, r0
 8002670:	71bb      	strb	r3, [r7, #6]
 8002672:	460b      	mov	r3, r1
 8002674:	717b      	strb	r3, [r7, #5]
 8002676:	4613      	mov	r3, r2
 8002678:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 800267a:	797b      	ldrb	r3, [r7, #5]
 800267c:	425b      	negs	r3, r3
 800267e:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8002684:	797b      	ldrb	r3, [r7, #5]
 8002686:	f1c3 0301 	rsb	r3, r3, #1
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	2b00      	cmp	r3, #0
 8002694:	db65      	blt.n	8002762 <ssd1306_DrawCircle+0x106>
 8002696:	79bb      	ldrb	r3, [r7, #6]
 8002698:	2b1f      	cmp	r3, #31
 800269a:	d862      	bhi.n	8002762 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	79fa      	ldrb	r2, [r7, #7]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	b2d8      	uxtb	r0, r3
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	79bb      	ldrb	r3, [r7, #6]
 80026ac:	4413      	add	r3, r2
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	793a      	ldrb	r2, [r7, #4]
 80026b2:	4619      	mov	r1, r3
 80026b4:	f7ff feb8 	bl	8002428 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	4413      	add	r3, r2
 80026c0:	b2d8      	uxtb	r0, r3
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	79bb      	ldrb	r3, [r7, #6]
 80026c8:	4413      	add	r3, r2
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	793a      	ldrb	r2, [r7, #4]
 80026ce:	4619      	mov	r1, r3
 80026d0:	f7ff feaa 	bl	8002428 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	4413      	add	r3, r2
 80026dc:	b2d8      	uxtb	r0, r3
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	79ba      	ldrb	r2, [r7, #6]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	793a      	ldrb	r2, [r7, #4]
 80026ea:	4619      	mov	r1, r3
 80026ec:	f7ff fe9c 	bl	8002428 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	79fa      	ldrb	r2, [r7, #7]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	b2d8      	uxtb	r0, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	79ba      	ldrb	r2, [r7, #6]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	793a      	ldrb	r2, [r7, #4]
 8002706:	4619      	mov	r1, r3
 8002708:	f7ff fe8e 	bl	8002428 <ssd1306_DrawPixel>
        e2 = err;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	429a      	cmp	r2, r3
 8002716:	dc13      	bgt.n	8002740 <ssd1306_DrawCircle+0xe4>
            y++;
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	3301      	adds	r3, #1
 800271c:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	3301      	adds	r3, #1
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4413      	add	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	425b      	negs	r3, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	429a      	cmp	r2, r3
 8002732:	d105      	bne.n	8002740 <ssd1306_DrawCircle+0xe4>
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	429a      	cmp	r2, r3
 800273a:	dc01      	bgt.n	8002740 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	429a      	cmp	r2, r3
 8002746:	dd08      	ble.n	800275a <ssd1306_DrawCircle+0xfe>
            x++;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	3301      	adds	r3, #1
 800274c:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	3301      	adds	r3, #1
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4413      	add	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	dd9d      	ble.n	800269c <ssd1306_DrawCircle+0x40>

    return;
 8002760:	e000      	b.n	8002764 <ssd1306_DrawCircle+0x108>
        return;
 8002762:	bf00      	nop
}
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	bd90      	pop	{r4, r7, pc}

0800276a <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002774:	2381      	movs	r3, #129	; 0x81
 8002776:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fd56 	bl	800222c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fd52 	bl	800222c <ssd1306_WriteCommand>
}
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80027a0:	23af      	movs	r3, #175	; 0xaf
 80027a2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <ssd1306_SetDisplayOn+0x38>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	715a      	strb	r2, [r3, #5]
 80027aa:	e004      	b.n	80027b6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80027ac:	23ae      	movs	r3, #174	; 0xae
 80027ae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <ssd1306_SetDisplayOn+0x38>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fd37 	bl	800222c <ssd1306_WriteCommand>
}
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000804 	.word	0x20000804

080027cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_Init+0x40>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0d      	ldr	r2, [pc, #52]	; (800280c <HAL_Init+0x40>)
 80027d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_Init+0x40>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0a      	ldr	r2, [pc, #40]	; (800280c <HAL_Init+0x40>)
 80027e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <HAL_Init+0x40>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a07      	ldr	r2, [pc, #28]	; (800280c <HAL_Init+0x40>)
 80027ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f4:	2003      	movs	r0, #3
 80027f6:	f000 fd4f 	bl	8003298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027fa:	200f      	movs	r0, #15
 80027fc:	f000 f808 	bl	8002810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002800:	f7ff f878 	bl	80018f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40023c00 	.word	0x40023c00

08002810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_InitTick+0x54>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_InitTick+0x58>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	4619      	mov	r1, r3
 8002822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002826:	fbb3 f3f1 	udiv	r3, r3, r1
 800282a:	fbb2 f3f3 	udiv	r3, r2, r3
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fd67 	bl	8003302 <HAL_SYSTICK_Config>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e00e      	b.n	800285c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b0f      	cmp	r3, #15
 8002842:	d80a      	bhi.n	800285a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002844:	2200      	movs	r2, #0
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	f04f 30ff 	mov.w	r0, #4294967295
 800284c:	f000 fd2f 	bl	80032ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002850:	4a06      	ldr	r2, [pc, #24]	; (800286c <HAL_InitTick+0x5c>)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e000      	b.n	800285c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20000000 	.word	0x20000000
 8002868:	20000028 	.word	0x20000028
 800286c:	20000024 	.word	0x20000024

08002870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_IncTick+0x20>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_IncTick+0x24>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4413      	add	r3, r2
 8002880:	4a04      	ldr	r2, [pc, #16]	; (8002894 <HAL_IncTick+0x24>)
 8002882:	6013      	str	r3, [r2, #0]
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	20000028 	.word	0x20000028
 8002894:	2000080c 	.word	0x2000080c

08002898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return uwTick;
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <HAL_GetTick+0x14>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	2000080c 	.word	0x2000080c

080028b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028b8:	f7ff ffee 	bl	8002898 <HAL_GetTick>
 80028bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c8:	d005      	beq.n	80028d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <HAL_Delay+0x44>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028d6:	bf00      	nop
 80028d8:	f7ff ffde 	bl	8002898 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d8f7      	bhi.n	80028d8 <HAL_Delay+0x28>
  {
  }
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000028 	.word	0x20000028

080028f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e033      	b.n	8002976 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	2b00      	cmp	r3, #0
 8002914:	d109      	bne.n	800292a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff f814 	bl	8001944 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b00      	cmp	r3, #0
 8002934:	d118      	bne.n	8002968 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800293e:	f023 0302 	bic.w	r3, r3, #2
 8002942:	f043 0202 	orr.w	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fad8 	bl	8002f00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f023 0303 	bic.w	r3, r3, #3
 800295e:	f043 0201 	orr.w	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
 8002966:	e001      	b.n	800296c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002974:	7bfb      	ldrb	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_ADC_Start+0x1a>
 8002996:	2302      	movs	r3, #2
 8002998:	e0b2      	b.n	8002b00 <HAL_ADC_Start+0x180>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d018      	beq.n	80029e2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029c0:	4b52      	ldr	r3, [pc, #328]	; (8002b0c <HAL_ADC_Start+0x18c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a52      	ldr	r2, [pc, #328]	; (8002b10 <HAL_ADC_Start+0x190>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	0c9a      	lsrs	r2, r3, #18
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80029d4:	e002      	b.n	80029dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	3b01      	subs	r3, #1
 80029da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f9      	bne.n	80029d6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d17a      	bne.n	8002ae6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d007      	beq.n	8002a22 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a2e:	d106      	bne.n	8002a3e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	f023 0206 	bic.w	r2, r3, #6
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	645a      	str	r2, [r3, #68]	; 0x44
 8002a3c:	e002      	b.n	8002a44 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a4c:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <HAL_ADC_Start+0x194>)
 8002a4e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a58:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d12a      	bne.n	8002abc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a2b      	ldr	r2, [pc, #172]	; (8002b18 <HAL_ADC_Start+0x198>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d015      	beq.n	8002a9c <HAL_ADC_Start+0x11c>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a29      	ldr	r2, [pc, #164]	; (8002b1c <HAL_ADC_Start+0x19c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d105      	bne.n	8002a86 <HAL_ADC_Start+0x106>
 8002a7a:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <HAL_ADC_Start+0x194>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a25      	ldr	r2, [pc, #148]	; (8002b20 <HAL_ADC_Start+0x1a0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d136      	bne.n	8002afe <HAL_ADC_Start+0x17e>
 8002a90:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <HAL_ADC_Start+0x194>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d130      	bne.n	8002afe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d129      	bne.n	8002afe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ab8:	609a      	str	r2, [r3, #8]
 8002aba:	e020      	b.n	8002afe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <HAL_ADC_Start+0x198>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d11b      	bne.n	8002afe <HAL_ADC_Start+0x17e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d114      	bne.n	8002afe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	e00b      	b.n	8002afe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f043 0210 	orr.w	r2, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	431bde83 	.word	0x431bde83
 8002b14:	40012300 	.word	0x40012300
 8002b18:	40012000 	.word	0x40012000
 8002b1c:	40012100 	.word	0x40012100
 8002b20:	40012200 	.word	0x40012200

08002b24 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_ADC_Stop+0x16>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e021      	b.n	8002b7e <HAL_ADC_Stop+0x5a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0201 	bic.w	r2, r2, #1
 8002b50:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	f043 0201 	orr.w	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba6:	d113      	bne.n	8002bd0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb6:	d10b      	bne.n	8002bd0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	f043 0220 	orr.w	r2, r3, #32
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e063      	b.n	8002c98 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002bd0:	f7ff fe62 	bl	8002898 <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002bd6:	e021      	b.n	8002c1c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bde:	d01d      	beq.n	8002c1c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d007      	beq.n	8002bf6 <HAL_ADC_PollForConversion+0x6c>
 8002be6:	f7ff fe57 	bl	8002898 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d212      	bcs.n	8002c1c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d00b      	beq.n	8002c1c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	f043 0204 	orr.w	r2, r3, #4
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e03d      	b.n	8002c98 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d1d6      	bne.n	8002bd8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f06f 0212 	mvn.w	r2, #18
 8002c32:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d123      	bne.n	8002c96 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d11f      	bne.n	8002c96 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d006      	beq.n	8002c72 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d111      	bne.n	8002c96 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d105      	bne.n	8002c96 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f043 0201 	orr.w	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x1c>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e105      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x228>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b09      	cmp	r3, #9
 8002ce6:	d925      	bls.n	8002d34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68d9      	ldr	r1, [r3, #12]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3b1e      	subs	r3, #30
 8002cfe:	2207      	movs	r2, #7
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43da      	mvns	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	400a      	ands	r2, r1
 8002d0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68d9      	ldr	r1, [r3, #12]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	4603      	mov	r3, r0
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4403      	add	r3, r0
 8002d26:	3b1e      	subs	r3, #30
 8002d28:	409a      	lsls	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	e022      	b.n	8002d7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6919      	ldr	r1, [r3, #16]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	2207      	movs	r2, #7
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	400a      	ands	r2, r1
 8002d56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6919      	ldr	r1, [r3, #16]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	4618      	mov	r0, r3
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4403      	add	r3, r0
 8002d70:	409a      	lsls	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b06      	cmp	r3, #6
 8002d80:	d824      	bhi.n	8002dcc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	3b05      	subs	r3, #5
 8002d94:	221f      	movs	r2, #31
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	400a      	ands	r2, r1
 8002da2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	4618      	mov	r0, r3
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	3b05      	subs	r3, #5
 8002dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dca:	e04c      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b0c      	cmp	r3, #12
 8002dd2:	d824      	bhi.n	8002e1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	3b23      	subs	r3, #35	; 0x23
 8002de6:	221f      	movs	r2, #31
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43da      	mvns	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	400a      	ands	r2, r1
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	4618      	mov	r0, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3b23      	subs	r3, #35	; 0x23
 8002e10:	fa00 f203 	lsl.w	r2, r0, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e1c:	e023      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3b41      	subs	r3, #65	; 0x41
 8002e30:	221f      	movs	r2, #31
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43da      	mvns	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	3b41      	subs	r3, #65	; 0x41
 8002e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e66:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <HAL_ADC_ConfigChannel+0x234>)
 8002e68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a21      	ldr	r2, [pc, #132]	; (8002ef4 <HAL_ADC_ConfigChannel+0x238>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d109      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x1cc>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b12      	cmp	r3, #18
 8002e7a:	d105      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a19      	ldr	r2, [pc, #100]	; (8002ef4 <HAL_ADC_ConfigChannel+0x238>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d123      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x21e>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d003      	beq.n	8002ea2 <HAL_ADC_ConfigChannel+0x1e6>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b11      	cmp	r3, #17
 8002ea0:	d11b      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d111      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <HAL_ADC_ConfigChannel+0x23c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a10      	ldr	r2, [pc, #64]	; (8002efc <HAL_ADC_ConfigChannel+0x240>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	0c9a      	lsrs	r2, r3, #18
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ecc:	e002      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f9      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	40012300 	.word	0x40012300
 8002ef4:	40012000 	.word	0x40012000
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	431bde83 	.word	0x431bde83

08002f00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f08:	4b79      	ldr	r3, [pc, #484]	; (80030f0 <ADC_Init+0x1f0>)
 8002f0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	431a      	orrs	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	021a      	lsls	r2, r3, #8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6899      	ldr	r1, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	4a58      	ldr	r2, [pc, #352]	; (80030f4 <ADC_Init+0x1f4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d022      	beq.n	8002fde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fa6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6899      	ldr	r1, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6899      	ldr	r1, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	e00f      	b.n	8002ffe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ffc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0202 	bic.w	r2, r2, #2
 800300c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6899      	ldr	r1, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	7e1b      	ldrb	r3, [r3, #24]
 8003018:	005a      	lsls	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01b      	beq.n	8003064 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800303a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800304a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6859      	ldr	r1, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	3b01      	subs	r3, #1
 8003058:	035a      	lsls	r2, r3, #13
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	e007      	b.n	8003074 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003072:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	3b01      	subs	r3, #1
 8003090:	051a      	lsls	r2, r3, #20
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6899      	ldr	r1, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030b6:	025a      	lsls	r2, r3, #9
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6899      	ldr	r1, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	029a      	lsls	r2, r3, #10
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]
}
 80030e4:	bf00      	nop
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	40012300 	.word	0x40012300
 80030f4:	0f000001 	.word	0x0f000001

080030f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <__NVIC_SetPriorityGrouping+0x44>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003114:	4013      	ands	r3, r2
 8003116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312a:	4a04      	ldr	r2, [pc, #16]	; (800313c <__NVIC_SetPriorityGrouping+0x44>)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	60d3      	str	r3, [r2, #12]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <__NVIC_GetPriorityGrouping+0x18>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	0a1b      	lsrs	r3, r3, #8
 800314a:	f003 0307 	and.w	r3, r3, #7
}
 800314e:	4618      	mov	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	2b00      	cmp	r3, #0
 800316c:	db0b      	blt.n	8003186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	f003 021f 	and.w	r2, r3, #31
 8003174:	4907      	ldr	r1, [pc, #28]	; (8003194 <__NVIC_EnableIRQ+0x38>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	2001      	movs	r0, #1
 800317e:	fa00 f202 	lsl.w	r2, r0, r2
 8003182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	e000e100 	.word	0xe000e100

08003198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	6039      	str	r1, [r7, #0]
 80031a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	db0a      	blt.n	80031c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	490c      	ldr	r1, [pc, #48]	; (80031e4 <__NVIC_SetPriority+0x4c>)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	0112      	lsls	r2, r2, #4
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	440b      	add	r3, r1
 80031bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c0:	e00a      	b.n	80031d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4908      	ldr	r1, [pc, #32]	; (80031e8 <__NVIC_SetPriority+0x50>)
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	3b04      	subs	r3, #4
 80031d0:	0112      	lsls	r2, r2, #4
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	440b      	add	r3, r1
 80031d6:	761a      	strb	r2, [r3, #24]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000e100 	.word	0xe000e100
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b089      	sub	sp, #36	; 0x24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f1c3 0307 	rsb	r3, r3, #7
 8003206:	2b04      	cmp	r3, #4
 8003208:	bf28      	it	cs
 800320a:	2304      	movcs	r3, #4
 800320c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3304      	adds	r3, #4
 8003212:	2b06      	cmp	r3, #6
 8003214:	d902      	bls.n	800321c <NVIC_EncodePriority+0x30>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3b03      	subs	r3, #3
 800321a:	e000      	b.n	800321e <NVIC_EncodePriority+0x32>
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003220:	f04f 32ff 	mov.w	r2, #4294967295
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43da      	mvns	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	401a      	ands	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003234:	f04f 31ff 	mov.w	r1, #4294967295
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	43d9      	mvns	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	4313      	orrs	r3, r2
         );
}
 8003246:	4618      	mov	r0, r3
 8003248:	3724      	adds	r7, #36	; 0x24
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3b01      	subs	r3, #1
 8003260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003264:	d301      	bcc.n	800326a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003266:	2301      	movs	r3, #1
 8003268:	e00f      	b.n	800328a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800326a:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <SysTick_Config+0x40>)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3b01      	subs	r3, #1
 8003270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003272:	210f      	movs	r1, #15
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
 8003278:	f7ff ff8e 	bl	8003198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <SysTick_Config+0x40>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003282:	4b04      	ldr	r3, [pc, #16]	; (8003294 <SysTick_Config+0x40>)
 8003284:	2207      	movs	r2, #7
 8003286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	e000e010 	.word	0xe000e010

08003298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff ff29 	bl	80030f8 <__NVIC_SetPriorityGrouping>
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b086      	sub	sp, #24
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	4603      	mov	r3, r0
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032c0:	f7ff ff3e 	bl	8003140 <__NVIC_GetPriorityGrouping>
 80032c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	6978      	ldr	r0, [r7, #20]
 80032cc:	f7ff ff8e 	bl	80031ec <NVIC_EncodePriority>
 80032d0:	4602      	mov	r2, r0
 80032d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d6:	4611      	mov	r1, r2
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff ff5d 	bl	8003198 <__NVIC_SetPriority>
}
 80032de:	bf00      	nop
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4603      	mov	r3, r0
 80032ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff31 	bl	800315c <__NVIC_EnableIRQ>
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ffa2 	bl	8003254 <SysTick_Config>
 8003310:	4603      	mov	r3, r0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003328:	f7ff fab6 	bl	8002898 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e099      	b.n	800346c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0201 	bic.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003358:	e00f      	b.n	800337a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800335a:	f7ff fa9d 	bl	8002898 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b05      	cmp	r3, #5
 8003366:	d908      	bls.n	800337a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2203      	movs	r2, #3
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e078      	b.n	800346c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e8      	bne.n	800335a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4b38      	ldr	r3, [pc, #224]	; (8003474 <HAL_DMA_Init+0x158>)
 8003394:	4013      	ands	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d107      	bne.n	80033e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	4313      	orrs	r3, r2
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f023 0307 	bic.w	r3, r3, #7
 80033fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	2b04      	cmp	r3, #4
 800340c:	d117      	bne.n	800343e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00e      	beq.n	800343e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f9e9 	bl	80037f8 <DMA_CheckFifoParam>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2240      	movs	r2, #64	; 0x40
 8003430:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800343a:	2301      	movs	r3, #1
 800343c:	e016      	b.n	800346c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f9a0 	bl	800378c <DMA_CalcBaseAndBitshift>
 800344c:	4603      	mov	r3, r0
 800344e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	223f      	movs	r2, #63	; 0x3f
 8003456:	409a      	lsls	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	f010803f 	.word	0xf010803f

08003478 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003484:	4b8e      	ldr	r3, [pc, #568]	; (80036c0 <HAL_DMA_IRQHandler+0x248>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a8e      	ldr	r2, [pc, #568]	; (80036c4 <HAL_DMA_IRQHandler+0x24c>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	0a9b      	lsrs	r3, r3, #10
 8003490:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003496:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a2:	2208      	movs	r2, #8
 80034a4:	409a      	lsls	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d01a      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d013      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0204 	bic.w	r2, r2, #4
 80034ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d0:	2208      	movs	r2, #8
 80034d2:	409a      	lsls	r2, r3
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	f043 0201 	orr.w	r2, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e8:	2201      	movs	r2, #1
 80034ea:	409a      	lsls	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d012      	beq.n	800351a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00b      	beq.n	800351a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003506:	2201      	movs	r2, #1
 8003508:	409a      	lsls	r2, r3
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003512:	f043 0202 	orr.w	r2, r3, #2
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351e:	2204      	movs	r2, #4
 8003520:	409a      	lsls	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4013      	ands	r3, r2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d012      	beq.n	8003550 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00b      	beq.n	8003550 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353c:	2204      	movs	r2, #4
 800353e:	409a      	lsls	r2, r3
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003548:	f043 0204 	orr.w	r2, r3, #4
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003554:	2210      	movs	r2, #16
 8003556:	409a      	lsls	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4013      	ands	r3, r2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d043      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d03c      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003572:	2210      	movs	r2, #16
 8003574:	409a      	lsls	r2, r3
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d018      	beq.n	80035ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d108      	bne.n	80035a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d024      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	4798      	blx	r3
 80035a6:	e01f      	b.n	80035e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01b      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
 80035b8:	e016      	b.n	80035e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d107      	bne.n	80035d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0208 	bic.w	r2, r2, #8
 80035d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ec:	2220      	movs	r2, #32
 80035ee:	409a      	lsls	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 808f 	beq.w	8003718 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8087 	beq.w	8003718 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360e:	2220      	movs	r2, #32
 8003610:	409a      	lsls	r2, r3
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b05      	cmp	r3, #5
 8003620:	d136      	bne.n	8003690 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0216 	bic.w	r2, r2, #22
 8003630:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003640:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d103      	bne.n	8003652 <HAL_DMA_IRQHandler+0x1da>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364e:	2b00      	cmp	r3, #0
 8003650:	d007      	beq.n	8003662 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0208 	bic.w	r2, r2, #8
 8003660:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003666:	223f      	movs	r2, #63	; 0x3f
 8003668:	409a      	lsls	r2, r3
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003682:	2b00      	cmp	r3, #0
 8003684:	d07e      	beq.n	8003784 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
        }
        return;
 800368e:	e079      	b.n	8003784 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d01d      	beq.n	80036da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10d      	bne.n	80036c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d031      	beq.n	8003718 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4798      	blx	r3
 80036bc:	e02c      	b.n	8003718 <HAL_DMA_IRQHandler+0x2a0>
 80036be:	bf00      	nop
 80036c0:	20000000 	.word	0x20000000
 80036c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d023      	beq.n	8003718 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	4798      	blx	r3
 80036d8:	e01e      	b.n	8003718 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10f      	bne.n	8003708 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0210 	bic.w	r2, r2, #16
 80036f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371c:	2b00      	cmp	r3, #0
 800371e:	d032      	beq.n	8003786 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d022      	beq.n	8003772 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2205      	movs	r2, #5
 8003730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0201 	bic.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	3301      	adds	r3, #1
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	429a      	cmp	r2, r3
 800374e:	d307      	bcc.n	8003760 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f2      	bne.n	8003744 <HAL_DMA_IRQHandler+0x2cc>
 800375e:	e000      	b.n	8003762 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003760:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	4798      	blx	r3
 8003782:	e000      	b.n	8003786 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003784:	bf00      	nop
    }
  }
}
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	3b10      	subs	r3, #16
 800379c:	4a14      	ldr	r2, [pc, #80]	; (80037f0 <DMA_CalcBaseAndBitshift+0x64>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	091b      	lsrs	r3, r3, #4
 80037a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037a6:	4a13      	ldr	r2, [pc, #76]	; (80037f4 <DMA_CalcBaseAndBitshift+0x68>)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4413      	add	r3, r2
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d909      	bls.n	80037ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037c2:	f023 0303 	bic.w	r3, r3, #3
 80037c6:	1d1a      	adds	r2, r3, #4
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	659a      	str	r2, [r3, #88]	; 0x58
 80037cc:	e007      	b.n	80037de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037d6:	f023 0303 	bic.w	r3, r3, #3
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	aaaaaaab 	.word	0xaaaaaaab
 80037f4:	0800e5dc 	.word	0x0800e5dc

080037f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d11f      	bne.n	8003852 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d856      	bhi.n	80038c6 <DMA_CheckFifoParam+0xce>
 8003818:	a201      	add	r2, pc, #4	; (adr r2, 8003820 <DMA_CheckFifoParam+0x28>)
 800381a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381e:	bf00      	nop
 8003820:	08003831 	.word	0x08003831
 8003824:	08003843 	.word	0x08003843
 8003828:	08003831 	.word	0x08003831
 800382c:	080038c7 	.word	0x080038c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d046      	beq.n	80038ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003840:	e043      	b.n	80038ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003846:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800384a:	d140      	bne.n	80038ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003850:	e03d      	b.n	80038ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385a:	d121      	bne.n	80038a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b03      	cmp	r3, #3
 8003860:	d837      	bhi.n	80038d2 <DMA_CheckFifoParam+0xda>
 8003862:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <DMA_CheckFifoParam+0x70>)
 8003864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003868:	08003879 	.word	0x08003879
 800386c:	0800387f 	.word	0x0800387f
 8003870:	08003879 	.word	0x08003879
 8003874:	08003891 	.word	0x08003891
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	73fb      	strb	r3, [r7, #15]
      break;
 800387c:	e030      	b.n	80038e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d025      	beq.n	80038d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800388e:	e022      	b.n	80038d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003898:	d11f      	bne.n	80038da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800389e:	e01c      	b.n	80038da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d903      	bls.n	80038ae <DMA_CheckFifoParam+0xb6>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d003      	beq.n	80038b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038ac:	e018      	b.n	80038e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	73fb      	strb	r3, [r7, #15]
      break;
 80038b2:	e015      	b.n	80038e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00e      	beq.n	80038de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]
      break;
 80038c4:	e00b      	b.n	80038de <DMA_CheckFifoParam+0xe6>
      break;
 80038c6:	bf00      	nop
 80038c8:	e00a      	b.n	80038e0 <DMA_CheckFifoParam+0xe8>
      break;
 80038ca:	bf00      	nop
 80038cc:	e008      	b.n	80038e0 <DMA_CheckFifoParam+0xe8>
      break;
 80038ce:	bf00      	nop
 80038d0:	e006      	b.n	80038e0 <DMA_CheckFifoParam+0xe8>
      break;
 80038d2:	bf00      	nop
 80038d4:	e004      	b.n	80038e0 <DMA_CheckFifoParam+0xe8>
      break;
 80038d6:	bf00      	nop
 80038d8:	e002      	b.n	80038e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80038da:	bf00      	nop
 80038dc:	e000      	b.n	80038e0 <DMA_CheckFifoParam+0xe8>
      break;
 80038de:	bf00      	nop
    }
  } 
  
  return status; 
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop

080038f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b089      	sub	sp, #36	; 0x24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
 800390a:	e16b      	b.n	8003be4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800390c:	2201      	movs	r2, #1
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4013      	ands	r3, r2
 800391e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	429a      	cmp	r2, r3
 8003926:	f040 815a 	bne.w	8003bde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b01      	cmp	r3, #1
 8003934:	d005      	beq.n	8003942 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800393e:	2b02      	cmp	r3, #2
 8003940:	d130      	bne.n	80039a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	2203      	movs	r2, #3
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4313      	orrs	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003978:	2201      	movs	r2, #1
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	f003 0201 	and.w	r2, r3, #1
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d017      	beq.n	80039e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	2203      	movs	r2, #3
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d123      	bne.n	8003a34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	08da      	lsrs	r2, r3, #3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3208      	adds	r2, #8
 80039f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	220f      	movs	r2, #15
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	08da      	lsrs	r2, r3, #3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3208      	adds	r2, #8
 8003a2e:	69b9      	ldr	r1, [r7, #24]
 8003a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	2203      	movs	r2, #3
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 0203 	and.w	r2, r3, #3
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80b4 	beq.w	8003bde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	4b60      	ldr	r3, [pc, #384]	; (8003bfc <HAL_GPIO_Init+0x30c>)
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	4a5f      	ldr	r2, [pc, #380]	; (8003bfc <HAL_GPIO_Init+0x30c>)
 8003a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a84:	6453      	str	r3, [r2, #68]	; 0x44
 8003a86:	4b5d      	ldr	r3, [pc, #372]	; (8003bfc <HAL_GPIO_Init+0x30c>)
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a92:	4a5b      	ldr	r2, [pc, #364]	; (8003c00 <HAL_GPIO_Init+0x310>)
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	089b      	lsrs	r3, r3, #2
 8003a98:	3302      	adds	r3, #2
 8003a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	220f      	movs	r2, #15
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a52      	ldr	r2, [pc, #328]	; (8003c04 <HAL_GPIO_Init+0x314>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d02b      	beq.n	8003b16 <HAL_GPIO_Init+0x226>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a51      	ldr	r2, [pc, #324]	; (8003c08 <HAL_GPIO_Init+0x318>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d025      	beq.n	8003b12 <HAL_GPIO_Init+0x222>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a50      	ldr	r2, [pc, #320]	; (8003c0c <HAL_GPIO_Init+0x31c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d01f      	beq.n	8003b0e <HAL_GPIO_Init+0x21e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a4f      	ldr	r2, [pc, #316]	; (8003c10 <HAL_GPIO_Init+0x320>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d019      	beq.n	8003b0a <HAL_GPIO_Init+0x21a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a4e      	ldr	r2, [pc, #312]	; (8003c14 <HAL_GPIO_Init+0x324>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d013      	beq.n	8003b06 <HAL_GPIO_Init+0x216>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a4d      	ldr	r2, [pc, #308]	; (8003c18 <HAL_GPIO_Init+0x328>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00d      	beq.n	8003b02 <HAL_GPIO_Init+0x212>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a4c      	ldr	r2, [pc, #304]	; (8003c1c <HAL_GPIO_Init+0x32c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <HAL_GPIO_Init+0x20e>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a4b      	ldr	r2, [pc, #300]	; (8003c20 <HAL_GPIO_Init+0x330>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d101      	bne.n	8003afa <HAL_GPIO_Init+0x20a>
 8003af6:	2307      	movs	r3, #7
 8003af8:	e00e      	b.n	8003b18 <HAL_GPIO_Init+0x228>
 8003afa:	2308      	movs	r3, #8
 8003afc:	e00c      	b.n	8003b18 <HAL_GPIO_Init+0x228>
 8003afe:	2306      	movs	r3, #6
 8003b00:	e00a      	b.n	8003b18 <HAL_GPIO_Init+0x228>
 8003b02:	2305      	movs	r3, #5
 8003b04:	e008      	b.n	8003b18 <HAL_GPIO_Init+0x228>
 8003b06:	2304      	movs	r3, #4
 8003b08:	e006      	b.n	8003b18 <HAL_GPIO_Init+0x228>
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e004      	b.n	8003b18 <HAL_GPIO_Init+0x228>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e002      	b.n	8003b18 <HAL_GPIO_Init+0x228>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <HAL_GPIO_Init+0x228>
 8003b16:	2300      	movs	r3, #0
 8003b18:	69fa      	ldr	r2, [r7, #28]
 8003b1a:	f002 0203 	and.w	r2, r2, #3
 8003b1e:	0092      	lsls	r2, r2, #2
 8003b20:	4093      	lsls	r3, r2
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b28:	4935      	ldr	r1, [pc, #212]	; (8003c00 <HAL_GPIO_Init+0x310>)
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	089b      	lsrs	r3, r3, #2
 8003b2e:	3302      	adds	r3, #2
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b36:	4b3b      	ldr	r3, [pc, #236]	; (8003c24 <HAL_GPIO_Init+0x334>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4013      	ands	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b5a:	4a32      	ldr	r2, [pc, #200]	; (8003c24 <HAL_GPIO_Init+0x334>)
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b60:	4b30      	ldr	r3, [pc, #192]	; (8003c24 <HAL_GPIO_Init+0x334>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b84:	4a27      	ldr	r2, [pc, #156]	; (8003c24 <HAL_GPIO_Init+0x334>)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b8a:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <HAL_GPIO_Init+0x334>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	43db      	mvns	r3, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bae:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <HAL_GPIO_Init+0x334>)
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bb4:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <HAL_GPIO_Init+0x334>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bd8:	4a12      	ldr	r2, [pc, #72]	; (8003c24 <HAL_GPIO_Init+0x334>)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	3301      	adds	r3, #1
 8003be2:	61fb      	str	r3, [r7, #28]
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b0f      	cmp	r3, #15
 8003be8:	f67f ae90 	bls.w	800390c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bec:	bf00      	nop
 8003bee:	bf00      	nop
 8003bf0:	3724      	adds	r7, #36	; 0x24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40013800 	.word	0x40013800
 8003c04:	40020000 	.word	0x40020000
 8003c08:	40020400 	.word	0x40020400
 8003c0c:	40020800 	.word	0x40020800
 8003c10:	40020c00 	.word	0x40020c00
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40021400 	.word	0x40021400
 8003c1c:	40021800 	.word	0x40021800
 8003c20:	40021c00 	.word	0x40021c00
 8003c24:	40013c00 	.word	0x40013c00

08003c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	807b      	strh	r3, [r7, #2]
 8003c34:	4613      	mov	r3, r2
 8003c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c38:	787b      	ldrb	r3, [r7, #1]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c3e:	887a      	ldrh	r2, [r7, #2]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c44:	e003      	b.n	8003c4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c46:	887b      	ldrh	r3, [r7, #2]
 8003c48:	041a      	lsls	r2, r3, #16
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	619a      	str	r2, [r3, #24]
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b085      	sub	sp, #20
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	460b      	mov	r3, r1
 8003c64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c6c:	887a      	ldrh	r2, [r7, #2]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4013      	ands	r3, r2
 8003c72:	041a      	lsls	r2, r3, #16
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	43d9      	mvns	r1, r3
 8003c78:	887b      	ldrh	r3, [r7, #2]
 8003c7a:	400b      	ands	r3, r1
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	619a      	str	r2, [r3, #24]
}
 8003c82:	bf00      	nop
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e267      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d075      	beq.n	8003d9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cae:	4b88      	ldr	r3, [pc, #544]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d00c      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cba:	4b85      	ldr	r3, [pc, #532]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d112      	bne.n	8003cec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cc6:	4b82      	ldr	r3, [pc, #520]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd2:	d10b      	bne.n	8003cec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd4:	4b7e      	ldr	r3, [pc, #504]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d05b      	beq.n	8003d98 <HAL_RCC_OscConfig+0x108>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d157      	bne.n	8003d98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e242      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf4:	d106      	bne.n	8003d04 <HAL_RCC_OscConfig+0x74>
 8003cf6:	4b76      	ldr	r3, [pc, #472]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a75      	ldr	r2, [pc, #468]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	e01d      	b.n	8003d40 <HAL_RCC_OscConfig+0xb0>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d0c:	d10c      	bne.n	8003d28 <HAL_RCC_OscConfig+0x98>
 8003d0e:	4b70      	ldr	r3, [pc, #448]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a6f      	ldr	r2, [pc, #444]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	4b6d      	ldr	r3, [pc, #436]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a6c      	ldr	r2, [pc, #432]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e00b      	b.n	8003d40 <HAL_RCC_OscConfig+0xb0>
 8003d28:	4b69      	ldr	r3, [pc, #420]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a68      	ldr	r2, [pc, #416]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	4b66      	ldr	r3, [pc, #408]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a65      	ldr	r2, [pc, #404]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d013      	beq.n	8003d70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d48:	f7fe fda6 	bl	8002898 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d50:	f7fe fda2 	bl	8002898 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b64      	cmp	r3, #100	; 0x64
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e207      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	4b5b      	ldr	r3, [pc, #364]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0f0      	beq.n	8003d50 <HAL_RCC_OscConfig+0xc0>
 8003d6e:	e014      	b.n	8003d9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fe fd92 	bl	8002898 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d78:	f7fe fd8e 	bl	8002898 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	; 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1f3      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8a:	4b51      	ldr	r3, [pc, #324]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0xe8>
 8003d96:	e000      	b.n	8003d9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d063      	beq.n	8003e6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003da6:	4b4a      	ldr	r3, [pc, #296]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003db2:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d11c      	bne.n	8003df8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dbe:	4b44      	ldr	r3, [pc, #272]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d116      	bne.n	8003df8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dca:	4b41      	ldr	r3, [pc, #260]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_RCC_OscConfig+0x152>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d001      	beq.n	8003de2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e1c7      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de2:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4937      	ldr	r1, [pc, #220]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df6:	e03a      	b.n	8003e6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d020      	beq.n	8003e42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e00:	4b34      	ldr	r3, [pc, #208]	; (8003ed4 <HAL_RCC_OscConfig+0x244>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e06:	f7fe fd47 	bl	8002898 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e0e:	f7fe fd43 	bl	8002898 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e1a8      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e20:	4b2b      	ldr	r3, [pc, #172]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f0      	beq.n	8003e0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2c:	4b28      	ldr	r3, [pc, #160]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4925      	ldr	r1, [pc, #148]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	600b      	str	r3, [r1, #0]
 8003e40:	e015      	b.n	8003e6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e42:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <HAL_RCC_OscConfig+0x244>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fe fd26 	bl	8002898 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e50:	f7fe fd22 	bl	8002898 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e187      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e62:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d036      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d016      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e82:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <HAL_RCC_OscConfig+0x248>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e88:	f7fe fd06 	bl	8002898 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e90:	f7fe fd02 	bl	8002898 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e167      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x200>
 8003eae:	e01b      	b.n	8003ee8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb0:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_RCC_OscConfig+0x248>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb6:	f7fe fcef 	bl	8002898 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ebc:	e00e      	b.n	8003edc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ebe:	f7fe fceb 	bl	8002898 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d907      	bls.n	8003edc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e150      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	42470000 	.word	0x42470000
 8003ed8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003edc:	4b88      	ldr	r3, [pc, #544]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1ea      	bne.n	8003ebe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 8097 	beq.w	8004024 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efa:	4b81      	ldr	r3, [pc, #516]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10f      	bne.n	8003f26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f06:	2300      	movs	r3, #0
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	4b7d      	ldr	r3, [pc, #500]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	4a7c      	ldr	r2, [pc, #496]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f14:	6413      	str	r3, [r2, #64]	; 0x40
 8003f16:	4b7a      	ldr	r3, [pc, #488]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f22:	2301      	movs	r3, #1
 8003f24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f26:	4b77      	ldr	r3, [pc, #476]	; (8004104 <HAL_RCC_OscConfig+0x474>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d118      	bne.n	8003f64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f32:	4b74      	ldr	r3, [pc, #464]	; (8004104 <HAL_RCC_OscConfig+0x474>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a73      	ldr	r2, [pc, #460]	; (8004104 <HAL_RCC_OscConfig+0x474>)
 8003f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3e:	f7fe fcab 	bl	8002898 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f46:	f7fe fca7 	bl	8002898 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e10c      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f58:	4b6a      	ldr	r3, [pc, #424]	; (8004104 <HAL_RCC_OscConfig+0x474>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d106      	bne.n	8003f7a <HAL_RCC_OscConfig+0x2ea>
 8003f6c:	4b64      	ldr	r3, [pc, #400]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	4a63      	ldr	r2, [pc, #396]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	6713      	str	r3, [r2, #112]	; 0x70
 8003f78:	e01c      	b.n	8003fb4 <HAL_RCC_OscConfig+0x324>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b05      	cmp	r3, #5
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCC_OscConfig+0x30c>
 8003f82:	4b5f      	ldr	r3, [pc, #380]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4a5e      	ldr	r2, [pc, #376]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f88:	f043 0304 	orr.w	r3, r3, #4
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8e:	4b5c      	ldr	r3, [pc, #368]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	4a5b      	ldr	r2, [pc, #364]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9a:	e00b      	b.n	8003fb4 <HAL_RCC_OscConfig+0x324>
 8003f9c:	4b58      	ldr	r3, [pc, #352]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	4a57      	ldr	r2, [pc, #348]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa8:	4b55      	ldr	r3, [pc, #340]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fac:	4a54      	ldr	r2, [pc, #336]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003fae:	f023 0304 	bic.w	r3, r3, #4
 8003fb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d015      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbc:	f7fe fc6c 	bl	8002898 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc2:	e00a      	b.n	8003fda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fc4:	f7fe fc68 	bl	8002898 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e0cb      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fda:	4b49      	ldr	r3, [pc, #292]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0ee      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x334>
 8003fe6:	e014      	b.n	8004012 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe8:	f7fe fc56 	bl	8002898 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff0:	f7fe fc52 	bl	8002898 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e0b5      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004006:	4b3e      	ldr	r3, [pc, #248]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1ee      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004012:	7dfb      	ldrb	r3, [r7, #23]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d105      	bne.n	8004024 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004018:	4b39      	ldr	r3, [pc, #228]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	4a38      	ldr	r2, [pc, #224]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 800401e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004022:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80a1 	beq.w	8004170 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800402e:	4b34      	ldr	r3, [pc, #208]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b08      	cmp	r3, #8
 8004038:	d05c      	beq.n	80040f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d141      	bne.n	80040c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004042:	4b31      	ldr	r3, [pc, #196]	; (8004108 <HAL_RCC_OscConfig+0x478>)
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004048:	f7fe fc26 	bl	8002898 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004050:	f7fe fc22 	bl	8002898 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e087      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004062:	4b27      	ldr	r3, [pc, #156]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69da      	ldr	r2, [r3, #28]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	019b      	lsls	r3, r3, #6
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	3b01      	subs	r3, #1
 8004088:	041b      	lsls	r3, r3, #16
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	061b      	lsls	r3, r3, #24
 8004092:	491b      	ldr	r1, [pc, #108]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 8004094:	4313      	orrs	r3, r2
 8004096:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004098:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_RCC_OscConfig+0x478>)
 800409a:	2201      	movs	r2, #1
 800409c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409e:	f7fe fbfb 	bl	8002898 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a6:	f7fe fbf7 	bl	8002898 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e05c      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b8:	4b11      	ldr	r3, [pc, #68]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0f0      	beq.n	80040a6 <HAL_RCC_OscConfig+0x416>
 80040c4:	e054      	b.n	8004170 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c6:	4b10      	ldr	r3, [pc, #64]	; (8004108 <HAL_RCC_OscConfig+0x478>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7fe fbe4 	bl	8002898 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d4:	f7fe fbe0 	bl	8002898 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e045      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <HAL_RCC_OscConfig+0x470>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x444>
 80040f2:	e03d      	b.n	8004170 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d107      	bne.n	800410c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e038      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
 8004100:	40023800 	.word	0x40023800
 8004104:	40007000 	.word	0x40007000
 8004108:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800410c:	4b1b      	ldr	r3, [pc, #108]	; (800417c <HAL_RCC_OscConfig+0x4ec>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d028      	beq.n	800416c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004124:	429a      	cmp	r2, r3
 8004126:	d121      	bne.n	800416c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d11a      	bne.n	800416c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800413c:	4013      	ands	r3, r2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004142:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004144:	4293      	cmp	r3, r2
 8004146:	d111      	bne.n	800416c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	085b      	lsrs	r3, r3, #1
 8004154:	3b01      	subs	r3, #1
 8004156:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004158:	429a      	cmp	r2, r3
 800415a:	d107      	bne.n	800416c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40023800 	.word	0x40023800

08004180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0cc      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004194:	4b68      	ldr	r3, [pc, #416]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d90c      	bls.n	80041bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a2:	4b65      	ldr	r3, [pc, #404]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	4b63      	ldr	r3, [pc, #396]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0b8      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d020      	beq.n	800420a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041d4:	4b59      	ldr	r3, [pc, #356]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4a58      	ldr	r2, [pc, #352]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041ec:	4b53      	ldr	r3, [pc, #332]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4a52      	ldr	r2, [pc, #328]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f8:	4b50      	ldr	r3, [pc, #320]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	494d      	ldr	r1, [pc, #308]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d044      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d107      	bne.n	800422e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421e:	4b47      	ldr	r3, [pc, #284]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d119      	bne.n	800425e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e07f      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b02      	cmp	r3, #2
 8004234:	d003      	beq.n	800423e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800423a:	2b03      	cmp	r3, #3
 800423c:	d107      	bne.n	800424e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800423e:	4b3f      	ldr	r3, [pc, #252]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e06f      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424e:	4b3b      	ldr	r3, [pc, #236]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e067      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800425e:	4b37      	ldr	r3, [pc, #220]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f023 0203 	bic.w	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	4934      	ldr	r1, [pc, #208]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 800426c:	4313      	orrs	r3, r2
 800426e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004270:	f7fe fb12 	bl	8002898 <HAL_GetTick>
 8004274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004276:	e00a      	b.n	800428e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004278:	f7fe fb0e 	bl	8002898 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f241 3288 	movw	r2, #5000	; 0x1388
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e04f      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428e:	4b2b      	ldr	r3, [pc, #172]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 020c 	and.w	r2, r3, #12
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	429a      	cmp	r2, r3
 800429e:	d1eb      	bne.n	8004278 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042a0:	4b25      	ldr	r3, [pc, #148]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d20c      	bcs.n	80042c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ae:	4b22      	ldr	r3, [pc, #136]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b6:	4b20      	ldr	r3, [pc, #128]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e032      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042d4:	4b19      	ldr	r3, [pc, #100]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4916      	ldr	r1, [pc, #88]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042f2:	4b12      	ldr	r3, [pc, #72]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	490e      	ldr	r1, [pc, #56]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	4313      	orrs	r3, r2
 8004304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004306:	f000 f82d 	bl	8004364 <HAL_RCC_GetSysClockFreq>
 800430a:	4602      	mov	r2, r0
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	091b      	lsrs	r3, r3, #4
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	490a      	ldr	r1, [pc, #40]	; (8004340 <HAL_RCC_ClockConfig+0x1c0>)
 8004318:	5ccb      	ldrb	r3, [r1, r3]
 800431a:	fa22 f303 	lsr.w	r3, r2, r3
 800431e:	4a09      	ldr	r2, [pc, #36]	; (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004322:	4b09      	ldr	r3, [pc, #36]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fe fa72 	bl	8002810 <HAL_InitTick>

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40023c00 	.word	0x40023c00
 800433c:	40023800 	.word	0x40023800
 8004340:	0800b93c 	.word	0x0800b93c
 8004344:	20000000 	.word	0x20000000
 8004348:	20000024 	.word	0x20000024

0800434c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004350:	4b03      	ldr	r3, [pc, #12]	; (8004360 <HAL_RCC_EnableCSS+0x14>)
 8004352:	2201      	movs	r2, #1
 8004354:	601a      	str	r2, [r3, #0]
}
 8004356:	bf00      	nop
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	4247004c 	.word	0x4247004c

08004364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004368:	b094      	sub	sp, #80	; 0x50
 800436a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	647b      	str	r3, [r7, #68]	; 0x44
 8004370:	2300      	movs	r3, #0
 8004372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004374:	2300      	movs	r3, #0
 8004376:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800437c:	4b79      	ldr	r3, [pc, #484]	; (8004564 <HAL_RCC_GetSysClockFreq+0x200>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 030c 	and.w	r3, r3, #12
 8004384:	2b08      	cmp	r3, #8
 8004386:	d00d      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004388:	2b08      	cmp	r3, #8
 800438a:	f200 80e1 	bhi.w	8004550 <HAL_RCC_GetSysClockFreq+0x1ec>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0x34>
 8004392:	2b04      	cmp	r3, #4
 8004394:	d003      	beq.n	800439e <HAL_RCC_GetSysClockFreq+0x3a>
 8004396:	e0db      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004398:	4b73      	ldr	r3, [pc, #460]	; (8004568 <HAL_RCC_GetSysClockFreq+0x204>)
 800439a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800439c:	e0db      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800439e:	4b72      	ldr	r3, [pc, #456]	; (8004568 <HAL_RCC_GetSysClockFreq+0x204>)
 80043a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043a2:	e0d8      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043a4:	4b6f      	ldr	r3, [pc, #444]	; (8004564 <HAL_RCC_GetSysClockFreq+0x200>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ae:	4b6d      	ldr	r3, [pc, #436]	; (8004564 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d063      	beq.n	8004482 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ba:	4b6a      	ldr	r3, [pc, #424]	; (8004564 <HAL_RCC_GetSysClockFreq+0x200>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	099b      	lsrs	r3, r3, #6
 80043c0:	2200      	movs	r2, #0
 80043c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80043c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043cc:	633b      	str	r3, [r7, #48]	; 0x30
 80043ce:	2300      	movs	r3, #0
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
 80043d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043d6:	4622      	mov	r2, r4
 80043d8:	462b      	mov	r3, r5
 80043da:	f04f 0000 	mov.w	r0, #0
 80043de:	f04f 0100 	mov.w	r1, #0
 80043e2:	0159      	lsls	r1, r3, #5
 80043e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043e8:	0150      	lsls	r0, r2, #5
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4621      	mov	r1, r4
 80043f0:	1a51      	subs	r1, r2, r1
 80043f2:	6139      	str	r1, [r7, #16]
 80043f4:	4629      	mov	r1, r5
 80043f6:	eb63 0301 	sbc.w	r3, r3, r1
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004408:	4659      	mov	r1, fp
 800440a:	018b      	lsls	r3, r1, #6
 800440c:	4651      	mov	r1, sl
 800440e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004412:	4651      	mov	r1, sl
 8004414:	018a      	lsls	r2, r1, #6
 8004416:	4651      	mov	r1, sl
 8004418:	ebb2 0801 	subs.w	r8, r2, r1
 800441c:	4659      	mov	r1, fp
 800441e:	eb63 0901 	sbc.w	r9, r3, r1
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800442e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004432:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004436:	4690      	mov	r8, r2
 8004438:	4699      	mov	r9, r3
 800443a:	4623      	mov	r3, r4
 800443c:	eb18 0303 	adds.w	r3, r8, r3
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	462b      	mov	r3, r5
 8004444:	eb49 0303 	adc.w	r3, r9, r3
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004456:	4629      	mov	r1, r5
 8004458:	028b      	lsls	r3, r1, #10
 800445a:	4621      	mov	r1, r4
 800445c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004460:	4621      	mov	r1, r4
 8004462:	028a      	lsls	r2, r1, #10
 8004464:	4610      	mov	r0, r2
 8004466:	4619      	mov	r1, r3
 8004468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800446a:	2200      	movs	r2, #0
 800446c:	62bb      	str	r3, [r7, #40]	; 0x28
 800446e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004470:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004474:	f7fc fbe8 	bl	8000c48 <__aeabi_uldivmod>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4613      	mov	r3, r2
 800447e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004480:	e058      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004482:	4b38      	ldr	r3, [pc, #224]	; (8004564 <HAL_RCC_GetSysClockFreq+0x200>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	099b      	lsrs	r3, r3, #6
 8004488:	2200      	movs	r2, #0
 800448a:	4618      	mov	r0, r3
 800448c:	4611      	mov	r1, r2
 800448e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004492:	623b      	str	r3, [r7, #32]
 8004494:	2300      	movs	r3, #0
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
 8004498:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800449c:	4642      	mov	r2, r8
 800449e:	464b      	mov	r3, r9
 80044a0:	f04f 0000 	mov.w	r0, #0
 80044a4:	f04f 0100 	mov.w	r1, #0
 80044a8:	0159      	lsls	r1, r3, #5
 80044aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044ae:	0150      	lsls	r0, r2, #5
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4641      	mov	r1, r8
 80044b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80044ba:	4649      	mov	r1, r9
 80044bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044d4:	ebb2 040a 	subs.w	r4, r2, sl
 80044d8:	eb63 050b 	sbc.w	r5, r3, fp
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	00eb      	lsls	r3, r5, #3
 80044e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ea:	00e2      	lsls	r2, r4, #3
 80044ec:	4614      	mov	r4, r2
 80044ee:	461d      	mov	r5, r3
 80044f0:	4643      	mov	r3, r8
 80044f2:	18e3      	adds	r3, r4, r3
 80044f4:	603b      	str	r3, [r7, #0]
 80044f6:	464b      	mov	r3, r9
 80044f8:	eb45 0303 	adc.w	r3, r5, r3
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	e9d7 4500 	ldrd	r4, r5, [r7]
 800450a:	4629      	mov	r1, r5
 800450c:	028b      	lsls	r3, r1, #10
 800450e:	4621      	mov	r1, r4
 8004510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004514:	4621      	mov	r1, r4
 8004516:	028a      	lsls	r2, r1, #10
 8004518:	4610      	mov	r0, r2
 800451a:	4619      	mov	r1, r3
 800451c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800451e:	2200      	movs	r2, #0
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	61fa      	str	r2, [r7, #28]
 8004524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004528:	f7fc fb8e 	bl	8000c48 <__aeabi_uldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4613      	mov	r3, r2
 8004532:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <HAL_RCC_GetSysClockFreq+0x200>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	0c1b      	lsrs	r3, r3, #16
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	3301      	adds	r3, #1
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004544:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004548:	fbb2 f3f3 	udiv	r3, r2, r3
 800454c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800454e:	e002      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <HAL_RCC_GetSysClockFreq+0x204>)
 8004552:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004558:	4618      	mov	r0, r3
 800455a:	3750      	adds	r7, #80	; 0x50
 800455c:	46bd      	mov	sp, r7
 800455e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004562:	bf00      	nop
 8004564:	40023800 	.word	0x40023800
 8004568:	00f42400 	.word	0x00f42400

0800456c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004570:	4b03      	ldr	r3, [pc, #12]	; (8004580 <HAL_RCC_GetHCLKFreq+0x14>)
 8004572:	681b      	ldr	r3, [r3, #0]
}
 8004574:	4618      	mov	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	20000000 	.word	0x20000000

08004584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004588:	f7ff fff0 	bl	800456c <HAL_RCC_GetHCLKFreq>
 800458c:	4602      	mov	r2, r0
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	0a9b      	lsrs	r3, r3, #10
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	4903      	ldr	r1, [pc, #12]	; (80045a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800459a:	5ccb      	ldrb	r3, [r1, r3]
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40023800 	.word	0x40023800
 80045a8:	0800b94c 	.word	0x0800b94c

080045ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045b0:	f7ff ffdc 	bl	800456c <HAL_RCC_GetHCLKFreq>
 80045b4:	4602      	mov	r2, r0
 80045b6:	4b05      	ldr	r3, [pc, #20]	; (80045cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	0b5b      	lsrs	r3, r3, #13
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	4903      	ldr	r1, [pc, #12]	; (80045d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045c2:	5ccb      	ldrb	r3, [r1, r3]
 80045c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40023800 	.word	0x40023800
 80045d0:	0800b94c 	.word	0x0800b94c

080045d4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e0:	2b80      	cmp	r3, #128	; 0x80
 80045e2:	d104      	bne.n	80045ee <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80045e4:	f000 f80a 	bl	80045fc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80045e8:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80045ea:	2280      	movs	r2, #128	; 0x80
 80045ec:	701a      	strb	r2, [r3, #0]
  }
}
 80045ee:	bf00      	nop
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800
 80045f8:	4002380e 	.word	0x4002380e

080045fc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e07b      	b.n	8004714 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	2b00      	cmp	r3, #0
 8004622:	d108      	bne.n	8004636 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800462c:	d009      	beq.n	8004642 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	61da      	str	r2, [r3, #28]
 8004634:	e005      	b.n	8004642 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d106      	bne.n	8004662 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7fd fa21 	bl	8001aa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2202      	movs	r2, #2
 8004666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004678:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c6:	ea42 0103 	orr.w	r1, r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	0c1b      	lsrs	r3, r3, #16
 80046e0:	f003 0104 	and.w	r1, r3, #4
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	f003 0210 	and.w	r2, r3, #16
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69da      	ldr	r2, [r3, #28]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004702:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	4613      	mov	r3, r2
 800472a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_SPI_Transmit+0x22>
 800473a:	2302      	movs	r3, #2
 800473c:	e126      	b.n	800498c <HAL_SPI_Transmit+0x270>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004746:	f7fe f8a7 	bl	8002898 <HAL_GetTick>
 800474a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800474c:	88fb      	ldrh	r3, [r7, #6]
 800474e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d002      	beq.n	8004762 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800475c:	2302      	movs	r3, #2
 800475e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004760:	e10b      	b.n	800497a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_SPI_Transmit+0x52>
 8004768:	88fb      	ldrh	r3, [r7, #6]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d102      	bne.n	8004774 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004772:	e102      	b.n	800497a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2203      	movs	r2, #3
 8004778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	88fa      	ldrh	r2, [r7, #6]
 800478c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	88fa      	ldrh	r2, [r7, #6]
 8004792:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ba:	d10f      	bne.n	80047dc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b40      	cmp	r3, #64	; 0x40
 80047e8:	d007      	beq.n	80047fa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004802:	d14b      	bne.n	800489c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <HAL_SPI_Transmit+0xf6>
 800480c:	8afb      	ldrh	r3, [r7, #22]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d13e      	bne.n	8004890 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	881a      	ldrh	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	1c9a      	adds	r2, r3, #2
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800482c:	b29b      	uxth	r3, r3
 800482e:	3b01      	subs	r3, #1
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004836:	e02b      	b.n	8004890 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b02      	cmp	r3, #2
 8004844:	d112      	bne.n	800486c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	881a      	ldrh	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	1c9a      	adds	r2, r3, #2
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004860:	b29b      	uxth	r3, r3
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	86da      	strh	r2, [r3, #54]	; 0x36
 800486a:	e011      	b.n	8004890 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800486c:	f7fe f814 	bl	8002898 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d803      	bhi.n	8004884 <HAL_SPI_Transmit+0x168>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004882:	d102      	bne.n	800488a <HAL_SPI_Transmit+0x16e>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d102      	bne.n	8004890 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800488e:	e074      	b.n	800497a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1ce      	bne.n	8004838 <HAL_SPI_Transmit+0x11c>
 800489a:	e04c      	b.n	8004936 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <HAL_SPI_Transmit+0x18e>
 80048a4:	8afb      	ldrh	r3, [r7, #22]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d140      	bne.n	800492c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	330c      	adds	r3, #12
 80048b4:	7812      	ldrb	r2, [r2, #0]
 80048b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048d0:	e02c      	b.n	800492c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d113      	bne.n	8004908 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	7812      	ldrb	r2, [r2, #0]
 80048ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	86da      	strh	r2, [r3, #54]	; 0x36
 8004906:	e011      	b.n	800492c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004908:	f7fd ffc6 	bl	8002898 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d803      	bhi.n	8004920 <HAL_SPI_Transmit+0x204>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491e:	d102      	bne.n	8004926 <HAL_SPI_Transmit+0x20a>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d102      	bne.n	800492c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	77fb      	strb	r3, [r7, #31]
          goto error;
 800492a:	e026      	b.n	800497a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1cd      	bne.n	80048d2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	6839      	ldr	r1, [r7, #0]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 fbcc 	bl	80050d8 <SPI_EndRxTxTransaction>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2220      	movs	r2, #32
 800494a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004954:	2300      	movs	r3, #0
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	e000      	b.n	800497a <HAL_SPI_Transmit+0x25e>
  }

error:
 8004978:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800498a:	7ffb      	ldrb	r3, [r7, #31]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3720      	adds	r7, #32
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af02      	add	r7, sp, #8
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	4613      	mov	r3, r2
 80049a2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049b0:	d112      	bne.n	80049d8 <HAL_SPI_Receive+0x44>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10e      	bne.n	80049d8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2204      	movs	r2, #4
 80049be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80049c2:	88fa      	ldrh	r2, [r7, #6]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	4613      	mov	r3, r2
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	68b9      	ldr	r1, [r7, #8]
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f8f1 	bl	8004bb6 <HAL_SPI_TransmitReceive>
 80049d4:	4603      	mov	r3, r0
 80049d6:	e0ea      	b.n	8004bae <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_SPI_Receive+0x52>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e0e3      	b.n	8004bae <HAL_SPI_Receive+0x21a>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049ee:	f7fd ff53 	bl	8002898 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d002      	beq.n	8004a06 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004a00:	2302      	movs	r3, #2
 8004a02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a04:	e0ca      	b.n	8004b9c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <HAL_SPI_Receive+0x7e>
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d102      	bne.n	8004a18 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a16:	e0c1      	b.n	8004b9c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	88fa      	ldrh	r2, [r7, #6]
 8004a30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	88fa      	ldrh	r2, [r7, #6]
 8004a36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a5e:	d10f      	bne.n	8004a80 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a7e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8a:	2b40      	cmp	r3, #64	; 0x40
 8004a8c:	d007      	beq.n	8004a9e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a9c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d162      	bne.n	8004b6c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004aa6:	e02e      	b.n	8004b06 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d115      	bne.n	8004ae2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f103 020c 	add.w	r2, r3, #12
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac2:	7812      	ldrb	r2, [r2, #0]
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ae0:	e011      	b.n	8004b06 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ae2:	f7fd fed9 	bl	8002898 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d803      	bhi.n	8004afa <HAL_SPI_Receive+0x166>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d102      	bne.n	8004b00 <HAL_SPI_Receive+0x16c>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d102      	bne.n	8004b06 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b04:	e04a      	b.n	8004b9c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1cb      	bne.n	8004aa8 <HAL_SPI_Receive+0x114>
 8004b10:	e031      	b.n	8004b76 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d113      	bne.n	8004b48 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	b292      	uxth	r2, r2
 8004b2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	1c9a      	adds	r2, r3, #2
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b46:	e011      	b.n	8004b6c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b48:	f7fd fea6 	bl	8002898 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d803      	bhi.n	8004b60 <HAL_SPI_Receive+0x1cc>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d102      	bne.n	8004b66 <HAL_SPI_Receive+0x1d2>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b6a:	e017      	b.n	8004b9c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1cd      	bne.n	8004b12 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fa46 	bl	800500c <SPI_EndRxTransaction>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	75fb      	strb	r3, [r7, #23]
 8004b98:	e000      	b.n	8004b9c <HAL_SPI_Receive+0x208>
  }

error :
 8004b9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b08c      	sub	sp, #48	; 0x30
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	607a      	str	r2, [r7, #4]
 8004bc2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_SPI_TransmitReceive+0x26>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e18a      	b.n	8004ef2 <HAL_SPI_TransmitReceive+0x33c>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004be4:	f7fd fe58 	bl	8002898 <HAL_GetTick>
 8004be8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004bfa:	887b      	ldrh	r3, [r7, #2]
 8004bfc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d00f      	beq.n	8004c26 <HAL_SPI_TransmitReceive+0x70>
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c0c:	d107      	bne.n	8004c1e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d103      	bne.n	8004c1e <HAL_SPI_TransmitReceive+0x68>
 8004c16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d003      	beq.n	8004c26 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c1e:	2302      	movs	r3, #2
 8004c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c24:	e15b      	b.n	8004ede <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_SPI_TransmitReceive+0x82>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d002      	beq.n	8004c38 <HAL_SPI_TransmitReceive+0x82>
 8004c32:	887b      	ldrh	r3, [r7, #2]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d103      	bne.n	8004c40 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c3e:	e14e      	b.n	8004ede <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d003      	beq.n	8004c54 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2205      	movs	r2, #5
 8004c50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	887a      	ldrh	r2, [r7, #2]
 8004c64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	887a      	ldrh	r2, [r7, #2]
 8004c6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	887a      	ldrh	r2, [r7, #2]
 8004c76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	887a      	ldrh	r2, [r7, #2]
 8004c7c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c94:	2b40      	cmp	r3, #64	; 0x40
 8004c96:	d007      	beq.n	8004ca8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb0:	d178      	bne.n	8004da4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_SPI_TransmitReceive+0x10a>
 8004cba:	8b7b      	ldrh	r3, [r7, #26]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d166      	bne.n	8004d8e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	881a      	ldrh	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	1c9a      	adds	r2, r3, #2
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ce4:	e053      	b.n	8004d8e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d11b      	bne.n	8004d2c <HAL_SPI_TransmitReceive+0x176>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d016      	beq.n	8004d2c <HAL_SPI_TransmitReceive+0x176>
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d113      	bne.n	8004d2c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d08:	881a      	ldrh	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	1c9a      	adds	r2, r3, #2
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d119      	bne.n	8004d6e <HAL_SPI_TransmitReceive+0x1b8>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d014      	beq.n	8004d6e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	b292      	uxth	r2, r2
 8004d50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	1c9a      	adds	r2, r3, #2
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d6e:	f7fd fd93 	bl	8002898 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d807      	bhi.n	8004d8e <HAL_SPI_TransmitReceive+0x1d8>
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d84:	d003      	beq.n	8004d8e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d8c:	e0a7      	b.n	8004ede <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1a6      	bne.n	8004ce6 <HAL_SPI_TransmitReceive+0x130>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1a1      	bne.n	8004ce6 <HAL_SPI_TransmitReceive+0x130>
 8004da2:	e07c      	b.n	8004e9e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <HAL_SPI_TransmitReceive+0x1fc>
 8004dac:	8b7b      	ldrh	r3, [r7, #26]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d16b      	bne.n	8004e8a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	330c      	adds	r3, #12
 8004dbc:	7812      	ldrb	r2, [r2, #0]
 8004dbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dd8:	e057      	b.n	8004e8a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d11c      	bne.n	8004e22 <HAL_SPI_TransmitReceive+0x26c>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d017      	beq.n	8004e22 <HAL_SPI_TransmitReceive+0x26c>
 8004df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d114      	bne.n	8004e22 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	330c      	adds	r3, #12
 8004e02:	7812      	ldrb	r2, [r2, #0]
 8004e04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d119      	bne.n	8004e64 <HAL_SPI_TransmitReceive+0x2ae>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d014      	beq.n	8004e64 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e60:	2301      	movs	r3, #1
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e64:	f7fd fd18 	bl	8002898 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d803      	bhi.n	8004e7c <HAL_SPI_TransmitReceive+0x2c6>
 8004e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7a:	d102      	bne.n	8004e82 <HAL_SPI_TransmitReceive+0x2cc>
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d103      	bne.n	8004e8a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e88:	e029      	b.n	8004ede <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1a2      	bne.n	8004dda <HAL_SPI_TransmitReceive+0x224>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d19d      	bne.n	8004dda <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f918 	bl	80050d8 <SPI_EndRxTxTransaction>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d006      	beq.n	8004ebc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004eba:	e010      	b.n	8004ede <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10b      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	e000      	b.n	8004ede <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004edc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004eee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3730      	adds	r7, #48	; 0x30
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f0c:	f7fd fcc4 	bl	8002898 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	4413      	add	r3, r2
 8004f1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f1c:	f7fd fcbc 	bl	8002898 <HAL_GetTick>
 8004f20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f22:	4b39      	ldr	r3, [pc, #228]	; (8005008 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	015b      	lsls	r3, r3, #5
 8004f28:	0d1b      	lsrs	r3, r3, #20
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	fb02 f303 	mul.w	r3, r2, r3
 8004f30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f32:	e054      	b.n	8004fde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3a:	d050      	beq.n	8004fde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f3c:	f7fd fcac 	bl	8002898 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	69fa      	ldr	r2, [r7, #28]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d902      	bls.n	8004f52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d13d      	bne.n	8004fce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f6a:	d111      	bne.n	8004f90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f74:	d004      	beq.n	8004f80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f7e:	d107      	bne.n	8004f90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f98:	d10f      	bne.n	8004fba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e017      	b.n	8004ffe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	bf0c      	ite	eq
 8004fee:	2301      	moveq	r3, #1
 8004ff0:	2300      	movne	r3, #0
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	79fb      	ldrb	r3, [r7, #7]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d19b      	bne.n	8004f34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3720      	adds	r7, #32
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20000000 	.word	0x20000000

0800500c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005020:	d111      	bne.n	8005046 <SPI_EndRxTransaction+0x3a>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800502a:	d004      	beq.n	8005036 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005034:	d107      	bne.n	8005046 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005044:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800504e:	d12a      	bne.n	80050a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005058:	d012      	beq.n	8005080 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2200      	movs	r2, #0
 8005062:	2180      	movs	r1, #128	; 0x80
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f7ff ff49 	bl	8004efc <SPI_WaitFlagStateUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d02d      	beq.n	80050cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005074:	f043 0220 	orr.w	r2, r3, #32
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e026      	b.n	80050ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2200      	movs	r2, #0
 8005088:	2101      	movs	r1, #1
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff ff36 	bl	8004efc <SPI_WaitFlagStateUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d01a      	beq.n	80050cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509a:	f043 0220 	orr.w	r2, r3, #32
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e013      	b.n	80050ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2200      	movs	r2, #0
 80050ae:	2101      	movs	r1, #1
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7ff ff23 	bl	8004efc <SPI_WaitFlagStateUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d007      	beq.n	80050cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c0:	f043 0220 	orr.w	r2, r3, #32
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e000      	b.n	80050ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050e4:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <SPI_EndRxTxTransaction+0x7c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1b      	ldr	r2, [pc, #108]	; (8005158 <SPI_EndRxTxTransaction+0x80>)
 80050ea:	fba2 2303 	umull	r2, r3, r2, r3
 80050ee:	0d5b      	lsrs	r3, r3, #21
 80050f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050f4:	fb02 f303 	mul.w	r3, r2, r3
 80050f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005102:	d112      	bne.n	800512a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2200      	movs	r2, #0
 800510c:	2180      	movs	r1, #128	; 0x80
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fef4 	bl	8004efc <SPI_WaitFlagStateUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d016      	beq.n	8005148 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511e:	f043 0220 	orr.w	r2, r3, #32
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e00f      	b.n	800514a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	3b01      	subs	r3, #1
 8005134:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005140:	2b80      	cmp	r3, #128	; 0x80
 8005142:	d0f2      	beq.n	800512a <SPI_EndRxTxTransaction+0x52>
 8005144:	e000      	b.n	8005148 <SPI_EndRxTxTransaction+0x70>
        break;
 8005146:	bf00      	nop
  }

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000000 	.word	0x20000000
 8005158:	165e9f81 	.word	0x165e9f81

0800515c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e041      	b.n	80051f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fc fd0c 	bl	8001ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3304      	adds	r3, #4
 8005198:	4619      	mov	r1, r3
 800519a:	4610      	mov	r0, r2
 800519c:	f000 fe44 	bl	8005e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	d001      	beq.n	8005214 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e046      	b.n	80052a2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a23      	ldr	r2, [pc, #140]	; (80052b0 <HAL_TIM_Base_Start+0xb4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d022      	beq.n	800526c <HAL_TIM_Base_Start+0x70>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522e:	d01d      	beq.n	800526c <HAL_TIM_Base_Start+0x70>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a1f      	ldr	r2, [pc, #124]	; (80052b4 <HAL_TIM_Base_Start+0xb8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d018      	beq.n	800526c <HAL_TIM_Base_Start+0x70>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1e      	ldr	r2, [pc, #120]	; (80052b8 <HAL_TIM_Base_Start+0xbc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d013      	beq.n	800526c <HAL_TIM_Base_Start+0x70>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a1c      	ldr	r2, [pc, #112]	; (80052bc <HAL_TIM_Base_Start+0xc0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00e      	beq.n	800526c <HAL_TIM_Base_Start+0x70>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a1b      	ldr	r2, [pc, #108]	; (80052c0 <HAL_TIM_Base_Start+0xc4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d009      	beq.n	800526c <HAL_TIM_Base_Start+0x70>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a19      	ldr	r2, [pc, #100]	; (80052c4 <HAL_TIM_Base_Start+0xc8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d004      	beq.n	800526c <HAL_TIM_Base_Start+0x70>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a18      	ldr	r2, [pc, #96]	; (80052c8 <HAL_TIM_Base_Start+0xcc>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d111      	bne.n	8005290 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b06      	cmp	r3, #6
 800527c:	d010      	beq.n	80052a0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f042 0201 	orr.w	r2, r2, #1
 800528c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528e:	e007      	b.n	80052a0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40010000 	.word	0x40010000
 80052b4:	40000400 	.word	0x40000400
 80052b8:	40000800 	.word	0x40000800
 80052bc:	40000c00 	.word	0x40000c00
 80052c0:	40010400 	.word	0x40010400
 80052c4:	40014000 	.word	0x40014000
 80052c8:	40001800 	.word	0x40001800

080052cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d001      	beq.n	80052e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e04e      	b.n	8005382 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0201 	orr.w	r2, r2, #1
 80052fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a23      	ldr	r2, [pc, #140]	; (8005390 <HAL_TIM_Base_Start_IT+0xc4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d022      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x80>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530e:	d01d      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x80>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1f      	ldr	r2, [pc, #124]	; (8005394 <HAL_TIM_Base_Start_IT+0xc8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d018      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x80>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a1e      	ldr	r2, [pc, #120]	; (8005398 <HAL_TIM_Base_Start_IT+0xcc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d013      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x80>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a1c      	ldr	r2, [pc, #112]	; (800539c <HAL_TIM_Base_Start_IT+0xd0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00e      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x80>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a1b      	ldr	r2, [pc, #108]	; (80053a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d009      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x80>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a19      	ldr	r2, [pc, #100]	; (80053a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d004      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x80>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a18      	ldr	r2, [pc, #96]	; (80053a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d111      	bne.n	8005370 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b06      	cmp	r3, #6
 800535c:	d010      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 0201 	orr.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536e:	e007      	b.n	8005380 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40010000 	.word	0x40010000
 8005394:	40000400 	.word	0x40000400
 8005398:	40000800 	.word	0x40000800
 800539c:	40000c00 	.word	0x40000c00
 80053a0:	40010400 	.word	0x40010400
 80053a4:	40014000 	.word	0x40014000
 80053a8:	40001800 	.word	0x40001800

080053ac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0201 	bic.w	r2, r2, #1
 80053c2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6a1a      	ldr	r2, [r3, #32]
 80053ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80053ce:	4013      	ands	r3, r2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10f      	bne.n	80053f4 <HAL_TIM_Base_Stop_IT+0x48>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6a1a      	ldr	r2, [r3, #32]
 80053da:	f240 4344 	movw	r3, #1092	; 0x444
 80053de:	4013      	ands	r3, r2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d107      	bne.n	80053f4 <HAL_TIM_Base_Stop_IT+0x48>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0201 	bic.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e041      	b.n	80054a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d106      	bne.n	8005436 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f839 	bl	80054a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2202      	movs	r2, #2
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3304      	adds	r3, #4
 8005446:	4619      	mov	r1, r3
 8005448:	4610      	mov	r0, r2
 800544a:	f000 fced 	bl	8005e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d109      	bne.n	80054e0 <HAL_TIM_PWM_Start+0x24>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	bf14      	ite	ne
 80054d8:	2301      	movne	r3, #1
 80054da:	2300      	moveq	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	e022      	b.n	8005526 <HAL_TIM_PWM_Start+0x6a>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d109      	bne.n	80054fa <HAL_TIM_PWM_Start+0x3e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	bf14      	ite	ne
 80054f2:	2301      	movne	r3, #1
 80054f4:	2300      	moveq	r3, #0
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	e015      	b.n	8005526 <HAL_TIM_PWM_Start+0x6a>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d109      	bne.n	8005514 <HAL_TIM_PWM_Start+0x58>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b01      	cmp	r3, #1
 800550a:	bf14      	ite	ne
 800550c:	2301      	movne	r3, #1
 800550e:	2300      	moveq	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	e008      	b.n	8005526 <HAL_TIM_PWM_Start+0x6a>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	bf14      	ite	ne
 8005520:	2301      	movne	r3, #1
 8005522:	2300      	moveq	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e07c      	b.n	8005628 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <HAL_TIM_PWM_Start+0x82>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800553c:	e013      	b.n	8005566 <HAL_TIM_PWM_Start+0xaa>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b04      	cmp	r3, #4
 8005542:	d104      	bne.n	800554e <HAL_TIM_PWM_Start+0x92>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800554c:	e00b      	b.n	8005566 <HAL_TIM_PWM_Start+0xaa>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b08      	cmp	r3, #8
 8005552:	d104      	bne.n	800555e <HAL_TIM_PWM_Start+0xa2>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800555c:	e003      	b.n	8005566 <HAL_TIM_PWM_Start+0xaa>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2202      	movs	r2, #2
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2201      	movs	r2, #1
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 ff44 	bl	80063fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a2d      	ldr	r2, [pc, #180]	; (8005630 <HAL_TIM_PWM_Start+0x174>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d004      	beq.n	8005588 <HAL_TIM_PWM_Start+0xcc>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a2c      	ldr	r2, [pc, #176]	; (8005634 <HAL_TIM_PWM_Start+0x178>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d101      	bne.n	800558c <HAL_TIM_PWM_Start+0xd0>
 8005588:	2301      	movs	r3, #1
 800558a:	e000      	b.n	800558e <HAL_TIM_PWM_Start+0xd2>
 800558c:	2300      	movs	r3, #0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a22      	ldr	r2, [pc, #136]	; (8005630 <HAL_TIM_PWM_Start+0x174>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d022      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b4:	d01d      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1f      	ldr	r2, [pc, #124]	; (8005638 <HAL_TIM_PWM_Start+0x17c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d018      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1d      	ldr	r2, [pc, #116]	; (800563c <HAL_TIM_PWM_Start+0x180>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d013      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1c      	ldr	r2, [pc, #112]	; (8005640 <HAL_TIM_PWM_Start+0x184>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00e      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a16      	ldr	r2, [pc, #88]	; (8005634 <HAL_TIM_PWM_Start+0x178>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d009      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a18      	ldr	r2, [pc, #96]	; (8005644 <HAL_TIM_PWM_Start+0x188>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d004      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a16      	ldr	r2, [pc, #88]	; (8005648 <HAL_TIM_PWM_Start+0x18c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d111      	bne.n	8005616 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b06      	cmp	r3, #6
 8005602:	d010      	beq.n	8005626 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005614:	e007      	b.n	8005626 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0201 	orr.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40010000 	.word	0x40010000
 8005634:	40010400 	.word	0x40010400
 8005638:	40000400 	.word	0x40000400
 800563c:	40000800 	.word	0x40000800
 8005640:	40000c00 	.word	0x40000c00
 8005644:	40014000 	.word	0x40014000
 8005648:	40001800 	.word	0x40001800

0800564c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e097      	b.n	8005790 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d106      	bne.n	800567a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7fc fb39 	bl	8001cec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2202      	movs	r2, #2
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6812      	ldr	r2, [r2, #0]
 800568c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005690:	f023 0307 	bic.w	r3, r3, #7
 8005694:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3304      	adds	r3, #4
 800569e:	4619      	mov	r1, r3
 80056a0:	4610      	mov	r0, r2
 80056a2:	f000 fbc1 	bl	8005e28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ce:	f023 0303 	bic.w	r3, r3, #3
 80056d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	021b      	lsls	r3, r3, #8
 80056de:	4313      	orrs	r3, r2
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80056ec:	f023 030c 	bic.w	r3, r3, #12
 80056f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	021b      	lsls	r3, r3, #8
 8005708:	4313      	orrs	r3, r2
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	011a      	lsls	r2, r3, #4
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	031b      	lsls	r3, r3, #12
 800571c:	4313      	orrs	r3, r2
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800572a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005732:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	4313      	orrs	r3, r2
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80057c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d110      	bne.n	80057ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d102      	bne.n	80057d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80057ce:	7b7b      	ldrb	r3, [r7, #13]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d001      	beq.n	80057d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e069      	b.n	80058ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057e8:	e031      	b.n	800584e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d110      	bne.n	8005812 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057f0:	7bbb      	ldrb	r3, [r7, #14]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d102      	bne.n	80057fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057f6:	7b3b      	ldrb	r3, [r7, #12]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d001      	beq.n	8005800 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e055      	b.n	80058ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005810:	e01d      	b.n	800584e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005812:	7bfb      	ldrb	r3, [r7, #15]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d108      	bne.n	800582a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005818:	7bbb      	ldrb	r3, [r7, #14]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d105      	bne.n	800582a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800581e:	7b7b      	ldrb	r3, [r7, #13]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d102      	bne.n	800582a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005824:	7b3b      	ldrb	r3, [r7, #12]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d001      	beq.n	800582e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e03e      	b.n	80058ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2202      	movs	r2, #2
 8005832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2202      	movs	r2, #2
 800583a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2202      	movs	r2, #2
 800584a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <HAL_TIM_Encoder_Start+0xc4>
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b04      	cmp	r3, #4
 8005858:	d008      	beq.n	800586c <HAL_TIM_Encoder_Start+0xd4>
 800585a:	e00f      	b.n	800587c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2201      	movs	r2, #1
 8005862:	2100      	movs	r1, #0
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fdc9 	bl	80063fc <TIM_CCxChannelCmd>
      break;
 800586a:	e016      	b.n	800589a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2201      	movs	r2, #1
 8005872:	2104      	movs	r1, #4
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fdc1 	bl	80063fc <TIM_CCxChannelCmd>
      break;
 800587a:	e00e      	b.n	800589a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2201      	movs	r2, #1
 8005882:	2100      	movs	r1, #0
 8005884:	4618      	mov	r0, r3
 8005886:	f000 fdb9 	bl	80063fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2201      	movs	r2, #1
 8005890:	2104      	movs	r1, #4
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fdb2 	bl	80063fc <TIM_CCxChannelCmd>
      break;
 8005898:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0201 	orr.w	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d122      	bne.n	8005910 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d11b      	bne.n	8005910 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0202 	mvn.w	r2, #2
 80058e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fa77 	bl	8005dea <HAL_TIM_IC_CaptureCallback>
 80058fc:	e005      	b.n	800590a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fa69 	bl	8005dd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fa7a 	bl	8005dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b04      	cmp	r3, #4
 800591c:	d122      	bne.n	8005964 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b04      	cmp	r3, #4
 800592a:	d11b      	bne.n	8005964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0204 	mvn.w	r2, #4
 8005934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fa4d 	bl	8005dea <HAL_TIM_IC_CaptureCallback>
 8005950:	e005      	b.n	800595e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fa3f 	bl	8005dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fa50 	bl	8005dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b08      	cmp	r3, #8
 8005970:	d122      	bne.n	80059b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b08      	cmp	r3, #8
 800597e:	d11b      	bne.n	80059b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0208 	mvn.w	r2, #8
 8005988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2204      	movs	r2, #4
 800598e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fa23 	bl	8005dea <HAL_TIM_IC_CaptureCallback>
 80059a4:	e005      	b.n	80059b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fa15 	bl	8005dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 fa26 	bl	8005dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f003 0310 	and.w	r3, r3, #16
 80059c2:	2b10      	cmp	r3, #16
 80059c4:	d122      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	2b10      	cmp	r3, #16
 80059d2:	d11b      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f06f 0210 	mvn.w	r2, #16
 80059dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2208      	movs	r2, #8
 80059e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f9f9 	bl	8005dea <HAL_TIM_IC_CaptureCallback>
 80059f8:	e005      	b.n	8005a06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f9eb 	bl	8005dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f9fc 	bl	8005dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d10e      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d107      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0201 	mvn.w	r2, #1
 8005a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f002 f954 	bl	8007ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a42:	2b80      	cmp	r3, #128	; 0x80
 8005a44:	d10e      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a50:	2b80      	cmp	r3, #128	; 0x80
 8005a52:	d107      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fd78 	bl	8006554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d10e      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7c:	2b40      	cmp	r3, #64	; 0x40
 8005a7e:	d107      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f9c1 	bl	8005e12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	d10e      	bne.n	8005abc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f003 0320 	and.w	r3, r3, #32
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d107      	bne.n	8005abc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0220 	mvn.w	r2, #32
 8005ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fd42 	bl	8006540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005abc:	bf00      	nop
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e0ae      	b.n	8005c40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b0c      	cmp	r3, #12
 8005aee:	f200 809f 	bhi.w	8005c30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005af2:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af8:	08005b2d 	.word	0x08005b2d
 8005afc:	08005c31 	.word	0x08005c31
 8005b00:	08005c31 	.word	0x08005c31
 8005b04:	08005c31 	.word	0x08005c31
 8005b08:	08005b6d 	.word	0x08005b6d
 8005b0c:	08005c31 	.word	0x08005c31
 8005b10:	08005c31 	.word	0x08005c31
 8005b14:	08005c31 	.word	0x08005c31
 8005b18:	08005baf 	.word	0x08005baf
 8005b1c:	08005c31 	.word	0x08005c31
 8005b20:	08005c31 	.word	0x08005c31
 8005b24:	08005c31 	.word	0x08005c31
 8005b28:	08005bef 	.word	0x08005bef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68b9      	ldr	r1, [r7, #8]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 fa18 	bl	8005f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0208 	orr.w	r2, r2, #8
 8005b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0204 	bic.w	r2, r2, #4
 8005b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6999      	ldr	r1, [r3, #24]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	619a      	str	r2, [r3, #24]
      break;
 8005b6a:	e064      	b.n	8005c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fa68 	bl	8006048 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6999      	ldr	r1, [r3, #24]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	021a      	lsls	r2, r3, #8
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	619a      	str	r2, [r3, #24]
      break;
 8005bac:	e043      	b.n	8005c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fabd 	bl	8006134 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69da      	ldr	r2, [r3, #28]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0208 	orr.w	r2, r2, #8
 8005bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69da      	ldr	r2, [r3, #28]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0204 	bic.w	r2, r2, #4
 8005bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69d9      	ldr	r1, [r3, #28]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	61da      	str	r2, [r3, #28]
      break;
 8005bec:	e023      	b.n	8005c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 fb11 	bl	800621c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69d9      	ldr	r1, [r3, #28]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	021a      	lsls	r2, r3, #8
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	61da      	str	r2, [r3, #28]
      break;
 8005c2e:	e002      	b.n	8005c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	75fb      	strb	r3, [r7, #23]
      break;
 8005c34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_TIM_ConfigClockSource+0x1c>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e0b4      	b.n	8005dce <HAL_TIM_ConfigClockSource+0x186>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c9c:	d03e      	beq.n	8005d1c <HAL_TIM_ConfigClockSource+0xd4>
 8005c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ca2:	f200 8087 	bhi.w	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005caa:	f000 8086 	beq.w	8005dba <HAL_TIM_ConfigClockSource+0x172>
 8005cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb2:	d87f      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb4:	2b70      	cmp	r3, #112	; 0x70
 8005cb6:	d01a      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0xa6>
 8005cb8:	2b70      	cmp	r3, #112	; 0x70
 8005cba:	d87b      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cbc:	2b60      	cmp	r3, #96	; 0x60
 8005cbe:	d050      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x11a>
 8005cc0:	2b60      	cmp	r3, #96	; 0x60
 8005cc2:	d877      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc4:	2b50      	cmp	r3, #80	; 0x50
 8005cc6:	d03c      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0xfa>
 8005cc8:	2b50      	cmp	r3, #80	; 0x50
 8005cca:	d873      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	d058      	beq.n	8005d82 <HAL_TIM_ConfigClockSource+0x13a>
 8005cd0:	2b40      	cmp	r3, #64	; 0x40
 8005cd2:	d86f      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd4:	2b30      	cmp	r3, #48	; 0x30
 8005cd6:	d064      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x15a>
 8005cd8:	2b30      	cmp	r3, #48	; 0x30
 8005cda:	d86b      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d060      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	d867      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d05c      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	d05a      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x15a>
 8005cec:	e062      	b.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6899      	ldr	r1, [r3, #8]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f000 fb5d 	bl	80063bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	609a      	str	r2, [r3, #8]
      break;
 8005d1a:	e04f      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6818      	ldr	r0, [r3, #0]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	6899      	ldr	r1, [r3, #8]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f000 fb46 	bl	80063bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689a      	ldr	r2, [r3, #8]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d3e:	609a      	str	r2, [r3, #8]
      break;
 8005d40:	e03c      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6859      	ldr	r1, [r3, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f000 faba 	bl	80062c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2150      	movs	r1, #80	; 0x50
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fb13 	bl	8006386 <TIM_ITRx_SetConfig>
      break;
 8005d60:	e02c      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6818      	ldr	r0, [r3, #0]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	6859      	ldr	r1, [r3, #4]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f000 fad9 	bl	8006326 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2160      	movs	r1, #96	; 0x60
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fb03 	bl	8006386 <TIM_ITRx_SetConfig>
      break;
 8005d80:	e01c      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6859      	ldr	r1, [r3, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f000 fa9a 	bl	80062c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2140      	movs	r1, #64	; 0x40
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 faf3 	bl	8006386 <TIM_ITRx_SetConfig>
      break;
 8005da0:	e00c      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4619      	mov	r1, r3
 8005dac:	4610      	mov	r0, r2
 8005dae:	f000 faea 	bl	8006386 <TIM_ITRx_SetConfig>
      break;
 8005db2:	e003      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	73fb      	strb	r3, [r7, #15]
      break;
 8005db8:	e000      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a40      	ldr	r2, [pc, #256]	; (8005f3c <TIM_Base_SetConfig+0x114>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d013      	beq.n	8005e68 <TIM_Base_SetConfig+0x40>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e46:	d00f      	beq.n	8005e68 <TIM_Base_SetConfig+0x40>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a3d      	ldr	r2, [pc, #244]	; (8005f40 <TIM_Base_SetConfig+0x118>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d00b      	beq.n	8005e68 <TIM_Base_SetConfig+0x40>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a3c      	ldr	r2, [pc, #240]	; (8005f44 <TIM_Base_SetConfig+0x11c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d007      	beq.n	8005e68 <TIM_Base_SetConfig+0x40>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a3b      	ldr	r2, [pc, #236]	; (8005f48 <TIM_Base_SetConfig+0x120>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d003      	beq.n	8005e68 <TIM_Base_SetConfig+0x40>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a3a      	ldr	r2, [pc, #232]	; (8005f4c <TIM_Base_SetConfig+0x124>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d108      	bne.n	8005e7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a2f      	ldr	r2, [pc, #188]	; (8005f3c <TIM_Base_SetConfig+0x114>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d02b      	beq.n	8005eda <TIM_Base_SetConfig+0xb2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e88:	d027      	beq.n	8005eda <TIM_Base_SetConfig+0xb2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a2c      	ldr	r2, [pc, #176]	; (8005f40 <TIM_Base_SetConfig+0x118>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d023      	beq.n	8005eda <TIM_Base_SetConfig+0xb2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a2b      	ldr	r2, [pc, #172]	; (8005f44 <TIM_Base_SetConfig+0x11c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d01f      	beq.n	8005eda <TIM_Base_SetConfig+0xb2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a2a      	ldr	r2, [pc, #168]	; (8005f48 <TIM_Base_SetConfig+0x120>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d01b      	beq.n	8005eda <TIM_Base_SetConfig+0xb2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a29      	ldr	r2, [pc, #164]	; (8005f4c <TIM_Base_SetConfig+0x124>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d017      	beq.n	8005eda <TIM_Base_SetConfig+0xb2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a28      	ldr	r2, [pc, #160]	; (8005f50 <TIM_Base_SetConfig+0x128>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d013      	beq.n	8005eda <TIM_Base_SetConfig+0xb2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a27      	ldr	r2, [pc, #156]	; (8005f54 <TIM_Base_SetConfig+0x12c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00f      	beq.n	8005eda <TIM_Base_SetConfig+0xb2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a26      	ldr	r2, [pc, #152]	; (8005f58 <TIM_Base_SetConfig+0x130>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d00b      	beq.n	8005eda <TIM_Base_SetConfig+0xb2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a25      	ldr	r2, [pc, #148]	; (8005f5c <TIM_Base_SetConfig+0x134>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d007      	beq.n	8005eda <TIM_Base_SetConfig+0xb2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a24      	ldr	r2, [pc, #144]	; (8005f60 <TIM_Base_SetConfig+0x138>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d003      	beq.n	8005eda <TIM_Base_SetConfig+0xb2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a23      	ldr	r2, [pc, #140]	; (8005f64 <TIM_Base_SetConfig+0x13c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d108      	bne.n	8005eec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a0a      	ldr	r2, [pc, #40]	; (8005f3c <TIM_Base_SetConfig+0x114>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d003      	beq.n	8005f20 <TIM_Base_SetConfig+0xf8>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a0c      	ldr	r2, [pc, #48]	; (8005f4c <TIM_Base_SetConfig+0x124>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d103      	bne.n	8005f28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	615a      	str	r2, [r3, #20]
}
 8005f2e:	bf00      	nop
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40010000 	.word	0x40010000
 8005f40:	40000400 	.word	0x40000400
 8005f44:	40000800 	.word	0x40000800
 8005f48:	40000c00 	.word	0x40000c00
 8005f4c:	40010400 	.word	0x40010400
 8005f50:	40014000 	.word	0x40014000
 8005f54:	40014400 	.word	0x40014400
 8005f58:	40014800 	.word	0x40014800
 8005f5c:	40001800 	.word	0x40001800
 8005f60:	40001c00 	.word	0x40001c00
 8005f64:	40002000 	.word	0x40002000

08005f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	f023 0201 	bic.w	r2, r3, #1
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0303 	bic.w	r3, r3, #3
 8005f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f023 0302 	bic.w	r3, r3, #2
 8005fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a20      	ldr	r2, [pc, #128]	; (8006040 <TIM_OC1_SetConfig+0xd8>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d003      	beq.n	8005fcc <TIM_OC1_SetConfig+0x64>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a1f      	ldr	r2, [pc, #124]	; (8006044 <TIM_OC1_SetConfig+0xdc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d10c      	bne.n	8005fe6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f023 0308 	bic.w	r3, r3, #8
 8005fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f023 0304 	bic.w	r3, r3, #4
 8005fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a15      	ldr	r2, [pc, #84]	; (8006040 <TIM_OC1_SetConfig+0xd8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d003      	beq.n	8005ff6 <TIM_OC1_SetConfig+0x8e>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a14      	ldr	r2, [pc, #80]	; (8006044 <TIM_OC1_SetConfig+0xdc>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d111      	bne.n	800601a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	4313      	orrs	r3, r2
 8006018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	621a      	str	r2, [r3, #32]
}
 8006034:	bf00      	nop
 8006036:	371c      	adds	r7, #28
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	40010000 	.word	0x40010000
 8006044:	40010400 	.word	0x40010400

08006048 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f023 0210 	bic.w	r2, r3, #16
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800607e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	021b      	lsls	r3, r3, #8
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f023 0320 	bic.w	r3, r3, #32
 8006092:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	011b      	lsls	r3, r3, #4
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a22      	ldr	r2, [pc, #136]	; (800612c <TIM_OC2_SetConfig+0xe4>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d003      	beq.n	80060b0 <TIM_OC2_SetConfig+0x68>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a21      	ldr	r2, [pc, #132]	; (8006130 <TIM_OC2_SetConfig+0xe8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d10d      	bne.n	80060cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	011b      	lsls	r3, r3, #4
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a17      	ldr	r2, [pc, #92]	; (800612c <TIM_OC2_SetConfig+0xe4>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d003      	beq.n	80060dc <TIM_OC2_SetConfig+0x94>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a16      	ldr	r2, [pc, #88]	; (8006130 <TIM_OC2_SetConfig+0xe8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d113      	bne.n	8006104 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	40010000 	.word	0x40010000
 8006130:	40010400 	.word	0x40010400

08006134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0303 	bic.w	r3, r3, #3
 800616a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800617c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a21      	ldr	r2, [pc, #132]	; (8006214 <TIM_OC3_SetConfig+0xe0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d003      	beq.n	800619a <TIM_OC3_SetConfig+0x66>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a20      	ldr	r2, [pc, #128]	; (8006218 <TIM_OC3_SetConfig+0xe4>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d10d      	bne.n	80061b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a16      	ldr	r2, [pc, #88]	; (8006214 <TIM_OC3_SetConfig+0xe0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d003      	beq.n	80061c6 <TIM_OC3_SetConfig+0x92>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a15      	ldr	r2, [pc, #84]	; (8006218 <TIM_OC3_SetConfig+0xe4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d113      	bne.n	80061ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	4313      	orrs	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	621a      	str	r2, [r3, #32]
}
 8006208:	bf00      	nop
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	40010000 	.word	0x40010000
 8006218:	40010400 	.word	0x40010400

0800621c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	021b      	lsls	r3, r3, #8
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4313      	orrs	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	031b      	lsls	r3, r3, #12
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a12      	ldr	r2, [pc, #72]	; (80062c0 <TIM_OC4_SetConfig+0xa4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_OC4_SetConfig+0x68>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a11      	ldr	r2, [pc, #68]	; (80062c4 <TIM_OC4_SetConfig+0xa8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d109      	bne.n	8006298 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800628a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	019b      	lsls	r3, r3, #6
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	621a      	str	r2, [r3, #32]
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40010000 	.word	0x40010000
 80062c4:	40010400 	.word	0x40010400

080062c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	f023 0201 	bic.w	r2, r3, #1
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	011b      	lsls	r3, r3, #4
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f023 030a 	bic.w	r3, r3, #10
 8006304:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4313      	orrs	r3, r2
 800630c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	621a      	str	r2, [r3, #32]
}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006326:	b480      	push	{r7}
 8006328:	b087      	sub	sp, #28
 800632a:	af00      	add	r7, sp, #0
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	f023 0210 	bic.w	r2, r3, #16
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006350:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	031b      	lsls	r3, r3, #12
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006362:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	621a      	str	r2, [r3, #32]
}
 800637a:	bf00      	nop
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006386:	b480      	push	{r7}
 8006388:	b085      	sub	sp, #20
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f043 0307 	orr.w	r3, r3, #7
 80063a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	609a      	str	r2, [r3, #8]
}
 80063b0:	bf00      	nop
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	021a      	lsls	r2, r3, #8
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	431a      	orrs	r2, r3
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	609a      	str	r2, [r3, #8]
}
 80063f0:	bf00      	nop
 80063f2:	371c      	adds	r7, #28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f003 031f 	and.w	r3, r3, #31
 800640e:	2201      	movs	r2, #1
 8006410:	fa02 f303 	lsl.w	r3, r2, r3
 8006414:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a1a      	ldr	r2, [r3, #32]
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	43db      	mvns	r3, r3
 800641e:	401a      	ands	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a1a      	ldr	r2, [r3, #32]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f003 031f 	and.w	r3, r3, #31
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	fa01 f303 	lsl.w	r3, r1, r3
 8006434:	431a      	orrs	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	621a      	str	r2, [r3, #32]
}
 800643a:	bf00      	nop
 800643c:	371c      	adds	r7, #28
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
	...

08006448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800645c:	2302      	movs	r3, #2
 800645e:	e05a      	b.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a21      	ldr	r2, [pc, #132]	; (8006524 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d022      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ac:	d01d      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1d      	ldr	r2, [pc, #116]	; (8006528 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d018      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1b      	ldr	r2, [pc, #108]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d013      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1a      	ldr	r2, [pc, #104]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00e      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a18      	ldr	r2, [pc, #96]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d009      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a17      	ldr	r2, [pc, #92]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d004      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a15      	ldr	r2, [pc, #84]	; (800653c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d10c      	bne.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	40010000 	.word	0x40010000
 8006528:	40000400 	.word	0x40000400
 800652c:	40000800 	.word	0x40000800
 8006530:	40000c00 	.word	0x40000c00
 8006534:	40010400 	.word	0x40010400
 8006538:	40014000 	.word	0x40014000
 800653c:	40001800 	.word	0x40001800

08006540 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e03f      	b.n	80065fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d106      	bne.n	8006594 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fb fca8 	bl	8001ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2224      	movs	r2, #36	; 0x24
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68da      	ldr	r2, [r3, #12]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f829 	bl	8006604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	691a      	ldr	r2, [r3, #16]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	695a      	ldr	r2, [r3, #20]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006608:	b0c0      	sub	sp, #256	; 0x100
 800660a:	af00      	add	r7, sp, #0
 800660c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800661c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006620:	68d9      	ldr	r1, [r3, #12]
 8006622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	ea40 0301 	orr.w	r3, r0, r1
 800662c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800662e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	431a      	orrs	r2, r3
 800663c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	431a      	orrs	r2, r3
 8006644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	4313      	orrs	r3, r2
 800664c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800665c:	f021 010c 	bic.w	r1, r1, #12
 8006660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800666a:	430b      	orrs	r3, r1
 800666c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800666e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800667a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667e:	6999      	ldr	r1, [r3, #24]
 8006680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	ea40 0301 	orr.w	r3, r0, r1
 800668a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	4b8f      	ldr	r3, [pc, #572]	; (80068d0 <UART_SetConfig+0x2cc>)
 8006694:	429a      	cmp	r2, r3
 8006696:	d005      	beq.n	80066a4 <UART_SetConfig+0xa0>
 8006698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b8d      	ldr	r3, [pc, #564]	; (80068d4 <UART_SetConfig+0x2d0>)
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d104      	bne.n	80066ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066a4:	f7fd ff82 	bl	80045ac <HAL_RCC_GetPCLK2Freq>
 80066a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066ac:	e003      	b.n	80066b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066ae:	f7fd ff69 	bl	8004584 <HAL_RCC_GetPCLK1Freq>
 80066b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c0:	f040 810c 	bne.w	80068dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80066d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80066d6:	4622      	mov	r2, r4
 80066d8:	462b      	mov	r3, r5
 80066da:	1891      	adds	r1, r2, r2
 80066dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80066de:	415b      	adcs	r3, r3
 80066e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80066e6:	4621      	mov	r1, r4
 80066e8:	eb12 0801 	adds.w	r8, r2, r1
 80066ec:	4629      	mov	r1, r5
 80066ee:	eb43 0901 	adc.w	r9, r3, r1
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	f04f 0300 	mov.w	r3, #0
 80066fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006706:	4690      	mov	r8, r2
 8006708:	4699      	mov	r9, r3
 800670a:	4623      	mov	r3, r4
 800670c:	eb18 0303 	adds.w	r3, r8, r3
 8006710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006714:	462b      	mov	r3, r5
 8006716:	eb49 0303 	adc.w	r3, r9, r3
 800671a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800671e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800672a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800672e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006732:	460b      	mov	r3, r1
 8006734:	18db      	adds	r3, r3, r3
 8006736:	653b      	str	r3, [r7, #80]	; 0x50
 8006738:	4613      	mov	r3, r2
 800673a:	eb42 0303 	adc.w	r3, r2, r3
 800673e:	657b      	str	r3, [r7, #84]	; 0x54
 8006740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006744:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006748:	f7fa fa7e 	bl	8000c48 <__aeabi_uldivmod>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4b61      	ldr	r3, [pc, #388]	; (80068d8 <UART_SetConfig+0x2d4>)
 8006752:	fba3 2302 	umull	r2, r3, r3, r2
 8006756:	095b      	lsrs	r3, r3, #5
 8006758:	011c      	lsls	r4, r3, #4
 800675a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800675e:	2200      	movs	r2, #0
 8006760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006764:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006768:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800676c:	4642      	mov	r2, r8
 800676e:	464b      	mov	r3, r9
 8006770:	1891      	adds	r1, r2, r2
 8006772:	64b9      	str	r1, [r7, #72]	; 0x48
 8006774:	415b      	adcs	r3, r3
 8006776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006778:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800677c:	4641      	mov	r1, r8
 800677e:	eb12 0a01 	adds.w	sl, r2, r1
 8006782:	4649      	mov	r1, r9
 8006784:	eb43 0b01 	adc.w	fp, r3, r1
 8006788:	f04f 0200 	mov.w	r2, #0
 800678c:	f04f 0300 	mov.w	r3, #0
 8006790:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006794:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800679c:	4692      	mov	sl, r2
 800679e:	469b      	mov	fp, r3
 80067a0:	4643      	mov	r3, r8
 80067a2:	eb1a 0303 	adds.w	r3, sl, r3
 80067a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067aa:	464b      	mov	r3, r9
 80067ac:	eb4b 0303 	adc.w	r3, fp, r3
 80067b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80067c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067c8:	460b      	mov	r3, r1
 80067ca:	18db      	adds	r3, r3, r3
 80067cc:	643b      	str	r3, [r7, #64]	; 0x40
 80067ce:	4613      	mov	r3, r2
 80067d0:	eb42 0303 	adc.w	r3, r2, r3
 80067d4:	647b      	str	r3, [r7, #68]	; 0x44
 80067d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80067de:	f7fa fa33 	bl	8000c48 <__aeabi_uldivmod>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	4611      	mov	r1, r2
 80067e8:	4b3b      	ldr	r3, [pc, #236]	; (80068d8 <UART_SetConfig+0x2d4>)
 80067ea:	fba3 2301 	umull	r2, r3, r3, r1
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	2264      	movs	r2, #100	; 0x64
 80067f2:	fb02 f303 	mul.w	r3, r2, r3
 80067f6:	1acb      	subs	r3, r1, r3
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80067fe:	4b36      	ldr	r3, [pc, #216]	; (80068d8 <UART_SetConfig+0x2d4>)
 8006800:	fba3 2302 	umull	r2, r3, r3, r2
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800680c:	441c      	add	r4, r3
 800680e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006812:	2200      	movs	r2, #0
 8006814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006818:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800681c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006820:	4642      	mov	r2, r8
 8006822:	464b      	mov	r3, r9
 8006824:	1891      	adds	r1, r2, r2
 8006826:	63b9      	str	r1, [r7, #56]	; 0x38
 8006828:	415b      	adcs	r3, r3
 800682a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800682c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006830:	4641      	mov	r1, r8
 8006832:	1851      	adds	r1, r2, r1
 8006834:	6339      	str	r1, [r7, #48]	; 0x30
 8006836:	4649      	mov	r1, r9
 8006838:	414b      	adcs	r3, r1
 800683a:	637b      	str	r3, [r7, #52]	; 0x34
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	f04f 0300 	mov.w	r3, #0
 8006844:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006848:	4659      	mov	r1, fp
 800684a:	00cb      	lsls	r3, r1, #3
 800684c:	4651      	mov	r1, sl
 800684e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006852:	4651      	mov	r1, sl
 8006854:	00ca      	lsls	r2, r1, #3
 8006856:	4610      	mov	r0, r2
 8006858:	4619      	mov	r1, r3
 800685a:	4603      	mov	r3, r0
 800685c:	4642      	mov	r2, r8
 800685e:	189b      	adds	r3, r3, r2
 8006860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006864:	464b      	mov	r3, r9
 8006866:	460a      	mov	r2, r1
 8006868:	eb42 0303 	adc.w	r3, r2, r3
 800686c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800687c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006880:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006884:	460b      	mov	r3, r1
 8006886:	18db      	adds	r3, r3, r3
 8006888:	62bb      	str	r3, [r7, #40]	; 0x28
 800688a:	4613      	mov	r3, r2
 800688c:	eb42 0303 	adc.w	r3, r2, r3
 8006890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006892:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006896:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800689a:	f7fa f9d5 	bl	8000c48 <__aeabi_uldivmod>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4b0d      	ldr	r3, [pc, #52]	; (80068d8 <UART_SetConfig+0x2d4>)
 80068a4:	fba3 1302 	umull	r1, r3, r3, r2
 80068a8:	095b      	lsrs	r3, r3, #5
 80068aa:	2164      	movs	r1, #100	; 0x64
 80068ac:	fb01 f303 	mul.w	r3, r1, r3
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	3332      	adds	r3, #50	; 0x32
 80068b6:	4a08      	ldr	r2, [pc, #32]	; (80068d8 <UART_SetConfig+0x2d4>)
 80068b8:	fba2 2303 	umull	r2, r3, r2, r3
 80068bc:	095b      	lsrs	r3, r3, #5
 80068be:	f003 0207 	and.w	r2, r3, #7
 80068c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4422      	add	r2, r4
 80068ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068cc:	e106      	b.n	8006adc <UART_SetConfig+0x4d8>
 80068ce:	bf00      	nop
 80068d0:	40011000 	.word	0x40011000
 80068d4:	40011400 	.word	0x40011400
 80068d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068e0:	2200      	movs	r2, #0
 80068e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80068ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80068ee:	4642      	mov	r2, r8
 80068f0:	464b      	mov	r3, r9
 80068f2:	1891      	adds	r1, r2, r2
 80068f4:	6239      	str	r1, [r7, #32]
 80068f6:	415b      	adcs	r3, r3
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
 80068fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068fe:	4641      	mov	r1, r8
 8006900:	1854      	adds	r4, r2, r1
 8006902:	4649      	mov	r1, r9
 8006904:	eb43 0501 	adc.w	r5, r3, r1
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	00eb      	lsls	r3, r5, #3
 8006912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006916:	00e2      	lsls	r2, r4, #3
 8006918:	4614      	mov	r4, r2
 800691a:	461d      	mov	r5, r3
 800691c:	4643      	mov	r3, r8
 800691e:	18e3      	adds	r3, r4, r3
 8006920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006924:	464b      	mov	r3, r9
 8006926:	eb45 0303 	adc.w	r3, r5, r3
 800692a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800692e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800693a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800694a:	4629      	mov	r1, r5
 800694c:	008b      	lsls	r3, r1, #2
 800694e:	4621      	mov	r1, r4
 8006950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006954:	4621      	mov	r1, r4
 8006956:	008a      	lsls	r2, r1, #2
 8006958:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800695c:	f7fa f974 	bl	8000c48 <__aeabi_uldivmod>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	4b60      	ldr	r3, [pc, #384]	; (8006ae8 <UART_SetConfig+0x4e4>)
 8006966:	fba3 2302 	umull	r2, r3, r3, r2
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	011c      	lsls	r4, r3, #4
 800696e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006972:	2200      	movs	r2, #0
 8006974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006978:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800697c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006980:	4642      	mov	r2, r8
 8006982:	464b      	mov	r3, r9
 8006984:	1891      	adds	r1, r2, r2
 8006986:	61b9      	str	r1, [r7, #24]
 8006988:	415b      	adcs	r3, r3
 800698a:	61fb      	str	r3, [r7, #28]
 800698c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006990:	4641      	mov	r1, r8
 8006992:	1851      	adds	r1, r2, r1
 8006994:	6139      	str	r1, [r7, #16]
 8006996:	4649      	mov	r1, r9
 8006998:	414b      	adcs	r3, r1
 800699a:	617b      	str	r3, [r7, #20]
 800699c:	f04f 0200 	mov.w	r2, #0
 80069a0:	f04f 0300 	mov.w	r3, #0
 80069a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069a8:	4659      	mov	r1, fp
 80069aa:	00cb      	lsls	r3, r1, #3
 80069ac:	4651      	mov	r1, sl
 80069ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069b2:	4651      	mov	r1, sl
 80069b4:	00ca      	lsls	r2, r1, #3
 80069b6:	4610      	mov	r0, r2
 80069b8:	4619      	mov	r1, r3
 80069ba:	4603      	mov	r3, r0
 80069bc:	4642      	mov	r2, r8
 80069be:	189b      	adds	r3, r3, r2
 80069c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069c4:	464b      	mov	r3, r9
 80069c6:	460a      	mov	r2, r1
 80069c8:	eb42 0303 	adc.w	r3, r2, r3
 80069cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80069da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80069e8:	4649      	mov	r1, r9
 80069ea:	008b      	lsls	r3, r1, #2
 80069ec:	4641      	mov	r1, r8
 80069ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069f2:	4641      	mov	r1, r8
 80069f4:	008a      	lsls	r2, r1, #2
 80069f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80069fa:	f7fa f925 	bl	8000c48 <__aeabi_uldivmod>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	4611      	mov	r1, r2
 8006a04:	4b38      	ldr	r3, [pc, #224]	; (8006ae8 <UART_SetConfig+0x4e4>)
 8006a06:	fba3 2301 	umull	r2, r3, r3, r1
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	2264      	movs	r2, #100	; 0x64
 8006a0e:	fb02 f303 	mul.w	r3, r2, r3
 8006a12:	1acb      	subs	r3, r1, r3
 8006a14:	011b      	lsls	r3, r3, #4
 8006a16:	3332      	adds	r3, #50	; 0x32
 8006a18:	4a33      	ldr	r2, [pc, #204]	; (8006ae8 <UART_SetConfig+0x4e4>)
 8006a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1e:	095b      	lsrs	r3, r3, #5
 8006a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a24:	441c      	add	r4, r3
 8006a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	673b      	str	r3, [r7, #112]	; 0x70
 8006a2e:	677a      	str	r2, [r7, #116]	; 0x74
 8006a30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a34:	4642      	mov	r2, r8
 8006a36:	464b      	mov	r3, r9
 8006a38:	1891      	adds	r1, r2, r2
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	415b      	adcs	r3, r3
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a44:	4641      	mov	r1, r8
 8006a46:	1851      	adds	r1, r2, r1
 8006a48:	6039      	str	r1, [r7, #0]
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	414b      	adcs	r3, r1
 8006a4e:	607b      	str	r3, [r7, #4]
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a5c:	4659      	mov	r1, fp
 8006a5e:	00cb      	lsls	r3, r1, #3
 8006a60:	4651      	mov	r1, sl
 8006a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a66:	4651      	mov	r1, sl
 8006a68:	00ca      	lsls	r2, r1, #3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	4642      	mov	r2, r8
 8006a72:	189b      	adds	r3, r3, r2
 8006a74:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a76:	464b      	mov	r3, r9
 8006a78:	460a      	mov	r2, r1
 8006a7a:	eb42 0303 	adc.w	r3, r2, r3
 8006a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	663b      	str	r3, [r7, #96]	; 0x60
 8006a8a:	667a      	str	r2, [r7, #100]	; 0x64
 8006a8c:	f04f 0200 	mov.w	r2, #0
 8006a90:	f04f 0300 	mov.w	r3, #0
 8006a94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a98:	4649      	mov	r1, r9
 8006a9a:	008b      	lsls	r3, r1, #2
 8006a9c:	4641      	mov	r1, r8
 8006a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aa2:	4641      	mov	r1, r8
 8006aa4:	008a      	lsls	r2, r1, #2
 8006aa6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006aaa:	f7fa f8cd 	bl	8000c48 <__aeabi_uldivmod>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <UART_SetConfig+0x4e4>)
 8006ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ab8:	095b      	lsrs	r3, r3, #5
 8006aba:	2164      	movs	r1, #100	; 0x64
 8006abc:	fb01 f303 	mul.w	r3, r1, r3
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	3332      	adds	r3, #50	; 0x32
 8006ac6:	4a08      	ldr	r2, [pc, #32]	; (8006ae8 <UART_SetConfig+0x4e4>)
 8006ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8006acc:	095b      	lsrs	r3, r3, #5
 8006ace:	f003 020f 	and.w	r2, r3, #15
 8006ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4422      	add	r2, r4
 8006ada:	609a      	str	r2, [r3, #8]
}
 8006adc:	bf00      	nop
 8006ade:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ae8:	51eb851f 	.word	0x51eb851f

08006aec <gyroInit>:
static u8 spiTxBuf[2];
static u8 spiRxBuf[2];


void gyroInit(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006af0:	2200      	movs	r2, #0
 8006af2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006af6:	484a      	ldr	r0, [pc, #296]	; (8006c20 <gyroInit+0x134>)
 8006af8:	f7fd f896 	bl	8003c28 <HAL_GPIO_WritePin>
	spiTxBuf[0] = 0x0F | 0x80; // WHO_AM_I
 8006afc:	4b49      	ldr	r3, [pc, #292]	; (8006c24 <gyroInit+0x138>)
 8006afe:	228f      	movs	r2, #143	; 0x8f
 8006b00:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8006b02:	2332      	movs	r3, #50	; 0x32
 8006b04:	2201      	movs	r2, #1
 8006b06:	4947      	ldr	r1, [pc, #284]	; (8006c24 <gyroInit+0x138>)
 8006b08:	4847      	ldr	r0, [pc, #284]	; (8006c28 <gyroInit+0x13c>)
 8006b0a:	f7fd fe07 	bl	800471c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &gyro_identity, 1, 50);
 8006b0e:	2332      	movs	r3, #50	; 0x32
 8006b10:	2201      	movs	r2, #1
 8006b12:	4946      	ldr	r1, [pc, #280]	; (8006c2c <gyroInit+0x140>)
 8006b14:	4844      	ldr	r0, [pc, #272]	; (8006c28 <gyroInit+0x13c>)
 8006b16:	f7fd ff3d 	bl	8004994 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b20:	483f      	ldr	r0, [pc, #252]	; (8006c20 <gyroInit+0x134>)
 8006b22:	f7fd f881 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006b26:	2014      	movs	r0, #20
 8006b28:	f7fb fec2 	bl	80028b0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b32:	483b      	ldr	r0, [pc, #236]	; (8006c20 <gyroInit+0x134>)
 8006b34:	f7fd f878 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006b38:	2014      	movs	r0, #20
 8006b3a:	f7fb feb9 	bl	80028b0 <HAL_Delay>
	spiTxBuf[0] = 0x20; // CTRL1:           DR1 DR0 BW1 BW0 PD Zen Xen Yen
 8006b3e:	4b39      	ldr	r3, [pc, #228]	; (8006c24 <gyroInit+0x138>)
 8006b40:	2220      	movs	r2, #32
 8006b42:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0xfc; // 800Hz, BW-100Hz   1   1   1   1   1  1   0   0
 8006b44:	4b37      	ldr	r3, [pc, #220]	; (8006c24 <gyroInit+0x138>)
 8006b46:	22fc      	movs	r2, #252	; 0xfc
 8006b48:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8006b4a:	2332      	movs	r3, #50	; 0x32
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	4935      	ldr	r1, [pc, #212]	; (8006c24 <gyroInit+0x138>)
 8006b50:	4835      	ldr	r0, [pc, #212]	; (8006c28 <gyroInit+0x13c>)
 8006b52:	f7fd fde3 	bl	800471c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006b56:	2201      	movs	r2, #1
 8006b58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b5c:	4830      	ldr	r0, [pc, #192]	; (8006c20 <gyroInit+0x134>)
 8006b5e:	f7fd f863 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006b62:	2014      	movs	r0, #20
 8006b64:	f7fb fea4 	bl	80028b0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b6e:	482c      	ldr	r0, [pc, #176]	; (8006c20 <gyroInit+0x134>)
 8006b70:	f7fd f85a 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006b74:	2014      	movs	r0, #20
 8006b76:	f7fb fe9b 	bl	80028b0 <HAL_Delay>
	spiTxBuf[0] = 0x21; // CTRL2:            EXTRen LVLen HPM1 HMP0 HPCF3 HPCF2 HPCF1 HPCF0
 8006b7a:	4b2a      	ldr	r3, [pc, #168]	; (8006c24 <gyroInit+0x138>)
 8006b7c:	2221      	movs	r2, #33	; 0x21
 8006b7e:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x03; //  2Hz                0      0    0    0      0    1     0    1
 8006b80:	4b28      	ldr	r3, [pc, #160]	; (8006c24 <gyroInit+0x138>)
 8006b82:	2203      	movs	r2, #3
 8006b84:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8006b86:	2332      	movs	r3, #50	; 0x32
 8006b88:	2202      	movs	r2, #2
 8006b8a:	4926      	ldr	r1, [pc, #152]	; (8006c24 <gyroInit+0x138>)
 8006b8c:	4826      	ldr	r0, [pc, #152]	; (8006c28 <gyroInit+0x13c>)
 8006b8e:	f7fd fdc5 	bl	800471c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006b92:	2201      	movs	r2, #1
 8006b94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b98:	4821      	ldr	r0, [pc, #132]	; (8006c20 <gyroInit+0x134>)
 8006b9a:	f7fd f845 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006b9e:	2014      	movs	r0, #20
 8006ba0:	f7fb fe86 	bl	80028b0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006baa:	481d      	ldr	r0, [pc, #116]	; (8006c20 <gyroInit+0x134>)
 8006bac:	f7fd f83c 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006bb0:	2014      	movs	r0, #20
 8006bb2:	f7fb fe7d 	bl	80028b0 <HAL_Delay>
	spiTxBuf[0] = 0x23; // CTRL4:             BDU      BLE    FS1    FS0     IMPen   ST2  ST1   SIM
 8006bb6:	4b1b      	ldr	r3, [pc, #108]	; (8006c24 <gyroInit+0x138>)
 8006bb8:	2223      	movs	r2, #35	; 0x23
 8006bba:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x30; // 2000dps     	       0        0    	1      1       0       0    0     0
 8006bbc:	4b19      	ldr	r3, [pc, #100]	; (8006c24 <gyroInit+0x138>)
 8006bbe:	2230      	movs	r2, #48	; 0x30
 8006bc0:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8006bc2:	2332      	movs	r3, #50	; 0x32
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	4917      	ldr	r1, [pc, #92]	; (8006c24 <gyroInit+0x138>)
 8006bc8:	4817      	ldr	r0, [pc, #92]	; (8006c28 <gyroInit+0x13c>)
 8006bca:	f7fd fda7 	bl	800471c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006bd4:	4812      	ldr	r0, [pc, #72]	; (8006c20 <gyroInit+0x134>)
 8006bd6:	f7fd f827 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006bda:	2014      	movs	r0, #20
 8006bdc:	f7fb fe68 	bl	80028b0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006be0:	2200      	movs	r2, #0
 8006be2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006be6:	480e      	ldr	r0, [pc, #56]	; (8006c20 <gyroInit+0x134>)
 8006be8:	f7fd f81e 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006bec:	2014      	movs	r0, #20
 8006bee:	f7fb fe5f 	bl	80028b0 <HAL_Delay>
	spiTxBuf[0] = 0x24; // CTRL5:              BOOT FIFO_EN   StopOnFTH    HPen   IG_Sel1    IG_Sel2   Out_Sel1   Out_Sel0
 8006bf2:	4b0c      	ldr	r3, [pc, #48]	; (8006c24 <gyroInit+0x138>)
 8006bf4:	2224      	movs	r2, #36	; 0x24
 8006bf6:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1] = 0x00; //                      0      0         0           0       0         0          0        0
 8006bf8:	4b0a      	ldr	r3, [pc, #40]	; (8006c24 <gyroInit+0x138>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 2, 50);
 8006bfe:	2332      	movs	r3, #50	; 0x32
 8006c00:	2202      	movs	r2, #2
 8006c02:	4908      	ldr	r1, [pc, #32]	; (8006c24 <gyroInit+0x138>)
 8006c04:	4808      	ldr	r0, [pc, #32]	; (8006c28 <gyroInit+0x13c>)
 8006c06:	f7fd fd89 	bl	800471c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c10:	4803      	ldr	r0, [pc, #12]	; (8006c20 <gyroInit+0x134>)
 8006c12:	f7fd f809 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006c16:	2014      	movs	r0, #20
 8006c18:	f7fb fe4a 	bl	80028b0 <HAL_Delay>
}
 8006c1c:	bf00      	nop
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	40020800 	.word	0x40020800
 8006c24:	20000828 	.word	0x20000828
 8006c28:	200002cc 	.word	0x200002cc
 8006c2c:	20000810 	.word	0x20000810

08006c30 <gyroUpdate>:

int gyroUpdate(void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
	LED8_ON;
 8006c34:	2201      	movs	r2, #1
 8006c36:	2110      	movs	r1, #16
 8006c38:	483d      	ldr	r0, [pc, #244]	; (8006d30 <gyroUpdate+0x100>)
 8006c3a:	f7fc fff5 	bl	8003c28 <HAL_GPIO_WritePin>
	angle_rate = (float)(readGyro() - offset) * GYRO_SENSITIVITY;
 8006c3e:	f000 f887 	bl	8006d50 <readGyro>
 8006c42:	4603      	mov	r3, r0
 8006c44:	ee07 3a90 	vmov	s15, r3
 8006c48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c4c:	4b39      	ldr	r3, [pc, #228]	; (8006d34 <gyroUpdate+0x104>)
 8006c4e:	edd3 7a00 	vldr	s15, [r3]
 8006c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c56:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006d38 <gyroUpdate+0x108>
 8006c5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c5e:	4b37      	ldr	r3, [pc, #220]	; (8006d3c <gyroUpdate+0x10c>)
 8006c60:	edc3 7a00 	vstr	s15, [r3]
	angle_rate = (abs(angle_rate) < noise && abs(angle_rate)<NOISE_THRESHOLD) ? 0 : angle_rate;
 8006c64:	4b35      	ldr	r3, [pc, #212]	; (8006d3c <gyroUpdate+0x10c>)
 8006c66:	edd3 7a00 	vldr	s15, [r3]
 8006c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c6e:	ee17 3a90 	vmov	r3, s15
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	bfb8      	it	lt
 8006c76:	425b      	neglt	r3, r3
 8006c78:	ee07 3a90 	vmov	s15, r3
 8006c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c80:	4b2f      	ldr	r3, [pc, #188]	; (8006d40 <gyroUpdate+0x110>)
 8006c82:	edd3 7a00 	vldr	s15, [r3]
 8006c86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c8e:	bf4c      	ite	mi
 8006c90:	2301      	movmi	r3, #1
 8006c92:	2300      	movpl	r3, #0
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	f083 0301 	eor.w	r3, r3, #1
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d11c      	bne.n	8006cda <gyroUpdate+0xaa>
 8006ca0:	4b26      	ldr	r3, [pc, #152]	; (8006d3c <gyroUpdate+0x10c>)
 8006ca2:	edd3 7a00 	vldr	s15, [r3]
 8006ca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006caa:	ee17 3a90 	vmov	r3, s15
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	bfb8      	it	lt
 8006cb2:	425b      	neglt	r3, r3
 8006cb4:	ee07 3a90 	vmov	s15, r3
 8006cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cbc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8006cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc8:	bf4c      	ite	mi
 8006cca:	2301      	movmi	r3, #1
 8006ccc:	2300      	movpl	r3, #0
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	f083 0301 	eor.w	r3, r3, #1
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <gyroUpdate+0xb0>
 8006cda:	4b18      	ldr	r3, [pc, #96]	; (8006d3c <gyroUpdate+0x10c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	e001      	b.n	8006ce4 <gyroUpdate+0xb4>
 8006ce0:	f04f 0300 	mov.w	r3, #0
 8006ce4:	4a15      	ldr	r2, [pc, #84]	; (8006d3c <gyroUpdate+0x10c>)
 8006ce6:	6013      	str	r3, [r2, #0]
	angle_z += ((angle_rate + last_angle_rate) * timeDifference) / (2.0f);
 8006ce8:	4b14      	ldr	r3, [pc, #80]	; (8006d3c <gyroUpdate+0x10c>)
 8006cea:	ed93 7a00 	vldr	s14, [r3]
 8006cee:	4b15      	ldr	r3, [pc, #84]	; (8006d44 <gyroUpdate+0x114>)
 8006cf0:	edd3 7a00 	vldr	s15, [r3]
 8006cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cf8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8006d48 <gyroUpdate+0x118>
 8006cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d00:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006d04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006d08:	4b10      	ldr	r3, [pc, #64]	; (8006d4c <gyroUpdate+0x11c>)
 8006d0a:	edd3 7a00 	vldr	s15, [r3]
 8006d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d12:	4b0e      	ldr	r3, [pc, #56]	; (8006d4c <gyroUpdate+0x11c>)
 8006d14:	edc3 7a00 	vstr	s15, [r3]
	last_angle_rate = angle_rate;
 8006d18:	4b08      	ldr	r3, [pc, #32]	; (8006d3c <gyroUpdate+0x10c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a09      	ldr	r2, [pc, #36]	; (8006d44 <gyroUpdate+0x114>)
 8006d1e:	6013      	str	r3, [r2, #0]
	LED8_OFF;
 8006d20:	2200      	movs	r2, #0
 8006d22:	2110      	movs	r1, #16
 8006d24:	4802      	ldr	r0, [pc, #8]	; (8006d30 <gyroUpdate+0x100>)
 8006d26:	f7fc ff7f 	bl	8003c28 <HAL_GPIO_WritePin>
	return 0;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40020400 	.word	0x40020400
 8006d34:	20000820 	.word	0x20000820
 8006d38:	3d916873 	.word	0x3d916873
 8006d3c:	2000081c 	.word	0x2000081c
 8006d40:	20000824 	.word	0x20000824
 8006d44:	20000818 	.word	0x20000818
 8006d48:	3b03126f 	.word	0x3b03126f
 8006d4c:	20000814 	.word	0x20000814

08006d50 <readGyro>:

int16_t readGyro(void)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
	u16 raw_z = 0;
 8006d56:	2300      	movs	r3, #0
 8006d58:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d60:	4821      	ldr	r0, [pc, #132]	; (8006de8 <readGyro+0x98>)
 8006d62:	f7fc ff61 	bl	8003c28 <HAL_GPIO_WritePin>
	spiTxBuf[0] = 0x2c | 0x80; // 0x2c ~ L8 bits OUT_Z(2's complement form),  0x2c | 0x80 ~ READ OPERATION
 8006d66:	4b21      	ldr	r3, [pc, #132]	; (8006dec <readGyro+0x9c>)
 8006d68:	22ac      	movs	r2, #172	; 0xac
 8006d6a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50);
 8006d6c:	2332      	movs	r3, #50	; 0x32
 8006d6e:	2201      	movs	r2, #1
 8006d70:	491e      	ldr	r1, [pc, #120]	; (8006dec <readGyro+0x9c>)
 8006d72:	481f      	ldr	r0, [pc, #124]	; (8006df0 <readGyro+0xa0>)
 8006d74:	f7fd fcd2 	bl	800471c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &spiRxBuf[0], 1, 50);
 8006d78:	2332      	movs	r3, #50	; 0x32
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	491d      	ldr	r1, [pc, #116]	; (8006df4 <readGyro+0xa4>)
 8006d7e:	481c      	ldr	r0, [pc, #112]	; (8006df0 <readGyro+0xa0>)
 8006d80:	f7fd fe08 	bl	8004994 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006d84:	2201      	movs	r2, #1
 8006d86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d8a:	4817      	ldr	r0, [pc, #92]	; (8006de8 <readGyro+0x98>)
 8006d8c:	f7fc ff4c 	bl	8003c28 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006d90:	2200      	movs	r2, #0
 8006d92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d96:	4814      	ldr	r0, [pc, #80]	; (8006de8 <readGyro+0x98>)
 8006d98:	f7fc ff46 	bl	8003c28 <HAL_GPIO_WritePin>
	spiTxBuf[0] = 0x2d | 0x80;
 8006d9c:	4b13      	ldr	r3, [pc, #76]	; (8006dec <readGyro+0x9c>)
 8006d9e:	22ad      	movs	r2, #173	; 0xad
 8006da0:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, spiTxBuf, 1, 50); // 0x2c ~ U8 bits OUT_Z(2's complement form),  0x80 ~ READ OPERATION
 8006da2:	2332      	movs	r3, #50	; 0x32
 8006da4:	2201      	movs	r2, #1
 8006da6:	4911      	ldr	r1, [pc, #68]	; (8006dec <readGyro+0x9c>)
 8006da8:	4811      	ldr	r0, [pc, #68]	; (8006df0 <readGyro+0xa0>)
 8006daa:	f7fd fcb7 	bl	800471c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &spiRxBuf[1], 1, 50);
 8006dae:	2332      	movs	r3, #50	; 0x32
 8006db0:	2201      	movs	r2, #1
 8006db2:	4911      	ldr	r1, [pc, #68]	; (8006df8 <readGyro+0xa8>)
 8006db4:	480e      	ldr	r0, [pc, #56]	; (8006df0 <readGyro+0xa0>)
 8006db6:	f7fd fded 	bl	8004994 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dc0:	4809      	ldr	r0, [pc, #36]	; (8006de8 <readGyro+0x98>)
 8006dc2:	f7fc ff31 	bl	8003c28 <HAL_GPIO_WritePin>

	raw_z = (spiRxBuf[1] << 8) | spiRxBuf[0];
 8006dc6:	4b0b      	ldr	r3, [pc, #44]	; (8006df4 <readGyro+0xa4>)
 8006dc8:	785b      	ldrb	r3, [r3, #1]
 8006dca:	021b      	lsls	r3, r3, #8
 8006dcc:	b21a      	sxth	r2, r3
 8006dce:	4b09      	ldr	r3, [pc, #36]	; (8006df4 <readGyro+0xa4>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	b21b      	sxth	r3, r3
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	b21b      	sxth	r3, r3
 8006dd8:	80fb      	strh	r3, [r7, #6]
	return (int16_t)raw_z;
 8006dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	40020800 	.word	0x40020800
 8006dec:	20000828 	.word	0x20000828
 8006df0:	200002cc 	.word	0x200002cc
 8006df4:	2000082c 	.word	0x2000082c
 8006df8:	2000082d 	.word	0x2000082d
 8006dfc:	00000000 	.word	0x00000000

08006e00 <gyroCalibration>:

void gyroCalibration(void)
{
 8006e00:	b5b0      	push	{r4, r5, r7, lr}
 8006e02:	f5ad 6dfc 	sub.w	sp, sp, #2016	; 0x7e0
 8006e06:	af00      	add	r7, sp, #0
	LED9_ON, LED10_ON, LED11_ON;
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e0e:	486a      	ldr	r0, [pc, #424]	; (8006fb8 <gyroCalibration+0x1b8>)
 8006e10:	f7fc ff0a 	bl	8003c28 <HAL_GPIO_WritePin>
 8006e14:	2201      	movs	r2, #1
 8006e16:	2101      	movs	r1, #1
 8006e18:	4868      	ldr	r0, [pc, #416]	; (8006fbc <gyroCalibration+0x1bc>)
 8006e1a:	f7fc ff05 	bl	8003c28 <HAL_GPIO_WritePin>
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e24:	4864      	ldr	r0, [pc, #400]	; (8006fb8 <gyroCalibration+0x1b8>)
 8006e26:	f7fc feff 	bl	8003c28 <HAL_GPIO_WritePin>
	int16_t calibration_buffer[BUFFER_LENGTH];
	int32_t calibration_sum = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc

	for (u32 idx = 0; idx < BUFFER_LENGTH; idx++)
 8006e30:	2300      	movs	r3, #0
 8006e32:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8
 8006e36:	e021      	b.n	8006e7c <gyroCalibration+0x7c>
	{
		calibration_buffer[idx] = readGyro();
 8006e38:	f7ff ff8a 	bl	8006d50 <readGyro>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	4619      	mov	r1, r3
 8006e40:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8006e44:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8006e48:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	; 0x7d8
 8006e4c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		HAL_Delay(2);
 8006e50:	2002      	movs	r0, #2
 8006e52:	f7fb fd2d 	bl	80028b0 <HAL_Delay>
		calibration_sum += calibration_buffer[idx];
 8006e56:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8006e5a:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8006e5e:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	; 0x7d8
 8006e62:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8006e66:	461a      	mov	r2, r3
 8006e68:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
	for (u32 idx = 0; idx < BUFFER_LENGTH; idx++)
 8006e72:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8006e76:	3301      	adds	r3, #1
 8006e78:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8
 8006e7c:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8006e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e84:	d3d8      	bcc.n	8006e38 <gyroCalibration+0x38>
	}

	offset = (float)calibration_sum / BUFFER_LENGTH;
 8006e86:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e92:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8006fc0 <gyroCalibration+0x1c0>
 8006e96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e9a:	4b4a      	ldr	r3, [pc, #296]	; (8006fc4 <gyroCalibration+0x1c4>)
 8006e9c:	edc3 7a00 	vstr	s15, [r3]

	for (u32 idx = 0; idx < BUFFER_LENGTH; idx++)
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 8006ea6:	e037      	b.n	8006f18 <gyroCalibration+0x118>
		noise += pow(calibration_buffer[idx] - offset, 2);
 8006ea8:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8006eac:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8006eb0:	f8d7 27d4 	ldr.w	r2, [r7, #2004]	; 0x7d4
 8006eb4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8006eb8:	ee07 3a90 	vmov	s15, r3
 8006ebc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ec0:	4b40      	ldr	r3, [pc, #256]	; (8006fc4 <gyroCalibration+0x1c4>)
 8006ec2:	edd3 7a00 	vldr	s15, [r3]
 8006ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006eca:	ee17 0a90 	vmov	r0, s15
 8006ece:	f7f9 fb3b 	bl	8000548 <__aeabi_f2d>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8006fa8 <gyroCalibration+0x1a8>
 8006eda:	ec43 2b10 	vmov	d0, r2, r3
 8006ede:	f000 ff23 	bl	8007d28 <pow>
 8006ee2:	ec55 4b10 	vmov	r4, r5, d0
 8006ee6:	4b38      	ldr	r3, [pc, #224]	; (8006fc8 <gyroCalibration+0x1c8>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7f9 fb2c 	bl	8000548 <__aeabi_f2d>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	f7f9 f9c8 	bl	800028c <__adddf3>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4610      	mov	r0, r2
 8006f02:	4619      	mov	r1, r3
 8006f04:	f7f9 fe50 	bl	8000ba8 <__aeabi_d2f>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	4a2f      	ldr	r2, [pc, #188]	; (8006fc8 <gyroCalibration+0x1c8>)
 8006f0c:	6013      	str	r3, [r2, #0]
	for (u32 idx = 0; idx < BUFFER_LENGTH; idx++)
 8006f0e:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8006f12:	3301      	adds	r3, #1
 8006f14:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 8006f18:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8006f1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f20:	d3c2      	bcc.n	8006ea8 <gyroCalibration+0xa8>
	noise = pow(noise, .5) / 2 * GYRO_SENSITIVITY;
 8006f22:	4b29      	ldr	r3, [pc, #164]	; (8006fc8 <gyroCalibration+0x1c8>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7f9 fb0e 	bl	8000548 <__aeabi_f2d>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8006fb0 <gyroCalibration+0x1b0>
 8006f34:	ec43 2b10 	vmov	d0, r2, r3
 8006f38:	f000 fef6 	bl	8007d28 <pow>
 8006f3c:	ec51 0b10 	vmov	r0, r1, d0
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f48:	f7f9 fc80 	bl	800084c <__aeabi_ddiv>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4614      	mov	r4, r2
 8006f52:	461d      	mov	r5, r3
 8006f54:	4b1d      	ldr	r3, [pc, #116]	; (8006fcc <gyroCalibration+0x1cc>)
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7f9 faf6 	bl	8000548 <__aeabi_f2d>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4620      	mov	r0, r4
 8006f62:	4629      	mov	r1, r5
 8006f64:	f7f9 fb48 	bl	80005f8 <__aeabi_dmul>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	4619      	mov	r1, r3
 8006f70:	f7f9 fe1a 	bl	8000ba8 <__aeabi_d2f>
 8006f74:	4603      	mov	r3, r0
 8006f76:	4a14      	ldr	r2, [pc, #80]	; (8006fc8 <gyroCalibration+0x1c8>)
 8006f78:	6013      	str	r3, [r2, #0]

	LED9_OFF, LED10_OFF, LED11_OFF;
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f80:	480d      	ldr	r0, [pc, #52]	; (8006fb8 <gyroCalibration+0x1b8>)
 8006f82:	f7fc fe51 	bl	8003c28 <HAL_GPIO_WritePin>
 8006f86:	2200      	movs	r2, #0
 8006f88:	2101      	movs	r1, #1
 8006f8a:	480c      	ldr	r0, [pc, #48]	; (8006fbc <gyroCalibration+0x1bc>)
 8006f8c:	f7fc fe4c 	bl	8003c28 <HAL_GPIO_WritePin>
 8006f90:	2200      	movs	r2, #0
 8006f92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f96:	4808      	ldr	r0, [pc, #32]	; (8006fb8 <gyroCalibration+0x1b8>)
 8006f98:	f7fc fe46 	bl	8003c28 <HAL_GPIO_WritePin>

	return;
 8006f9c:	bf00      	nop
 8006f9e:	f507 67fc 	add.w	r7, r7, #2016	; 0x7e0
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	00000000 	.word	0x00000000
 8006fac:	40000000 	.word	0x40000000
 8006fb0:	00000000 	.word	0x00000000
 8006fb4:	3fe00000 	.word	0x3fe00000
 8006fb8:	40020400 	.word	0x40020400
 8006fbc:	40020800 	.word	0x40020800
 8006fc0:	447a0000 	.word	0x447a0000
 8006fc4:	20000820 	.word	0x20000820
 8006fc8:	20000824 	.word	0x20000824
 8006fcc:	3d916873 	.word	0x3d916873

08006fd0 <PID_Controller>:
static float start_angle = 0;

static float PID_correction = 0, I = 0, last_error = 0; // STORE INTEGRAL ERROR

int PID_Controller(PID_State pid_state)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	71fb      	strb	r3, [r7, #7]
	float error;
	switch (pid_state)
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d03f      	beq.n	8007060 <PID_Controller+0x90>
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	dc63      	bgt.n	80070ac <PID_Controller+0xdc>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <PID_Controller+0x1e>
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d013      	beq.n	8007014 <PID_Controller+0x44>
 8006fec:	e05e      	b.n	80070ac <PID_Controller+0xdc>
	{
		error = l_position, error -= r_position;
		I = I + error;
	// TERMINATION OPERATION
	case (IDLE):
		I = 0, last_error = 0;
 8006fee:	4b3e      	ldr	r3, [pc, #248]	; (80070e8 <PID_Controller+0x118>)
 8006ff0:	f04f 0200 	mov.w	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	4b3d      	ldr	r3, [pc, #244]	; (80070ec <PID_Controller+0x11c>)
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	601a      	str	r2, [r3, #0]
		STOP_ROBOT;
 8006ffe:	4b3c      	ldr	r3, [pc, #240]	; (80070f0 <PID_Controller+0x120>)
 8007000:	f04f 0200 	mov.w	r2, #0
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	4b3b      	ldr	r3, [pc, #236]	; (80070f4 <PID_Controller+0x124>)
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	f000 fbad 	bl	800776c <setWheels>
		break;
 8007012:	e04b      	b.n	80070ac <PID_Controller+0xdc>

	// STRAIGHT MOVEMENT
	case (MOVE_STRAIGHT):
		PID_correction = (error * STKp + I * STKi + (error - last_error) * STKd) / PID_RED_ST;
 8007014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007018:	edd7 7a03 	vldr	s15, [r7, #12]
 800701c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007020:	4b31      	ldr	r3, [pc, #196]	; (80070e8 <PID_Controller+0x118>)
 8007022:	edd3 7a00 	vldr	s15, [r3]
 8007026:	eddf 6a34 	vldr	s13, [pc, #208]	; 80070f8 <PID_Controller+0x128>
 800702a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800702e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007032:	4b2e      	ldr	r3, [pc, #184]	; (80070ec <PID_Controller+0x11c>)
 8007034:	edd3 7a00 	vldr	s15, [r3]
 8007038:	edd7 6a03 	vldr	s13, [r7, #12]
 800703c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007040:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80070fc <PID_Controller+0x12c>
 8007044:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007048:	ee77 6a27 	vadd.f32	s13, s14, s15
 800704c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8007100 <PID_Controller+0x130>
 8007050:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007058:	4b2a      	ldr	r3, [pc, #168]	; (8007104 <PID_Controller+0x134>)
 800705a:	edc3 7a00 	vstr	s15, [r3]
		break;
 800705e:	e025      	b.n	80070ac <PID_Controller+0xdc>

	// POINT-ROTATION
	case (POINT_TURN):
		PID_correction = (error * RTKp + I * RTKi + (error - last_error) * RTKd) / PID_RED_RT;
 8007060:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007064:	edd7 7a03 	vldr	s15, [r7, #12]
 8007068:	ee27 7a27 	vmul.f32	s14, s14, s15
 800706c:	4b1e      	ldr	r3, [pc, #120]	; (80070e8 <PID_Controller+0x118>)
 800706e:	edd3 7a00 	vldr	s15, [r3]
 8007072:	eddf 6a21 	vldr	s13, [pc, #132]	; 80070f8 <PID_Controller+0x128>
 8007076:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800707a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800707e:	4b1b      	ldr	r3, [pc, #108]	; (80070ec <PID_Controller+0x11c>)
 8007080:	edd3 7a00 	vldr	s15, [r3]
 8007084:	edd7 6a03 	vldr	s13, [r7, #12]
 8007088:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800708c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80070fc <PID_Controller+0x12c>
 8007090:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007094:	ee77 6a27 	vadd.f32	s13, s14, s15
 8007098:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8007108 <PID_Controller+0x138>
 800709c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070a4:	4b17      	ldr	r3, [pc, #92]	; (8007104 <PID_Controller+0x134>)
 80070a6:	edc3 7a00 	vstr	s15, [r3]
		break;
 80070aa:	bf00      	nop
	}

	l_speed -= PID_correction, r_speed += PID_correction;
 80070ac:	4b10      	ldr	r3, [pc, #64]	; (80070f0 <PID_Controller+0x120>)
 80070ae:	ed93 7a00 	vldr	s14, [r3]
 80070b2:	4b14      	ldr	r3, [pc, #80]	; (8007104 <PID_Controller+0x134>)
 80070b4:	edd3 7a00 	vldr	s15, [r3]
 80070b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070bc:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <PID_Controller+0x120>)
 80070be:	edc3 7a00 	vstr	s15, [r3]
 80070c2:	4b0c      	ldr	r3, [pc, #48]	; (80070f4 <PID_Controller+0x124>)
 80070c4:	ed93 7a00 	vldr	s14, [r3]
 80070c8:	4b0e      	ldr	r3, [pc, #56]	; (8007104 <PID_Controller+0x134>)
 80070ca:	edd3 7a00 	vldr	s15, [r3]
 80070ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070d2:	4b08      	ldr	r3, [pc, #32]	; (80070f4 <PID_Controller+0x124>)
 80070d4:	edc3 7a00 	vstr	s15, [r3]
	last_error = error;
 80070d8:	4a04      	ldr	r2, [pc, #16]	; (80070ec <PID_Controller+0x11c>)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6013      	str	r3, [r2, #0]

	return 0;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	20000834 	.word	0x20000834
 80070ec:	20000838 	.word	0x20000838
 80070f0:	20000840 	.word	0x20000840
 80070f4:	20000844 	.word	0x20000844
 80070f8:	3da3d70a 	.word	0x3da3d70a
 80070fc:	3f19999a 	.word	0x3f19999a
 8007100:	0000001e 	.word	0x0000001e
 8007104:	20000830 	.word	0x20000830
 8007108:	00000014 	.word	0x00000014

0800710c <readADC>:
#include "adc.h"



uint16_t readADC(adc_channels channel, uint8_t timeout)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b088      	sub	sp, #32
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	460a      	mov	r2, r1
 8007116:	71fb      	strb	r3, [r7, #7]
 8007118:	4613      	mov	r3, r2
 800711a:	71bb      	strb	r3, [r7, #6]
    ADC_ChannelConfTypeDef sConfig = {0};
 800711c:	f107 030c 	add.w	r3, r7, #12
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	605a      	str	r2, [r3, #4]
 8007126:	609a      	str	r2, [r3, #8]
 8007128:	60da      	str	r2, [r3, #12]
    uint16_t adc_val = 0;
 800712a:	2300      	movs	r3, #0
 800712c:	83fb      	strh	r3, [r7, #30]
    switch (channel)
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	2b04      	cmp	r3, #4
 8007132:	d81c      	bhi.n	800716e <readADC+0x62>
 8007134:	a201      	add	r2, pc, #4	; (adr r2, 800713c <readADC+0x30>)
 8007136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713a:	bf00      	nop
 800713c:	0800715d 	.word	0x0800715d
 8007140:	08007151 	.word	0x08007151
 8007144:	08007169 	.word	0x08007169
 8007148:	08007157 	.word	0x08007157
 800714c:	08007163 	.word	0x08007163
    {
        case RF_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_4;
 8007150:	2304      	movs	r3, #4
 8007152:	60fb      	str	r3, [r7, #12]
            break;
 8007154:	e00b      	b.n	800716e <readADC+0x62>

        case DL_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_8;
 8007156:	2308      	movs	r3, #8
 8007158:	60fb      	str	r3, [r7, #12]
            break;
 800715a:	e008      	b.n	800716e <readADC+0x62>

        case LF_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_9;
 800715c:	2309      	movs	r3, #9
 800715e:	60fb      	str	r3, [r7, #12]
            break;
 8007160:	e005      	b.n	800716e <readADC+0x62>

        case BAT_VOL:
        	sConfig.Channel = ADC_CHANNEL_13;
 8007162:	230d      	movs	r3, #13
 8007164:	60fb      	str	r3, [r7, #12]
            break;
 8007166:	e002      	b.n	800716e <readADC+0x62>
        
        case DR_RECEIVER:
        	sConfig.Channel = ADC_CHANNEL_14;
 8007168:	230e      	movs	r3, #14
 800716a:	60fb      	str	r3, [r7, #12]
            break;
 800716c:	bf00      	nop
    }


    sConfig.Rank = 1;
 800716e:	2301      	movs	r3, #1
 8007170:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8007172:	2304      	movs	r3, #4
 8007174:	617b      	str	r3, [r7, #20]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007176:	f107 030c 	add.w	r3, r7, #12
 800717a:	4619      	mov	r1, r3
 800717c:	480e      	ldr	r0, [pc, #56]	; (80071b8 <readADC+0xac>)
 800717e:	f7fb fd9d 	bl	8002cbc <HAL_ADC_ConfigChannel>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <readADC+0x80>
    {
      Error_Handler();
 8007188:	f7fa fbae 	bl	80018e8 <Error_Handler>
    }

    HAL_ADC_Start(&hadc1);
 800718c:	480a      	ldr	r0, [pc, #40]	; (80071b8 <readADC+0xac>)
 800718e:	f7fb fbf7 	bl	8002980 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1,timeout);
 8007192:	79bb      	ldrb	r3, [r7, #6]
 8007194:	4619      	mov	r1, r3
 8007196:	4808      	ldr	r0, [pc, #32]	; (80071b8 <readADC+0xac>)
 8007198:	f7fb fcf7 	bl	8002b8a <HAL_ADC_PollForConversion>
    adc_val = HAL_ADC_GetValue(&hadc1);
 800719c:	4806      	ldr	r0, [pc, #24]	; (80071b8 <readADC+0xac>)
 800719e:	f7fb fd7f 	bl	8002ca0 <HAL_ADC_GetValue>
 80071a2:	4603      	mov	r3, r0
 80071a4:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(&hadc1);
 80071a6:	4804      	ldr	r0, [pc, #16]	; (80071b8 <readADC+0xac>)
 80071a8:	f7fb fcbc 	bl	8002b24 <HAL_ADC_Stop>

    return adc_val;
 80071ac:	8bfb      	ldrh	r3, [r7, #30]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3720      	adds	r7, #32
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	20000224 	.word	0x20000224

080071bc <displayInit>:
#include "display.h"

DISP_State disp_state;

void displayInit(void){
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80071c0:	f7fb f87c 	bl	80022bc <ssd1306_Init>
	disp_state = INIT;
 80071c4:	4b03      	ldr	r3, [pc, #12]	; (80071d4 <displayInit+0x18>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	701a      	strb	r2, [r3, #0]
	displayUpdate();
 80071ca:	f000 f8b1 	bl	8007330 <displayUpdate>
}
 80071ce:	bf00      	nop
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	2000083c 	.word	0x2000083c

080071d8 <clearScreen>:

void clearScreen()
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80071dc:	2000      	movs	r0, #0
 80071de:	f7fb f8d7 	bl	8002390 <ssd1306_Fill>
}
 80071e2:	bf00      	nop
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <writeString>:

void writeString(char *str, FONT_Size font_size)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	70fb      	strb	r3, [r7, #3]
	switch (font_size)
 80071f4:	78fb      	ldrb	r3, [r7, #3]
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d826      	bhi.n	8007248 <writeString+0x60>
 80071fa:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <writeString+0x18>)
 80071fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007200:	08007211 	.word	0x08007211
 8007204:	0800721f 	.word	0x0800721f
 8007208:	0800722d 	.word	0x0800722d
 800720c:	0800723b 	.word	0x0800723b
	{
	case SMALL:
		ssd1306_WriteString(str, Font_6x8, White);
 8007210:	4a0f      	ldr	r2, [pc, #60]	; (8007250 <writeString+0x68>)
 8007212:	2301      	movs	r3, #1
 8007214:	ca06      	ldmia	r2, {r1, r2}
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7fb f9e2 	bl	80025e0 <ssd1306_WriteString>
		break;
 800721c:	e014      	b.n	8007248 <writeString+0x60>
	case MEDIUM:
		ssd1306_WriteString(str, Font_7x10, White);
 800721e:	4a0d      	ldr	r2, [pc, #52]	; (8007254 <writeString+0x6c>)
 8007220:	2301      	movs	r3, #1
 8007222:	ca06      	ldmia	r2, {r1, r2}
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7fb f9db 	bl	80025e0 <ssd1306_WriteString>
		break;
 800722a:	e00d      	b.n	8007248 <writeString+0x60>
	case LARGE:
		ssd1306_WriteString(str, Font_11x18, White);
 800722c:	4a0a      	ldr	r2, [pc, #40]	; (8007258 <writeString+0x70>)
 800722e:	2301      	movs	r3, #1
 8007230:	ca06      	ldmia	r2, {r1, r2}
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7fb f9d4 	bl	80025e0 <ssd1306_WriteString>
		break;
 8007238:	e006      	b.n	8007248 <writeString+0x60>
	case HUGE:
		ssd1306_WriteString(str, Font_16x24, White);
 800723a:	4a08      	ldr	r2, [pc, #32]	; (800725c <writeString+0x74>)
 800723c:	2301      	movs	r3, #1
 800723e:	ca06      	ldmia	r2, {r1, r2}
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7fb f9cd 	bl	80025e0 <ssd1306_WriteString>
		break;
 8007246:	bf00      	nop
	}
}
 8007248:	bf00      	nop
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000004 	.word	0x20000004
 8007254:	2000000c 	.word	0x2000000c
 8007258:	20000014 	.word	0x20000014
 800725c:	2000001c 	.word	0x2000001c

08007260 <putString>:

void putString(char *str, int x, int y, FONT_Size font_size)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
 800726c:	70fb      	strb	r3, [r7, #3]
	ssd1306_SetCursor(x, y);
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	b2db      	uxtb	r3, r3
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	b2d2      	uxtb	r2, r2
 8007276:	4611      	mov	r1, r2
 8007278:	4618      	mov	r0, r3
 800727a:	f7fb f9d7 	bl	800262c <ssd1306_SetCursor>
	writeString(str, font_size);
 800727e:	78fb      	ldrb	r3, [r7, #3]
 8007280:	4619      	mov	r1, r3
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f7ff ffb0 	bl	80071e8 <writeString>
}
 8007288:	bf00      	nop
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <putInt>:
	ssd1306_SetCursor(x, y);
	writeString(str, font_size);
}

void putInt(int INT, int x, int y, FONT_Size font_size)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b094      	sub	sp, #80	; 0x50
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	70fb      	strb	r3, [r7, #3]
	char buff[64];
	snprintf(buff, sizeof(buff), "%d", INT);
 800729e:	f107 0010 	add.w	r0, r7, #16
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4a0b      	ldr	r2, [pc, #44]	; (80072d4 <putInt+0x44>)
 80072a6:	2140      	movs	r1, #64	; 0x40
 80072a8:	f002 fa48 	bl	800973c <sniprintf>
	ssd1306_SetCursor(x, y);
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	b2d2      	uxtb	r2, r2
 80072b4:	4611      	mov	r1, r2
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fb f9b8 	bl	800262c <ssd1306_SetCursor>
	writeString(buff, font_size);
 80072bc:	78fa      	ldrb	r2, [r7, #3]
 80072be:	f107 0310 	add.w	r3, r7, #16
 80072c2:	4611      	mov	r1, r2
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7ff ff8f 	bl	80071e8 <writeString>
}
 80072ca:	bf00      	nop
 80072cc:	3750      	adds	r7, #80	; 0x50
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	0800b8c0 	.word	0x0800b8c0

080072d8 <putFloat>:

void putFloat(float FLOAT, int x, int y, FONT_Size font_size)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b096      	sub	sp, #88	; 0x58
 80072dc:	af02      	add	r7, sp, #8
 80072de:	ed87 0a03 	vstr	s0, [r7, #12]
 80072e2:	60b8      	str	r0, [r7, #8]
 80072e4:	6079      	str	r1, [r7, #4]
 80072e6:	4613      	mov	r3, r2
 80072e8:	70fb      	strb	r3, [r7, #3]
	char buff[64];
	snprintf(buff, sizeof(buff), "%.2f", FLOAT); // Change %.2f to adjust precision
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f7f9 f92c 	bl	8000548 <__aeabi_f2d>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	f107 0010 	add.w	r0, r7, #16
 80072f8:	e9cd 2300 	strd	r2, r3, [sp]
 80072fc:	4a0b      	ldr	r2, [pc, #44]	; (800732c <putFloat+0x54>)
 80072fe:	2140      	movs	r1, #64	; 0x40
 8007300:	f002 fa1c 	bl	800973c <sniprintf>
	ssd1306_SetCursor(x, y);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	b2db      	uxtb	r3, r3
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	4611      	mov	r1, r2
 800730e:	4618      	mov	r0, r3
 8007310:	f7fb f98c 	bl	800262c <ssd1306_SetCursor>
	writeString(buff, font_size);
 8007314:	78fa      	ldrb	r2, [r7, #3]
 8007316:	f107 0310 	add.w	r3, r7, #16
 800731a:	4611      	mov	r1, r2
 800731c:	4618      	mov	r0, r3
 800731e:	f7ff ff63 	bl	80071e8 <writeString>
}
 8007322:	bf00      	nop
 8007324:	3750      	adds	r7, #80	; 0x50
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	0800b8c4 	.word	0x0800b8c4

08007330 <displayUpdate>:


void displayUpdate(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
	clearScreen();
 8007336:	f7ff ff4f 	bl	80071d8 <clearScreen>
	switch (disp_state)
 800733a:	4b60      	ldr	r3, [pc, #384]	; (80074bc <displayUpdate+0x18c>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b05      	cmp	r3, #5
 8007340:	f200 80b2 	bhi.w	80074a8 <displayUpdate+0x178>
 8007344:	a201      	add	r2, pc, #4	; (adr r2, 800734c <displayUpdate+0x1c>)
 8007346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734a:	bf00      	nop
 800734c:	08007365 	.word	0x08007365
 8007350:	0800738f 	.word	0x0800738f
 8007354:	080073bd 	.word	0x080073bd
 8007358:	080073f7 	.word	0x080073f7
 800735c:	08007481 	.word	0x08007481
 8007360:	0800748f 	.word	0x0800748f
	{
	// INITIALIZATION BLOCK: AUDI CAR EXPECTED
	case (INIT):
		for (int delta = 0; delta < 5; delta++)
 8007364:	2300      	movs	r3, #0
 8007366:	607b      	str	r3, [r7, #4]
 8007368:	e00d      	b.n	8007386 <displayUpdate+0x56>
			ssd1306_DrawCircle(16 * delta + 35, 15, 10, White);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	b2db      	uxtb	r3, r3
 800736e:	011b      	lsls	r3, r3, #4
 8007370:	b2db      	uxtb	r3, r3
 8007372:	3323      	adds	r3, #35	; 0x23
 8007374:	b2d8      	uxtb	r0, r3
 8007376:	2301      	movs	r3, #1
 8007378:	220a      	movs	r2, #10
 800737a:	210f      	movs	r1, #15
 800737c:	f7fb f96e 	bl	800265c <ssd1306_DrawCircle>
		for (int delta = 0; delta < 5; delta++)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3301      	adds	r3, #1
 8007384:	607b      	str	r3, [r7, #4]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b04      	cmp	r3, #4
 800738a:	ddee      	ble.n	800736a <displayUpdate+0x3a>
		break;
 800738c:	e08c      	b.n	80074a8 <displayUpdate+0x178>

	// DEFAULT SCREEN --> BATTERY PERCENTAGE, STATE OF THE ROBOT
	case (DEFAULT):
		// DISPLAYING BATTERY VOLTAGE
		putString("BAT:",74,2,SMALL);
 800738e:	2300      	movs	r3, #0
 8007390:	2202      	movs	r2, #2
 8007392:	214a      	movs	r1, #74	; 0x4a
 8007394:	484a      	ldr	r0, [pc, #296]	; (80074c0 <displayUpdate+0x190>)
 8007396:	f7ff ff63 	bl	8007260 <putString>
		putFloat(voltage,104 , 2, SMALL);
 800739a:	4b4a      	ldr	r3, [pc, #296]	; (80074c4 <displayUpdate+0x194>)
 800739c:	edd3 7a00 	vldr	s15, [r3]
 80073a0:	2200      	movs	r2, #0
 80073a2:	2102      	movs	r1, #2
 80073a4:	2068      	movs	r0, #104	; 0x68
 80073a6:	eeb0 0a67 	vmov.f32	s0, s15
 80073aa:	f7ff ff95 	bl	80072d8 <putFloat>

		putString("TURN:",2,16,MEDIUM);
 80073ae:	2301      	movs	r3, #1
 80073b0:	2210      	movs	r2, #16
 80073b2:	2102      	movs	r1, #2
 80073b4:	4844      	ldr	r0, [pc, #272]	; (80074c8 <displayUpdate+0x198>)
 80073b6:	f7ff ff53 	bl	8007260 <putString>
		// putString(turn,44,16,MEDIUM);
		break;
 80073ba:	e075      	b.n	80074a8 <displayUpdate+0x178>

	case (GYRO_CALIB):
		putString("NOISE: ",2,2,SMALL);
 80073bc:	2300      	movs	r3, #0
 80073be:	2202      	movs	r2, #2
 80073c0:	2102      	movs	r1, #2
 80073c2:	4842      	ldr	r0, [pc, #264]	; (80074cc <displayUpdate+0x19c>)
 80073c4:	f7ff ff4c 	bl	8007260 <putString>
		// putFloat(noise,64, 2, SMALL);
 
		putString("OFFSET: ",2,11,SMALL);
 80073c8:	2300      	movs	r3, #0
 80073ca:	220b      	movs	r2, #11
 80073cc:	2102      	movs	r1, #2
 80073ce:	4840      	ldr	r0, [pc, #256]	; (80074d0 <displayUpdate+0x1a0>)
 80073d0:	f7ff ff46 	bl	8007260 <putString>
		// putInt(offset,64,11,SMALL);

		putString("ANGLE: ",2,22,SMALL);
 80073d4:	2300      	movs	r3, #0
 80073d6:	2216      	movs	r2, #22
 80073d8:	2102      	movs	r1, #2
 80073da:	483e      	ldr	r0, [pc, #248]	; (80074d4 <displayUpdate+0x1a4>)
 80073dc:	f7ff ff40 	bl	8007260 <putString>
		putFloat(angle_z,64,22,SMALL);
 80073e0:	4b3d      	ldr	r3, [pc, #244]	; (80074d8 <displayUpdate+0x1a8>)
 80073e2:	edd3 7a00 	vldr	s15, [r3]
 80073e6:	2200      	movs	r2, #0
 80073e8:	2116      	movs	r1, #22
 80073ea:	2040      	movs	r0, #64	; 0x40
 80073ec:	eeb0 0a67 	vmov.f32	s0, s15
 80073f0:	f7ff ff72 	bl	80072d8 <putFloat>
		break;
 80073f4:	e058      	b.n	80074a8 <displayUpdate+0x178>

	case (SENSOR_READ):

		putString("LF:",2,2,SMALL);
 80073f6:	2300      	movs	r3, #0
 80073f8:	2202      	movs	r2, #2
 80073fa:	2102      	movs	r1, #2
 80073fc:	4837      	ldr	r0, [pc, #220]	; (80074dc <displayUpdate+0x1ac>)
 80073fe:	f7ff ff2f 	bl	8007260 <putString>
		putInt(LFSensor,26,2, SMALL);
 8007402:	4b37      	ldr	r3, [pc, #220]	; (80074e0 <displayUpdate+0x1b0>)
 8007404:	6818      	ldr	r0, [r3, #0]
 8007406:	2300      	movs	r3, #0
 8007408:	2202      	movs	r2, #2
 800740a:	211a      	movs	r1, #26
 800740c:	f7ff ff40 	bl	8007290 <putInt>

		putString("RF:",76,2,SMALL);
 8007410:	2300      	movs	r3, #0
 8007412:	2202      	movs	r2, #2
 8007414:	214c      	movs	r1, #76	; 0x4c
 8007416:	4833      	ldr	r0, [pc, #204]	; (80074e4 <displayUpdate+0x1b4>)
 8007418:	f7ff ff22 	bl	8007260 <putString>
		putInt(RFSensor,100,2, SMALL);
 800741c:	4b32      	ldr	r3, [pc, #200]	; (80074e8 <displayUpdate+0x1b8>)
 800741e:	6818      	ldr	r0, [r3, #0]
 8007420:	2300      	movs	r3, #0
 8007422:	2202      	movs	r2, #2
 8007424:	2164      	movs	r1, #100	; 0x64
 8007426:	f7ff ff33 	bl	8007290 <putInt>

		putString("DL:",2,13,SMALL);
 800742a:	2300      	movs	r3, #0
 800742c:	220d      	movs	r2, #13
 800742e:	2102      	movs	r1, #2
 8007430:	482e      	ldr	r0, [pc, #184]	; (80074ec <displayUpdate+0x1bc>)
 8007432:	f7ff ff15 	bl	8007260 <putString>
		putInt(DLSensor,26,13, SMALL);
 8007436:	4b2e      	ldr	r3, [pc, #184]	; (80074f0 <displayUpdate+0x1c0>)
 8007438:	6818      	ldr	r0, [r3, #0]
 800743a:	2300      	movs	r3, #0
 800743c:	220d      	movs	r2, #13
 800743e:	211a      	movs	r1, #26
 8007440:	f7ff ff26 	bl	8007290 <putInt>

		putString("DR:",76,13,SMALL);
 8007444:	2300      	movs	r3, #0
 8007446:	220d      	movs	r2, #13
 8007448:	214c      	movs	r1, #76	; 0x4c
 800744a:	482a      	ldr	r0, [pc, #168]	; (80074f4 <displayUpdate+0x1c4>)
 800744c:	f7ff ff08 	bl	8007260 <putString>
		putInt(DRSensor,100,13, SMALL);
 8007450:	4b29      	ldr	r3, [pc, #164]	; (80074f8 <displayUpdate+0x1c8>)
 8007452:	6818      	ldr	r0, [r3, #0]
 8007454:	2300      	movs	r3, #0
 8007456:	220d      	movs	r2, #13
 8007458:	2164      	movs	r1, #100	; 0x64
 800745a:	f7ff ff19 	bl	8007290 <putInt>
		
		putString("ANGLE:",22,24,SMALL);
 800745e:	2300      	movs	r3, #0
 8007460:	2218      	movs	r2, #24
 8007462:	2116      	movs	r1, #22
 8007464:	4825      	ldr	r0, [pc, #148]	; (80074fc <displayUpdate+0x1cc>)
 8007466:	f7ff fefb 	bl	8007260 <putString>
		putFloat(angle_z,70,22, SMALL);
 800746a:	4b1b      	ldr	r3, [pc, #108]	; (80074d8 <displayUpdate+0x1a8>)
 800746c:	edd3 7a00 	vldr	s15, [r3]
 8007470:	2200      	movs	r2, #0
 8007472:	2116      	movs	r1, #22
 8007474:	2046      	movs	r0, #70	; 0x46
 8007476:	eeb0 0a67 	vmov.f32	s0, s15
 800747a:	f7ff ff2d 	bl	80072d8 <putFloat>
		break;
 800747e:	e013      	b.n	80074a8 <displayUpdate+0x178>

	case (LOW_BAT):
		putString("BAT LOW...!",2,7,LARGE);
 8007480:	2302      	movs	r3, #2
 8007482:	2207      	movs	r2, #7
 8007484:	2102      	movs	r1, #2
 8007486:	481e      	ldr	r0, [pc, #120]	; (8007500 <displayUpdate+0x1d0>)
 8007488:	f7ff feea 	bl	8007260 <putString>
		break;
 800748c:	e00c      	b.n	80074a8 <displayUpdate+0x178>

	case (SUCESS_MSG):
		putString("HURRAYYYY!!!",2,2,LARGE);
 800748e:	2302      	movs	r3, #2
 8007490:	2202      	movs	r2, #2
 8007492:	2102      	movs	r1, #2
 8007494:	481b      	ldr	r0, [pc, #108]	; (8007504 <displayUpdate+0x1d4>)
 8007496:	f7ff fee3 	bl	8007260 <putString>
		putString("SINDiB na kokka",2,22,SMALL);
 800749a:	2300      	movs	r3, #0
 800749c:	2216      	movs	r2, #22
 800749e:	2102      	movs	r1, #2
 80074a0:	4819      	ldr	r0, [pc, #100]	; (8007508 <displayUpdate+0x1d8>)
 80074a2:	f7ff fedd 	bl	8007260 <putString>
		break;
 80074a6:	bf00      	nop
	}
	ssd1306_UpdateScreen();
 80074a8:	f7fa ff96 	bl	80023d8 <ssd1306_UpdateScreen>
	LED6_TOG;
 80074ac:	2104      	movs	r1, #4
 80074ae:	4817      	ldr	r0, [pc, #92]	; (800750c <displayUpdate+0x1dc>)
 80074b0:	f7fc fbd3 	bl	8003c5a <HAL_GPIO_TogglePin>
 80074b4:	bf00      	nop
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	2000083c 	.word	0x2000083c
 80074c0:	0800b8cc 	.word	0x0800b8cc
 80074c4:	2000084c 	.word	0x2000084c
 80074c8:	0800b8d4 	.word	0x0800b8d4
 80074cc:	0800b8dc 	.word	0x0800b8dc
 80074d0:	0800b8e4 	.word	0x0800b8e4
 80074d4:	0800b8f0 	.word	0x0800b8f0
 80074d8:	20000814 	.word	0x20000814
 80074dc:	0800b8f8 	.word	0x0800b8f8
 80074e0:	20000850 	.word	0x20000850
 80074e4:	0800b8fc 	.word	0x0800b8fc
 80074e8:	20000854 	.word	0x20000854
 80074ec:	0800b900 	.word	0x0800b900
 80074f0:	20000858 	.word	0x20000858
 80074f4:	0800b904 	.word	0x0800b904
 80074f8:	2000085c 	.word	0x2000085c
 80074fc:	0800b908 	.word	0x0800b908
 8007500:	0800b910 	.word	0x0800b910
 8007504:	0800b91c 	.word	0x0800b91c
 8007508:	0800b92c 	.word	0x0800b92c
 800750c:	40020c00 	.word	0x40020c00

08007510 <encoderInit>:
#include "encoder.h"


// FUCTION: INTIALIZATION OF ENCODER RELATED HARDWARE
void encoderInit(void){
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);   // LEFT ENCODER
 8007514:	213c      	movs	r1, #60	; 0x3c
 8007516:	4805      	ldr	r0, [pc, #20]	; (800752c <encoderInit+0x1c>)
 8007518:	f7fe f93e 	bl	8005798 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);   // RIGHT ENCODER
 800751c:	213c      	movs	r1, #60	; 0x3c
 800751e:	4804      	ldr	r0, [pc, #16]	; (8007530 <encoderInit+0x20>)
 8007520:	f7fe f93a 	bl	8005798 <HAL_TIM_Encoder_Start>
	resetEncoder();
 8007524:	f000 f806 	bl	8007534 <resetEncoder>
}
 8007528:	bf00      	nop
 800752a:	bd80      	pop	{r7, pc}
 800752c:	200003c4 	.word	0x200003c4
 8007530:	20000454 	.word	0x20000454

08007534 <resetEncoder>:

void resetEncoder(void){
 8007534:	b480      	push	{r7}
 8007536:	af00      	add	r7, sp, #0
	TIM2->CNT = _ENCODER_START + 1;
 8007538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800753c:	4a04      	ldr	r2, [pc, #16]	; (8007550 <resetEncoder+0x1c>)
 800753e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM5->CNT = u32_max-_ENCODER_START;
 8007540:	4b04      	ldr	r3, [pc, #16]	; (8007554 <resetEncoder+0x20>)
 8007542:	4a05      	ldr	r2, [pc, #20]	; (8007558 <resetEncoder+0x24>)
 8007544:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007546:	bf00      	nop
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	00068db9 	.word	0x00068db9
 8007554:	40000c00 	.word	0x40000c00
 8007558:	fff97246 	.word	0xfff97246

0800755c <motorInit>:
uint16_t u12_max = 4095;
float l_speed, r_speed;
float st_speed = .5, rt_speed = .3;

void motorInit(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0
	// Start PWM for TIM4 channels (you may need to adjust this based on your application)
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // LPWMA
 8007560:	2100      	movs	r1, #0
 8007562:	480d      	ldr	r0, [pc, #52]	; (8007598 <motorInit+0x3c>)
 8007564:	f7fd ffaa 	bl	80054bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // LPWMB
 8007568:	2104      	movs	r1, #4
 800756a:	480b      	ldr	r0, [pc, #44]	; (8007598 <motorInit+0x3c>)
 800756c:	f7fd ffa6 	bl	80054bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // RPWMA
 8007570:	2108      	movs	r1, #8
 8007572:	4809      	ldr	r0, [pc, #36]	; (8007598 <motorInit+0x3c>)
 8007574:	f7fd ffa2 	bl	80054bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // RPWMB
 8007578:	210c      	movs	r1, #12
 800757a:	4807      	ldr	r0, [pc, #28]	; (8007598 <motorInit+0x3c>)
 800757c:	f7fd ff9e 	bl	80054bc <HAL_TIM_PWM_Start>
	STOP_ROBOT;
 8007580:	4b06      	ldr	r3, [pc, #24]	; (800759c <motorInit+0x40>)
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <motorInit+0x44>)
 800758a:	f04f 0200 	mov.w	r2, #0
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	f000 f8ec 	bl	800776c <setWheels>
}
 8007594:	bf00      	nop
 8007596:	bd80      	pop	{r7, pc}
 8007598:	2000040c 	.word	0x2000040c
 800759c:	20000840 	.word	0x20000840
 80075a0:	20000844 	.word	0x20000844

080075a4 <setLeftWheel>:

void setLeftWheel(float l_speed)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t l_pwma, l_pwmb;

	if (abs(l_speed) > SPEED_THRESHOLD)
 80075ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80075b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075b6:	ee17 3a90 	vmov	r3, s15
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	bfb8      	it	lt
 80075be:	425b      	neglt	r3, r3
 80075c0:	ee07 3a90 	vmov	s15, r3
 80075c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075c8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800767c <setLeftWheel+0xd8>
 80075cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d4:	dd0f      	ble.n	80075f6 <setLeftWheel+0x52>
		l_speed = (l_speed > 0) ? SPEED_THRESHOLD : -SPEED_THRESHOLD;
 80075d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80075da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e2:	dd02      	ble.n	80075ea <setLeftWheel+0x46>
 80075e4:	eddf 7a25 	vldr	s15, [pc, #148]	; 800767c <setLeftWheel+0xd8>
 80075e8:	e003      	b.n	80075f2 <setLeftWheel+0x4e>
 80075ea:	eddf 7a24 	vldr	s15, [pc, #144]	; 800767c <setLeftWheel+0xd8>
 80075ee:	eef1 7a67 	vneg.f32	s15, s15
 80075f2:	edc7 7a01 	vstr	s15, [r7, #4]

	l_pwma = (l_speed < 0) ? (-l_speed) * u12_max : 0;
 80075f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80075fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007602:	d511      	bpl.n	8007628 <setLeftWheel+0x84>
 8007604:	edd7 7a01 	vldr	s15, [r7, #4]
 8007608:	eeb1 7a67 	vneg.f32	s14, s15
 800760c:	4b1c      	ldr	r3, [pc, #112]	; (8007680 <setLeftWheel+0xdc>)
 800760e:	881b      	ldrh	r3, [r3, #0]
 8007610:	ee07 3a90 	vmov	s15, r3
 8007614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007620:	ee17 3a90 	vmov	r3, s15
 8007624:	b29b      	uxth	r3, r3
 8007626:	e000      	b.n	800762a <setLeftWheel+0x86>
 8007628:	2300      	movs	r3, #0
 800762a:	81fb      	strh	r3, [r7, #14]
	l_pwmb = (l_speed >= 0) ? l_speed * u12_max : 0;
 800762c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007630:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007638:	db0f      	blt.n	800765a <setLeftWheel+0xb6>
 800763a:	4b11      	ldr	r3, [pc, #68]	; (8007680 <setLeftWheel+0xdc>)
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007646:	edd7 7a01 	vldr	s15, [r7, #4]
 800764a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007652:	ee17 3a90 	vmov	r3, s15
 8007656:	b29b      	uxth	r3, r3
 8007658:	e000      	b.n	800765c <setLeftWheel+0xb8>
 800765a:	2300      	movs	r3, #0
 800765c:	81bb      	strh	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, l_pwma); // LPWMA
 800765e:	4b09      	ldr	r3, [pc, #36]	; (8007684 <setLeftWheel+0xe0>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	89fa      	ldrh	r2, [r7, #14]
 8007664:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, l_pwmb); // LPWMB
 8007666:	4b07      	ldr	r3, [pc, #28]	; (8007684 <setLeftWheel+0xe0>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	89ba      	ldrh	r2, [r7, #12]
 800766c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800766e:	bf00      	nop
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	3f333333 	.word	0x3f333333
 8007680:	2000002a 	.word	0x2000002a
 8007684:	2000040c 	.word	0x2000040c

08007688 <setRightWheel>:

void setRightWheel(float r_speed)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t r_pwma, r_pwmb;

	if (abs(r_speed) > SPEED_THRESHOLD)
 8007692:	edd7 7a01 	vldr	s15, [r7, #4]
 8007696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800769a:	ee17 3a90 	vmov	r3, s15
 800769e:	2b00      	cmp	r3, #0
 80076a0:	bfb8      	it	lt
 80076a2:	425b      	neglt	r3, r3
 80076a4:	ee07 3a90 	vmov	s15, r3
 80076a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076ac:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007760 <setRightWheel+0xd8>
 80076b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b8:	dd0f      	ble.n	80076da <setRightWheel+0x52>
		r_speed = (r_speed > 0) ? SPEED_THRESHOLD : -SPEED_THRESHOLD;
 80076ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80076be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c6:	dd02      	ble.n	80076ce <setRightWheel+0x46>
 80076c8:	eddf 7a25 	vldr	s15, [pc, #148]	; 8007760 <setRightWheel+0xd8>
 80076cc:	e003      	b.n	80076d6 <setRightWheel+0x4e>
 80076ce:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007760 <setRightWheel+0xd8>
 80076d2:	eef1 7a67 	vneg.f32	s15, s15
 80076d6:	edc7 7a01 	vstr	s15, [r7, #4]
	r_pwma = (r_speed < 0) ? (-r_speed) * u12_max : 0;
 80076da:	edd7 7a01 	vldr	s15, [r7, #4]
 80076de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e6:	d511      	bpl.n	800770c <setRightWheel+0x84>
 80076e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80076ec:	eeb1 7a67 	vneg.f32	s14, s15
 80076f0:	4b1c      	ldr	r3, [pc, #112]	; (8007764 <setRightWheel+0xdc>)
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	ee07 3a90 	vmov	s15, r3
 80076f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007704:	ee17 3a90 	vmov	r3, s15
 8007708:	b29b      	uxth	r3, r3
 800770a:	e000      	b.n	800770e <setRightWheel+0x86>
 800770c:	2300      	movs	r3, #0
 800770e:	81fb      	strh	r3, [r7, #14]
	r_pwmb = (r_speed >= 0) ? r_speed * u12_max : 0;
 8007710:	edd7 7a01 	vldr	s15, [r7, #4]
 8007714:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800771c:	db0f      	blt.n	800773e <setRightWheel+0xb6>
 800771e:	4b11      	ldr	r3, [pc, #68]	; (8007764 <setRightWheel+0xdc>)
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	ee07 3a90 	vmov	s15, r3
 8007726:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800772a:	edd7 7a01 	vldr	s15, [r7, #4]
 800772e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007736:	ee17 3a90 	vmov	r3, s15
 800773a:	b29b      	uxth	r3, r3
 800773c:	e000      	b.n	8007740 <setRightWheel+0xb8>
 800773e:	2300      	movs	r3, #0
 8007740:	81bb      	strh	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, r_pwma); // RPWMA
 8007742:	4b09      	ldr	r3, [pc, #36]	; (8007768 <setRightWheel+0xe0>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	89fa      	ldrh	r2, [r7, #14]
 8007748:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, r_pwmb); // RPWMB
 800774a:	4b07      	ldr	r3, [pc, #28]	; (8007768 <setRightWheel+0xe0>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	89ba      	ldrh	r2, [r7, #12]
 8007750:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007752:	bf00      	nop
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	3f333333 	.word	0x3f333333
 8007764:	2000002a 	.word	0x2000002a
 8007768:	2000040c 	.word	0x2000040c

0800776c <setWheels>:

int setWheels()
{
 800776c:	b580      	push	{r7, lr}
 800776e:	af00      	add	r7, sp, #0
	setLeftWheel(l_speed);
 8007770:	4b08      	ldr	r3, [pc, #32]	; (8007794 <setWheels+0x28>)
 8007772:	edd3 7a00 	vldr	s15, [r3]
 8007776:	eeb0 0a67 	vmov.f32	s0, s15
 800777a:	f7ff ff13 	bl	80075a4 <setLeftWheel>
	setRightWheel(r_speed);
 800777e:	4b06      	ldr	r3, [pc, #24]	; (8007798 <setWheels+0x2c>)
 8007780:	edd3 7a00 	vldr	s15, [r3]
 8007784:	eeb0 0a67 	vmov.f32	s0, s15
 8007788:	f7ff ff7e 	bl	8007688 <setRightWheel>
	return 0;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20000840 	.word	0x20000840
 8007798:	20000844 	.word	0x20000844

0800779c <readSensor>:
bool R = false;
bool F = false;

/*read IR sensors*/
void readSensor(void)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	af00      	add	r7, sp, #0
	LED7_ON;
 80077a0:	2201      	movs	r2, #1
 80077a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80077a6:	4877      	ldr	r0, [pc, #476]	; (8007984 <readSensor+0x1e8>)
 80077a8:	f7fc fa3e 	bl	8003c28 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COUNTER(&htim1,0);
 80077ac:	4b76      	ldr	r3, [pc, #472]	; (8007988 <readSensor+0x1ec>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2200      	movs	r2, #0
 80077b2:	625a      	str	r2, [r3, #36]	; 0x24
	//read DC value	
	LFSensor = read_LF_Sensor;	
 80077b4:	2101      	movs	r1, #1
 80077b6:	2000      	movs	r0, #0
 80077b8:	f7ff fca8 	bl	800710c <readADC>
 80077bc:	4603      	mov	r3, r0
 80077be:	461a      	mov	r2, r3
 80077c0:	4b72      	ldr	r3, [pc, #456]	; (800798c <readSensor+0x1f0>)
 80077c2:	601a      	str	r2, [r3, #0]
	RFSensor = read_RF_Sensor;	
 80077c4:	2101      	movs	r1, #1
 80077c6:	2001      	movs	r0, #1
 80077c8:	f7ff fca0 	bl	800710c <readADC>
 80077cc:	4603      	mov	r3, r0
 80077ce:	461a      	mov	r2, r3
 80077d0:	4b6f      	ldr	r3, [pc, #444]	; (8007990 <readSensor+0x1f4>)
 80077d2:	601a      	str	r2, [r3, #0]
	DLSensor = read_DL_Sensor;
 80077d4:	2101      	movs	r1, #1
 80077d6:	2003      	movs	r0, #3
 80077d8:	f7ff fc98 	bl	800710c <readADC>
 80077dc:	4603      	mov	r3, r0
 80077de:	461a      	mov	r2, r3
 80077e0:	4b6c      	ldr	r3, [pc, #432]	; (8007994 <readSensor+0x1f8>)
 80077e2:	601a      	str	r2, [r3, #0]
	DRSensor = read_DR_Sensor;	
 80077e4:	2101      	movs	r1, #1
 80077e6:	2002      	movs	r0, #2
 80077e8:	f7ff fc90 	bl	800710c <readADC>
 80077ec:	4603      	mov	r3, r0
 80077ee:	461a      	mov	r2, r3
 80077f0:	4b69      	ldr	r3, [pc, #420]	; (8007998 <readSensor+0x1fc>)
 80077f2:	601a      	str	r2, [r3, #0]
	
	
    //left front sensor
	LF_EM_ON;
 80077f4:	2201      	movs	r2, #1
 80077f6:	2180      	movs	r1, #128	; 0x80
 80077f8:	4868      	ldr	r0, [pc, #416]	; (800799c <readSensor+0x200>)
 80077fa:	f7fc fa15 	bl	8003c28 <HAL_GPIO_WritePin>
	LFSensor = read_LF_Sensor - LFSensor;
 80077fe:	2101      	movs	r1, #1
 8007800:	2000      	movs	r0, #0
 8007802:	f7ff fc83 	bl	800710c <readADC>
 8007806:	4603      	mov	r3, r0
 8007808:	461a      	mov	r2, r3
 800780a:	4b60      	ldr	r3, [pc, #384]	; (800798c <readSensor+0x1f0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	4a5e      	ldr	r2, [pc, #376]	; (800798c <readSensor+0x1f0>)
 8007812:	6013      	str	r3, [r2, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<60);
 8007814:	bf00      	nop
 8007816:	4b5c      	ldr	r3, [pc, #368]	; (8007988 <readSensor+0x1ec>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781c:	2b3b      	cmp	r3, #59	; 0x3b
 800781e:	d9fa      	bls.n	8007816 <readSensor+0x7a>
	LF_EM_OFF;
 8007820:	2200      	movs	r2, #0
 8007822:	2180      	movs	r1, #128	; 0x80
 8007824:	485d      	ldr	r0, [pc, #372]	; (800799c <readSensor+0x200>)
 8007826:	f7fc f9ff 	bl	8003c28 <HAL_GPIO_WritePin>
	if(LFSensor < 0)//error check
 800782a:	4b58      	ldr	r3, [pc, #352]	; (800798c <readSensor+0x1f0>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	da02      	bge.n	8007838 <readSensor+0x9c>
		LFSensor = 0;
 8007832:	4b56      	ldr	r3, [pc, #344]	; (800798c <readSensor+0x1f0>)
 8007834:	2200      	movs	r2, #0
 8007836:	601a      	str	r2, [r3, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<140);
 8007838:	bf00      	nop
 800783a:	4b53      	ldr	r3, [pc, #332]	; (8007988 <readSensor+0x1ec>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	2b8b      	cmp	r3, #139	; 0x8b
 8007842:	d9fa      	bls.n	800783a <readSensor+0x9e>

	//right front sensor
	RF_EM_ON;
 8007844:	2201      	movs	r2, #1
 8007846:	2102      	movs	r1, #2
 8007848:	4854      	ldr	r0, [pc, #336]	; (800799c <readSensor+0x200>)
 800784a:	f7fc f9ed 	bl	8003c28 <HAL_GPIO_WritePin>
	RFSensor = read_RF_Sensor - RFSensor;
 800784e:	2101      	movs	r1, #1
 8007850:	2001      	movs	r0, #1
 8007852:	f7ff fc5b 	bl	800710c <readADC>
 8007856:	4603      	mov	r3, r0
 8007858:	461a      	mov	r2, r3
 800785a:	4b4d      	ldr	r3, [pc, #308]	; (8007990 <readSensor+0x1f4>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	4a4b      	ldr	r2, [pc, #300]	; (8007990 <readSensor+0x1f4>)
 8007862:	6013      	str	r3, [r2, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<200);
 8007864:	bf00      	nop
 8007866:	4b48      	ldr	r3, [pc, #288]	; (8007988 <readSensor+0x1ec>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	2bc7      	cmp	r3, #199	; 0xc7
 800786e:	d9fa      	bls.n	8007866 <readSensor+0xca>
	RF_EM_OFF;
 8007870:	2200      	movs	r2, #0
 8007872:	2102      	movs	r1, #2
 8007874:	4849      	ldr	r0, [pc, #292]	; (800799c <readSensor+0x200>)
 8007876:	f7fc f9d7 	bl	8003c28 <HAL_GPIO_WritePin>
	if(RFSensor < 0)
 800787a:	4b45      	ldr	r3, [pc, #276]	; (8007990 <readSensor+0x1f4>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	da02      	bge.n	8007888 <readSensor+0xec>
		RFSensor = 0;
 8007882:	4b43      	ldr	r3, [pc, #268]	; (8007990 <readSensor+0x1f4>)
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]
	while(__HAL_TIM_GET_COUNTER(&htim1)<280);
 8007888:	bf00      	nop
 800788a:	4b3f      	ldr	r3, [pc, #252]	; (8007988 <readSensor+0x1ec>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007890:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8007894:	d3f9      	bcc.n	800788a <readSensor+0xee>

    //diagonal sensors
	SIDE_EM_ON;
 8007896:	2201      	movs	r2, #1
 8007898:	2120      	movs	r1, #32
 800789a:	4840      	ldr	r0, [pc, #256]	; (800799c <readSensor+0x200>)
 800789c:	f7fc f9c4 	bl	8003c28 <HAL_GPIO_WritePin>
	while(__HAL_TIM_GET_COUNTER(&htim1)<340);
 80078a0:	bf00      	nop
 80078a2:	4b39      	ldr	r3, [pc, #228]	; (8007988 <readSensor+0x1ec>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80078ac:	d3f9      	bcc.n	80078a2 <readSensor+0x106>
	DLSensor = read_DL_Sensor - DLSensor;
 80078ae:	2101      	movs	r1, #1
 80078b0:	2003      	movs	r0, #3
 80078b2:	f7ff fc2b 	bl	800710c <readADC>
 80078b6:	4603      	mov	r3, r0
 80078b8:	461a      	mov	r2, r3
 80078ba:	4b36      	ldr	r3, [pc, #216]	; (8007994 <readSensor+0x1f8>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	4a34      	ldr	r2, [pc, #208]	; (8007994 <readSensor+0x1f8>)
 80078c2:	6013      	str	r3, [r2, #0]
	DRSensor = read_DR_Sensor - DRSensor;
 80078c4:	2101      	movs	r1, #1
 80078c6:	2002      	movs	r0, #2
 80078c8:	f7ff fc20 	bl	800710c <readADC>
 80078cc:	4603      	mov	r3, r0
 80078ce:	461a      	mov	r2, r3
 80078d0:	4b31      	ldr	r3, [pc, #196]	; (8007998 <readSensor+0x1fc>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	4a30      	ldr	r2, [pc, #192]	; (8007998 <readSensor+0x1fc>)
 80078d8:	6013      	str	r3, [r2, #0]
    SIDE_EM_OFF;
 80078da:	2200      	movs	r2, #0
 80078dc:	2120      	movs	r1, #32
 80078de:	482f      	ldr	r0, [pc, #188]	; (800799c <readSensor+0x200>)
 80078e0:	f7fc f9a2 	bl	8003c28 <HAL_GPIO_WritePin>
	if(DLSensor < 0)
 80078e4:	4b2b      	ldr	r3, [pc, #172]	; (8007994 <readSensor+0x1f8>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	da02      	bge.n	80078f2 <readSensor+0x156>
		DLSensor = 0;
 80078ec:	4b29      	ldr	r3, [pc, #164]	; (8007994 <readSensor+0x1f8>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	601a      	str	r2, [r3, #0]
	if(DRSensor < 0)
 80078f2:	4b29      	ldr	r3, [pc, #164]	; (8007998 <readSensor+0x1fc>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	da02      	bge.n	8007900 <readSensor+0x164>
		DRSensor = 0;
 80078fa:	4b27      	ldr	r3, [pc, #156]	; (8007998 <readSensor+0x1fc>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]
	// while(__HAL_TIM_GET_COUNTER(&htim1)<500);
	
	readVolMeter();
 8007900:	f000 f852 	bl	80079a8 <readVolMeter>
	
	LFSensor = LFSensor*reflectionRate/1000;
 8007904:	4b21      	ldr	r3, [pc, #132]	; (800798c <readSensor+0x1f0>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a25      	ldr	r2, [pc, #148]	; (80079a0 <readSensor+0x204>)
 800790a:	6812      	ldr	r2, [r2, #0]
 800790c:	fb02 f303 	mul.w	r3, r2, r3
 8007910:	4a24      	ldr	r2, [pc, #144]	; (80079a4 <readSensor+0x208>)
 8007912:	fb82 1203 	smull	r1, r2, r2, r3
 8007916:	1192      	asrs	r2, r2, #6
 8007918:	17db      	asrs	r3, r3, #31
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	4a1b      	ldr	r2, [pc, #108]	; (800798c <readSensor+0x1f0>)
 800791e:	6013      	str	r3, [r2, #0]
	RFSensor = RFSensor*reflectionRate/1000;
 8007920:	4b1b      	ldr	r3, [pc, #108]	; (8007990 <readSensor+0x1f4>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a1e      	ldr	r2, [pc, #120]	; (80079a0 <readSensor+0x204>)
 8007926:	6812      	ldr	r2, [r2, #0]
 8007928:	fb02 f303 	mul.w	r3, r2, r3
 800792c:	4a1d      	ldr	r2, [pc, #116]	; (80079a4 <readSensor+0x208>)
 800792e:	fb82 1203 	smull	r1, r2, r2, r3
 8007932:	1192      	asrs	r2, r2, #6
 8007934:	17db      	asrs	r3, r3, #31
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	4a15      	ldr	r2, [pc, #84]	; (8007990 <readSensor+0x1f4>)
 800793a:	6013      	str	r3, [r2, #0]
	DLSensor = DLSensor*reflectionRate/1000;
 800793c:	4b15      	ldr	r3, [pc, #84]	; (8007994 <readSensor+0x1f8>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a17      	ldr	r2, [pc, #92]	; (80079a0 <readSensor+0x204>)
 8007942:	6812      	ldr	r2, [r2, #0]
 8007944:	fb02 f303 	mul.w	r3, r2, r3
 8007948:	4a16      	ldr	r2, [pc, #88]	; (80079a4 <readSensor+0x208>)
 800794a:	fb82 1203 	smull	r1, r2, r2, r3
 800794e:	1192      	asrs	r2, r2, #6
 8007950:	17db      	asrs	r3, r3, #31
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	4a0f      	ldr	r2, [pc, #60]	; (8007994 <readSensor+0x1f8>)
 8007956:	6013      	str	r3, [r2, #0]
	DRSensor = DRSensor*reflectionRate/1000;
 8007958:	4b0f      	ldr	r3, [pc, #60]	; (8007998 <readSensor+0x1fc>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a10      	ldr	r2, [pc, #64]	; (80079a0 <readSensor+0x204>)
 800795e:	6812      	ldr	r2, [r2, #0]
 8007960:	fb02 f303 	mul.w	r3, r2, r3
 8007964:	4a0f      	ldr	r2, [pc, #60]	; (80079a4 <readSensor+0x208>)
 8007966:	fb82 1203 	smull	r1, r2, r2, r3
 800796a:	1192      	asrs	r2, r2, #6
 800796c:	17db      	asrs	r3, r3, #31
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	4a09      	ldr	r2, [pc, #36]	; (8007998 <readSensor+0x1fc>)
 8007972:	6013      	str	r3, [r2, #0]
	
	LED7_OFF;
 8007974:	2200      	movs	r2, #0
 8007976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800797a:	4802      	ldr	r0, [pc, #8]	; (8007984 <readSensor+0x1e8>)
 800797c:	f7fc f954 	bl	8003c28 <HAL_GPIO_WritePin>
}
 8007980:	bf00      	nop
 8007982:	bd80      	pop	{r7, pc}
 8007984:	40020000 	.word	0x40020000
 8007988:	2000037c 	.word	0x2000037c
 800798c:	20000850 	.word	0x20000850
 8007990:	20000854 	.word	0x20000854
 8007994:	20000858 	.word	0x20000858
 8007998:	2000085c 	.word	0x2000085c
 800799c:	40020800 	.word	0x40020800
 80079a0:	2000002c 	.word	0x2000002c
 80079a4:	10624dd3 	.word	0x10624dd3

080079a8 <readVolMeter>:



/*read voltage meter*/
void readVolMeter(void)
{          //3240 = 7.85V
 80079a8:	b580      	push	{r7, lr}
 80079aa:	af00      	add	r7, sp, #0
	volMeter = read_Vol_Meter;//raw value
 80079ac:	2101      	movs	r1, #1
 80079ae:	2004      	movs	r0, #4
 80079b0:	f7ff fbac 	bl	800710c <readADC>
 80079b4:	4603      	mov	r3, r0
 80079b6:	461a      	mov	r2, r3
 80079b8:	4b21      	ldr	r3, [pc, #132]	; (8007a40 <readVolMeter+0x98>)
 80079ba:	601a      	str	r2, [r3, #0]
	voltage = (volMeter*ADC_REF_VOL/4095)* 2.8;//actual voltage value  ex) 8.2V = 8200
 80079bc:	4b20      	ldr	r3, [pc, #128]	; (8007a40 <readVolMeter+0x98>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7f8 fdaf 	bl	8000524 <__aeabi_i2d>
 80079c6:	a318      	add	r3, pc, #96	; (adr r3, 8007a28 <readVolMeter+0x80>)
 80079c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079cc:	f7f8 fe14 	bl	80005f8 <__aeabi_dmul>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	4610      	mov	r0, r2
 80079d6:	4619      	mov	r1, r3
 80079d8:	a315      	add	r3, pc, #84	; (adr r3, 8007a30 <readVolMeter+0x88>)
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	f7f8 ff35 	bl	800084c <__aeabi_ddiv>
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	4610      	mov	r0, r2
 80079e8:	4619      	mov	r1, r3
 80079ea:	a313      	add	r3, pc, #76	; (adr r3, 8007a38 <readVolMeter+0x90>)
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	f7f8 fe02 	bl	80005f8 <__aeabi_dmul>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	4610      	mov	r0, r2
 80079fa:	4619      	mov	r1, r3
 80079fc:	f7f9 f8d4 	bl	8000ba8 <__aeabi_d2f>
 8007a00:	4603      	mov	r3, r0
 8007a02:	4a10      	ldr	r2, [pc, #64]	; (8007a44 <readVolMeter+0x9c>)
 8007a04:	6013      	str	r3, [r2, #0]
	if (voltage<LOW_BAT_TH)
 8007a06:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <readVolMeter+0x9c>)
 8007a08:	edd3 7a00 	vldr	s15, [r3]
 8007a0c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007a48 <readVolMeter+0xa0>
 8007a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a18:	d400      	bmi.n	8007a1c <readVolMeter+0x74>
		stop_it_all();
}
 8007a1a:	e001      	b.n	8007a20 <readVolMeter+0x78>
		stop_it_all();
 8007a1c:	f000 f816 	bl	8007a4c <stop_it_all>
}
 8007a20:	bf00      	nop
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	f3af 8000 	nop.w
 8007a28:	bc6a7efa 	.word	0xbc6a7efa
 8007a2c:	400a9374 	.word	0x400a9374
 8007a30:	00000000 	.word	0x00000000
 8007a34:	40affe00 	.word	0x40affe00
 8007a38:	66666666 	.word	0x66666666
 8007a3c:	40066666 	.word	0x40066666
 8007a40:	20000848 	.word	0x20000848
 8007a44:	2000084c 	.word	0x2000084c
 8007a48:	41066666 	.word	0x41066666

08007a4c <stop_it_all>:

void stop_it_all(void){
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0
	disp_state=LOW_BAT;
 8007a50:	4b2e      	ldr	r3, [pc, #184]	; (8007b0c <stop_it_all+0xc0>)
 8007a52:	2204      	movs	r2, #4
 8007a54:	701a      	strb	r2, [r3, #0]
	displayUpdate();
 8007a56:	f7ff fc6b 	bl	8007330 <displayUpdate>
	OFF_BUZZ;
 8007a5a:	4b2d      	ldr	r3, [pc, #180]	; (8007b10 <stop_it_all+0xc4>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	635a      	str	r2, [r3, #52]	; 0x34
	STOP_ROBOT;
 8007a62:	4b2c      	ldr	r3, [pc, #176]	; (8007b14 <stop_it_all+0xc8>)
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	4b2b      	ldr	r3, [pc, #172]	; (8007b18 <stop_it_all+0xcc>)
 8007a6c:	f04f 0200 	mov.w	r2, #0
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	f7ff fe7b 	bl	800776c <setWheels>
	ALL_LED_OFF;
 8007a76:	2200      	movs	r2, #0
 8007a78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007a7c:	4827      	ldr	r0, [pc, #156]	; (8007b1c <stop_it_all+0xd0>)
 8007a7e:	f7fc f8d3 	bl	8003c28 <HAL_GPIO_WritePin>
 8007a82:	2200      	movs	r2, #0
 8007a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007a88:	4824      	ldr	r0, [pc, #144]	; (8007b1c <stop_it_all+0xd0>)
 8007a8a:	f7fc f8cd 	bl	8003c28 <HAL_GPIO_WritePin>
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a94:	4822      	ldr	r0, [pc, #136]	; (8007b20 <stop_it_all+0xd4>)
 8007a96:	f7fc f8c7 	bl	8003c28 <HAL_GPIO_WritePin>
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007aa0:	481f      	ldr	r0, [pc, #124]	; (8007b20 <stop_it_all+0xd4>)
 8007aa2:	f7fc f8c1 	bl	8003c28 <HAL_GPIO_WritePin>
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007aac:	481c      	ldr	r0, [pc, #112]	; (8007b20 <stop_it_all+0xd4>)
 8007aae:	f7fc f8bb 	bl	8003c28 <HAL_GPIO_WritePin>
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2104      	movs	r1, #4
 8007ab6:	481b      	ldr	r0, [pc, #108]	; (8007b24 <stop_it_all+0xd8>)
 8007ab8:	f7fc f8b6 	bl	8003c28 <HAL_GPIO_WritePin>
 8007abc:	2200      	movs	r2, #0
 8007abe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ac2:	4816      	ldr	r0, [pc, #88]	; (8007b1c <stop_it_all+0xd0>)
 8007ac4:	f7fc f8b0 	bl	8003c28 <HAL_GPIO_WritePin>
 8007ac8:	2200      	movs	r2, #0
 8007aca:	2110      	movs	r1, #16
 8007acc:	4816      	ldr	r0, [pc, #88]	; (8007b28 <stop_it_all+0xdc>)
 8007ace:	f7fc f8ab 	bl	8003c28 <HAL_GPIO_WritePin>
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007ad8:	4813      	ldr	r0, [pc, #76]	; (8007b28 <stop_it_all+0xdc>)
 8007ada:	f7fc f8a5 	bl	8003c28 <HAL_GPIO_WritePin>
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	480f      	ldr	r0, [pc, #60]	; (8007b20 <stop_it_all+0xd4>)
 8007ae4:	f7fc f8a0 	bl	8003c28 <HAL_GPIO_WritePin>
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007aee:	480e      	ldr	r0, [pc, #56]	; (8007b28 <stop_it_all+0xdc>)
 8007af0:	f7fc f89a 	bl	8003c28 <HAL_GPIO_WritePin>
	TIM6_IT_STOP;
 8007af4:	480d      	ldr	r0, [pc, #52]	; (8007b2c <stop_it_all+0xe0>)
 8007af6:	f7fd fc59 	bl	80053ac <HAL_TIM_Base_Stop_IT>
	TIM13_IT_STOP;
 8007afa:	480d      	ldr	r0, [pc, #52]	; (8007b30 <stop_it_all+0xe4>)
 8007afc:	f7fd fc56 	bl	80053ac <HAL_TIM_Base_Stop_IT>
	TIM14_IT_STOP;
 8007b00:	480c      	ldr	r0, [pc, #48]	; (8007b34 <stop_it_all+0xe8>)
 8007b02:	f7fd fc53 	bl	80053ac <HAL_TIM_Base_Stop_IT>
	return;
 8007b06:	bf00      	nop
}
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	2000083c 	.word	0x2000083c
 8007b10:	200004e4 	.word	0x200004e4
 8007b14:	20000840 	.word	0x20000840
 8007b18:	20000844 	.word	0x20000844
 8007b1c:	40020000 	.word	0x40020000
 8007b20:	40020800 	.word	0x40020800
 8007b24:	40020c00 	.word	0x40020c00
 8007b28:	40020400 	.word	0x40020400
 8007b2c:	2000049c 	.word	0x2000049c
 8007b30:	2000052c 	.word	0x2000052c
 8007b34:	20000574 	.word	0x20000574

08007b38 <cppmain>:
bool buttonPress = false;
int mouseState = 0;


int cppmain(void)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	af00      	add	r7, sp, #0
	initialization_block();
 8007b3c:	f000 f820 	bl	8007b80 <initialization_block>
	HAL_Delay(1000);
 8007b40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b44:	f7fa feb4 	bl	80028b0 <HAL_Delay>
	disp_state = SENSOR_READ;
 8007b48:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <cppmain+0x40>)
 8007b4a:	2203      	movs	r2, #3
 8007b4c:	701a      	strb	r2, [r3, #0]

	while (1)
	{
		HAL_Delay(20000);
 8007b4e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8007b52:	f7fa fead 	bl	80028b0 <HAL_Delay>
		disp_state = DEFAULT;
 8007b56:	4b08      	ldr	r3, [pc, #32]	; (8007b78 <cppmain+0x40>)
 8007b58:	2201      	movs	r2, #1
 8007b5a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 8007b5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b60:	f7fa fea6 	bl	80028b0 <HAL_Delay>
		disp_state = SENSOR_READ;
 8007b64:	4b04      	ldr	r3, [pc, #16]	; (8007b78 <cppmain+0x40>)
 8007b66:	2203      	movs	r2, #3
 8007b68:	701a      	strb	r2, [r3, #0]
		i++;
 8007b6a:	4b04      	ldr	r3, [pc, #16]	; (8007b7c <cppmain+0x44>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	4a02      	ldr	r2, [pc, #8]	; (8007b7c <cppmain+0x44>)
 8007b72:	6013      	str	r3, [r2, #0]
		HAL_Delay(20000);
 8007b74:	e7eb      	b.n	8007b4e <cppmain+0x16>
 8007b76:	bf00      	nop
 8007b78:	2000083c 	.word	0x2000083c
 8007b7c:	20000860 	.word	0x20000860

08007b80 <initialization_block>:
	}
}

int initialization_block(void)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	af00      	add	r7, sp, #0
	ALL_LED_ON;
 8007b84:	2201      	movs	r2, #1
 8007b86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b8a:	484d      	ldr	r0, [pc, #308]	; (8007cc0 <initialization_block+0x140>)
 8007b8c:	f7fc f84c 	bl	8003c28 <HAL_GPIO_WritePin>
 8007b90:	2201      	movs	r2, #1
 8007b92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b96:	484a      	ldr	r0, [pc, #296]	; (8007cc0 <initialization_block+0x140>)
 8007b98:	f7fc f846 	bl	8003c28 <HAL_GPIO_WritePin>
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ba2:	4848      	ldr	r0, [pc, #288]	; (8007cc4 <initialization_block+0x144>)
 8007ba4:	f7fc f840 	bl	8003c28 <HAL_GPIO_WritePin>
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bae:	4845      	ldr	r0, [pc, #276]	; (8007cc4 <initialization_block+0x144>)
 8007bb0:	f7fc f83a 	bl	8003c28 <HAL_GPIO_WritePin>
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007bba:	4842      	ldr	r0, [pc, #264]	; (8007cc4 <initialization_block+0x144>)
 8007bbc:	f7fc f834 	bl	8003c28 <HAL_GPIO_WritePin>
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	2104      	movs	r1, #4
 8007bc4:	4840      	ldr	r0, [pc, #256]	; (8007cc8 <initialization_block+0x148>)
 8007bc6:	f7fc f82f 	bl	8003c28 <HAL_GPIO_WritePin>
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007bd0:	483b      	ldr	r0, [pc, #236]	; (8007cc0 <initialization_block+0x140>)
 8007bd2:	f7fc f829 	bl	8003c28 <HAL_GPIO_WritePin>
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	2110      	movs	r1, #16
 8007bda:	483c      	ldr	r0, [pc, #240]	; (8007ccc <initialization_block+0x14c>)
 8007bdc:	f7fc f824 	bl	8003c28 <HAL_GPIO_WritePin>
 8007be0:	2201      	movs	r2, #1
 8007be2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007be6:	4839      	ldr	r0, [pc, #228]	; (8007ccc <initialization_block+0x14c>)
 8007be8:	f7fc f81e 	bl	8003c28 <HAL_GPIO_WritePin>
 8007bec:	2201      	movs	r2, #1
 8007bee:	2101      	movs	r1, #1
 8007bf0:	4834      	ldr	r0, [pc, #208]	; (8007cc4 <initialization_block+0x144>)
 8007bf2:	f7fc f819 	bl	8003c28 <HAL_GPIO_WritePin>
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bfc:	4833      	ldr	r0, [pc, #204]	; (8007ccc <initialization_block+0x14c>)
 8007bfe:	f7fc f813 	bl	8003c28 <HAL_GPIO_WritePin>
	TIM1_START; ////////////////// CRUCIAL PART DON"T OFFFFFFFFFFFFFFFF ///////////////////////////
 8007c02:	4833      	ldr	r0, [pc, #204]	; (8007cd0 <initialization_block+0x150>)
 8007c04:	f7fd fafa 	bl	80051fc <HAL_TIM_Base_Start>
	TIM6_IT_START;
 8007c08:	4832      	ldr	r0, [pc, #200]	; (8007cd4 <initialization_block+0x154>)
 8007c0a:	f7fd fb5f 	bl	80052cc <HAL_TIM_Base_Start_IT>

	motorInit();
 8007c0e:	f7ff fca5 	bl	800755c <motorInit>
	encoderInit();
 8007c12:	f7ff fc7d 	bl	8007510 <encoderInit>
	gyroInit();
 8007c16:	f7fe ff69 	bl	8006aec <gyroInit>
	displayInit();
 8007c1a:	f7ff facf 	bl	80071bc <displayInit>
	// buzzerInit();
	PID_Controller(IDLE);
 8007c1e:	2000      	movs	r0, #0
 8007c20:	f7ff f9d6 	bl	8006fd0 <PID_Controller>

	ALL_LED_OFF;
 8007c24:	2200      	movs	r2, #0
 8007c26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c2a:	4825      	ldr	r0, [pc, #148]	; (8007cc0 <initialization_block+0x140>)
 8007c2c:	f7fb fffc 	bl	8003c28 <HAL_GPIO_WritePin>
 8007c30:	2200      	movs	r2, #0
 8007c32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c36:	4822      	ldr	r0, [pc, #136]	; (8007cc0 <initialization_block+0x140>)
 8007c38:	f7fb fff6 	bl	8003c28 <HAL_GPIO_WritePin>
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c42:	4820      	ldr	r0, [pc, #128]	; (8007cc4 <initialization_block+0x144>)
 8007c44:	f7fb fff0 	bl	8003c28 <HAL_GPIO_WritePin>
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c4e:	481d      	ldr	r0, [pc, #116]	; (8007cc4 <initialization_block+0x144>)
 8007c50:	f7fb ffea 	bl	8003c28 <HAL_GPIO_WritePin>
 8007c54:	2200      	movs	r2, #0
 8007c56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c5a:	481a      	ldr	r0, [pc, #104]	; (8007cc4 <initialization_block+0x144>)
 8007c5c:	f7fb ffe4 	bl	8003c28 <HAL_GPIO_WritePin>
 8007c60:	2200      	movs	r2, #0
 8007c62:	2104      	movs	r1, #4
 8007c64:	4818      	ldr	r0, [pc, #96]	; (8007cc8 <initialization_block+0x148>)
 8007c66:	f7fb ffdf 	bl	8003c28 <HAL_GPIO_WritePin>
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c70:	4813      	ldr	r0, [pc, #76]	; (8007cc0 <initialization_block+0x140>)
 8007c72:	f7fb ffd9 	bl	8003c28 <HAL_GPIO_WritePin>
 8007c76:	2200      	movs	r2, #0
 8007c78:	2110      	movs	r1, #16
 8007c7a:	4814      	ldr	r0, [pc, #80]	; (8007ccc <initialization_block+0x14c>)
 8007c7c:	f7fb ffd4 	bl	8003c28 <HAL_GPIO_WritePin>
 8007c80:	2200      	movs	r2, #0
 8007c82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c86:	4811      	ldr	r0, [pc, #68]	; (8007ccc <initialization_block+0x14c>)
 8007c88:	f7fb ffce 	bl	8003c28 <HAL_GPIO_WritePin>
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2101      	movs	r1, #1
 8007c90:	480c      	ldr	r0, [pc, #48]	; (8007cc4 <initialization_block+0x144>)
 8007c92:	f7fb ffc9 	bl	8003c28 <HAL_GPIO_WritePin>
 8007c96:	2200      	movs	r2, #0
 8007c98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c9c:	480b      	ldr	r0, [pc, #44]	; (8007ccc <initialization_block+0x14c>)
 8007c9e:	f7fb ffc3 	bl	8003c28 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8007ca2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ca6:	f7fa fe03 	bl	80028b0 <HAL_Delay>
	gyroCalibration();
 8007caa:	f7ff f8a9 	bl	8006e00 <gyroCalibration>
	disp_state = GYRO_CALIB;
 8007cae:	4b0a      	ldr	r3, [pc, #40]	; (8007cd8 <initialization_block+0x158>)
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	701a      	strb	r2, [r3, #0]
	TIM14_IT_START;
 8007cb4:	4809      	ldr	r0, [pc, #36]	; (8007cdc <initialization_block+0x15c>)
 8007cb6:	f7fd fb09 	bl	80052cc <HAL_TIM_Base_Start_IT>

	return 0;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	40020000 	.word	0x40020000
 8007cc4:	40020800 	.word	0x40020800
 8007cc8:	40020c00 	.word	0x40020c00
 8007ccc:	40020400 	.word	0x40020400
 8007cd0:	2000037c 	.word	0x2000037c
 8007cd4:	2000049c 	.word	0x2000049c
 8007cd8:	2000083c 	.word	0x2000083c
 8007cdc:	20000574 	.word	0x20000574

08007ce0 <HAL_TIM_PeriodElapsedCallback>:
		buttonPress = true;
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
	if (htim == &htim14)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a0c      	ldr	r2, [pc, #48]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d102      	bne.n	8007cf6 <HAL_TIM_PeriodElapsedCallback+0x16>
		readSensor();
 8007cf0:	f7ff fd54 	bl	800779c <readSensor>
	else if (htim == &htim13)
		gyroUpdate(),
			readSensor();
	else if (htim == &htim6)
		displayUpdate();
}
 8007cf4:	e00e      	b.n	8007d14 <HAL_TIM_PeriodElapsedCallback+0x34>
	else if (htim == &htim13)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a09      	ldr	r2, [pc, #36]	; (8007d20 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d104      	bne.n	8007d08 <HAL_TIM_PeriodElapsedCallback+0x28>
		gyroUpdate(),
 8007cfe:	f7fe ff97 	bl	8006c30 <gyroUpdate>
			readSensor();
 8007d02:	f7ff fd4b 	bl	800779c <readSensor>
}
 8007d06:	e005      	b.n	8007d14 <HAL_TIM_PeriodElapsedCallback+0x34>
	else if (htim == &htim6)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a06      	ldr	r2, [pc, #24]	; (8007d24 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d101      	bne.n	8007d14 <HAL_TIM_PeriodElapsedCallback+0x34>
		displayUpdate();
 8007d10:	f7ff fb0e 	bl	8007330 <displayUpdate>
}
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20000574 	.word	0x20000574
 8007d20:	2000052c 	.word	0x2000052c
 8007d24:	2000049c 	.word	0x2000049c

08007d28 <pow>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	ed2d 8b02 	vpush	{d8}
 8007d2e:	eeb0 8a40 	vmov.f32	s16, s0
 8007d32:	eef0 8a60 	vmov.f32	s17, s1
 8007d36:	ec55 4b11 	vmov	r4, r5, d1
 8007d3a:	f000 f871 	bl	8007e20 <__ieee754_pow>
 8007d3e:	4622      	mov	r2, r4
 8007d40:	462b      	mov	r3, r5
 8007d42:	4620      	mov	r0, r4
 8007d44:	4629      	mov	r1, r5
 8007d46:	ec57 6b10 	vmov	r6, r7, d0
 8007d4a:	f7f8 feef 	bl	8000b2c <__aeabi_dcmpun>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d13b      	bne.n	8007dca <pow+0xa2>
 8007d52:	ec51 0b18 	vmov	r0, r1, d8
 8007d56:	2200      	movs	r2, #0
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f7f8 feb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d5e:	b1b8      	cbz	r0, 8007d90 <pow+0x68>
 8007d60:	2200      	movs	r2, #0
 8007d62:	2300      	movs	r3, #0
 8007d64:	4620      	mov	r0, r4
 8007d66:	4629      	mov	r1, r5
 8007d68:	f7f8 feae 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d146      	bne.n	8007dfe <pow+0xd6>
 8007d70:	ec45 4b10 	vmov	d0, r4, r5
 8007d74:	f000 f848 	bl	8007e08 <finite>
 8007d78:	b338      	cbz	r0, 8007dca <pow+0xa2>
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	4620      	mov	r0, r4
 8007d80:	4629      	mov	r1, r5
 8007d82:	f7f8 feab 	bl	8000adc <__aeabi_dcmplt>
 8007d86:	b300      	cbz	r0, 8007dca <pow+0xa2>
 8007d88:	f001 fe10 	bl	80099ac <__errno>
 8007d8c:	2322      	movs	r3, #34	; 0x22
 8007d8e:	e01b      	b.n	8007dc8 <pow+0xa0>
 8007d90:	ec47 6b10 	vmov	d0, r6, r7
 8007d94:	f000 f838 	bl	8007e08 <finite>
 8007d98:	b9e0      	cbnz	r0, 8007dd4 <pow+0xac>
 8007d9a:	eeb0 0a48 	vmov.f32	s0, s16
 8007d9e:	eef0 0a68 	vmov.f32	s1, s17
 8007da2:	f000 f831 	bl	8007e08 <finite>
 8007da6:	b1a8      	cbz	r0, 8007dd4 <pow+0xac>
 8007da8:	ec45 4b10 	vmov	d0, r4, r5
 8007dac:	f000 f82c 	bl	8007e08 <finite>
 8007db0:	b180      	cbz	r0, 8007dd4 <pow+0xac>
 8007db2:	4632      	mov	r2, r6
 8007db4:	463b      	mov	r3, r7
 8007db6:	4630      	mov	r0, r6
 8007db8:	4639      	mov	r1, r7
 8007dba:	f7f8 feb7 	bl	8000b2c <__aeabi_dcmpun>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d0e2      	beq.n	8007d88 <pow+0x60>
 8007dc2:	f001 fdf3 	bl	80099ac <__errno>
 8007dc6:	2321      	movs	r3, #33	; 0x21
 8007dc8:	6003      	str	r3, [r0, #0]
 8007dca:	ecbd 8b02 	vpop	{d8}
 8007dce:	ec47 6b10 	vmov	d0, r6, r7
 8007dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	4630      	mov	r0, r6
 8007dda:	4639      	mov	r1, r7
 8007ddc:	f7f8 fe74 	bl	8000ac8 <__aeabi_dcmpeq>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	d0f2      	beq.n	8007dca <pow+0xa2>
 8007de4:	eeb0 0a48 	vmov.f32	s0, s16
 8007de8:	eef0 0a68 	vmov.f32	s1, s17
 8007dec:	f000 f80c 	bl	8007e08 <finite>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d0ea      	beq.n	8007dca <pow+0xa2>
 8007df4:	ec45 4b10 	vmov	d0, r4, r5
 8007df8:	f000 f806 	bl	8007e08 <finite>
 8007dfc:	e7c3      	b.n	8007d86 <pow+0x5e>
 8007dfe:	4f01      	ldr	r7, [pc, #4]	; (8007e04 <pow+0xdc>)
 8007e00:	2600      	movs	r6, #0
 8007e02:	e7e2      	b.n	8007dca <pow+0xa2>
 8007e04:	3ff00000 	.word	0x3ff00000

08007e08 <finite>:
 8007e08:	b082      	sub	sp, #8
 8007e0a:	ed8d 0b00 	vstr	d0, [sp]
 8007e0e:	9801      	ldr	r0, [sp, #4]
 8007e10:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007e14:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007e18:	0fc0      	lsrs	r0, r0, #31
 8007e1a:	b002      	add	sp, #8
 8007e1c:	4770      	bx	lr
	...

08007e20 <__ieee754_pow>:
 8007e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	ed2d 8b06 	vpush	{d8-d10}
 8007e28:	b089      	sub	sp, #36	; 0x24
 8007e2a:	ed8d 1b00 	vstr	d1, [sp]
 8007e2e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007e32:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007e36:	ea58 0102 	orrs.w	r1, r8, r2
 8007e3a:	ec57 6b10 	vmov	r6, r7, d0
 8007e3e:	d115      	bne.n	8007e6c <__ieee754_pow+0x4c>
 8007e40:	19b3      	adds	r3, r6, r6
 8007e42:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007e46:	4152      	adcs	r2, r2
 8007e48:	4299      	cmp	r1, r3
 8007e4a:	4b89      	ldr	r3, [pc, #548]	; (8008070 <__ieee754_pow+0x250>)
 8007e4c:	4193      	sbcs	r3, r2
 8007e4e:	f080 84d1 	bcs.w	80087f4 <__ieee754_pow+0x9d4>
 8007e52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e56:	4630      	mov	r0, r6
 8007e58:	4639      	mov	r1, r7
 8007e5a:	f7f8 fa17 	bl	800028c <__adddf3>
 8007e5e:	ec41 0b10 	vmov	d0, r0, r1
 8007e62:	b009      	add	sp, #36	; 0x24
 8007e64:	ecbd 8b06 	vpop	{d8-d10}
 8007e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e6c:	4b81      	ldr	r3, [pc, #516]	; (8008074 <__ieee754_pow+0x254>)
 8007e6e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007e72:	429c      	cmp	r4, r3
 8007e74:	ee10 aa10 	vmov	sl, s0
 8007e78:	463d      	mov	r5, r7
 8007e7a:	dc06      	bgt.n	8007e8a <__ieee754_pow+0x6a>
 8007e7c:	d101      	bne.n	8007e82 <__ieee754_pow+0x62>
 8007e7e:	2e00      	cmp	r6, #0
 8007e80:	d1e7      	bne.n	8007e52 <__ieee754_pow+0x32>
 8007e82:	4598      	cmp	r8, r3
 8007e84:	dc01      	bgt.n	8007e8a <__ieee754_pow+0x6a>
 8007e86:	d10f      	bne.n	8007ea8 <__ieee754_pow+0x88>
 8007e88:	b172      	cbz	r2, 8007ea8 <__ieee754_pow+0x88>
 8007e8a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007e8e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007e92:	ea55 050a 	orrs.w	r5, r5, sl
 8007e96:	d1dc      	bne.n	8007e52 <__ieee754_pow+0x32>
 8007e98:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007e9c:	18db      	adds	r3, r3, r3
 8007e9e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007ea2:	4152      	adcs	r2, r2
 8007ea4:	429d      	cmp	r5, r3
 8007ea6:	e7d0      	b.n	8007e4a <__ieee754_pow+0x2a>
 8007ea8:	2d00      	cmp	r5, #0
 8007eaa:	da3b      	bge.n	8007f24 <__ieee754_pow+0x104>
 8007eac:	4b72      	ldr	r3, [pc, #456]	; (8008078 <__ieee754_pow+0x258>)
 8007eae:	4598      	cmp	r8, r3
 8007eb0:	dc51      	bgt.n	8007f56 <__ieee754_pow+0x136>
 8007eb2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007eb6:	4598      	cmp	r8, r3
 8007eb8:	f340 84ab 	ble.w	8008812 <__ieee754_pow+0x9f2>
 8007ebc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007ec0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007ec4:	2b14      	cmp	r3, #20
 8007ec6:	dd0f      	ble.n	8007ee8 <__ieee754_pow+0xc8>
 8007ec8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007ecc:	fa22 f103 	lsr.w	r1, r2, r3
 8007ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	f040 849c 	bne.w	8008812 <__ieee754_pow+0x9f2>
 8007eda:	f001 0101 	and.w	r1, r1, #1
 8007ede:	f1c1 0302 	rsb	r3, r1, #2
 8007ee2:	9304      	str	r3, [sp, #16]
 8007ee4:	b182      	cbz	r2, 8007f08 <__ieee754_pow+0xe8>
 8007ee6:	e05f      	b.n	8007fa8 <__ieee754_pow+0x188>
 8007ee8:	2a00      	cmp	r2, #0
 8007eea:	d15b      	bne.n	8007fa4 <__ieee754_pow+0x184>
 8007eec:	f1c3 0314 	rsb	r3, r3, #20
 8007ef0:	fa48 f103 	asr.w	r1, r8, r3
 8007ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ef8:	4543      	cmp	r3, r8
 8007efa:	f040 8487 	bne.w	800880c <__ieee754_pow+0x9ec>
 8007efe:	f001 0101 	and.w	r1, r1, #1
 8007f02:	f1c1 0302 	rsb	r3, r1, #2
 8007f06:	9304      	str	r3, [sp, #16]
 8007f08:	4b5c      	ldr	r3, [pc, #368]	; (800807c <__ieee754_pow+0x25c>)
 8007f0a:	4598      	cmp	r8, r3
 8007f0c:	d132      	bne.n	8007f74 <__ieee754_pow+0x154>
 8007f0e:	f1b9 0f00 	cmp.w	r9, #0
 8007f12:	f280 8477 	bge.w	8008804 <__ieee754_pow+0x9e4>
 8007f16:	4959      	ldr	r1, [pc, #356]	; (800807c <__ieee754_pow+0x25c>)
 8007f18:	4632      	mov	r2, r6
 8007f1a:	463b      	mov	r3, r7
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	f7f8 fc95 	bl	800084c <__aeabi_ddiv>
 8007f22:	e79c      	b.n	8007e5e <__ieee754_pow+0x3e>
 8007f24:	2300      	movs	r3, #0
 8007f26:	9304      	str	r3, [sp, #16]
 8007f28:	2a00      	cmp	r2, #0
 8007f2a:	d13d      	bne.n	8007fa8 <__ieee754_pow+0x188>
 8007f2c:	4b51      	ldr	r3, [pc, #324]	; (8008074 <__ieee754_pow+0x254>)
 8007f2e:	4598      	cmp	r8, r3
 8007f30:	d1ea      	bne.n	8007f08 <__ieee754_pow+0xe8>
 8007f32:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007f36:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007f3a:	ea53 030a 	orrs.w	r3, r3, sl
 8007f3e:	f000 8459 	beq.w	80087f4 <__ieee754_pow+0x9d4>
 8007f42:	4b4f      	ldr	r3, [pc, #316]	; (8008080 <__ieee754_pow+0x260>)
 8007f44:	429c      	cmp	r4, r3
 8007f46:	dd08      	ble.n	8007f5a <__ieee754_pow+0x13a>
 8007f48:	f1b9 0f00 	cmp.w	r9, #0
 8007f4c:	f2c0 8456 	blt.w	80087fc <__ieee754_pow+0x9dc>
 8007f50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f54:	e783      	b.n	8007e5e <__ieee754_pow+0x3e>
 8007f56:	2302      	movs	r3, #2
 8007f58:	e7e5      	b.n	8007f26 <__ieee754_pow+0x106>
 8007f5a:	f1b9 0f00 	cmp.w	r9, #0
 8007f5e:	f04f 0000 	mov.w	r0, #0
 8007f62:	f04f 0100 	mov.w	r1, #0
 8007f66:	f6bf af7a 	bge.w	8007e5e <__ieee754_pow+0x3e>
 8007f6a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007f6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007f72:	e774      	b.n	8007e5e <__ieee754_pow+0x3e>
 8007f74:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007f78:	d106      	bne.n	8007f88 <__ieee754_pow+0x168>
 8007f7a:	4632      	mov	r2, r6
 8007f7c:	463b      	mov	r3, r7
 8007f7e:	4630      	mov	r0, r6
 8007f80:	4639      	mov	r1, r7
 8007f82:	f7f8 fb39 	bl	80005f8 <__aeabi_dmul>
 8007f86:	e76a      	b.n	8007e5e <__ieee754_pow+0x3e>
 8007f88:	4b3e      	ldr	r3, [pc, #248]	; (8008084 <__ieee754_pow+0x264>)
 8007f8a:	4599      	cmp	r9, r3
 8007f8c:	d10c      	bne.n	8007fa8 <__ieee754_pow+0x188>
 8007f8e:	2d00      	cmp	r5, #0
 8007f90:	db0a      	blt.n	8007fa8 <__ieee754_pow+0x188>
 8007f92:	ec47 6b10 	vmov	d0, r6, r7
 8007f96:	b009      	add	sp, #36	; 0x24
 8007f98:	ecbd 8b06 	vpop	{d8-d10}
 8007f9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa0:	f000 bd20 	b.w	80089e4 <__ieee754_sqrt>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9304      	str	r3, [sp, #16]
 8007fa8:	ec47 6b10 	vmov	d0, r6, r7
 8007fac:	f000 fc62 	bl	8008874 <fabs>
 8007fb0:	ec51 0b10 	vmov	r0, r1, d0
 8007fb4:	f1ba 0f00 	cmp.w	sl, #0
 8007fb8:	d129      	bne.n	800800e <__ieee754_pow+0x1ee>
 8007fba:	b124      	cbz	r4, 8007fc6 <__ieee754_pow+0x1a6>
 8007fbc:	4b2f      	ldr	r3, [pc, #188]	; (800807c <__ieee754_pow+0x25c>)
 8007fbe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d123      	bne.n	800800e <__ieee754_pow+0x1ee>
 8007fc6:	f1b9 0f00 	cmp.w	r9, #0
 8007fca:	da05      	bge.n	8007fd8 <__ieee754_pow+0x1b8>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	492a      	ldr	r1, [pc, #168]	; (800807c <__ieee754_pow+0x25c>)
 8007fd4:	f7f8 fc3a 	bl	800084c <__aeabi_ddiv>
 8007fd8:	2d00      	cmp	r5, #0
 8007fda:	f6bf af40 	bge.w	8007e5e <__ieee754_pow+0x3e>
 8007fde:	9b04      	ldr	r3, [sp, #16]
 8007fe0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007fe4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007fe8:	431c      	orrs	r4, r3
 8007fea:	d108      	bne.n	8007ffe <__ieee754_pow+0x1de>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	f7f8 f948 	bl	8000288 <__aeabi_dsub>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	e78f      	b.n	8007f1e <__ieee754_pow+0xfe>
 8007ffe:	9b04      	ldr	r3, [sp, #16]
 8008000:	2b01      	cmp	r3, #1
 8008002:	f47f af2c 	bne.w	8007e5e <__ieee754_pow+0x3e>
 8008006:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800800a:	4619      	mov	r1, r3
 800800c:	e727      	b.n	8007e5e <__ieee754_pow+0x3e>
 800800e:	0feb      	lsrs	r3, r5, #31
 8008010:	3b01      	subs	r3, #1
 8008012:	9306      	str	r3, [sp, #24]
 8008014:	9a06      	ldr	r2, [sp, #24]
 8008016:	9b04      	ldr	r3, [sp, #16]
 8008018:	4313      	orrs	r3, r2
 800801a:	d102      	bne.n	8008022 <__ieee754_pow+0x202>
 800801c:	4632      	mov	r2, r6
 800801e:	463b      	mov	r3, r7
 8008020:	e7e6      	b.n	8007ff0 <__ieee754_pow+0x1d0>
 8008022:	4b19      	ldr	r3, [pc, #100]	; (8008088 <__ieee754_pow+0x268>)
 8008024:	4598      	cmp	r8, r3
 8008026:	f340 80fb 	ble.w	8008220 <__ieee754_pow+0x400>
 800802a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800802e:	4598      	cmp	r8, r3
 8008030:	4b13      	ldr	r3, [pc, #76]	; (8008080 <__ieee754_pow+0x260>)
 8008032:	dd0c      	ble.n	800804e <__ieee754_pow+0x22e>
 8008034:	429c      	cmp	r4, r3
 8008036:	dc0f      	bgt.n	8008058 <__ieee754_pow+0x238>
 8008038:	f1b9 0f00 	cmp.w	r9, #0
 800803c:	da0f      	bge.n	800805e <__ieee754_pow+0x23e>
 800803e:	2000      	movs	r0, #0
 8008040:	b009      	add	sp, #36	; 0x24
 8008042:	ecbd 8b06 	vpop	{d8-d10}
 8008046:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804a:	f000 bcc2 	b.w	80089d2 <__math_oflow>
 800804e:	429c      	cmp	r4, r3
 8008050:	dbf2      	blt.n	8008038 <__ieee754_pow+0x218>
 8008052:	4b0a      	ldr	r3, [pc, #40]	; (800807c <__ieee754_pow+0x25c>)
 8008054:	429c      	cmp	r4, r3
 8008056:	dd19      	ble.n	800808c <__ieee754_pow+0x26c>
 8008058:	f1b9 0f00 	cmp.w	r9, #0
 800805c:	dcef      	bgt.n	800803e <__ieee754_pow+0x21e>
 800805e:	2000      	movs	r0, #0
 8008060:	b009      	add	sp, #36	; 0x24
 8008062:	ecbd 8b06 	vpop	{d8-d10}
 8008066:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806a:	f000 bca9 	b.w	80089c0 <__math_uflow>
 800806e:	bf00      	nop
 8008070:	fff00000 	.word	0xfff00000
 8008074:	7ff00000 	.word	0x7ff00000
 8008078:	433fffff 	.word	0x433fffff
 800807c:	3ff00000 	.word	0x3ff00000
 8008080:	3fefffff 	.word	0x3fefffff
 8008084:	3fe00000 	.word	0x3fe00000
 8008088:	41e00000 	.word	0x41e00000
 800808c:	4b60      	ldr	r3, [pc, #384]	; (8008210 <__ieee754_pow+0x3f0>)
 800808e:	2200      	movs	r2, #0
 8008090:	f7f8 f8fa 	bl	8000288 <__aeabi_dsub>
 8008094:	a354      	add	r3, pc, #336	; (adr r3, 80081e8 <__ieee754_pow+0x3c8>)
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	4604      	mov	r4, r0
 800809c:	460d      	mov	r5, r1
 800809e:	f7f8 faab 	bl	80005f8 <__aeabi_dmul>
 80080a2:	a353      	add	r3, pc, #332	; (adr r3, 80081f0 <__ieee754_pow+0x3d0>)
 80080a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a8:	4606      	mov	r6, r0
 80080aa:	460f      	mov	r7, r1
 80080ac:	4620      	mov	r0, r4
 80080ae:	4629      	mov	r1, r5
 80080b0:	f7f8 faa2 	bl	80005f8 <__aeabi_dmul>
 80080b4:	4b57      	ldr	r3, [pc, #348]	; (8008214 <__ieee754_pow+0x3f4>)
 80080b6:	4682      	mov	sl, r0
 80080b8:	468b      	mov	fp, r1
 80080ba:	2200      	movs	r2, #0
 80080bc:	4620      	mov	r0, r4
 80080be:	4629      	mov	r1, r5
 80080c0:	f7f8 fa9a 	bl	80005f8 <__aeabi_dmul>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	a14b      	add	r1, pc, #300	; (adr r1, 80081f8 <__ieee754_pow+0x3d8>)
 80080ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ce:	f7f8 f8db 	bl	8000288 <__aeabi_dsub>
 80080d2:	4622      	mov	r2, r4
 80080d4:	462b      	mov	r3, r5
 80080d6:	f7f8 fa8f 	bl	80005f8 <__aeabi_dmul>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	2000      	movs	r0, #0
 80080e0:	494d      	ldr	r1, [pc, #308]	; (8008218 <__ieee754_pow+0x3f8>)
 80080e2:	f7f8 f8d1 	bl	8000288 <__aeabi_dsub>
 80080e6:	4622      	mov	r2, r4
 80080e8:	4680      	mov	r8, r0
 80080ea:	4689      	mov	r9, r1
 80080ec:	462b      	mov	r3, r5
 80080ee:	4620      	mov	r0, r4
 80080f0:	4629      	mov	r1, r5
 80080f2:	f7f8 fa81 	bl	80005f8 <__aeabi_dmul>
 80080f6:	4602      	mov	r2, r0
 80080f8:	460b      	mov	r3, r1
 80080fa:	4640      	mov	r0, r8
 80080fc:	4649      	mov	r1, r9
 80080fe:	f7f8 fa7b 	bl	80005f8 <__aeabi_dmul>
 8008102:	a33f      	add	r3, pc, #252	; (adr r3, 8008200 <__ieee754_pow+0x3e0>)
 8008104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008108:	f7f8 fa76 	bl	80005f8 <__aeabi_dmul>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	4650      	mov	r0, sl
 8008112:	4659      	mov	r1, fp
 8008114:	f7f8 f8b8 	bl	8000288 <__aeabi_dsub>
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	4680      	mov	r8, r0
 800811e:	4689      	mov	r9, r1
 8008120:	4630      	mov	r0, r6
 8008122:	4639      	mov	r1, r7
 8008124:	f7f8 f8b2 	bl	800028c <__adddf3>
 8008128:	2000      	movs	r0, #0
 800812a:	4632      	mov	r2, r6
 800812c:	463b      	mov	r3, r7
 800812e:	4604      	mov	r4, r0
 8008130:	460d      	mov	r5, r1
 8008132:	f7f8 f8a9 	bl	8000288 <__aeabi_dsub>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	4640      	mov	r0, r8
 800813c:	4649      	mov	r1, r9
 800813e:	f7f8 f8a3 	bl	8000288 <__aeabi_dsub>
 8008142:	9b04      	ldr	r3, [sp, #16]
 8008144:	9a06      	ldr	r2, [sp, #24]
 8008146:	3b01      	subs	r3, #1
 8008148:	4313      	orrs	r3, r2
 800814a:	4682      	mov	sl, r0
 800814c:	468b      	mov	fp, r1
 800814e:	f040 81e7 	bne.w	8008520 <__ieee754_pow+0x700>
 8008152:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008208 <__ieee754_pow+0x3e8>
 8008156:	eeb0 8a47 	vmov.f32	s16, s14
 800815a:	eef0 8a67 	vmov.f32	s17, s15
 800815e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008162:	2600      	movs	r6, #0
 8008164:	4632      	mov	r2, r6
 8008166:	463b      	mov	r3, r7
 8008168:	e9dd 0100 	ldrd	r0, r1, [sp]
 800816c:	f7f8 f88c 	bl	8000288 <__aeabi_dsub>
 8008170:	4622      	mov	r2, r4
 8008172:	462b      	mov	r3, r5
 8008174:	f7f8 fa40 	bl	80005f8 <__aeabi_dmul>
 8008178:	e9dd 2300 	ldrd	r2, r3, [sp]
 800817c:	4680      	mov	r8, r0
 800817e:	4689      	mov	r9, r1
 8008180:	4650      	mov	r0, sl
 8008182:	4659      	mov	r1, fp
 8008184:	f7f8 fa38 	bl	80005f8 <__aeabi_dmul>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	4640      	mov	r0, r8
 800818e:	4649      	mov	r1, r9
 8008190:	f7f8 f87c 	bl	800028c <__adddf3>
 8008194:	4632      	mov	r2, r6
 8008196:	463b      	mov	r3, r7
 8008198:	4680      	mov	r8, r0
 800819a:	4689      	mov	r9, r1
 800819c:	4620      	mov	r0, r4
 800819e:	4629      	mov	r1, r5
 80081a0:	f7f8 fa2a 	bl	80005f8 <__aeabi_dmul>
 80081a4:	460b      	mov	r3, r1
 80081a6:	4604      	mov	r4, r0
 80081a8:	460d      	mov	r5, r1
 80081aa:	4602      	mov	r2, r0
 80081ac:	4649      	mov	r1, r9
 80081ae:	4640      	mov	r0, r8
 80081b0:	f7f8 f86c 	bl	800028c <__adddf3>
 80081b4:	4b19      	ldr	r3, [pc, #100]	; (800821c <__ieee754_pow+0x3fc>)
 80081b6:	4299      	cmp	r1, r3
 80081b8:	ec45 4b19 	vmov	d9, r4, r5
 80081bc:	4606      	mov	r6, r0
 80081be:	460f      	mov	r7, r1
 80081c0:	468b      	mov	fp, r1
 80081c2:	f340 82f0 	ble.w	80087a6 <__ieee754_pow+0x986>
 80081c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80081ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80081ce:	4303      	orrs	r3, r0
 80081d0:	f000 81e4 	beq.w	800859c <__ieee754_pow+0x77c>
 80081d4:	ec51 0b18 	vmov	r0, r1, d8
 80081d8:	2200      	movs	r2, #0
 80081da:	2300      	movs	r3, #0
 80081dc:	f7f8 fc7e 	bl	8000adc <__aeabi_dcmplt>
 80081e0:	3800      	subs	r0, #0
 80081e2:	bf18      	it	ne
 80081e4:	2001      	movne	r0, #1
 80081e6:	e72b      	b.n	8008040 <__ieee754_pow+0x220>
 80081e8:	60000000 	.word	0x60000000
 80081ec:	3ff71547 	.word	0x3ff71547
 80081f0:	f85ddf44 	.word	0xf85ddf44
 80081f4:	3e54ae0b 	.word	0x3e54ae0b
 80081f8:	55555555 	.word	0x55555555
 80081fc:	3fd55555 	.word	0x3fd55555
 8008200:	652b82fe 	.word	0x652b82fe
 8008204:	3ff71547 	.word	0x3ff71547
 8008208:	00000000 	.word	0x00000000
 800820c:	bff00000 	.word	0xbff00000
 8008210:	3ff00000 	.word	0x3ff00000
 8008214:	3fd00000 	.word	0x3fd00000
 8008218:	3fe00000 	.word	0x3fe00000
 800821c:	408fffff 	.word	0x408fffff
 8008220:	4bd5      	ldr	r3, [pc, #852]	; (8008578 <__ieee754_pow+0x758>)
 8008222:	402b      	ands	r3, r5
 8008224:	2200      	movs	r2, #0
 8008226:	b92b      	cbnz	r3, 8008234 <__ieee754_pow+0x414>
 8008228:	4bd4      	ldr	r3, [pc, #848]	; (800857c <__ieee754_pow+0x75c>)
 800822a:	f7f8 f9e5 	bl	80005f8 <__aeabi_dmul>
 800822e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008232:	460c      	mov	r4, r1
 8008234:	1523      	asrs	r3, r4, #20
 8008236:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800823a:	4413      	add	r3, r2
 800823c:	9305      	str	r3, [sp, #20]
 800823e:	4bd0      	ldr	r3, [pc, #832]	; (8008580 <__ieee754_pow+0x760>)
 8008240:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008244:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008248:	429c      	cmp	r4, r3
 800824a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800824e:	dd08      	ble.n	8008262 <__ieee754_pow+0x442>
 8008250:	4bcc      	ldr	r3, [pc, #816]	; (8008584 <__ieee754_pow+0x764>)
 8008252:	429c      	cmp	r4, r3
 8008254:	f340 8162 	ble.w	800851c <__ieee754_pow+0x6fc>
 8008258:	9b05      	ldr	r3, [sp, #20]
 800825a:	3301      	adds	r3, #1
 800825c:	9305      	str	r3, [sp, #20]
 800825e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008262:	2400      	movs	r4, #0
 8008264:	00e3      	lsls	r3, r4, #3
 8008266:	9307      	str	r3, [sp, #28]
 8008268:	4bc7      	ldr	r3, [pc, #796]	; (8008588 <__ieee754_pow+0x768>)
 800826a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800826e:	ed93 7b00 	vldr	d7, [r3]
 8008272:	4629      	mov	r1, r5
 8008274:	ec53 2b17 	vmov	r2, r3, d7
 8008278:	eeb0 9a47 	vmov.f32	s18, s14
 800827c:	eef0 9a67 	vmov.f32	s19, s15
 8008280:	4682      	mov	sl, r0
 8008282:	f7f8 f801 	bl	8000288 <__aeabi_dsub>
 8008286:	4652      	mov	r2, sl
 8008288:	4606      	mov	r6, r0
 800828a:	460f      	mov	r7, r1
 800828c:	462b      	mov	r3, r5
 800828e:	ec51 0b19 	vmov	r0, r1, d9
 8008292:	f7f7 fffb 	bl	800028c <__adddf3>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	2000      	movs	r0, #0
 800829c:	49bb      	ldr	r1, [pc, #748]	; (800858c <__ieee754_pow+0x76c>)
 800829e:	f7f8 fad5 	bl	800084c <__aeabi_ddiv>
 80082a2:	ec41 0b1a 	vmov	d10, r0, r1
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	4630      	mov	r0, r6
 80082ac:	4639      	mov	r1, r7
 80082ae:	f7f8 f9a3 	bl	80005f8 <__aeabi_dmul>
 80082b2:	2300      	movs	r3, #0
 80082b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082b8:	9302      	str	r3, [sp, #8]
 80082ba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80082be:	46ab      	mov	fp, r5
 80082c0:	106d      	asrs	r5, r5, #1
 80082c2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80082c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80082ca:	ec41 0b18 	vmov	d8, r0, r1
 80082ce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80082d2:	2200      	movs	r2, #0
 80082d4:	4640      	mov	r0, r8
 80082d6:	4649      	mov	r1, r9
 80082d8:	4614      	mov	r4, r2
 80082da:	461d      	mov	r5, r3
 80082dc:	f7f8 f98c 	bl	80005f8 <__aeabi_dmul>
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	4630      	mov	r0, r6
 80082e6:	4639      	mov	r1, r7
 80082e8:	f7f7 ffce 	bl	8000288 <__aeabi_dsub>
 80082ec:	ec53 2b19 	vmov	r2, r3, d9
 80082f0:	4606      	mov	r6, r0
 80082f2:	460f      	mov	r7, r1
 80082f4:	4620      	mov	r0, r4
 80082f6:	4629      	mov	r1, r5
 80082f8:	f7f7 ffc6 	bl	8000288 <__aeabi_dsub>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4650      	mov	r0, sl
 8008302:	4659      	mov	r1, fp
 8008304:	f7f7 ffc0 	bl	8000288 <__aeabi_dsub>
 8008308:	4642      	mov	r2, r8
 800830a:	464b      	mov	r3, r9
 800830c:	f7f8 f974 	bl	80005f8 <__aeabi_dmul>
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	4630      	mov	r0, r6
 8008316:	4639      	mov	r1, r7
 8008318:	f7f7 ffb6 	bl	8000288 <__aeabi_dsub>
 800831c:	ec53 2b1a 	vmov	r2, r3, d10
 8008320:	f7f8 f96a 	bl	80005f8 <__aeabi_dmul>
 8008324:	ec53 2b18 	vmov	r2, r3, d8
 8008328:	ec41 0b19 	vmov	d9, r0, r1
 800832c:	ec51 0b18 	vmov	r0, r1, d8
 8008330:	f7f8 f962 	bl	80005f8 <__aeabi_dmul>
 8008334:	a37c      	add	r3, pc, #496	; (adr r3, 8008528 <__ieee754_pow+0x708>)
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	4604      	mov	r4, r0
 800833c:	460d      	mov	r5, r1
 800833e:	f7f8 f95b 	bl	80005f8 <__aeabi_dmul>
 8008342:	a37b      	add	r3, pc, #492	; (adr r3, 8008530 <__ieee754_pow+0x710>)
 8008344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008348:	f7f7 ffa0 	bl	800028c <__adddf3>
 800834c:	4622      	mov	r2, r4
 800834e:	462b      	mov	r3, r5
 8008350:	f7f8 f952 	bl	80005f8 <__aeabi_dmul>
 8008354:	a378      	add	r3, pc, #480	; (adr r3, 8008538 <__ieee754_pow+0x718>)
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	f7f7 ff97 	bl	800028c <__adddf3>
 800835e:	4622      	mov	r2, r4
 8008360:	462b      	mov	r3, r5
 8008362:	f7f8 f949 	bl	80005f8 <__aeabi_dmul>
 8008366:	a376      	add	r3, pc, #472	; (adr r3, 8008540 <__ieee754_pow+0x720>)
 8008368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836c:	f7f7 ff8e 	bl	800028c <__adddf3>
 8008370:	4622      	mov	r2, r4
 8008372:	462b      	mov	r3, r5
 8008374:	f7f8 f940 	bl	80005f8 <__aeabi_dmul>
 8008378:	a373      	add	r3, pc, #460	; (adr r3, 8008548 <__ieee754_pow+0x728>)
 800837a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837e:	f7f7 ff85 	bl	800028c <__adddf3>
 8008382:	4622      	mov	r2, r4
 8008384:	462b      	mov	r3, r5
 8008386:	f7f8 f937 	bl	80005f8 <__aeabi_dmul>
 800838a:	a371      	add	r3, pc, #452	; (adr r3, 8008550 <__ieee754_pow+0x730>)
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	f7f7 ff7c 	bl	800028c <__adddf3>
 8008394:	4622      	mov	r2, r4
 8008396:	4606      	mov	r6, r0
 8008398:	460f      	mov	r7, r1
 800839a:	462b      	mov	r3, r5
 800839c:	4620      	mov	r0, r4
 800839e:	4629      	mov	r1, r5
 80083a0:	f7f8 f92a 	bl	80005f8 <__aeabi_dmul>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	4630      	mov	r0, r6
 80083aa:	4639      	mov	r1, r7
 80083ac:	f7f8 f924 	bl	80005f8 <__aeabi_dmul>
 80083b0:	4642      	mov	r2, r8
 80083b2:	4604      	mov	r4, r0
 80083b4:	460d      	mov	r5, r1
 80083b6:	464b      	mov	r3, r9
 80083b8:	ec51 0b18 	vmov	r0, r1, d8
 80083bc:	f7f7 ff66 	bl	800028c <__adddf3>
 80083c0:	ec53 2b19 	vmov	r2, r3, d9
 80083c4:	f7f8 f918 	bl	80005f8 <__aeabi_dmul>
 80083c8:	4622      	mov	r2, r4
 80083ca:	462b      	mov	r3, r5
 80083cc:	f7f7 ff5e 	bl	800028c <__adddf3>
 80083d0:	4642      	mov	r2, r8
 80083d2:	4682      	mov	sl, r0
 80083d4:	468b      	mov	fp, r1
 80083d6:	464b      	mov	r3, r9
 80083d8:	4640      	mov	r0, r8
 80083da:	4649      	mov	r1, r9
 80083dc:	f7f8 f90c 	bl	80005f8 <__aeabi_dmul>
 80083e0:	4b6b      	ldr	r3, [pc, #428]	; (8008590 <__ieee754_pow+0x770>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	4606      	mov	r6, r0
 80083e6:	460f      	mov	r7, r1
 80083e8:	f7f7 ff50 	bl	800028c <__adddf3>
 80083ec:	4652      	mov	r2, sl
 80083ee:	465b      	mov	r3, fp
 80083f0:	f7f7 ff4c 	bl	800028c <__adddf3>
 80083f4:	2000      	movs	r0, #0
 80083f6:	4604      	mov	r4, r0
 80083f8:	460d      	mov	r5, r1
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	4640      	mov	r0, r8
 8008400:	4649      	mov	r1, r9
 8008402:	f7f8 f8f9 	bl	80005f8 <__aeabi_dmul>
 8008406:	4b62      	ldr	r3, [pc, #392]	; (8008590 <__ieee754_pow+0x770>)
 8008408:	4680      	mov	r8, r0
 800840a:	4689      	mov	r9, r1
 800840c:	2200      	movs	r2, #0
 800840e:	4620      	mov	r0, r4
 8008410:	4629      	mov	r1, r5
 8008412:	f7f7 ff39 	bl	8000288 <__aeabi_dsub>
 8008416:	4632      	mov	r2, r6
 8008418:	463b      	mov	r3, r7
 800841a:	f7f7 ff35 	bl	8000288 <__aeabi_dsub>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	4650      	mov	r0, sl
 8008424:	4659      	mov	r1, fp
 8008426:	f7f7 ff2f 	bl	8000288 <__aeabi_dsub>
 800842a:	ec53 2b18 	vmov	r2, r3, d8
 800842e:	f7f8 f8e3 	bl	80005f8 <__aeabi_dmul>
 8008432:	4622      	mov	r2, r4
 8008434:	4606      	mov	r6, r0
 8008436:	460f      	mov	r7, r1
 8008438:	462b      	mov	r3, r5
 800843a:	ec51 0b19 	vmov	r0, r1, d9
 800843e:	f7f8 f8db 	bl	80005f8 <__aeabi_dmul>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	4630      	mov	r0, r6
 8008448:	4639      	mov	r1, r7
 800844a:	f7f7 ff1f 	bl	800028c <__adddf3>
 800844e:	4606      	mov	r6, r0
 8008450:	460f      	mov	r7, r1
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	4640      	mov	r0, r8
 8008458:	4649      	mov	r1, r9
 800845a:	f7f7 ff17 	bl	800028c <__adddf3>
 800845e:	a33e      	add	r3, pc, #248	; (adr r3, 8008558 <__ieee754_pow+0x738>)
 8008460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008464:	2000      	movs	r0, #0
 8008466:	4604      	mov	r4, r0
 8008468:	460d      	mov	r5, r1
 800846a:	f7f8 f8c5 	bl	80005f8 <__aeabi_dmul>
 800846e:	4642      	mov	r2, r8
 8008470:	ec41 0b18 	vmov	d8, r0, r1
 8008474:	464b      	mov	r3, r9
 8008476:	4620      	mov	r0, r4
 8008478:	4629      	mov	r1, r5
 800847a:	f7f7 ff05 	bl	8000288 <__aeabi_dsub>
 800847e:	4602      	mov	r2, r0
 8008480:	460b      	mov	r3, r1
 8008482:	4630      	mov	r0, r6
 8008484:	4639      	mov	r1, r7
 8008486:	f7f7 feff 	bl	8000288 <__aeabi_dsub>
 800848a:	a335      	add	r3, pc, #212	; (adr r3, 8008560 <__ieee754_pow+0x740>)
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	f7f8 f8b2 	bl	80005f8 <__aeabi_dmul>
 8008494:	a334      	add	r3, pc, #208	; (adr r3, 8008568 <__ieee754_pow+0x748>)
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	4606      	mov	r6, r0
 800849c:	460f      	mov	r7, r1
 800849e:	4620      	mov	r0, r4
 80084a0:	4629      	mov	r1, r5
 80084a2:	f7f8 f8a9 	bl	80005f8 <__aeabi_dmul>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4630      	mov	r0, r6
 80084ac:	4639      	mov	r1, r7
 80084ae:	f7f7 feed 	bl	800028c <__adddf3>
 80084b2:	9a07      	ldr	r2, [sp, #28]
 80084b4:	4b37      	ldr	r3, [pc, #220]	; (8008594 <__ieee754_pow+0x774>)
 80084b6:	4413      	add	r3, r2
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	f7f7 fee6 	bl	800028c <__adddf3>
 80084c0:	4682      	mov	sl, r0
 80084c2:	9805      	ldr	r0, [sp, #20]
 80084c4:	468b      	mov	fp, r1
 80084c6:	f7f8 f82d 	bl	8000524 <__aeabi_i2d>
 80084ca:	9a07      	ldr	r2, [sp, #28]
 80084cc:	4b32      	ldr	r3, [pc, #200]	; (8008598 <__ieee754_pow+0x778>)
 80084ce:	4413      	add	r3, r2
 80084d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084d4:	4606      	mov	r6, r0
 80084d6:	460f      	mov	r7, r1
 80084d8:	4652      	mov	r2, sl
 80084da:	465b      	mov	r3, fp
 80084dc:	ec51 0b18 	vmov	r0, r1, d8
 80084e0:	f7f7 fed4 	bl	800028c <__adddf3>
 80084e4:	4642      	mov	r2, r8
 80084e6:	464b      	mov	r3, r9
 80084e8:	f7f7 fed0 	bl	800028c <__adddf3>
 80084ec:	4632      	mov	r2, r6
 80084ee:	463b      	mov	r3, r7
 80084f0:	f7f7 fecc 	bl	800028c <__adddf3>
 80084f4:	2000      	movs	r0, #0
 80084f6:	4632      	mov	r2, r6
 80084f8:	463b      	mov	r3, r7
 80084fa:	4604      	mov	r4, r0
 80084fc:	460d      	mov	r5, r1
 80084fe:	f7f7 fec3 	bl	8000288 <__aeabi_dsub>
 8008502:	4642      	mov	r2, r8
 8008504:	464b      	mov	r3, r9
 8008506:	f7f7 febf 	bl	8000288 <__aeabi_dsub>
 800850a:	ec53 2b18 	vmov	r2, r3, d8
 800850e:	f7f7 febb 	bl	8000288 <__aeabi_dsub>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	4650      	mov	r0, sl
 8008518:	4659      	mov	r1, fp
 800851a:	e610      	b.n	800813e <__ieee754_pow+0x31e>
 800851c:	2401      	movs	r4, #1
 800851e:	e6a1      	b.n	8008264 <__ieee754_pow+0x444>
 8008520:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008570 <__ieee754_pow+0x750>
 8008524:	e617      	b.n	8008156 <__ieee754_pow+0x336>
 8008526:	bf00      	nop
 8008528:	4a454eef 	.word	0x4a454eef
 800852c:	3fca7e28 	.word	0x3fca7e28
 8008530:	93c9db65 	.word	0x93c9db65
 8008534:	3fcd864a 	.word	0x3fcd864a
 8008538:	a91d4101 	.word	0xa91d4101
 800853c:	3fd17460 	.word	0x3fd17460
 8008540:	518f264d 	.word	0x518f264d
 8008544:	3fd55555 	.word	0x3fd55555
 8008548:	db6fabff 	.word	0xdb6fabff
 800854c:	3fdb6db6 	.word	0x3fdb6db6
 8008550:	33333303 	.word	0x33333303
 8008554:	3fe33333 	.word	0x3fe33333
 8008558:	e0000000 	.word	0xe0000000
 800855c:	3feec709 	.word	0x3feec709
 8008560:	dc3a03fd 	.word	0xdc3a03fd
 8008564:	3feec709 	.word	0x3feec709
 8008568:	145b01f5 	.word	0x145b01f5
 800856c:	be3e2fe0 	.word	0xbe3e2fe0
 8008570:	00000000 	.word	0x00000000
 8008574:	3ff00000 	.word	0x3ff00000
 8008578:	7ff00000 	.word	0x7ff00000
 800857c:	43400000 	.word	0x43400000
 8008580:	0003988e 	.word	0x0003988e
 8008584:	000bb679 	.word	0x000bb679
 8008588:	0800e5e8 	.word	0x0800e5e8
 800858c:	3ff00000 	.word	0x3ff00000
 8008590:	40080000 	.word	0x40080000
 8008594:	0800e608 	.word	0x0800e608
 8008598:	0800e5f8 	.word	0x0800e5f8
 800859c:	a3b3      	add	r3, pc, #716	; (adr r3, 800886c <__ieee754_pow+0xa4c>)
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	4640      	mov	r0, r8
 80085a4:	4649      	mov	r1, r9
 80085a6:	f7f7 fe71 	bl	800028c <__adddf3>
 80085aa:	4622      	mov	r2, r4
 80085ac:	ec41 0b1a 	vmov	d10, r0, r1
 80085b0:	462b      	mov	r3, r5
 80085b2:	4630      	mov	r0, r6
 80085b4:	4639      	mov	r1, r7
 80085b6:	f7f7 fe67 	bl	8000288 <__aeabi_dsub>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	ec51 0b1a 	vmov	r0, r1, d10
 80085c2:	f7f8 faa9 	bl	8000b18 <__aeabi_dcmpgt>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	f47f ae04 	bne.w	80081d4 <__ieee754_pow+0x3b4>
 80085cc:	4aa2      	ldr	r2, [pc, #648]	; (8008858 <__ieee754_pow+0xa38>)
 80085ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80085d2:	4293      	cmp	r3, r2
 80085d4:	f340 8107 	ble.w	80087e6 <__ieee754_pow+0x9c6>
 80085d8:	151b      	asrs	r3, r3, #20
 80085da:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80085de:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80085e2:	fa4a fa03 	asr.w	sl, sl, r3
 80085e6:	44da      	add	sl, fp
 80085e8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80085ec:	489b      	ldr	r0, [pc, #620]	; (800885c <__ieee754_pow+0xa3c>)
 80085ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80085f2:	4108      	asrs	r0, r1
 80085f4:	ea00 030a 	and.w	r3, r0, sl
 80085f8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80085fc:	f1c1 0114 	rsb	r1, r1, #20
 8008600:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008604:	fa4a fa01 	asr.w	sl, sl, r1
 8008608:	f1bb 0f00 	cmp.w	fp, #0
 800860c:	f04f 0200 	mov.w	r2, #0
 8008610:	4620      	mov	r0, r4
 8008612:	4629      	mov	r1, r5
 8008614:	bfb8      	it	lt
 8008616:	f1ca 0a00 	rsblt	sl, sl, #0
 800861a:	f7f7 fe35 	bl	8000288 <__aeabi_dsub>
 800861e:	ec41 0b19 	vmov	d9, r0, r1
 8008622:	4642      	mov	r2, r8
 8008624:	464b      	mov	r3, r9
 8008626:	ec51 0b19 	vmov	r0, r1, d9
 800862a:	f7f7 fe2f 	bl	800028c <__adddf3>
 800862e:	a37a      	add	r3, pc, #488	; (adr r3, 8008818 <__ieee754_pow+0x9f8>)
 8008630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008634:	2000      	movs	r0, #0
 8008636:	4604      	mov	r4, r0
 8008638:	460d      	mov	r5, r1
 800863a:	f7f7 ffdd 	bl	80005f8 <__aeabi_dmul>
 800863e:	ec53 2b19 	vmov	r2, r3, d9
 8008642:	4606      	mov	r6, r0
 8008644:	460f      	mov	r7, r1
 8008646:	4620      	mov	r0, r4
 8008648:	4629      	mov	r1, r5
 800864a:	f7f7 fe1d 	bl	8000288 <__aeabi_dsub>
 800864e:	4602      	mov	r2, r0
 8008650:	460b      	mov	r3, r1
 8008652:	4640      	mov	r0, r8
 8008654:	4649      	mov	r1, r9
 8008656:	f7f7 fe17 	bl	8000288 <__aeabi_dsub>
 800865a:	a371      	add	r3, pc, #452	; (adr r3, 8008820 <__ieee754_pow+0xa00>)
 800865c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008660:	f7f7 ffca 	bl	80005f8 <__aeabi_dmul>
 8008664:	a370      	add	r3, pc, #448	; (adr r3, 8008828 <__ieee754_pow+0xa08>)
 8008666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866a:	4680      	mov	r8, r0
 800866c:	4689      	mov	r9, r1
 800866e:	4620      	mov	r0, r4
 8008670:	4629      	mov	r1, r5
 8008672:	f7f7 ffc1 	bl	80005f8 <__aeabi_dmul>
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	4640      	mov	r0, r8
 800867c:	4649      	mov	r1, r9
 800867e:	f7f7 fe05 	bl	800028c <__adddf3>
 8008682:	4604      	mov	r4, r0
 8008684:	460d      	mov	r5, r1
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	4630      	mov	r0, r6
 800868c:	4639      	mov	r1, r7
 800868e:	f7f7 fdfd 	bl	800028c <__adddf3>
 8008692:	4632      	mov	r2, r6
 8008694:	463b      	mov	r3, r7
 8008696:	4680      	mov	r8, r0
 8008698:	4689      	mov	r9, r1
 800869a:	f7f7 fdf5 	bl	8000288 <__aeabi_dsub>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	4620      	mov	r0, r4
 80086a4:	4629      	mov	r1, r5
 80086a6:	f7f7 fdef 	bl	8000288 <__aeabi_dsub>
 80086aa:	4642      	mov	r2, r8
 80086ac:	4606      	mov	r6, r0
 80086ae:	460f      	mov	r7, r1
 80086b0:	464b      	mov	r3, r9
 80086b2:	4640      	mov	r0, r8
 80086b4:	4649      	mov	r1, r9
 80086b6:	f7f7 ff9f 	bl	80005f8 <__aeabi_dmul>
 80086ba:	a35d      	add	r3, pc, #372	; (adr r3, 8008830 <__ieee754_pow+0xa10>)
 80086bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c0:	4604      	mov	r4, r0
 80086c2:	460d      	mov	r5, r1
 80086c4:	f7f7 ff98 	bl	80005f8 <__aeabi_dmul>
 80086c8:	a35b      	add	r3, pc, #364	; (adr r3, 8008838 <__ieee754_pow+0xa18>)
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	f7f7 fddb 	bl	8000288 <__aeabi_dsub>
 80086d2:	4622      	mov	r2, r4
 80086d4:	462b      	mov	r3, r5
 80086d6:	f7f7 ff8f 	bl	80005f8 <__aeabi_dmul>
 80086da:	a359      	add	r3, pc, #356	; (adr r3, 8008840 <__ieee754_pow+0xa20>)
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f7f7 fdd4 	bl	800028c <__adddf3>
 80086e4:	4622      	mov	r2, r4
 80086e6:	462b      	mov	r3, r5
 80086e8:	f7f7 ff86 	bl	80005f8 <__aeabi_dmul>
 80086ec:	a356      	add	r3, pc, #344	; (adr r3, 8008848 <__ieee754_pow+0xa28>)
 80086ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f2:	f7f7 fdc9 	bl	8000288 <__aeabi_dsub>
 80086f6:	4622      	mov	r2, r4
 80086f8:	462b      	mov	r3, r5
 80086fa:	f7f7 ff7d 	bl	80005f8 <__aeabi_dmul>
 80086fe:	a354      	add	r3, pc, #336	; (adr r3, 8008850 <__ieee754_pow+0xa30>)
 8008700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008704:	f7f7 fdc2 	bl	800028c <__adddf3>
 8008708:	4622      	mov	r2, r4
 800870a:	462b      	mov	r3, r5
 800870c:	f7f7 ff74 	bl	80005f8 <__aeabi_dmul>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	4640      	mov	r0, r8
 8008716:	4649      	mov	r1, r9
 8008718:	f7f7 fdb6 	bl	8000288 <__aeabi_dsub>
 800871c:	4604      	mov	r4, r0
 800871e:	460d      	mov	r5, r1
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4640      	mov	r0, r8
 8008726:	4649      	mov	r1, r9
 8008728:	f7f7 ff66 	bl	80005f8 <__aeabi_dmul>
 800872c:	2200      	movs	r2, #0
 800872e:	ec41 0b19 	vmov	d9, r0, r1
 8008732:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008736:	4620      	mov	r0, r4
 8008738:	4629      	mov	r1, r5
 800873a:	f7f7 fda5 	bl	8000288 <__aeabi_dsub>
 800873e:	4602      	mov	r2, r0
 8008740:	460b      	mov	r3, r1
 8008742:	ec51 0b19 	vmov	r0, r1, d9
 8008746:	f7f8 f881 	bl	800084c <__aeabi_ddiv>
 800874a:	4632      	mov	r2, r6
 800874c:	4604      	mov	r4, r0
 800874e:	460d      	mov	r5, r1
 8008750:	463b      	mov	r3, r7
 8008752:	4640      	mov	r0, r8
 8008754:	4649      	mov	r1, r9
 8008756:	f7f7 ff4f 	bl	80005f8 <__aeabi_dmul>
 800875a:	4632      	mov	r2, r6
 800875c:	463b      	mov	r3, r7
 800875e:	f7f7 fd95 	bl	800028c <__adddf3>
 8008762:	4602      	mov	r2, r0
 8008764:	460b      	mov	r3, r1
 8008766:	4620      	mov	r0, r4
 8008768:	4629      	mov	r1, r5
 800876a:	f7f7 fd8d 	bl	8000288 <__aeabi_dsub>
 800876e:	4642      	mov	r2, r8
 8008770:	464b      	mov	r3, r9
 8008772:	f7f7 fd89 	bl	8000288 <__aeabi_dsub>
 8008776:	460b      	mov	r3, r1
 8008778:	4602      	mov	r2, r0
 800877a:	4939      	ldr	r1, [pc, #228]	; (8008860 <__ieee754_pow+0xa40>)
 800877c:	2000      	movs	r0, #0
 800877e:	f7f7 fd83 	bl	8000288 <__aeabi_dsub>
 8008782:	ec41 0b10 	vmov	d0, r0, r1
 8008786:	ee10 3a90 	vmov	r3, s1
 800878a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800878e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008792:	da2b      	bge.n	80087ec <__ieee754_pow+0x9cc>
 8008794:	4650      	mov	r0, sl
 8008796:	f000 f877 	bl	8008888 <scalbn>
 800879a:	ec51 0b10 	vmov	r0, r1, d0
 800879e:	ec53 2b18 	vmov	r2, r3, d8
 80087a2:	f7ff bbee 	b.w	8007f82 <__ieee754_pow+0x162>
 80087a6:	4b2f      	ldr	r3, [pc, #188]	; (8008864 <__ieee754_pow+0xa44>)
 80087a8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80087ac:	429e      	cmp	r6, r3
 80087ae:	f77f af0d 	ble.w	80085cc <__ieee754_pow+0x7ac>
 80087b2:	4b2d      	ldr	r3, [pc, #180]	; (8008868 <__ieee754_pow+0xa48>)
 80087b4:	440b      	add	r3, r1
 80087b6:	4303      	orrs	r3, r0
 80087b8:	d009      	beq.n	80087ce <__ieee754_pow+0x9ae>
 80087ba:	ec51 0b18 	vmov	r0, r1, d8
 80087be:	2200      	movs	r2, #0
 80087c0:	2300      	movs	r3, #0
 80087c2:	f7f8 f98b 	bl	8000adc <__aeabi_dcmplt>
 80087c6:	3800      	subs	r0, #0
 80087c8:	bf18      	it	ne
 80087ca:	2001      	movne	r0, #1
 80087cc:	e448      	b.n	8008060 <__ieee754_pow+0x240>
 80087ce:	4622      	mov	r2, r4
 80087d0:	462b      	mov	r3, r5
 80087d2:	f7f7 fd59 	bl	8000288 <__aeabi_dsub>
 80087d6:	4642      	mov	r2, r8
 80087d8:	464b      	mov	r3, r9
 80087da:	f7f8 f993 	bl	8000b04 <__aeabi_dcmpge>
 80087de:	2800      	cmp	r0, #0
 80087e0:	f43f aef4 	beq.w	80085cc <__ieee754_pow+0x7ac>
 80087e4:	e7e9      	b.n	80087ba <__ieee754_pow+0x99a>
 80087e6:	f04f 0a00 	mov.w	sl, #0
 80087ea:	e71a      	b.n	8008622 <__ieee754_pow+0x802>
 80087ec:	ec51 0b10 	vmov	r0, r1, d0
 80087f0:	4619      	mov	r1, r3
 80087f2:	e7d4      	b.n	800879e <__ieee754_pow+0x97e>
 80087f4:	491a      	ldr	r1, [pc, #104]	; (8008860 <__ieee754_pow+0xa40>)
 80087f6:	2000      	movs	r0, #0
 80087f8:	f7ff bb31 	b.w	8007e5e <__ieee754_pow+0x3e>
 80087fc:	2000      	movs	r0, #0
 80087fe:	2100      	movs	r1, #0
 8008800:	f7ff bb2d 	b.w	8007e5e <__ieee754_pow+0x3e>
 8008804:	4630      	mov	r0, r6
 8008806:	4639      	mov	r1, r7
 8008808:	f7ff bb29 	b.w	8007e5e <__ieee754_pow+0x3e>
 800880c:	9204      	str	r2, [sp, #16]
 800880e:	f7ff bb7b 	b.w	8007f08 <__ieee754_pow+0xe8>
 8008812:	2300      	movs	r3, #0
 8008814:	f7ff bb65 	b.w	8007ee2 <__ieee754_pow+0xc2>
 8008818:	00000000 	.word	0x00000000
 800881c:	3fe62e43 	.word	0x3fe62e43
 8008820:	fefa39ef 	.word	0xfefa39ef
 8008824:	3fe62e42 	.word	0x3fe62e42
 8008828:	0ca86c39 	.word	0x0ca86c39
 800882c:	be205c61 	.word	0xbe205c61
 8008830:	72bea4d0 	.word	0x72bea4d0
 8008834:	3e663769 	.word	0x3e663769
 8008838:	c5d26bf1 	.word	0xc5d26bf1
 800883c:	3ebbbd41 	.word	0x3ebbbd41
 8008840:	af25de2c 	.word	0xaf25de2c
 8008844:	3f11566a 	.word	0x3f11566a
 8008848:	16bebd93 	.word	0x16bebd93
 800884c:	3f66c16c 	.word	0x3f66c16c
 8008850:	5555553e 	.word	0x5555553e
 8008854:	3fc55555 	.word	0x3fc55555
 8008858:	3fe00000 	.word	0x3fe00000
 800885c:	fff00000 	.word	0xfff00000
 8008860:	3ff00000 	.word	0x3ff00000
 8008864:	4090cbff 	.word	0x4090cbff
 8008868:	3f6f3400 	.word	0x3f6f3400
 800886c:	652b82fe 	.word	0x652b82fe
 8008870:	3c971547 	.word	0x3c971547

08008874 <fabs>:
 8008874:	ec51 0b10 	vmov	r0, r1, d0
 8008878:	ee10 2a10 	vmov	r2, s0
 800887c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008880:	ec43 2b10 	vmov	d0, r2, r3
 8008884:	4770      	bx	lr
	...

08008888 <scalbn>:
 8008888:	b570      	push	{r4, r5, r6, lr}
 800888a:	ec55 4b10 	vmov	r4, r5, d0
 800888e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008892:	4606      	mov	r6, r0
 8008894:	462b      	mov	r3, r5
 8008896:	b999      	cbnz	r1, 80088c0 <scalbn+0x38>
 8008898:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800889c:	4323      	orrs	r3, r4
 800889e:	d03f      	beq.n	8008920 <scalbn+0x98>
 80088a0:	4b35      	ldr	r3, [pc, #212]	; (8008978 <scalbn+0xf0>)
 80088a2:	4629      	mov	r1, r5
 80088a4:	ee10 0a10 	vmov	r0, s0
 80088a8:	2200      	movs	r2, #0
 80088aa:	f7f7 fea5 	bl	80005f8 <__aeabi_dmul>
 80088ae:	4b33      	ldr	r3, [pc, #204]	; (800897c <scalbn+0xf4>)
 80088b0:	429e      	cmp	r6, r3
 80088b2:	4604      	mov	r4, r0
 80088b4:	460d      	mov	r5, r1
 80088b6:	da10      	bge.n	80088da <scalbn+0x52>
 80088b8:	a327      	add	r3, pc, #156	; (adr r3, 8008958 <scalbn+0xd0>)
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	e01f      	b.n	8008900 <scalbn+0x78>
 80088c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80088c4:	4291      	cmp	r1, r2
 80088c6:	d10c      	bne.n	80088e2 <scalbn+0x5a>
 80088c8:	ee10 2a10 	vmov	r2, s0
 80088cc:	4620      	mov	r0, r4
 80088ce:	4629      	mov	r1, r5
 80088d0:	f7f7 fcdc 	bl	800028c <__adddf3>
 80088d4:	4604      	mov	r4, r0
 80088d6:	460d      	mov	r5, r1
 80088d8:	e022      	b.n	8008920 <scalbn+0x98>
 80088da:	460b      	mov	r3, r1
 80088dc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80088e0:	3936      	subs	r1, #54	; 0x36
 80088e2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80088e6:	4296      	cmp	r6, r2
 80088e8:	dd0d      	ble.n	8008906 <scalbn+0x7e>
 80088ea:	2d00      	cmp	r5, #0
 80088ec:	a11c      	add	r1, pc, #112	; (adr r1, 8008960 <scalbn+0xd8>)
 80088ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088f2:	da02      	bge.n	80088fa <scalbn+0x72>
 80088f4:	a11c      	add	r1, pc, #112	; (adr r1, 8008968 <scalbn+0xe0>)
 80088f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088fa:	a319      	add	r3, pc, #100	; (adr r3, 8008960 <scalbn+0xd8>)
 80088fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008900:	f7f7 fe7a 	bl	80005f8 <__aeabi_dmul>
 8008904:	e7e6      	b.n	80088d4 <scalbn+0x4c>
 8008906:	1872      	adds	r2, r6, r1
 8008908:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800890c:	428a      	cmp	r2, r1
 800890e:	dcec      	bgt.n	80088ea <scalbn+0x62>
 8008910:	2a00      	cmp	r2, #0
 8008912:	dd08      	ble.n	8008926 <scalbn+0x9e>
 8008914:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008918:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800891c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008920:	ec45 4b10 	vmov	d0, r4, r5
 8008924:	bd70      	pop	{r4, r5, r6, pc}
 8008926:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800892a:	da08      	bge.n	800893e <scalbn+0xb6>
 800892c:	2d00      	cmp	r5, #0
 800892e:	a10a      	add	r1, pc, #40	; (adr r1, 8008958 <scalbn+0xd0>)
 8008930:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008934:	dac0      	bge.n	80088b8 <scalbn+0x30>
 8008936:	a10e      	add	r1, pc, #56	; (adr r1, 8008970 <scalbn+0xe8>)
 8008938:	e9d1 0100 	ldrd	r0, r1, [r1]
 800893c:	e7bc      	b.n	80088b8 <scalbn+0x30>
 800893e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008942:	3236      	adds	r2, #54	; 0x36
 8008944:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008948:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800894c:	4620      	mov	r0, r4
 800894e:	4b0c      	ldr	r3, [pc, #48]	; (8008980 <scalbn+0xf8>)
 8008950:	2200      	movs	r2, #0
 8008952:	e7d5      	b.n	8008900 <scalbn+0x78>
 8008954:	f3af 8000 	nop.w
 8008958:	c2f8f359 	.word	0xc2f8f359
 800895c:	01a56e1f 	.word	0x01a56e1f
 8008960:	8800759c 	.word	0x8800759c
 8008964:	7e37e43c 	.word	0x7e37e43c
 8008968:	8800759c 	.word	0x8800759c
 800896c:	fe37e43c 	.word	0xfe37e43c
 8008970:	c2f8f359 	.word	0xc2f8f359
 8008974:	81a56e1f 	.word	0x81a56e1f
 8008978:	43500000 	.word	0x43500000
 800897c:	ffff3cb0 	.word	0xffff3cb0
 8008980:	3c900000 	.word	0x3c900000

08008984 <with_errno>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	4604      	mov	r4, r0
 8008988:	460d      	mov	r5, r1
 800898a:	4616      	mov	r6, r2
 800898c:	f001 f80e 	bl	80099ac <__errno>
 8008990:	4629      	mov	r1, r5
 8008992:	6006      	str	r6, [r0, #0]
 8008994:	4620      	mov	r0, r4
 8008996:	bd70      	pop	{r4, r5, r6, pc}

08008998 <xflow>:
 8008998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800899a:	4614      	mov	r4, r2
 800899c:	461d      	mov	r5, r3
 800899e:	b108      	cbz	r0, 80089a4 <xflow+0xc>
 80089a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80089a4:	e9cd 2300 	strd	r2, r3, [sp]
 80089a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089ac:	4620      	mov	r0, r4
 80089ae:	4629      	mov	r1, r5
 80089b0:	f7f7 fe22 	bl	80005f8 <__aeabi_dmul>
 80089b4:	2222      	movs	r2, #34	; 0x22
 80089b6:	b003      	add	sp, #12
 80089b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089bc:	f7ff bfe2 	b.w	8008984 <with_errno>

080089c0 <__math_uflow>:
 80089c0:	b508      	push	{r3, lr}
 80089c2:	2200      	movs	r2, #0
 80089c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80089c8:	f7ff ffe6 	bl	8008998 <xflow>
 80089cc:	ec41 0b10 	vmov	d0, r0, r1
 80089d0:	bd08      	pop	{r3, pc}

080089d2 <__math_oflow>:
 80089d2:	b508      	push	{r3, lr}
 80089d4:	2200      	movs	r2, #0
 80089d6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80089da:	f7ff ffdd 	bl	8008998 <xflow>
 80089de:	ec41 0b10 	vmov	d0, r0, r1
 80089e2:	bd08      	pop	{r3, pc}

080089e4 <__ieee754_sqrt>:
 80089e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e8:	ec55 4b10 	vmov	r4, r5, d0
 80089ec:	4e67      	ldr	r6, [pc, #412]	; (8008b8c <__ieee754_sqrt+0x1a8>)
 80089ee:	43ae      	bics	r6, r5
 80089f0:	ee10 0a10 	vmov	r0, s0
 80089f4:	ee10 2a10 	vmov	r2, s0
 80089f8:	4629      	mov	r1, r5
 80089fa:	462b      	mov	r3, r5
 80089fc:	d10d      	bne.n	8008a1a <__ieee754_sqrt+0x36>
 80089fe:	f7f7 fdfb 	bl	80005f8 <__aeabi_dmul>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	4620      	mov	r0, r4
 8008a08:	4629      	mov	r1, r5
 8008a0a:	f7f7 fc3f 	bl	800028c <__adddf3>
 8008a0e:	4604      	mov	r4, r0
 8008a10:	460d      	mov	r5, r1
 8008a12:	ec45 4b10 	vmov	d0, r4, r5
 8008a16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a1a:	2d00      	cmp	r5, #0
 8008a1c:	dc0b      	bgt.n	8008a36 <__ieee754_sqrt+0x52>
 8008a1e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008a22:	4326      	orrs	r6, r4
 8008a24:	d0f5      	beq.n	8008a12 <__ieee754_sqrt+0x2e>
 8008a26:	b135      	cbz	r5, 8008a36 <__ieee754_sqrt+0x52>
 8008a28:	f7f7 fc2e 	bl	8000288 <__aeabi_dsub>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	f7f7 ff0c 	bl	800084c <__aeabi_ddiv>
 8008a34:	e7eb      	b.n	8008a0e <__ieee754_sqrt+0x2a>
 8008a36:	1509      	asrs	r1, r1, #20
 8008a38:	f000 808d 	beq.w	8008b56 <__ieee754_sqrt+0x172>
 8008a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a40:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008a44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a48:	07c9      	lsls	r1, r1, #31
 8008a4a:	bf5c      	itt	pl
 8008a4c:	005b      	lslpl	r3, r3, #1
 8008a4e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008a52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a56:	bf58      	it	pl
 8008a58:	0052      	lslpl	r2, r2, #1
 8008a5a:	2500      	movs	r5, #0
 8008a5c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008a60:	1076      	asrs	r6, r6, #1
 8008a62:	0052      	lsls	r2, r2, #1
 8008a64:	f04f 0e16 	mov.w	lr, #22
 8008a68:	46ac      	mov	ip, r5
 8008a6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a6e:	eb0c 0001 	add.w	r0, ip, r1
 8008a72:	4298      	cmp	r0, r3
 8008a74:	bfde      	ittt	le
 8008a76:	1a1b      	suble	r3, r3, r0
 8008a78:	eb00 0c01 	addle.w	ip, r0, r1
 8008a7c:	186d      	addle	r5, r5, r1
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	f1be 0e01 	subs.w	lr, lr, #1
 8008a84:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008a88:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008a8c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008a90:	d1ed      	bne.n	8008a6e <__ieee754_sqrt+0x8a>
 8008a92:	4674      	mov	r4, lr
 8008a94:	2720      	movs	r7, #32
 8008a96:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008a9a:	4563      	cmp	r3, ip
 8008a9c:	eb01 000e 	add.w	r0, r1, lr
 8008aa0:	dc02      	bgt.n	8008aa8 <__ieee754_sqrt+0xc4>
 8008aa2:	d113      	bne.n	8008acc <__ieee754_sqrt+0xe8>
 8008aa4:	4290      	cmp	r0, r2
 8008aa6:	d811      	bhi.n	8008acc <__ieee754_sqrt+0xe8>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	eb00 0e01 	add.w	lr, r0, r1
 8008aae:	da57      	bge.n	8008b60 <__ieee754_sqrt+0x17c>
 8008ab0:	f1be 0f00 	cmp.w	lr, #0
 8008ab4:	db54      	blt.n	8008b60 <__ieee754_sqrt+0x17c>
 8008ab6:	f10c 0801 	add.w	r8, ip, #1
 8008aba:	eba3 030c 	sub.w	r3, r3, ip
 8008abe:	4290      	cmp	r0, r2
 8008ac0:	bf88      	it	hi
 8008ac2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008ac6:	1a12      	subs	r2, r2, r0
 8008ac8:	440c      	add	r4, r1
 8008aca:	46c4      	mov	ip, r8
 8008acc:	005b      	lsls	r3, r3, #1
 8008ace:	3f01      	subs	r7, #1
 8008ad0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008ad4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008ad8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008adc:	d1dd      	bne.n	8008a9a <__ieee754_sqrt+0xb6>
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	d01b      	beq.n	8008b1a <__ieee754_sqrt+0x136>
 8008ae2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008b90 <__ieee754_sqrt+0x1ac>
 8008ae6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008b94 <__ieee754_sqrt+0x1b0>
 8008aea:	e9da 0100 	ldrd	r0, r1, [sl]
 8008aee:	e9db 2300 	ldrd	r2, r3, [fp]
 8008af2:	f7f7 fbc9 	bl	8000288 <__aeabi_dsub>
 8008af6:	e9da 8900 	ldrd	r8, r9, [sl]
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4640      	mov	r0, r8
 8008b00:	4649      	mov	r1, r9
 8008b02:	f7f7 fff5 	bl	8000af0 <__aeabi_dcmple>
 8008b06:	b140      	cbz	r0, 8008b1a <__ieee754_sqrt+0x136>
 8008b08:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008b0c:	e9da 0100 	ldrd	r0, r1, [sl]
 8008b10:	e9db 2300 	ldrd	r2, r3, [fp]
 8008b14:	d126      	bne.n	8008b64 <__ieee754_sqrt+0x180>
 8008b16:	3501      	adds	r5, #1
 8008b18:	463c      	mov	r4, r7
 8008b1a:	106a      	asrs	r2, r5, #1
 8008b1c:	0863      	lsrs	r3, r4, #1
 8008b1e:	07e9      	lsls	r1, r5, #31
 8008b20:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008b24:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008b28:	bf48      	it	mi
 8008b2a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008b2e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8008b32:	461c      	mov	r4, r3
 8008b34:	e76d      	b.n	8008a12 <__ieee754_sqrt+0x2e>
 8008b36:	0ad3      	lsrs	r3, r2, #11
 8008b38:	3815      	subs	r0, #21
 8008b3a:	0552      	lsls	r2, r2, #21
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d0fa      	beq.n	8008b36 <__ieee754_sqrt+0x152>
 8008b40:	02dc      	lsls	r4, r3, #11
 8008b42:	d50a      	bpl.n	8008b5a <__ieee754_sqrt+0x176>
 8008b44:	f1c1 0420 	rsb	r4, r1, #32
 8008b48:	fa22 f404 	lsr.w	r4, r2, r4
 8008b4c:	1e4d      	subs	r5, r1, #1
 8008b4e:	408a      	lsls	r2, r1
 8008b50:	4323      	orrs	r3, r4
 8008b52:	1b41      	subs	r1, r0, r5
 8008b54:	e772      	b.n	8008a3c <__ieee754_sqrt+0x58>
 8008b56:	4608      	mov	r0, r1
 8008b58:	e7f0      	b.n	8008b3c <__ieee754_sqrt+0x158>
 8008b5a:	005b      	lsls	r3, r3, #1
 8008b5c:	3101      	adds	r1, #1
 8008b5e:	e7ef      	b.n	8008b40 <__ieee754_sqrt+0x15c>
 8008b60:	46e0      	mov	r8, ip
 8008b62:	e7aa      	b.n	8008aba <__ieee754_sqrt+0xd6>
 8008b64:	f7f7 fb92 	bl	800028c <__adddf3>
 8008b68:	e9da 8900 	ldrd	r8, r9, [sl]
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	4640      	mov	r0, r8
 8008b72:	4649      	mov	r1, r9
 8008b74:	f7f7 ffb2 	bl	8000adc <__aeabi_dcmplt>
 8008b78:	b120      	cbz	r0, 8008b84 <__ieee754_sqrt+0x1a0>
 8008b7a:	1ca0      	adds	r0, r4, #2
 8008b7c:	bf08      	it	eq
 8008b7e:	3501      	addeq	r5, #1
 8008b80:	3402      	adds	r4, #2
 8008b82:	e7ca      	b.n	8008b1a <__ieee754_sqrt+0x136>
 8008b84:	3401      	adds	r4, #1
 8008b86:	f024 0401 	bic.w	r4, r4, #1
 8008b8a:	e7c6      	b.n	8008b1a <__ieee754_sqrt+0x136>
 8008b8c:	7ff00000 	.word	0x7ff00000
 8008b90:	20000030 	.word	0x20000030
 8008b94:	20000038 	.word	0x20000038

08008b98 <abort>:
 8008b98:	b508      	push	{r3, lr}
 8008b9a:	2006      	movs	r0, #6
 8008b9c:	f000 fe90 	bl	80098c0 <raise>
 8008ba0:	2001      	movs	r0, #1
 8008ba2:	f7f9 fa53 	bl	800204c <_exit>
	...

08008ba8 <malloc>:
 8008ba8:	4b02      	ldr	r3, [pc, #8]	; (8008bb4 <malloc+0xc>)
 8008baa:	4601      	mov	r1, r0
 8008bac:	6818      	ldr	r0, [r3, #0]
 8008bae:	f000 b823 	b.w	8008bf8 <_malloc_r>
 8008bb2:	bf00      	nop
 8008bb4:	20000098 	.word	0x20000098

08008bb8 <sbrk_aligned>:
 8008bb8:	b570      	push	{r4, r5, r6, lr}
 8008bba:	4e0e      	ldr	r6, [pc, #56]	; (8008bf4 <sbrk_aligned+0x3c>)
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	6831      	ldr	r1, [r6, #0]
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	b911      	cbnz	r1, 8008bca <sbrk_aligned+0x12>
 8008bc4:	f000 fed0 	bl	8009968 <_sbrk_r>
 8008bc8:	6030      	str	r0, [r6, #0]
 8008bca:	4621      	mov	r1, r4
 8008bcc:	4628      	mov	r0, r5
 8008bce:	f000 fecb 	bl	8009968 <_sbrk_r>
 8008bd2:	1c43      	adds	r3, r0, #1
 8008bd4:	d00a      	beq.n	8008bec <sbrk_aligned+0x34>
 8008bd6:	1cc4      	adds	r4, r0, #3
 8008bd8:	f024 0403 	bic.w	r4, r4, #3
 8008bdc:	42a0      	cmp	r0, r4
 8008bde:	d007      	beq.n	8008bf0 <sbrk_aligned+0x38>
 8008be0:	1a21      	subs	r1, r4, r0
 8008be2:	4628      	mov	r0, r5
 8008be4:	f000 fec0 	bl	8009968 <_sbrk_r>
 8008be8:	3001      	adds	r0, #1
 8008bea:	d101      	bne.n	8008bf0 <sbrk_aligned+0x38>
 8008bec:	f04f 34ff 	mov.w	r4, #4294967295
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}
 8008bf4:	20000868 	.word	0x20000868

08008bf8 <_malloc_r>:
 8008bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bfc:	1ccd      	adds	r5, r1, #3
 8008bfe:	f025 0503 	bic.w	r5, r5, #3
 8008c02:	3508      	adds	r5, #8
 8008c04:	2d0c      	cmp	r5, #12
 8008c06:	bf38      	it	cc
 8008c08:	250c      	movcc	r5, #12
 8008c0a:	2d00      	cmp	r5, #0
 8008c0c:	4607      	mov	r7, r0
 8008c0e:	db01      	blt.n	8008c14 <_malloc_r+0x1c>
 8008c10:	42a9      	cmp	r1, r5
 8008c12:	d905      	bls.n	8008c20 <_malloc_r+0x28>
 8008c14:	230c      	movs	r3, #12
 8008c16:	603b      	str	r3, [r7, #0]
 8008c18:	2600      	movs	r6, #0
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008cf4 <_malloc_r+0xfc>
 8008c24:	f000 f868 	bl	8008cf8 <__malloc_lock>
 8008c28:	f8d8 3000 	ldr.w	r3, [r8]
 8008c2c:	461c      	mov	r4, r3
 8008c2e:	bb5c      	cbnz	r4, 8008c88 <_malloc_r+0x90>
 8008c30:	4629      	mov	r1, r5
 8008c32:	4638      	mov	r0, r7
 8008c34:	f7ff ffc0 	bl	8008bb8 <sbrk_aligned>
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	d155      	bne.n	8008cea <_malloc_r+0xf2>
 8008c3e:	f8d8 4000 	ldr.w	r4, [r8]
 8008c42:	4626      	mov	r6, r4
 8008c44:	2e00      	cmp	r6, #0
 8008c46:	d145      	bne.n	8008cd4 <_malloc_r+0xdc>
 8008c48:	2c00      	cmp	r4, #0
 8008c4a:	d048      	beq.n	8008cde <_malloc_r+0xe6>
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	4631      	mov	r1, r6
 8008c50:	4638      	mov	r0, r7
 8008c52:	eb04 0903 	add.w	r9, r4, r3
 8008c56:	f000 fe87 	bl	8009968 <_sbrk_r>
 8008c5a:	4581      	cmp	r9, r0
 8008c5c:	d13f      	bne.n	8008cde <_malloc_r+0xe6>
 8008c5e:	6821      	ldr	r1, [r4, #0]
 8008c60:	1a6d      	subs	r5, r5, r1
 8008c62:	4629      	mov	r1, r5
 8008c64:	4638      	mov	r0, r7
 8008c66:	f7ff ffa7 	bl	8008bb8 <sbrk_aligned>
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	d037      	beq.n	8008cde <_malloc_r+0xe6>
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	442b      	add	r3, r5
 8008c72:	6023      	str	r3, [r4, #0]
 8008c74:	f8d8 3000 	ldr.w	r3, [r8]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d038      	beq.n	8008cee <_malloc_r+0xf6>
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	42a2      	cmp	r2, r4
 8008c80:	d12b      	bne.n	8008cda <_malloc_r+0xe2>
 8008c82:	2200      	movs	r2, #0
 8008c84:	605a      	str	r2, [r3, #4]
 8008c86:	e00f      	b.n	8008ca8 <_malloc_r+0xb0>
 8008c88:	6822      	ldr	r2, [r4, #0]
 8008c8a:	1b52      	subs	r2, r2, r5
 8008c8c:	d41f      	bmi.n	8008cce <_malloc_r+0xd6>
 8008c8e:	2a0b      	cmp	r2, #11
 8008c90:	d917      	bls.n	8008cc2 <_malloc_r+0xca>
 8008c92:	1961      	adds	r1, r4, r5
 8008c94:	42a3      	cmp	r3, r4
 8008c96:	6025      	str	r5, [r4, #0]
 8008c98:	bf18      	it	ne
 8008c9a:	6059      	strne	r1, [r3, #4]
 8008c9c:	6863      	ldr	r3, [r4, #4]
 8008c9e:	bf08      	it	eq
 8008ca0:	f8c8 1000 	streq.w	r1, [r8]
 8008ca4:	5162      	str	r2, [r4, r5]
 8008ca6:	604b      	str	r3, [r1, #4]
 8008ca8:	4638      	mov	r0, r7
 8008caa:	f104 060b 	add.w	r6, r4, #11
 8008cae:	f000 f829 	bl	8008d04 <__malloc_unlock>
 8008cb2:	f026 0607 	bic.w	r6, r6, #7
 8008cb6:	1d23      	adds	r3, r4, #4
 8008cb8:	1af2      	subs	r2, r6, r3
 8008cba:	d0ae      	beq.n	8008c1a <_malloc_r+0x22>
 8008cbc:	1b9b      	subs	r3, r3, r6
 8008cbe:	50a3      	str	r3, [r4, r2]
 8008cc0:	e7ab      	b.n	8008c1a <_malloc_r+0x22>
 8008cc2:	42a3      	cmp	r3, r4
 8008cc4:	6862      	ldr	r2, [r4, #4]
 8008cc6:	d1dd      	bne.n	8008c84 <_malloc_r+0x8c>
 8008cc8:	f8c8 2000 	str.w	r2, [r8]
 8008ccc:	e7ec      	b.n	8008ca8 <_malloc_r+0xb0>
 8008cce:	4623      	mov	r3, r4
 8008cd0:	6864      	ldr	r4, [r4, #4]
 8008cd2:	e7ac      	b.n	8008c2e <_malloc_r+0x36>
 8008cd4:	4634      	mov	r4, r6
 8008cd6:	6876      	ldr	r6, [r6, #4]
 8008cd8:	e7b4      	b.n	8008c44 <_malloc_r+0x4c>
 8008cda:	4613      	mov	r3, r2
 8008cdc:	e7cc      	b.n	8008c78 <_malloc_r+0x80>
 8008cde:	230c      	movs	r3, #12
 8008ce0:	603b      	str	r3, [r7, #0]
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	f000 f80e 	bl	8008d04 <__malloc_unlock>
 8008ce8:	e797      	b.n	8008c1a <_malloc_r+0x22>
 8008cea:	6025      	str	r5, [r4, #0]
 8008cec:	e7dc      	b.n	8008ca8 <_malloc_r+0xb0>
 8008cee:	605b      	str	r3, [r3, #4]
 8008cf0:	deff      	udf	#255	; 0xff
 8008cf2:	bf00      	nop
 8008cf4:	20000864 	.word	0x20000864

08008cf8 <__malloc_lock>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	; (8008d00 <__malloc_lock+0x8>)
 8008cfa:	f000 be81 	b.w	8009a00 <__retarget_lock_acquire_recursive>
 8008cfe:	bf00      	nop
 8008d00:	200009ac 	.word	0x200009ac

08008d04 <__malloc_unlock>:
 8008d04:	4801      	ldr	r0, [pc, #4]	; (8008d0c <__malloc_unlock+0x8>)
 8008d06:	f000 be7c 	b.w	8009a02 <__retarget_lock_release_recursive>
 8008d0a:	bf00      	nop
 8008d0c:	200009ac 	.word	0x200009ac

08008d10 <__cvt>:
 8008d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d14:	ec55 4b10 	vmov	r4, r5, d0
 8008d18:	2d00      	cmp	r5, #0
 8008d1a:	460e      	mov	r6, r1
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	462b      	mov	r3, r5
 8008d20:	bfbb      	ittet	lt
 8008d22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008d26:	461d      	movlt	r5, r3
 8008d28:	2300      	movge	r3, #0
 8008d2a:	232d      	movlt	r3, #45	; 0x2d
 8008d2c:	700b      	strb	r3, [r1, #0]
 8008d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d34:	4691      	mov	r9, r2
 8008d36:	f023 0820 	bic.w	r8, r3, #32
 8008d3a:	bfbc      	itt	lt
 8008d3c:	4622      	movlt	r2, r4
 8008d3e:	4614      	movlt	r4, r2
 8008d40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d44:	d005      	beq.n	8008d52 <__cvt+0x42>
 8008d46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d4a:	d100      	bne.n	8008d4e <__cvt+0x3e>
 8008d4c:	3601      	adds	r6, #1
 8008d4e:	2102      	movs	r1, #2
 8008d50:	e000      	b.n	8008d54 <__cvt+0x44>
 8008d52:	2103      	movs	r1, #3
 8008d54:	ab03      	add	r3, sp, #12
 8008d56:	9301      	str	r3, [sp, #4]
 8008d58:	ab02      	add	r3, sp, #8
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	ec45 4b10 	vmov	d0, r4, r5
 8008d60:	4653      	mov	r3, sl
 8008d62:	4632      	mov	r2, r6
 8008d64:	f000 fee4 	bl	8009b30 <_dtoa_r>
 8008d68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d6c:	4607      	mov	r7, r0
 8008d6e:	d102      	bne.n	8008d76 <__cvt+0x66>
 8008d70:	f019 0f01 	tst.w	r9, #1
 8008d74:	d022      	beq.n	8008dbc <__cvt+0xac>
 8008d76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d7a:	eb07 0906 	add.w	r9, r7, r6
 8008d7e:	d110      	bne.n	8008da2 <__cvt+0x92>
 8008d80:	783b      	ldrb	r3, [r7, #0]
 8008d82:	2b30      	cmp	r3, #48	; 0x30
 8008d84:	d10a      	bne.n	8008d9c <__cvt+0x8c>
 8008d86:	2200      	movs	r2, #0
 8008d88:	2300      	movs	r3, #0
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	f7f7 fe9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d92:	b918      	cbnz	r0, 8008d9c <__cvt+0x8c>
 8008d94:	f1c6 0601 	rsb	r6, r6, #1
 8008d98:	f8ca 6000 	str.w	r6, [sl]
 8008d9c:	f8da 3000 	ldr.w	r3, [sl]
 8008da0:	4499      	add	r9, r3
 8008da2:	2200      	movs	r2, #0
 8008da4:	2300      	movs	r3, #0
 8008da6:	4620      	mov	r0, r4
 8008da8:	4629      	mov	r1, r5
 8008daa:	f7f7 fe8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008dae:	b108      	cbz	r0, 8008db4 <__cvt+0xa4>
 8008db0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008db4:	2230      	movs	r2, #48	; 0x30
 8008db6:	9b03      	ldr	r3, [sp, #12]
 8008db8:	454b      	cmp	r3, r9
 8008dba:	d307      	bcc.n	8008dcc <__cvt+0xbc>
 8008dbc:	9b03      	ldr	r3, [sp, #12]
 8008dbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dc0:	1bdb      	subs	r3, r3, r7
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	6013      	str	r3, [r2, #0]
 8008dc6:	b004      	add	sp, #16
 8008dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dcc:	1c59      	adds	r1, r3, #1
 8008dce:	9103      	str	r1, [sp, #12]
 8008dd0:	701a      	strb	r2, [r3, #0]
 8008dd2:	e7f0      	b.n	8008db6 <__cvt+0xa6>

08008dd4 <__exponent>:
 8008dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2900      	cmp	r1, #0
 8008dda:	bfb8      	it	lt
 8008ddc:	4249      	neglt	r1, r1
 8008dde:	f803 2b02 	strb.w	r2, [r3], #2
 8008de2:	bfb4      	ite	lt
 8008de4:	222d      	movlt	r2, #45	; 0x2d
 8008de6:	222b      	movge	r2, #43	; 0x2b
 8008de8:	2909      	cmp	r1, #9
 8008dea:	7042      	strb	r2, [r0, #1]
 8008dec:	dd2a      	ble.n	8008e44 <__exponent+0x70>
 8008dee:	f10d 0207 	add.w	r2, sp, #7
 8008df2:	4617      	mov	r7, r2
 8008df4:	260a      	movs	r6, #10
 8008df6:	4694      	mov	ip, r2
 8008df8:	fb91 f5f6 	sdiv	r5, r1, r6
 8008dfc:	fb06 1415 	mls	r4, r6, r5, r1
 8008e00:	3430      	adds	r4, #48	; 0x30
 8008e02:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008e06:	460c      	mov	r4, r1
 8008e08:	2c63      	cmp	r4, #99	; 0x63
 8008e0a:	f102 32ff 	add.w	r2, r2, #4294967295
 8008e0e:	4629      	mov	r1, r5
 8008e10:	dcf1      	bgt.n	8008df6 <__exponent+0x22>
 8008e12:	3130      	adds	r1, #48	; 0x30
 8008e14:	f1ac 0402 	sub.w	r4, ip, #2
 8008e18:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008e1c:	1c41      	adds	r1, r0, #1
 8008e1e:	4622      	mov	r2, r4
 8008e20:	42ba      	cmp	r2, r7
 8008e22:	d30a      	bcc.n	8008e3a <__exponent+0x66>
 8008e24:	f10d 0209 	add.w	r2, sp, #9
 8008e28:	eba2 020c 	sub.w	r2, r2, ip
 8008e2c:	42bc      	cmp	r4, r7
 8008e2e:	bf88      	it	hi
 8008e30:	2200      	movhi	r2, #0
 8008e32:	4413      	add	r3, r2
 8008e34:	1a18      	subs	r0, r3, r0
 8008e36:	b003      	add	sp, #12
 8008e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e3a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008e3e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008e42:	e7ed      	b.n	8008e20 <__exponent+0x4c>
 8008e44:	2330      	movs	r3, #48	; 0x30
 8008e46:	3130      	adds	r1, #48	; 0x30
 8008e48:	7083      	strb	r3, [r0, #2]
 8008e4a:	70c1      	strb	r1, [r0, #3]
 8008e4c:	1d03      	adds	r3, r0, #4
 8008e4e:	e7f1      	b.n	8008e34 <__exponent+0x60>

08008e50 <_printf_float>:
 8008e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	ed2d 8b02 	vpush	{d8}
 8008e58:	b08d      	sub	sp, #52	; 0x34
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e60:	4616      	mov	r6, r2
 8008e62:	461f      	mov	r7, r3
 8008e64:	4605      	mov	r5, r0
 8008e66:	f000 fd33 	bl	80098d0 <_localeconv_r>
 8008e6a:	f8d0 a000 	ldr.w	sl, [r0]
 8008e6e:	4650      	mov	r0, sl
 8008e70:	f7f7 f9fe 	bl	8000270 <strlen>
 8008e74:	2300      	movs	r3, #0
 8008e76:	930a      	str	r3, [sp, #40]	; 0x28
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	9305      	str	r3, [sp, #20]
 8008e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e80:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e84:	3307      	adds	r3, #7
 8008e86:	f023 0307 	bic.w	r3, r3, #7
 8008e8a:	f103 0208 	add.w	r2, r3, #8
 8008e8e:	f8c8 2000 	str.w	r2, [r8]
 8008e92:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e9a:	9307      	str	r3, [sp, #28]
 8008e9c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ea0:	ee08 0a10 	vmov	s16, r0
 8008ea4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008ea8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008eac:	4b9e      	ldr	r3, [pc, #632]	; (8009128 <_printf_float+0x2d8>)
 8008eae:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb2:	f7f7 fe3b 	bl	8000b2c <__aeabi_dcmpun>
 8008eb6:	bb88      	cbnz	r0, 8008f1c <_printf_float+0xcc>
 8008eb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ebc:	4b9a      	ldr	r3, [pc, #616]	; (8009128 <_printf_float+0x2d8>)
 8008ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec2:	f7f7 fe15 	bl	8000af0 <__aeabi_dcmple>
 8008ec6:	bb48      	cbnz	r0, 8008f1c <_printf_float+0xcc>
 8008ec8:	2200      	movs	r2, #0
 8008eca:	2300      	movs	r3, #0
 8008ecc:	4640      	mov	r0, r8
 8008ece:	4649      	mov	r1, r9
 8008ed0:	f7f7 fe04 	bl	8000adc <__aeabi_dcmplt>
 8008ed4:	b110      	cbz	r0, 8008edc <_printf_float+0x8c>
 8008ed6:	232d      	movs	r3, #45	; 0x2d
 8008ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008edc:	4a93      	ldr	r2, [pc, #588]	; (800912c <_printf_float+0x2dc>)
 8008ede:	4b94      	ldr	r3, [pc, #592]	; (8009130 <_printf_float+0x2e0>)
 8008ee0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ee4:	bf94      	ite	ls
 8008ee6:	4690      	movls	r8, r2
 8008ee8:	4698      	movhi	r8, r3
 8008eea:	2303      	movs	r3, #3
 8008eec:	6123      	str	r3, [r4, #16]
 8008eee:	9b05      	ldr	r3, [sp, #20]
 8008ef0:	f023 0304 	bic.w	r3, r3, #4
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	f04f 0900 	mov.w	r9, #0
 8008efa:	9700      	str	r7, [sp, #0]
 8008efc:	4633      	mov	r3, r6
 8008efe:	aa0b      	add	r2, sp, #44	; 0x2c
 8008f00:	4621      	mov	r1, r4
 8008f02:	4628      	mov	r0, r5
 8008f04:	f000 f9da 	bl	80092bc <_printf_common>
 8008f08:	3001      	adds	r0, #1
 8008f0a:	f040 8090 	bne.w	800902e <_printf_float+0x1de>
 8008f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f12:	b00d      	add	sp, #52	; 0x34
 8008f14:	ecbd 8b02 	vpop	{d8}
 8008f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1c:	4642      	mov	r2, r8
 8008f1e:	464b      	mov	r3, r9
 8008f20:	4640      	mov	r0, r8
 8008f22:	4649      	mov	r1, r9
 8008f24:	f7f7 fe02 	bl	8000b2c <__aeabi_dcmpun>
 8008f28:	b140      	cbz	r0, 8008f3c <_printf_float+0xec>
 8008f2a:	464b      	mov	r3, r9
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	bfbc      	itt	lt
 8008f30:	232d      	movlt	r3, #45	; 0x2d
 8008f32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f36:	4a7f      	ldr	r2, [pc, #508]	; (8009134 <_printf_float+0x2e4>)
 8008f38:	4b7f      	ldr	r3, [pc, #508]	; (8009138 <_printf_float+0x2e8>)
 8008f3a:	e7d1      	b.n	8008ee0 <_printf_float+0x90>
 8008f3c:	6863      	ldr	r3, [r4, #4]
 8008f3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008f42:	9206      	str	r2, [sp, #24]
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	d13f      	bne.n	8008fc8 <_printf_float+0x178>
 8008f48:	2306      	movs	r3, #6
 8008f4a:	6063      	str	r3, [r4, #4]
 8008f4c:	9b05      	ldr	r3, [sp, #20]
 8008f4e:	6861      	ldr	r1, [r4, #4]
 8008f50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f54:	2300      	movs	r3, #0
 8008f56:	9303      	str	r3, [sp, #12]
 8008f58:	ab0a      	add	r3, sp, #40	; 0x28
 8008f5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f5e:	ab09      	add	r3, sp, #36	; 0x24
 8008f60:	ec49 8b10 	vmov	d0, r8, r9
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	6022      	str	r2, [r4, #0]
 8008f68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	f7ff fecf 	bl	8008d10 <__cvt>
 8008f72:	9b06      	ldr	r3, [sp, #24]
 8008f74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f76:	2b47      	cmp	r3, #71	; 0x47
 8008f78:	4680      	mov	r8, r0
 8008f7a:	d108      	bne.n	8008f8e <_printf_float+0x13e>
 8008f7c:	1cc8      	adds	r0, r1, #3
 8008f7e:	db02      	blt.n	8008f86 <_printf_float+0x136>
 8008f80:	6863      	ldr	r3, [r4, #4]
 8008f82:	4299      	cmp	r1, r3
 8008f84:	dd41      	ble.n	800900a <_printf_float+0x1ba>
 8008f86:	f1ab 0302 	sub.w	r3, fp, #2
 8008f8a:	fa5f fb83 	uxtb.w	fp, r3
 8008f8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f92:	d820      	bhi.n	8008fd6 <_printf_float+0x186>
 8008f94:	3901      	subs	r1, #1
 8008f96:	465a      	mov	r2, fp
 8008f98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f9c:	9109      	str	r1, [sp, #36]	; 0x24
 8008f9e:	f7ff ff19 	bl	8008dd4 <__exponent>
 8008fa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fa4:	1813      	adds	r3, r2, r0
 8008fa6:	2a01      	cmp	r2, #1
 8008fa8:	4681      	mov	r9, r0
 8008faa:	6123      	str	r3, [r4, #16]
 8008fac:	dc02      	bgt.n	8008fb4 <_printf_float+0x164>
 8008fae:	6822      	ldr	r2, [r4, #0]
 8008fb0:	07d2      	lsls	r2, r2, #31
 8008fb2:	d501      	bpl.n	8008fb8 <_printf_float+0x168>
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	6123      	str	r3, [r4, #16]
 8008fb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d09c      	beq.n	8008efa <_printf_float+0xaa>
 8008fc0:	232d      	movs	r3, #45	; 0x2d
 8008fc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fc6:	e798      	b.n	8008efa <_printf_float+0xaa>
 8008fc8:	9a06      	ldr	r2, [sp, #24]
 8008fca:	2a47      	cmp	r2, #71	; 0x47
 8008fcc:	d1be      	bne.n	8008f4c <_printf_float+0xfc>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1bc      	bne.n	8008f4c <_printf_float+0xfc>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e7b9      	b.n	8008f4a <_printf_float+0xfa>
 8008fd6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008fda:	d118      	bne.n	800900e <_printf_float+0x1be>
 8008fdc:	2900      	cmp	r1, #0
 8008fde:	6863      	ldr	r3, [r4, #4]
 8008fe0:	dd0b      	ble.n	8008ffa <_printf_float+0x1aa>
 8008fe2:	6121      	str	r1, [r4, #16]
 8008fe4:	b913      	cbnz	r3, 8008fec <_printf_float+0x19c>
 8008fe6:	6822      	ldr	r2, [r4, #0]
 8008fe8:	07d0      	lsls	r0, r2, #31
 8008fea:	d502      	bpl.n	8008ff2 <_printf_float+0x1a2>
 8008fec:	3301      	adds	r3, #1
 8008fee:	440b      	add	r3, r1
 8008ff0:	6123      	str	r3, [r4, #16]
 8008ff2:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ff4:	f04f 0900 	mov.w	r9, #0
 8008ff8:	e7de      	b.n	8008fb8 <_printf_float+0x168>
 8008ffa:	b913      	cbnz	r3, 8009002 <_printf_float+0x1b2>
 8008ffc:	6822      	ldr	r2, [r4, #0]
 8008ffe:	07d2      	lsls	r2, r2, #31
 8009000:	d501      	bpl.n	8009006 <_printf_float+0x1b6>
 8009002:	3302      	adds	r3, #2
 8009004:	e7f4      	b.n	8008ff0 <_printf_float+0x1a0>
 8009006:	2301      	movs	r3, #1
 8009008:	e7f2      	b.n	8008ff0 <_printf_float+0x1a0>
 800900a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800900e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009010:	4299      	cmp	r1, r3
 8009012:	db05      	blt.n	8009020 <_printf_float+0x1d0>
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	6121      	str	r1, [r4, #16]
 8009018:	07d8      	lsls	r0, r3, #31
 800901a:	d5ea      	bpl.n	8008ff2 <_printf_float+0x1a2>
 800901c:	1c4b      	adds	r3, r1, #1
 800901e:	e7e7      	b.n	8008ff0 <_printf_float+0x1a0>
 8009020:	2900      	cmp	r1, #0
 8009022:	bfd4      	ite	le
 8009024:	f1c1 0202 	rsble	r2, r1, #2
 8009028:	2201      	movgt	r2, #1
 800902a:	4413      	add	r3, r2
 800902c:	e7e0      	b.n	8008ff0 <_printf_float+0x1a0>
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	055a      	lsls	r2, r3, #21
 8009032:	d407      	bmi.n	8009044 <_printf_float+0x1f4>
 8009034:	6923      	ldr	r3, [r4, #16]
 8009036:	4642      	mov	r2, r8
 8009038:	4631      	mov	r1, r6
 800903a:	4628      	mov	r0, r5
 800903c:	47b8      	blx	r7
 800903e:	3001      	adds	r0, #1
 8009040:	d12c      	bne.n	800909c <_printf_float+0x24c>
 8009042:	e764      	b.n	8008f0e <_printf_float+0xbe>
 8009044:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009048:	f240 80e0 	bls.w	800920c <_printf_float+0x3bc>
 800904c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009050:	2200      	movs	r2, #0
 8009052:	2300      	movs	r3, #0
 8009054:	f7f7 fd38 	bl	8000ac8 <__aeabi_dcmpeq>
 8009058:	2800      	cmp	r0, #0
 800905a:	d034      	beq.n	80090c6 <_printf_float+0x276>
 800905c:	4a37      	ldr	r2, [pc, #220]	; (800913c <_printf_float+0x2ec>)
 800905e:	2301      	movs	r3, #1
 8009060:	4631      	mov	r1, r6
 8009062:	4628      	mov	r0, r5
 8009064:	47b8      	blx	r7
 8009066:	3001      	adds	r0, #1
 8009068:	f43f af51 	beq.w	8008f0e <_printf_float+0xbe>
 800906c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009070:	429a      	cmp	r2, r3
 8009072:	db02      	blt.n	800907a <_printf_float+0x22a>
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	07d8      	lsls	r0, r3, #31
 8009078:	d510      	bpl.n	800909c <_printf_float+0x24c>
 800907a:	ee18 3a10 	vmov	r3, s16
 800907e:	4652      	mov	r2, sl
 8009080:	4631      	mov	r1, r6
 8009082:	4628      	mov	r0, r5
 8009084:	47b8      	blx	r7
 8009086:	3001      	adds	r0, #1
 8009088:	f43f af41 	beq.w	8008f0e <_printf_float+0xbe>
 800908c:	f04f 0800 	mov.w	r8, #0
 8009090:	f104 091a 	add.w	r9, r4, #26
 8009094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009096:	3b01      	subs	r3, #1
 8009098:	4543      	cmp	r3, r8
 800909a:	dc09      	bgt.n	80090b0 <_printf_float+0x260>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	079b      	lsls	r3, r3, #30
 80090a0:	f100 8107 	bmi.w	80092b2 <_printf_float+0x462>
 80090a4:	68e0      	ldr	r0, [r4, #12]
 80090a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090a8:	4298      	cmp	r0, r3
 80090aa:	bfb8      	it	lt
 80090ac:	4618      	movlt	r0, r3
 80090ae:	e730      	b.n	8008f12 <_printf_float+0xc2>
 80090b0:	2301      	movs	r3, #1
 80090b2:	464a      	mov	r2, r9
 80090b4:	4631      	mov	r1, r6
 80090b6:	4628      	mov	r0, r5
 80090b8:	47b8      	blx	r7
 80090ba:	3001      	adds	r0, #1
 80090bc:	f43f af27 	beq.w	8008f0e <_printf_float+0xbe>
 80090c0:	f108 0801 	add.w	r8, r8, #1
 80090c4:	e7e6      	b.n	8009094 <_printf_float+0x244>
 80090c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	dc39      	bgt.n	8009140 <_printf_float+0x2f0>
 80090cc:	4a1b      	ldr	r2, [pc, #108]	; (800913c <_printf_float+0x2ec>)
 80090ce:	2301      	movs	r3, #1
 80090d0:	4631      	mov	r1, r6
 80090d2:	4628      	mov	r0, r5
 80090d4:	47b8      	blx	r7
 80090d6:	3001      	adds	r0, #1
 80090d8:	f43f af19 	beq.w	8008f0e <_printf_float+0xbe>
 80090dc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80090e0:	4313      	orrs	r3, r2
 80090e2:	d102      	bne.n	80090ea <_printf_float+0x29a>
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	07d9      	lsls	r1, r3, #31
 80090e8:	d5d8      	bpl.n	800909c <_printf_float+0x24c>
 80090ea:	ee18 3a10 	vmov	r3, s16
 80090ee:	4652      	mov	r2, sl
 80090f0:	4631      	mov	r1, r6
 80090f2:	4628      	mov	r0, r5
 80090f4:	47b8      	blx	r7
 80090f6:	3001      	adds	r0, #1
 80090f8:	f43f af09 	beq.w	8008f0e <_printf_float+0xbe>
 80090fc:	f04f 0900 	mov.w	r9, #0
 8009100:	f104 0a1a 	add.w	sl, r4, #26
 8009104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009106:	425b      	negs	r3, r3
 8009108:	454b      	cmp	r3, r9
 800910a:	dc01      	bgt.n	8009110 <_printf_float+0x2c0>
 800910c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800910e:	e792      	b.n	8009036 <_printf_float+0x1e6>
 8009110:	2301      	movs	r3, #1
 8009112:	4652      	mov	r2, sl
 8009114:	4631      	mov	r1, r6
 8009116:	4628      	mov	r0, r5
 8009118:	47b8      	blx	r7
 800911a:	3001      	adds	r0, #1
 800911c:	f43f aef7 	beq.w	8008f0e <_printf_float+0xbe>
 8009120:	f109 0901 	add.w	r9, r9, #1
 8009124:	e7ee      	b.n	8009104 <_printf_float+0x2b4>
 8009126:	bf00      	nop
 8009128:	7fefffff 	.word	0x7fefffff
 800912c:	0800e618 	.word	0x0800e618
 8009130:	0800e61c 	.word	0x0800e61c
 8009134:	0800e620 	.word	0x0800e620
 8009138:	0800e624 	.word	0x0800e624
 800913c:	0800e628 	.word	0x0800e628
 8009140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009142:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009144:	429a      	cmp	r2, r3
 8009146:	bfa8      	it	ge
 8009148:	461a      	movge	r2, r3
 800914a:	2a00      	cmp	r2, #0
 800914c:	4691      	mov	r9, r2
 800914e:	dc37      	bgt.n	80091c0 <_printf_float+0x370>
 8009150:	f04f 0b00 	mov.w	fp, #0
 8009154:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009158:	f104 021a 	add.w	r2, r4, #26
 800915c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800915e:	9305      	str	r3, [sp, #20]
 8009160:	eba3 0309 	sub.w	r3, r3, r9
 8009164:	455b      	cmp	r3, fp
 8009166:	dc33      	bgt.n	80091d0 <_printf_float+0x380>
 8009168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800916c:	429a      	cmp	r2, r3
 800916e:	db3b      	blt.n	80091e8 <_printf_float+0x398>
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	07da      	lsls	r2, r3, #31
 8009174:	d438      	bmi.n	80091e8 <_printf_float+0x398>
 8009176:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800917a:	eba2 0903 	sub.w	r9, r2, r3
 800917e:	9b05      	ldr	r3, [sp, #20]
 8009180:	1ad2      	subs	r2, r2, r3
 8009182:	4591      	cmp	r9, r2
 8009184:	bfa8      	it	ge
 8009186:	4691      	movge	r9, r2
 8009188:	f1b9 0f00 	cmp.w	r9, #0
 800918c:	dc35      	bgt.n	80091fa <_printf_float+0x3aa>
 800918e:	f04f 0800 	mov.w	r8, #0
 8009192:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009196:	f104 0a1a 	add.w	sl, r4, #26
 800919a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800919e:	1a9b      	subs	r3, r3, r2
 80091a0:	eba3 0309 	sub.w	r3, r3, r9
 80091a4:	4543      	cmp	r3, r8
 80091a6:	f77f af79 	ble.w	800909c <_printf_float+0x24c>
 80091aa:	2301      	movs	r3, #1
 80091ac:	4652      	mov	r2, sl
 80091ae:	4631      	mov	r1, r6
 80091b0:	4628      	mov	r0, r5
 80091b2:	47b8      	blx	r7
 80091b4:	3001      	adds	r0, #1
 80091b6:	f43f aeaa 	beq.w	8008f0e <_printf_float+0xbe>
 80091ba:	f108 0801 	add.w	r8, r8, #1
 80091be:	e7ec      	b.n	800919a <_printf_float+0x34a>
 80091c0:	4613      	mov	r3, r2
 80091c2:	4631      	mov	r1, r6
 80091c4:	4642      	mov	r2, r8
 80091c6:	4628      	mov	r0, r5
 80091c8:	47b8      	blx	r7
 80091ca:	3001      	adds	r0, #1
 80091cc:	d1c0      	bne.n	8009150 <_printf_float+0x300>
 80091ce:	e69e      	b.n	8008f0e <_printf_float+0xbe>
 80091d0:	2301      	movs	r3, #1
 80091d2:	4631      	mov	r1, r6
 80091d4:	4628      	mov	r0, r5
 80091d6:	9205      	str	r2, [sp, #20]
 80091d8:	47b8      	blx	r7
 80091da:	3001      	adds	r0, #1
 80091dc:	f43f ae97 	beq.w	8008f0e <_printf_float+0xbe>
 80091e0:	9a05      	ldr	r2, [sp, #20]
 80091e2:	f10b 0b01 	add.w	fp, fp, #1
 80091e6:	e7b9      	b.n	800915c <_printf_float+0x30c>
 80091e8:	ee18 3a10 	vmov	r3, s16
 80091ec:	4652      	mov	r2, sl
 80091ee:	4631      	mov	r1, r6
 80091f0:	4628      	mov	r0, r5
 80091f2:	47b8      	blx	r7
 80091f4:	3001      	adds	r0, #1
 80091f6:	d1be      	bne.n	8009176 <_printf_float+0x326>
 80091f8:	e689      	b.n	8008f0e <_printf_float+0xbe>
 80091fa:	9a05      	ldr	r2, [sp, #20]
 80091fc:	464b      	mov	r3, r9
 80091fe:	4442      	add	r2, r8
 8009200:	4631      	mov	r1, r6
 8009202:	4628      	mov	r0, r5
 8009204:	47b8      	blx	r7
 8009206:	3001      	adds	r0, #1
 8009208:	d1c1      	bne.n	800918e <_printf_float+0x33e>
 800920a:	e680      	b.n	8008f0e <_printf_float+0xbe>
 800920c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800920e:	2a01      	cmp	r2, #1
 8009210:	dc01      	bgt.n	8009216 <_printf_float+0x3c6>
 8009212:	07db      	lsls	r3, r3, #31
 8009214:	d53a      	bpl.n	800928c <_printf_float+0x43c>
 8009216:	2301      	movs	r3, #1
 8009218:	4642      	mov	r2, r8
 800921a:	4631      	mov	r1, r6
 800921c:	4628      	mov	r0, r5
 800921e:	47b8      	blx	r7
 8009220:	3001      	adds	r0, #1
 8009222:	f43f ae74 	beq.w	8008f0e <_printf_float+0xbe>
 8009226:	ee18 3a10 	vmov	r3, s16
 800922a:	4652      	mov	r2, sl
 800922c:	4631      	mov	r1, r6
 800922e:	4628      	mov	r0, r5
 8009230:	47b8      	blx	r7
 8009232:	3001      	adds	r0, #1
 8009234:	f43f ae6b 	beq.w	8008f0e <_printf_float+0xbe>
 8009238:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800923c:	2200      	movs	r2, #0
 800923e:	2300      	movs	r3, #0
 8009240:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009244:	f7f7 fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 8009248:	b9d8      	cbnz	r0, 8009282 <_printf_float+0x432>
 800924a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800924e:	f108 0201 	add.w	r2, r8, #1
 8009252:	4631      	mov	r1, r6
 8009254:	4628      	mov	r0, r5
 8009256:	47b8      	blx	r7
 8009258:	3001      	adds	r0, #1
 800925a:	d10e      	bne.n	800927a <_printf_float+0x42a>
 800925c:	e657      	b.n	8008f0e <_printf_float+0xbe>
 800925e:	2301      	movs	r3, #1
 8009260:	4652      	mov	r2, sl
 8009262:	4631      	mov	r1, r6
 8009264:	4628      	mov	r0, r5
 8009266:	47b8      	blx	r7
 8009268:	3001      	adds	r0, #1
 800926a:	f43f ae50 	beq.w	8008f0e <_printf_float+0xbe>
 800926e:	f108 0801 	add.w	r8, r8, #1
 8009272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009274:	3b01      	subs	r3, #1
 8009276:	4543      	cmp	r3, r8
 8009278:	dcf1      	bgt.n	800925e <_printf_float+0x40e>
 800927a:	464b      	mov	r3, r9
 800927c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009280:	e6da      	b.n	8009038 <_printf_float+0x1e8>
 8009282:	f04f 0800 	mov.w	r8, #0
 8009286:	f104 0a1a 	add.w	sl, r4, #26
 800928a:	e7f2      	b.n	8009272 <_printf_float+0x422>
 800928c:	2301      	movs	r3, #1
 800928e:	4642      	mov	r2, r8
 8009290:	e7df      	b.n	8009252 <_printf_float+0x402>
 8009292:	2301      	movs	r3, #1
 8009294:	464a      	mov	r2, r9
 8009296:	4631      	mov	r1, r6
 8009298:	4628      	mov	r0, r5
 800929a:	47b8      	blx	r7
 800929c:	3001      	adds	r0, #1
 800929e:	f43f ae36 	beq.w	8008f0e <_printf_float+0xbe>
 80092a2:	f108 0801 	add.w	r8, r8, #1
 80092a6:	68e3      	ldr	r3, [r4, #12]
 80092a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092aa:	1a5b      	subs	r3, r3, r1
 80092ac:	4543      	cmp	r3, r8
 80092ae:	dcf0      	bgt.n	8009292 <_printf_float+0x442>
 80092b0:	e6f8      	b.n	80090a4 <_printf_float+0x254>
 80092b2:	f04f 0800 	mov.w	r8, #0
 80092b6:	f104 0919 	add.w	r9, r4, #25
 80092ba:	e7f4      	b.n	80092a6 <_printf_float+0x456>

080092bc <_printf_common>:
 80092bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092c0:	4616      	mov	r6, r2
 80092c2:	4699      	mov	r9, r3
 80092c4:	688a      	ldr	r2, [r1, #8]
 80092c6:	690b      	ldr	r3, [r1, #16]
 80092c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092cc:	4293      	cmp	r3, r2
 80092ce:	bfb8      	it	lt
 80092d0:	4613      	movlt	r3, r2
 80092d2:	6033      	str	r3, [r6, #0]
 80092d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092d8:	4607      	mov	r7, r0
 80092da:	460c      	mov	r4, r1
 80092dc:	b10a      	cbz	r2, 80092e2 <_printf_common+0x26>
 80092de:	3301      	adds	r3, #1
 80092e0:	6033      	str	r3, [r6, #0]
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	0699      	lsls	r1, r3, #26
 80092e6:	bf42      	ittt	mi
 80092e8:	6833      	ldrmi	r3, [r6, #0]
 80092ea:	3302      	addmi	r3, #2
 80092ec:	6033      	strmi	r3, [r6, #0]
 80092ee:	6825      	ldr	r5, [r4, #0]
 80092f0:	f015 0506 	ands.w	r5, r5, #6
 80092f4:	d106      	bne.n	8009304 <_printf_common+0x48>
 80092f6:	f104 0a19 	add.w	sl, r4, #25
 80092fa:	68e3      	ldr	r3, [r4, #12]
 80092fc:	6832      	ldr	r2, [r6, #0]
 80092fe:	1a9b      	subs	r3, r3, r2
 8009300:	42ab      	cmp	r3, r5
 8009302:	dc26      	bgt.n	8009352 <_printf_common+0x96>
 8009304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009308:	1e13      	subs	r3, r2, #0
 800930a:	6822      	ldr	r2, [r4, #0]
 800930c:	bf18      	it	ne
 800930e:	2301      	movne	r3, #1
 8009310:	0692      	lsls	r2, r2, #26
 8009312:	d42b      	bmi.n	800936c <_printf_common+0xb0>
 8009314:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009318:	4649      	mov	r1, r9
 800931a:	4638      	mov	r0, r7
 800931c:	47c0      	blx	r8
 800931e:	3001      	adds	r0, #1
 8009320:	d01e      	beq.n	8009360 <_printf_common+0xa4>
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	6922      	ldr	r2, [r4, #16]
 8009326:	f003 0306 	and.w	r3, r3, #6
 800932a:	2b04      	cmp	r3, #4
 800932c:	bf02      	ittt	eq
 800932e:	68e5      	ldreq	r5, [r4, #12]
 8009330:	6833      	ldreq	r3, [r6, #0]
 8009332:	1aed      	subeq	r5, r5, r3
 8009334:	68a3      	ldr	r3, [r4, #8]
 8009336:	bf0c      	ite	eq
 8009338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800933c:	2500      	movne	r5, #0
 800933e:	4293      	cmp	r3, r2
 8009340:	bfc4      	itt	gt
 8009342:	1a9b      	subgt	r3, r3, r2
 8009344:	18ed      	addgt	r5, r5, r3
 8009346:	2600      	movs	r6, #0
 8009348:	341a      	adds	r4, #26
 800934a:	42b5      	cmp	r5, r6
 800934c:	d11a      	bne.n	8009384 <_printf_common+0xc8>
 800934e:	2000      	movs	r0, #0
 8009350:	e008      	b.n	8009364 <_printf_common+0xa8>
 8009352:	2301      	movs	r3, #1
 8009354:	4652      	mov	r2, sl
 8009356:	4649      	mov	r1, r9
 8009358:	4638      	mov	r0, r7
 800935a:	47c0      	blx	r8
 800935c:	3001      	adds	r0, #1
 800935e:	d103      	bne.n	8009368 <_printf_common+0xac>
 8009360:	f04f 30ff 	mov.w	r0, #4294967295
 8009364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009368:	3501      	adds	r5, #1
 800936a:	e7c6      	b.n	80092fa <_printf_common+0x3e>
 800936c:	18e1      	adds	r1, r4, r3
 800936e:	1c5a      	adds	r2, r3, #1
 8009370:	2030      	movs	r0, #48	; 0x30
 8009372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009376:	4422      	add	r2, r4
 8009378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800937c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009380:	3302      	adds	r3, #2
 8009382:	e7c7      	b.n	8009314 <_printf_common+0x58>
 8009384:	2301      	movs	r3, #1
 8009386:	4622      	mov	r2, r4
 8009388:	4649      	mov	r1, r9
 800938a:	4638      	mov	r0, r7
 800938c:	47c0      	blx	r8
 800938e:	3001      	adds	r0, #1
 8009390:	d0e6      	beq.n	8009360 <_printf_common+0xa4>
 8009392:	3601      	adds	r6, #1
 8009394:	e7d9      	b.n	800934a <_printf_common+0x8e>
	...

08009398 <_printf_i>:
 8009398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800939c:	7e0f      	ldrb	r7, [r1, #24]
 800939e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093a0:	2f78      	cmp	r7, #120	; 0x78
 80093a2:	4691      	mov	r9, r2
 80093a4:	4680      	mov	r8, r0
 80093a6:	460c      	mov	r4, r1
 80093a8:	469a      	mov	sl, r3
 80093aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093ae:	d807      	bhi.n	80093c0 <_printf_i+0x28>
 80093b0:	2f62      	cmp	r7, #98	; 0x62
 80093b2:	d80a      	bhi.n	80093ca <_printf_i+0x32>
 80093b4:	2f00      	cmp	r7, #0
 80093b6:	f000 80d4 	beq.w	8009562 <_printf_i+0x1ca>
 80093ba:	2f58      	cmp	r7, #88	; 0x58
 80093bc:	f000 80c0 	beq.w	8009540 <_printf_i+0x1a8>
 80093c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093c8:	e03a      	b.n	8009440 <_printf_i+0xa8>
 80093ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093ce:	2b15      	cmp	r3, #21
 80093d0:	d8f6      	bhi.n	80093c0 <_printf_i+0x28>
 80093d2:	a101      	add	r1, pc, #4	; (adr r1, 80093d8 <_printf_i+0x40>)
 80093d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093d8:	08009431 	.word	0x08009431
 80093dc:	08009445 	.word	0x08009445
 80093e0:	080093c1 	.word	0x080093c1
 80093e4:	080093c1 	.word	0x080093c1
 80093e8:	080093c1 	.word	0x080093c1
 80093ec:	080093c1 	.word	0x080093c1
 80093f0:	08009445 	.word	0x08009445
 80093f4:	080093c1 	.word	0x080093c1
 80093f8:	080093c1 	.word	0x080093c1
 80093fc:	080093c1 	.word	0x080093c1
 8009400:	080093c1 	.word	0x080093c1
 8009404:	08009549 	.word	0x08009549
 8009408:	08009471 	.word	0x08009471
 800940c:	08009503 	.word	0x08009503
 8009410:	080093c1 	.word	0x080093c1
 8009414:	080093c1 	.word	0x080093c1
 8009418:	0800956b 	.word	0x0800956b
 800941c:	080093c1 	.word	0x080093c1
 8009420:	08009471 	.word	0x08009471
 8009424:	080093c1 	.word	0x080093c1
 8009428:	080093c1 	.word	0x080093c1
 800942c:	0800950b 	.word	0x0800950b
 8009430:	682b      	ldr	r3, [r5, #0]
 8009432:	1d1a      	adds	r2, r3, #4
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	602a      	str	r2, [r5, #0]
 8009438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800943c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009440:	2301      	movs	r3, #1
 8009442:	e09f      	b.n	8009584 <_printf_i+0x1ec>
 8009444:	6820      	ldr	r0, [r4, #0]
 8009446:	682b      	ldr	r3, [r5, #0]
 8009448:	0607      	lsls	r7, r0, #24
 800944a:	f103 0104 	add.w	r1, r3, #4
 800944e:	6029      	str	r1, [r5, #0]
 8009450:	d501      	bpl.n	8009456 <_printf_i+0xbe>
 8009452:	681e      	ldr	r6, [r3, #0]
 8009454:	e003      	b.n	800945e <_printf_i+0xc6>
 8009456:	0646      	lsls	r6, r0, #25
 8009458:	d5fb      	bpl.n	8009452 <_printf_i+0xba>
 800945a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800945e:	2e00      	cmp	r6, #0
 8009460:	da03      	bge.n	800946a <_printf_i+0xd2>
 8009462:	232d      	movs	r3, #45	; 0x2d
 8009464:	4276      	negs	r6, r6
 8009466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800946a:	485a      	ldr	r0, [pc, #360]	; (80095d4 <_printf_i+0x23c>)
 800946c:	230a      	movs	r3, #10
 800946e:	e012      	b.n	8009496 <_printf_i+0xfe>
 8009470:	682b      	ldr	r3, [r5, #0]
 8009472:	6820      	ldr	r0, [r4, #0]
 8009474:	1d19      	adds	r1, r3, #4
 8009476:	6029      	str	r1, [r5, #0]
 8009478:	0605      	lsls	r5, r0, #24
 800947a:	d501      	bpl.n	8009480 <_printf_i+0xe8>
 800947c:	681e      	ldr	r6, [r3, #0]
 800947e:	e002      	b.n	8009486 <_printf_i+0xee>
 8009480:	0641      	lsls	r1, r0, #25
 8009482:	d5fb      	bpl.n	800947c <_printf_i+0xe4>
 8009484:	881e      	ldrh	r6, [r3, #0]
 8009486:	4853      	ldr	r0, [pc, #332]	; (80095d4 <_printf_i+0x23c>)
 8009488:	2f6f      	cmp	r7, #111	; 0x6f
 800948a:	bf0c      	ite	eq
 800948c:	2308      	moveq	r3, #8
 800948e:	230a      	movne	r3, #10
 8009490:	2100      	movs	r1, #0
 8009492:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009496:	6865      	ldr	r5, [r4, #4]
 8009498:	60a5      	str	r5, [r4, #8]
 800949a:	2d00      	cmp	r5, #0
 800949c:	bfa2      	ittt	ge
 800949e:	6821      	ldrge	r1, [r4, #0]
 80094a0:	f021 0104 	bicge.w	r1, r1, #4
 80094a4:	6021      	strge	r1, [r4, #0]
 80094a6:	b90e      	cbnz	r6, 80094ac <_printf_i+0x114>
 80094a8:	2d00      	cmp	r5, #0
 80094aa:	d04b      	beq.n	8009544 <_printf_i+0x1ac>
 80094ac:	4615      	mov	r5, r2
 80094ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80094b2:	fb03 6711 	mls	r7, r3, r1, r6
 80094b6:	5dc7      	ldrb	r7, [r0, r7]
 80094b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094bc:	4637      	mov	r7, r6
 80094be:	42bb      	cmp	r3, r7
 80094c0:	460e      	mov	r6, r1
 80094c2:	d9f4      	bls.n	80094ae <_printf_i+0x116>
 80094c4:	2b08      	cmp	r3, #8
 80094c6:	d10b      	bne.n	80094e0 <_printf_i+0x148>
 80094c8:	6823      	ldr	r3, [r4, #0]
 80094ca:	07de      	lsls	r6, r3, #31
 80094cc:	d508      	bpl.n	80094e0 <_printf_i+0x148>
 80094ce:	6923      	ldr	r3, [r4, #16]
 80094d0:	6861      	ldr	r1, [r4, #4]
 80094d2:	4299      	cmp	r1, r3
 80094d4:	bfde      	ittt	le
 80094d6:	2330      	movle	r3, #48	; 0x30
 80094d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094e0:	1b52      	subs	r2, r2, r5
 80094e2:	6122      	str	r2, [r4, #16]
 80094e4:	f8cd a000 	str.w	sl, [sp]
 80094e8:	464b      	mov	r3, r9
 80094ea:	aa03      	add	r2, sp, #12
 80094ec:	4621      	mov	r1, r4
 80094ee:	4640      	mov	r0, r8
 80094f0:	f7ff fee4 	bl	80092bc <_printf_common>
 80094f4:	3001      	adds	r0, #1
 80094f6:	d14a      	bne.n	800958e <_printf_i+0x1f6>
 80094f8:	f04f 30ff 	mov.w	r0, #4294967295
 80094fc:	b004      	add	sp, #16
 80094fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	f043 0320 	orr.w	r3, r3, #32
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	4833      	ldr	r0, [pc, #204]	; (80095d8 <_printf_i+0x240>)
 800950c:	2778      	movs	r7, #120	; 0x78
 800950e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	6829      	ldr	r1, [r5, #0]
 8009516:	061f      	lsls	r7, r3, #24
 8009518:	f851 6b04 	ldr.w	r6, [r1], #4
 800951c:	d402      	bmi.n	8009524 <_printf_i+0x18c>
 800951e:	065f      	lsls	r7, r3, #25
 8009520:	bf48      	it	mi
 8009522:	b2b6      	uxthmi	r6, r6
 8009524:	07df      	lsls	r7, r3, #31
 8009526:	bf48      	it	mi
 8009528:	f043 0320 	orrmi.w	r3, r3, #32
 800952c:	6029      	str	r1, [r5, #0]
 800952e:	bf48      	it	mi
 8009530:	6023      	strmi	r3, [r4, #0]
 8009532:	b91e      	cbnz	r6, 800953c <_printf_i+0x1a4>
 8009534:	6823      	ldr	r3, [r4, #0]
 8009536:	f023 0320 	bic.w	r3, r3, #32
 800953a:	6023      	str	r3, [r4, #0]
 800953c:	2310      	movs	r3, #16
 800953e:	e7a7      	b.n	8009490 <_printf_i+0xf8>
 8009540:	4824      	ldr	r0, [pc, #144]	; (80095d4 <_printf_i+0x23c>)
 8009542:	e7e4      	b.n	800950e <_printf_i+0x176>
 8009544:	4615      	mov	r5, r2
 8009546:	e7bd      	b.n	80094c4 <_printf_i+0x12c>
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	6826      	ldr	r6, [r4, #0]
 800954c:	6961      	ldr	r1, [r4, #20]
 800954e:	1d18      	adds	r0, r3, #4
 8009550:	6028      	str	r0, [r5, #0]
 8009552:	0635      	lsls	r5, r6, #24
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	d501      	bpl.n	800955c <_printf_i+0x1c4>
 8009558:	6019      	str	r1, [r3, #0]
 800955a:	e002      	b.n	8009562 <_printf_i+0x1ca>
 800955c:	0670      	lsls	r0, r6, #25
 800955e:	d5fb      	bpl.n	8009558 <_printf_i+0x1c0>
 8009560:	8019      	strh	r1, [r3, #0]
 8009562:	2300      	movs	r3, #0
 8009564:	6123      	str	r3, [r4, #16]
 8009566:	4615      	mov	r5, r2
 8009568:	e7bc      	b.n	80094e4 <_printf_i+0x14c>
 800956a:	682b      	ldr	r3, [r5, #0]
 800956c:	1d1a      	adds	r2, r3, #4
 800956e:	602a      	str	r2, [r5, #0]
 8009570:	681d      	ldr	r5, [r3, #0]
 8009572:	6862      	ldr	r2, [r4, #4]
 8009574:	2100      	movs	r1, #0
 8009576:	4628      	mov	r0, r5
 8009578:	f7f6 fe2a 	bl	80001d0 <memchr>
 800957c:	b108      	cbz	r0, 8009582 <_printf_i+0x1ea>
 800957e:	1b40      	subs	r0, r0, r5
 8009580:	6060      	str	r0, [r4, #4]
 8009582:	6863      	ldr	r3, [r4, #4]
 8009584:	6123      	str	r3, [r4, #16]
 8009586:	2300      	movs	r3, #0
 8009588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800958c:	e7aa      	b.n	80094e4 <_printf_i+0x14c>
 800958e:	6923      	ldr	r3, [r4, #16]
 8009590:	462a      	mov	r2, r5
 8009592:	4649      	mov	r1, r9
 8009594:	4640      	mov	r0, r8
 8009596:	47d0      	blx	sl
 8009598:	3001      	adds	r0, #1
 800959a:	d0ad      	beq.n	80094f8 <_printf_i+0x160>
 800959c:	6823      	ldr	r3, [r4, #0]
 800959e:	079b      	lsls	r3, r3, #30
 80095a0:	d413      	bmi.n	80095ca <_printf_i+0x232>
 80095a2:	68e0      	ldr	r0, [r4, #12]
 80095a4:	9b03      	ldr	r3, [sp, #12]
 80095a6:	4298      	cmp	r0, r3
 80095a8:	bfb8      	it	lt
 80095aa:	4618      	movlt	r0, r3
 80095ac:	e7a6      	b.n	80094fc <_printf_i+0x164>
 80095ae:	2301      	movs	r3, #1
 80095b0:	4632      	mov	r2, r6
 80095b2:	4649      	mov	r1, r9
 80095b4:	4640      	mov	r0, r8
 80095b6:	47d0      	blx	sl
 80095b8:	3001      	adds	r0, #1
 80095ba:	d09d      	beq.n	80094f8 <_printf_i+0x160>
 80095bc:	3501      	adds	r5, #1
 80095be:	68e3      	ldr	r3, [r4, #12]
 80095c0:	9903      	ldr	r1, [sp, #12]
 80095c2:	1a5b      	subs	r3, r3, r1
 80095c4:	42ab      	cmp	r3, r5
 80095c6:	dcf2      	bgt.n	80095ae <_printf_i+0x216>
 80095c8:	e7eb      	b.n	80095a2 <_printf_i+0x20a>
 80095ca:	2500      	movs	r5, #0
 80095cc:	f104 0619 	add.w	r6, r4, #25
 80095d0:	e7f5      	b.n	80095be <_printf_i+0x226>
 80095d2:	bf00      	nop
 80095d4:	0800e62a 	.word	0x0800e62a
 80095d8:	0800e63b 	.word	0x0800e63b

080095dc <std>:
 80095dc:	2300      	movs	r3, #0
 80095de:	b510      	push	{r4, lr}
 80095e0:	4604      	mov	r4, r0
 80095e2:	e9c0 3300 	strd	r3, r3, [r0]
 80095e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095ea:	6083      	str	r3, [r0, #8]
 80095ec:	8181      	strh	r1, [r0, #12]
 80095ee:	6643      	str	r3, [r0, #100]	; 0x64
 80095f0:	81c2      	strh	r2, [r0, #14]
 80095f2:	6183      	str	r3, [r0, #24]
 80095f4:	4619      	mov	r1, r3
 80095f6:	2208      	movs	r2, #8
 80095f8:	305c      	adds	r0, #92	; 0x5c
 80095fa:	f000 f930 	bl	800985e <memset>
 80095fe:	4b05      	ldr	r3, [pc, #20]	; (8009614 <std+0x38>)
 8009600:	6263      	str	r3, [r4, #36]	; 0x24
 8009602:	4b05      	ldr	r3, [pc, #20]	; (8009618 <std+0x3c>)
 8009604:	62a3      	str	r3, [r4, #40]	; 0x28
 8009606:	4b05      	ldr	r3, [pc, #20]	; (800961c <std+0x40>)
 8009608:	62e3      	str	r3, [r4, #44]	; 0x2c
 800960a:	4b05      	ldr	r3, [pc, #20]	; (8009620 <std+0x44>)
 800960c:	6224      	str	r4, [r4, #32]
 800960e:	6323      	str	r3, [r4, #48]	; 0x30
 8009610:	bd10      	pop	{r4, pc}
 8009612:	bf00      	nop
 8009614:	080097a5 	.word	0x080097a5
 8009618:	080097c7 	.word	0x080097c7
 800961c:	080097ff 	.word	0x080097ff
 8009620:	08009823 	.word	0x08009823

08009624 <stdio_exit_handler>:
 8009624:	4a02      	ldr	r2, [pc, #8]	; (8009630 <stdio_exit_handler+0xc>)
 8009626:	4903      	ldr	r1, [pc, #12]	; (8009634 <stdio_exit_handler+0x10>)
 8009628:	4803      	ldr	r0, [pc, #12]	; (8009638 <stdio_exit_handler+0x14>)
 800962a:	f000 b869 	b.w	8009700 <_fwalk_sglue>
 800962e:	bf00      	nop
 8009630:	20000040 	.word	0x20000040
 8009634:	0800b261 	.word	0x0800b261
 8009638:	2000004c 	.word	0x2000004c

0800963c <cleanup_stdio>:
 800963c:	6841      	ldr	r1, [r0, #4]
 800963e:	4b0c      	ldr	r3, [pc, #48]	; (8009670 <cleanup_stdio+0x34>)
 8009640:	4299      	cmp	r1, r3
 8009642:	b510      	push	{r4, lr}
 8009644:	4604      	mov	r4, r0
 8009646:	d001      	beq.n	800964c <cleanup_stdio+0x10>
 8009648:	f001 fe0a 	bl	800b260 <_fflush_r>
 800964c:	68a1      	ldr	r1, [r4, #8]
 800964e:	4b09      	ldr	r3, [pc, #36]	; (8009674 <cleanup_stdio+0x38>)
 8009650:	4299      	cmp	r1, r3
 8009652:	d002      	beq.n	800965a <cleanup_stdio+0x1e>
 8009654:	4620      	mov	r0, r4
 8009656:	f001 fe03 	bl	800b260 <_fflush_r>
 800965a:	68e1      	ldr	r1, [r4, #12]
 800965c:	4b06      	ldr	r3, [pc, #24]	; (8009678 <cleanup_stdio+0x3c>)
 800965e:	4299      	cmp	r1, r3
 8009660:	d004      	beq.n	800966c <cleanup_stdio+0x30>
 8009662:	4620      	mov	r0, r4
 8009664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009668:	f001 bdfa 	b.w	800b260 <_fflush_r>
 800966c:	bd10      	pop	{r4, pc}
 800966e:	bf00      	nop
 8009670:	2000086c 	.word	0x2000086c
 8009674:	200008d4 	.word	0x200008d4
 8009678:	2000093c 	.word	0x2000093c

0800967c <global_stdio_init.part.0>:
 800967c:	b510      	push	{r4, lr}
 800967e:	4b0b      	ldr	r3, [pc, #44]	; (80096ac <global_stdio_init.part.0+0x30>)
 8009680:	4c0b      	ldr	r4, [pc, #44]	; (80096b0 <global_stdio_init.part.0+0x34>)
 8009682:	4a0c      	ldr	r2, [pc, #48]	; (80096b4 <global_stdio_init.part.0+0x38>)
 8009684:	601a      	str	r2, [r3, #0]
 8009686:	4620      	mov	r0, r4
 8009688:	2200      	movs	r2, #0
 800968a:	2104      	movs	r1, #4
 800968c:	f7ff ffa6 	bl	80095dc <std>
 8009690:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009694:	2201      	movs	r2, #1
 8009696:	2109      	movs	r1, #9
 8009698:	f7ff ffa0 	bl	80095dc <std>
 800969c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80096a0:	2202      	movs	r2, #2
 80096a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096a6:	2112      	movs	r1, #18
 80096a8:	f7ff bf98 	b.w	80095dc <std>
 80096ac:	200009a4 	.word	0x200009a4
 80096b0:	2000086c 	.word	0x2000086c
 80096b4:	08009625 	.word	0x08009625

080096b8 <__sfp_lock_acquire>:
 80096b8:	4801      	ldr	r0, [pc, #4]	; (80096c0 <__sfp_lock_acquire+0x8>)
 80096ba:	f000 b9a1 	b.w	8009a00 <__retarget_lock_acquire_recursive>
 80096be:	bf00      	nop
 80096c0:	200009ad 	.word	0x200009ad

080096c4 <__sfp_lock_release>:
 80096c4:	4801      	ldr	r0, [pc, #4]	; (80096cc <__sfp_lock_release+0x8>)
 80096c6:	f000 b99c 	b.w	8009a02 <__retarget_lock_release_recursive>
 80096ca:	bf00      	nop
 80096cc:	200009ad 	.word	0x200009ad

080096d0 <__sinit>:
 80096d0:	b510      	push	{r4, lr}
 80096d2:	4604      	mov	r4, r0
 80096d4:	f7ff fff0 	bl	80096b8 <__sfp_lock_acquire>
 80096d8:	6a23      	ldr	r3, [r4, #32]
 80096da:	b11b      	cbz	r3, 80096e4 <__sinit+0x14>
 80096dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096e0:	f7ff bff0 	b.w	80096c4 <__sfp_lock_release>
 80096e4:	4b04      	ldr	r3, [pc, #16]	; (80096f8 <__sinit+0x28>)
 80096e6:	6223      	str	r3, [r4, #32]
 80096e8:	4b04      	ldr	r3, [pc, #16]	; (80096fc <__sinit+0x2c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1f5      	bne.n	80096dc <__sinit+0xc>
 80096f0:	f7ff ffc4 	bl	800967c <global_stdio_init.part.0>
 80096f4:	e7f2      	b.n	80096dc <__sinit+0xc>
 80096f6:	bf00      	nop
 80096f8:	0800963d 	.word	0x0800963d
 80096fc:	200009a4 	.word	0x200009a4

08009700 <_fwalk_sglue>:
 8009700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009704:	4607      	mov	r7, r0
 8009706:	4688      	mov	r8, r1
 8009708:	4614      	mov	r4, r2
 800970a:	2600      	movs	r6, #0
 800970c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009710:	f1b9 0901 	subs.w	r9, r9, #1
 8009714:	d505      	bpl.n	8009722 <_fwalk_sglue+0x22>
 8009716:	6824      	ldr	r4, [r4, #0]
 8009718:	2c00      	cmp	r4, #0
 800971a:	d1f7      	bne.n	800970c <_fwalk_sglue+0xc>
 800971c:	4630      	mov	r0, r6
 800971e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009722:	89ab      	ldrh	r3, [r5, #12]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d907      	bls.n	8009738 <_fwalk_sglue+0x38>
 8009728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800972c:	3301      	adds	r3, #1
 800972e:	d003      	beq.n	8009738 <_fwalk_sglue+0x38>
 8009730:	4629      	mov	r1, r5
 8009732:	4638      	mov	r0, r7
 8009734:	47c0      	blx	r8
 8009736:	4306      	orrs	r6, r0
 8009738:	3568      	adds	r5, #104	; 0x68
 800973a:	e7e9      	b.n	8009710 <_fwalk_sglue+0x10>

0800973c <sniprintf>:
 800973c:	b40c      	push	{r2, r3}
 800973e:	b530      	push	{r4, r5, lr}
 8009740:	4b17      	ldr	r3, [pc, #92]	; (80097a0 <sniprintf+0x64>)
 8009742:	1e0c      	subs	r4, r1, #0
 8009744:	681d      	ldr	r5, [r3, #0]
 8009746:	b09d      	sub	sp, #116	; 0x74
 8009748:	da08      	bge.n	800975c <sniprintf+0x20>
 800974a:	238b      	movs	r3, #139	; 0x8b
 800974c:	602b      	str	r3, [r5, #0]
 800974e:	f04f 30ff 	mov.w	r0, #4294967295
 8009752:	b01d      	add	sp, #116	; 0x74
 8009754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009758:	b002      	add	sp, #8
 800975a:	4770      	bx	lr
 800975c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009760:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009764:	bf14      	ite	ne
 8009766:	f104 33ff 	addne.w	r3, r4, #4294967295
 800976a:	4623      	moveq	r3, r4
 800976c:	9304      	str	r3, [sp, #16]
 800976e:	9307      	str	r3, [sp, #28]
 8009770:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009774:	9002      	str	r0, [sp, #8]
 8009776:	9006      	str	r0, [sp, #24]
 8009778:	f8ad 3016 	strh.w	r3, [sp, #22]
 800977c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800977e:	ab21      	add	r3, sp, #132	; 0x84
 8009780:	a902      	add	r1, sp, #8
 8009782:	4628      	mov	r0, r5
 8009784:	9301      	str	r3, [sp, #4]
 8009786:	f001 fbe7 	bl	800af58 <_svfiprintf_r>
 800978a:	1c43      	adds	r3, r0, #1
 800978c:	bfbc      	itt	lt
 800978e:	238b      	movlt	r3, #139	; 0x8b
 8009790:	602b      	strlt	r3, [r5, #0]
 8009792:	2c00      	cmp	r4, #0
 8009794:	d0dd      	beq.n	8009752 <sniprintf+0x16>
 8009796:	9b02      	ldr	r3, [sp, #8]
 8009798:	2200      	movs	r2, #0
 800979a:	701a      	strb	r2, [r3, #0]
 800979c:	e7d9      	b.n	8009752 <sniprintf+0x16>
 800979e:	bf00      	nop
 80097a0:	20000098 	.word	0x20000098

080097a4 <__sread>:
 80097a4:	b510      	push	{r4, lr}
 80097a6:	460c      	mov	r4, r1
 80097a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ac:	f000 f8b6 	bl	800991c <_read_r>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	bfab      	itete	ge
 80097b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097b6:	89a3      	ldrhlt	r3, [r4, #12]
 80097b8:	181b      	addge	r3, r3, r0
 80097ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097be:	bfac      	ite	ge
 80097c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80097c2:	81a3      	strhlt	r3, [r4, #12]
 80097c4:	bd10      	pop	{r4, pc}

080097c6 <__swrite>:
 80097c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ca:	461f      	mov	r7, r3
 80097cc:	898b      	ldrh	r3, [r1, #12]
 80097ce:	05db      	lsls	r3, r3, #23
 80097d0:	4605      	mov	r5, r0
 80097d2:	460c      	mov	r4, r1
 80097d4:	4616      	mov	r6, r2
 80097d6:	d505      	bpl.n	80097e4 <__swrite+0x1e>
 80097d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097dc:	2302      	movs	r3, #2
 80097de:	2200      	movs	r2, #0
 80097e0:	f000 f88a 	bl	80098f8 <_lseek_r>
 80097e4:	89a3      	ldrh	r3, [r4, #12]
 80097e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097ee:	81a3      	strh	r3, [r4, #12]
 80097f0:	4632      	mov	r2, r6
 80097f2:	463b      	mov	r3, r7
 80097f4:	4628      	mov	r0, r5
 80097f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097fa:	f000 b8c5 	b.w	8009988 <_write_r>

080097fe <__sseek>:
 80097fe:	b510      	push	{r4, lr}
 8009800:	460c      	mov	r4, r1
 8009802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009806:	f000 f877 	bl	80098f8 <_lseek_r>
 800980a:	1c43      	adds	r3, r0, #1
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	bf15      	itete	ne
 8009810:	6560      	strne	r0, [r4, #84]	; 0x54
 8009812:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009816:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800981a:	81a3      	strheq	r3, [r4, #12]
 800981c:	bf18      	it	ne
 800981e:	81a3      	strhne	r3, [r4, #12]
 8009820:	bd10      	pop	{r4, pc}

08009822 <__sclose>:
 8009822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009826:	f000 b857 	b.w	80098d8 <_close_r>

0800982a <memmove>:
 800982a:	4288      	cmp	r0, r1
 800982c:	b510      	push	{r4, lr}
 800982e:	eb01 0402 	add.w	r4, r1, r2
 8009832:	d902      	bls.n	800983a <memmove+0x10>
 8009834:	4284      	cmp	r4, r0
 8009836:	4623      	mov	r3, r4
 8009838:	d807      	bhi.n	800984a <memmove+0x20>
 800983a:	1e43      	subs	r3, r0, #1
 800983c:	42a1      	cmp	r1, r4
 800983e:	d008      	beq.n	8009852 <memmove+0x28>
 8009840:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009844:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009848:	e7f8      	b.n	800983c <memmove+0x12>
 800984a:	4402      	add	r2, r0
 800984c:	4601      	mov	r1, r0
 800984e:	428a      	cmp	r2, r1
 8009850:	d100      	bne.n	8009854 <memmove+0x2a>
 8009852:	bd10      	pop	{r4, pc}
 8009854:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009858:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800985c:	e7f7      	b.n	800984e <memmove+0x24>

0800985e <memset>:
 800985e:	4402      	add	r2, r0
 8009860:	4603      	mov	r3, r0
 8009862:	4293      	cmp	r3, r2
 8009864:	d100      	bne.n	8009868 <memset+0xa>
 8009866:	4770      	bx	lr
 8009868:	f803 1b01 	strb.w	r1, [r3], #1
 800986c:	e7f9      	b.n	8009862 <memset+0x4>

0800986e <_raise_r>:
 800986e:	291f      	cmp	r1, #31
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	4604      	mov	r4, r0
 8009874:	460d      	mov	r5, r1
 8009876:	d904      	bls.n	8009882 <_raise_r+0x14>
 8009878:	2316      	movs	r3, #22
 800987a:	6003      	str	r3, [r0, #0]
 800987c:	f04f 30ff 	mov.w	r0, #4294967295
 8009880:	bd38      	pop	{r3, r4, r5, pc}
 8009882:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009884:	b112      	cbz	r2, 800988c <_raise_r+0x1e>
 8009886:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800988a:	b94b      	cbnz	r3, 80098a0 <_raise_r+0x32>
 800988c:	4620      	mov	r0, r4
 800988e:	f000 f869 	bl	8009964 <_getpid_r>
 8009892:	462a      	mov	r2, r5
 8009894:	4601      	mov	r1, r0
 8009896:	4620      	mov	r0, r4
 8009898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800989c:	f000 b850 	b.w	8009940 <_kill_r>
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d00a      	beq.n	80098ba <_raise_r+0x4c>
 80098a4:	1c59      	adds	r1, r3, #1
 80098a6:	d103      	bne.n	80098b0 <_raise_r+0x42>
 80098a8:	2316      	movs	r3, #22
 80098aa:	6003      	str	r3, [r0, #0]
 80098ac:	2001      	movs	r0, #1
 80098ae:	e7e7      	b.n	8009880 <_raise_r+0x12>
 80098b0:	2400      	movs	r4, #0
 80098b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098b6:	4628      	mov	r0, r5
 80098b8:	4798      	blx	r3
 80098ba:	2000      	movs	r0, #0
 80098bc:	e7e0      	b.n	8009880 <_raise_r+0x12>
	...

080098c0 <raise>:
 80098c0:	4b02      	ldr	r3, [pc, #8]	; (80098cc <raise+0xc>)
 80098c2:	4601      	mov	r1, r0
 80098c4:	6818      	ldr	r0, [r3, #0]
 80098c6:	f7ff bfd2 	b.w	800986e <_raise_r>
 80098ca:	bf00      	nop
 80098cc:	20000098 	.word	0x20000098

080098d0 <_localeconv_r>:
 80098d0:	4800      	ldr	r0, [pc, #0]	; (80098d4 <_localeconv_r+0x4>)
 80098d2:	4770      	bx	lr
 80098d4:	2000018c 	.word	0x2000018c

080098d8 <_close_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	4d06      	ldr	r5, [pc, #24]	; (80098f4 <_close_r+0x1c>)
 80098dc:	2300      	movs	r3, #0
 80098de:	4604      	mov	r4, r0
 80098e0:	4608      	mov	r0, r1
 80098e2:	602b      	str	r3, [r5, #0]
 80098e4:	f7f8 fbf5 	bl	80020d2 <_close>
 80098e8:	1c43      	adds	r3, r0, #1
 80098ea:	d102      	bne.n	80098f2 <_close_r+0x1a>
 80098ec:	682b      	ldr	r3, [r5, #0]
 80098ee:	b103      	cbz	r3, 80098f2 <_close_r+0x1a>
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	bd38      	pop	{r3, r4, r5, pc}
 80098f4:	200009a8 	.word	0x200009a8

080098f8 <_lseek_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d07      	ldr	r5, [pc, #28]	; (8009918 <_lseek_r+0x20>)
 80098fc:	4604      	mov	r4, r0
 80098fe:	4608      	mov	r0, r1
 8009900:	4611      	mov	r1, r2
 8009902:	2200      	movs	r2, #0
 8009904:	602a      	str	r2, [r5, #0]
 8009906:	461a      	mov	r2, r3
 8009908:	f7f8 fc0a 	bl	8002120 <_lseek>
 800990c:	1c43      	adds	r3, r0, #1
 800990e:	d102      	bne.n	8009916 <_lseek_r+0x1e>
 8009910:	682b      	ldr	r3, [r5, #0]
 8009912:	b103      	cbz	r3, 8009916 <_lseek_r+0x1e>
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	bd38      	pop	{r3, r4, r5, pc}
 8009918:	200009a8 	.word	0x200009a8

0800991c <_read_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4d07      	ldr	r5, [pc, #28]	; (800993c <_read_r+0x20>)
 8009920:	4604      	mov	r4, r0
 8009922:	4608      	mov	r0, r1
 8009924:	4611      	mov	r1, r2
 8009926:	2200      	movs	r2, #0
 8009928:	602a      	str	r2, [r5, #0]
 800992a:	461a      	mov	r2, r3
 800992c:	f7f8 fb98 	bl	8002060 <_read>
 8009930:	1c43      	adds	r3, r0, #1
 8009932:	d102      	bne.n	800993a <_read_r+0x1e>
 8009934:	682b      	ldr	r3, [r5, #0]
 8009936:	b103      	cbz	r3, 800993a <_read_r+0x1e>
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	200009a8 	.word	0x200009a8

08009940 <_kill_r>:
 8009940:	b538      	push	{r3, r4, r5, lr}
 8009942:	4d07      	ldr	r5, [pc, #28]	; (8009960 <_kill_r+0x20>)
 8009944:	2300      	movs	r3, #0
 8009946:	4604      	mov	r4, r0
 8009948:	4608      	mov	r0, r1
 800994a:	4611      	mov	r1, r2
 800994c:	602b      	str	r3, [r5, #0]
 800994e:	f7f8 fb6d 	bl	800202c <_kill>
 8009952:	1c43      	adds	r3, r0, #1
 8009954:	d102      	bne.n	800995c <_kill_r+0x1c>
 8009956:	682b      	ldr	r3, [r5, #0]
 8009958:	b103      	cbz	r3, 800995c <_kill_r+0x1c>
 800995a:	6023      	str	r3, [r4, #0]
 800995c:	bd38      	pop	{r3, r4, r5, pc}
 800995e:	bf00      	nop
 8009960:	200009a8 	.word	0x200009a8

08009964 <_getpid_r>:
 8009964:	f7f8 bb5a 	b.w	800201c <_getpid>

08009968 <_sbrk_r>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	4d06      	ldr	r5, [pc, #24]	; (8009984 <_sbrk_r+0x1c>)
 800996c:	2300      	movs	r3, #0
 800996e:	4604      	mov	r4, r0
 8009970:	4608      	mov	r0, r1
 8009972:	602b      	str	r3, [r5, #0]
 8009974:	f7f8 fbe2 	bl	800213c <_sbrk>
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	d102      	bne.n	8009982 <_sbrk_r+0x1a>
 800997c:	682b      	ldr	r3, [r5, #0]
 800997e:	b103      	cbz	r3, 8009982 <_sbrk_r+0x1a>
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	200009a8 	.word	0x200009a8

08009988 <_write_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	4d07      	ldr	r5, [pc, #28]	; (80099a8 <_write_r+0x20>)
 800998c:	4604      	mov	r4, r0
 800998e:	4608      	mov	r0, r1
 8009990:	4611      	mov	r1, r2
 8009992:	2200      	movs	r2, #0
 8009994:	602a      	str	r2, [r5, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	f7f8 fb7f 	bl	800209a <_write>
 800999c:	1c43      	adds	r3, r0, #1
 800999e:	d102      	bne.n	80099a6 <_write_r+0x1e>
 80099a0:	682b      	ldr	r3, [r5, #0]
 80099a2:	b103      	cbz	r3, 80099a6 <_write_r+0x1e>
 80099a4:	6023      	str	r3, [r4, #0]
 80099a6:	bd38      	pop	{r3, r4, r5, pc}
 80099a8:	200009a8 	.word	0x200009a8

080099ac <__errno>:
 80099ac:	4b01      	ldr	r3, [pc, #4]	; (80099b4 <__errno+0x8>)
 80099ae:	6818      	ldr	r0, [r3, #0]
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	20000098 	.word	0x20000098

080099b8 <__libc_init_array>:
 80099b8:	b570      	push	{r4, r5, r6, lr}
 80099ba:	4d0d      	ldr	r5, [pc, #52]	; (80099f0 <__libc_init_array+0x38>)
 80099bc:	4c0d      	ldr	r4, [pc, #52]	; (80099f4 <__libc_init_array+0x3c>)
 80099be:	1b64      	subs	r4, r4, r5
 80099c0:	10a4      	asrs	r4, r4, #2
 80099c2:	2600      	movs	r6, #0
 80099c4:	42a6      	cmp	r6, r4
 80099c6:	d109      	bne.n	80099dc <__libc_init_array+0x24>
 80099c8:	4d0b      	ldr	r5, [pc, #44]	; (80099f8 <__libc_init_array+0x40>)
 80099ca:	4c0c      	ldr	r4, [pc, #48]	; (80099fc <__libc_init_array+0x44>)
 80099cc:	f001 ff6a 	bl	800b8a4 <_init>
 80099d0:	1b64      	subs	r4, r4, r5
 80099d2:	10a4      	asrs	r4, r4, #2
 80099d4:	2600      	movs	r6, #0
 80099d6:	42a6      	cmp	r6, r4
 80099d8:	d105      	bne.n	80099e6 <__libc_init_array+0x2e>
 80099da:	bd70      	pop	{r4, r5, r6, pc}
 80099dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80099e0:	4798      	blx	r3
 80099e2:	3601      	adds	r6, #1
 80099e4:	e7ee      	b.n	80099c4 <__libc_init_array+0xc>
 80099e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ea:	4798      	blx	r3
 80099ec:	3601      	adds	r6, #1
 80099ee:	e7f2      	b.n	80099d6 <__libc_init_array+0x1e>
 80099f0:	0800e994 	.word	0x0800e994
 80099f4:	0800e994 	.word	0x0800e994
 80099f8:	0800e994 	.word	0x0800e994
 80099fc:	0800e998 	.word	0x0800e998

08009a00 <__retarget_lock_acquire_recursive>:
 8009a00:	4770      	bx	lr

08009a02 <__retarget_lock_release_recursive>:
 8009a02:	4770      	bx	lr

08009a04 <memcpy>:
 8009a04:	440a      	add	r2, r1
 8009a06:	4291      	cmp	r1, r2
 8009a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a0c:	d100      	bne.n	8009a10 <memcpy+0xc>
 8009a0e:	4770      	bx	lr
 8009a10:	b510      	push	{r4, lr}
 8009a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a1a:	4291      	cmp	r1, r2
 8009a1c:	d1f9      	bne.n	8009a12 <memcpy+0xe>
 8009a1e:	bd10      	pop	{r4, pc}

08009a20 <quorem>:
 8009a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	6903      	ldr	r3, [r0, #16]
 8009a26:	690c      	ldr	r4, [r1, #16]
 8009a28:	42a3      	cmp	r3, r4
 8009a2a:	4607      	mov	r7, r0
 8009a2c:	db7e      	blt.n	8009b2c <quorem+0x10c>
 8009a2e:	3c01      	subs	r4, #1
 8009a30:	f101 0814 	add.w	r8, r1, #20
 8009a34:	f100 0514 	add.w	r5, r0, #20
 8009a38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a3c:	9301      	str	r3, [sp, #4]
 8009a3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a46:	3301      	adds	r3, #1
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009a4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a52:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a56:	d331      	bcc.n	8009abc <quorem+0x9c>
 8009a58:	f04f 0e00 	mov.w	lr, #0
 8009a5c:	4640      	mov	r0, r8
 8009a5e:	46ac      	mov	ip, r5
 8009a60:	46f2      	mov	sl, lr
 8009a62:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a66:	b293      	uxth	r3, r2
 8009a68:	fb06 e303 	mla	r3, r6, r3, lr
 8009a6c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a70:	0c1a      	lsrs	r2, r3, #16
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	ebaa 0303 	sub.w	r3, sl, r3
 8009a78:	f8dc a000 	ldr.w	sl, [ip]
 8009a7c:	fa13 f38a 	uxtah	r3, r3, sl
 8009a80:	fb06 220e 	mla	r2, r6, lr, r2
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	9b00      	ldr	r3, [sp, #0]
 8009a88:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a8c:	b292      	uxth	r2, r2
 8009a8e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009a92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a96:	f8bd 3000 	ldrh.w	r3, [sp]
 8009a9a:	4581      	cmp	r9, r0
 8009a9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009aa0:	f84c 3b04 	str.w	r3, [ip], #4
 8009aa4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009aa8:	d2db      	bcs.n	8009a62 <quorem+0x42>
 8009aaa:	f855 300b 	ldr.w	r3, [r5, fp]
 8009aae:	b92b      	cbnz	r3, 8009abc <quorem+0x9c>
 8009ab0:	9b01      	ldr	r3, [sp, #4]
 8009ab2:	3b04      	subs	r3, #4
 8009ab4:	429d      	cmp	r5, r3
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	d32c      	bcc.n	8009b14 <quorem+0xf4>
 8009aba:	613c      	str	r4, [r7, #16]
 8009abc:	4638      	mov	r0, r7
 8009abe:	f001 f8f1 	bl	800aca4 <__mcmp>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	db22      	blt.n	8009b0c <quorem+0xec>
 8009ac6:	3601      	adds	r6, #1
 8009ac8:	4629      	mov	r1, r5
 8009aca:	2000      	movs	r0, #0
 8009acc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ad0:	f8d1 c000 	ldr.w	ip, [r1]
 8009ad4:	b293      	uxth	r3, r2
 8009ad6:	1ac3      	subs	r3, r0, r3
 8009ad8:	0c12      	lsrs	r2, r2, #16
 8009ada:	fa13 f38c 	uxtah	r3, r3, ip
 8009ade:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009ae2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009aec:	45c1      	cmp	r9, r8
 8009aee:	f841 3b04 	str.w	r3, [r1], #4
 8009af2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009af6:	d2e9      	bcs.n	8009acc <quorem+0xac>
 8009af8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009afc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b00:	b922      	cbnz	r2, 8009b0c <quorem+0xec>
 8009b02:	3b04      	subs	r3, #4
 8009b04:	429d      	cmp	r5, r3
 8009b06:	461a      	mov	r2, r3
 8009b08:	d30a      	bcc.n	8009b20 <quorem+0x100>
 8009b0a:	613c      	str	r4, [r7, #16]
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	b003      	add	sp, #12
 8009b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b14:	6812      	ldr	r2, [r2, #0]
 8009b16:	3b04      	subs	r3, #4
 8009b18:	2a00      	cmp	r2, #0
 8009b1a:	d1ce      	bne.n	8009aba <quorem+0x9a>
 8009b1c:	3c01      	subs	r4, #1
 8009b1e:	e7c9      	b.n	8009ab4 <quorem+0x94>
 8009b20:	6812      	ldr	r2, [r2, #0]
 8009b22:	3b04      	subs	r3, #4
 8009b24:	2a00      	cmp	r2, #0
 8009b26:	d1f0      	bne.n	8009b0a <quorem+0xea>
 8009b28:	3c01      	subs	r4, #1
 8009b2a:	e7eb      	b.n	8009b04 <quorem+0xe4>
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	e7ee      	b.n	8009b0e <quorem+0xee>

08009b30 <_dtoa_r>:
 8009b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b34:	ed2d 8b04 	vpush	{d8-d9}
 8009b38:	69c5      	ldr	r5, [r0, #28]
 8009b3a:	b093      	sub	sp, #76	; 0x4c
 8009b3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009b40:	ec57 6b10 	vmov	r6, r7, d0
 8009b44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b48:	9107      	str	r1, [sp, #28]
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	920a      	str	r2, [sp, #40]	; 0x28
 8009b4e:	930d      	str	r3, [sp, #52]	; 0x34
 8009b50:	b975      	cbnz	r5, 8009b70 <_dtoa_r+0x40>
 8009b52:	2010      	movs	r0, #16
 8009b54:	f7ff f828 	bl	8008ba8 <malloc>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	61e0      	str	r0, [r4, #28]
 8009b5c:	b920      	cbnz	r0, 8009b68 <_dtoa_r+0x38>
 8009b5e:	4bae      	ldr	r3, [pc, #696]	; (8009e18 <_dtoa_r+0x2e8>)
 8009b60:	21ef      	movs	r1, #239	; 0xef
 8009b62:	48ae      	ldr	r0, [pc, #696]	; (8009e1c <_dtoa_r+0x2ec>)
 8009b64:	f001 fba4 	bl	800b2b0 <__assert_func>
 8009b68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b6c:	6005      	str	r5, [r0, #0]
 8009b6e:	60c5      	str	r5, [r0, #12]
 8009b70:	69e3      	ldr	r3, [r4, #28]
 8009b72:	6819      	ldr	r1, [r3, #0]
 8009b74:	b151      	cbz	r1, 8009b8c <_dtoa_r+0x5c>
 8009b76:	685a      	ldr	r2, [r3, #4]
 8009b78:	604a      	str	r2, [r1, #4]
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	4093      	lsls	r3, r2
 8009b7e:	608b      	str	r3, [r1, #8]
 8009b80:	4620      	mov	r0, r4
 8009b82:	f000 fe53 	bl	800a82c <_Bfree>
 8009b86:	69e3      	ldr	r3, [r4, #28]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	1e3b      	subs	r3, r7, #0
 8009b8e:	bfbb      	ittet	lt
 8009b90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b94:	9303      	strlt	r3, [sp, #12]
 8009b96:	2300      	movge	r3, #0
 8009b98:	2201      	movlt	r2, #1
 8009b9a:	bfac      	ite	ge
 8009b9c:	f8c8 3000 	strge.w	r3, [r8]
 8009ba0:	f8c8 2000 	strlt.w	r2, [r8]
 8009ba4:	4b9e      	ldr	r3, [pc, #632]	; (8009e20 <_dtoa_r+0x2f0>)
 8009ba6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009baa:	ea33 0308 	bics.w	r3, r3, r8
 8009bae:	d11b      	bne.n	8009be8 <_dtoa_r+0xb8>
 8009bb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8009bb6:	6013      	str	r3, [r2, #0]
 8009bb8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009bbc:	4333      	orrs	r3, r6
 8009bbe:	f000 8593 	beq.w	800a6e8 <_dtoa_r+0xbb8>
 8009bc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bc4:	b963      	cbnz	r3, 8009be0 <_dtoa_r+0xb0>
 8009bc6:	4b97      	ldr	r3, [pc, #604]	; (8009e24 <_dtoa_r+0x2f4>)
 8009bc8:	e027      	b.n	8009c1a <_dtoa_r+0xea>
 8009bca:	4b97      	ldr	r3, [pc, #604]	; (8009e28 <_dtoa_r+0x2f8>)
 8009bcc:	9300      	str	r3, [sp, #0]
 8009bce:	3308      	adds	r3, #8
 8009bd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009bd2:	6013      	str	r3, [r2, #0]
 8009bd4:	9800      	ldr	r0, [sp, #0]
 8009bd6:	b013      	add	sp, #76	; 0x4c
 8009bd8:	ecbd 8b04 	vpop	{d8-d9}
 8009bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be0:	4b90      	ldr	r3, [pc, #576]	; (8009e24 <_dtoa_r+0x2f4>)
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	3303      	adds	r3, #3
 8009be6:	e7f3      	b.n	8009bd0 <_dtoa_r+0xa0>
 8009be8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009bec:	2200      	movs	r2, #0
 8009bee:	ec51 0b17 	vmov	r0, r1, d7
 8009bf2:	eeb0 8a47 	vmov.f32	s16, s14
 8009bf6:	eef0 8a67 	vmov.f32	s17, s15
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	f7f6 ff64 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c00:	4681      	mov	r9, r0
 8009c02:	b160      	cbz	r0, 8009c1e <_dtoa_r+0xee>
 8009c04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c06:	2301      	movs	r3, #1
 8009c08:	6013      	str	r3, [r2, #0]
 8009c0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 8568 	beq.w	800a6e2 <_dtoa_r+0xbb2>
 8009c12:	4b86      	ldr	r3, [pc, #536]	; (8009e2c <_dtoa_r+0x2fc>)
 8009c14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c16:	6013      	str	r3, [r2, #0]
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	e7da      	b.n	8009bd4 <_dtoa_r+0xa4>
 8009c1e:	aa10      	add	r2, sp, #64	; 0x40
 8009c20:	a911      	add	r1, sp, #68	; 0x44
 8009c22:	4620      	mov	r0, r4
 8009c24:	eeb0 0a48 	vmov.f32	s0, s16
 8009c28:	eef0 0a68 	vmov.f32	s1, s17
 8009c2c:	f001 f8e0 	bl	800adf0 <__d2b>
 8009c30:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009c34:	4682      	mov	sl, r0
 8009c36:	2d00      	cmp	r5, #0
 8009c38:	d07f      	beq.n	8009d3a <_dtoa_r+0x20a>
 8009c3a:	ee18 3a90 	vmov	r3, s17
 8009c3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c42:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009c46:	ec51 0b18 	vmov	r0, r1, d8
 8009c4a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009c4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c52:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009c56:	4619      	mov	r1, r3
 8009c58:	2200      	movs	r2, #0
 8009c5a:	4b75      	ldr	r3, [pc, #468]	; (8009e30 <_dtoa_r+0x300>)
 8009c5c:	f7f6 fb14 	bl	8000288 <__aeabi_dsub>
 8009c60:	a367      	add	r3, pc, #412	; (adr r3, 8009e00 <_dtoa_r+0x2d0>)
 8009c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c66:	f7f6 fcc7 	bl	80005f8 <__aeabi_dmul>
 8009c6a:	a367      	add	r3, pc, #412	; (adr r3, 8009e08 <_dtoa_r+0x2d8>)
 8009c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c70:	f7f6 fb0c 	bl	800028c <__adddf3>
 8009c74:	4606      	mov	r6, r0
 8009c76:	4628      	mov	r0, r5
 8009c78:	460f      	mov	r7, r1
 8009c7a:	f7f6 fc53 	bl	8000524 <__aeabi_i2d>
 8009c7e:	a364      	add	r3, pc, #400	; (adr r3, 8009e10 <_dtoa_r+0x2e0>)
 8009c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c84:	f7f6 fcb8 	bl	80005f8 <__aeabi_dmul>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	4639      	mov	r1, r7
 8009c90:	f7f6 fafc 	bl	800028c <__adddf3>
 8009c94:	4606      	mov	r6, r0
 8009c96:	460f      	mov	r7, r1
 8009c98:	f7f6 ff5e 	bl	8000b58 <__aeabi_d2iz>
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	4683      	mov	fp, r0
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	4639      	mov	r1, r7
 8009ca6:	f7f6 ff19 	bl	8000adc <__aeabi_dcmplt>
 8009caa:	b148      	cbz	r0, 8009cc0 <_dtoa_r+0x190>
 8009cac:	4658      	mov	r0, fp
 8009cae:	f7f6 fc39 	bl	8000524 <__aeabi_i2d>
 8009cb2:	4632      	mov	r2, r6
 8009cb4:	463b      	mov	r3, r7
 8009cb6:	f7f6 ff07 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cba:	b908      	cbnz	r0, 8009cc0 <_dtoa_r+0x190>
 8009cbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009cc0:	f1bb 0f16 	cmp.w	fp, #22
 8009cc4:	d857      	bhi.n	8009d76 <_dtoa_r+0x246>
 8009cc6:	4b5b      	ldr	r3, [pc, #364]	; (8009e34 <_dtoa_r+0x304>)
 8009cc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	ec51 0b18 	vmov	r0, r1, d8
 8009cd4:	f7f6 ff02 	bl	8000adc <__aeabi_dcmplt>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d04e      	beq.n	8009d7a <_dtoa_r+0x24a>
 8009cdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	930c      	str	r3, [sp, #48]	; 0x30
 8009ce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ce6:	1b5b      	subs	r3, r3, r5
 8009ce8:	1e5a      	subs	r2, r3, #1
 8009cea:	bf45      	ittet	mi
 8009cec:	f1c3 0301 	rsbmi	r3, r3, #1
 8009cf0:	9305      	strmi	r3, [sp, #20]
 8009cf2:	2300      	movpl	r3, #0
 8009cf4:	2300      	movmi	r3, #0
 8009cf6:	9206      	str	r2, [sp, #24]
 8009cf8:	bf54      	ite	pl
 8009cfa:	9305      	strpl	r3, [sp, #20]
 8009cfc:	9306      	strmi	r3, [sp, #24]
 8009cfe:	f1bb 0f00 	cmp.w	fp, #0
 8009d02:	db3c      	blt.n	8009d7e <_dtoa_r+0x24e>
 8009d04:	9b06      	ldr	r3, [sp, #24]
 8009d06:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009d0a:	445b      	add	r3, fp
 8009d0c:	9306      	str	r3, [sp, #24]
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9308      	str	r3, [sp, #32]
 8009d12:	9b07      	ldr	r3, [sp, #28]
 8009d14:	2b09      	cmp	r3, #9
 8009d16:	d868      	bhi.n	8009dea <_dtoa_r+0x2ba>
 8009d18:	2b05      	cmp	r3, #5
 8009d1a:	bfc4      	itt	gt
 8009d1c:	3b04      	subgt	r3, #4
 8009d1e:	9307      	strgt	r3, [sp, #28]
 8009d20:	9b07      	ldr	r3, [sp, #28]
 8009d22:	f1a3 0302 	sub.w	r3, r3, #2
 8009d26:	bfcc      	ite	gt
 8009d28:	2500      	movgt	r5, #0
 8009d2a:	2501      	movle	r5, #1
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	f200 8085 	bhi.w	8009e3c <_dtoa_r+0x30c>
 8009d32:	e8df f003 	tbb	[pc, r3]
 8009d36:	3b2e      	.short	0x3b2e
 8009d38:	5839      	.short	0x5839
 8009d3a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009d3e:	441d      	add	r5, r3
 8009d40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009d44:	2b20      	cmp	r3, #32
 8009d46:	bfc1      	itttt	gt
 8009d48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009d4c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009d50:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009d54:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009d58:	bfd6      	itet	le
 8009d5a:	f1c3 0320 	rsble	r3, r3, #32
 8009d5e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009d62:	fa06 f003 	lslle.w	r0, r6, r3
 8009d66:	f7f6 fbcd 	bl	8000504 <__aeabi_ui2d>
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009d70:	3d01      	subs	r5, #1
 8009d72:	920e      	str	r2, [sp, #56]	; 0x38
 8009d74:	e76f      	b.n	8009c56 <_dtoa_r+0x126>
 8009d76:	2301      	movs	r3, #1
 8009d78:	e7b3      	b.n	8009ce2 <_dtoa_r+0x1b2>
 8009d7a:	900c      	str	r0, [sp, #48]	; 0x30
 8009d7c:	e7b2      	b.n	8009ce4 <_dtoa_r+0x1b4>
 8009d7e:	9b05      	ldr	r3, [sp, #20]
 8009d80:	eba3 030b 	sub.w	r3, r3, fp
 8009d84:	9305      	str	r3, [sp, #20]
 8009d86:	f1cb 0300 	rsb	r3, fp, #0
 8009d8a:	9308      	str	r3, [sp, #32]
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d90:	e7bf      	b.n	8009d12 <_dtoa_r+0x1e2>
 8009d92:	2300      	movs	r3, #0
 8009d94:	9309      	str	r3, [sp, #36]	; 0x24
 8009d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	dc52      	bgt.n	8009e42 <_dtoa_r+0x312>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	9301      	str	r3, [sp, #4]
 8009da0:	9304      	str	r3, [sp, #16]
 8009da2:	461a      	mov	r2, r3
 8009da4:	920a      	str	r2, [sp, #40]	; 0x28
 8009da6:	e00b      	b.n	8009dc0 <_dtoa_r+0x290>
 8009da8:	2301      	movs	r3, #1
 8009daa:	e7f3      	b.n	8009d94 <_dtoa_r+0x264>
 8009dac:	2300      	movs	r3, #0
 8009dae:	9309      	str	r3, [sp, #36]	; 0x24
 8009db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009db2:	445b      	add	r3, fp
 8009db4:	9301      	str	r3, [sp, #4]
 8009db6:	3301      	adds	r3, #1
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	9304      	str	r3, [sp, #16]
 8009dbc:	bfb8      	it	lt
 8009dbe:	2301      	movlt	r3, #1
 8009dc0:	69e0      	ldr	r0, [r4, #28]
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	2204      	movs	r2, #4
 8009dc6:	f102 0614 	add.w	r6, r2, #20
 8009dca:	429e      	cmp	r6, r3
 8009dcc:	d93d      	bls.n	8009e4a <_dtoa_r+0x31a>
 8009dce:	6041      	str	r1, [r0, #4]
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f000 fceb 	bl	800a7ac <_Balloc>
 8009dd6:	9000      	str	r0, [sp, #0]
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d139      	bne.n	8009e50 <_dtoa_r+0x320>
 8009ddc:	4b16      	ldr	r3, [pc, #88]	; (8009e38 <_dtoa_r+0x308>)
 8009dde:	4602      	mov	r2, r0
 8009de0:	f240 11af 	movw	r1, #431	; 0x1af
 8009de4:	e6bd      	b.n	8009b62 <_dtoa_r+0x32>
 8009de6:	2301      	movs	r3, #1
 8009de8:	e7e1      	b.n	8009dae <_dtoa_r+0x27e>
 8009dea:	2501      	movs	r5, #1
 8009dec:	2300      	movs	r3, #0
 8009dee:	9307      	str	r3, [sp, #28]
 8009df0:	9509      	str	r5, [sp, #36]	; 0x24
 8009df2:	f04f 33ff 	mov.w	r3, #4294967295
 8009df6:	9301      	str	r3, [sp, #4]
 8009df8:	9304      	str	r3, [sp, #16]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	2312      	movs	r3, #18
 8009dfe:	e7d1      	b.n	8009da4 <_dtoa_r+0x274>
 8009e00:	636f4361 	.word	0x636f4361
 8009e04:	3fd287a7 	.word	0x3fd287a7
 8009e08:	8b60c8b3 	.word	0x8b60c8b3
 8009e0c:	3fc68a28 	.word	0x3fc68a28
 8009e10:	509f79fb 	.word	0x509f79fb
 8009e14:	3fd34413 	.word	0x3fd34413
 8009e18:	0800e659 	.word	0x0800e659
 8009e1c:	0800e670 	.word	0x0800e670
 8009e20:	7ff00000 	.word	0x7ff00000
 8009e24:	0800e655 	.word	0x0800e655
 8009e28:	0800e64c 	.word	0x0800e64c
 8009e2c:	0800e629 	.word	0x0800e629
 8009e30:	3ff80000 	.word	0x3ff80000
 8009e34:	0800e760 	.word	0x0800e760
 8009e38:	0800e6c8 	.word	0x0800e6c8
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e40:	e7d7      	b.n	8009df2 <_dtoa_r+0x2c2>
 8009e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e44:	9301      	str	r3, [sp, #4]
 8009e46:	9304      	str	r3, [sp, #16]
 8009e48:	e7ba      	b.n	8009dc0 <_dtoa_r+0x290>
 8009e4a:	3101      	adds	r1, #1
 8009e4c:	0052      	lsls	r2, r2, #1
 8009e4e:	e7ba      	b.n	8009dc6 <_dtoa_r+0x296>
 8009e50:	69e3      	ldr	r3, [r4, #28]
 8009e52:	9a00      	ldr	r2, [sp, #0]
 8009e54:	601a      	str	r2, [r3, #0]
 8009e56:	9b04      	ldr	r3, [sp, #16]
 8009e58:	2b0e      	cmp	r3, #14
 8009e5a:	f200 80a8 	bhi.w	8009fae <_dtoa_r+0x47e>
 8009e5e:	2d00      	cmp	r5, #0
 8009e60:	f000 80a5 	beq.w	8009fae <_dtoa_r+0x47e>
 8009e64:	f1bb 0f00 	cmp.w	fp, #0
 8009e68:	dd38      	ble.n	8009edc <_dtoa_r+0x3ac>
 8009e6a:	4bc0      	ldr	r3, [pc, #768]	; (800a16c <_dtoa_r+0x63c>)
 8009e6c:	f00b 020f 	and.w	r2, fp, #15
 8009e70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e74:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009e78:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009e7c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009e80:	d019      	beq.n	8009eb6 <_dtoa_r+0x386>
 8009e82:	4bbb      	ldr	r3, [pc, #748]	; (800a170 <_dtoa_r+0x640>)
 8009e84:	ec51 0b18 	vmov	r0, r1, d8
 8009e88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e8c:	f7f6 fcde 	bl	800084c <__aeabi_ddiv>
 8009e90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e94:	f008 080f 	and.w	r8, r8, #15
 8009e98:	2503      	movs	r5, #3
 8009e9a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a170 <_dtoa_r+0x640>
 8009e9e:	f1b8 0f00 	cmp.w	r8, #0
 8009ea2:	d10a      	bne.n	8009eba <_dtoa_r+0x38a>
 8009ea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ea8:	4632      	mov	r2, r6
 8009eaa:	463b      	mov	r3, r7
 8009eac:	f7f6 fcce 	bl	800084c <__aeabi_ddiv>
 8009eb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009eb4:	e02b      	b.n	8009f0e <_dtoa_r+0x3de>
 8009eb6:	2502      	movs	r5, #2
 8009eb8:	e7ef      	b.n	8009e9a <_dtoa_r+0x36a>
 8009eba:	f018 0f01 	tst.w	r8, #1
 8009ebe:	d008      	beq.n	8009ed2 <_dtoa_r+0x3a2>
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	4639      	mov	r1, r7
 8009ec4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009ec8:	f7f6 fb96 	bl	80005f8 <__aeabi_dmul>
 8009ecc:	3501      	adds	r5, #1
 8009ece:	4606      	mov	r6, r0
 8009ed0:	460f      	mov	r7, r1
 8009ed2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009ed6:	f109 0908 	add.w	r9, r9, #8
 8009eda:	e7e0      	b.n	8009e9e <_dtoa_r+0x36e>
 8009edc:	f000 809f 	beq.w	800a01e <_dtoa_r+0x4ee>
 8009ee0:	f1cb 0600 	rsb	r6, fp, #0
 8009ee4:	4ba1      	ldr	r3, [pc, #644]	; (800a16c <_dtoa_r+0x63c>)
 8009ee6:	4fa2      	ldr	r7, [pc, #648]	; (800a170 <_dtoa_r+0x640>)
 8009ee8:	f006 020f 	and.w	r2, r6, #15
 8009eec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef4:	ec51 0b18 	vmov	r0, r1, d8
 8009ef8:	f7f6 fb7e 	bl	80005f8 <__aeabi_dmul>
 8009efc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f00:	1136      	asrs	r6, r6, #4
 8009f02:	2300      	movs	r3, #0
 8009f04:	2502      	movs	r5, #2
 8009f06:	2e00      	cmp	r6, #0
 8009f08:	d17e      	bne.n	800a008 <_dtoa_r+0x4d8>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1d0      	bne.n	8009eb0 <_dtoa_r+0x380>
 8009f0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f10:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f000 8084 	beq.w	800a022 <_dtoa_r+0x4f2>
 8009f1a:	4b96      	ldr	r3, [pc, #600]	; (800a174 <_dtoa_r+0x644>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	4640      	mov	r0, r8
 8009f20:	4649      	mov	r1, r9
 8009f22:	f7f6 fddb 	bl	8000adc <__aeabi_dcmplt>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	d07b      	beq.n	800a022 <_dtoa_r+0x4f2>
 8009f2a:	9b04      	ldr	r3, [sp, #16]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d078      	beq.n	800a022 <_dtoa_r+0x4f2>
 8009f30:	9b01      	ldr	r3, [sp, #4]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	dd39      	ble.n	8009faa <_dtoa_r+0x47a>
 8009f36:	4b90      	ldr	r3, [pc, #576]	; (800a178 <_dtoa_r+0x648>)
 8009f38:	2200      	movs	r2, #0
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	4649      	mov	r1, r9
 8009f3e:	f7f6 fb5b 	bl	80005f8 <__aeabi_dmul>
 8009f42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f46:	9e01      	ldr	r6, [sp, #4]
 8009f48:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009f4c:	3501      	adds	r5, #1
 8009f4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009f52:	4628      	mov	r0, r5
 8009f54:	f7f6 fae6 	bl	8000524 <__aeabi_i2d>
 8009f58:	4642      	mov	r2, r8
 8009f5a:	464b      	mov	r3, r9
 8009f5c:	f7f6 fb4c 	bl	80005f8 <__aeabi_dmul>
 8009f60:	4b86      	ldr	r3, [pc, #536]	; (800a17c <_dtoa_r+0x64c>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	f7f6 f992 	bl	800028c <__adddf3>
 8009f68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009f6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f70:	9303      	str	r3, [sp, #12]
 8009f72:	2e00      	cmp	r6, #0
 8009f74:	d158      	bne.n	800a028 <_dtoa_r+0x4f8>
 8009f76:	4b82      	ldr	r3, [pc, #520]	; (800a180 <_dtoa_r+0x650>)
 8009f78:	2200      	movs	r2, #0
 8009f7a:	4640      	mov	r0, r8
 8009f7c:	4649      	mov	r1, r9
 8009f7e:	f7f6 f983 	bl	8000288 <__aeabi_dsub>
 8009f82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f86:	4680      	mov	r8, r0
 8009f88:	4689      	mov	r9, r1
 8009f8a:	f7f6 fdc5 	bl	8000b18 <__aeabi_dcmpgt>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	f040 8296 	bne.w	800a4c0 <_dtoa_r+0x990>
 8009f94:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009f98:	4640      	mov	r0, r8
 8009f9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f9e:	4649      	mov	r1, r9
 8009fa0:	f7f6 fd9c 	bl	8000adc <__aeabi_dcmplt>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	f040 8289 	bne.w	800a4bc <_dtoa_r+0x98c>
 8009faa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009fae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f2c0 814e 	blt.w	800a252 <_dtoa_r+0x722>
 8009fb6:	f1bb 0f0e 	cmp.w	fp, #14
 8009fba:	f300 814a 	bgt.w	800a252 <_dtoa_r+0x722>
 8009fbe:	4b6b      	ldr	r3, [pc, #428]	; (800a16c <_dtoa_r+0x63c>)
 8009fc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009fc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f280 80dc 	bge.w	800a188 <_dtoa_r+0x658>
 8009fd0:	9b04      	ldr	r3, [sp, #16]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f300 80d8 	bgt.w	800a188 <_dtoa_r+0x658>
 8009fd8:	f040 826f 	bne.w	800a4ba <_dtoa_r+0x98a>
 8009fdc:	4b68      	ldr	r3, [pc, #416]	; (800a180 <_dtoa_r+0x650>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	4640      	mov	r0, r8
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	f7f6 fb08 	bl	80005f8 <__aeabi_dmul>
 8009fe8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fec:	f7f6 fd8a 	bl	8000b04 <__aeabi_dcmpge>
 8009ff0:	9e04      	ldr	r6, [sp, #16]
 8009ff2:	4637      	mov	r7, r6
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	f040 8245 	bne.w	800a484 <_dtoa_r+0x954>
 8009ffa:	9d00      	ldr	r5, [sp, #0]
 8009ffc:	2331      	movs	r3, #49	; 0x31
 8009ffe:	f805 3b01 	strb.w	r3, [r5], #1
 800a002:	f10b 0b01 	add.w	fp, fp, #1
 800a006:	e241      	b.n	800a48c <_dtoa_r+0x95c>
 800a008:	07f2      	lsls	r2, r6, #31
 800a00a:	d505      	bpl.n	800a018 <_dtoa_r+0x4e8>
 800a00c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a010:	f7f6 faf2 	bl	80005f8 <__aeabi_dmul>
 800a014:	3501      	adds	r5, #1
 800a016:	2301      	movs	r3, #1
 800a018:	1076      	asrs	r6, r6, #1
 800a01a:	3708      	adds	r7, #8
 800a01c:	e773      	b.n	8009f06 <_dtoa_r+0x3d6>
 800a01e:	2502      	movs	r5, #2
 800a020:	e775      	b.n	8009f0e <_dtoa_r+0x3de>
 800a022:	9e04      	ldr	r6, [sp, #16]
 800a024:	465f      	mov	r7, fp
 800a026:	e792      	b.n	8009f4e <_dtoa_r+0x41e>
 800a028:	9900      	ldr	r1, [sp, #0]
 800a02a:	4b50      	ldr	r3, [pc, #320]	; (800a16c <_dtoa_r+0x63c>)
 800a02c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a030:	4431      	add	r1, r6
 800a032:	9102      	str	r1, [sp, #8]
 800a034:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a036:	eeb0 9a47 	vmov.f32	s18, s14
 800a03a:	eef0 9a67 	vmov.f32	s19, s15
 800a03e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a042:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a046:	2900      	cmp	r1, #0
 800a048:	d044      	beq.n	800a0d4 <_dtoa_r+0x5a4>
 800a04a:	494e      	ldr	r1, [pc, #312]	; (800a184 <_dtoa_r+0x654>)
 800a04c:	2000      	movs	r0, #0
 800a04e:	f7f6 fbfd 	bl	800084c <__aeabi_ddiv>
 800a052:	ec53 2b19 	vmov	r2, r3, d9
 800a056:	f7f6 f917 	bl	8000288 <__aeabi_dsub>
 800a05a:	9d00      	ldr	r5, [sp, #0]
 800a05c:	ec41 0b19 	vmov	d9, r0, r1
 800a060:	4649      	mov	r1, r9
 800a062:	4640      	mov	r0, r8
 800a064:	f7f6 fd78 	bl	8000b58 <__aeabi_d2iz>
 800a068:	4606      	mov	r6, r0
 800a06a:	f7f6 fa5b 	bl	8000524 <__aeabi_i2d>
 800a06e:	4602      	mov	r2, r0
 800a070:	460b      	mov	r3, r1
 800a072:	4640      	mov	r0, r8
 800a074:	4649      	mov	r1, r9
 800a076:	f7f6 f907 	bl	8000288 <__aeabi_dsub>
 800a07a:	3630      	adds	r6, #48	; 0x30
 800a07c:	f805 6b01 	strb.w	r6, [r5], #1
 800a080:	ec53 2b19 	vmov	r2, r3, d9
 800a084:	4680      	mov	r8, r0
 800a086:	4689      	mov	r9, r1
 800a088:	f7f6 fd28 	bl	8000adc <__aeabi_dcmplt>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d164      	bne.n	800a15a <_dtoa_r+0x62a>
 800a090:	4642      	mov	r2, r8
 800a092:	464b      	mov	r3, r9
 800a094:	4937      	ldr	r1, [pc, #220]	; (800a174 <_dtoa_r+0x644>)
 800a096:	2000      	movs	r0, #0
 800a098:	f7f6 f8f6 	bl	8000288 <__aeabi_dsub>
 800a09c:	ec53 2b19 	vmov	r2, r3, d9
 800a0a0:	f7f6 fd1c 	bl	8000adc <__aeabi_dcmplt>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	f040 80b6 	bne.w	800a216 <_dtoa_r+0x6e6>
 800a0aa:	9b02      	ldr	r3, [sp, #8]
 800a0ac:	429d      	cmp	r5, r3
 800a0ae:	f43f af7c 	beq.w	8009faa <_dtoa_r+0x47a>
 800a0b2:	4b31      	ldr	r3, [pc, #196]	; (800a178 <_dtoa_r+0x648>)
 800a0b4:	ec51 0b19 	vmov	r0, r1, d9
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f7f6 fa9d 	bl	80005f8 <__aeabi_dmul>
 800a0be:	4b2e      	ldr	r3, [pc, #184]	; (800a178 <_dtoa_r+0x648>)
 800a0c0:	ec41 0b19 	vmov	d9, r0, r1
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	4640      	mov	r0, r8
 800a0c8:	4649      	mov	r1, r9
 800a0ca:	f7f6 fa95 	bl	80005f8 <__aeabi_dmul>
 800a0ce:	4680      	mov	r8, r0
 800a0d0:	4689      	mov	r9, r1
 800a0d2:	e7c5      	b.n	800a060 <_dtoa_r+0x530>
 800a0d4:	ec51 0b17 	vmov	r0, r1, d7
 800a0d8:	f7f6 fa8e 	bl	80005f8 <__aeabi_dmul>
 800a0dc:	9b02      	ldr	r3, [sp, #8]
 800a0de:	9d00      	ldr	r5, [sp, #0]
 800a0e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0e2:	ec41 0b19 	vmov	d9, r0, r1
 800a0e6:	4649      	mov	r1, r9
 800a0e8:	4640      	mov	r0, r8
 800a0ea:	f7f6 fd35 	bl	8000b58 <__aeabi_d2iz>
 800a0ee:	4606      	mov	r6, r0
 800a0f0:	f7f6 fa18 	bl	8000524 <__aeabi_i2d>
 800a0f4:	3630      	adds	r6, #48	; 0x30
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	4640      	mov	r0, r8
 800a0fc:	4649      	mov	r1, r9
 800a0fe:	f7f6 f8c3 	bl	8000288 <__aeabi_dsub>
 800a102:	f805 6b01 	strb.w	r6, [r5], #1
 800a106:	9b02      	ldr	r3, [sp, #8]
 800a108:	429d      	cmp	r5, r3
 800a10a:	4680      	mov	r8, r0
 800a10c:	4689      	mov	r9, r1
 800a10e:	f04f 0200 	mov.w	r2, #0
 800a112:	d124      	bne.n	800a15e <_dtoa_r+0x62e>
 800a114:	4b1b      	ldr	r3, [pc, #108]	; (800a184 <_dtoa_r+0x654>)
 800a116:	ec51 0b19 	vmov	r0, r1, d9
 800a11a:	f7f6 f8b7 	bl	800028c <__adddf3>
 800a11e:	4602      	mov	r2, r0
 800a120:	460b      	mov	r3, r1
 800a122:	4640      	mov	r0, r8
 800a124:	4649      	mov	r1, r9
 800a126:	f7f6 fcf7 	bl	8000b18 <__aeabi_dcmpgt>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d173      	bne.n	800a216 <_dtoa_r+0x6e6>
 800a12e:	ec53 2b19 	vmov	r2, r3, d9
 800a132:	4914      	ldr	r1, [pc, #80]	; (800a184 <_dtoa_r+0x654>)
 800a134:	2000      	movs	r0, #0
 800a136:	f7f6 f8a7 	bl	8000288 <__aeabi_dsub>
 800a13a:	4602      	mov	r2, r0
 800a13c:	460b      	mov	r3, r1
 800a13e:	4640      	mov	r0, r8
 800a140:	4649      	mov	r1, r9
 800a142:	f7f6 fccb 	bl	8000adc <__aeabi_dcmplt>
 800a146:	2800      	cmp	r0, #0
 800a148:	f43f af2f 	beq.w	8009faa <_dtoa_r+0x47a>
 800a14c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a14e:	1e6b      	subs	r3, r5, #1
 800a150:	930f      	str	r3, [sp, #60]	; 0x3c
 800a152:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a156:	2b30      	cmp	r3, #48	; 0x30
 800a158:	d0f8      	beq.n	800a14c <_dtoa_r+0x61c>
 800a15a:	46bb      	mov	fp, r7
 800a15c:	e04a      	b.n	800a1f4 <_dtoa_r+0x6c4>
 800a15e:	4b06      	ldr	r3, [pc, #24]	; (800a178 <_dtoa_r+0x648>)
 800a160:	f7f6 fa4a 	bl	80005f8 <__aeabi_dmul>
 800a164:	4680      	mov	r8, r0
 800a166:	4689      	mov	r9, r1
 800a168:	e7bd      	b.n	800a0e6 <_dtoa_r+0x5b6>
 800a16a:	bf00      	nop
 800a16c:	0800e760 	.word	0x0800e760
 800a170:	0800e738 	.word	0x0800e738
 800a174:	3ff00000 	.word	0x3ff00000
 800a178:	40240000 	.word	0x40240000
 800a17c:	401c0000 	.word	0x401c0000
 800a180:	40140000 	.word	0x40140000
 800a184:	3fe00000 	.word	0x3fe00000
 800a188:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a18c:	9d00      	ldr	r5, [sp, #0]
 800a18e:	4642      	mov	r2, r8
 800a190:	464b      	mov	r3, r9
 800a192:	4630      	mov	r0, r6
 800a194:	4639      	mov	r1, r7
 800a196:	f7f6 fb59 	bl	800084c <__aeabi_ddiv>
 800a19a:	f7f6 fcdd 	bl	8000b58 <__aeabi_d2iz>
 800a19e:	9001      	str	r0, [sp, #4]
 800a1a0:	f7f6 f9c0 	bl	8000524 <__aeabi_i2d>
 800a1a4:	4642      	mov	r2, r8
 800a1a6:	464b      	mov	r3, r9
 800a1a8:	f7f6 fa26 	bl	80005f8 <__aeabi_dmul>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	4639      	mov	r1, r7
 800a1b4:	f7f6 f868 	bl	8000288 <__aeabi_dsub>
 800a1b8:	9e01      	ldr	r6, [sp, #4]
 800a1ba:	9f04      	ldr	r7, [sp, #16]
 800a1bc:	3630      	adds	r6, #48	; 0x30
 800a1be:	f805 6b01 	strb.w	r6, [r5], #1
 800a1c2:	9e00      	ldr	r6, [sp, #0]
 800a1c4:	1bae      	subs	r6, r5, r6
 800a1c6:	42b7      	cmp	r7, r6
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	d134      	bne.n	800a238 <_dtoa_r+0x708>
 800a1ce:	f7f6 f85d 	bl	800028c <__adddf3>
 800a1d2:	4642      	mov	r2, r8
 800a1d4:	464b      	mov	r3, r9
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	460f      	mov	r7, r1
 800a1da:	f7f6 fc9d 	bl	8000b18 <__aeabi_dcmpgt>
 800a1de:	b9c8      	cbnz	r0, 800a214 <_dtoa_r+0x6e4>
 800a1e0:	4642      	mov	r2, r8
 800a1e2:	464b      	mov	r3, r9
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	4639      	mov	r1, r7
 800a1e8:	f7f6 fc6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1ec:	b110      	cbz	r0, 800a1f4 <_dtoa_r+0x6c4>
 800a1ee:	9b01      	ldr	r3, [sp, #4]
 800a1f0:	07db      	lsls	r3, r3, #31
 800a1f2:	d40f      	bmi.n	800a214 <_dtoa_r+0x6e4>
 800a1f4:	4651      	mov	r1, sl
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f000 fb18 	bl	800a82c <_Bfree>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a200:	702b      	strb	r3, [r5, #0]
 800a202:	f10b 0301 	add.w	r3, fp, #1
 800a206:	6013      	str	r3, [r2, #0]
 800a208:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	f43f ace2 	beq.w	8009bd4 <_dtoa_r+0xa4>
 800a210:	601d      	str	r5, [r3, #0]
 800a212:	e4df      	b.n	8009bd4 <_dtoa_r+0xa4>
 800a214:	465f      	mov	r7, fp
 800a216:	462b      	mov	r3, r5
 800a218:	461d      	mov	r5, r3
 800a21a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a21e:	2a39      	cmp	r2, #57	; 0x39
 800a220:	d106      	bne.n	800a230 <_dtoa_r+0x700>
 800a222:	9a00      	ldr	r2, [sp, #0]
 800a224:	429a      	cmp	r2, r3
 800a226:	d1f7      	bne.n	800a218 <_dtoa_r+0x6e8>
 800a228:	9900      	ldr	r1, [sp, #0]
 800a22a:	2230      	movs	r2, #48	; 0x30
 800a22c:	3701      	adds	r7, #1
 800a22e:	700a      	strb	r2, [r1, #0]
 800a230:	781a      	ldrb	r2, [r3, #0]
 800a232:	3201      	adds	r2, #1
 800a234:	701a      	strb	r2, [r3, #0]
 800a236:	e790      	b.n	800a15a <_dtoa_r+0x62a>
 800a238:	4ba3      	ldr	r3, [pc, #652]	; (800a4c8 <_dtoa_r+0x998>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	f7f6 f9dc 	bl	80005f8 <__aeabi_dmul>
 800a240:	2200      	movs	r2, #0
 800a242:	2300      	movs	r3, #0
 800a244:	4606      	mov	r6, r0
 800a246:	460f      	mov	r7, r1
 800a248:	f7f6 fc3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	d09e      	beq.n	800a18e <_dtoa_r+0x65e>
 800a250:	e7d0      	b.n	800a1f4 <_dtoa_r+0x6c4>
 800a252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a254:	2a00      	cmp	r2, #0
 800a256:	f000 80ca 	beq.w	800a3ee <_dtoa_r+0x8be>
 800a25a:	9a07      	ldr	r2, [sp, #28]
 800a25c:	2a01      	cmp	r2, #1
 800a25e:	f300 80ad 	bgt.w	800a3bc <_dtoa_r+0x88c>
 800a262:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a264:	2a00      	cmp	r2, #0
 800a266:	f000 80a5 	beq.w	800a3b4 <_dtoa_r+0x884>
 800a26a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a26e:	9e08      	ldr	r6, [sp, #32]
 800a270:	9d05      	ldr	r5, [sp, #20]
 800a272:	9a05      	ldr	r2, [sp, #20]
 800a274:	441a      	add	r2, r3
 800a276:	9205      	str	r2, [sp, #20]
 800a278:	9a06      	ldr	r2, [sp, #24]
 800a27a:	2101      	movs	r1, #1
 800a27c:	441a      	add	r2, r3
 800a27e:	4620      	mov	r0, r4
 800a280:	9206      	str	r2, [sp, #24]
 800a282:	f000 fb89 	bl	800a998 <__i2b>
 800a286:	4607      	mov	r7, r0
 800a288:	b165      	cbz	r5, 800a2a4 <_dtoa_r+0x774>
 800a28a:	9b06      	ldr	r3, [sp, #24]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	dd09      	ble.n	800a2a4 <_dtoa_r+0x774>
 800a290:	42ab      	cmp	r3, r5
 800a292:	9a05      	ldr	r2, [sp, #20]
 800a294:	bfa8      	it	ge
 800a296:	462b      	movge	r3, r5
 800a298:	1ad2      	subs	r2, r2, r3
 800a29a:	9205      	str	r2, [sp, #20]
 800a29c:	9a06      	ldr	r2, [sp, #24]
 800a29e:	1aed      	subs	r5, r5, r3
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	9306      	str	r3, [sp, #24]
 800a2a4:	9b08      	ldr	r3, [sp, #32]
 800a2a6:	b1f3      	cbz	r3, 800a2e6 <_dtoa_r+0x7b6>
 800a2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	f000 80a3 	beq.w	800a3f6 <_dtoa_r+0x8c6>
 800a2b0:	2e00      	cmp	r6, #0
 800a2b2:	dd10      	ble.n	800a2d6 <_dtoa_r+0x7a6>
 800a2b4:	4639      	mov	r1, r7
 800a2b6:	4632      	mov	r2, r6
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	f000 fc2d 	bl	800ab18 <__pow5mult>
 800a2be:	4652      	mov	r2, sl
 800a2c0:	4601      	mov	r1, r0
 800a2c2:	4607      	mov	r7, r0
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f000 fb7d 	bl	800a9c4 <__multiply>
 800a2ca:	4651      	mov	r1, sl
 800a2cc:	4680      	mov	r8, r0
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f000 faac 	bl	800a82c <_Bfree>
 800a2d4:	46c2      	mov	sl, r8
 800a2d6:	9b08      	ldr	r3, [sp, #32]
 800a2d8:	1b9a      	subs	r2, r3, r6
 800a2da:	d004      	beq.n	800a2e6 <_dtoa_r+0x7b6>
 800a2dc:	4651      	mov	r1, sl
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f000 fc1a 	bl	800ab18 <__pow5mult>
 800a2e4:	4682      	mov	sl, r0
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f000 fb55 	bl	800a998 <__i2b>
 800a2ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	4606      	mov	r6, r0
 800a2f4:	f340 8081 	ble.w	800a3fa <_dtoa_r+0x8ca>
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	4601      	mov	r1, r0
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f000 fc0b 	bl	800ab18 <__pow5mult>
 800a302:	9b07      	ldr	r3, [sp, #28]
 800a304:	2b01      	cmp	r3, #1
 800a306:	4606      	mov	r6, r0
 800a308:	dd7a      	ble.n	800a400 <_dtoa_r+0x8d0>
 800a30a:	f04f 0800 	mov.w	r8, #0
 800a30e:	6933      	ldr	r3, [r6, #16]
 800a310:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a314:	6918      	ldr	r0, [r3, #16]
 800a316:	f000 faf1 	bl	800a8fc <__hi0bits>
 800a31a:	f1c0 0020 	rsb	r0, r0, #32
 800a31e:	9b06      	ldr	r3, [sp, #24]
 800a320:	4418      	add	r0, r3
 800a322:	f010 001f 	ands.w	r0, r0, #31
 800a326:	f000 8094 	beq.w	800a452 <_dtoa_r+0x922>
 800a32a:	f1c0 0320 	rsb	r3, r0, #32
 800a32e:	2b04      	cmp	r3, #4
 800a330:	f340 8085 	ble.w	800a43e <_dtoa_r+0x90e>
 800a334:	9b05      	ldr	r3, [sp, #20]
 800a336:	f1c0 001c 	rsb	r0, r0, #28
 800a33a:	4403      	add	r3, r0
 800a33c:	9305      	str	r3, [sp, #20]
 800a33e:	9b06      	ldr	r3, [sp, #24]
 800a340:	4403      	add	r3, r0
 800a342:	4405      	add	r5, r0
 800a344:	9306      	str	r3, [sp, #24]
 800a346:	9b05      	ldr	r3, [sp, #20]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	dd05      	ble.n	800a358 <_dtoa_r+0x828>
 800a34c:	4651      	mov	r1, sl
 800a34e:	461a      	mov	r2, r3
 800a350:	4620      	mov	r0, r4
 800a352:	f000 fc3b 	bl	800abcc <__lshift>
 800a356:	4682      	mov	sl, r0
 800a358:	9b06      	ldr	r3, [sp, #24]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	dd05      	ble.n	800a36a <_dtoa_r+0x83a>
 800a35e:	4631      	mov	r1, r6
 800a360:	461a      	mov	r2, r3
 800a362:	4620      	mov	r0, r4
 800a364:	f000 fc32 	bl	800abcc <__lshift>
 800a368:	4606      	mov	r6, r0
 800a36a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d072      	beq.n	800a456 <_dtoa_r+0x926>
 800a370:	4631      	mov	r1, r6
 800a372:	4650      	mov	r0, sl
 800a374:	f000 fc96 	bl	800aca4 <__mcmp>
 800a378:	2800      	cmp	r0, #0
 800a37a:	da6c      	bge.n	800a456 <_dtoa_r+0x926>
 800a37c:	2300      	movs	r3, #0
 800a37e:	4651      	mov	r1, sl
 800a380:	220a      	movs	r2, #10
 800a382:	4620      	mov	r0, r4
 800a384:	f000 fa74 	bl	800a870 <__multadd>
 800a388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a38a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a38e:	4682      	mov	sl, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	f000 81b0 	beq.w	800a6f6 <_dtoa_r+0xbc6>
 800a396:	2300      	movs	r3, #0
 800a398:	4639      	mov	r1, r7
 800a39a:	220a      	movs	r2, #10
 800a39c:	4620      	mov	r0, r4
 800a39e:	f000 fa67 	bl	800a870 <__multadd>
 800a3a2:	9b01      	ldr	r3, [sp, #4]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	4607      	mov	r7, r0
 800a3a8:	f300 8096 	bgt.w	800a4d8 <_dtoa_r+0x9a8>
 800a3ac:	9b07      	ldr	r3, [sp, #28]
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	dc59      	bgt.n	800a466 <_dtoa_r+0x936>
 800a3b2:	e091      	b.n	800a4d8 <_dtoa_r+0x9a8>
 800a3b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a3ba:	e758      	b.n	800a26e <_dtoa_r+0x73e>
 800a3bc:	9b04      	ldr	r3, [sp, #16]
 800a3be:	1e5e      	subs	r6, r3, #1
 800a3c0:	9b08      	ldr	r3, [sp, #32]
 800a3c2:	42b3      	cmp	r3, r6
 800a3c4:	bfbf      	itttt	lt
 800a3c6:	9b08      	ldrlt	r3, [sp, #32]
 800a3c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a3ca:	9608      	strlt	r6, [sp, #32]
 800a3cc:	1af3      	sublt	r3, r6, r3
 800a3ce:	bfb4      	ite	lt
 800a3d0:	18d2      	addlt	r2, r2, r3
 800a3d2:	1b9e      	subge	r6, r3, r6
 800a3d4:	9b04      	ldr	r3, [sp, #16]
 800a3d6:	bfbc      	itt	lt
 800a3d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a3da:	2600      	movlt	r6, #0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	bfb7      	itett	lt
 800a3e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a3e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a3e8:	1a9d      	sublt	r5, r3, r2
 800a3ea:	2300      	movlt	r3, #0
 800a3ec:	e741      	b.n	800a272 <_dtoa_r+0x742>
 800a3ee:	9e08      	ldr	r6, [sp, #32]
 800a3f0:	9d05      	ldr	r5, [sp, #20]
 800a3f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a3f4:	e748      	b.n	800a288 <_dtoa_r+0x758>
 800a3f6:	9a08      	ldr	r2, [sp, #32]
 800a3f8:	e770      	b.n	800a2dc <_dtoa_r+0x7ac>
 800a3fa:	9b07      	ldr	r3, [sp, #28]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	dc19      	bgt.n	800a434 <_dtoa_r+0x904>
 800a400:	9b02      	ldr	r3, [sp, #8]
 800a402:	b9bb      	cbnz	r3, 800a434 <_dtoa_r+0x904>
 800a404:	9b03      	ldr	r3, [sp, #12]
 800a406:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a40a:	b99b      	cbnz	r3, 800a434 <_dtoa_r+0x904>
 800a40c:	9b03      	ldr	r3, [sp, #12]
 800a40e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a412:	0d1b      	lsrs	r3, r3, #20
 800a414:	051b      	lsls	r3, r3, #20
 800a416:	b183      	cbz	r3, 800a43a <_dtoa_r+0x90a>
 800a418:	9b05      	ldr	r3, [sp, #20]
 800a41a:	3301      	adds	r3, #1
 800a41c:	9305      	str	r3, [sp, #20]
 800a41e:	9b06      	ldr	r3, [sp, #24]
 800a420:	3301      	adds	r3, #1
 800a422:	9306      	str	r3, [sp, #24]
 800a424:	f04f 0801 	mov.w	r8, #1
 800a428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f47f af6f 	bne.w	800a30e <_dtoa_r+0x7de>
 800a430:	2001      	movs	r0, #1
 800a432:	e774      	b.n	800a31e <_dtoa_r+0x7ee>
 800a434:	f04f 0800 	mov.w	r8, #0
 800a438:	e7f6      	b.n	800a428 <_dtoa_r+0x8f8>
 800a43a:	4698      	mov	r8, r3
 800a43c:	e7f4      	b.n	800a428 <_dtoa_r+0x8f8>
 800a43e:	d082      	beq.n	800a346 <_dtoa_r+0x816>
 800a440:	9a05      	ldr	r2, [sp, #20]
 800a442:	331c      	adds	r3, #28
 800a444:	441a      	add	r2, r3
 800a446:	9205      	str	r2, [sp, #20]
 800a448:	9a06      	ldr	r2, [sp, #24]
 800a44a:	441a      	add	r2, r3
 800a44c:	441d      	add	r5, r3
 800a44e:	9206      	str	r2, [sp, #24]
 800a450:	e779      	b.n	800a346 <_dtoa_r+0x816>
 800a452:	4603      	mov	r3, r0
 800a454:	e7f4      	b.n	800a440 <_dtoa_r+0x910>
 800a456:	9b04      	ldr	r3, [sp, #16]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	dc37      	bgt.n	800a4cc <_dtoa_r+0x99c>
 800a45c:	9b07      	ldr	r3, [sp, #28]
 800a45e:	2b02      	cmp	r3, #2
 800a460:	dd34      	ble.n	800a4cc <_dtoa_r+0x99c>
 800a462:	9b04      	ldr	r3, [sp, #16]
 800a464:	9301      	str	r3, [sp, #4]
 800a466:	9b01      	ldr	r3, [sp, #4]
 800a468:	b963      	cbnz	r3, 800a484 <_dtoa_r+0x954>
 800a46a:	4631      	mov	r1, r6
 800a46c:	2205      	movs	r2, #5
 800a46e:	4620      	mov	r0, r4
 800a470:	f000 f9fe 	bl	800a870 <__multadd>
 800a474:	4601      	mov	r1, r0
 800a476:	4606      	mov	r6, r0
 800a478:	4650      	mov	r0, sl
 800a47a:	f000 fc13 	bl	800aca4 <__mcmp>
 800a47e:	2800      	cmp	r0, #0
 800a480:	f73f adbb 	bgt.w	8009ffa <_dtoa_r+0x4ca>
 800a484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a486:	9d00      	ldr	r5, [sp, #0]
 800a488:	ea6f 0b03 	mvn.w	fp, r3
 800a48c:	f04f 0800 	mov.w	r8, #0
 800a490:	4631      	mov	r1, r6
 800a492:	4620      	mov	r0, r4
 800a494:	f000 f9ca 	bl	800a82c <_Bfree>
 800a498:	2f00      	cmp	r7, #0
 800a49a:	f43f aeab 	beq.w	800a1f4 <_dtoa_r+0x6c4>
 800a49e:	f1b8 0f00 	cmp.w	r8, #0
 800a4a2:	d005      	beq.n	800a4b0 <_dtoa_r+0x980>
 800a4a4:	45b8      	cmp	r8, r7
 800a4a6:	d003      	beq.n	800a4b0 <_dtoa_r+0x980>
 800a4a8:	4641      	mov	r1, r8
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f000 f9be 	bl	800a82c <_Bfree>
 800a4b0:	4639      	mov	r1, r7
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f000 f9ba 	bl	800a82c <_Bfree>
 800a4b8:	e69c      	b.n	800a1f4 <_dtoa_r+0x6c4>
 800a4ba:	2600      	movs	r6, #0
 800a4bc:	4637      	mov	r7, r6
 800a4be:	e7e1      	b.n	800a484 <_dtoa_r+0x954>
 800a4c0:	46bb      	mov	fp, r7
 800a4c2:	4637      	mov	r7, r6
 800a4c4:	e599      	b.n	8009ffa <_dtoa_r+0x4ca>
 800a4c6:	bf00      	nop
 800a4c8:	40240000 	.word	0x40240000
 800a4cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f000 80c8 	beq.w	800a664 <_dtoa_r+0xb34>
 800a4d4:	9b04      	ldr	r3, [sp, #16]
 800a4d6:	9301      	str	r3, [sp, #4]
 800a4d8:	2d00      	cmp	r5, #0
 800a4da:	dd05      	ble.n	800a4e8 <_dtoa_r+0x9b8>
 800a4dc:	4639      	mov	r1, r7
 800a4de:	462a      	mov	r2, r5
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f000 fb73 	bl	800abcc <__lshift>
 800a4e6:	4607      	mov	r7, r0
 800a4e8:	f1b8 0f00 	cmp.w	r8, #0
 800a4ec:	d05b      	beq.n	800a5a6 <_dtoa_r+0xa76>
 800a4ee:	6879      	ldr	r1, [r7, #4]
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f000 f95b 	bl	800a7ac <_Balloc>
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	b928      	cbnz	r0, 800a506 <_dtoa_r+0x9d6>
 800a4fa:	4b83      	ldr	r3, [pc, #524]	; (800a708 <_dtoa_r+0xbd8>)
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a502:	f7ff bb2e 	b.w	8009b62 <_dtoa_r+0x32>
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	3202      	adds	r2, #2
 800a50a:	0092      	lsls	r2, r2, #2
 800a50c:	f107 010c 	add.w	r1, r7, #12
 800a510:	300c      	adds	r0, #12
 800a512:	f7ff fa77 	bl	8009a04 <memcpy>
 800a516:	2201      	movs	r2, #1
 800a518:	4629      	mov	r1, r5
 800a51a:	4620      	mov	r0, r4
 800a51c:	f000 fb56 	bl	800abcc <__lshift>
 800a520:	9b00      	ldr	r3, [sp, #0]
 800a522:	3301      	adds	r3, #1
 800a524:	9304      	str	r3, [sp, #16]
 800a526:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a52a:	4413      	add	r3, r2
 800a52c:	9308      	str	r3, [sp, #32]
 800a52e:	9b02      	ldr	r3, [sp, #8]
 800a530:	f003 0301 	and.w	r3, r3, #1
 800a534:	46b8      	mov	r8, r7
 800a536:	9306      	str	r3, [sp, #24]
 800a538:	4607      	mov	r7, r0
 800a53a:	9b04      	ldr	r3, [sp, #16]
 800a53c:	4631      	mov	r1, r6
 800a53e:	3b01      	subs	r3, #1
 800a540:	4650      	mov	r0, sl
 800a542:	9301      	str	r3, [sp, #4]
 800a544:	f7ff fa6c 	bl	8009a20 <quorem>
 800a548:	4641      	mov	r1, r8
 800a54a:	9002      	str	r0, [sp, #8]
 800a54c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a550:	4650      	mov	r0, sl
 800a552:	f000 fba7 	bl	800aca4 <__mcmp>
 800a556:	463a      	mov	r2, r7
 800a558:	9005      	str	r0, [sp, #20]
 800a55a:	4631      	mov	r1, r6
 800a55c:	4620      	mov	r0, r4
 800a55e:	f000 fbbd 	bl	800acdc <__mdiff>
 800a562:	68c2      	ldr	r2, [r0, #12]
 800a564:	4605      	mov	r5, r0
 800a566:	bb02      	cbnz	r2, 800a5aa <_dtoa_r+0xa7a>
 800a568:	4601      	mov	r1, r0
 800a56a:	4650      	mov	r0, sl
 800a56c:	f000 fb9a 	bl	800aca4 <__mcmp>
 800a570:	4602      	mov	r2, r0
 800a572:	4629      	mov	r1, r5
 800a574:	4620      	mov	r0, r4
 800a576:	9209      	str	r2, [sp, #36]	; 0x24
 800a578:	f000 f958 	bl	800a82c <_Bfree>
 800a57c:	9b07      	ldr	r3, [sp, #28]
 800a57e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a580:	9d04      	ldr	r5, [sp, #16]
 800a582:	ea43 0102 	orr.w	r1, r3, r2
 800a586:	9b06      	ldr	r3, [sp, #24]
 800a588:	4319      	orrs	r1, r3
 800a58a:	d110      	bne.n	800a5ae <_dtoa_r+0xa7e>
 800a58c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a590:	d029      	beq.n	800a5e6 <_dtoa_r+0xab6>
 800a592:	9b05      	ldr	r3, [sp, #20]
 800a594:	2b00      	cmp	r3, #0
 800a596:	dd02      	ble.n	800a59e <_dtoa_r+0xa6e>
 800a598:	9b02      	ldr	r3, [sp, #8]
 800a59a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a59e:	9b01      	ldr	r3, [sp, #4]
 800a5a0:	f883 9000 	strb.w	r9, [r3]
 800a5a4:	e774      	b.n	800a490 <_dtoa_r+0x960>
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	e7ba      	b.n	800a520 <_dtoa_r+0x9f0>
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	e7e1      	b.n	800a572 <_dtoa_r+0xa42>
 800a5ae:	9b05      	ldr	r3, [sp, #20]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	db04      	blt.n	800a5be <_dtoa_r+0xa8e>
 800a5b4:	9907      	ldr	r1, [sp, #28]
 800a5b6:	430b      	orrs	r3, r1
 800a5b8:	9906      	ldr	r1, [sp, #24]
 800a5ba:	430b      	orrs	r3, r1
 800a5bc:	d120      	bne.n	800a600 <_dtoa_r+0xad0>
 800a5be:	2a00      	cmp	r2, #0
 800a5c0:	dded      	ble.n	800a59e <_dtoa_r+0xa6e>
 800a5c2:	4651      	mov	r1, sl
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f000 fb00 	bl	800abcc <__lshift>
 800a5cc:	4631      	mov	r1, r6
 800a5ce:	4682      	mov	sl, r0
 800a5d0:	f000 fb68 	bl	800aca4 <__mcmp>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	dc03      	bgt.n	800a5e0 <_dtoa_r+0xab0>
 800a5d8:	d1e1      	bne.n	800a59e <_dtoa_r+0xa6e>
 800a5da:	f019 0f01 	tst.w	r9, #1
 800a5de:	d0de      	beq.n	800a59e <_dtoa_r+0xa6e>
 800a5e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a5e4:	d1d8      	bne.n	800a598 <_dtoa_r+0xa68>
 800a5e6:	9a01      	ldr	r2, [sp, #4]
 800a5e8:	2339      	movs	r3, #57	; 0x39
 800a5ea:	7013      	strb	r3, [r2, #0]
 800a5ec:	462b      	mov	r3, r5
 800a5ee:	461d      	mov	r5, r3
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a5f6:	2a39      	cmp	r2, #57	; 0x39
 800a5f8:	d06c      	beq.n	800a6d4 <_dtoa_r+0xba4>
 800a5fa:	3201      	adds	r2, #1
 800a5fc:	701a      	strb	r2, [r3, #0]
 800a5fe:	e747      	b.n	800a490 <_dtoa_r+0x960>
 800a600:	2a00      	cmp	r2, #0
 800a602:	dd07      	ble.n	800a614 <_dtoa_r+0xae4>
 800a604:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a608:	d0ed      	beq.n	800a5e6 <_dtoa_r+0xab6>
 800a60a:	9a01      	ldr	r2, [sp, #4]
 800a60c:	f109 0301 	add.w	r3, r9, #1
 800a610:	7013      	strb	r3, [r2, #0]
 800a612:	e73d      	b.n	800a490 <_dtoa_r+0x960>
 800a614:	9b04      	ldr	r3, [sp, #16]
 800a616:	9a08      	ldr	r2, [sp, #32]
 800a618:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d043      	beq.n	800a6a8 <_dtoa_r+0xb78>
 800a620:	4651      	mov	r1, sl
 800a622:	2300      	movs	r3, #0
 800a624:	220a      	movs	r2, #10
 800a626:	4620      	mov	r0, r4
 800a628:	f000 f922 	bl	800a870 <__multadd>
 800a62c:	45b8      	cmp	r8, r7
 800a62e:	4682      	mov	sl, r0
 800a630:	f04f 0300 	mov.w	r3, #0
 800a634:	f04f 020a 	mov.w	r2, #10
 800a638:	4641      	mov	r1, r8
 800a63a:	4620      	mov	r0, r4
 800a63c:	d107      	bne.n	800a64e <_dtoa_r+0xb1e>
 800a63e:	f000 f917 	bl	800a870 <__multadd>
 800a642:	4680      	mov	r8, r0
 800a644:	4607      	mov	r7, r0
 800a646:	9b04      	ldr	r3, [sp, #16]
 800a648:	3301      	adds	r3, #1
 800a64a:	9304      	str	r3, [sp, #16]
 800a64c:	e775      	b.n	800a53a <_dtoa_r+0xa0a>
 800a64e:	f000 f90f 	bl	800a870 <__multadd>
 800a652:	4639      	mov	r1, r7
 800a654:	4680      	mov	r8, r0
 800a656:	2300      	movs	r3, #0
 800a658:	220a      	movs	r2, #10
 800a65a:	4620      	mov	r0, r4
 800a65c:	f000 f908 	bl	800a870 <__multadd>
 800a660:	4607      	mov	r7, r0
 800a662:	e7f0      	b.n	800a646 <_dtoa_r+0xb16>
 800a664:	9b04      	ldr	r3, [sp, #16]
 800a666:	9301      	str	r3, [sp, #4]
 800a668:	9d00      	ldr	r5, [sp, #0]
 800a66a:	4631      	mov	r1, r6
 800a66c:	4650      	mov	r0, sl
 800a66e:	f7ff f9d7 	bl	8009a20 <quorem>
 800a672:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a676:	9b00      	ldr	r3, [sp, #0]
 800a678:	f805 9b01 	strb.w	r9, [r5], #1
 800a67c:	1aea      	subs	r2, r5, r3
 800a67e:	9b01      	ldr	r3, [sp, #4]
 800a680:	4293      	cmp	r3, r2
 800a682:	dd07      	ble.n	800a694 <_dtoa_r+0xb64>
 800a684:	4651      	mov	r1, sl
 800a686:	2300      	movs	r3, #0
 800a688:	220a      	movs	r2, #10
 800a68a:	4620      	mov	r0, r4
 800a68c:	f000 f8f0 	bl	800a870 <__multadd>
 800a690:	4682      	mov	sl, r0
 800a692:	e7ea      	b.n	800a66a <_dtoa_r+0xb3a>
 800a694:	9b01      	ldr	r3, [sp, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	bfc8      	it	gt
 800a69a:	461d      	movgt	r5, r3
 800a69c:	9b00      	ldr	r3, [sp, #0]
 800a69e:	bfd8      	it	le
 800a6a0:	2501      	movle	r5, #1
 800a6a2:	441d      	add	r5, r3
 800a6a4:	f04f 0800 	mov.w	r8, #0
 800a6a8:	4651      	mov	r1, sl
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	f000 fa8d 	bl	800abcc <__lshift>
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	4682      	mov	sl, r0
 800a6b6:	f000 faf5 	bl	800aca4 <__mcmp>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	dc96      	bgt.n	800a5ec <_dtoa_r+0xabc>
 800a6be:	d102      	bne.n	800a6c6 <_dtoa_r+0xb96>
 800a6c0:	f019 0f01 	tst.w	r9, #1
 800a6c4:	d192      	bne.n	800a5ec <_dtoa_r+0xabc>
 800a6c6:	462b      	mov	r3, r5
 800a6c8:	461d      	mov	r5, r3
 800a6ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6ce:	2a30      	cmp	r2, #48	; 0x30
 800a6d0:	d0fa      	beq.n	800a6c8 <_dtoa_r+0xb98>
 800a6d2:	e6dd      	b.n	800a490 <_dtoa_r+0x960>
 800a6d4:	9a00      	ldr	r2, [sp, #0]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d189      	bne.n	800a5ee <_dtoa_r+0xabe>
 800a6da:	f10b 0b01 	add.w	fp, fp, #1
 800a6de:	2331      	movs	r3, #49	; 0x31
 800a6e0:	e796      	b.n	800a610 <_dtoa_r+0xae0>
 800a6e2:	4b0a      	ldr	r3, [pc, #40]	; (800a70c <_dtoa_r+0xbdc>)
 800a6e4:	f7ff ba99 	b.w	8009c1a <_dtoa_r+0xea>
 800a6e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f47f aa6d 	bne.w	8009bca <_dtoa_r+0x9a>
 800a6f0:	4b07      	ldr	r3, [pc, #28]	; (800a710 <_dtoa_r+0xbe0>)
 800a6f2:	f7ff ba92 	b.w	8009c1a <_dtoa_r+0xea>
 800a6f6:	9b01      	ldr	r3, [sp, #4]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	dcb5      	bgt.n	800a668 <_dtoa_r+0xb38>
 800a6fc:	9b07      	ldr	r3, [sp, #28]
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	f73f aeb1 	bgt.w	800a466 <_dtoa_r+0x936>
 800a704:	e7b0      	b.n	800a668 <_dtoa_r+0xb38>
 800a706:	bf00      	nop
 800a708:	0800e6c8 	.word	0x0800e6c8
 800a70c:	0800e628 	.word	0x0800e628
 800a710:	0800e64c 	.word	0x0800e64c

0800a714 <_free_r>:
 800a714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a716:	2900      	cmp	r1, #0
 800a718:	d044      	beq.n	800a7a4 <_free_r+0x90>
 800a71a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a71e:	9001      	str	r0, [sp, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	f1a1 0404 	sub.w	r4, r1, #4
 800a726:	bfb8      	it	lt
 800a728:	18e4      	addlt	r4, r4, r3
 800a72a:	f7fe fae5 	bl	8008cf8 <__malloc_lock>
 800a72e:	4a1e      	ldr	r2, [pc, #120]	; (800a7a8 <_free_r+0x94>)
 800a730:	9801      	ldr	r0, [sp, #4]
 800a732:	6813      	ldr	r3, [r2, #0]
 800a734:	b933      	cbnz	r3, 800a744 <_free_r+0x30>
 800a736:	6063      	str	r3, [r4, #4]
 800a738:	6014      	str	r4, [r2, #0]
 800a73a:	b003      	add	sp, #12
 800a73c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a740:	f7fe bae0 	b.w	8008d04 <__malloc_unlock>
 800a744:	42a3      	cmp	r3, r4
 800a746:	d908      	bls.n	800a75a <_free_r+0x46>
 800a748:	6825      	ldr	r5, [r4, #0]
 800a74a:	1961      	adds	r1, r4, r5
 800a74c:	428b      	cmp	r3, r1
 800a74e:	bf01      	itttt	eq
 800a750:	6819      	ldreq	r1, [r3, #0]
 800a752:	685b      	ldreq	r3, [r3, #4]
 800a754:	1949      	addeq	r1, r1, r5
 800a756:	6021      	streq	r1, [r4, #0]
 800a758:	e7ed      	b.n	800a736 <_free_r+0x22>
 800a75a:	461a      	mov	r2, r3
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	b10b      	cbz	r3, 800a764 <_free_r+0x50>
 800a760:	42a3      	cmp	r3, r4
 800a762:	d9fa      	bls.n	800a75a <_free_r+0x46>
 800a764:	6811      	ldr	r1, [r2, #0]
 800a766:	1855      	adds	r5, r2, r1
 800a768:	42a5      	cmp	r5, r4
 800a76a:	d10b      	bne.n	800a784 <_free_r+0x70>
 800a76c:	6824      	ldr	r4, [r4, #0]
 800a76e:	4421      	add	r1, r4
 800a770:	1854      	adds	r4, r2, r1
 800a772:	42a3      	cmp	r3, r4
 800a774:	6011      	str	r1, [r2, #0]
 800a776:	d1e0      	bne.n	800a73a <_free_r+0x26>
 800a778:	681c      	ldr	r4, [r3, #0]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	6053      	str	r3, [r2, #4]
 800a77e:	440c      	add	r4, r1
 800a780:	6014      	str	r4, [r2, #0]
 800a782:	e7da      	b.n	800a73a <_free_r+0x26>
 800a784:	d902      	bls.n	800a78c <_free_r+0x78>
 800a786:	230c      	movs	r3, #12
 800a788:	6003      	str	r3, [r0, #0]
 800a78a:	e7d6      	b.n	800a73a <_free_r+0x26>
 800a78c:	6825      	ldr	r5, [r4, #0]
 800a78e:	1961      	adds	r1, r4, r5
 800a790:	428b      	cmp	r3, r1
 800a792:	bf04      	itt	eq
 800a794:	6819      	ldreq	r1, [r3, #0]
 800a796:	685b      	ldreq	r3, [r3, #4]
 800a798:	6063      	str	r3, [r4, #4]
 800a79a:	bf04      	itt	eq
 800a79c:	1949      	addeq	r1, r1, r5
 800a79e:	6021      	streq	r1, [r4, #0]
 800a7a0:	6054      	str	r4, [r2, #4]
 800a7a2:	e7ca      	b.n	800a73a <_free_r+0x26>
 800a7a4:	b003      	add	sp, #12
 800a7a6:	bd30      	pop	{r4, r5, pc}
 800a7a8:	20000864 	.word	0x20000864

0800a7ac <_Balloc>:
 800a7ac:	b570      	push	{r4, r5, r6, lr}
 800a7ae:	69c6      	ldr	r6, [r0, #28]
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	460d      	mov	r5, r1
 800a7b4:	b976      	cbnz	r6, 800a7d4 <_Balloc+0x28>
 800a7b6:	2010      	movs	r0, #16
 800a7b8:	f7fe f9f6 	bl	8008ba8 <malloc>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	61e0      	str	r0, [r4, #28]
 800a7c0:	b920      	cbnz	r0, 800a7cc <_Balloc+0x20>
 800a7c2:	4b18      	ldr	r3, [pc, #96]	; (800a824 <_Balloc+0x78>)
 800a7c4:	4818      	ldr	r0, [pc, #96]	; (800a828 <_Balloc+0x7c>)
 800a7c6:	216b      	movs	r1, #107	; 0x6b
 800a7c8:	f000 fd72 	bl	800b2b0 <__assert_func>
 800a7cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7d0:	6006      	str	r6, [r0, #0]
 800a7d2:	60c6      	str	r6, [r0, #12]
 800a7d4:	69e6      	ldr	r6, [r4, #28]
 800a7d6:	68f3      	ldr	r3, [r6, #12]
 800a7d8:	b183      	cbz	r3, 800a7fc <_Balloc+0x50>
 800a7da:	69e3      	ldr	r3, [r4, #28]
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7e2:	b9b8      	cbnz	r0, 800a814 <_Balloc+0x68>
 800a7e4:	2101      	movs	r1, #1
 800a7e6:	fa01 f605 	lsl.w	r6, r1, r5
 800a7ea:	1d72      	adds	r2, r6, #5
 800a7ec:	0092      	lsls	r2, r2, #2
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f000 fd7c 	bl	800b2ec <_calloc_r>
 800a7f4:	b160      	cbz	r0, 800a810 <_Balloc+0x64>
 800a7f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7fa:	e00e      	b.n	800a81a <_Balloc+0x6e>
 800a7fc:	2221      	movs	r2, #33	; 0x21
 800a7fe:	2104      	movs	r1, #4
 800a800:	4620      	mov	r0, r4
 800a802:	f000 fd73 	bl	800b2ec <_calloc_r>
 800a806:	69e3      	ldr	r3, [r4, #28]
 800a808:	60f0      	str	r0, [r6, #12]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1e4      	bne.n	800a7da <_Balloc+0x2e>
 800a810:	2000      	movs	r0, #0
 800a812:	bd70      	pop	{r4, r5, r6, pc}
 800a814:	6802      	ldr	r2, [r0, #0]
 800a816:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a81a:	2300      	movs	r3, #0
 800a81c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a820:	e7f7      	b.n	800a812 <_Balloc+0x66>
 800a822:	bf00      	nop
 800a824:	0800e659 	.word	0x0800e659
 800a828:	0800e6d9 	.word	0x0800e6d9

0800a82c <_Bfree>:
 800a82c:	b570      	push	{r4, r5, r6, lr}
 800a82e:	69c6      	ldr	r6, [r0, #28]
 800a830:	4605      	mov	r5, r0
 800a832:	460c      	mov	r4, r1
 800a834:	b976      	cbnz	r6, 800a854 <_Bfree+0x28>
 800a836:	2010      	movs	r0, #16
 800a838:	f7fe f9b6 	bl	8008ba8 <malloc>
 800a83c:	4602      	mov	r2, r0
 800a83e:	61e8      	str	r0, [r5, #28]
 800a840:	b920      	cbnz	r0, 800a84c <_Bfree+0x20>
 800a842:	4b09      	ldr	r3, [pc, #36]	; (800a868 <_Bfree+0x3c>)
 800a844:	4809      	ldr	r0, [pc, #36]	; (800a86c <_Bfree+0x40>)
 800a846:	218f      	movs	r1, #143	; 0x8f
 800a848:	f000 fd32 	bl	800b2b0 <__assert_func>
 800a84c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a850:	6006      	str	r6, [r0, #0]
 800a852:	60c6      	str	r6, [r0, #12]
 800a854:	b13c      	cbz	r4, 800a866 <_Bfree+0x3a>
 800a856:	69eb      	ldr	r3, [r5, #28]
 800a858:	6862      	ldr	r2, [r4, #4]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a860:	6021      	str	r1, [r4, #0]
 800a862:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a866:	bd70      	pop	{r4, r5, r6, pc}
 800a868:	0800e659 	.word	0x0800e659
 800a86c:	0800e6d9 	.word	0x0800e6d9

0800a870 <__multadd>:
 800a870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a874:	690d      	ldr	r5, [r1, #16]
 800a876:	4607      	mov	r7, r0
 800a878:	460c      	mov	r4, r1
 800a87a:	461e      	mov	r6, r3
 800a87c:	f101 0c14 	add.w	ip, r1, #20
 800a880:	2000      	movs	r0, #0
 800a882:	f8dc 3000 	ldr.w	r3, [ip]
 800a886:	b299      	uxth	r1, r3
 800a888:	fb02 6101 	mla	r1, r2, r1, r6
 800a88c:	0c1e      	lsrs	r6, r3, #16
 800a88e:	0c0b      	lsrs	r3, r1, #16
 800a890:	fb02 3306 	mla	r3, r2, r6, r3
 800a894:	b289      	uxth	r1, r1
 800a896:	3001      	adds	r0, #1
 800a898:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a89c:	4285      	cmp	r5, r0
 800a89e:	f84c 1b04 	str.w	r1, [ip], #4
 800a8a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8a6:	dcec      	bgt.n	800a882 <__multadd+0x12>
 800a8a8:	b30e      	cbz	r6, 800a8ee <__multadd+0x7e>
 800a8aa:	68a3      	ldr	r3, [r4, #8]
 800a8ac:	42ab      	cmp	r3, r5
 800a8ae:	dc19      	bgt.n	800a8e4 <__multadd+0x74>
 800a8b0:	6861      	ldr	r1, [r4, #4]
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	3101      	adds	r1, #1
 800a8b6:	f7ff ff79 	bl	800a7ac <_Balloc>
 800a8ba:	4680      	mov	r8, r0
 800a8bc:	b928      	cbnz	r0, 800a8ca <__multadd+0x5a>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	4b0c      	ldr	r3, [pc, #48]	; (800a8f4 <__multadd+0x84>)
 800a8c2:	480d      	ldr	r0, [pc, #52]	; (800a8f8 <__multadd+0x88>)
 800a8c4:	21ba      	movs	r1, #186	; 0xba
 800a8c6:	f000 fcf3 	bl	800b2b0 <__assert_func>
 800a8ca:	6922      	ldr	r2, [r4, #16]
 800a8cc:	3202      	adds	r2, #2
 800a8ce:	f104 010c 	add.w	r1, r4, #12
 800a8d2:	0092      	lsls	r2, r2, #2
 800a8d4:	300c      	adds	r0, #12
 800a8d6:	f7ff f895 	bl	8009a04 <memcpy>
 800a8da:	4621      	mov	r1, r4
 800a8dc:	4638      	mov	r0, r7
 800a8de:	f7ff ffa5 	bl	800a82c <_Bfree>
 800a8e2:	4644      	mov	r4, r8
 800a8e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8e8:	3501      	adds	r5, #1
 800a8ea:	615e      	str	r6, [r3, #20]
 800a8ec:	6125      	str	r5, [r4, #16]
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f4:	0800e6c8 	.word	0x0800e6c8
 800a8f8:	0800e6d9 	.word	0x0800e6d9

0800a8fc <__hi0bits>:
 800a8fc:	0c03      	lsrs	r3, r0, #16
 800a8fe:	041b      	lsls	r3, r3, #16
 800a900:	b9d3      	cbnz	r3, 800a938 <__hi0bits+0x3c>
 800a902:	0400      	lsls	r0, r0, #16
 800a904:	2310      	movs	r3, #16
 800a906:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a90a:	bf04      	itt	eq
 800a90c:	0200      	lsleq	r0, r0, #8
 800a90e:	3308      	addeq	r3, #8
 800a910:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a914:	bf04      	itt	eq
 800a916:	0100      	lsleq	r0, r0, #4
 800a918:	3304      	addeq	r3, #4
 800a91a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a91e:	bf04      	itt	eq
 800a920:	0080      	lsleq	r0, r0, #2
 800a922:	3302      	addeq	r3, #2
 800a924:	2800      	cmp	r0, #0
 800a926:	db05      	blt.n	800a934 <__hi0bits+0x38>
 800a928:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a92c:	f103 0301 	add.w	r3, r3, #1
 800a930:	bf08      	it	eq
 800a932:	2320      	moveq	r3, #32
 800a934:	4618      	mov	r0, r3
 800a936:	4770      	bx	lr
 800a938:	2300      	movs	r3, #0
 800a93a:	e7e4      	b.n	800a906 <__hi0bits+0xa>

0800a93c <__lo0bits>:
 800a93c:	6803      	ldr	r3, [r0, #0]
 800a93e:	f013 0207 	ands.w	r2, r3, #7
 800a942:	d00c      	beq.n	800a95e <__lo0bits+0x22>
 800a944:	07d9      	lsls	r1, r3, #31
 800a946:	d422      	bmi.n	800a98e <__lo0bits+0x52>
 800a948:	079a      	lsls	r2, r3, #30
 800a94a:	bf49      	itett	mi
 800a94c:	085b      	lsrmi	r3, r3, #1
 800a94e:	089b      	lsrpl	r3, r3, #2
 800a950:	6003      	strmi	r3, [r0, #0]
 800a952:	2201      	movmi	r2, #1
 800a954:	bf5c      	itt	pl
 800a956:	6003      	strpl	r3, [r0, #0]
 800a958:	2202      	movpl	r2, #2
 800a95a:	4610      	mov	r0, r2
 800a95c:	4770      	bx	lr
 800a95e:	b299      	uxth	r1, r3
 800a960:	b909      	cbnz	r1, 800a966 <__lo0bits+0x2a>
 800a962:	0c1b      	lsrs	r3, r3, #16
 800a964:	2210      	movs	r2, #16
 800a966:	b2d9      	uxtb	r1, r3
 800a968:	b909      	cbnz	r1, 800a96e <__lo0bits+0x32>
 800a96a:	3208      	adds	r2, #8
 800a96c:	0a1b      	lsrs	r3, r3, #8
 800a96e:	0719      	lsls	r1, r3, #28
 800a970:	bf04      	itt	eq
 800a972:	091b      	lsreq	r3, r3, #4
 800a974:	3204      	addeq	r2, #4
 800a976:	0799      	lsls	r1, r3, #30
 800a978:	bf04      	itt	eq
 800a97a:	089b      	lsreq	r3, r3, #2
 800a97c:	3202      	addeq	r2, #2
 800a97e:	07d9      	lsls	r1, r3, #31
 800a980:	d403      	bmi.n	800a98a <__lo0bits+0x4e>
 800a982:	085b      	lsrs	r3, r3, #1
 800a984:	f102 0201 	add.w	r2, r2, #1
 800a988:	d003      	beq.n	800a992 <__lo0bits+0x56>
 800a98a:	6003      	str	r3, [r0, #0]
 800a98c:	e7e5      	b.n	800a95a <__lo0bits+0x1e>
 800a98e:	2200      	movs	r2, #0
 800a990:	e7e3      	b.n	800a95a <__lo0bits+0x1e>
 800a992:	2220      	movs	r2, #32
 800a994:	e7e1      	b.n	800a95a <__lo0bits+0x1e>
	...

0800a998 <__i2b>:
 800a998:	b510      	push	{r4, lr}
 800a99a:	460c      	mov	r4, r1
 800a99c:	2101      	movs	r1, #1
 800a99e:	f7ff ff05 	bl	800a7ac <_Balloc>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	b928      	cbnz	r0, 800a9b2 <__i2b+0x1a>
 800a9a6:	4b05      	ldr	r3, [pc, #20]	; (800a9bc <__i2b+0x24>)
 800a9a8:	4805      	ldr	r0, [pc, #20]	; (800a9c0 <__i2b+0x28>)
 800a9aa:	f240 1145 	movw	r1, #325	; 0x145
 800a9ae:	f000 fc7f 	bl	800b2b0 <__assert_func>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	6144      	str	r4, [r0, #20]
 800a9b6:	6103      	str	r3, [r0, #16]
 800a9b8:	bd10      	pop	{r4, pc}
 800a9ba:	bf00      	nop
 800a9bc:	0800e6c8 	.word	0x0800e6c8
 800a9c0:	0800e6d9 	.word	0x0800e6d9

0800a9c4 <__multiply>:
 800a9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c8:	4691      	mov	r9, r2
 800a9ca:	690a      	ldr	r2, [r1, #16]
 800a9cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	bfb8      	it	lt
 800a9d4:	460b      	movlt	r3, r1
 800a9d6:	460c      	mov	r4, r1
 800a9d8:	bfbc      	itt	lt
 800a9da:	464c      	movlt	r4, r9
 800a9dc:	4699      	movlt	r9, r3
 800a9de:	6927      	ldr	r7, [r4, #16]
 800a9e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a9e4:	68a3      	ldr	r3, [r4, #8]
 800a9e6:	6861      	ldr	r1, [r4, #4]
 800a9e8:	eb07 060a 	add.w	r6, r7, sl
 800a9ec:	42b3      	cmp	r3, r6
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	bfb8      	it	lt
 800a9f2:	3101      	addlt	r1, #1
 800a9f4:	f7ff feda 	bl	800a7ac <_Balloc>
 800a9f8:	b930      	cbnz	r0, 800aa08 <__multiply+0x44>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	4b44      	ldr	r3, [pc, #272]	; (800ab10 <__multiply+0x14c>)
 800a9fe:	4845      	ldr	r0, [pc, #276]	; (800ab14 <__multiply+0x150>)
 800aa00:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aa04:	f000 fc54 	bl	800b2b0 <__assert_func>
 800aa08:	f100 0514 	add.w	r5, r0, #20
 800aa0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa10:	462b      	mov	r3, r5
 800aa12:	2200      	movs	r2, #0
 800aa14:	4543      	cmp	r3, r8
 800aa16:	d321      	bcc.n	800aa5c <__multiply+0x98>
 800aa18:	f104 0314 	add.w	r3, r4, #20
 800aa1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa20:	f109 0314 	add.w	r3, r9, #20
 800aa24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa28:	9202      	str	r2, [sp, #8]
 800aa2a:	1b3a      	subs	r2, r7, r4
 800aa2c:	3a15      	subs	r2, #21
 800aa2e:	f022 0203 	bic.w	r2, r2, #3
 800aa32:	3204      	adds	r2, #4
 800aa34:	f104 0115 	add.w	r1, r4, #21
 800aa38:	428f      	cmp	r7, r1
 800aa3a:	bf38      	it	cc
 800aa3c:	2204      	movcc	r2, #4
 800aa3e:	9201      	str	r2, [sp, #4]
 800aa40:	9a02      	ldr	r2, [sp, #8]
 800aa42:	9303      	str	r3, [sp, #12]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d80c      	bhi.n	800aa62 <__multiply+0x9e>
 800aa48:	2e00      	cmp	r6, #0
 800aa4a:	dd03      	ble.n	800aa54 <__multiply+0x90>
 800aa4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d05b      	beq.n	800ab0c <__multiply+0x148>
 800aa54:	6106      	str	r6, [r0, #16]
 800aa56:	b005      	add	sp, #20
 800aa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5c:	f843 2b04 	str.w	r2, [r3], #4
 800aa60:	e7d8      	b.n	800aa14 <__multiply+0x50>
 800aa62:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa66:	f1ba 0f00 	cmp.w	sl, #0
 800aa6a:	d024      	beq.n	800aab6 <__multiply+0xf2>
 800aa6c:	f104 0e14 	add.w	lr, r4, #20
 800aa70:	46a9      	mov	r9, r5
 800aa72:	f04f 0c00 	mov.w	ip, #0
 800aa76:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aa7a:	f8d9 1000 	ldr.w	r1, [r9]
 800aa7e:	fa1f fb82 	uxth.w	fp, r2
 800aa82:	b289      	uxth	r1, r1
 800aa84:	fb0a 110b 	mla	r1, sl, fp, r1
 800aa88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aa8c:	f8d9 2000 	ldr.w	r2, [r9]
 800aa90:	4461      	add	r1, ip
 800aa92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aa96:	fb0a c20b 	mla	r2, sl, fp, ip
 800aa9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aa9e:	b289      	uxth	r1, r1
 800aaa0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aaa4:	4577      	cmp	r7, lr
 800aaa6:	f849 1b04 	str.w	r1, [r9], #4
 800aaaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aaae:	d8e2      	bhi.n	800aa76 <__multiply+0xb2>
 800aab0:	9a01      	ldr	r2, [sp, #4]
 800aab2:	f845 c002 	str.w	ip, [r5, r2]
 800aab6:	9a03      	ldr	r2, [sp, #12]
 800aab8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aabc:	3304      	adds	r3, #4
 800aabe:	f1b9 0f00 	cmp.w	r9, #0
 800aac2:	d021      	beq.n	800ab08 <__multiply+0x144>
 800aac4:	6829      	ldr	r1, [r5, #0]
 800aac6:	f104 0c14 	add.w	ip, r4, #20
 800aaca:	46ae      	mov	lr, r5
 800aacc:	f04f 0a00 	mov.w	sl, #0
 800aad0:	f8bc b000 	ldrh.w	fp, [ip]
 800aad4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aad8:	fb09 220b 	mla	r2, r9, fp, r2
 800aadc:	4452      	add	r2, sl
 800aade:	b289      	uxth	r1, r1
 800aae0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aae4:	f84e 1b04 	str.w	r1, [lr], #4
 800aae8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800aaec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aaf0:	f8be 1000 	ldrh.w	r1, [lr]
 800aaf4:	fb09 110a 	mla	r1, r9, sl, r1
 800aaf8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800aafc:	4567      	cmp	r7, ip
 800aafe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab02:	d8e5      	bhi.n	800aad0 <__multiply+0x10c>
 800ab04:	9a01      	ldr	r2, [sp, #4]
 800ab06:	50a9      	str	r1, [r5, r2]
 800ab08:	3504      	adds	r5, #4
 800ab0a:	e799      	b.n	800aa40 <__multiply+0x7c>
 800ab0c:	3e01      	subs	r6, #1
 800ab0e:	e79b      	b.n	800aa48 <__multiply+0x84>
 800ab10:	0800e6c8 	.word	0x0800e6c8
 800ab14:	0800e6d9 	.word	0x0800e6d9

0800ab18 <__pow5mult>:
 800ab18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab1c:	4615      	mov	r5, r2
 800ab1e:	f012 0203 	ands.w	r2, r2, #3
 800ab22:	4606      	mov	r6, r0
 800ab24:	460f      	mov	r7, r1
 800ab26:	d007      	beq.n	800ab38 <__pow5mult+0x20>
 800ab28:	4c25      	ldr	r4, [pc, #148]	; (800abc0 <__pow5mult+0xa8>)
 800ab2a:	3a01      	subs	r2, #1
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab32:	f7ff fe9d 	bl	800a870 <__multadd>
 800ab36:	4607      	mov	r7, r0
 800ab38:	10ad      	asrs	r5, r5, #2
 800ab3a:	d03d      	beq.n	800abb8 <__pow5mult+0xa0>
 800ab3c:	69f4      	ldr	r4, [r6, #28]
 800ab3e:	b97c      	cbnz	r4, 800ab60 <__pow5mult+0x48>
 800ab40:	2010      	movs	r0, #16
 800ab42:	f7fe f831 	bl	8008ba8 <malloc>
 800ab46:	4602      	mov	r2, r0
 800ab48:	61f0      	str	r0, [r6, #28]
 800ab4a:	b928      	cbnz	r0, 800ab58 <__pow5mult+0x40>
 800ab4c:	4b1d      	ldr	r3, [pc, #116]	; (800abc4 <__pow5mult+0xac>)
 800ab4e:	481e      	ldr	r0, [pc, #120]	; (800abc8 <__pow5mult+0xb0>)
 800ab50:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ab54:	f000 fbac 	bl	800b2b0 <__assert_func>
 800ab58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab5c:	6004      	str	r4, [r0, #0]
 800ab5e:	60c4      	str	r4, [r0, #12]
 800ab60:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ab64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab68:	b94c      	cbnz	r4, 800ab7e <__pow5mult+0x66>
 800ab6a:	f240 2171 	movw	r1, #625	; 0x271
 800ab6e:	4630      	mov	r0, r6
 800ab70:	f7ff ff12 	bl	800a998 <__i2b>
 800ab74:	2300      	movs	r3, #0
 800ab76:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	6003      	str	r3, [r0, #0]
 800ab7e:	f04f 0900 	mov.w	r9, #0
 800ab82:	07eb      	lsls	r3, r5, #31
 800ab84:	d50a      	bpl.n	800ab9c <__pow5mult+0x84>
 800ab86:	4639      	mov	r1, r7
 800ab88:	4622      	mov	r2, r4
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	f7ff ff1a 	bl	800a9c4 <__multiply>
 800ab90:	4639      	mov	r1, r7
 800ab92:	4680      	mov	r8, r0
 800ab94:	4630      	mov	r0, r6
 800ab96:	f7ff fe49 	bl	800a82c <_Bfree>
 800ab9a:	4647      	mov	r7, r8
 800ab9c:	106d      	asrs	r5, r5, #1
 800ab9e:	d00b      	beq.n	800abb8 <__pow5mult+0xa0>
 800aba0:	6820      	ldr	r0, [r4, #0]
 800aba2:	b938      	cbnz	r0, 800abb4 <__pow5mult+0x9c>
 800aba4:	4622      	mov	r2, r4
 800aba6:	4621      	mov	r1, r4
 800aba8:	4630      	mov	r0, r6
 800abaa:	f7ff ff0b 	bl	800a9c4 <__multiply>
 800abae:	6020      	str	r0, [r4, #0]
 800abb0:	f8c0 9000 	str.w	r9, [r0]
 800abb4:	4604      	mov	r4, r0
 800abb6:	e7e4      	b.n	800ab82 <__pow5mult+0x6a>
 800abb8:	4638      	mov	r0, r7
 800abba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abbe:	bf00      	nop
 800abc0:	0800e828 	.word	0x0800e828
 800abc4:	0800e659 	.word	0x0800e659
 800abc8:	0800e6d9 	.word	0x0800e6d9

0800abcc <__lshift>:
 800abcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abd0:	460c      	mov	r4, r1
 800abd2:	6849      	ldr	r1, [r1, #4]
 800abd4:	6923      	ldr	r3, [r4, #16]
 800abd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abda:	68a3      	ldr	r3, [r4, #8]
 800abdc:	4607      	mov	r7, r0
 800abde:	4691      	mov	r9, r2
 800abe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abe4:	f108 0601 	add.w	r6, r8, #1
 800abe8:	42b3      	cmp	r3, r6
 800abea:	db0b      	blt.n	800ac04 <__lshift+0x38>
 800abec:	4638      	mov	r0, r7
 800abee:	f7ff fddd 	bl	800a7ac <_Balloc>
 800abf2:	4605      	mov	r5, r0
 800abf4:	b948      	cbnz	r0, 800ac0a <__lshift+0x3e>
 800abf6:	4602      	mov	r2, r0
 800abf8:	4b28      	ldr	r3, [pc, #160]	; (800ac9c <__lshift+0xd0>)
 800abfa:	4829      	ldr	r0, [pc, #164]	; (800aca0 <__lshift+0xd4>)
 800abfc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ac00:	f000 fb56 	bl	800b2b0 <__assert_func>
 800ac04:	3101      	adds	r1, #1
 800ac06:	005b      	lsls	r3, r3, #1
 800ac08:	e7ee      	b.n	800abe8 <__lshift+0x1c>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	f100 0114 	add.w	r1, r0, #20
 800ac10:	f100 0210 	add.w	r2, r0, #16
 800ac14:	4618      	mov	r0, r3
 800ac16:	4553      	cmp	r3, sl
 800ac18:	db33      	blt.n	800ac82 <__lshift+0xb6>
 800ac1a:	6920      	ldr	r0, [r4, #16]
 800ac1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac20:	f104 0314 	add.w	r3, r4, #20
 800ac24:	f019 091f 	ands.w	r9, r9, #31
 800ac28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac30:	d02b      	beq.n	800ac8a <__lshift+0xbe>
 800ac32:	f1c9 0e20 	rsb	lr, r9, #32
 800ac36:	468a      	mov	sl, r1
 800ac38:	2200      	movs	r2, #0
 800ac3a:	6818      	ldr	r0, [r3, #0]
 800ac3c:	fa00 f009 	lsl.w	r0, r0, r9
 800ac40:	4310      	orrs	r0, r2
 800ac42:	f84a 0b04 	str.w	r0, [sl], #4
 800ac46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac4a:	459c      	cmp	ip, r3
 800ac4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac50:	d8f3      	bhi.n	800ac3a <__lshift+0x6e>
 800ac52:	ebac 0304 	sub.w	r3, ip, r4
 800ac56:	3b15      	subs	r3, #21
 800ac58:	f023 0303 	bic.w	r3, r3, #3
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	f104 0015 	add.w	r0, r4, #21
 800ac62:	4584      	cmp	ip, r0
 800ac64:	bf38      	it	cc
 800ac66:	2304      	movcc	r3, #4
 800ac68:	50ca      	str	r2, [r1, r3]
 800ac6a:	b10a      	cbz	r2, 800ac70 <__lshift+0xa4>
 800ac6c:	f108 0602 	add.w	r6, r8, #2
 800ac70:	3e01      	subs	r6, #1
 800ac72:	4638      	mov	r0, r7
 800ac74:	612e      	str	r6, [r5, #16]
 800ac76:	4621      	mov	r1, r4
 800ac78:	f7ff fdd8 	bl	800a82c <_Bfree>
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac82:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac86:	3301      	adds	r3, #1
 800ac88:	e7c5      	b.n	800ac16 <__lshift+0x4a>
 800ac8a:	3904      	subs	r1, #4
 800ac8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac90:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac94:	459c      	cmp	ip, r3
 800ac96:	d8f9      	bhi.n	800ac8c <__lshift+0xc0>
 800ac98:	e7ea      	b.n	800ac70 <__lshift+0xa4>
 800ac9a:	bf00      	nop
 800ac9c:	0800e6c8 	.word	0x0800e6c8
 800aca0:	0800e6d9 	.word	0x0800e6d9

0800aca4 <__mcmp>:
 800aca4:	b530      	push	{r4, r5, lr}
 800aca6:	6902      	ldr	r2, [r0, #16]
 800aca8:	690c      	ldr	r4, [r1, #16]
 800acaa:	1b12      	subs	r2, r2, r4
 800acac:	d10e      	bne.n	800accc <__mcmp+0x28>
 800acae:	f100 0314 	add.w	r3, r0, #20
 800acb2:	3114      	adds	r1, #20
 800acb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800acb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800acbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800acc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800acc4:	42a5      	cmp	r5, r4
 800acc6:	d003      	beq.n	800acd0 <__mcmp+0x2c>
 800acc8:	d305      	bcc.n	800acd6 <__mcmp+0x32>
 800acca:	2201      	movs	r2, #1
 800accc:	4610      	mov	r0, r2
 800acce:	bd30      	pop	{r4, r5, pc}
 800acd0:	4283      	cmp	r3, r0
 800acd2:	d3f3      	bcc.n	800acbc <__mcmp+0x18>
 800acd4:	e7fa      	b.n	800accc <__mcmp+0x28>
 800acd6:	f04f 32ff 	mov.w	r2, #4294967295
 800acda:	e7f7      	b.n	800accc <__mcmp+0x28>

0800acdc <__mdiff>:
 800acdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace0:	460c      	mov	r4, r1
 800ace2:	4606      	mov	r6, r0
 800ace4:	4611      	mov	r1, r2
 800ace6:	4620      	mov	r0, r4
 800ace8:	4690      	mov	r8, r2
 800acea:	f7ff ffdb 	bl	800aca4 <__mcmp>
 800acee:	1e05      	subs	r5, r0, #0
 800acf0:	d110      	bne.n	800ad14 <__mdiff+0x38>
 800acf2:	4629      	mov	r1, r5
 800acf4:	4630      	mov	r0, r6
 800acf6:	f7ff fd59 	bl	800a7ac <_Balloc>
 800acfa:	b930      	cbnz	r0, 800ad0a <__mdiff+0x2e>
 800acfc:	4b3a      	ldr	r3, [pc, #232]	; (800ade8 <__mdiff+0x10c>)
 800acfe:	4602      	mov	r2, r0
 800ad00:	f240 2137 	movw	r1, #567	; 0x237
 800ad04:	4839      	ldr	r0, [pc, #228]	; (800adec <__mdiff+0x110>)
 800ad06:	f000 fad3 	bl	800b2b0 <__assert_func>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad14:	bfa4      	itt	ge
 800ad16:	4643      	movge	r3, r8
 800ad18:	46a0      	movge	r8, r4
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad20:	bfa6      	itte	ge
 800ad22:	461c      	movge	r4, r3
 800ad24:	2500      	movge	r5, #0
 800ad26:	2501      	movlt	r5, #1
 800ad28:	f7ff fd40 	bl	800a7ac <_Balloc>
 800ad2c:	b920      	cbnz	r0, 800ad38 <__mdiff+0x5c>
 800ad2e:	4b2e      	ldr	r3, [pc, #184]	; (800ade8 <__mdiff+0x10c>)
 800ad30:	4602      	mov	r2, r0
 800ad32:	f240 2145 	movw	r1, #581	; 0x245
 800ad36:	e7e5      	b.n	800ad04 <__mdiff+0x28>
 800ad38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad3c:	6926      	ldr	r6, [r4, #16]
 800ad3e:	60c5      	str	r5, [r0, #12]
 800ad40:	f104 0914 	add.w	r9, r4, #20
 800ad44:	f108 0514 	add.w	r5, r8, #20
 800ad48:	f100 0e14 	add.w	lr, r0, #20
 800ad4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ad50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ad54:	f108 0210 	add.w	r2, r8, #16
 800ad58:	46f2      	mov	sl, lr
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad64:	fa11 f88b 	uxtah	r8, r1, fp
 800ad68:	b299      	uxth	r1, r3
 800ad6a:	0c1b      	lsrs	r3, r3, #16
 800ad6c:	eba8 0801 	sub.w	r8, r8, r1
 800ad70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad74:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad78:	fa1f f888 	uxth.w	r8, r8
 800ad7c:	1419      	asrs	r1, r3, #16
 800ad7e:	454e      	cmp	r6, r9
 800ad80:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad84:	f84a 3b04 	str.w	r3, [sl], #4
 800ad88:	d8e8      	bhi.n	800ad5c <__mdiff+0x80>
 800ad8a:	1b33      	subs	r3, r6, r4
 800ad8c:	3b15      	subs	r3, #21
 800ad8e:	f023 0303 	bic.w	r3, r3, #3
 800ad92:	3304      	adds	r3, #4
 800ad94:	3415      	adds	r4, #21
 800ad96:	42a6      	cmp	r6, r4
 800ad98:	bf38      	it	cc
 800ad9a:	2304      	movcc	r3, #4
 800ad9c:	441d      	add	r5, r3
 800ad9e:	4473      	add	r3, lr
 800ada0:	469e      	mov	lr, r3
 800ada2:	462e      	mov	r6, r5
 800ada4:	4566      	cmp	r6, ip
 800ada6:	d30e      	bcc.n	800adc6 <__mdiff+0xea>
 800ada8:	f10c 0203 	add.w	r2, ip, #3
 800adac:	1b52      	subs	r2, r2, r5
 800adae:	f022 0203 	bic.w	r2, r2, #3
 800adb2:	3d03      	subs	r5, #3
 800adb4:	45ac      	cmp	ip, r5
 800adb6:	bf38      	it	cc
 800adb8:	2200      	movcc	r2, #0
 800adba:	4413      	add	r3, r2
 800adbc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800adc0:	b17a      	cbz	r2, 800ade2 <__mdiff+0x106>
 800adc2:	6107      	str	r7, [r0, #16]
 800adc4:	e7a4      	b.n	800ad10 <__mdiff+0x34>
 800adc6:	f856 8b04 	ldr.w	r8, [r6], #4
 800adca:	fa11 f288 	uxtah	r2, r1, r8
 800adce:	1414      	asrs	r4, r2, #16
 800add0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800add4:	b292      	uxth	r2, r2
 800add6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800adda:	f84e 2b04 	str.w	r2, [lr], #4
 800adde:	1421      	asrs	r1, r4, #16
 800ade0:	e7e0      	b.n	800ada4 <__mdiff+0xc8>
 800ade2:	3f01      	subs	r7, #1
 800ade4:	e7ea      	b.n	800adbc <__mdiff+0xe0>
 800ade6:	bf00      	nop
 800ade8:	0800e6c8 	.word	0x0800e6c8
 800adec:	0800e6d9 	.word	0x0800e6d9

0800adf0 <__d2b>:
 800adf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adf4:	460f      	mov	r7, r1
 800adf6:	2101      	movs	r1, #1
 800adf8:	ec59 8b10 	vmov	r8, r9, d0
 800adfc:	4616      	mov	r6, r2
 800adfe:	f7ff fcd5 	bl	800a7ac <_Balloc>
 800ae02:	4604      	mov	r4, r0
 800ae04:	b930      	cbnz	r0, 800ae14 <__d2b+0x24>
 800ae06:	4602      	mov	r2, r0
 800ae08:	4b24      	ldr	r3, [pc, #144]	; (800ae9c <__d2b+0xac>)
 800ae0a:	4825      	ldr	r0, [pc, #148]	; (800aea0 <__d2b+0xb0>)
 800ae0c:	f240 310f 	movw	r1, #783	; 0x30f
 800ae10:	f000 fa4e 	bl	800b2b0 <__assert_func>
 800ae14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae1c:	bb2d      	cbnz	r5, 800ae6a <__d2b+0x7a>
 800ae1e:	9301      	str	r3, [sp, #4]
 800ae20:	f1b8 0300 	subs.w	r3, r8, #0
 800ae24:	d026      	beq.n	800ae74 <__d2b+0x84>
 800ae26:	4668      	mov	r0, sp
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	f7ff fd87 	bl	800a93c <__lo0bits>
 800ae2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae32:	b1e8      	cbz	r0, 800ae70 <__d2b+0x80>
 800ae34:	f1c0 0320 	rsb	r3, r0, #32
 800ae38:	fa02 f303 	lsl.w	r3, r2, r3
 800ae3c:	430b      	orrs	r3, r1
 800ae3e:	40c2      	lsrs	r2, r0
 800ae40:	6163      	str	r3, [r4, #20]
 800ae42:	9201      	str	r2, [sp, #4]
 800ae44:	9b01      	ldr	r3, [sp, #4]
 800ae46:	61a3      	str	r3, [r4, #24]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	bf14      	ite	ne
 800ae4c:	2202      	movne	r2, #2
 800ae4e:	2201      	moveq	r2, #1
 800ae50:	6122      	str	r2, [r4, #16]
 800ae52:	b1bd      	cbz	r5, 800ae84 <__d2b+0x94>
 800ae54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae58:	4405      	add	r5, r0
 800ae5a:	603d      	str	r5, [r7, #0]
 800ae5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae60:	6030      	str	r0, [r6, #0]
 800ae62:	4620      	mov	r0, r4
 800ae64:	b003      	add	sp, #12
 800ae66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae6e:	e7d6      	b.n	800ae1e <__d2b+0x2e>
 800ae70:	6161      	str	r1, [r4, #20]
 800ae72:	e7e7      	b.n	800ae44 <__d2b+0x54>
 800ae74:	a801      	add	r0, sp, #4
 800ae76:	f7ff fd61 	bl	800a93c <__lo0bits>
 800ae7a:	9b01      	ldr	r3, [sp, #4]
 800ae7c:	6163      	str	r3, [r4, #20]
 800ae7e:	3020      	adds	r0, #32
 800ae80:	2201      	movs	r2, #1
 800ae82:	e7e5      	b.n	800ae50 <__d2b+0x60>
 800ae84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae8c:	6038      	str	r0, [r7, #0]
 800ae8e:	6918      	ldr	r0, [r3, #16]
 800ae90:	f7ff fd34 	bl	800a8fc <__hi0bits>
 800ae94:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae98:	e7e2      	b.n	800ae60 <__d2b+0x70>
 800ae9a:	bf00      	nop
 800ae9c:	0800e6c8 	.word	0x0800e6c8
 800aea0:	0800e6d9 	.word	0x0800e6d9

0800aea4 <__ssputs_r>:
 800aea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aea8:	688e      	ldr	r6, [r1, #8]
 800aeaa:	461f      	mov	r7, r3
 800aeac:	42be      	cmp	r6, r7
 800aeae:	680b      	ldr	r3, [r1, #0]
 800aeb0:	4682      	mov	sl, r0
 800aeb2:	460c      	mov	r4, r1
 800aeb4:	4690      	mov	r8, r2
 800aeb6:	d82c      	bhi.n	800af12 <__ssputs_r+0x6e>
 800aeb8:	898a      	ldrh	r2, [r1, #12]
 800aeba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aebe:	d026      	beq.n	800af0e <__ssputs_r+0x6a>
 800aec0:	6965      	ldr	r5, [r4, #20]
 800aec2:	6909      	ldr	r1, [r1, #16]
 800aec4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aec8:	eba3 0901 	sub.w	r9, r3, r1
 800aecc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aed0:	1c7b      	adds	r3, r7, #1
 800aed2:	444b      	add	r3, r9
 800aed4:	106d      	asrs	r5, r5, #1
 800aed6:	429d      	cmp	r5, r3
 800aed8:	bf38      	it	cc
 800aeda:	461d      	movcc	r5, r3
 800aedc:	0553      	lsls	r3, r2, #21
 800aede:	d527      	bpl.n	800af30 <__ssputs_r+0x8c>
 800aee0:	4629      	mov	r1, r5
 800aee2:	f7fd fe89 	bl	8008bf8 <_malloc_r>
 800aee6:	4606      	mov	r6, r0
 800aee8:	b360      	cbz	r0, 800af44 <__ssputs_r+0xa0>
 800aeea:	6921      	ldr	r1, [r4, #16]
 800aeec:	464a      	mov	r2, r9
 800aeee:	f7fe fd89 	bl	8009a04 <memcpy>
 800aef2:	89a3      	ldrh	r3, [r4, #12]
 800aef4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aefc:	81a3      	strh	r3, [r4, #12]
 800aefe:	6126      	str	r6, [r4, #16]
 800af00:	6165      	str	r5, [r4, #20]
 800af02:	444e      	add	r6, r9
 800af04:	eba5 0509 	sub.w	r5, r5, r9
 800af08:	6026      	str	r6, [r4, #0]
 800af0a:	60a5      	str	r5, [r4, #8]
 800af0c:	463e      	mov	r6, r7
 800af0e:	42be      	cmp	r6, r7
 800af10:	d900      	bls.n	800af14 <__ssputs_r+0x70>
 800af12:	463e      	mov	r6, r7
 800af14:	6820      	ldr	r0, [r4, #0]
 800af16:	4632      	mov	r2, r6
 800af18:	4641      	mov	r1, r8
 800af1a:	f7fe fc86 	bl	800982a <memmove>
 800af1e:	68a3      	ldr	r3, [r4, #8]
 800af20:	1b9b      	subs	r3, r3, r6
 800af22:	60a3      	str	r3, [r4, #8]
 800af24:	6823      	ldr	r3, [r4, #0]
 800af26:	4433      	add	r3, r6
 800af28:	6023      	str	r3, [r4, #0]
 800af2a:	2000      	movs	r0, #0
 800af2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af30:	462a      	mov	r2, r5
 800af32:	f000 fa03 	bl	800b33c <_realloc_r>
 800af36:	4606      	mov	r6, r0
 800af38:	2800      	cmp	r0, #0
 800af3a:	d1e0      	bne.n	800aefe <__ssputs_r+0x5a>
 800af3c:	6921      	ldr	r1, [r4, #16]
 800af3e:	4650      	mov	r0, sl
 800af40:	f7ff fbe8 	bl	800a714 <_free_r>
 800af44:	230c      	movs	r3, #12
 800af46:	f8ca 3000 	str.w	r3, [sl]
 800af4a:	89a3      	ldrh	r3, [r4, #12]
 800af4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af50:	81a3      	strh	r3, [r4, #12]
 800af52:	f04f 30ff 	mov.w	r0, #4294967295
 800af56:	e7e9      	b.n	800af2c <__ssputs_r+0x88>

0800af58 <_svfiprintf_r>:
 800af58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5c:	4698      	mov	r8, r3
 800af5e:	898b      	ldrh	r3, [r1, #12]
 800af60:	061b      	lsls	r3, r3, #24
 800af62:	b09d      	sub	sp, #116	; 0x74
 800af64:	4607      	mov	r7, r0
 800af66:	460d      	mov	r5, r1
 800af68:	4614      	mov	r4, r2
 800af6a:	d50e      	bpl.n	800af8a <_svfiprintf_r+0x32>
 800af6c:	690b      	ldr	r3, [r1, #16]
 800af6e:	b963      	cbnz	r3, 800af8a <_svfiprintf_r+0x32>
 800af70:	2140      	movs	r1, #64	; 0x40
 800af72:	f7fd fe41 	bl	8008bf8 <_malloc_r>
 800af76:	6028      	str	r0, [r5, #0]
 800af78:	6128      	str	r0, [r5, #16]
 800af7a:	b920      	cbnz	r0, 800af86 <_svfiprintf_r+0x2e>
 800af7c:	230c      	movs	r3, #12
 800af7e:	603b      	str	r3, [r7, #0]
 800af80:	f04f 30ff 	mov.w	r0, #4294967295
 800af84:	e0d0      	b.n	800b128 <_svfiprintf_r+0x1d0>
 800af86:	2340      	movs	r3, #64	; 0x40
 800af88:	616b      	str	r3, [r5, #20]
 800af8a:	2300      	movs	r3, #0
 800af8c:	9309      	str	r3, [sp, #36]	; 0x24
 800af8e:	2320      	movs	r3, #32
 800af90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af94:	f8cd 800c 	str.w	r8, [sp, #12]
 800af98:	2330      	movs	r3, #48	; 0x30
 800af9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b140 <_svfiprintf_r+0x1e8>
 800af9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afa2:	f04f 0901 	mov.w	r9, #1
 800afa6:	4623      	mov	r3, r4
 800afa8:	469a      	mov	sl, r3
 800afaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afae:	b10a      	cbz	r2, 800afb4 <_svfiprintf_r+0x5c>
 800afb0:	2a25      	cmp	r2, #37	; 0x25
 800afb2:	d1f9      	bne.n	800afa8 <_svfiprintf_r+0x50>
 800afb4:	ebba 0b04 	subs.w	fp, sl, r4
 800afb8:	d00b      	beq.n	800afd2 <_svfiprintf_r+0x7a>
 800afba:	465b      	mov	r3, fp
 800afbc:	4622      	mov	r2, r4
 800afbe:	4629      	mov	r1, r5
 800afc0:	4638      	mov	r0, r7
 800afc2:	f7ff ff6f 	bl	800aea4 <__ssputs_r>
 800afc6:	3001      	adds	r0, #1
 800afc8:	f000 80a9 	beq.w	800b11e <_svfiprintf_r+0x1c6>
 800afcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afce:	445a      	add	r2, fp
 800afd0:	9209      	str	r2, [sp, #36]	; 0x24
 800afd2:	f89a 3000 	ldrb.w	r3, [sl]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	f000 80a1 	beq.w	800b11e <_svfiprintf_r+0x1c6>
 800afdc:	2300      	movs	r3, #0
 800afde:	f04f 32ff 	mov.w	r2, #4294967295
 800afe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afe6:	f10a 0a01 	add.w	sl, sl, #1
 800afea:	9304      	str	r3, [sp, #16]
 800afec:	9307      	str	r3, [sp, #28]
 800afee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aff2:	931a      	str	r3, [sp, #104]	; 0x68
 800aff4:	4654      	mov	r4, sl
 800aff6:	2205      	movs	r2, #5
 800aff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800affc:	4850      	ldr	r0, [pc, #320]	; (800b140 <_svfiprintf_r+0x1e8>)
 800affe:	f7f5 f8e7 	bl	80001d0 <memchr>
 800b002:	9a04      	ldr	r2, [sp, #16]
 800b004:	b9d8      	cbnz	r0, 800b03e <_svfiprintf_r+0xe6>
 800b006:	06d0      	lsls	r0, r2, #27
 800b008:	bf44      	itt	mi
 800b00a:	2320      	movmi	r3, #32
 800b00c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b010:	0711      	lsls	r1, r2, #28
 800b012:	bf44      	itt	mi
 800b014:	232b      	movmi	r3, #43	; 0x2b
 800b016:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b01a:	f89a 3000 	ldrb.w	r3, [sl]
 800b01e:	2b2a      	cmp	r3, #42	; 0x2a
 800b020:	d015      	beq.n	800b04e <_svfiprintf_r+0xf6>
 800b022:	9a07      	ldr	r2, [sp, #28]
 800b024:	4654      	mov	r4, sl
 800b026:	2000      	movs	r0, #0
 800b028:	f04f 0c0a 	mov.w	ip, #10
 800b02c:	4621      	mov	r1, r4
 800b02e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b032:	3b30      	subs	r3, #48	; 0x30
 800b034:	2b09      	cmp	r3, #9
 800b036:	d94d      	bls.n	800b0d4 <_svfiprintf_r+0x17c>
 800b038:	b1b0      	cbz	r0, 800b068 <_svfiprintf_r+0x110>
 800b03a:	9207      	str	r2, [sp, #28]
 800b03c:	e014      	b.n	800b068 <_svfiprintf_r+0x110>
 800b03e:	eba0 0308 	sub.w	r3, r0, r8
 800b042:	fa09 f303 	lsl.w	r3, r9, r3
 800b046:	4313      	orrs	r3, r2
 800b048:	9304      	str	r3, [sp, #16]
 800b04a:	46a2      	mov	sl, r4
 800b04c:	e7d2      	b.n	800aff4 <_svfiprintf_r+0x9c>
 800b04e:	9b03      	ldr	r3, [sp, #12]
 800b050:	1d19      	adds	r1, r3, #4
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	9103      	str	r1, [sp, #12]
 800b056:	2b00      	cmp	r3, #0
 800b058:	bfbb      	ittet	lt
 800b05a:	425b      	neglt	r3, r3
 800b05c:	f042 0202 	orrlt.w	r2, r2, #2
 800b060:	9307      	strge	r3, [sp, #28]
 800b062:	9307      	strlt	r3, [sp, #28]
 800b064:	bfb8      	it	lt
 800b066:	9204      	strlt	r2, [sp, #16]
 800b068:	7823      	ldrb	r3, [r4, #0]
 800b06a:	2b2e      	cmp	r3, #46	; 0x2e
 800b06c:	d10c      	bne.n	800b088 <_svfiprintf_r+0x130>
 800b06e:	7863      	ldrb	r3, [r4, #1]
 800b070:	2b2a      	cmp	r3, #42	; 0x2a
 800b072:	d134      	bne.n	800b0de <_svfiprintf_r+0x186>
 800b074:	9b03      	ldr	r3, [sp, #12]
 800b076:	1d1a      	adds	r2, r3, #4
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	9203      	str	r2, [sp, #12]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	bfb8      	it	lt
 800b080:	f04f 33ff 	movlt.w	r3, #4294967295
 800b084:	3402      	adds	r4, #2
 800b086:	9305      	str	r3, [sp, #20]
 800b088:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b150 <_svfiprintf_r+0x1f8>
 800b08c:	7821      	ldrb	r1, [r4, #0]
 800b08e:	2203      	movs	r2, #3
 800b090:	4650      	mov	r0, sl
 800b092:	f7f5 f89d 	bl	80001d0 <memchr>
 800b096:	b138      	cbz	r0, 800b0a8 <_svfiprintf_r+0x150>
 800b098:	9b04      	ldr	r3, [sp, #16]
 800b09a:	eba0 000a 	sub.w	r0, r0, sl
 800b09e:	2240      	movs	r2, #64	; 0x40
 800b0a0:	4082      	lsls	r2, r0
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	3401      	adds	r4, #1
 800b0a6:	9304      	str	r3, [sp, #16]
 800b0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ac:	4825      	ldr	r0, [pc, #148]	; (800b144 <_svfiprintf_r+0x1ec>)
 800b0ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0b2:	2206      	movs	r2, #6
 800b0b4:	f7f5 f88c 	bl	80001d0 <memchr>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d038      	beq.n	800b12e <_svfiprintf_r+0x1d6>
 800b0bc:	4b22      	ldr	r3, [pc, #136]	; (800b148 <_svfiprintf_r+0x1f0>)
 800b0be:	bb1b      	cbnz	r3, 800b108 <_svfiprintf_r+0x1b0>
 800b0c0:	9b03      	ldr	r3, [sp, #12]
 800b0c2:	3307      	adds	r3, #7
 800b0c4:	f023 0307 	bic.w	r3, r3, #7
 800b0c8:	3308      	adds	r3, #8
 800b0ca:	9303      	str	r3, [sp, #12]
 800b0cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ce:	4433      	add	r3, r6
 800b0d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b0d2:	e768      	b.n	800afa6 <_svfiprintf_r+0x4e>
 800b0d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0d8:	460c      	mov	r4, r1
 800b0da:	2001      	movs	r0, #1
 800b0dc:	e7a6      	b.n	800b02c <_svfiprintf_r+0xd4>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	3401      	adds	r4, #1
 800b0e2:	9305      	str	r3, [sp, #20]
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	f04f 0c0a 	mov.w	ip, #10
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0f0:	3a30      	subs	r2, #48	; 0x30
 800b0f2:	2a09      	cmp	r2, #9
 800b0f4:	d903      	bls.n	800b0fe <_svfiprintf_r+0x1a6>
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d0c6      	beq.n	800b088 <_svfiprintf_r+0x130>
 800b0fa:	9105      	str	r1, [sp, #20]
 800b0fc:	e7c4      	b.n	800b088 <_svfiprintf_r+0x130>
 800b0fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800b102:	4604      	mov	r4, r0
 800b104:	2301      	movs	r3, #1
 800b106:	e7f0      	b.n	800b0ea <_svfiprintf_r+0x192>
 800b108:	ab03      	add	r3, sp, #12
 800b10a:	9300      	str	r3, [sp, #0]
 800b10c:	462a      	mov	r2, r5
 800b10e:	4b0f      	ldr	r3, [pc, #60]	; (800b14c <_svfiprintf_r+0x1f4>)
 800b110:	a904      	add	r1, sp, #16
 800b112:	4638      	mov	r0, r7
 800b114:	f7fd fe9c 	bl	8008e50 <_printf_float>
 800b118:	1c42      	adds	r2, r0, #1
 800b11a:	4606      	mov	r6, r0
 800b11c:	d1d6      	bne.n	800b0cc <_svfiprintf_r+0x174>
 800b11e:	89ab      	ldrh	r3, [r5, #12]
 800b120:	065b      	lsls	r3, r3, #25
 800b122:	f53f af2d 	bmi.w	800af80 <_svfiprintf_r+0x28>
 800b126:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b128:	b01d      	add	sp, #116	; 0x74
 800b12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12e:	ab03      	add	r3, sp, #12
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	462a      	mov	r2, r5
 800b134:	4b05      	ldr	r3, [pc, #20]	; (800b14c <_svfiprintf_r+0x1f4>)
 800b136:	a904      	add	r1, sp, #16
 800b138:	4638      	mov	r0, r7
 800b13a:	f7fe f92d 	bl	8009398 <_printf_i>
 800b13e:	e7eb      	b.n	800b118 <_svfiprintf_r+0x1c0>
 800b140:	0800e834 	.word	0x0800e834
 800b144:	0800e83e 	.word	0x0800e83e
 800b148:	08008e51 	.word	0x08008e51
 800b14c:	0800aea5 	.word	0x0800aea5
 800b150:	0800e83a 	.word	0x0800e83a

0800b154 <__sflush_r>:
 800b154:	898a      	ldrh	r2, [r1, #12]
 800b156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b15a:	4605      	mov	r5, r0
 800b15c:	0710      	lsls	r0, r2, #28
 800b15e:	460c      	mov	r4, r1
 800b160:	d458      	bmi.n	800b214 <__sflush_r+0xc0>
 800b162:	684b      	ldr	r3, [r1, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	dc05      	bgt.n	800b174 <__sflush_r+0x20>
 800b168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	dc02      	bgt.n	800b174 <__sflush_r+0x20>
 800b16e:	2000      	movs	r0, #0
 800b170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b176:	2e00      	cmp	r6, #0
 800b178:	d0f9      	beq.n	800b16e <__sflush_r+0x1a>
 800b17a:	2300      	movs	r3, #0
 800b17c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b180:	682f      	ldr	r7, [r5, #0]
 800b182:	6a21      	ldr	r1, [r4, #32]
 800b184:	602b      	str	r3, [r5, #0]
 800b186:	d032      	beq.n	800b1ee <__sflush_r+0x9a>
 800b188:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b18a:	89a3      	ldrh	r3, [r4, #12]
 800b18c:	075a      	lsls	r2, r3, #29
 800b18e:	d505      	bpl.n	800b19c <__sflush_r+0x48>
 800b190:	6863      	ldr	r3, [r4, #4]
 800b192:	1ac0      	subs	r0, r0, r3
 800b194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b196:	b10b      	cbz	r3, 800b19c <__sflush_r+0x48>
 800b198:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b19a:	1ac0      	subs	r0, r0, r3
 800b19c:	2300      	movs	r3, #0
 800b19e:	4602      	mov	r2, r0
 800b1a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1a2:	6a21      	ldr	r1, [r4, #32]
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	47b0      	blx	r6
 800b1a8:	1c43      	adds	r3, r0, #1
 800b1aa:	89a3      	ldrh	r3, [r4, #12]
 800b1ac:	d106      	bne.n	800b1bc <__sflush_r+0x68>
 800b1ae:	6829      	ldr	r1, [r5, #0]
 800b1b0:	291d      	cmp	r1, #29
 800b1b2:	d82b      	bhi.n	800b20c <__sflush_r+0xb8>
 800b1b4:	4a29      	ldr	r2, [pc, #164]	; (800b25c <__sflush_r+0x108>)
 800b1b6:	410a      	asrs	r2, r1
 800b1b8:	07d6      	lsls	r6, r2, #31
 800b1ba:	d427      	bmi.n	800b20c <__sflush_r+0xb8>
 800b1bc:	2200      	movs	r2, #0
 800b1be:	6062      	str	r2, [r4, #4]
 800b1c0:	04d9      	lsls	r1, r3, #19
 800b1c2:	6922      	ldr	r2, [r4, #16]
 800b1c4:	6022      	str	r2, [r4, #0]
 800b1c6:	d504      	bpl.n	800b1d2 <__sflush_r+0x7e>
 800b1c8:	1c42      	adds	r2, r0, #1
 800b1ca:	d101      	bne.n	800b1d0 <__sflush_r+0x7c>
 800b1cc:	682b      	ldr	r3, [r5, #0]
 800b1ce:	b903      	cbnz	r3, 800b1d2 <__sflush_r+0x7e>
 800b1d0:	6560      	str	r0, [r4, #84]	; 0x54
 800b1d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1d4:	602f      	str	r7, [r5, #0]
 800b1d6:	2900      	cmp	r1, #0
 800b1d8:	d0c9      	beq.n	800b16e <__sflush_r+0x1a>
 800b1da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1de:	4299      	cmp	r1, r3
 800b1e0:	d002      	beq.n	800b1e8 <__sflush_r+0x94>
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	f7ff fa96 	bl	800a714 <_free_r>
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	6360      	str	r0, [r4, #52]	; 0x34
 800b1ec:	e7c0      	b.n	800b170 <__sflush_r+0x1c>
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	47b0      	blx	r6
 800b1f4:	1c41      	adds	r1, r0, #1
 800b1f6:	d1c8      	bne.n	800b18a <__sflush_r+0x36>
 800b1f8:	682b      	ldr	r3, [r5, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d0c5      	beq.n	800b18a <__sflush_r+0x36>
 800b1fe:	2b1d      	cmp	r3, #29
 800b200:	d001      	beq.n	800b206 <__sflush_r+0xb2>
 800b202:	2b16      	cmp	r3, #22
 800b204:	d101      	bne.n	800b20a <__sflush_r+0xb6>
 800b206:	602f      	str	r7, [r5, #0]
 800b208:	e7b1      	b.n	800b16e <__sflush_r+0x1a>
 800b20a:	89a3      	ldrh	r3, [r4, #12]
 800b20c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b210:	81a3      	strh	r3, [r4, #12]
 800b212:	e7ad      	b.n	800b170 <__sflush_r+0x1c>
 800b214:	690f      	ldr	r7, [r1, #16]
 800b216:	2f00      	cmp	r7, #0
 800b218:	d0a9      	beq.n	800b16e <__sflush_r+0x1a>
 800b21a:	0793      	lsls	r3, r2, #30
 800b21c:	680e      	ldr	r6, [r1, #0]
 800b21e:	bf08      	it	eq
 800b220:	694b      	ldreq	r3, [r1, #20]
 800b222:	600f      	str	r7, [r1, #0]
 800b224:	bf18      	it	ne
 800b226:	2300      	movne	r3, #0
 800b228:	eba6 0807 	sub.w	r8, r6, r7
 800b22c:	608b      	str	r3, [r1, #8]
 800b22e:	f1b8 0f00 	cmp.w	r8, #0
 800b232:	dd9c      	ble.n	800b16e <__sflush_r+0x1a>
 800b234:	6a21      	ldr	r1, [r4, #32]
 800b236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b238:	4643      	mov	r3, r8
 800b23a:	463a      	mov	r2, r7
 800b23c:	4628      	mov	r0, r5
 800b23e:	47b0      	blx	r6
 800b240:	2800      	cmp	r0, #0
 800b242:	dc06      	bgt.n	800b252 <__sflush_r+0xfe>
 800b244:	89a3      	ldrh	r3, [r4, #12]
 800b246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b24a:	81a3      	strh	r3, [r4, #12]
 800b24c:	f04f 30ff 	mov.w	r0, #4294967295
 800b250:	e78e      	b.n	800b170 <__sflush_r+0x1c>
 800b252:	4407      	add	r7, r0
 800b254:	eba8 0800 	sub.w	r8, r8, r0
 800b258:	e7e9      	b.n	800b22e <__sflush_r+0xda>
 800b25a:	bf00      	nop
 800b25c:	dfbffffe 	.word	0xdfbffffe

0800b260 <_fflush_r>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	690b      	ldr	r3, [r1, #16]
 800b264:	4605      	mov	r5, r0
 800b266:	460c      	mov	r4, r1
 800b268:	b913      	cbnz	r3, 800b270 <_fflush_r+0x10>
 800b26a:	2500      	movs	r5, #0
 800b26c:	4628      	mov	r0, r5
 800b26e:	bd38      	pop	{r3, r4, r5, pc}
 800b270:	b118      	cbz	r0, 800b27a <_fflush_r+0x1a>
 800b272:	6a03      	ldr	r3, [r0, #32]
 800b274:	b90b      	cbnz	r3, 800b27a <_fflush_r+0x1a>
 800b276:	f7fe fa2b 	bl	80096d0 <__sinit>
 800b27a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d0f3      	beq.n	800b26a <_fflush_r+0xa>
 800b282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b284:	07d0      	lsls	r0, r2, #31
 800b286:	d404      	bmi.n	800b292 <_fflush_r+0x32>
 800b288:	0599      	lsls	r1, r3, #22
 800b28a:	d402      	bmi.n	800b292 <_fflush_r+0x32>
 800b28c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b28e:	f7fe fbb7 	bl	8009a00 <__retarget_lock_acquire_recursive>
 800b292:	4628      	mov	r0, r5
 800b294:	4621      	mov	r1, r4
 800b296:	f7ff ff5d 	bl	800b154 <__sflush_r>
 800b29a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b29c:	07da      	lsls	r2, r3, #31
 800b29e:	4605      	mov	r5, r0
 800b2a0:	d4e4      	bmi.n	800b26c <_fflush_r+0xc>
 800b2a2:	89a3      	ldrh	r3, [r4, #12]
 800b2a4:	059b      	lsls	r3, r3, #22
 800b2a6:	d4e1      	bmi.n	800b26c <_fflush_r+0xc>
 800b2a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2aa:	f7fe fbaa 	bl	8009a02 <__retarget_lock_release_recursive>
 800b2ae:	e7dd      	b.n	800b26c <_fflush_r+0xc>

0800b2b0 <__assert_func>:
 800b2b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2b2:	4614      	mov	r4, r2
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	4b09      	ldr	r3, [pc, #36]	; (800b2dc <__assert_func+0x2c>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4605      	mov	r5, r0
 800b2bc:	68d8      	ldr	r0, [r3, #12]
 800b2be:	b14c      	cbz	r4, 800b2d4 <__assert_func+0x24>
 800b2c0:	4b07      	ldr	r3, [pc, #28]	; (800b2e0 <__assert_func+0x30>)
 800b2c2:	9100      	str	r1, [sp, #0]
 800b2c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2c8:	4906      	ldr	r1, [pc, #24]	; (800b2e4 <__assert_func+0x34>)
 800b2ca:	462b      	mov	r3, r5
 800b2cc:	f000 f872 	bl	800b3b4 <fiprintf>
 800b2d0:	f7fd fc62 	bl	8008b98 <abort>
 800b2d4:	4b04      	ldr	r3, [pc, #16]	; (800b2e8 <__assert_func+0x38>)
 800b2d6:	461c      	mov	r4, r3
 800b2d8:	e7f3      	b.n	800b2c2 <__assert_func+0x12>
 800b2da:	bf00      	nop
 800b2dc:	20000098 	.word	0x20000098
 800b2e0:	0800e84f 	.word	0x0800e84f
 800b2e4:	0800e85c 	.word	0x0800e85c
 800b2e8:	0800e88a 	.word	0x0800e88a

0800b2ec <_calloc_r>:
 800b2ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2ee:	fba1 2402 	umull	r2, r4, r1, r2
 800b2f2:	b94c      	cbnz	r4, 800b308 <_calloc_r+0x1c>
 800b2f4:	4611      	mov	r1, r2
 800b2f6:	9201      	str	r2, [sp, #4]
 800b2f8:	f7fd fc7e 	bl	8008bf8 <_malloc_r>
 800b2fc:	9a01      	ldr	r2, [sp, #4]
 800b2fe:	4605      	mov	r5, r0
 800b300:	b930      	cbnz	r0, 800b310 <_calloc_r+0x24>
 800b302:	4628      	mov	r0, r5
 800b304:	b003      	add	sp, #12
 800b306:	bd30      	pop	{r4, r5, pc}
 800b308:	220c      	movs	r2, #12
 800b30a:	6002      	str	r2, [r0, #0]
 800b30c:	2500      	movs	r5, #0
 800b30e:	e7f8      	b.n	800b302 <_calloc_r+0x16>
 800b310:	4621      	mov	r1, r4
 800b312:	f7fe faa4 	bl	800985e <memset>
 800b316:	e7f4      	b.n	800b302 <_calloc_r+0x16>

0800b318 <__ascii_mbtowc>:
 800b318:	b082      	sub	sp, #8
 800b31a:	b901      	cbnz	r1, 800b31e <__ascii_mbtowc+0x6>
 800b31c:	a901      	add	r1, sp, #4
 800b31e:	b142      	cbz	r2, 800b332 <__ascii_mbtowc+0x1a>
 800b320:	b14b      	cbz	r3, 800b336 <__ascii_mbtowc+0x1e>
 800b322:	7813      	ldrb	r3, [r2, #0]
 800b324:	600b      	str	r3, [r1, #0]
 800b326:	7812      	ldrb	r2, [r2, #0]
 800b328:	1e10      	subs	r0, r2, #0
 800b32a:	bf18      	it	ne
 800b32c:	2001      	movne	r0, #1
 800b32e:	b002      	add	sp, #8
 800b330:	4770      	bx	lr
 800b332:	4610      	mov	r0, r2
 800b334:	e7fb      	b.n	800b32e <__ascii_mbtowc+0x16>
 800b336:	f06f 0001 	mvn.w	r0, #1
 800b33a:	e7f8      	b.n	800b32e <__ascii_mbtowc+0x16>

0800b33c <_realloc_r>:
 800b33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b340:	4680      	mov	r8, r0
 800b342:	4614      	mov	r4, r2
 800b344:	460e      	mov	r6, r1
 800b346:	b921      	cbnz	r1, 800b352 <_realloc_r+0x16>
 800b348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b34c:	4611      	mov	r1, r2
 800b34e:	f7fd bc53 	b.w	8008bf8 <_malloc_r>
 800b352:	b92a      	cbnz	r2, 800b360 <_realloc_r+0x24>
 800b354:	f7ff f9de 	bl	800a714 <_free_r>
 800b358:	4625      	mov	r5, r4
 800b35a:	4628      	mov	r0, r5
 800b35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b360:	f000 f83a 	bl	800b3d8 <_malloc_usable_size_r>
 800b364:	4284      	cmp	r4, r0
 800b366:	4607      	mov	r7, r0
 800b368:	d802      	bhi.n	800b370 <_realloc_r+0x34>
 800b36a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b36e:	d812      	bhi.n	800b396 <_realloc_r+0x5a>
 800b370:	4621      	mov	r1, r4
 800b372:	4640      	mov	r0, r8
 800b374:	f7fd fc40 	bl	8008bf8 <_malloc_r>
 800b378:	4605      	mov	r5, r0
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d0ed      	beq.n	800b35a <_realloc_r+0x1e>
 800b37e:	42bc      	cmp	r4, r7
 800b380:	4622      	mov	r2, r4
 800b382:	4631      	mov	r1, r6
 800b384:	bf28      	it	cs
 800b386:	463a      	movcs	r2, r7
 800b388:	f7fe fb3c 	bl	8009a04 <memcpy>
 800b38c:	4631      	mov	r1, r6
 800b38e:	4640      	mov	r0, r8
 800b390:	f7ff f9c0 	bl	800a714 <_free_r>
 800b394:	e7e1      	b.n	800b35a <_realloc_r+0x1e>
 800b396:	4635      	mov	r5, r6
 800b398:	e7df      	b.n	800b35a <_realloc_r+0x1e>

0800b39a <__ascii_wctomb>:
 800b39a:	b149      	cbz	r1, 800b3b0 <__ascii_wctomb+0x16>
 800b39c:	2aff      	cmp	r2, #255	; 0xff
 800b39e:	bf85      	ittet	hi
 800b3a0:	238a      	movhi	r3, #138	; 0x8a
 800b3a2:	6003      	strhi	r3, [r0, #0]
 800b3a4:	700a      	strbls	r2, [r1, #0]
 800b3a6:	f04f 30ff 	movhi.w	r0, #4294967295
 800b3aa:	bf98      	it	ls
 800b3ac:	2001      	movls	r0, #1
 800b3ae:	4770      	bx	lr
 800b3b0:	4608      	mov	r0, r1
 800b3b2:	4770      	bx	lr

0800b3b4 <fiprintf>:
 800b3b4:	b40e      	push	{r1, r2, r3}
 800b3b6:	b503      	push	{r0, r1, lr}
 800b3b8:	4601      	mov	r1, r0
 800b3ba:	ab03      	add	r3, sp, #12
 800b3bc:	4805      	ldr	r0, [pc, #20]	; (800b3d4 <fiprintf+0x20>)
 800b3be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3c2:	6800      	ldr	r0, [r0, #0]
 800b3c4:	9301      	str	r3, [sp, #4]
 800b3c6:	f000 f839 	bl	800b43c <_vfiprintf_r>
 800b3ca:	b002      	add	sp, #8
 800b3cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3d0:	b003      	add	sp, #12
 800b3d2:	4770      	bx	lr
 800b3d4:	20000098 	.word	0x20000098

0800b3d8 <_malloc_usable_size_r>:
 800b3d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3dc:	1f18      	subs	r0, r3, #4
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	bfbc      	itt	lt
 800b3e2:	580b      	ldrlt	r3, [r1, r0]
 800b3e4:	18c0      	addlt	r0, r0, r3
 800b3e6:	4770      	bx	lr

0800b3e8 <__sfputc_r>:
 800b3e8:	6893      	ldr	r3, [r2, #8]
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	b410      	push	{r4}
 800b3f0:	6093      	str	r3, [r2, #8]
 800b3f2:	da08      	bge.n	800b406 <__sfputc_r+0x1e>
 800b3f4:	6994      	ldr	r4, [r2, #24]
 800b3f6:	42a3      	cmp	r3, r4
 800b3f8:	db01      	blt.n	800b3fe <__sfputc_r+0x16>
 800b3fa:	290a      	cmp	r1, #10
 800b3fc:	d103      	bne.n	800b406 <__sfputc_r+0x1e>
 800b3fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b402:	f000 b935 	b.w	800b670 <__swbuf_r>
 800b406:	6813      	ldr	r3, [r2, #0]
 800b408:	1c58      	adds	r0, r3, #1
 800b40a:	6010      	str	r0, [r2, #0]
 800b40c:	7019      	strb	r1, [r3, #0]
 800b40e:	4608      	mov	r0, r1
 800b410:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b414:	4770      	bx	lr

0800b416 <__sfputs_r>:
 800b416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b418:	4606      	mov	r6, r0
 800b41a:	460f      	mov	r7, r1
 800b41c:	4614      	mov	r4, r2
 800b41e:	18d5      	adds	r5, r2, r3
 800b420:	42ac      	cmp	r4, r5
 800b422:	d101      	bne.n	800b428 <__sfputs_r+0x12>
 800b424:	2000      	movs	r0, #0
 800b426:	e007      	b.n	800b438 <__sfputs_r+0x22>
 800b428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b42c:	463a      	mov	r2, r7
 800b42e:	4630      	mov	r0, r6
 800b430:	f7ff ffda 	bl	800b3e8 <__sfputc_r>
 800b434:	1c43      	adds	r3, r0, #1
 800b436:	d1f3      	bne.n	800b420 <__sfputs_r+0xa>
 800b438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b43c <_vfiprintf_r>:
 800b43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b440:	460d      	mov	r5, r1
 800b442:	b09d      	sub	sp, #116	; 0x74
 800b444:	4614      	mov	r4, r2
 800b446:	4698      	mov	r8, r3
 800b448:	4606      	mov	r6, r0
 800b44a:	b118      	cbz	r0, 800b454 <_vfiprintf_r+0x18>
 800b44c:	6a03      	ldr	r3, [r0, #32]
 800b44e:	b90b      	cbnz	r3, 800b454 <_vfiprintf_r+0x18>
 800b450:	f7fe f93e 	bl	80096d0 <__sinit>
 800b454:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b456:	07d9      	lsls	r1, r3, #31
 800b458:	d405      	bmi.n	800b466 <_vfiprintf_r+0x2a>
 800b45a:	89ab      	ldrh	r3, [r5, #12]
 800b45c:	059a      	lsls	r2, r3, #22
 800b45e:	d402      	bmi.n	800b466 <_vfiprintf_r+0x2a>
 800b460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b462:	f7fe facd 	bl	8009a00 <__retarget_lock_acquire_recursive>
 800b466:	89ab      	ldrh	r3, [r5, #12]
 800b468:	071b      	lsls	r3, r3, #28
 800b46a:	d501      	bpl.n	800b470 <_vfiprintf_r+0x34>
 800b46c:	692b      	ldr	r3, [r5, #16]
 800b46e:	b99b      	cbnz	r3, 800b498 <_vfiprintf_r+0x5c>
 800b470:	4629      	mov	r1, r5
 800b472:	4630      	mov	r0, r6
 800b474:	f000 f93a 	bl	800b6ec <__swsetup_r>
 800b478:	b170      	cbz	r0, 800b498 <_vfiprintf_r+0x5c>
 800b47a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b47c:	07dc      	lsls	r4, r3, #31
 800b47e:	d504      	bpl.n	800b48a <_vfiprintf_r+0x4e>
 800b480:	f04f 30ff 	mov.w	r0, #4294967295
 800b484:	b01d      	add	sp, #116	; 0x74
 800b486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b48a:	89ab      	ldrh	r3, [r5, #12]
 800b48c:	0598      	lsls	r0, r3, #22
 800b48e:	d4f7      	bmi.n	800b480 <_vfiprintf_r+0x44>
 800b490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b492:	f7fe fab6 	bl	8009a02 <__retarget_lock_release_recursive>
 800b496:	e7f3      	b.n	800b480 <_vfiprintf_r+0x44>
 800b498:	2300      	movs	r3, #0
 800b49a:	9309      	str	r3, [sp, #36]	; 0x24
 800b49c:	2320      	movs	r3, #32
 800b49e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4a6:	2330      	movs	r3, #48	; 0x30
 800b4a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b65c <_vfiprintf_r+0x220>
 800b4ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4b0:	f04f 0901 	mov.w	r9, #1
 800b4b4:	4623      	mov	r3, r4
 800b4b6:	469a      	mov	sl, r3
 800b4b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4bc:	b10a      	cbz	r2, 800b4c2 <_vfiprintf_r+0x86>
 800b4be:	2a25      	cmp	r2, #37	; 0x25
 800b4c0:	d1f9      	bne.n	800b4b6 <_vfiprintf_r+0x7a>
 800b4c2:	ebba 0b04 	subs.w	fp, sl, r4
 800b4c6:	d00b      	beq.n	800b4e0 <_vfiprintf_r+0xa4>
 800b4c8:	465b      	mov	r3, fp
 800b4ca:	4622      	mov	r2, r4
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	f7ff ffa1 	bl	800b416 <__sfputs_r>
 800b4d4:	3001      	adds	r0, #1
 800b4d6:	f000 80a9 	beq.w	800b62c <_vfiprintf_r+0x1f0>
 800b4da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4dc:	445a      	add	r2, fp
 800b4de:	9209      	str	r2, [sp, #36]	; 0x24
 800b4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f000 80a1 	beq.w	800b62c <_vfiprintf_r+0x1f0>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4f4:	f10a 0a01 	add.w	sl, sl, #1
 800b4f8:	9304      	str	r3, [sp, #16]
 800b4fa:	9307      	str	r3, [sp, #28]
 800b4fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b500:	931a      	str	r3, [sp, #104]	; 0x68
 800b502:	4654      	mov	r4, sl
 800b504:	2205      	movs	r2, #5
 800b506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b50a:	4854      	ldr	r0, [pc, #336]	; (800b65c <_vfiprintf_r+0x220>)
 800b50c:	f7f4 fe60 	bl	80001d0 <memchr>
 800b510:	9a04      	ldr	r2, [sp, #16]
 800b512:	b9d8      	cbnz	r0, 800b54c <_vfiprintf_r+0x110>
 800b514:	06d1      	lsls	r1, r2, #27
 800b516:	bf44      	itt	mi
 800b518:	2320      	movmi	r3, #32
 800b51a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b51e:	0713      	lsls	r3, r2, #28
 800b520:	bf44      	itt	mi
 800b522:	232b      	movmi	r3, #43	; 0x2b
 800b524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b528:	f89a 3000 	ldrb.w	r3, [sl]
 800b52c:	2b2a      	cmp	r3, #42	; 0x2a
 800b52e:	d015      	beq.n	800b55c <_vfiprintf_r+0x120>
 800b530:	9a07      	ldr	r2, [sp, #28]
 800b532:	4654      	mov	r4, sl
 800b534:	2000      	movs	r0, #0
 800b536:	f04f 0c0a 	mov.w	ip, #10
 800b53a:	4621      	mov	r1, r4
 800b53c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b540:	3b30      	subs	r3, #48	; 0x30
 800b542:	2b09      	cmp	r3, #9
 800b544:	d94d      	bls.n	800b5e2 <_vfiprintf_r+0x1a6>
 800b546:	b1b0      	cbz	r0, 800b576 <_vfiprintf_r+0x13a>
 800b548:	9207      	str	r2, [sp, #28]
 800b54a:	e014      	b.n	800b576 <_vfiprintf_r+0x13a>
 800b54c:	eba0 0308 	sub.w	r3, r0, r8
 800b550:	fa09 f303 	lsl.w	r3, r9, r3
 800b554:	4313      	orrs	r3, r2
 800b556:	9304      	str	r3, [sp, #16]
 800b558:	46a2      	mov	sl, r4
 800b55a:	e7d2      	b.n	800b502 <_vfiprintf_r+0xc6>
 800b55c:	9b03      	ldr	r3, [sp, #12]
 800b55e:	1d19      	adds	r1, r3, #4
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	9103      	str	r1, [sp, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	bfbb      	ittet	lt
 800b568:	425b      	neglt	r3, r3
 800b56a:	f042 0202 	orrlt.w	r2, r2, #2
 800b56e:	9307      	strge	r3, [sp, #28]
 800b570:	9307      	strlt	r3, [sp, #28]
 800b572:	bfb8      	it	lt
 800b574:	9204      	strlt	r2, [sp, #16]
 800b576:	7823      	ldrb	r3, [r4, #0]
 800b578:	2b2e      	cmp	r3, #46	; 0x2e
 800b57a:	d10c      	bne.n	800b596 <_vfiprintf_r+0x15a>
 800b57c:	7863      	ldrb	r3, [r4, #1]
 800b57e:	2b2a      	cmp	r3, #42	; 0x2a
 800b580:	d134      	bne.n	800b5ec <_vfiprintf_r+0x1b0>
 800b582:	9b03      	ldr	r3, [sp, #12]
 800b584:	1d1a      	adds	r2, r3, #4
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	9203      	str	r2, [sp, #12]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	bfb8      	it	lt
 800b58e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b592:	3402      	adds	r4, #2
 800b594:	9305      	str	r3, [sp, #20]
 800b596:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b66c <_vfiprintf_r+0x230>
 800b59a:	7821      	ldrb	r1, [r4, #0]
 800b59c:	2203      	movs	r2, #3
 800b59e:	4650      	mov	r0, sl
 800b5a0:	f7f4 fe16 	bl	80001d0 <memchr>
 800b5a4:	b138      	cbz	r0, 800b5b6 <_vfiprintf_r+0x17a>
 800b5a6:	9b04      	ldr	r3, [sp, #16]
 800b5a8:	eba0 000a 	sub.w	r0, r0, sl
 800b5ac:	2240      	movs	r2, #64	; 0x40
 800b5ae:	4082      	lsls	r2, r0
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	3401      	adds	r4, #1
 800b5b4:	9304      	str	r3, [sp, #16]
 800b5b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ba:	4829      	ldr	r0, [pc, #164]	; (800b660 <_vfiprintf_r+0x224>)
 800b5bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5c0:	2206      	movs	r2, #6
 800b5c2:	f7f4 fe05 	bl	80001d0 <memchr>
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	d03f      	beq.n	800b64a <_vfiprintf_r+0x20e>
 800b5ca:	4b26      	ldr	r3, [pc, #152]	; (800b664 <_vfiprintf_r+0x228>)
 800b5cc:	bb1b      	cbnz	r3, 800b616 <_vfiprintf_r+0x1da>
 800b5ce:	9b03      	ldr	r3, [sp, #12]
 800b5d0:	3307      	adds	r3, #7
 800b5d2:	f023 0307 	bic.w	r3, r3, #7
 800b5d6:	3308      	adds	r3, #8
 800b5d8:	9303      	str	r3, [sp, #12]
 800b5da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5dc:	443b      	add	r3, r7
 800b5de:	9309      	str	r3, [sp, #36]	; 0x24
 800b5e0:	e768      	b.n	800b4b4 <_vfiprintf_r+0x78>
 800b5e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5e6:	460c      	mov	r4, r1
 800b5e8:	2001      	movs	r0, #1
 800b5ea:	e7a6      	b.n	800b53a <_vfiprintf_r+0xfe>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	3401      	adds	r4, #1
 800b5f0:	9305      	str	r3, [sp, #20]
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	f04f 0c0a 	mov.w	ip, #10
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5fe:	3a30      	subs	r2, #48	; 0x30
 800b600:	2a09      	cmp	r2, #9
 800b602:	d903      	bls.n	800b60c <_vfiprintf_r+0x1d0>
 800b604:	2b00      	cmp	r3, #0
 800b606:	d0c6      	beq.n	800b596 <_vfiprintf_r+0x15a>
 800b608:	9105      	str	r1, [sp, #20]
 800b60a:	e7c4      	b.n	800b596 <_vfiprintf_r+0x15a>
 800b60c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b610:	4604      	mov	r4, r0
 800b612:	2301      	movs	r3, #1
 800b614:	e7f0      	b.n	800b5f8 <_vfiprintf_r+0x1bc>
 800b616:	ab03      	add	r3, sp, #12
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	462a      	mov	r2, r5
 800b61c:	4b12      	ldr	r3, [pc, #72]	; (800b668 <_vfiprintf_r+0x22c>)
 800b61e:	a904      	add	r1, sp, #16
 800b620:	4630      	mov	r0, r6
 800b622:	f7fd fc15 	bl	8008e50 <_printf_float>
 800b626:	4607      	mov	r7, r0
 800b628:	1c78      	adds	r0, r7, #1
 800b62a:	d1d6      	bne.n	800b5da <_vfiprintf_r+0x19e>
 800b62c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b62e:	07d9      	lsls	r1, r3, #31
 800b630:	d405      	bmi.n	800b63e <_vfiprintf_r+0x202>
 800b632:	89ab      	ldrh	r3, [r5, #12]
 800b634:	059a      	lsls	r2, r3, #22
 800b636:	d402      	bmi.n	800b63e <_vfiprintf_r+0x202>
 800b638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b63a:	f7fe f9e2 	bl	8009a02 <__retarget_lock_release_recursive>
 800b63e:	89ab      	ldrh	r3, [r5, #12]
 800b640:	065b      	lsls	r3, r3, #25
 800b642:	f53f af1d 	bmi.w	800b480 <_vfiprintf_r+0x44>
 800b646:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b648:	e71c      	b.n	800b484 <_vfiprintf_r+0x48>
 800b64a:	ab03      	add	r3, sp, #12
 800b64c:	9300      	str	r3, [sp, #0]
 800b64e:	462a      	mov	r2, r5
 800b650:	4b05      	ldr	r3, [pc, #20]	; (800b668 <_vfiprintf_r+0x22c>)
 800b652:	a904      	add	r1, sp, #16
 800b654:	4630      	mov	r0, r6
 800b656:	f7fd fe9f 	bl	8009398 <_printf_i>
 800b65a:	e7e4      	b.n	800b626 <_vfiprintf_r+0x1ea>
 800b65c:	0800e834 	.word	0x0800e834
 800b660:	0800e83e 	.word	0x0800e83e
 800b664:	08008e51 	.word	0x08008e51
 800b668:	0800b417 	.word	0x0800b417
 800b66c:	0800e83a 	.word	0x0800e83a

0800b670 <__swbuf_r>:
 800b670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b672:	460e      	mov	r6, r1
 800b674:	4614      	mov	r4, r2
 800b676:	4605      	mov	r5, r0
 800b678:	b118      	cbz	r0, 800b682 <__swbuf_r+0x12>
 800b67a:	6a03      	ldr	r3, [r0, #32]
 800b67c:	b90b      	cbnz	r3, 800b682 <__swbuf_r+0x12>
 800b67e:	f7fe f827 	bl	80096d0 <__sinit>
 800b682:	69a3      	ldr	r3, [r4, #24]
 800b684:	60a3      	str	r3, [r4, #8]
 800b686:	89a3      	ldrh	r3, [r4, #12]
 800b688:	071a      	lsls	r2, r3, #28
 800b68a:	d525      	bpl.n	800b6d8 <__swbuf_r+0x68>
 800b68c:	6923      	ldr	r3, [r4, #16]
 800b68e:	b31b      	cbz	r3, 800b6d8 <__swbuf_r+0x68>
 800b690:	6823      	ldr	r3, [r4, #0]
 800b692:	6922      	ldr	r2, [r4, #16]
 800b694:	1a98      	subs	r0, r3, r2
 800b696:	6963      	ldr	r3, [r4, #20]
 800b698:	b2f6      	uxtb	r6, r6
 800b69a:	4283      	cmp	r3, r0
 800b69c:	4637      	mov	r7, r6
 800b69e:	dc04      	bgt.n	800b6aa <__swbuf_r+0x3a>
 800b6a0:	4621      	mov	r1, r4
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	f7ff fddc 	bl	800b260 <_fflush_r>
 800b6a8:	b9e0      	cbnz	r0, 800b6e4 <__swbuf_r+0x74>
 800b6aa:	68a3      	ldr	r3, [r4, #8]
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	60a3      	str	r3, [r4, #8]
 800b6b0:	6823      	ldr	r3, [r4, #0]
 800b6b2:	1c5a      	adds	r2, r3, #1
 800b6b4:	6022      	str	r2, [r4, #0]
 800b6b6:	701e      	strb	r6, [r3, #0]
 800b6b8:	6962      	ldr	r2, [r4, #20]
 800b6ba:	1c43      	adds	r3, r0, #1
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d004      	beq.n	800b6ca <__swbuf_r+0x5a>
 800b6c0:	89a3      	ldrh	r3, [r4, #12]
 800b6c2:	07db      	lsls	r3, r3, #31
 800b6c4:	d506      	bpl.n	800b6d4 <__swbuf_r+0x64>
 800b6c6:	2e0a      	cmp	r6, #10
 800b6c8:	d104      	bne.n	800b6d4 <__swbuf_r+0x64>
 800b6ca:	4621      	mov	r1, r4
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	f7ff fdc7 	bl	800b260 <_fflush_r>
 800b6d2:	b938      	cbnz	r0, 800b6e4 <__swbuf_r+0x74>
 800b6d4:	4638      	mov	r0, r7
 800b6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6d8:	4621      	mov	r1, r4
 800b6da:	4628      	mov	r0, r5
 800b6dc:	f000 f806 	bl	800b6ec <__swsetup_r>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d0d5      	beq.n	800b690 <__swbuf_r+0x20>
 800b6e4:	f04f 37ff 	mov.w	r7, #4294967295
 800b6e8:	e7f4      	b.n	800b6d4 <__swbuf_r+0x64>
	...

0800b6ec <__swsetup_r>:
 800b6ec:	b538      	push	{r3, r4, r5, lr}
 800b6ee:	4b2a      	ldr	r3, [pc, #168]	; (800b798 <__swsetup_r+0xac>)
 800b6f0:	4605      	mov	r5, r0
 800b6f2:	6818      	ldr	r0, [r3, #0]
 800b6f4:	460c      	mov	r4, r1
 800b6f6:	b118      	cbz	r0, 800b700 <__swsetup_r+0x14>
 800b6f8:	6a03      	ldr	r3, [r0, #32]
 800b6fa:	b90b      	cbnz	r3, 800b700 <__swsetup_r+0x14>
 800b6fc:	f7fd ffe8 	bl	80096d0 <__sinit>
 800b700:	89a3      	ldrh	r3, [r4, #12]
 800b702:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b706:	0718      	lsls	r0, r3, #28
 800b708:	d422      	bmi.n	800b750 <__swsetup_r+0x64>
 800b70a:	06d9      	lsls	r1, r3, #27
 800b70c:	d407      	bmi.n	800b71e <__swsetup_r+0x32>
 800b70e:	2309      	movs	r3, #9
 800b710:	602b      	str	r3, [r5, #0]
 800b712:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b716:	81a3      	strh	r3, [r4, #12]
 800b718:	f04f 30ff 	mov.w	r0, #4294967295
 800b71c:	e034      	b.n	800b788 <__swsetup_r+0x9c>
 800b71e:	0758      	lsls	r0, r3, #29
 800b720:	d512      	bpl.n	800b748 <__swsetup_r+0x5c>
 800b722:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b724:	b141      	cbz	r1, 800b738 <__swsetup_r+0x4c>
 800b726:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b72a:	4299      	cmp	r1, r3
 800b72c:	d002      	beq.n	800b734 <__swsetup_r+0x48>
 800b72e:	4628      	mov	r0, r5
 800b730:	f7fe fff0 	bl	800a714 <_free_r>
 800b734:	2300      	movs	r3, #0
 800b736:	6363      	str	r3, [r4, #52]	; 0x34
 800b738:	89a3      	ldrh	r3, [r4, #12]
 800b73a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b73e:	81a3      	strh	r3, [r4, #12]
 800b740:	2300      	movs	r3, #0
 800b742:	6063      	str	r3, [r4, #4]
 800b744:	6923      	ldr	r3, [r4, #16]
 800b746:	6023      	str	r3, [r4, #0]
 800b748:	89a3      	ldrh	r3, [r4, #12]
 800b74a:	f043 0308 	orr.w	r3, r3, #8
 800b74e:	81a3      	strh	r3, [r4, #12]
 800b750:	6923      	ldr	r3, [r4, #16]
 800b752:	b94b      	cbnz	r3, 800b768 <__swsetup_r+0x7c>
 800b754:	89a3      	ldrh	r3, [r4, #12]
 800b756:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b75a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b75e:	d003      	beq.n	800b768 <__swsetup_r+0x7c>
 800b760:	4621      	mov	r1, r4
 800b762:	4628      	mov	r0, r5
 800b764:	f000 f840 	bl	800b7e8 <__smakebuf_r>
 800b768:	89a0      	ldrh	r0, [r4, #12]
 800b76a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b76e:	f010 0301 	ands.w	r3, r0, #1
 800b772:	d00a      	beq.n	800b78a <__swsetup_r+0x9e>
 800b774:	2300      	movs	r3, #0
 800b776:	60a3      	str	r3, [r4, #8]
 800b778:	6963      	ldr	r3, [r4, #20]
 800b77a:	425b      	negs	r3, r3
 800b77c:	61a3      	str	r3, [r4, #24]
 800b77e:	6923      	ldr	r3, [r4, #16]
 800b780:	b943      	cbnz	r3, 800b794 <__swsetup_r+0xa8>
 800b782:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b786:	d1c4      	bne.n	800b712 <__swsetup_r+0x26>
 800b788:	bd38      	pop	{r3, r4, r5, pc}
 800b78a:	0781      	lsls	r1, r0, #30
 800b78c:	bf58      	it	pl
 800b78e:	6963      	ldrpl	r3, [r4, #20]
 800b790:	60a3      	str	r3, [r4, #8]
 800b792:	e7f4      	b.n	800b77e <__swsetup_r+0x92>
 800b794:	2000      	movs	r0, #0
 800b796:	e7f7      	b.n	800b788 <__swsetup_r+0x9c>
 800b798:	20000098 	.word	0x20000098

0800b79c <__swhatbuf_r>:
 800b79c:	b570      	push	{r4, r5, r6, lr}
 800b79e:	460c      	mov	r4, r1
 800b7a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a4:	2900      	cmp	r1, #0
 800b7a6:	b096      	sub	sp, #88	; 0x58
 800b7a8:	4615      	mov	r5, r2
 800b7aa:	461e      	mov	r6, r3
 800b7ac:	da0d      	bge.n	800b7ca <__swhatbuf_r+0x2e>
 800b7ae:	89a3      	ldrh	r3, [r4, #12]
 800b7b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b7b4:	f04f 0100 	mov.w	r1, #0
 800b7b8:	bf0c      	ite	eq
 800b7ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b7be:	2340      	movne	r3, #64	; 0x40
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	6031      	str	r1, [r6, #0]
 800b7c4:	602b      	str	r3, [r5, #0]
 800b7c6:	b016      	add	sp, #88	; 0x58
 800b7c8:	bd70      	pop	{r4, r5, r6, pc}
 800b7ca:	466a      	mov	r2, sp
 800b7cc:	f000 f848 	bl	800b860 <_fstat_r>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	dbec      	blt.n	800b7ae <__swhatbuf_r+0x12>
 800b7d4:	9901      	ldr	r1, [sp, #4]
 800b7d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b7da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b7de:	4259      	negs	r1, r3
 800b7e0:	4159      	adcs	r1, r3
 800b7e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7e6:	e7eb      	b.n	800b7c0 <__swhatbuf_r+0x24>

0800b7e8 <__smakebuf_r>:
 800b7e8:	898b      	ldrh	r3, [r1, #12]
 800b7ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7ec:	079d      	lsls	r5, r3, #30
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	460c      	mov	r4, r1
 800b7f2:	d507      	bpl.n	800b804 <__smakebuf_r+0x1c>
 800b7f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	6123      	str	r3, [r4, #16]
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	6163      	str	r3, [r4, #20]
 800b800:	b002      	add	sp, #8
 800b802:	bd70      	pop	{r4, r5, r6, pc}
 800b804:	ab01      	add	r3, sp, #4
 800b806:	466a      	mov	r2, sp
 800b808:	f7ff ffc8 	bl	800b79c <__swhatbuf_r>
 800b80c:	9900      	ldr	r1, [sp, #0]
 800b80e:	4605      	mov	r5, r0
 800b810:	4630      	mov	r0, r6
 800b812:	f7fd f9f1 	bl	8008bf8 <_malloc_r>
 800b816:	b948      	cbnz	r0, 800b82c <__smakebuf_r+0x44>
 800b818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b81c:	059a      	lsls	r2, r3, #22
 800b81e:	d4ef      	bmi.n	800b800 <__smakebuf_r+0x18>
 800b820:	f023 0303 	bic.w	r3, r3, #3
 800b824:	f043 0302 	orr.w	r3, r3, #2
 800b828:	81a3      	strh	r3, [r4, #12]
 800b82a:	e7e3      	b.n	800b7f4 <__smakebuf_r+0xc>
 800b82c:	89a3      	ldrh	r3, [r4, #12]
 800b82e:	6020      	str	r0, [r4, #0]
 800b830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b834:	81a3      	strh	r3, [r4, #12]
 800b836:	9b00      	ldr	r3, [sp, #0]
 800b838:	6163      	str	r3, [r4, #20]
 800b83a:	9b01      	ldr	r3, [sp, #4]
 800b83c:	6120      	str	r0, [r4, #16]
 800b83e:	b15b      	cbz	r3, 800b858 <__smakebuf_r+0x70>
 800b840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b844:	4630      	mov	r0, r6
 800b846:	f000 f81d 	bl	800b884 <_isatty_r>
 800b84a:	b128      	cbz	r0, 800b858 <__smakebuf_r+0x70>
 800b84c:	89a3      	ldrh	r3, [r4, #12]
 800b84e:	f023 0303 	bic.w	r3, r3, #3
 800b852:	f043 0301 	orr.w	r3, r3, #1
 800b856:	81a3      	strh	r3, [r4, #12]
 800b858:	89a3      	ldrh	r3, [r4, #12]
 800b85a:	431d      	orrs	r5, r3
 800b85c:	81a5      	strh	r5, [r4, #12]
 800b85e:	e7cf      	b.n	800b800 <__smakebuf_r+0x18>

0800b860 <_fstat_r>:
 800b860:	b538      	push	{r3, r4, r5, lr}
 800b862:	4d07      	ldr	r5, [pc, #28]	; (800b880 <_fstat_r+0x20>)
 800b864:	2300      	movs	r3, #0
 800b866:	4604      	mov	r4, r0
 800b868:	4608      	mov	r0, r1
 800b86a:	4611      	mov	r1, r2
 800b86c:	602b      	str	r3, [r5, #0]
 800b86e:	f7f6 fc3c 	bl	80020ea <_fstat>
 800b872:	1c43      	adds	r3, r0, #1
 800b874:	d102      	bne.n	800b87c <_fstat_r+0x1c>
 800b876:	682b      	ldr	r3, [r5, #0]
 800b878:	b103      	cbz	r3, 800b87c <_fstat_r+0x1c>
 800b87a:	6023      	str	r3, [r4, #0]
 800b87c:	bd38      	pop	{r3, r4, r5, pc}
 800b87e:	bf00      	nop
 800b880:	200009a8 	.word	0x200009a8

0800b884 <_isatty_r>:
 800b884:	b538      	push	{r3, r4, r5, lr}
 800b886:	4d06      	ldr	r5, [pc, #24]	; (800b8a0 <_isatty_r+0x1c>)
 800b888:	2300      	movs	r3, #0
 800b88a:	4604      	mov	r4, r0
 800b88c:	4608      	mov	r0, r1
 800b88e:	602b      	str	r3, [r5, #0]
 800b890:	f7f6 fc3b 	bl	800210a <_isatty>
 800b894:	1c43      	adds	r3, r0, #1
 800b896:	d102      	bne.n	800b89e <_isatty_r+0x1a>
 800b898:	682b      	ldr	r3, [r5, #0]
 800b89a:	b103      	cbz	r3, 800b89e <_isatty_r+0x1a>
 800b89c:	6023      	str	r3, [r4, #0]
 800b89e:	bd38      	pop	{r3, r4, r5, pc}
 800b8a0:	200009a8 	.word	0x200009a8

0800b8a4 <_init>:
 800b8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a6:	bf00      	nop
 800b8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8aa:	bc08      	pop	{r3}
 800b8ac:	469e      	mov	lr, r3
 800b8ae:	4770      	bx	lr

0800b8b0 <_fini>:
 800b8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b2:	bf00      	nop
 800b8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8b6:	bc08      	pop	{r3}
 800b8b8:	469e      	mov	lr, r3
 800b8ba:	4770      	bx	lr
